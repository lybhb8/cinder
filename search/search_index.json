{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])"},"docs":[{"location":"","text":"\u524d\u8a00 \u7b2c\u4e00\u90e8\u5206\uff1a\u5b66\u4e60 Go \u8bed\u8a00 \u7b2c1\u7ae0\uff1aGo \u8bed\u8a00\u7684\u8d77\u6e90\uff0c\u53d1\u5c55\u4e0e\u666e\u53ca 1.1 \u8d77\u6e90\u4e0e\u53d1\u5c55 1.2 \u8bed\u8a00\u7684\u4e3b\u8981\u7279\u6027\u4e0e\u53d1\u5c55\u7684\u73af\u5883\u548c\u5f71\u54cd\u56e0\u7d20 \u7b2c2\u7ae0\uff1a\u5b89\u88c5\u4e0e\u8fd0\u884c\u73af\u5883 2.1 \u5e73\u53f0\u4e0e\u67b6\u6784 2.2 Go \u73af\u5883\u53d8\u91cf 2.3 \u5728 Linux \u4e0a\u5b89\u88c5 Go 2.4 \u5728 Mac OS X \u4e0a\u5b89\u88c5 Go 2.5 \u5728 Windows \u4e0a\u5b89\u88c5 Go 2.6 \u5b89\u88c5\u76ee\u5f55\u6e05\u5355 2.7 Go \u8fd0\u884c\u65f6\uff08runtime\uff09 2.8 Go \u89e3\u91ca\u5668 \u7b2c3\u7ae0\uff1a \u7f16\u8f91\u5668\u3001\u96c6\u6210\u5f00\u53d1\u73af\u5883\u4e0e\u5176\u5b83\u5de5\u5177 3.1 Go \u5f00\u53d1\u73af\u5883\u7684\u57fa\u672c\u8981\u6c42 3.2 \u7f16\u8f91\u5668\u548c\u96c6\u6210\u5f00\u53d1\u73af\u5883 3.3 \u8c03\u8bd5\u5668 3.4 \u6784\u5efa\u5e76\u8fd0\u884c Go \u7a0b\u5e8f 3.5 \u683c\u5f0f\u5316\u4ee3\u7801 3.6 \u751f\u6210\u4ee3\u7801\u6587\u6863 3.7 \u5176\u5b83\u5de5\u5177 3.8 Go \u6027\u80fd\u8bf4\u660e 3.9 \u4e0e\u5176\u5b83\u8bed\u8a00\u8fdb\u884c\u4ea4\u4e92 \u7b2c\u4e8c\u90e8\u5206\uff1a\u8bed\u8a00\u7684\u6838\u5fc3\u7ed3\u6784\u4e0e\u6280\u672f \u7b2c4\u7ae0\uff1a\u57fa\u672c\u7ed3\u6784\u548c\u57fa\u672c\u6570\u636e\u7c7b\u578b 4.1 \u6587\u4ef6\u540d\u3001\u5173\u952e\u5b57\u4e0e\u6807\u8bc6\u7b26 4.2 Go \u7a0b\u5e8f\u7684\u57fa\u672c\u7ed3\u6784\u548c\u8981\u7d20 4.3 \u5e38\u91cf 4.4 \u53d8\u91cf 4.5 \u57fa\u672c\u7c7b\u578b\u548c\u8fd0\u7b97\u7b26 4.6 \u5b57\u7b26\u4e32 4.7 strings \u548c strconv \u5305 4.8 \u65f6\u95f4\u548c\u65e5\u671f 4.9 \u6307\u9488 \u7b2c5\u7ae0\uff1a \u63a7\u5236\u7ed3\u6784 5.1 if-else \u7ed3\u6784 5.2 \u6d4b\u8bd5\u591a\u8fd4\u56de\u503c\u51fd\u6570\u7684\u9519\u8bef 5.3 switch \u7ed3\u6784 5.4 for \u7ed3\u6784 5.5 Break \u4e0e continue 5.6 \u6807\u7b7e\u4e0e goto \u7b2c6\u7ae0\uff1a \u51fd\u6570\uff08function\uff09 6.1 \u4ecb\u7ecd 6.2 \u51fd\u6570\u53c2\u6570\u4e0e\u8fd4\u56de\u503c 6.3 \u4f20\u9012\u53d8\u957f\u53c2\u6570 6.4 defer \u548c\u8ffd\u8e2a 6.5 \u5185\u7f6e\u51fd\u6570 6.6 \u9012\u5f52\u51fd\u6570 6.7 \u5c06\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570 6.8 \u95ed\u5305 6.9 \u5e94\u7528\u95ed\u5305\uff1a\u5c06\u51fd\u6570\u4f5c\u4e3a\u8fd4\u56de\u503c 6.10 \u4f7f\u7528\u95ed\u5305\u8c03\u8bd5 6.11 \u8ba1\u7b97\u51fd\u6570\u6267\u884c\u65f6\u95f4 6.12 \u901a\u8fc7\u5185\u5b58\u7f13\u5b58\u6765\u63d0\u5347\u6027\u80fd \u7b2c7\u7ae0\uff1a \u6570\u7ec4\u4e0e\u5207\u7247 7.1 \u58f0\u660e\u548c\u521d\u59cb\u5316 7.2 \u5207\u7247 7.3 For-range \u7ed3\u6784 7.4 \u5207\u7247\u91cd\u7ec4\uff08reslice\uff09 7.5 \u5207\u7247\u7684\u590d\u5236\u4e0e\u8ffd\u52a0 7.6 \u5b57\u7b26\u4e32\u3001\u6570\u7ec4\u548c\u5207\u7247\u7684\u5e94\u7528 \u7b2c8\u7ae0\uff1a Map 8.1 \u58f0\u660e\u3001\u521d\u59cb\u5316\u548c make 8.2 \u6d4b\u8bd5\u952e\u503c\u5bf9\u662f\u5426\u5b58\u5728\u53ca\u5220\u9664\u5143\u7d20 8.3 for-range \u7684\u914d\u5957\u7528\u6cd5 8.4 map \u7c7b\u578b\u7684\u5207\u7247 8.5 map \u7684\u6392\u5e8f 8.6 \u5c06 map \u7684\u952e\u503c\u5bf9\u8c03 \u7b2c9\u7ae0\uff1a \u5305\uff08package\uff09 9.1 \u6807\u51c6\u5e93\u6982\u8ff0 9.2 regexp \u5305 9.3 \u9501\u548c sync \u5305 9.4 \u7cbe\u5bc6\u8ba1\u7b97\u548c big \u5305 9.5 \u81ea\u5b9a\u4e49\u5305\u548c\u53ef\u89c1\u6027 9.6 \u4e3a\u81ea\u5b9a\u4e49\u5305\u4f7f\u7528 godoc 9.7 \u4f7f\u7528 go install \u5b89\u88c5\u81ea\u5b9a\u4e49\u5305 9.8 \u81ea\u5b9a\u4e49\u5305\u7684\u76ee\u5f55\u7ed3\u6784\u3001go install \u548c go test 9.9 \u901a\u8fc7 Git \u6253\u5305\u548c\u5b89\u88c5 9.10 Go \u7684\u5916\u90e8\u5305\u548c\u9879\u76ee 9.11 \u5728 Go \u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5916\u90e8\u5e93 \u7b2c10\u7ae0\uff1a \u7ed3\u6784\uff08struct\uff09\u4e0e\u65b9\u6cd5\uff08method\uff09 10.1 \u7ed3\u6784\u4f53\u5b9a\u4e49 10.2 \u4f7f\u7528\u5de5\u5382\u65b9\u6cd5\u521b\u5efa\u7ed3\u6784\u4f53\u5b9e\u4f8b 10.3 \u4f7f\u7528\u81ea\u5b9a\u4e49\u5305\u4e2d\u7684\u7ed3\u6784\u4f53 10.4 \u5e26\u6807\u7b7e\u7684\u7ed3\u6784\u4f53 10.5 \u533f\u540d\u5b57\u6bb5\u548c\u5185\u5d4c\u7ed3\u6784\u4f53 10.6 \u65b9\u6cd5 10.7 \u7c7b\u578b\u7684 String() \u65b9\u6cd5\u548c\u683c\u5f0f\u5316\u63cf\u8ff0\u7b26 10.8 \u5783\u573e\u56de\u6536\u548c SetFinalizer \u7b2c11\u7ae0\uff1a \u63a5\u53e3\uff08interface\uff09\u4e0e\u53cd\u5c04\uff08reflection\uff09 11.1 \u63a5\u53e3\u662f\u4ec0\u4e48 11.2 \u63a5\u53e3\u5d4c\u5957\u63a5\u53e3 11.3 \u7c7b\u578b\u65ad\u8a00\uff1a\u5982\u4f55\u68c0\u6d4b\u548c\u8f6c\u6362\u63a5\u53e3\u53d8\u91cf\u7684\u7c7b\u578b 11.4 \u7c7b\u578b\u5224\u65ad\uff1atype-switch 11.5 \u6d4b\u8bd5\u4e00\u4e2a\u503c\u662f\u5426\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3 11.6 \u4f7f\u7528\u65b9\u6cd5\u96c6\u4e0e\u63a5\u53e3 11.7 \u7b2c\u4e00\u4e2a\u4f8b\u5b50\uff1a\u4f7f\u7528 Sorter \u63a5\u53e3\u6392\u5e8f 11.8 \u7b2c\u4e8c\u4e2a\u4f8b\u5b50\uff1a\u8bfb\u548c\u5199 11.9 \u7a7a\u63a5\u53e3 11.10 \u53cd\u5c04\u5305 11.11 Printf \u548c\u53cd\u5c04 11.12 \u63a5\u53e3\u4e0e\u52a8\u6001\u7c7b\u578b 11.13 \u603b\u7ed3\uff1aGo \u4e2d\u7684\u9762\u5411\u5bf9\u8c61 11.14 \u7ed3\u6784\u4f53\u3001\u96c6\u5408\u548c\u9ad8\u9636\u51fd\u6570 \u7b2c\u4e09\u90e8\u5206\uff1aGo \u9ad8\u7ea7\u7f16\u7a0b \u7b2c12\u7ae0\uff1a \u8bfb\u5199\u6570\u636e 12.1 \u8bfb\u53d6\u7528\u6237\u7684\u8f93\u5165 12.2 \u6587\u4ef6\u8bfb\u5199 12.3 \u6587\u4ef6\u62f7\u8d1d 12.4 \u4ece\u547d\u4ee4\u884c\u8bfb\u53d6\u53c2\u6570 12.5 \u7528 buffer \u8bfb\u53d6\u6587\u4ef6 12.6 \u7528\u5207\u7247\u8bfb\u5199\u6587\u4ef6 12.7 \u7528 defer \u5173\u95ed\u6587\u4ef6 12.8 \u4f7f\u7528\u63a5\u53e3\u7684\u5b9e\u9645\u4f8b\u5b50\uff1afmt.Fprintf 12.9 \u683c\u5f0f\u5316 JSON \u6570\u636e 12.10 XML \u6570\u636e\u683c\u5f0f 12.11 \u7528 Gob \u4f20\u8f93\u6570\u636e 12.12 Go \u4e2d\u7684\u5bc6\u7801\u5b66 \u7b2c13\u7ae0\uff1a \u9519\u8bef\u5904\u7406\u4e0e\u6d4b\u8bd5 13.1 \u9519\u8bef\u5904\u7406 13.2 \u8fd0\u884c\u65f6\u5f02\u5e38\u548c panic 13.3 \u4ece panic \u4e2d\u6062\u590d\uff08Recover\uff09 13.4 \u81ea\u5b9a\u4e49\u5305\u4e2d\u7684\u9519\u8bef\u5904\u7406\u548c panicking 13.5 \u4e00\u79cd\u7528\u95ed\u5305\u5904\u7406\u9519\u8bef\u7684\u6a21\u5f0f 13.6 \u542f\u52a8\u5916\u90e8\u547d\u4ee4\u548c\u7a0b\u5e8f 13.7 Go \u4e2d\u7684\u5355\u5143\u6d4b\u8bd5\u548c\u57fa\u51c6\u6d4b\u8bd5 13.8 \u6d4b\u8bd5\u7684\u5177\u4f53\u4f8b\u5b50 13.9 \u7528\uff08\u6d4b\u8bd5\u6570\u636e\uff09\u8868\u9a71\u52a8\u6d4b\u8bd5 13.10 \u6027\u80fd\u8c03\u8bd5\uff1a\u5206\u6790\u5e76\u4f18\u5316 Go \u7a0b\u5e8f","title":"Home"},{"location":"01.1/","text":"1.1 \u8d77\u6e90\u4e0e\u53d1\u5c55 \u00b6 Go \u8bed\u8a00\u8d77\u6e90 2007 \u5e74\uff0c\u5e76\u4e8e 2009 \u5e74\u6b63\u5f0f\u5bf9\u5916\u53d1\u5e03\u3002\u5b83\u4ece 2009 \u5e74 9 \u6708 21 \u65e5\u5f00\u59cb\u4f5c\u4e3a\u8c37\u6b4c\u516c\u53f8 20% \u517c\u804c\u9879\u76ee\uff0c\u5373\u76f8\u5173\u5458\u5de5\u5229\u7528 20% \u7684\u7a7a\u4f59\u65f6\u95f4\u6765\u53c2\u4e0e Go \u8bed\u8a00\u7684\u7814\u53d1\u5de5\u4f5c\u3002\u8be5\u9879\u76ee\u7684\u4e09\u4f4d\u9886\u5bfc\u8005\u5747\u662f\u8457\u540d\u7684 IT \u5de5\u7a0b\u5e08\uff1aRobert Griesemer\uff0c\u53c2\u4e0e\u5f00\u53d1 Java HotSpot \u865a\u62df\u673a\uff1bRob Pike\uff0cGo \u8bed\u8a00\u9879\u76ee\u603b\u8d1f\u8d23\u4eba\uff0c\u8d1d\u5c14\u5b9e\u9a8c\u5ba4 Unix \u56e2\u961f\u6210\u5458\uff0c\u53c2\u4e0e\u7684\u9879\u76ee\u5305\u62ec Plan 9\uff0cInferno \u64cd\u4f5c\u7cfb\u7edf\u548c Limbo \u7f16\u7a0b\u8bed\u8a00\uff1bKen Thompson\uff0c\u8d1d\u5c14\u5b9e\u9a8c\u5ba4 Unix \u56e2\u961f\u6210\u5458\uff0cC \u8bed\u8a00\u3001Unix \u548c Plan 9 \u7684\u521b\u59cb\u4eba\u4e4b\u4e00\uff0c\u4e0e Rob Pike \u5171\u540c\u5f00\u53d1\u4e86 UTF-8 \u5b57\u7b26\u96c6\u89c4\u8303\u3002\u81ea 2008 \u5e74 1 \u6708\u8d77\uff0cKen Thompson \u5c31\u5f00\u59cb\u7814\u53d1\u4e00\u6b3e\u4ee5 C \u8bed\u8a00\u4e3a\u76ee\u6807\u7ed3\u679c\u7684\u7f16\u8bd1\u5668\u6765\u62d3\u5c55 Go \u8bed\u8a00\u7684\u8bbe\u8ba1\u601d\u60f3\u3002 \u8fd9\u662f\u4e00\u4e2a\u7531\u8ba1\u7b97\u673a\u9886\u57df \u201c\u53d1\u660e\u4e4b\u7236\u201d \u6240\u7ec4\u6210\u7684\u9ec4\u91d1\u56e2\u961f\uff0c\u4ed6\u4eec\u5bf9\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\uff0c\u64cd\u4f5c\u7cfb\u7edf\u548c\u5e76\u884c\u90fd\u6709\u7740\u975e\u5e38\u6df1\u523b\u7684\u89c1\u89e3 \u56fe 1.1 Go \u8bed\u8a00\u8bbe\u8ba1\u8005\uff1aGriesemer\u3001Thompson \u548c Pike \u5728 2008 \u5e74\u5e74\u4e2d\uff0cGo \u8bed\u8a00\u7684\u8bbe\u8ba1\u5de5\u4f5c\u63a5\u8fd1\u5c3e\u58f0\uff0c\u4e00\u4e9b\u5458\u5de5\u5f00\u59cb\u4ee5\u5168\u804c\u5de5\u4f5c\u72b6\u6001\u6295\u5165\u5230\u8fd9\u4e2a\u9879\u76ee\u7684\u7f16\u8bd1\u5668\u548c\u8fd0\u884c\u5b9e\u73b0\u4e0a\u3002Ian Lance Taylor \u4e5f\u52a0\u5165\u5230\u4e86\u5f00\u53d1\u56e2\u961f\u4e2d\uff0c\u5e76\u4e8e 2008 \u5e74 5 \u6708\u521b\u5efa\u4e86\u4e00\u4e2a gcc \u524d\u7aef\u3002 Russ Cox \u52a0\u5165\u5f00\u53d1\u56e2\u961f\u540e\u7740\u624b\u8bed\u8a00\u548c\u7c7b\u5e93\u65b9\u9762\u7684\u5f00\u53d1\uff0c\u4e5f\u5c31\u662f Go \u8bed\u8a00\u7684\u6807\u51c6\u5305\u3002\u5728 2009 \u5e74 10 \u6708 30 \u65e5\uff0cRob Pike \u4ee5 Google Techtalk \u7684\u5f62\u5f0f\u7b2c\u4e00\u6b21\u5411\u4eba\u4eec\u5ba3\u544a\u4e86 Go \u8bed\u8a00\u7684\u5b58\u5728\u3002 \u76f4\u5230 2009 \u5e74 11 \u6708 10 \u65e5\uff0c\u5f00\u53d1\u56e2\u961f\u5c06 Go \u8bed\u8a00\u9879\u76ee\u4ee5 BSD-style \u6388\u6743\uff08\u5b8c\u5168\u5f00\u6e90\uff09\u6b63\u5f0f\u516c\u5e03\u4e86 Linux \u548c Mac OS X \u5e73\u53f0\u4e0a\u7684\u7248\u672c\u3002Hector Chu \u4e8e\u540c\u5e74 11 \u6708 22 \u65e5\u516c\u5e03\u4e86 Windows \u7248\u672c\u3002 \u4f5c\u4e3a\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\uff0cGo \u8bed\u8a00\u501f\u52a9\u5f00\u6e90\u793e\u533a\u7684\u6709\u751f\u529b\u91cf\u8fbe\u5230\u5feb\u901f\u5730\u53d1\u5c55\uff0c\u5e76\u5438\u5f15\u66f4\u591a\u7684\u5f00\u53d1\u8005\u6765\u4f7f\u7528\u5e76\u6539\u5584\u5b83\u3002\u81ea\u8be5\u5f00\u6e90\u9879\u76ee\u53d1\u5e03\u4ee5\u6765\uff0c\u8d85\u8fc7 200 \u540d\u975e\u8c37\u6b4c\u5458\u5de5\u7684\u8d21\u732e\u8005\u5bf9 Go \u8bed\u8a00\u6838\u5fc3\u90e8\u5206\u63d0\u4ea4\u4e86\u8d85\u8fc7 1000 \u4e2a\u4fee\u6539\u5efa\u8bae\u3002\u5728\u8fc7\u53bb\u7684 18 \u4e2a\u6708\u91cc\uff0c\u53c8\u6709 150 \u5f00\u53d1\u8005\u8d21\u732e\u4e86\u65b0\u7684\u6838\u5fc3\u4ee3\u7801\u3002\u8fd9\u4fe8\u7136\u5f62\u6210\u4e86\u4e16\u754c\u4e0a\u6700\u5927\u7684\u5f00\u6e90\u56e2\u961f\uff0c\u5e76\u4f7f\u8be5\u9879\u76ee\u8dfb\u8eab Ohloh \u524d 2% \u7684\u884c\u5217\u3002\u5927\u7ea6\u5728 2011 \u5e74 4 \u6708 10 \u65e5\uff0c\u8c37\u6b4c\u5f00\u59cb\u62bd\u8c03\u5458\u5de5\u8fdb\u5165\u5168\u804c\u5f00\u53d1 Go \u8bed\u8a00\u9879\u76ee\u3002\u5f00\u6e90\u5316\u7684\u8bed\u8a00\u663e\u7136\u80fd\u591f\u8ba9\u66f4\u591a\u7684\u5f00\u53d1\u8005\u53c2\u4e0e\u5176\u4e2d\u5e76\u52a0\u901f\u5b83\u7684\u53d1\u5c55\u901f\u5ea6\u3002Andrew Gerrand \u5728 2010 \u5e74\u52a0\u5165\u5230\u5f00\u53d1\u56e2\u961f\u4e2d\u6210\u4e3a\u5171\u540c\u5f00\u53d1\u8005\u4e0e\u652f\u6301\u8005\u3002 \u5728 Go \u8bed\u8a00\u5728 2010 \u5e74 1 \u6708 8 \u65e5\u88ab Tiobe \uff08\u95fb\u540d\u4e8e\u5b83\u7684\u7f16\u7a0b\u8bed\u8a00\u6d41\u884c\u7a0b\u5ea6\u6392\u540d\uff09\u5ba3\u5e03\u4e3a \u201c2009 \u5e74\u5e74\u5ea6\u8bed\u8a00\u201d \u540e\uff0c\u5f15\u8d77\u5404\u754c\u5f88\u5927\u7684\u53cd\u54cd\u3002\u76ee\u524d Go \u8bed\u8a00\u5728\u8fd9\u9879\u6392\u540d\u4e2d\u7684\u6700\u9ad8\u8bb0\u5f55\u662f\u5728 2017 \u5e74 1 \u6708\u521b\u4e0b\u7684\u7b2c13\u540d\uff0c\u6d41\u884c\u7a0b\u5ea6 2.325%\u3002 \u65f6\u95f4\u8f74\uff1a \u00b6 2007 \u5e74 9 \u6708 21 \u65e5\uff1a\u96cf\u5f62\u8bbe\u8ba1 2009 \u5e74 11 \u6708 10\u65e5\uff1a\u9996\u6b21\u516c\u5f00\u53d1\u5e03 2010 \u5e74 1 \u6708 8 \u65e5\uff1a\u5f53\u9009 2009 \u5e74\u5e74\u5ea6\u8bed\u8a00 2010 \u5e74 5 \u6708\uff1a\u8c37\u6b4c\u6295\u5165\u4f7f\u7528 2011 \u5e74 5 \u6708 5 \u65e5\uff1aGoogle App Engine \u652f\u6301 Go \u8bed\u8a00 \u4ece 2010 \u5e74 5 \u6708\u8d77\uff0c\u8c37\u6b4c\u5f00\u59cb\u5c06 Go \u8bed\u8a00\u6295\u5165\u5230\u540e\u7aef\u57fa\u7840\u8bbe\u65bd\u7684\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c\u4f8b\u5982\u5f00\u53d1\u7528\u4e8e\u7ba1\u7406\u540e\u7aef\u590d\u6742\u73af\u5883\u7684\u9879\u76ee\u3002\u6709\u53e5\u8bdd\u53eb \u201c\u5403\u4f60\u81ea\u5df1\u7684\u72d7\u98df\u201d\uff0c\u8fd9\u4e5f\u4f53\u73b0\u4e86\u8c37\u6b4c\u786e\u5b9e\u60f3\u8981\u6295\u8d44\u8fd9\u95e8\u8bed\u8a00\uff0c\u5e76\u8ba4\u4e3a\u5b83\u662f\u6709\u751f\u4ea7\u4ef7\u503c\u7684\u3002 Go \u8bed\u8a00\u7684\u5b98\u65b9\u7f51\u7ad9\u662f golang.org \uff0c\u8fd9\u4e2a\u7ad9\u70b9\u91c7\u7528 Python \u4f5c\u4e3a\u524d\u7aef\uff0c\u5e76\u4e14\u4f7f\u7528 Go \u8bed\u8a00\u81ea\u5e26\u7684\u5de5\u5177 godoc \u8fd0\u884c\u5728 Google App Engine \u4e0a\u6765\u4f5c\u4e3a Web \u670d\u52a1\u5668\u63d0\u4f9b\u6587\u672c\u5185\u5bb9\u3002\u5728\u5b98\u7f51\u7684\u9996\u9875\u6709\u4e00\u4e2a\u529f\u80fd\u53eb\u505a Go Playground\uff0c\u662f\u4e00\u4e2a Go \u4ee3\u7801\u7684\u7b80\u5355\u7f16\u8f91\u5668\u7684\u6c99\u76d2\uff0c\u5b83\u53ef\u4ee5\u5728\u6ca1\u6709\u5b89\u88c5 Go \u8bed\u8a00\u7684\u60c5\u51b5\u4e0b\u5728\u4f60\u7684\u6d4f\u89c8\u5668\u4e2d\u7f16\u8bd1\u5e76\u8fd0\u884c Go\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e9b\u793a\u4f8b\uff0c\u5176\u4e2d\u5305\u62ec\u56fd\u9645\u60ef\u4f8b \u201cHello, World!\u201d\u3002 \u66f4\u591a\u7684\u4fe1\u606f\u8be6\u89c1 github.com/golang/go \uff0cGo \u9879\u76ee Bug \u8ffd\u8e2a\u548c\u529f\u80fd\u9884\u671f\u8be6\u89c1 github.com/golang/go/issues \u3002 Go \u901a\u8fc7\u4ee5\u4e0b\u7684 Logo \u6765\u5c55\u793a\u5b83\u7684\u901f\u5ea6\uff0c\u5e76\u4ee5\u56ca\u5730\u9f20 (Gopher) \u4f5c\u4e3a\u5b83\u7684\u5409\u7965\u7269\u3002 \u56fe1.2 Go \u8bed\u8a00 Logo \u8c37\u6b4c\u90ae\u4ef6\u5217\u8868 golang-nuts \u975e\u5e38\u6d3b\u8dc3\uff0c\u6bcf\u5929\u7684\u8ba8\u8bba\u548c\u95ee\u9898\u89e3\u7b54\u6570\u4ee5\u767e\u8ba1\u3002 \u5173\u4e8e Go \u8bed\u8a00\u5728 Google App Engine \u7684\u5e94\u7528\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u5355\u72ec\u7684\u90ae\u4ef6\u5217\u8868 google-appengine-go \uff0c\u4e0d\u8fc7 2 \u4e2a\u90ae\u4ef6\u5217\u8868\u7684\u8ba8\u8bba\u5185\u5bb9\u5e76\u4e0d\u662f\u5206\u5f97\u5f88\u6e05\u695a\uff0c\u90fd\u4f1a\u6d89\u53ca\u5230\u76f8\u5173\u7684\u8bdd\u9898\u3002 go-lang.cat-v.org/ \u662f Go \u8bed\u8a00\u5f00\u53d1\u793e\u533a\u7684\u8d44\u6e90\u7ad9\uff0c irc.freenode.net \u7684 #go-nuts \u662f\u5b98\u65b9\u7684 Go IRC \u9891\u9053\u3002 @golang \u662f Go \u8bed\u8a00\u5728 Twitter \u7684\u5b98\u65b9\u5e10\u53f7\uff0c\u5927\u5bb6\u4e00\u822c\u4f7f\u7528 #golang \u4f5c\u4e3a\u8bdd\u9898\u6807\u7b7e\u3002 \u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u5728 Linked-in \u7684\u5c0f\u7ec4\uff1a www.linkedin.com/groups?gid=2524765&trk=myg_ugrp_ovr \u3002 Go \u7f16\u7a0b\u8bed\u8a00\u7684\u7ef4\u57fa\u767e\u79d1\uff1a en.wikipedia.org/wiki/Go_(programming_language) Go \u8bed\u8a00\u76f8\u5173\u8d44\u6e90\u7684\u641c\u7d22\u5f15\u64ce\u9875\u9762\uff1a gowalker.org Go \u8bed\u8a00\u8fd8\u6709\u4e00\u4e2a\u8fd0\u884c\u5728 Google App Engine \u4e0a\u7684 Go Tour \uff0c\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6267\u884c\u547d\u4ee4 go install go-tour.googlecode.com/hg/gotour \u5b89\u88c5\u5230\u4f60\u7684\u672c\u5730\u673a\u5668\u4e0a\u3002\u5bf9\u4e8e\u4e2d\u6587\u8bfb\u8005\uff0c\u53ef\u4ee5\u8bbf\u95ee\u8be5\u6307\u5357\u7684 \u4e2d\u6587\u7248\u672c \uff0c\u6216\u901a\u8fc7\u547d\u4ee4 go install https://bitbucket.org/mikespook/go-tour-zh/gotour \u8fdb\u884c\u5b89\u88c5\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u90e8\u5206\uff1a \u524d\u8a00 \u4e0b\u4e00\u8282: \u8bed\u8a00\u7684\u4e3b\u8981\u7279\u6027\u4e0e\u53d1\u5c55\u7684\u73af\u5883\u548c\u5f71\u54cd\u56e0\u7d20","title":"1.1 \u8d77\u6e90\u4e0e\u53d1\u5c55"},{"location":"01.1/#11","text":"Go \u8bed\u8a00\u8d77\u6e90 2007 \u5e74\uff0c\u5e76\u4e8e 2009 \u5e74\u6b63\u5f0f\u5bf9\u5916\u53d1\u5e03\u3002\u5b83\u4ece 2009 \u5e74 9 \u6708 21 \u65e5\u5f00\u59cb\u4f5c\u4e3a\u8c37\u6b4c\u516c\u53f8 20% \u517c\u804c\u9879\u76ee\uff0c\u5373\u76f8\u5173\u5458\u5de5\u5229\u7528 20% \u7684\u7a7a\u4f59\u65f6\u95f4\u6765\u53c2\u4e0e Go \u8bed\u8a00\u7684\u7814\u53d1\u5de5\u4f5c\u3002\u8be5\u9879\u76ee\u7684\u4e09\u4f4d\u9886\u5bfc\u8005\u5747\u662f\u8457\u540d\u7684 IT \u5de5\u7a0b\u5e08\uff1aRobert Griesemer\uff0c\u53c2\u4e0e\u5f00\u53d1 Java HotSpot \u865a\u62df\u673a\uff1bRob Pike\uff0cGo \u8bed\u8a00\u9879\u76ee\u603b\u8d1f\u8d23\u4eba\uff0c\u8d1d\u5c14\u5b9e\u9a8c\u5ba4 Unix \u56e2\u961f\u6210\u5458\uff0c\u53c2\u4e0e\u7684\u9879\u76ee\u5305\u62ec Plan 9\uff0cInferno \u64cd\u4f5c\u7cfb\u7edf\u548c Limbo \u7f16\u7a0b\u8bed\u8a00\uff1bKen Thompson\uff0c\u8d1d\u5c14\u5b9e\u9a8c\u5ba4 Unix \u56e2\u961f\u6210\u5458\uff0cC \u8bed\u8a00\u3001Unix \u548c Plan 9 \u7684\u521b\u59cb\u4eba\u4e4b\u4e00\uff0c\u4e0e Rob Pike \u5171\u540c\u5f00\u53d1\u4e86 UTF-8 \u5b57\u7b26\u96c6\u89c4\u8303\u3002\u81ea 2008 \u5e74 1 \u6708\u8d77\uff0cKen Thompson \u5c31\u5f00\u59cb\u7814\u53d1\u4e00\u6b3e\u4ee5 C \u8bed\u8a00\u4e3a\u76ee\u6807\u7ed3\u679c\u7684\u7f16\u8bd1\u5668\u6765\u62d3\u5c55 Go \u8bed\u8a00\u7684\u8bbe\u8ba1\u601d\u60f3\u3002 \u8fd9\u662f\u4e00\u4e2a\u7531\u8ba1\u7b97\u673a\u9886\u57df \u201c\u53d1\u660e\u4e4b\u7236\u201d \u6240\u7ec4\u6210\u7684\u9ec4\u91d1\u56e2\u961f\uff0c\u4ed6\u4eec\u5bf9\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\uff0c\u64cd\u4f5c\u7cfb\u7edf\u548c\u5e76\u884c\u90fd\u6709\u7740\u975e\u5e38\u6df1\u523b\u7684\u89c1\u89e3 \u56fe 1.1 Go \u8bed\u8a00\u8bbe\u8ba1\u8005\uff1aGriesemer\u3001Thompson \u548c Pike \u5728 2008 \u5e74\u5e74\u4e2d\uff0cGo \u8bed\u8a00\u7684\u8bbe\u8ba1\u5de5\u4f5c\u63a5\u8fd1\u5c3e\u58f0\uff0c\u4e00\u4e9b\u5458\u5de5\u5f00\u59cb\u4ee5\u5168\u804c\u5de5\u4f5c\u72b6\u6001\u6295\u5165\u5230\u8fd9\u4e2a\u9879\u76ee\u7684\u7f16\u8bd1\u5668\u548c\u8fd0\u884c\u5b9e\u73b0\u4e0a\u3002Ian Lance Taylor \u4e5f\u52a0\u5165\u5230\u4e86\u5f00\u53d1\u56e2\u961f\u4e2d\uff0c\u5e76\u4e8e 2008 \u5e74 5 \u6708\u521b\u5efa\u4e86\u4e00\u4e2a gcc \u524d\u7aef\u3002 Russ Cox \u52a0\u5165\u5f00\u53d1\u56e2\u961f\u540e\u7740\u624b\u8bed\u8a00\u548c\u7c7b\u5e93\u65b9\u9762\u7684\u5f00\u53d1\uff0c\u4e5f\u5c31\u662f Go \u8bed\u8a00\u7684\u6807\u51c6\u5305\u3002\u5728 2009 \u5e74 10 \u6708 30 \u65e5\uff0cRob Pike \u4ee5 Google Techtalk \u7684\u5f62\u5f0f\u7b2c\u4e00\u6b21\u5411\u4eba\u4eec\u5ba3\u544a\u4e86 Go \u8bed\u8a00\u7684\u5b58\u5728\u3002 \u76f4\u5230 2009 \u5e74 11 \u6708 10 \u65e5\uff0c\u5f00\u53d1\u56e2\u961f\u5c06 Go \u8bed\u8a00\u9879\u76ee\u4ee5 BSD-style \u6388\u6743\uff08\u5b8c\u5168\u5f00\u6e90\uff09\u6b63\u5f0f\u516c\u5e03\u4e86 Linux \u548c Mac OS X \u5e73\u53f0\u4e0a\u7684\u7248\u672c\u3002Hector Chu \u4e8e\u540c\u5e74 11 \u6708 22 \u65e5\u516c\u5e03\u4e86 Windows \u7248\u672c\u3002 \u4f5c\u4e3a\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\uff0cGo \u8bed\u8a00\u501f\u52a9\u5f00\u6e90\u793e\u533a\u7684\u6709\u751f\u529b\u91cf\u8fbe\u5230\u5feb\u901f\u5730\u53d1\u5c55\uff0c\u5e76\u5438\u5f15\u66f4\u591a\u7684\u5f00\u53d1\u8005\u6765\u4f7f\u7528\u5e76\u6539\u5584\u5b83\u3002\u81ea\u8be5\u5f00\u6e90\u9879\u76ee\u53d1\u5e03\u4ee5\u6765\uff0c\u8d85\u8fc7 200 \u540d\u975e\u8c37\u6b4c\u5458\u5de5\u7684\u8d21\u732e\u8005\u5bf9 Go \u8bed\u8a00\u6838\u5fc3\u90e8\u5206\u63d0\u4ea4\u4e86\u8d85\u8fc7 1000 \u4e2a\u4fee\u6539\u5efa\u8bae\u3002\u5728\u8fc7\u53bb\u7684 18 \u4e2a\u6708\u91cc\uff0c\u53c8\u6709 150 \u5f00\u53d1\u8005\u8d21\u732e\u4e86\u65b0\u7684\u6838\u5fc3\u4ee3\u7801\u3002\u8fd9\u4fe8\u7136\u5f62\u6210\u4e86\u4e16\u754c\u4e0a\u6700\u5927\u7684\u5f00\u6e90\u56e2\u961f\uff0c\u5e76\u4f7f\u8be5\u9879\u76ee\u8dfb\u8eab Ohloh \u524d 2% \u7684\u884c\u5217\u3002\u5927\u7ea6\u5728 2011 \u5e74 4 \u6708 10 \u65e5\uff0c\u8c37\u6b4c\u5f00\u59cb\u62bd\u8c03\u5458\u5de5\u8fdb\u5165\u5168\u804c\u5f00\u53d1 Go \u8bed\u8a00\u9879\u76ee\u3002\u5f00\u6e90\u5316\u7684\u8bed\u8a00\u663e\u7136\u80fd\u591f\u8ba9\u66f4\u591a\u7684\u5f00\u53d1\u8005\u53c2\u4e0e\u5176\u4e2d\u5e76\u52a0\u901f\u5b83\u7684\u53d1\u5c55\u901f\u5ea6\u3002Andrew Gerrand \u5728 2010 \u5e74\u52a0\u5165\u5230\u5f00\u53d1\u56e2\u961f\u4e2d\u6210\u4e3a\u5171\u540c\u5f00\u53d1\u8005\u4e0e\u652f\u6301\u8005\u3002 \u5728 Go \u8bed\u8a00\u5728 2010 \u5e74 1 \u6708 8 \u65e5\u88ab Tiobe \uff08\u95fb\u540d\u4e8e\u5b83\u7684\u7f16\u7a0b\u8bed\u8a00\u6d41\u884c\u7a0b\u5ea6\u6392\u540d\uff09\u5ba3\u5e03\u4e3a \u201c2009 \u5e74\u5e74\u5ea6\u8bed\u8a00\u201d \u540e\uff0c\u5f15\u8d77\u5404\u754c\u5f88\u5927\u7684\u53cd\u54cd\u3002\u76ee\u524d Go \u8bed\u8a00\u5728\u8fd9\u9879\u6392\u540d\u4e2d\u7684\u6700\u9ad8\u8bb0\u5f55\u662f\u5728 2017 \u5e74 1 \u6708\u521b\u4e0b\u7684\u7b2c13\u540d\uff0c\u6d41\u884c\u7a0b\u5ea6 2.325%\u3002","title":"1.1 \u8d77\u6e90\u4e0e\u53d1\u5c55"},{"location":"01.1/#_1","text":"2007 \u5e74 9 \u6708 21 \u65e5\uff1a\u96cf\u5f62\u8bbe\u8ba1 2009 \u5e74 11 \u6708 10\u65e5\uff1a\u9996\u6b21\u516c\u5f00\u53d1\u5e03 2010 \u5e74 1 \u6708 8 \u65e5\uff1a\u5f53\u9009 2009 \u5e74\u5e74\u5ea6\u8bed\u8a00 2010 \u5e74 5 \u6708\uff1a\u8c37\u6b4c\u6295\u5165\u4f7f\u7528 2011 \u5e74 5 \u6708 5 \u65e5\uff1aGoogle App Engine \u652f\u6301 Go \u8bed\u8a00 \u4ece 2010 \u5e74 5 \u6708\u8d77\uff0c\u8c37\u6b4c\u5f00\u59cb\u5c06 Go \u8bed\u8a00\u6295\u5165\u5230\u540e\u7aef\u57fa\u7840\u8bbe\u65bd\u7684\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c\u4f8b\u5982\u5f00\u53d1\u7528\u4e8e\u7ba1\u7406\u540e\u7aef\u590d\u6742\u73af\u5883\u7684\u9879\u76ee\u3002\u6709\u53e5\u8bdd\u53eb \u201c\u5403\u4f60\u81ea\u5df1\u7684\u72d7\u98df\u201d\uff0c\u8fd9\u4e5f\u4f53\u73b0\u4e86\u8c37\u6b4c\u786e\u5b9e\u60f3\u8981\u6295\u8d44\u8fd9\u95e8\u8bed\u8a00\uff0c\u5e76\u8ba4\u4e3a\u5b83\u662f\u6709\u751f\u4ea7\u4ef7\u503c\u7684\u3002 Go \u8bed\u8a00\u7684\u5b98\u65b9\u7f51\u7ad9\u662f golang.org \uff0c\u8fd9\u4e2a\u7ad9\u70b9\u91c7\u7528 Python \u4f5c\u4e3a\u524d\u7aef\uff0c\u5e76\u4e14\u4f7f\u7528 Go \u8bed\u8a00\u81ea\u5e26\u7684\u5de5\u5177 godoc \u8fd0\u884c\u5728 Google App Engine \u4e0a\u6765\u4f5c\u4e3a Web \u670d\u52a1\u5668\u63d0\u4f9b\u6587\u672c\u5185\u5bb9\u3002\u5728\u5b98\u7f51\u7684\u9996\u9875\u6709\u4e00\u4e2a\u529f\u80fd\u53eb\u505a Go Playground\uff0c\u662f\u4e00\u4e2a Go \u4ee3\u7801\u7684\u7b80\u5355\u7f16\u8f91\u5668\u7684\u6c99\u76d2\uff0c\u5b83\u53ef\u4ee5\u5728\u6ca1\u6709\u5b89\u88c5 Go \u8bed\u8a00\u7684\u60c5\u51b5\u4e0b\u5728\u4f60\u7684\u6d4f\u89c8\u5668\u4e2d\u7f16\u8bd1\u5e76\u8fd0\u884c Go\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e9b\u793a\u4f8b\uff0c\u5176\u4e2d\u5305\u62ec\u56fd\u9645\u60ef\u4f8b \u201cHello, World!\u201d\u3002 \u66f4\u591a\u7684\u4fe1\u606f\u8be6\u89c1 github.com/golang/go \uff0cGo \u9879\u76ee Bug \u8ffd\u8e2a\u548c\u529f\u80fd\u9884\u671f\u8be6\u89c1 github.com/golang/go/issues \u3002 Go \u901a\u8fc7\u4ee5\u4e0b\u7684 Logo \u6765\u5c55\u793a\u5b83\u7684\u901f\u5ea6\uff0c\u5e76\u4ee5\u56ca\u5730\u9f20 (Gopher) \u4f5c\u4e3a\u5b83\u7684\u5409\u7965\u7269\u3002 \u56fe1.2 Go \u8bed\u8a00 Logo \u8c37\u6b4c\u90ae\u4ef6\u5217\u8868 golang-nuts \u975e\u5e38\u6d3b\u8dc3\uff0c\u6bcf\u5929\u7684\u8ba8\u8bba\u548c\u95ee\u9898\u89e3\u7b54\u6570\u4ee5\u767e\u8ba1\u3002 \u5173\u4e8e Go \u8bed\u8a00\u5728 Google App Engine \u7684\u5e94\u7528\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u5355\u72ec\u7684\u90ae\u4ef6\u5217\u8868 google-appengine-go \uff0c\u4e0d\u8fc7 2 \u4e2a\u90ae\u4ef6\u5217\u8868\u7684\u8ba8\u8bba\u5185\u5bb9\u5e76\u4e0d\u662f\u5206\u5f97\u5f88\u6e05\u695a\uff0c\u90fd\u4f1a\u6d89\u53ca\u5230\u76f8\u5173\u7684\u8bdd\u9898\u3002 go-lang.cat-v.org/ \u662f Go \u8bed\u8a00\u5f00\u53d1\u793e\u533a\u7684\u8d44\u6e90\u7ad9\uff0c irc.freenode.net \u7684 #go-nuts \u662f\u5b98\u65b9\u7684 Go IRC \u9891\u9053\u3002 @golang \u662f Go \u8bed\u8a00\u5728 Twitter \u7684\u5b98\u65b9\u5e10\u53f7\uff0c\u5927\u5bb6\u4e00\u822c\u4f7f\u7528 #golang \u4f5c\u4e3a\u8bdd\u9898\u6807\u7b7e\u3002 \u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u5728 Linked-in \u7684\u5c0f\u7ec4\uff1a www.linkedin.com/groups?gid=2524765&trk=myg_ugrp_ovr \u3002 Go \u7f16\u7a0b\u8bed\u8a00\u7684\u7ef4\u57fa\u767e\u79d1\uff1a en.wikipedia.org/wiki/Go_(programming_language) Go \u8bed\u8a00\u76f8\u5173\u8d44\u6e90\u7684\u641c\u7d22\u5f15\u64ce\u9875\u9762\uff1a gowalker.org Go \u8bed\u8a00\u8fd8\u6709\u4e00\u4e2a\u8fd0\u884c\u5728 Google App Engine \u4e0a\u7684 Go Tour \uff0c\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6267\u884c\u547d\u4ee4 go install go-tour.googlecode.com/hg/gotour \u5b89\u88c5\u5230\u4f60\u7684\u672c\u5730\u673a\u5668\u4e0a\u3002\u5bf9\u4e8e\u4e2d\u6587\u8bfb\u8005\uff0c\u53ef\u4ee5\u8bbf\u95ee\u8be5\u6307\u5357\u7684 \u4e2d\u6587\u7248\u672c \uff0c\u6216\u901a\u8fc7\u547d\u4ee4 go install https://bitbucket.org/mikespook/go-tour-zh/gotour \u8fdb\u884c\u5b89\u88c5\u3002","title":"\u65f6\u95f4\u8f74\uff1a"},{"location":"01.1/#_2","text":"\u76ee\u5f55 \u4e0a\u4e00\u90e8\u5206\uff1a \u524d\u8a00 \u4e0b\u4e00\u8282: \u8bed\u8a00\u7684\u4e3b\u8981\u7279\u6027\u4e0e\u53d1\u5c55\u7684\u73af\u5883\u548c\u5f71\u54cd\u56e0\u7d20","title":"\u94fe\u63a5"},{"location":"01.2/","text":"1.2 \u8bed\u8a00\u7684\u4e3b\u8981\u7279\u6027\u4e0e\u53d1\u5c55\u7684\u73af\u5883\u548c\u5f71\u54cd\u56e0\u7d20 \u00b6 1.2.1 \u5f71\u54cd Go \u8bed\u8a00\u53d1\u5c55\u7684\u65e9\u671f\u7f16\u7a0b\u8bed\u8a00 \u00b6 \u6b63\u5982 \u201c21 \u4e16\u7eaa\u7684 C \u8bed\u8a00\u201d \u8fd9\u53e5\u8bdd\u6240\u8bf4\uff0cGo \u8bed\u8a00\u5e76\u4e0d\u662f\u51ed\u7a7a\u800c\u9020\u7684\uff0c\u800c\u662f\u548c C++\u3001Java \u548c C# \u4e00\u6837\u5c5e\u4e8e C \u7cfb\u3002\u4e0d\u4ec5\u5982\u6b64\uff0c\u8bbe\u8ba1\u8005\u4eec\u8fd8\u6c72\u53d6\u4e86\u5176\u5b83\u7f16\u7a0b\u8bed\u8a00\u7684\u7cbe\u7cb9\u90e8\u5206\u878d\u5165\u5230 Go \u8bed\u8a00\u5f53\u4e2d\u3002 \u5728\u58f0\u660e\u548c\u5305\u7684\u8bbe\u8ba1\u65b9\u9762\uff0cGo \u8bed\u8a00\u53d7\u5230 Pascal\u3001Modula \u548c Oberon \u7cfb\u8bed\u8a00\u7684\u5f71\u54cd\uff1b\u5728\u5e76\u53d1\u539f\u7406\u7684\u8bbe\u8ba1\u4e0a\uff0cGo \u8bed\u8a00\u4ece\u540c\u6837\u53d7\u5230 Tony Hoare \u7684 CSP\uff08\u901a\u4fe1\u5e8f\u5217\u8fdb\u7a0b Communicating Sequential Processes \uff09\u7406\u8bba\u5f71\u54cd\u7684 Limbo \u548c Newsqueak \u7684\u5b9e\u8df5\u4e2d\u501f\u9274\u4e86\u4e00\u4e9b\u7ecf\u9a8c\uff0c\u5e76\u4f7f\u7528\u4e86\u548c Erlang \u7c7b\u4f3c\u7684\u673a\u5236\u3002 \u8fd9\u662f\u4e00\u95e8\u5b8c\u5168\u5f00\u6e90\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u56e0\u4e3a\u5b83\u4f7f\u7528 BSD \u6388\u6743\u8bb8\u53ef\uff0c\u6240\u4ee5\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u8fdb\u884c\u5546\u4e1a\u8f6f\u4ef6\u7684\u5f00\u53d1\u800c\u4e0d\u9700\u8981\u652f\u4ed8\u4efb\u4f55\u8d39\u7528\u3002 \u5c3d\u7ba1\u4e3a\u4e86\u80fd\u591f\u8ba9\u76ee\u524d\u4e3b\u6d41\u7684\u5f00\u53d1\u8005\u4eec\u80fd\u591f\u5bf9 Go \u8bed\u8a00\u4e2d\u7684\u7c7b C \u8bed\u8a00\u7684\u8bed\u6cd5\u611f\u5230\u975e\u5e38\u4eb2\u5207\u800c\u6613\u4e8e\u8f6c\u578b\uff0c\u4f46\u662f\u5b83\u5728\u6781\u5927\u7a0b\u5ea6\u4e0a\u7b80\u5316\u4e86\u8fd9\u4e9b\u8bed\u6cd5\uff0c\u4f7f\u5f97\u5b83\u4eec\u6bd4 C/C++ \u7684\u8bed\u6cd5\u66f4\u52a0\u7b80\u6d01\u548c\u5e72\u51c0\u3002\u540c\u65f6\uff0cGo \u8bed\u8a00\u4e5f\u62e5\u6709\u4e00\u4e9b\u52a8\u6001\u8bed\u8a00\u7684\u7279\u6027\uff0c\u8fd9\u4f7f\u5f97\u4f7f\u7528 Python \u548c Ruby \u7684\u5f00\u53d1\u8005\u4eec\u5728\u4f7f\u7528 Go \u8bed\u8a00\u7684\u65f6\u5019\u611f\u89c9\u975e\u5e38\u5bb9\u6613\u4e0a\u624b\u3002 \u4e0b\u56fe\u5c55\u793a\u4e86\u4e00\u4e9b\u5176\u5b83\u7f16\u7a0b\u8bed\u8a00\u5bf9 Go \u8bed\u8a00\u7684\u5f71\u54cd\uff1a \u56fe 1.3 \u5176\u5b83\u7f16\u7a0b\u8bed\u8a00\u5bf9 Go \u8bed\u8a00\u7684\u5f71\u54cd 1.2.2 \u4e3a\u4ec0\u4e48\u8981\u521b\u9020\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00 \u00b6 C/C++ \u7684\u53d1\u5c55\u901f\u5ea6\u65e0\u6cd5\u8ddf\u4e0a\u8ba1\u7b97\u673a\u53d1\u5c55\u7684\u811a\u6b65\uff0c\u5341\u591a\u5e74\u6765\u4e5f\u6ca1\u6709\u51fa\u73b0\u4e00\u95e8\u4e0e\u65f6\u4ee3\u76f8\u7b26\u7684\u4e3b\u6d41\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\uff0c\u56e0\u6b64\u4eba\u4eec\u9700\u8981\u4e00\u95e8\u65b0\u7684\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\u6765\u5f25\u8865\u8fd9\u4e2a\u7a7a\u7f3a\uff0c\u5c24\u5176\u662f\u5728\u8ba1\u7b97\u673a\u4fe1\u606f\u65f6\u4ee3\u3002 \u76f8\u6bd4\u8ba1\u7b97\u673a\u6027\u80fd\u7684\u63d0\u5347\uff0c\u8f6f\u4ef6\u5f00\u53d1\u9886\u57df\u4e0d\u88ab\u8ba4\u4e3a\u53d1\u5c55\u5f97\u8db3\u591f\u5feb\u6216\u8005\u6bd4\u786c\u4ef6\u53d1\u5c55\u5f97\u66f4\u52a0\u6210\u529f\uff08\u6709\u8bb8\u591a\u9879\u76ee\u5747\u4ee5\u5931\u8d25\u544a\u7ec8\uff09\uff0c\u540c\u65f6\u5e94\u7528\u7a0b\u5e8f\u7684\u4f53\u79ef\u59cb\u7ec8\u5728\u4e0d\u65ad\u5730\u6269\u5927\uff0c\u8fd9\u5c31\u8feb\u5207\u5730\u9700\u8981\u4e00\u95e8\u5177\u5907\u66f4\u9ad8\u5c42\u6b21\u6982\u5ff5\u7684\u4f4e\u7ea7\u8bed\u8a00\u6765\u7a81\u7834\u73b0\u72b6\u3002 \u5728 Go \u8bed\u8a00\u51fa\u73b0\u4e4b\u524d\uff0c\u5f00\u53d1\u8005\u4eec\u603b\u662f\u9762\u4e34\u975e\u5e38\u8270\u96be\u7684\u6289\u62e9\uff0c\u7a76\u7adf\u662f\u4f7f\u7528\u6267\u884c\u901f\u5ea6\u5feb\u4f46\u662f\u7f16\u8bd1\u901f\u5ea6\u5e76\u4e0d\u7406\u60f3\u7684\u8bed\u8a00\uff08\u5982\uff1aC++\uff09\uff0c\u8fd8\u662f\u4f7f\u7528\u7f16\u8bd1\u901f\u5ea6\u8f83\u5feb\u4f46\u6267\u884c\u6548\u7387\u4e0d\u4f73\u7684\u8bed\u8a00\uff08\u5982\uff1a.NET\u3001Java\uff09\uff0c\u6216\u8005\u8bf4\u5f00\u53d1\u96be\u5ea6\u8f83\u4f4e\u4f46\u6267\u884c\u901f\u5ea6\u4e00\u822c\u7684\u52a8\u6001\u8bed\u8a00\u5462\uff1f\u663e\u7136\uff0cGo \u8bed\u8a00\u5728\u8fd9 3 \u4e2a\u6761\u4ef6\u4e4b\u95f4\u505a\u5230\u4e86\u6700\u4f73\u7684\u5e73\u8861\uff1a\u5feb\u901f\u7f16\u8bd1\uff0c\u9ad8\u6548\u6267\u884c\uff0c\u6613\u4e8e\u5f00\u53d1\u3002 1.2.3 Go \u8bed\u8a00\u7684\u53d1\u5c55\u76ee\u6807 \u00b6 Go \u8bed\u8a00\u7684\u4e3b\u8981\u76ee\u6807\u662f\u5c06\u9759\u6001\u8bed\u8a00\u7684\u5b89\u5168\u6027\u548c\u9ad8\u6548\u6027\u4e0e\u52a8\u6001\u8bed\u8a00\u7684\u6613\u5f00\u53d1\u6027\u8fdb\u884c\u6709\u673a\u7ed3\u5408\uff0c\u8fbe\u5230\u5b8c\u7f8e\u5e73\u8861\uff0c\u4ece\u800c\u4f7f\u7f16\u7a0b\u53d8\u5f97\u66f4\u52a0\u6709\u4e50\u8da3\uff0c\u800c\u4e0d\u662f\u5728\u8270\u96be\u6289\u62e9\u4e2d\u75db\u82e6\u524d\u884c\u3002 \u56e0\u6b64\uff0cGo \u8bed\u8a00\u662f\u4e00\u95e8\u7c7b\u578b\u5b89\u5168\u548c\u5185\u5b58\u5b89\u5168\u7684\u7f16\u7a0b\u8bed\u8a00\u3002\u867d\u7136 Go \u8bed\u8a00\u4e2d\u4ecd\u6709\u6307\u9488\u7684\u5b58\u5728\uff0c\u4f46\u5e76\u4e0d\u5141\u8bb8\u8fdb\u884c\u6307\u9488\u8fd0\u7b97\u3002 Go \u8bed\u8a00\u7684\u53e6\u4e00\u4e2a\u76ee\u6807\u662f\u5bf9\u4e8e\u7f51\u7edc\u901a\u4fe1\u3001\u5e76\u53d1\u548c\u5e76\u884c\u7f16\u7a0b\u7684\u6781\u4f73\u652f\u6301\uff0c\u4ece\u800c\u66f4\u597d\u5730\u5229\u7528\u5927\u91cf\u7684\u5206\u5e03\u5f0f\u548c\u591a\u6838\u7684\u8ba1\u7b97\u673a\uff0c\u8fd9\u4e00\u70b9\u5bf9\u4e8e\u8c37\u6b4c\u5185\u90e8\u7684\u4f7f\u7528\u6765\u8bf4\u5c31\u975e\u5e38\u91cd\u8981\u4e86\u3002\u8bbe\u8ba1\u8005\u901a\u8fc7 goroutine \u8fd9\u79cd\u8f7b\u91cf\u7ea7\u7ebf\u7a0b\u7684\u6982\u5ff5\u6765\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u6807\uff0c\u7136\u540e\u901a\u8fc7 channel \u6765\u5b9e\u73b0\u5404\u4e2a goroutine \u4e4b\u95f4\u7684\u901a\u4fe1\u3002\u4ed6\u4eec\u5b9e\u73b0\u4e86\u5206\u6bb5\u6808\u589e\u957f\u548c goroutine \u5728\u7ebf\u7a0b\u57fa\u7840\u4e0a\u591a\u8def\u590d\u7528\u6280\u672f\u7684\u81ea\u52a8\u5316\u3002 \u8fd9\u4e2a\u7279\u6027\u663e\u7136\u662f Go \u8bed\u8a00\u6700\u5f3a\u6709\u529b\u7684\u90e8\u5206\uff0c\u4e0d\u4ec5\u652f\u6301\u4e86\u65e5\u76ca\u91cd\u8981\u7684\u591a\u6838\u4e0e\u591a\u5904\u7406\u5668\u8ba1\u7b97\u673a\uff0c\u4e5f\u5f25\u8865\u4e86\u73b0\u5b58\u7f16\u7a0b\u8bed\u8a00\u5728\u8fd9\u65b9\u9762\u6240\u5b58\u5728\u7684\u4e0d\u8db3\u3002 Go \u8bed\u8a00\u4e2d\u53e6\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u7279\u6027\u5c31\u662f\u5b83\u7684\u6784\u5efa\u901f\u5ea6\uff08\u7f16\u8bd1\u548c\u94fe\u63a5\u5230\u673a\u5668\u4ee3\u7801\u7684\u901f\u5ea6\uff09\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u6784\u5efa\u4e00\u4e2a\u7a0b\u5e8f\u7684\u65f6\u95f4\u53ea\u9700\u8981\u6570\u767e\u6beb\u79d2\u5230\u51e0\u79d2\u3002\u4f5c\u4e3a\u5927\u91cf\u4f7f\u7528 C++ \u6765\u6784\u5efa\u57fa\u7840\u8bbe\u65bd\u7684\u8c37\u6b4c\u6765\u8bf4\uff0c\u65e0\u7591\u4ece\u6839\u672c\u4e0a\u6446\u8131\u4e86 C++ \u5728\u6784\u5efa\u901f\u5ea6\u4e0a\u975e\u5e38\u4e0d\u7406\u60f3\u7684\u5669\u68a6\u3002\u8fd9\u4e0d\u4ec5\u6781\u5927\u5730\u63d0\u5347\u4e86\u5f00\u53d1\u8005\u7684\u751f\u4ea7\u529b\uff0c\u540c\u65f6\u4e5f\u4f7f\u5f97\u8f6f\u4ef6\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u7684\u4ee3\u7801\u6d4b\u8bd5\u73af\u8282\u66f4\u52a0\u7d27\u51d1\uff0c\u800c\u4e0d\u5fc5\u6d6a\u8d39\u5927\u91cf\u7684\u65f6\u95f4\u5728\u7b49\u5f85\u7a0b\u5e8f\u7684\u6784\u5efa\u4e0a\u3002 \u4f9d\u8d56\u7ba1\u7406\u662f\u73b0\u4eca\u8f6f\u4ef6\u5f00\u53d1\u7684\u4e00\u4e2a\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u4f46\u662f C \u8bed\u8a00\u4e2d\u201c\u5934\u6587\u4ef6\u201d\u7684\u6982\u5ff5\u5374\u5bfc\u81f4\u8d8a\u6765\u8d8a\u591a\u56e0\u4e3a\u4f9d\u8d56\u5173\u7cfb\u800c\u4f7f\u5f97\u6784\u5efa\u4e00\u4e2a\u5927\u578b\u7684\u9879\u76ee\u9700\u8981\u957f\u8fbe\u51e0\u4e2a\u5c0f\u65f6\u7684\u65f6\u95f4\u3002\u4eba\u4eec\u8d8a\u6765\u8d8a\u9700\u8981\u4e00\u95e8\u5177\u6709\u4e25\u683c\u7684\u3001\u7b80\u6d01\u7684\u4f9d\u8d56\u5173\u7cfb\u5206\u6790\u7cfb\u7edf\u4ece\u800c\u80fd\u591f\u5feb\u901f\u7f16\u8bd1\u7684\u7f16\u7a0b\u8bed\u8a00\u3002\u8fd9\u6b63\u662f Go \u8bed\u8a00\u91c7\u7528\u5305\u6a21\u578b\u7684\u6839\u672c\u539f\u56e0\uff0c\u8fd9\u4e2a\u6a21\u578b\u901a\u8fc7\u4e25\u683c\u7684\u4f9d\u8d56\u5173\u7cfb\u68c0\u67e5\u673a\u5236\u6765\u52a0\u5feb\u7a0b\u5e8f\u6784\u5efa\u7684\u901f\u5ea6\uff0c\u63d0\u4f9b\u4e86\u975e\u5e38\u597d\u7684\u53ef\u91cf\u6d4b\u6027\u3002 \u6574\u4e2a Go \u8bed\u8a00\u6807\u51c6\u5e93\u7684\u7f16\u8bd1\u65f6\u95f4\u4e00\u822c\u90fd\u5728 20 \u79d2\u4ee5\u5185\uff0c\u5176\u5b83\u7684\u5e38\u89c4\u9879\u76ee\u4e5f\u53ea\u9700\u8981\u534a\u79d2\u949f\u7684\u65f6\u95f4\u6765\u5b8c\u6210\u7f16\u8bd1\u5de5\u4f5c\u3002\u8fd9\u79cd\u95ea\u7535\u822c\u7684\u7f16\u8bd1\u901f\u5ea6\u751a\u81f3\u6bd4\u7f16\u8bd1 C \u8bed\u8a00\u6216\u8005 Fortran \u66f4\u52a0\u5feb\uff0c\u4f7f\u5f97\u7f16\u8bd1\u8fd9\u4e00\u73af\u8282\u4e0d\u518d\u6210\u4e3a\u5728\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u56f0\u6270\u5f00\u53d1\u4eba\u5458\u7684\u95ee\u9898\u3002\u5728\u8fd9\u4e4b\u524d\uff0c\u52a8\u6001\u8bed\u8a00\u5c06\u5feb\u901f\u7f16\u8bd1\u4f5c\u4e3a\u81ea\u8eab\u7684\u4e00\u5927\u4eae\u70b9\uff0c\u50cf C++ \u90a3\u6837\u7684\u9759\u6001\u8bed\u8a00\u4e00\u822c\u90fd\u6709\u975e\u5e38\u6f2b\u957f\u7684\u7f16\u8bd1\u548c\u94fe\u63a5\u5de5\u4f5c\u3002\u800c\u540c\u6837\u4f5c\u4e3a\u9759\u6001\u8bed\u8a00\u7684 Go \u8bed\u8a00\uff0c\u901a\u8fc7\u81ea\u8eab\u4f18\u826f\u7684\u6784\u5efa\u673a\u5236\uff0c\u6210\u529f\u5730\u53bb\u9664\u4e86\u8fd9\u4e2a\u5f0a\u7aef\uff0c\u4f7f\u5f97\u7a0b\u5e8f\u7684\u6784\u5efa\u8fc7\u7a0b\u53d8\u5f97\u5fae\u4e0d\u8db3\u9053\uff0c\u62e5\u6709\u4e86\u50cf\u811a\u672c\u8bed\u8a00\u548c\u52a8\u6001\u8bed\u8a00\u90a3\u6837\u7684\u9ad8\u6548\u5f00\u53d1\u7684\u80fd\u529b\u3002 \u53e6\u5916\uff0cGo \u8bed\u8a00\u5728\u6267\u884c\u901f\u5ea6\u65b9\u9762\u4e5f\u53ef\u4ee5\u4e0e C/C++ \u76f8\u63d0\u5e76\u8bba\u3002 \u7531\u4e8e\u5185\u5b58\u95ee\u9898\uff08\u901a\u5e38\u79f0\u4e3a\u5185\u5b58\u6cc4\u6f0f\uff09\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u4f34\u968f\u7740 C++ \u7684\u5f00\u53d1\u8005\u4eec\uff0cGo \u8bed\u8a00\u7684\u8bbe\u8ba1\u8005\u4eec\u8ba4\u4e3a\u5185\u5b58\u7ba1\u7406\u4e0d\u5e94\u8be5\u662f\u5f00\u53d1\u4eba\u5458\u6240\u9700\u8981\u8003\u8651\u7684\u95ee\u9898\u3002\u56e0\u6b64\u5c3d\u7ba1 Go \u8bed\u8a00\u50cf\u5176\u5b83\u9759\u6001\u8bed\u8a00\u4e00\u6837\u6267\u884c\u672c\u5730\u4ee3\u7801\uff0c\u4f46\u5b83\u4f9d\u65e7\u8fd0\u884c\u5728\u67d0\u79cd\u610f\u4e49\u4e0a\u7684\u865a\u62df\u673a\uff0c\u4ee5\u6b64\u6765\u5b9e\u73b0\u9ad8\u6548\u5feb\u901f\u7684\u5783\u573e\u56de\u6536\uff08\u4f7f\u7528\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u6807\u8bb0-\u6e05\u9664\u7b97\u6cd5\uff09\u3002 \u5c3d\u7ba1\u5783\u573e\u56de\u6536\u5e76\u4e0d\u5bb9\u6613\u5b9e\u73b0\uff0c\u4f46\u8003\u8651\u8fd9\u5c06\u662f\u672a\u6765\u5e76\u53d1\u5e94\u7528\u7a0b\u5e8f\u53d1\u5c55\u7684\u4e00\u4e2a\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0cGo \u8bed\u8a00\u7684\u8bbe\u8ba1\u8005\u4eec\u8fd8\u662f\u5b8c\u6210\u4e86\u8fd9\u9879\u8270\u96be\u7684\u4efb\u52a1\u3002 Go \u8bed\u8a00\u8fd8\u80fd\u591f\u5728\u8fd0\u884c\u65f6\u8fdb\u884c\u53cd\u5c04\u76f8\u5173\u7684\u64cd\u4f5c\u3002 \u4f7f\u7528 go install \u80fd\u591f\u5f88\u8f7b\u677e\u5730\u5bf9\u7b2c\u4e09\u65b9\u5305\u8fdb\u884c\u90e8\u7f72\u3002 \u6b64\u5916\uff0cGo \u8bed\u8a00\u8fd8\u652f\u6301\u8c03\u7528\u7531 C \u8bed\u8a00\u7f16\u5199\u7684\u6d77\u91cf\u5e93\u6587\u4ef6\uff08 \u7b2c 3.9 \u8282 \uff09\uff0c\u4ece\u800c\u80fd\u591f\u5c06\u8fc7\u53bb\u5f00\u53d1\u7684\u8f6f\u4ef6\u8fdb\u884c\u5feb\u901f\u8fc1\u79fb\u3002 1.2.4 \u6307\u5bfc\u8bbe\u8ba1\u539f\u5219 \u00b6 Go\u8bed\u8a00\u901a\u8fc7\u51cf\u5c11\u5173\u952e\u5b57\u7684\u6570\u91cf\uff0825 \u4e2a\uff09\u6765\u7b80\u5316\u7f16\u7801\u8fc7\u7a0b\u4e2d\u7684\u6df7\u4e71\u548c\u590d\u6742\u5ea6\u3002\u5e72\u51c0\u3001\u6574\u9f50\u548c\u7b80\u6d01\u7684\u8bed\u6cd5\u4e5f\u80fd\u591f\u63d0\u9ad8\u7a0b\u5e8f\u7684\u7f16\u8bd1\u901f\u5ea6\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u5173\u952e\u5b57\u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u5c11\u5230\u751a\u81f3\u4e0d\u9700\u8981\u7b26\u53f7\u8868\u6765\u534f\u52a9\u89e3\u6790\u3002 \u8fd9\u4e9b\u65b9\u9762\u7684\u5de5\u4f5c\u90fd\u662f\u4e3a\u4e86\u51cf\u5c11\u7f16\u7801\u7684\u5de5\u4f5c\u91cf\uff0c\u751a\u81f3\u53ef\u4ee5\u4e0e Java \u7684\u7b80\u5316\u7a0b\u5ea6\u76f8\u6bd4\u8f83\u3002 Go \u8bed\u8a00\u6709\u4e00\u79cd\u6781\u7b80\u62bd\u8c61\u827a\u672f\u5bb6\u7684\u611f\u89c9\uff0c\u56e0\u4e3a\u5b83\u53ea\u63d0\u4f9b\u4e86\u4e00\u5230\u4e24\u79cd\u65b9\u6cd5\u6765\u89e3\u51b3\u67d0\u4e2a\u95ee\u9898\uff0c\u8fd9\u4f7f\u5f97\u5f00\u53d1\u8005\u4eec\u7684\u4ee3\u7801\u90fd\u975e\u5e38\u5bb9\u6613\u9605\u8bfb\u548c\u7406\u89e3\u3002\u4f17\u6240\u5468\u77e5\uff0c\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u662f\u8f6f\u4ef6\u5de5\u7a0b\u91cc\u6700\u91cd\u8981\u7684\u4e00\u90e8\u5206\uff08 \u8bd1\u8005\u6ce8\uff1a\u4ee3\u7801\u662f\u5199\u7ed9\u4eba\u770b\u7684\uff0c\u4e0d\u662f\u5199\u7ed9\u673a\u5668\u770b\u7684 \uff09\u3002 \u8fd9\u4e9b\u8bbe\u8ba1\u7406\u5ff5\u6ca1\u6709\u5efa\u7acb\u5176\u5b83\u6982\u5ff5\u4e4b\u4e0a\uff0c\u6240\u4ee5\u5e76\u4e0d\u4f1a\u56e0\u4e3a\u7275\u626f\u5230\u4e00\u4e9b\u6982\u5ff5\u800c\u5c06\u67d0\u4e2a\u6982\u5ff5\u590d\u6742\u5316\uff0c\u4ed6\u4eec\u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684\u3002 Go \u8bed\u8a00\u6709\u4e00\u5957\u5b8c\u6574\u7684\u7f16\u7801\u89c4\u8303\uff0c\u4f60\u53ef\u4ee5\u5728 Go \u8bed\u8a00\u7f16\u7801\u89c4\u8303 \u9875\u9762\u8fdb\u884c\u67e5\u770b\u3002 \u5b83\u4e0d\u50cf Ruby \u90a3\u6837\u901a\u8fc7\u5b9e\u73b0\u8fc7\u7a0b\u6765\u5b9a\u4e49\u7f16\u7801\u89c4\u8303\u3002\u4f5c\u4e3a\u4e00\u95e8\u5177\u6709\u660e\u786e\u7f16\u7801\u89c4\u8303\u7684\u8bed\u8a00\uff0c\u5b83\u8981\u6c42\u53ef\u4ee5\u91c7\u7528\u4e0d\u540c\u7684\u7f16\u8bd1\u5668\u5982 gc \u548c gccgo\uff08 \u7b2c 2.1 \u8282 \uff09\u8fdb\u884c\u7f16\u8bd1\u5de5\u4f5c\uff0c\u8fd9\u5bf9\u8bed\u8a00\u672c\u8eab\u62e5\u6709\u66f4\u597d\u7684\u7f16\u7801\u89c4\u8303\u8d77\u5230\u5f88\u5927\u5e2e\u52a9\u3002 LALR \u662f Go \u8bed\u8a00\u7684\u8bed\u6cd5\u6807\u51c6\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5728 src/cmd/internal/gc/go.y \u4e2d\u67e5\u770b\u5230\uff0c\u8fd9\u79cd\u8bed\u6cd5\u6807\u51c6\u5728\u7f16\u8bd1\u65f6\u4e0d\u9700\u8981\u7b26\u53f7\u8868\u6765\u534f\u52a9\u89e3\u6790\u3002 1.2.5 \u8bed\u8a00\u7684\u7279\u6027 \u00b6 Go \u8bed\u8a00\u4ece\u672c\u8d28\u4e0a\uff08\u7a0b\u5e8f\u548c\u7ed3\u6784\u65b9\u9762\uff09\u6765\u5b9e\u73b0\u5e76\u53d1\u7f16\u7a0b\u3002 \u56e0\u4e3a Go \u8bed\u8a00\u6ca1\u6709\u7c7b\u548c\u7ee7\u627f\u7684\u6982\u5ff5\uff0c\u6240\u4ee5\u5b83\u548c Java \u6216 C++ \u770b\u8d77\u6765\u5e76\u4e0d\u76f8\u540c\u3002\u4f46\u662f\u5b83\u901a\u8fc7\u63a5\u53e3 (interface) \u7684\u6982\u5ff5\u6765\u5b9e\u73b0\u591a\u6001\u6027\u3002Go \u8bed\u8a00\u6709\u4e00\u4e2a\u6e05\u6670\u6613\u61c2\u7684\u8f7b\u91cf\u7ea7\u7c7b\u578b\u7cfb\u7edf\uff0c\u5728\u7c7b\u578b\u4e4b\u95f4\u4e5f\u6ca1\u6709\u5c42\u7ea7\u4e4b\u8bf4\u3002\u56e0\u6b64\u53ef\u4ee5\u8bf4\u8fd9\u662f\u4e00\u95e8\u6df7\u5408\u578b\u7684\u8bed\u8a00\u3002 \u5728\u4f20\u7edf\u7684\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u4e2d\uff0c\u4f7f\u7528\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u6280\u672f\u663e\u5f97\u975e\u5e38\u81c3\u80bf\uff0c\u5b83\u4eec\u603b\u662f\u901a\u8fc7\u590d\u6742\u7684\u6a21\u5f0f\u6765\u6784\u5efa\u5e9e\u5927\u7684\u7c7b\u578b\u5c42\u7ea7\uff0c\u8fd9\u8fdd\u80cc\u4e86\u7f16\u7a0b\u8bed\u8a00\u5e94\u8be5\u63d0\u5347\u751f\u4ea7\u529b\u7684\u5b97\u65e8\u3002 \u51fd\u6570\u662f Go \u8bed\u8a00\u4e2d\u7684\u57fa\u672c\u6784\u4ef6\uff0c\u5b83\u4eec\u7684\u4f7f\u7528\u65b9\u6cd5\u975e\u5e38\u7075\u6d3b\u3002\u5728 \u7b2c\u516d\u7ae0 \uff0c\u6211\u4eec\u4f1a\u770b\u5230 Go \u8bed\u8a00\u5728\u51fd\u6570\u5f0f\u7f16\u7a0b\u65b9\u9762\u7684\u57fa\u672c\u6982\u5ff5\u3002 Go \u8bed\u8a00\u4f7f\u7528\u9759\u6001\u7c7b\u578b\uff0c\u6240\u4ee5\u5b83\u662f\u7c7b\u578b\u5b89\u5168\u7684\u4e00\u95e8\u8bed\u8a00\uff0c\u52a0\u4e0a\u901a\u8fc7\u6784\u5efa\u5230\u672c\u5730\u4ee3\u7801\uff0c\u7a0b\u5e8f\u7684\u6267\u884c\u901f\u5ea6\u4e5f\u975e\u5e38\u5feb\u3002 \u4f5c\u4e3a\u5f3a\u7c7b\u578b\u8bed\u8a00\uff0c\u9690\u5f0f\u7684\u7c7b\u578b\u8f6c\u6362\u662f\u4e0d\u88ab\u5141\u8bb8\u7684\uff0c\u8bb0\u4f4f\u4e00\u6761\u539f\u5219\uff1a\u8ba9\u6240\u6709\u7684\u4e1c\u897f\u90fd\u662f\u663e\u5f0f\u7684\u3002 Go \u8bed\u8a00\u5176\u5b9e\u4e5f\u6709\u4e00\u4e9b\u52a8\u6001\u8bed\u8a00\u7684\u7279\u6027\uff08\u901a\u8fc7\u5173\u952e\u5b57 var \uff09\uff0c\u6240\u4ee5\u5b83\u5bf9\u90a3\u4e9b\u9003\u79bb Java \u548c .Net \u4e16\u754c\u800c\u4f7f\u7528 Python\u3001Ruby\u3001PHP \u548c JavaScript \u7684\u5f00\u53d1\u8005\u4eec\u4e5f\u5177\u6709\u5f88\u5927\u7684\u5438\u5f15\u529b\u3002 Go \u8bed\u8a00\u652f\u6301\u4ea4\u53c9\u7f16\u8bd1\uff0c\u6bd4\u5982\u8bf4\u4f60\u53ef\u4ee5\u5728\u8fd0\u884c Linux \u7cfb\u7edf\u7684\u8ba1\u7b97\u673a\u4e0a\u5f00\u53d1\u8fd0\u884c Windows \u4e0b\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u662f\u7b2c\u4e00\u95e8\u5b8c\u5168\u652f\u6301 UTF-8 \u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u8fd9\u4e0d\u4ec5\u4f53\u73b0\u5728\u5b83\u53ef\u4ee5\u5904\u7406\u4f7f\u7528 UTF-8 \u7f16\u7801\u7684\u5b57\u7b26\u4e32\uff0c\u5c31\u8fde\u5b83\u7684\u6e90\u7801\u6587\u4ef6\u683c\u5f0f\u90fd\u662f\u4f7f\u7528\u7684 UTF-8 \u7f16\u7801\u3002Go \u8bed\u8a00\u505a\u5230\u4e86\u771f\u6b63\u7684\u56fd\u9645\u5316\uff01 1.2.6 \u8bed\u8a00\u7684\u7528\u9014 \u00b6 Go \u8bed\u8a00\u88ab\u8bbe\u8ba1\u6210\u4e00\u95e8\u5e94\u7528\u4e8e\u642d\u8f7d Web \u670d\u52a1\u5668\uff0c\u5b58\u50a8\u96c6\u7fa4\u6216\u7c7b\u4f3c\u7528\u9014\u7684\u5de8\u578b\u4e2d\u592e\u670d\u52a1\u5668\u7684\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\u3002\u5bf9\u4e8e\u9ad8\u6027\u80fd\u5206\u5e03\u5f0f\u7cfb\u7edf\u9886\u57df\u800c\u8a00\uff0cGo \u8bed\u8a00\u65e0\u7591\u6bd4\u5927\u591a\u6570\u5176\u5b83\u8bed\u8a00\u6709\u7740\u66f4\u9ad8\u7684\u5f00\u53d1\u6548\u7387\u3002\u5b83\u63d0\u4f9b\u4e86\u6d77\u91cf\u5e76\u884c\u7684\u652f\u6301\uff0c\u8fd9\u5bf9\u4e8e\u6e38\u620f\u670d\u52a1\u7aef\u7684\u5f00\u53d1\u800c\u8a00\u662f\u518d\u597d\u4e0d\u8fc7\u4e86\u3002 Go \u8bed\u8a00\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u76ee\u6807\u5c31\u662f\u5b9e\u73b0\u6240\u8c13\u7684\u590d\u6742\u4e8b\u4ef6\u5904\u7406\uff08 CEP \uff09\uff0c\u8fd9\u9879\u6280\u672f\u8981\u6c42\u6d77\u91cf\u5e76\u884c\u652f\u6301\uff0c\u9ad8\u5ea6\u7684\u62bd\u8c61\u5316\u548c\u9ad8\u6027\u80fd\u3002\u5f53\u6211\u4eec\u8fdb\u5165\u5230\u7269\u8054\u7f51\u65f6\u4ee3\uff0cCEP \u5fc5\u7136\u4f1a\u6210\u4e3a\u4eba\u4eec\u5173\u6ce8\u7684\u7126\u70b9\u3002 \u4f46\u662f Go \u8bed\u8a00\u540c\u65f6\u4e5f\u662f\u4e00\u95e8\u53ef\u4ee5\u7528\u4e8e\u5b9e\u73b0\u4e00\u822c\u76ee\u6807\u7684\u8bed\u8a00\uff0c\u4f8b\u5982\u5bf9\u4e8e\u6587\u672c\u7684\u5904\u7406\uff0c\u524d\u7aef\u5c55\u73b0\uff0c\u751a\u81f3\u50cf\u4f7f\u7528\u811a\u672c\u4e00\u6837\u4f7f\u7528\u5b83\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u56e0\u4e3a\u5783\u573e\u56de\u6536\u548c\u81ea\u52a8\u5185\u5b58\u5206\u914d\u7684\u539f\u56e0\uff0cGo \u8bed\u8a00\u4e0d\u9002\u5408\u7528\u6765\u5f00\u53d1\u5bf9\u5b9e\u65f6\u6027\u8981\u6c42\u5f88\u9ad8\u7684\u8f6f\u4ef6\u3002 \u8d8a\u6765\u8d8a\u591a\u7684\u8c37\u6b4c\u5185\u90e8\u7684\u5927\u578b\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u90fd\u5f00\u59cb\u4f7f\u7528 Go \u8bed\u8a00\u6765\u5f00\u53d1\uff0c\u4f8b\u5982\u8c37\u6b4c\u5730\u7403\u7684\u4e00\u90e8\u5206\u4ee3\u7801\u5c31\u662f\u7531 Go \u8bed\u8a00\u5b8c\u6210\u7684\u3002 \u5982\u679c\u4f60\u60f3\u77e5\u9053\u4e00\u4e9b\u5176\u5b83\u7ec4\u7ec7\u4f7f\u7528Go\u8bed\u8a00\u5f00\u53d1\u7684\u5b9e\u9645\u5e94\u7528\u9879\u76ee\uff0c\u4f60\u53ef\u4ee5\u5230 \u4f7f\u7528 Go \u7684\u7ec4\u7ec7 \u9875\u9762\u8fdb\u884c\u67e5\u770b\u3002\u51fa\u4e8e\u9690\u79c1\u4fdd\u62a4\u7684\u8003\u8651\uff0c\u8bb8\u591a\u516c\u53f8\u7684\u9879\u76ee\u90fd\u6ca1\u6709\u5c55\u793a\u5728\u8fd9\u4e2a\u9875\u9762\u3002\u6211\u4eec\u5c06\u4f1a\u5728 \u7b2c 21 \u7ae0 \u8ba8\u8bba\u5230\u4e00\u4e2a\u4f7f\u7528 Go \u8bed\u8a00\u5f00\u53d1\u7684\u5927\u578b\u5b58\u50a8\u533a\u57df\u7f51\u7edc (SAN) \u6848\u4f8b\u3002 \u5728 Chrome \u6d4f\u89c8\u5668\u4e2d\u5185\u7f6e\u4e86\u4e00\u6b3e Go \u8bed\u8a00\u7684\u7f16\u8bd1\u5668\u7528\u4e8e\u672c\u5730\u5ba2\u6237\u7aef (NaCl)\uff0c\u8fd9\u5f88\u53ef\u80fd\u4f1a\u88ab\u7528\u4e8e\u5728 Chrome OS \u4e2d\u6267\u884c Go \u8bed\u8a00\u5f00\u53d1\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 Go \u8bed\u8a00\u53ef\u4ee5\u5728 Intel \u6216 ARM \u5904\u7406\u5668\u4e0a\u8fd0\u884c\uff0c\u56e0\u6b64\u5b83\u4e5f\u53ef\u4ee5\u5728\u5b89\u5353\u7cfb\u7edf\u4e0b\u8fd0\u884c\uff0c\u4f8b\u5982 Nexus \u7cfb\u5217\u7684\u4ea7\u54c1\u3002 \u5728 Google App Engine \u4e2d\u4f7f\u7528 Go \u8bed\u8a00\uff1a2011 \u5e74 5 \u6708 5 \u65e5\uff0c\u5b98\u65b9\u53d1\u5e03\u4e86\u7528\u4e8e\u5f00\u53d1\u8fd0\u884c\u5728 Google App Engine \u4e0a\u7684 Web \u5e94\u7528\u7684 Go SDK\uff0c\u5728\u6b64\u4e4b\u524d\uff0c\u5f00\u53d1\u8005\u4eec\u53ea\u80fd\u9009\u62e9\u4f7f\u7528 Python \u6216\u8005 Java\u3002\u8fd9\u4e3b\u8981\u662f David Symonds \u548c Nigel Tao \u52aa\u529b\u7684\u6210\u679c\u3002\u76ee\u524d\u6700\u65b0\u7684\u7a33\u5b9a\u7248\u662f\u57fa\u4e8e Go 1.4 \u7684 SDK 1.9.18\uff0c\u4e8e 2015 \u5e74 2 \u6708 18 \u65e5\u53d1\u5e03\u3002\u5f53\u524d Go \u8bed\u8a00\u7684\u7a33\u5b9a\u7248\u672c\u662f Go 1.4.2\u3002 1.2.7 \u5173\u4e8e\u7279\u6027\u7f3a\u5931 \u00b6 \u8bb8\u591a\u80fd\u591f\u5728\u5927\u591a\u6570\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u4e2d\u4f7f\u7528\u7684\u7279\u6027 Go \u8bed\u8a00\u90fd\u6ca1\u6709\u652f\u6301\uff0c\u4f46\u5176\u4e2d\u7684\u4e00\u90e8\u5206\u53ef\u80fd\u4f1a\u5728\u672a\u6765\u88ab\u652f\u6301\u3002 \u4e3a\u4e86\u7b80\u5316\u8bbe\u8ba1\uff0c\u4e0d\u652f\u6301\u51fd\u6570\u91cd\u8f7d\u548c\u64cd\u4f5c\u7b26\u91cd\u8f7d \u4e3a\u4e86\u907f\u514d\u5728 C/C++ \u5f00\u53d1\u4e2d\u7684\u4e00\u4e9b Bug \u548c\u6df7\u4e71\uff0c\u4e0d\u652f\u6301\u9690\u5f0f\u8f6c\u6362 Go \u8bed\u8a00\u901a\u8fc7\u53e6\u4e00\u79cd\u9014\u5f84\u5b9e\u73b0\u9762\u5411\u5bf9\u8c61\u8bbe\u8ba1\uff08\u7b2c 10 - 11 \u7ae0\uff09\u6765\u653e\u5f03\u7c7b\u548c\u7c7b\u578b\u7684\u7ee7\u627f \u5c3d\u7ba1\u5728\u63a5\u53e3\u7684\u4f7f\u7528\u65b9\u9762\uff08 \u7b2c 11 \u7ae0 \uff09\u53ef\u4ee5\u5b9e\u73b0\u7c7b\u4f3c\u53d8\u4f53\u7c7b\u578b\u7684\u529f\u80fd\uff0c\u4f46\u672c\u8eab\u4e0d\u652f\u6301\u53d8\u4f53\u7c7b\u578b \u4e0d\u652f\u6301\u52a8\u6001\u52a0\u8f7d\u4ee3\u7801 \u4e0d\u652f\u6301\u52a8\u6001\u94fe\u63a5\u5e93 \u4e0d\u652f\u6301\u6cdb\u578b \u901a\u8fc7 recover() \u548c panic() \u6765\u66ff\u4ee3\u5f02\u5e38\u673a\u5236\uff08\u7b2c 13.2 - 13.3 \u8282\uff09 \u4e0d\u652f\u6301\u9759\u6001\u53d8\u91cf \u5173\u4e8e Go \u8bed\u8a00\u5f00\u53d1\u56e2\u961f\u5bf9\u4e8e\u8fd9\u4e9b\u65b9\u9762\u7684\u8ba8\u8bba\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 Go \u5e38\u89c1\u95ee\u9898 \u9875\u9762\u67e5\u770b\u3002 1.2.8 \u4f7f\u7528 Go \u8bed\u8a00\u7f16\u7a0b \u00b6 \u5982\u679c\u4f60\u6709\u5176\u5b83\u8bed\u8a00\u7684\u7f16\u7a0b\u7ecf\u5386\uff08\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8bed\u8a00\uff0c\u5982\uff1aJava\u3001C#\u3001Object-C\u3001Python\u3001Ruby\uff09\uff0c\u5728\u4f60\u8fdb\u5165\u5230 Go \u8bed\u8a00\u7684\u4e16\u754c\u4e4b\u540e\uff0c\u4f60\u5c06\u4f1a\u50cf\u8ff7\u604b\u4f60\u7684 X \u8bed\u8a00\u4e00\u6837\u65e0\u6cd5\u81ea\u62d4\u3002Go \u8bed\u8a00\u4f7f\u7528\u4e86\u4e0e\u5176\u5b83\u8bed\u8a00\u4e0d\u540c\u7684\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u6240\u4ee5\u5f53\u4f60\u5c1d\u8bd5\u5c06\u4f60\u7684X\u8bed\u8a00\u7684\u4ee3\u7801\u8fc1\u79fb\u5230 Go \u8bed\u8a00\u65f6\uff0c\u4f60\u5c06\u4f1a\u975e\u5e38\u5931\u671b\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u4ece\u5934\u5f00\u59cb\uff0c\u7528 Go \u7684\u7406\u5ff5\u6765\u601d\u8003\u3002 \u5982\u679c\u4f60\u5728\u81f3\u9ad8\u70b9\u4f7f\u7528 Go \u7684\u7406\u5ff5\u6765\u91cd\u65b0\u5ba1\u89c6\u548c\u5206\u6790\u4e00\u4e2a\u95ee\u9898\uff0c\u4f60\u901a\u5e38\u4f1a\u627e\u5230\u4e00\u4e2a\u9002\u7528\u4e8e Go \u8bed\u8a00\u7684\u4f18\u96c5\u7684\u89e3\u51b3\u65b9\u6848\u3002 1.2.9 \u5c0f\u7ed3 \u00b6 \u8fd9\u91cc\u5217\u4e3e\u4e00\u4e9b Go \u8bed\u8a00\u7684\u5fc5\u6740\u6280\uff1a \u7b80\u5316\u95ee\u9898\uff0c\u6613\u4e8e\u5b66\u4e60 \u5185\u5b58\u7ba1\u7406\uff0c\u7b80\u6d01\u8bed\u6cd5\uff0c\u6613\u4e8e\u4f7f\u7528 \u5feb\u901f\u7f16\u8bd1\uff0c\u9ad8\u6548\u5f00\u53d1 \u9ad8\u6548\u6267\u884c \u5e76\u53d1\u652f\u6301\uff0c\u8f7b\u677e\u9a7e\u9a6d \u9759\u6001\u7c7b\u578b \u6807\u51c6\u7c7b\u5e93\uff0c\u89c4\u8303\u7edf\u4e00 \u6613\u4e8e\u90e8\u7f72 \u6587\u6863\u5168\u9762 \u514d\u8d39\u5f00\u6e90 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u8d77\u6e90\u4e0e\u53d1\u5c55 \u4e0b\u4e00\u7ae0\uff1a \u5b89\u88c5\u4e0e\u8fd0\u884c\u73af\u5883","title":"1.2 \u8bed\u8a00\u7684\u4e3b\u8981\u7279\u6027\u4e0e\u53d1\u5c55\u7684\u73af\u5883\u548c\u5f71\u54cd\u56e0\u7d20"},{"location":"01.2/#12","text":"","title":"1.2 \u8bed\u8a00\u7684\u4e3b\u8981\u7279\u6027\u4e0e\u53d1\u5c55\u7684\u73af\u5883\u548c\u5f71\u54cd\u56e0\u7d20"},{"location":"01.2/#121-go","text":"\u6b63\u5982 \u201c21 \u4e16\u7eaa\u7684 C \u8bed\u8a00\u201d \u8fd9\u53e5\u8bdd\u6240\u8bf4\uff0cGo \u8bed\u8a00\u5e76\u4e0d\u662f\u51ed\u7a7a\u800c\u9020\u7684\uff0c\u800c\u662f\u548c C++\u3001Java \u548c C# \u4e00\u6837\u5c5e\u4e8e C \u7cfb\u3002\u4e0d\u4ec5\u5982\u6b64\uff0c\u8bbe\u8ba1\u8005\u4eec\u8fd8\u6c72\u53d6\u4e86\u5176\u5b83\u7f16\u7a0b\u8bed\u8a00\u7684\u7cbe\u7cb9\u90e8\u5206\u878d\u5165\u5230 Go \u8bed\u8a00\u5f53\u4e2d\u3002 \u5728\u58f0\u660e\u548c\u5305\u7684\u8bbe\u8ba1\u65b9\u9762\uff0cGo \u8bed\u8a00\u53d7\u5230 Pascal\u3001Modula \u548c Oberon \u7cfb\u8bed\u8a00\u7684\u5f71\u54cd\uff1b\u5728\u5e76\u53d1\u539f\u7406\u7684\u8bbe\u8ba1\u4e0a\uff0cGo \u8bed\u8a00\u4ece\u540c\u6837\u53d7\u5230 Tony Hoare \u7684 CSP\uff08\u901a\u4fe1\u5e8f\u5217\u8fdb\u7a0b Communicating Sequential Processes \uff09\u7406\u8bba\u5f71\u54cd\u7684 Limbo \u548c Newsqueak \u7684\u5b9e\u8df5\u4e2d\u501f\u9274\u4e86\u4e00\u4e9b\u7ecf\u9a8c\uff0c\u5e76\u4f7f\u7528\u4e86\u548c Erlang \u7c7b\u4f3c\u7684\u673a\u5236\u3002 \u8fd9\u662f\u4e00\u95e8\u5b8c\u5168\u5f00\u6e90\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u56e0\u4e3a\u5b83\u4f7f\u7528 BSD \u6388\u6743\u8bb8\u53ef\uff0c\u6240\u4ee5\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u8fdb\u884c\u5546\u4e1a\u8f6f\u4ef6\u7684\u5f00\u53d1\u800c\u4e0d\u9700\u8981\u652f\u4ed8\u4efb\u4f55\u8d39\u7528\u3002 \u5c3d\u7ba1\u4e3a\u4e86\u80fd\u591f\u8ba9\u76ee\u524d\u4e3b\u6d41\u7684\u5f00\u53d1\u8005\u4eec\u80fd\u591f\u5bf9 Go \u8bed\u8a00\u4e2d\u7684\u7c7b C \u8bed\u8a00\u7684\u8bed\u6cd5\u611f\u5230\u975e\u5e38\u4eb2\u5207\u800c\u6613\u4e8e\u8f6c\u578b\uff0c\u4f46\u662f\u5b83\u5728\u6781\u5927\u7a0b\u5ea6\u4e0a\u7b80\u5316\u4e86\u8fd9\u4e9b\u8bed\u6cd5\uff0c\u4f7f\u5f97\u5b83\u4eec\u6bd4 C/C++ \u7684\u8bed\u6cd5\u66f4\u52a0\u7b80\u6d01\u548c\u5e72\u51c0\u3002\u540c\u65f6\uff0cGo \u8bed\u8a00\u4e5f\u62e5\u6709\u4e00\u4e9b\u52a8\u6001\u8bed\u8a00\u7684\u7279\u6027\uff0c\u8fd9\u4f7f\u5f97\u4f7f\u7528 Python \u548c Ruby \u7684\u5f00\u53d1\u8005\u4eec\u5728\u4f7f\u7528 Go \u8bed\u8a00\u7684\u65f6\u5019\u611f\u89c9\u975e\u5e38\u5bb9\u6613\u4e0a\u624b\u3002 \u4e0b\u56fe\u5c55\u793a\u4e86\u4e00\u4e9b\u5176\u5b83\u7f16\u7a0b\u8bed\u8a00\u5bf9 Go \u8bed\u8a00\u7684\u5f71\u54cd\uff1a \u56fe 1.3 \u5176\u5b83\u7f16\u7a0b\u8bed\u8a00\u5bf9 Go \u8bed\u8a00\u7684\u5f71\u54cd","title":"1.2.1 \u5f71\u54cd Go \u8bed\u8a00\u53d1\u5c55\u7684\u65e9\u671f\u7f16\u7a0b\u8bed\u8a00"},{"location":"01.2/#122","text":"C/C++ \u7684\u53d1\u5c55\u901f\u5ea6\u65e0\u6cd5\u8ddf\u4e0a\u8ba1\u7b97\u673a\u53d1\u5c55\u7684\u811a\u6b65\uff0c\u5341\u591a\u5e74\u6765\u4e5f\u6ca1\u6709\u51fa\u73b0\u4e00\u95e8\u4e0e\u65f6\u4ee3\u76f8\u7b26\u7684\u4e3b\u6d41\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\uff0c\u56e0\u6b64\u4eba\u4eec\u9700\u8981\u4e00\u95e8\u65b0\u7684\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\u6765\u5f25\u8865\u8fd9\u4e2a\u7a7a\u7f3a\uff0c\u5c24\u5176\u662f\u5728\u8ba1\u7b97\u673a\u4fe1\u606f\u65f6\u4ee3\u3002 \u76f8\u6bd4\u8ba1\u7b97\u673a\u6027\u80fd\u7684\u63d0\u5347\uff0c\u8f6f\u4ef6\u5f00\u53d1\u9886\u57df\u4e0d\u88ab\u8ba4\u4e3a\u53d1\u5c55\u5f97\u8db3\u591f\u5feb\u6216\u8005\u6bd4\u786c\u4ef6\u53d1\u5c55\u5f97\u66f4\u52a0\u6210\u529f\uff08\u6709\u8bb8\u591a\u9879\u76ee\u5747\u4ee5\u5931\u8d25\u544a\u7ec8\uff09\uff0c\u540c\u65f6\u5e94\u7528\u7a0b\u5e8f\u7684\u4f53\u79ef\u59cb\u7ec8\u5728\u4e0d\u65ad\u5730\u6269\u5927\uff0c\u8fd9\u5c31\u8feb\u5207\u5730\u9700\u8981\u4e00\u95e8\u5177\u5907\u66f4\u9ad8\u5c42\u6b21\u6982\u5ff5\u7684\u4f4e\u7ea7\u8bed\u8a00\u6765\u7a81\u7834\u73b0\u72b6\u3002 \u5728 Go \u8bed\u8a00\u51fa\u73b0\u4e4b\u524d\uff0c\u5f00\u53d1\u8005\u4eec\u603b\u662f\u9762\u4e34\u975e\u5e38\u8270\u96be\u7684\u6289\u62e9\uff0c\u7a76\u7adf\u662f\u4f7f\u7528\u6267\u884c\u901f\u5ea6\u5feb\u4f46\u662f\u7f16\u8bd1\u901f\u5ea6\u5e76\u4e0d\u7406\u60f3\u7684\u8bed\u8a00\uff08\u5982\uff1aC++\uff09\uff0c\u8fd8\u662f\u4f7f\u7528\u7f16\u8bd1\u901f\u5ea6\u8f83\u5feb\u4f46\u6267\u884c\u6548\u7387\u4e0d\u4f73\u7684\u8bed\u8a00\uff08\u5982\uff1a.NET\u3001Java\uff09\uff0c\u6216\u8005\u8bf4\u5f00\u53d1\u96be\u5ea6\u8f83\u4f4e\u4f46\u6267\u884c\u901f\u5ea6\u4e00\u822c\u7684\u52a8\u6001\u8bed\u8a00\u5462\uff1f\u663e\u7136\uff0cGo \u8bed\u8a00\u5728\u8fd9 3 \u4e2a\u6761\u4ef6\u4e4b\u95f4\u505a\u5230\u4e86\u6700\u4f73\u7684\u5e73\u8861\uff1a\u5feb\u901f\u7f16\u8bd1\uff0c\u9ad8\u6548\u6267\u884c\uff0c\u6613\u4e8e\u5f00\u53d1\u3002","title":"1.2.2 \u4e3a\u4ec0\u4e48\u8981\u521b\u9020\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00"},{"location":"01.2/#123-go","text":"Go \u8bed\u8a00\u7684\u4e3b\u8981\u76ee\u6807\u662f\u5c06\u9759\u6001\u8bed\u8a00\u7684\u5b89\u5168\u6027\u548c\u9ad8\u6548\u6027\u4e0e\u52a8\u6001\u8bed\u8a00\u7684\u6613\u5f00\u53d1\u6027\u8fdb\u884c\u6709\u673a\u7ed3\u5408\uff0c\u8fbe\u5230\u5b8c\u7f8e\u5e73\u8861\uff0c\u4ece\u800c\u4f7f\u7f16\u7a0b\u53d8\u5f97\u66f4\u52a0\u6709\u4e50\u8da3\uff0c\u800c\u4e0d\u662f\u5728\u8270\u96be\u6289\u62e9\u4e2d\u75db\u82e6\u524d\u884c\u3002 \u56e0\u6b64\uff0cGo \u8bed\u8a00\u662f\u4e00\u95e8\u7c7b\u578b\u5b89\u5168\u548c\u5185\u5b58\u5b89\u5168\u7684\u7f16\u7a0b\u8bed\u8a00\u3002\u867d\u7136 Go \u8bed\u8a00\u4e2d\u4ecd\u6709\u6307\u9488\u7684\u5b58\u5728\uff0c\u4f46\u5e76\u4e0d\u5141\u8bb8\u8fdb\u884c\u6307\u9488\u8fd0\u7b97\u3002 Go \u8bed\u8a00\u7684\u53e6\u4e00\u4e2a\u76ee\u6807\u662f\u5bf9\u4e8e\u7f51\u7edc\u901a\u4fe1\u3001\u5e76\u53d1\u548c\u5e76\u884c\u7f16\u7a0b\u7684\u6781\u4f73\u652f\u6301\uff0c\u4ece\u800c\u66f4\u597d\u5730\u5229\u7528\u5927\u91cf\u7684\u5206\u5e03\u5f0f\u548c\u591a\u6838\u7684\u8ba1\u7b97\u673a\uff0c\u8fd9\u4e00\u70b9\u5bf9\u4e8e\u8c37\u6b4c\u5185\u90e8\u7684\u4f7f\u7528\u6765\u8bf4\u5c31\u975e\u5e38\u91cd\u8981\u4e86\u3002\u8bbe\u8ba1\u8005\u901a\u8fc7 goroutine \u8fd9\u79cd\u8f7b\u91cf\u7ea7\u7ebf\u7a0b\u7684\u6982\u5ff5\u6765\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u6807\uff0c\u7136\u540e\u901a\u8fc7 channel \u6765\u5b9e\u73b0\u5404\u4e2a goroutine \u4e4b\u95f4\u7684\u901a\u4fe1\u3002\u4ed6\u4eec\u5b9e\u73b0\u4e86\u5206\u6bb5\u6808\u589e\u957f\u548c goroutine \u5728\u7ebf\u7a0b\u57fa\u7840\u4e0a\u591a\u8def\u590d\u7528\u6280\u672f\u7684\u81ea\u52a8\u5316\u3002 \u8fd9\u4e2a\u7279\u6027\u663e\u7136\u662f Go \u8bed\u8a00\u6700\u5f3a\u6709\u529b\u7684\u90e8\u5206\uff0c\u4e0d\u4ec5\u652f\u6301\u4e86\u65e5\u76ca\u91cd\u8981\u7684\u591a\u6838\u4e0e\u591a\u5904\u7406\u5668\u8ba1\u7b97\u673a\uff0c\u4e5f\u5f25\u8865\u4e86\u73b0\u5b58\u7f16\u7a0b\u8bed\u8a00\u5728\u8fd9\u65b9\u9762\u6240\u5b58\u5728\u7684\u4e0d\u8db3\u3002 Go \u8bed\u8a00\u4e2d\u53e6\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u7279\u6027\u5c31\u662f\u5b83\u7684\u6784\u5efa\u901f\u5ea6\uff08\u7f16\u8bd1\u548c\u94fe\u63a5\u5230\u673a\u5668\u4ee3\u7801\u7684\u901f\u5ea6\uff09\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u6784\u5efa\u4e00\u4e2a\u7a0b\u5e8f\u7684\u65f6\u95f4\u53ea\u9700\u8981\u6570\u767e\u6beb\u79d2\u5230\u51e0\u79d2\u3002\u4f5c\u4e3a\u5927\u91cf\u4f7f\u7528 C++ \u6765\u6784\u5efa\u57fa\u7840\u8bbe\u65bd\u7684\u8c37\u6b4c\u6765\u8bf4\uff0c\u65e0\u7591\u4ece\u6839\u672c\u4e0a\u6446\u8131\u4e86 C++ \u5728\u6784\u5efa\u901f\u5ea6\u4e0a\u975e\u5e38\u4e0d\u7406\u60f3\u7684\u5669\u68a6\u3002\u8fd9\u4e0d\u4ec5\u6781\u5927\u5730\u63d0\u5347\u4e86\u5f00\u53d1\u8005\u7684\u751f\u4ea7\u529b\uff0c\u540c\u65f6\u4e5f\u4f7f\u5f97\u8f6f\u4ef6\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u7684\u4ee3\u7801\u6d4b\u8bd5\u73af\u8282\u66f4\u52a0\u7d27\u51d1\uff0c\u800c\u4e0d\u5fc5\u6d6a\u8d39\u5927\u91cf\u7684\u65f6\u95f4\u5728\u7b49\u5f85\u7a0b\u5e8f\u7684\u6784\u5efa\u4e0a\u3002 \u4f9d\u8d56\u7ba1\u7406\u662f\u73b0\u4eca\u8f6f\u4ef6\u5f00\u53d1\u7684\u4e00\u4e2a\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u4f46\u662f C \u8bed\u8a00\u4e2d\u201c\u5934\u6587\u4ef6\u201d\u7684\u6982\u5ff5\u5374\u5bfc\u81f4\u8d8a\u6765\u8d8a\u591a\u56e0\u4e3a\u4f9d\u8d56\u5173\u7cfb\u800c\u4f7f\u5f97\u6784\u5efa\u4e00\u4e2a\u5927\u578b\u7684\u9879\u76ee\u9700\u8981\u957f\u8fbe\u51e0\u4e2a\u5c0f\u65f6\u7684\u65f6\u95f4\u3002\u4eba\u4eec\u8d8a\u6765\u8d8a\u9700\u8981\u4e00\u95e8\u5177\u6709\u4e25\u683c\u7684\u3001\u7b80\u6d01\u7684\u4f9d\u8d56\u5173\u7cfb\u5206\u6790\u7cfb\u7edf\u4ece\u800c\u80fd\u591f\u5feb\u901f\u7f16\u8bd1\u7684\u7f16\u7a0b\u8bed\u8a00\u3002\u8fd9\u6b63\u662f Go \u8bed\u8a00\u91c7\u7528\u5305\u6a21\u578b\u7684\u6839\u672c\u539f\u56e0\uff0c\u8fd9\u4e2a\u6a21\u578b\u901a\u8fc7\u4e25\u683c\u7684\u4f9d\u8d56\u5173\u7cfb\u68c0\u67e5\u673a\u5236\u6765\u52a0\u5feb\u7a0b\u5e8f\u6784\u5efa\u7684\u901f\u5ea6\uff0c\u63d0\u4f9b\u4e86\u975e\u5e38\u597d\u7684\u53ef\u91cf\u6d4b\u6027\u3002 \u6574\u4e2a Go \u8bed\u8a00\u6807\u51c6\u5e93\u7684\u7f16\u8bd1\u65f6\u95f4\u4e00\u822c\u90fd\u5728 20 \u79d2\u4ee5\u5185\uff0c\u5176\u5b83\u7684\u5e38\u89c4\u9879\u76ee\u4e5f\u53ea\u9700\u8981\u534a\u79d2\u949f\u7684\u65f6\u95f4\u6765\u5b8c\u6210\u7f16\u8bd1\u5de5\u4f5c\u3002\u8fd9\u79cd\u95ea\u7535\u822c\u7684\u7f16\u8bd1\u901f\u5ea6\u751a\u81f3\u6bd4\u7f16\u8bd1 C \u8bed\u8a00\u6216\u8005 Fortran \u66f4\u52a0\u5feb\uff0c\u4f7f\u5f97\u7f16\u8bd1\u8fd9\u4e00\u73af\u8282\u4e0d\u518d\u6210\u4e3a\u5728\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u56f0\u6270\u5f00\u53d1\u4eba\u5458\u7684\u95ee\u9898\u3002\u5728\u8fd9\u4e4b\u524d\uff0c\u52a8\u6001\u8bed\u8a00\u5c06\u5feb\u901f\u7f16\u8bd1\u4f5c\u4e3a\u81ea\u8eab\u7684\u4e00\u5927\u4eae\u70b9\uff0c\u50cf C++ \u90a3\u6837\u7684\u9759\u6001\u8bed\u8a00\u4e00\u822c\u90fd\u6709\u975e\u5e38\u6f2b\u957f\u7684\u7f16\u8bd1\u548c\u94fe\u63a5\u5de5\u4f5c\u3002\u800c\u540c\u6837\u4f5c\u4e3a\u9759\u6001\u8bed\u8a00\u7684 Go \u8bed\u8a00\uff0c\u901a\u8fc7\u81ea\u8eab\u4f18\u826f\u7684\u6784\u5efa\u673a\u5236\uff0c\u6210\u529f\u5730\u53bb\u9664\u4e86\u8fd9\u4e2a\u5f0a\u7aef\uff0c\u4f7f\u5f97\u7a0b\u5e8f\u7684\u6784\u5efa\u8fc7\u7a0b\u53d8\u5f97\u5fae\u4e0d\u8db3\u9053\uff0c\u62e5\u6709\u4e86\u50cf\u811a\u672c\u8bed\u8a00\u548c\u52a8\u6001\u8bed\u8a00\u90a3\u6837\u7684\u9ad8\u6548\u5f00\u53d1\u7684\u80fd\u529b\u3002 \u53e6\u5916\uff0cGo \u8bed\u8a00\u5728\u6267\u884c\u901f\u5ea6\u65b9\u9762\u4e5f\u53ef\u4ee5\u4e0e C/C++ \u76f8\u63d0\u5e76\u8bba\u3002 \u7531\u4e8e\u5185\u5b58\u95ee\u9898\uff08\u901a\u5e38\u79f0\u4e3a\u5185\u5b58\u6cc4\u6f0f\uff09\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u4f34\u968f\u7740 C++ \u7684\u5f00\u53d1\u8005\u4eec\uff0cGo \u8bed\u8a00\u7684\u8bbe\u8ba1\u8005\u4eec\u8ba4\u4e3a\u5185\u5b58\u7ba1\u7406\u4e0d\u5e94\u8be5\u662f\u5f00\u53d1\u4eba\u5458\u6240\u9700\u8981\u8003\u8651\u7684\u95ee\u9898\u3002\u56e0\u6b64\u5c3d\u7ba1 Go \u8bed\u8a00\u50cf\u5176\u5b83\u9759\u6001\u8bed\u8a00\u4e00\u6837\u6267\u884c\u672c\u5730\u4ee3\u7801\uff0c\u4f46\u5b83\u4f9d\u65e7\u8fd0\u884c\u5728\u67d0\u79cd\u610f\u4e49\u4e0a\u7684\u865a\u62df\u673a\uff0c\u4ee5\u6b64\u6765\u5b9e\u73b0\u9ad8\u6548\u5feb\u901f\u7684\u5783\u573e\u56de\u6536\uff08\u4f7f\u7528\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u6807\u8bb0-\u6e05\u9664\u7b97\u6cd5\uff09\u3002 \u5c3d\u7ba1\u5783\u573e\u56de\u6536\u5e76\u4e0d\u5bb9\u6613\u5b9e\u73b0\uff0c\u4f46\u8003\u8651\u8fd9\u5c06\u662f\u672a\u6765\u5e76\u53d1\u5e94\u7528\u7a0b\u5e8f\u53d1\u5c55\u7684\u4e00\u4e2a\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0cGo \u8bed\u8a00\u7684\u8bbe\u8ba1\u8005\u4eec\u8fd8\u662f\u5b8c\u6210\u4e86\u8fd9\u9879\u8270\u96be\u7684\u4efb\u52a1\u3002 Go \u8bed\u8a00\u8fd8\u80fd\u591f\u5728\u8fd0\u884c\u65f6\u8fdb\u884c\u53cd\u5c04\u76f8\u5173\u7684\u64cd\u4f5c\u3002 \u4f7f\u7528 go install \u80fd\u591f\u5f88\u8f7b\u677e\u5730\u5bf9\u7b2c\u4e09\u65b9\u5305\u8fdb\u884c\u90e8\u7f72\u3002 \u6b64\u5916\uff0cGo \u8bed\u8a00\u8fd8\u652f\u6301\u8c03\u7528\u7531 C \u8bed\u8a00\u7f16\u5199\u7684\u6d77\u91cf\u5e93\u6587\u4ef6\uff08 \u7b2c 3.9 \u8282 \uff09\uff0c\u4ece\u800c\u80fd\u591f\u5c06\u8fc7\u53bb\u5f00\u53d1\u7684\u8f6f\u4ef6\u8fdb\u884c\u5feb\u901f\u8fc1\u79fb\u3002","title":"1.2.3 Go \u8bed\u8a00\u7684\u53d1\u5c55\u76ee\u6807"},{"location":"01.2/#124","text":"Go\u8bed\u8a00\u901a\u8fc7\u51cf\u5c11\u5173\u952e\u5b57\u7684\u6570\u91cf\uff0825 \u4e2a\uff09\u6765\u7b80\u5316\u7f16\u7801\u8fc7\u7a0b\u4e2d\u7684\u6df7\u4e71\u548c\u590d\u6742\u5ea6\u3002\u5e72\u51c0\u3001\u6574\u9f50\u548c\u7b80\u6d01\u7684\u8bed\u6cd5\u4e5f\u80fd\u591f\u63d0\u9ad8\u7a0b\u5e8f\u7684\u7f16\u8bd1\u901f\u5ea6\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u5173\u952e\u5b57\u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u5c11\u5230\u751a\u81f3\u4e0d\u9700\u8981\u7b26\u53f7\u8868\u6765\u534f\u52a9\u89e3\u6790\u3002 \u8fd9\u4e9b\u65b9\u9762\u7684\u5de5\u4f5c\u90fd\u662f\u4e3a\u4e86\u51cf\u5c11\u7f16\u7801\u7684\u5de5\u4f5c\u91cf\uff0c\u751a\u81f3\u53ef\u4ee5\u4e0e Java \u7684\u7b80\u5316\u7a0b\u5ea6\u76f8\u6bd4\u8f83\u3002 Go \u8bed\u8a00\u6709\u4e00\u79cd\u6781\u7b80\u62bd\u8c61\u827a\u672f\u5bb6\u7684\u611f\u89c9\uff0c\u56e0\u4e3a\u5b83\u53ea\u63d0\u4f9b\u4e86\u4e00\u5230\u4e24\u79cd\u65b9\u6cd5\u6765\u89e3\u51b3\u67d0\u4e2a\u95ee\u9898\uff0c\u8fd9\u4f7f\u5f97\u5f00\u53d1\u8005\u4eec\u7684\u4ee3\u7801\u90fd\u975e\u5e38\u5bb9\u6613\u9605\u8bfb\u548c\u7406\u89e3\u3002\u4f17\u6240\u5468\u77e5\uff0c\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u662f\u8f6f\u4ef6\u5de5\u7a0b\u91cc\u6700\u91cd\u8981\u7684\u4e00\u90e8\u5206\uff08 \u8bd1\u8005\u6ce8\uff1a\u4ee3\u7801\u662f\u5199\u7ed9\u4eba\u770b\u7684\uff0c\u4e0d\u662f\u5199\u7ed9\u673a\u5668\u770b\u7684 \uff09\u3002 \u8fd9\u4e9b\u8bbe\u8ba1\u7406\u5ff5\u6ca1\u6709\u5efa\u7acb\u5176\u5b83\u6982\u5ff5\u4e4b\u4e0a\uff0c\u6240\u4ee5\u5e76\u4e0d\u4f1a\u56e0\u4e3a\u7275\u626f\u5230\u4e00\u4e9b\u6982\u5ff5\u800c\u5c06\u67d0\u4e2a\u6982\u5ff5\u590d\u6742\u5316\uff0c\u4ed6\u4eec\u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684\u3002 Go \u8bed\u8a00\u6709\u4e00\u5957\u5b8c\u6574\u7684\u7f16\u7801\u89c4\u8303\uff0c\u4f60\u53ef\u4ee5\u5728 Go \u8bed\u8a00\u7f16\u7801\u89c4\u8303 \u9875\u9762\u8fdb\u884c\u67e5\u770b\u3002 \u5b83\u4e0d\u50cf Ruby \u90a3\u6837\u901a\u8fc7\u5b9e\u73b0\u8fc7\u7a0b\u6765\u5b9a\u4e49\u7f16\u7801\u89c4\u8303\u3002\u4f5c\u4e3a\u4e00\u95e8\u5177\u6709\u660e\u786e\u7f16\u7801\u89c4\u8303\u7684\u8bed\u8a00\uff0c\u5b83\u8981\u6c42\u53ef\u4ee5\u91c7\u7528\u4e0d\u540c\u7684\u7f16\u8bd1\u5668\u5982 gc \u548c gccgo\uff08 \u7b2c 2.1 \u8282 \uff09\u8fdb\u884c\u7f16\u8bd1\u5de5\u4f5c\uff0c\u8fd9\u5bf9\u8bed\u8a00\u672c\u8eab\u62e5\u6709\u66f4\u597d\u7684\u7f16\u7801\u89c4\u8303\u8d77\u5230\u5f88\u5927\u5e2e\u52a9\u3002 LALR \u662f Go \u8bed\u8a00\u7684\u8bed\u6cd5\u6807\u51c6\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5728 src/cmd/internal/gc/go.y \u4e2d\u67e5\u770b\u5230\uff0c\u8fd9\u79cd\u8bed\u6cd5\u6807\u51c6\u5728\u7f16\u8bd1\u65f6\u4e0d\u9700\u8981\u7b26\u53f7\u8868\u6765\u534f\u52a9\u89e3\u6790\u3002","title":"1.2.4 \u6307\u5bfc\u8bbe\u8ba1\u539f\u5219"},{"location":"01.2/#125","text":"Go \u8bed\u8a00\u4ece\u672c\u8d28\u4e0a\uff08\u7a0b\u5e8f\u548c\u7ed3\u6784\u65b9\u9762\uff09\u6765\u5b9e\u73b0\u5e76\u53d1\u7f16\u7a0b\u3002 \u56e0\u4e3a Go \u8bed\u8a00\u6ca1\u6709\u7c7b\u548c\u7ee7\u627f\u7684\u6982\u5ff5\uff0c\u6240\u4ee5\u5b83\u548c Java \u6216 C++ \u770b\u8d77\u6765\u5e76\u4e0d\u76f8\u540c\u3002\u4f46\u662f\u5b83\u901a\u8fc7\u63a5\u53e3 (interface) \u7684\u6982\u5ff5\u6765\u5b9e\u73b0\u591a\u6001\u6027\u3002Go \u8bed\u8a00\u6709\u4e00\u4e2a\u6e05\u6670\u6613\u61c2\u7684\u8f7b\u91cf\u7ea7\u7c7b\u578b\u7cfb\u7edf\uff0c\u5728\u7c7b\u578b\u4e4b\u95f4\u4e5f\u6ca1\u6709\u5c42\u7ea7\u4e4b\u8bf4\u3002\u56e0\u6b64\u53ef\u4ee5\u8bf4\u8fd9\u662f\u4e00\u95e8\u6df7\u5408\u578b\u7684\u8bed\u8a00\u3002 \u5728\u4f20\u7edf\u7684\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u4e2d\uff0c\u4f7f\u7528\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u6280\u672f\u663e\u5f97\u975e\u5e38\u81c3\u80bf\uff0c\u5b83\u4eec\u603b\u662f\u901a\u8fc7\u590d\u6742\u7684\u6a21\u5f0f\u6765\u6784\u5efa\u5e9e\u5927\u7684\u7c7b\u578b\u5c42\u7ea7\uff0c\u8fd9\u8fdd\u80cc\u4e86\u7f16\u7a0b\u8bed\u8a00\u5e94\u8be5\u63d0\u5347\u751f\u4ea7\u529b\u7684\u5b97\u65e8\u3002 \u51fd\u6570\u662f Go \u8bed\u8a00\u4e2d\u7684\u57fa\u672c\u6784\u4ef6\uff0c\u5b83\u4eec\u7684\u4f7f\u7528\u65b9\u6cd5\u975e\u5e38\u7075\u6d3b\u3002\u5728 \u7b2c\u516d\u7ae0 \uff0c\u6211\u4eec\u4f1a\u770b\u5230 Go \u8bed\u8a00\u5728\u51fd\u6570\u5f0f\u7f16\u7a0b\u65b9\u9762\u7684\u57fa\u672c\u6982\u5ff5\u3002 Go \u8bed\u8a00\u4f7f\u7528\u9759\u6001\u7c7b\u578b\uff0c\u6240\u4ee5\u5b83\u662f\u7c7b\u578b\u5b89\u5168\u7684\u4e00\u95e8\u8bed\u8a00\uff0c\u52a0\u4e0a\u901a\u8fc7\u6784\u5efa\u5230\u672c\u5730\u4ee3\u7801\uff0c\u7a0b\u5e8f\u7684\u6267\u884c\u901f\u5ea6\u4e5f\u975e\u5e38\u5feb\u3002 \u4f5c\u4e3a\u5f3a\u7c7b\u578b\u8bed\u8a00\uff0c\u9690\u5f0f\u7684\u7c7b\u578b\u8f6c\u6362\u662f\u4e0d\u88ab\u5141\u8bb8\u7684\uff0c\u8bb0\u4f4f\u4e00\u6761\u539f\u5219\uff1a\u8ba9\u6240\u6709\u7684\u4e1c\u897f\u90fd\u662f\u663e\u5f0f\u7684\u3002 Go \u8bed\u8a00\u5176\u5b9e\u4e5f\u6709\u4e00\u4e9b\u52a8\u6001\u8bed\u8a00\u7684\u7279\u6027\uff08\u901a\u8fc7\u5173\u952e\u5b57 var \uff09\uff0c\u6240\u4ee5\u5b83\u5bf9\u90a3\u4e9b\u9003\u79bb Java \u548c .Net \u4e16\u754c\u800c\u4f7f\u7528 Python\u3001Ruby\u3001PHP \u548c JavaScript \u7684\u5f00\u53d1\u8005\u4eec\u4e5f\u5177\u6709\u5f88\u5927\u7684\u5438\u5f15\u529b\u3002 Go \u8bed\u8a00\u652f\u6301\u4ea4\u53c9\u7f16\u8bd1\uff0c\u6bd4\u5982\u8bf4\u4f60\u53ef\u4ee5\u5728\u8fd0\u884c Linux \u7cfb\u7edf\u7684\u8ba1\u7b97\u673a\u4e0a\u5f00\u53d1\u8fd0\u884c Windows \u4e0b\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u662f\u7b2c\u4e00\u95e8\u5b8c\u5168\u652f\u6301 UTF-8 \u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u8fd9\u4e0d\u4ec5\u4f53\u73b0\u5728\u5b83\u53ef\u4ee5\u5904\u7406\u4f7f\u7528 UTF-8 \u7f16\u7801\u7684\u5b57\u7b26\u4e32\uff0c\u5c31\u8fde\u5b83\u7684\u6e90\u7801\u6587\u4ef6\u683c\u5f0f\u90fd\u662f\u4f7f\u7528\u7684 UTF-8 \u7f16\u7801\u3002Go \u8bed\u8a00\u505a\u5230\u4e86\u771f\u6b63\u7684\u56fd\u9645\u5316\uff01","title":"1.2.5 \u8bed\u8a00\u7684\u7279\u6027"},{"location":"01.2/#126","text":"Go \u8bed\u8a00\u88ab\u8bbe\u8ba1\u6210\u4e00\u95e8\u5e94\u7528\u4e8e\u642d\u8f7d Web \u670d\u52a1\u5668\uff0c\u5b58\u50a8\u96c6\u7fa4\u6216\u7c7b\u4f3c\u7528\u9014\u7684\u5de8\u578b\u4e2d\u592e\u670d\u52a1\u5668\u7684\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\u3002\u5bf9\u4e8e\u9ad8\u6027\u80fd\u5206\u5e03\u5f0f\u7cfb\u7edf\u9886\u57df\u800c\u8a00\uff0cGo \u8bed\u8a00\u65e0\u7591\u6bd4\u5927\u591a\u6570\u5176\u5b83\u8bed\u8a00\u6709\u7740\u66f4\u9ad8\u7684\u5f00\u53d1\u6548\u7387\u3002\u5b83\u63d0\u4f9b\u4e86\u6d77\u91cf\u5e76\u884c\u7684\u652f\u6301\uff0c\u8fd9\u5bf9\u4e8e\u6e38\u620f\u670d\u52a1\u7aef\u7684\u5f00\u53d1\u800c\u8a00\u662f\u518d\u597d\u4e0d\u8fc7\u4e86\u3002 Go \u8bed\u8a00\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u76ee\u6807\u5c31\u662f\u5b9e\u73b0\u6240\u8c13\u7684\u590d\u6742\u4e8b\u4ef6\u5904\u7406\uff08 CEP \uff09\uff0c\u8fd9\u9879\u6280\u672f\u8981\u6c42\u6d77\u91cf\u5e76\u884c\u652f\u6301\uff0c\u9ad8\u5ea6\u7684\u62bd\u8c61\u5316\u548c\u9ad8\u6027\u80fd\u3002\u5f53\u6211\u4eec\u8fdb\u5165\u5230\u7269\u8054\u7f51\u65f6\u4ee3\uff0cCEP \u5fc5\u7136\u4f1a\u6210\u4e3a\u4eba\u4eec\u5173\u6ce8\u7684\u7126\u70b9\u3002 \u4f46\u662f Go \u8bed\u8a00\u540c\u65f6\u4e5f\u662f\u4e00\u95e8\u53ef\u4ee5\u7528\u4e8e\u5b9e\u73b0\u4e00\u822c\u76ee\u6807\u7684\u8bed\u8a00\uff0c\u4f8b\u5982\u5bf9\u4e8e\u6587\u672c\u7684\u5904\u7406\uff0c\u524d\u7aef\u5c55\u73b0\uff0c\u751a\u81f3\u50cf\u4f7f\u7528\u811a\u672c\u4e00\u6837\u4f7f\u7528\u5b83\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u56e0\u4e3a\u5783\u573e\u56de\u6536\u548c\u81ea\u52a8\u5185\u5b58\u5206\u914d\u7684\u539f\u56e0\uff0cGo \u8bed\u8a00\u4e0d\u9002\u5408\u7528\u6765\u5f00\u53d1\u5bf9\u5b9e\u65f6\u6027\u8981\u6c42\u5f88\u9ad8\u7684\u8f6f\u4ef6\u3002 \u8d8a\u6765\u8d8a\u591a\u7684\u8c37\u6b4c\u5185\u90e8\u7684\u5927\u578b\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u90fd\u5f00\u59cb\u4f7f\u7528 Go \u8bed\u8a00\u6765\u5f00\u53d1\uff0c\u4f8b\u5982\u8c37\u6b4c\u5730\u7403\u7684\u4e00\u90e8\u5206\u4ee3\u7801\u5c31\u662f\u7531 Go \u8bed\u8a00\u5b8c\u6210\u7684\u3002 \u5982\u679c\u4f60\u60f3\u77e5\u9053\u4e00\u4e9b\u5176\u5b83\u7ec4\u7ec7\u4f7f\u7528Go\u8bed\u8a00\u5f00\u53d1\u7684\u5b9e\u9645\u5e94\u7528\u9879\u76ee\uff0c\u4f60\u53ef\u4ee5\u5230 \u4f7f\u7528 Go \u7684\u7ec4\u7ec7 \u9875\u9762\u8fdb\u884c\u67e5\u770b\u3002\u51fa\u4e8e\u9690\u79c1\u4fdd\u62a4\u7684\u8003\u8651\uff0c\u8bb8\u591a\u516c\u53f8\u7684\u9879\u76ee\u90fd\u6ca1\u6709\u5c55\u793a\u5728\u8fd9\u4e2a\u9875\u9762\u3002\u6211\u4eec\u5c06\u4f1a\u5728 \u7b2c 21 \u7ae0 \u8ba8\u8bba\u5230\u4e00\u4e2a\u4f7f\u7528 Go \u8bed\u8a00\u5f00\u53d1\u7684\u5927\u578b\u5b58\u50a8\u533a\u57df\u7f51\u7edc (SAN) \u6848\u4f8b\u3002 \u5728 Chrome \u6d4f\u89c8\u5668\u4e2d\u5185\u7f6e\u4e86\u4e00\u6b3e Go \u8bed\u8a00\u7684\u7f16\u8bd1\u5668\u7528\u4e8e\u672c\u5730\u5ba2\u6237\u7aef (NaCl)\uff0c\u8fd9\u5f88\u53ef\u80fd\u4f1a\u88ab\u7528\u4e8e\u5728 Chrome OS \u4e2d\u6267\u884c Go \u8bed\u8a00\u5f00\u53d1\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 Go \u8bed\u8a00\u53ef\u4ee5\u5728 Intel \u6216 ARM \u5904\u7406\u5668\u4e0a\u8fd0\u884c\uff0c\u56e0\u6b64\u5b83\u4e5f\u53ef\u4ee5\u5728\u5b89\u5353\u7cfb\u7edf\u4e0b\u8fd0\u884c\uff0c\u4f8b\u5982 Nexus \u7cfb\u5217\u7684\u4ea7\u54c1\u3002 \u5728 Google App Engine \u4e2d\u4f7f\u7528 Go \u8bed\u8a00\uff1a2011 \u5e74 5 \u6708 5 \u65e5\uff0c\u5b98\u65b9\u53d1\u5e03\u4e86\u7528\u4e8e\u5f00\u53d1\u8fd0\u884c\u5728 Google App Engine \u4e0a\u7684 Web \u5e94\u7528\u7684 Go SDK\uff0c\u5728\u6b64\u4e4b\u524d\uff0c\u5f00\u53d1\u8005\u4eec\u53ea\u80fd\u9009\u62e9\u4f7f\u7528 Python \u6216\u8005 Java\u3002\u8fd9\u4e3b\u8981\u662f David Symonds \u548c Nigel Tao \u52aa\u529b\u7684\u6210\u679c\u3002\u76ee\u524d\u6700\u65b0\u7684\u7a33\u5b9a\u7248\u662f\u57fa\u4e8e Go 1.4 \u7684 SDK 1.9.18\uff0c\u4e8e 2015 \u5e74 2 \u6708 18 \u65e5\u53d1\u5e03\u3002\u5f53\u524d Go \u8bed\u8a00\u7684\u7a33\u5b9a\u7248\u672c\u662f Go 1.4.2\u3002","title":"1.2.6 \u8bed\u8a00\u7684\u7528\u9014"},{"location":"01.2/#127","text":"\u8bb8\u591a\u80fd\u591f\u5728\u5927\u591a\u6570\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u4e2d\u4f7f\u7528\u7684\u7279\u6027 Go \u8bed\u8a00\u90fd\u6ca1\u6709\u652f\u6301\uff0c\u4f46\u5176\u4e2d\u7684\u4e00\u90e8\u5206\u53ef\u80fd\u4f1a\u5728\u672a\u6765\u88ab\u652f\u6301\u3002 \u4e3a\u4e86\u7b80\u5316\u8bbe\u8ba1\uff0c\u4e0d\u652f\u6301\u51fd\u6570\u91cd\u8f7d\u548c\u64cd\u4f5c\u7b26\u91cd\u8f7d \u4e3a\u4e86\u907f\u514d\u5728 C/C++ \u5f00\u53d1\u4e2d\u7684\u4e00\u4e9b Bug \u548c\u6df7\u4e71\uff0c\u4e0d\u652f\u6301\u9690\u5f0f\u8f6c\u6362 Go \u8bed\u8a00\u901a\u8fc7\u53e6\u4e00\u79cd\u9014\u5f84\u5b9e\u73b0\u9762\u5411\u5bf9\u8c61\u8bbe\u8ba1\uff08\u7b2c 10 - 11 \u7ae0\uff09\u6765\u653e\u5f03\u7c7b\u548c\u7c7b\u578b\u7684\u7ee7\u627f \u5c3d\u7ba1\u5728\u63a5\u53e3\u7684\u4f7f\u7528\u65b9\u9762\uff08 \u7b2c 11 \u7ae0 \uff09\u53ef\u4ee5\u5b9e\u73b0\u7c7b\u4f3c\u53d8\u4f53\u7c7b\u578b\u7684\u529f\u80fd\uff0c\u4f46\u672c\u8eab\u4e0d\u652f\u6301\u53d8\u4f53\u7c7b\u578b \u4e0d\u652f\u6301\u52a8\u6001\u52a0\u8f7d\u4ee3\u7801 \u4e0d\u652f\u6301\u52a8\u6001\u94fe\u63a5\u5e93 \u4e0d\u652f\u6301\u6cdb\u578b \u901a\u8fc7 recover() \u548c panic() \u6765\u66ff\u4ee3\u5f02\u5e38\u673a\u5236\uff08\u7b2c 13.2 - 13.3 \u8282\uff09 \u4e0d\u652f\u6301\u9759\u6001\u53d8\u91cf \u5173\u4e8e Go \u8bed\u8a00\u5f00\u53d1\u56e2\u961f\u5bf9\u4e8e\u8fd9\u4e9b\u65b9\u9762\u7684\u8ba8\u8bba\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 Go \u5e38\u89c1\u95ee\u9898 \u9875\u9762\u67e5\u770b\u3002","title":"1.2.7 \u5173\u4e8e\u7279\u6027\u7f3a\u5931"},{"location":"01.2/#128-go","text":"\u5982\u679c\u4f60\u6709\u5176\u5b83\u8bed\u8a00\u7684\u7f16\u7a0b\u7ecf\u5386\uff08\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8bed\u8a00\uff0c\u5982\uff1aJava\u3001C#\u3001Object-C\u3001Python\u3001Ruby\uff09\uff0c\u5728\u4f60\u8fdb\u5165\u5230 Go \u8bed\u8a00\u7684\u4e16\u754c\u4e4b\u540e\uff0c\u4f60\u5c06\u4f1a\u50cf\u8ff7\u604b\u4f60\u7684 X \u8bed\u8a00\u4e00\u6837\u65e0\u6cd5\u81ea\u62d4\u3002Go \u8bed\u8a00\u4f7f\u7528\u4e86\u4e0e\u5176\u5b83\u8bed\u8a00\u4e0d\u540c\u7684\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u6240\u4ee5\u5f53\u4f60\u5c1d\u8bd5\u5c06\u4f60\u7684X\u8bed\u8a00\u7684\u4ee3\u7801\u8fc1\u79fb\u5230 Go \u8bed\u8a00\u65f6\uff0c\u4f60\u5c06\u4f1a\u975e\u5e38\u5931\u671b\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u4ece\u5934\u5f00\u59cb\uff0c\u7528 Go \u7684\u7406\u5ff5\u6765\u601d\u8003\u3002 \u5982\u679c\u4f60\u5728\u81f3\u9ad8\u70b9\u4f7f\u7528 Go \u7684\u7406\u5ff5\u6765\u91cd\u65b0\u5ba1\u89c6\u548c\u5206\u6790\u4e00\u4e2a\u95ee\u9898\uff0c\u4f60\u901a\u5e38\u4f1a\u627e\u5230\u4e00\u4e2a\u9002\u7528\u4e8e Go \u8bed\u8a00\u7684\u4f18\u96c5\u7684\u89e3\u51b3\u65b9\u6848\u3002","title":"1.2.8 \u4f7f\u7528 Go \u8bed\u8a00\u7f16\u7a0b"},{"location":"01.2/#129","text":"\u8fd9\u91cc\u5217\u4e3e\u4e00\u4e9b Go \u8bed\u8a00\u7684\u5fc5\u6740\u6280\uff1a \u7b80\u5316\u95ee\u9898\uff0c\u6613\u4e8e\u5b66\u4e60 \u5185\u5b58\u7ba1\u7406\uff0c\u7b80\u6d01\u8bed\u6cd5\uff0c\u6613\u4e8e\u4f7f\u7528 \u5feb\u901f\u7f16\u8bd1\uff0c\u9ad8\u6548\u5f00\u53d1 \u9ad8\u6548\u6267\u884c \u5e76\u53d1\u652f\u6301\uff0c\u8f7b\u677e\u9a7e\u9a6d \u9759\u6001\u7c7b\u578b \u6807\u51c6\u7c7b\u5e93\uff0c\u89c4\u8303\u7edf\u4e00 \u6613\u4e8e\u90e8\u7f72 \u6587\u6863\u5168\u9762 \u514d\u8d39\u5f00\u6e90","title":"1.2.9 \u5c0f\u7ed3"},{"location":"01.2/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u8d77\u6e90\u4e0e\u53d1\u5c55 \u4e0b\u4e00\u7ae0\uff1a \u5b89\u88c5\u4e0e\u8fd0\u884c\u73af\u5883","title":"\u94fe\u63a5"},{"location":"02.1/","text":"2.1 \u5e73\u53f0\u4e0e\u67b6\u6784 \u00b6 Go \u8bed\u8a00\u5f00\u53d1\u56e2\u961f\u5f00\u53d1\u4e86\u9002\u7528\u4e8e\u4ee5\u4e0b\u64cd\u4f5c\u7cfb\u7edf\u7684\u7f16\u8bd1\u5668\uff1a Linux FreeBSD Mac OS X\uff08\u4e5f\u79f0\u4e3a Darwin\uff09 \u76ee\u524d\u67092\u4e2a\u7248\u672c\u7684\u7f16\u8bd1\u5668\uff1aGo \u539f\u751f\u7f16\u8bd1\u5668 gc \u548c\u975e\u539f\u751f\u7f16\u8bd1\u5668 gccgo\uff0c\u8fd9\u4e24\u6b3e\u7f16\u8bd1\u5668\u90fd\u662f\u5728\u7c7b Unix \u7cfb\u7edf\u4e0b\u5de5\u4f5c \u3002\u5176\u4e2d\uff0cgc \u7248\u672c\u7684\u7f16\u8bd1\u5668\u5df2\u7ecf\u88ab\u79fb\u690d\u5230 Windows \u5e73\u53f0\u4e0a\uff0c\u5e76\u96c6\u6210\u5728\u4e3b\u8981\u53d1\u884c\u7248\u4e2d\uff0c\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5b89\u88c5 MinGW \u4ece\u800c\u5728 Windows \u5e73\u53f0\u4e0b\u4f7f\u7528 gcc \u7f16\u8bd1\u5668\u3002\u8fd9\u4e24\u4e2a\u7f16\u8bd1\u5668\u90fd\u662f\u4ee5\u5355\u901a\u9053\u7684\u5f62\u5f0f\u5de5\u4f5c\u3002 \u4f60\u53ef\u4ee5\u83b7\u53d6\u4ee5\u4e0b\u5e73\u53f0\u4e0a\u7684 Go 1.4 \u6e90\u7801\u548c\u4e8c\u8fdb\u5236\u6587\u4ef6\uff1a Linux 2.6+\uff1aamd64\u3001386 \u548c arm \u67b6\u6784 Mac OS X (Snow Leopard + Lion) \uff1aamd64 \u548c 386 \u67b6\u6784 Windows 2000+\uff1aamd64 \u548c 386 \u67b6\u6784 \u5bf9\u4e8e\u975e\u5e38\u5e95\u5c42\u7684\u7eaf Go \u8bed\u8a00\u4ee3\u7801\u6216\u8005\u5305\u800c\u8a00\uff0c\u5728\u5404\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u5e73\u53f0\u4e0a\u7684\u53ef\u79fb\u690d\u6027\u662f\u975e\u5e38\u5f3a\u7684\uff0c\u53ea\u9700\u8981\u5c06\u6e90\u7801\u62f7\u8d1d\u5230\u76f8\u5e94\u5e73\u53f0\u4e0a\u8fdb\u884c\u7f16\u8bd1\u5373\u53ef\uff0c\u6216\u8005\u53ef\u4ee5\u4f7f\u7528\u4ea4\u53c9\u7f16\u8bd1\u6765\u6784\u5efa\u76ee\u6807\u5e73\u53f0\u7684\u5e94\u7528\u7a0b\u5e8f\uff08 \u7b2c 2.2 \u8282 \uff09\u3002\u4f46\u5982\u679c\u4f60\u6253\u7b97\u4f7f\u7528 cgo \u6216\u8005\u7c7b\u4f3c\u6587\u4ef6\u76d1\u63a7\u7cfb\u7edf\u7684\u8f6f\u4ef6\uff0c\u5c31\u9700\u8981\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u8fdb\u884c\u76f8\u5e94\u5730\u4fee\u6539\u4e86\u3002 Go \u539f\u751f\u7f16\u8bd1\u5668 gc\uff1a \u4e3b\u8981\u57fa\u4e8e Ken Thompson \u5148\u524d\u5728 Plan 9 \u64cd\u4f5c\u7cfb\u7edf\u4e0a\u4f7f\u7528\u7684 C \u5de5\u5177\u94fe\u3002 Go \u8bed\u8a00\u7684\u7f16\u8bd1\u5668\u548c\u94fe\u63a5\u5668\u90fd\u662f\u4f7f\u7528 C \u8bed\u8a00\u7f16\u5199\u5e76\u4ea7\u751f\u672c\u5730\u4ee3\u7801\uff0cGo \u4e0d\u5b58\u5728\u81ea\u6211\u5f15\u5bfc\u4e4b\u7c7b\u7684\u529f\u80fd\u3002\u56e0\u6b64\u5982\u679c\u4f7f\u7528\u4e00\u4e2a\u6709\u4e0d\u540c\u6307\u4ee4\u96c6\u7684\u7f16\u8bd1\u5668\u6765\u6784\u5efa Go \u7a0b\u5e8f\uff0c\u5c31\u9700\u8981\u9488\u5bf9\u64cd\u4f5c\u7cfb\u7edf\u548c\u5904\u7406\u5668\u67b6\u6784\uff0832 \u4f4d\u64cd\u4f5c\u7cfb\u7edf\u6216 64 \u4f4d\u64cd\u4f5c\u7cfb\u7edf\uff09\u8fdb\u884c\u533a\u522b\u5bf9\u5f85\u3002\uff08 \u8bd1\u8005\u6ce8\uff1aGo\u4ece1.5\u7248\u672c\u5f00\u59cb\u5df2\u7ecf\u5b9e\u73b0\u81ea\u4e3e\u3002Go\u8bed\u8a00\u7684\u7f16\u8bd1\u5668\u548c\u94fe\u63a5\u5668\u90fd\u662fGo\u8bed\u8a00\u7f16\u5199\u7684 \uff09 \u8fd9\u6b3e\u7f16\u8bd1\u5668\u4f7f\u7528\u975e\u5206\u4ee3\u3001\u65e0\u538b\u7f29\u548c\u5e76\u884c\u7684\u65b9\u5f0f\u8fdb\u884c\u7f16\u8bd1\uff0c\u5b83\u7684\u7f16\u8bd1\u901f\u5ea6\u8981\u6bd4 gccgo \u66f4\u5feb\uff0c\u4ea7\u751f\u66f4\u597d\u7684\u672c\u5730\u4ee3\u7801\uff0c\u4f46\u7f16\u8bd1\u540e\u7684\u7a0b\u5e8f\u4e0d\u80fd\u591f\u4f7f\u7528 gcc \u8fdb\u884c\u94fe\u63a5\u3002 \u7f16\u8bd1\u5668\u76ee\u524d\u652f\u6301\u4ee5\u4e0b\u57fa\u4e8e Intel \u6216 AMD \u5904\u7406\u5668\u67b6\u6784\u7684\u7a0b\u5e8f\u6784\u5efa\u3002 \u56fe2.1 gc \u7f16\u8bd1\u5668\u652f\u6301\u7684\u5904\u7406\u5668\u67b6\u6784 \u5f53\u4f60\u7b2c\u4e00\u6b21\u770b\u5230\u8fd9\u5957\u547d\u540d\u7cfb\u7edf\u7684\u65f6\u5019\u4f60\u4f1a\u89c9\u5f97\u5f88\u5947\u8469\uff0c\u4e0d\u8fc7\u8fd9\u4e9b\u547d\u540d\u90fd\u662f\u6765\u81ea\u4e8e Plan 9 \u9879\u76ee\u3002 g = \u7f16\u8bd1\u5668\uff1a\u5c06\u6e90\u4ee3\u7801\u7f16\u8bd1\u4e3a\u9879\u76ee\u4ee3\u7801\uff08\u7a0b\u5e8f\u6587\u672c\uff09 l = \u94fe\u63a5\u5668\uff1a\u5c06\u9879\u76ee\u4ee3\u7801\u94fe\u63a5\u5230\u53ef\u6267\u884c\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff08\u673a\u5668\u4ee3\u7801\uff09 \uff08\u76f8\u5173\u7684 C \u7f16\u8bd1\u5668\u540d\u79f0\u4e3a 6c\u30018c \u548c 5c\uff0c\u76f8\u5173\u7684\u6c47\u7f16\u5668\u540d\u79f0\u4e3a 6a\u30018a \u548c 5a\uff09 \u6807\u8bb0 (Flags) \u662f\u6307\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u8bbe\u7f6e\u53ef\u9009\u53c2\u6570\u6765\u5f71\u54cd\u7f16\u8bd1\u5668\u6216\u94fe\u63a5\u5668\u7684\u6784\u5efa\u8fc7\u7a0b\u6216\u5f97\u5230\u4e00\u4e2a\u7279\u6b8a\u7684\u76ee\u6807\u7ed3\u679c\u3002 \u53ef\u7528\u7684\u7f16\u8bd1\u5668\u6807\u8bb0\u5982\u4e0b\uff1a flags: -I \u9488\u5bf9\u5305\u7684\u76ee\u5f55\u641c\u7d22 -d \u6253\u5370\u58f0\u660e\u4fe1\u606f -e \u4e0d\u9650\u5236\u9519\u8bef\u6253\u5370\u7684\u4e2a\u6570 -f \u6253\u5370\u6808\u7ed3\u6784 -h \u53d1\u751f\u9519\u8bef\u65f6\u8fdb\u5165\u6050\u614c\uff08panic\uff09\u72b6\u6001 -o \u6307\u5b9a\u8f93\u51fa\u6587\u4ef6\u540d // \u8be6\u89c1\u7b2c3.4\u8282 -S \u6253\u5370\u4ea7\u751f\u7684\u6c47\u7f16\u4ee3\u7801 -V \u6253\u5370\u7f16\u8bd1\u5668\u7248\u672c // \u8be6\u89c1\u7b2c2.3\u8282 -u \u7981\u6b62\u4f7f\u7528 unsafe \u5305\u4e2d\u7684\u4ee3\u7801 -w \u6253\u5370\u5f52\u7c7b\u540e\u7684\u8bed\u6cd5\u89e3\u6790\u6811 -x \u6253\u5370 lex tokens \u4ece Go 1.0.3 \u7248\u672c\u5f00\u59cb\uff0c\u4e0d\u518d\u4f7f\u7528 8g \uff0c 8l \u4e4b\u7c7b\u7684\u6307\u4ee4\u8fdb\u884c\u7a0b\u5e8f\u7684\u6784\u5efa\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u7edf\u4e00\u7684 go build \u548c go install \u7b49\u547d\u4ee4\uff0c\u800c\u8fd9\u4e9b\u6307\u4ee4\u4f1a\u81ea\u52a8\u8c03\u7528\u76f8\u5173\u7684\u7f16\u8bd1\u5668\u6216\u94fe\u63a5\u5668\u3002 \u5982\u679c\u4f60\u60f3\u83b7\u5f97\u66f4\u6df1\u5c42\u6b21\u7684\u4fe1\u606f\uff0c\u4f60\u53ef\u4ee5\u5728\u76ee\u5f55 $GOROOT/src/cmd \u4e0b\u627e\u5230\u7f16\u8bd1\u5668\u548c\u94fe\u63a5\u5668\u7684\u6e90\u4ee3\u7801\u3002Go \u8bed\u8a00\u672c\u8eab\u662f\u7531 C \u8bed\u8a00\u5f00\u53d1\u7684\uff0c\u800c\u4e0d\u662f Go \u8bed\u8a00\uff08Go 1.5 \u5f00\u59cb\u81ea\u4e3e\uff09\u3002\u8bcd\u6cd5\u5206\u6790\u7a0b\u5e8f\u662f GNU bison\uff0c\u8bed\u6cd5\u5206\u6790\u7a0b\u5e8f\u662f\u540d\u4e3a $GOROOT/src/cmd/gc/go.y \u7684 yacc \u6587\u4ef6\uff0c\u5b83\u4f1a\u5728\u540c\u4e00\u76ee\u5f55\u8f93\u51fa y.tab.{c,h} \u6587\u4ef6\u3002\u5982\u679c\u4f60\u60f3\u77e5\u9053\u66f4\u591a\u6709\u5173\u6784\u5efa\u8fc7\u7a0b\u7684\u4fe1\u606f\uff0c\u4f60\u53ef\u4ee5\u5728 $GOROOT/src/make.bash \u4e2d\u627e\u5230\u3002 \u5927\u90e8\u5206\u7684\u76ee\u5f55\u90fd\u5305\u542b\u4e86\u540d\u4e3a doc.go \u7684\u6587\u4ef6\uff0c\u8fd9\u4e2a\u6587\u4ef6\u63d0\u4f9b\u4e86\u66f4\u591a\u8be6\u7ec6\u7684\u4fe1\u606f\u3002 gccgo \u7f16\u8bd1\u5668\uff1a \u4e00\u6b3e\u76f8\u5bf9\u4e8e gc \u800c\u8a00\u66f4\u52a0\u4f20\u7edf\u7684\u7f16\u8bd1\u5668\uff0c\u4f7f\u7528 GCC \u4f5c\u4e3a\u540e\u7aef\u3002GCC \u662f\u4e00\u6b3e\u975e\u5e38\u6d41\u884c\u7684 GNU \u7f16\u8bd1\u5668\uff0c\u5b83\u80fd\u591f\u6784\u5efa\u57fa\u4e8e\u4f17\u591a\u5904\u7406\u5668\u67b6\u6784\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u7f16\u8bd1\u901f\u5ea6\u76f8\u5bf9 gc \u8f83\u6162\uff0c\u4f46\u4ea7\u751f\u7684\u672c\u5730\u4ee3\u7801\u8fd0\u884c\u8981\u7a0d\u5fae\u5feb\u4e00\u70b9\u3002\u5b83\u540c\u65f6\u4e5f\u63d0\u4f9b\u4e00\u4e9b\u4e0e C \u8bed\u8a00\u4e4b\u95f4\u7684\u4e92\u64cd\u4f5c\u6027\u3002 \u4ece Go 1 \u7248\u672c\u5f00\u59cb\uff0cgc \u548c gccgo \u5728\u7f16\u8bd1\u65b9\u9762\u90fd\u6709\u7b49\u4ef7\u7684\u529f\u80fd\u3002 \u6587\u4ef6\u6269\u5c55\u540d\u4e0e\u5305 (package)\uff1a Go \u8bed\u8a00\u6e90\u6587\u4ef6\u7684\u6269\u5c55\u540d\u5f88\u663e\u7136\u5c31\u662f .go \u3002 C \u6587\u4ef6\u4f7f\u7528\u540e\u7f00\u540d .c \uff0c\u6c47\u7f16\u6587\u4ef6\u4f7f\u7528\u540e\u7f00\u540d .s \u3002\u6240\u6709\u7684\u6e90\u4ee3\u7801\u6587\u4ef6\u90fd\u662f\u901a\u8fc7\u5305 (packages) \u6765\u7ec4\u7ec7\u3002\u5305\u542b\u53ef\u6267\u884c\u4ee3\u7801\u7684\u5305\u6587\u4ef6\u5728\u88ab\u538b\u7f29\u540e\u4f7f\u7528\u6269\u5c55\u540d .a \uff08AR \u6587\u6863\uff09\u3002 Go \u8bed\u8a00\u7684\u6807\u51c6\u5e93\uff08 \u7b2c 9.1 \u8282 \uff09\u5305\u6587\u4ef6\u5728\u88ab\u5b89\u88c5\u540e\u5c31\u662f\u4f7f\u7528\u8fd9\u79cd\u683c\u5f0f\u7684\u6587\u4ef6\u3002 \u6ce8\u610f \u5f53\u4f60\u5728\u521b\u5efa\u76ee\u5f55\u65f6\uff0c\u6587\u4ef6\u5939\u540d\u79f0\u6c38\u8fdc\u4e0d\u5e94\u8be5\u5305\u542b\u7a7a\u683c\uff0c\u800c\u5e94\u8be5\u4f7f\u7528\u4e0b\u5212\u7ebf \"_\" \u6216\u8005\u5176\u5b83\u4e00\u822c\u7b26\u53f7\u4ee3\u66ff\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u7ae0\uff1a \u8bed\u8a00\u7684\u4e3b\u8981\u7279\u6027\u4e0e\u53d1\u5c55\u7684\u73af\u5883\u548c\u5f71\u54cd\u56e0\u7d20 \u4e0b\u4e00\u8282\uff1a Go \u73af\u5883\u53d8\u91cf","title":"2.1 \u5e73\u53f0\u4e0e\u67b6\u6784"},{"location":"02.1/#21","text":"Go \u8bed\u8a00\u5f00\u53d1\u56e2\u961f\u5f00\u53d1\u4e86\u9002\u7528\u4e8e\u4ee5\u4e0b\u64cd\u4f5c\u7cfb\u7edf\u7684\u7f16\u8bd1\u5668\uff1a Linux FreeBSD Mac OS X\uff08\u4e5f\u79f0\u4e3a Darwin\uff09 \u76ee\u524d\u67092\u4e2a\u7248\u672c\u7684\u7f16\u8bd1\u5668\uff1aGo \u539f\u751f\u7f16\u8bd1\u5668 gc \u548c\u975e\u539f\u751f\u7f16\u8bd1\u5668 gccgo\uff0c\u8fd9\u4e24\u6b3e\u7f16\u8bd1\u5668\u90fd\u662f\u5728\u7c7b Unix \u7cfb\u7edf\u4e0b\u5de5\u4f5c \u3002\u5176\u4e2d\uff0cgc \u7248\u672c\u7684\u7f16\u8bd1\u5668\u5df2\u7ecf\u88ab\u79fb\u690d\u5230 Windows \u5e73\u53f0\u4e0a\uff0c\u5e76\u96c6\u6210\u5728\u4e3b\u8981\u53d1\u884c\u7248\u4e2d\uff0c\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5b89\u88c5 MinGW \u4ece\u800c\u5728 Windows \u5e73\u53f0\u4e0b\u4f7f\u7528 gcc \u7f16\u8bd1\u5668\u3002\u8fd9\u4e24\u4e2a\u7f16\u8bd1\u5668\u90fd\u662f\u4ee5\u5355\u901a\u9053\u7684\u5f62\u5f0f\u5de5\u4f5c\u3002 \u4f60\u53ef\u4ee5\u83b7\u53d6\u4ee5\u4e0b\u5e73\u53f0\u4e0a\u7684 Go 1.4 \u6e90\u7801\u548c\u4e8c\u8fdb\u5236\u6587\u4ef6\uff1a Linux 2.6+\uff1aamd64\u3001386 \u548c arm \u67b6\u6784 Mac OS X (Snow Leopard + Lion) \uff1aamd64 \u548c 386 \u67b6\u6784 Windows 2000+\uff1aamd64 \u548c 386 \u67b6\u6784 \u5bf9\u4e8e\u975e\u5e38\u5e95\u5c42\u7684\u7eaf Go \u8bed\u8a00\u4ee3\u7801\u6216\u8005\u5305\u800c\u8a00\uff0c\u5728\u5404\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u5e73\u53f0\u4e0a\u7684\u53ef\u79fb\u690d\u6027\u662f\u975e\u5e38\u5f3a\u7684\uff0c\u53ea\u9700\u8981\u5c06\u6e90\u7801\u62f7\u8d1d\u5230\u76f8\u5e94\u5e73\u53f0\u4e0a\u8fdb\u884c\u7f16\u8bd1\u5373\u53ef\uff0c\u6216\u8005\u53ef\u4ee5\u4f7f\u7528\u4ea4\u53c9\u7f16\u8bd1\u6765\u6784\u5efa\u76ee\u6807\u5e73\u53f0\u7684\u5e94\u7528\u7a0b\u5e8f\uff08 \u7b2c 2.2 \u8282 \uff09\u3002\u4f46\u5982\u679c\u4f60\u6253\u7b97\u4f7f\u7528 cgo \u6216\u8005\u7c7b\u4f3c\u6587\u4ef6\u76d1\u63a7\u7cfb\u7edf\u7684\u8f6f\u4ef6\uff0c\u5c31\u9700\u8981\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u8fdb\u884c\u76f8\u5e94\u5730\u4fee\u6539\u4e86\u3002 Go \u539f\u751f\u7f16\u8bd1\u5668 gc\uff1a \u4e3b\u8981\u57fa\u4e8e Ken Thompson \u5148\u524d\u5728 Plan 9 \u64cd\u4f5c\u7cfb\u7edf\u4e0a\u4f7f\u7528\u7684 C \u5de5\u5177\u94fe\u3002 Go \u8bed\u8a00\u7684\u7f16\u8bd1\u5668\u548c\u94fe\u63a5\u5668\u90fd\u662f\u4f7f\u7528 C \u8bed\u8a00\u7f16\u5199\u5e76\u4ea7\u751f\u672c\u5730\u4ee3\u7801\uff0cGo \u4e0d\u5b58\u5728\u81ea\u6211\u5f15\u5bfc\u4e4b\u7c7b\u7684\u529f\u80fd\u3002\u56e0\u6b64\u5982\u679c\u4f7f\u7528\u4e00\u4e2a\u6709\u4e0d\u540c\u6307\u4ee4\u96c6\u7684\u7f16\u8bd1\u5668\u6765\u6784\u5efa Go \u7a0b\u5e8f\uff0c\u5c31\u9700\u8981\u9488\u5bf9\u64cd\u4f5c\u7cfb\u7edf\u548c\u5904\u7406\u5668\u67b6\u6784\uff0832 \u4f4d\u64cd\u4f5c\u7cfb\u7edf\u6216 64 \u4f4d\u64cd\u4f5c\u7cfb\u7edf\uff09\u8fdb\u884c\u533a\u522b\u5bf9\u5f85\u3002\uff08 \u8bd1\u8005\u6ce8\uff1aGo\u4ece1.5\u7248\u672c\u5f00\u59cb\u5df2\u7ecf\u5b9e\u73b0\u81ea\u4e3e\u3002Go\u8bed\u8a00\u7684\u7f16\u8bd1\u5668\u548c\u94fe\u63a5\u5668\u90fd\u662fGo\u8bed\u8a00\u7f16\u5199\u7684 \uff09 \u8fd9\u6b3e\u7f16\u8bd1\u5668\u4f7f\u7528\u975e\u5206\u4ee3\u3001\u65e0\u538b\u7f29\u548c\u5e76\u884c\u7684\u65b9\u5f0f\u8fdb\u884c\u7f16\u8bd1\uff0c\u5b83\u7684\u7f16\u8bd1\u901f\u5ea6\u8981\u6bd4 gccgo \u66f4\u5feb\uff0c\u4ea7\u751f\u66f4\u597d\u7684\u672c\u5730\u4ee3\u7801\uff0c\u4f46\u7f16\u8bd1\u540e\u7684\u7a0b\u5e8f\u4e0d\u80fd\u591f\u4f7f\u7528 gcc \u8fdb\u884c\u94fe\u63a5\u3002 \u7f16\u8bd1\u5668\u76ee\u524d\u652f\u6301\u4ee5\u4e0b\u57fa\u4e8e Intel \u6216 AMD \u5904\u7406\u5668\u67b6\u6784\u7684\u7a0b\u5e8f\u6784\u5efa\u3002 \u56fe2.1 gc \u7f16\u8bd1\u5668\u652f\u6301\u7684\u5904\u7406\u5668\u67b6\u6784 \u5f53\u4f60\u7b2c\u4e00\u6b21\u770b\u5230\u8fd9\u5957\u547d\u540d\u7cfb\u7edf\u7684\u65f6\u5019\u4f60\u4f1a\u89c9\u5f97\u5f88\u5947\u8469\uff0c\u4e0d\u8fc7\u8fd9\u4e9b\u547d\u540d\u90fd\u662f\u6765\u81ea\u4e8e Plan 9 \u9879\u76ee\u3002 g = \u7f16\u8bd1\u5668\uff1a\u5c06\u6e90\u4ee3\u7801\u7f16\u8bd1\u4e3a\u9879\u76ee\u4ee3\u7801\uff08\u7a0b\u5e8f\u6587\u672c\uff09 l = \u94fe\u63a5\u5668\uff1a\u5c06\u9879\u76ee\u4ee3\u7801\u94fe\u63a5\u5230\u53ef\u6267\u884c\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff08\u673a\u5668\u4ee3\u7801\uff09 \uff08\u76f8\u5173\u7684 C \u7f16\u8bd1\u5668\u540d\u79f0\u4e3a 6c\u30018c \u548c 5c\uff0c\u76f8\u5173\u7684\u6c47\u7f16\u5668\u540d\u79f0\u4e3a 6a\u30018a \u548c 5a\uff09 \u6807\u8bb0 (Flags) \u662f\u6307\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u8bbe\u7f6e\u53ef\u9009\u53c2\u6570\u6765\u5f71\u54cd\u7f16\u8bd1\u5668\u6216\u94fe\u63a5\u5668\u7684\u6784\u5efa\u8fc7\u7a0b\u6216\u5f97\u5230\u4e00\u4e2a\u7279\u6b8a\u7684\u76ee\u6807\u7ed3\u679c\u3002 \u53ef\u7528\u7684\u7f16\u8bd1\u5668\u6807\u8bb0\u5982\u4e0b\uff1a flags: -I \u9488\u5bf9\u5305\u7684\u76ee\u5f55\u641c\u7d22 -d \u6253\u5370\u58f0\u660e\u4fe1\u606f -e \u4e0d\u9650\u5236\u9519\u8bef\u6253\u5370\u7684\u4e2a\u6570 -f \u6253\u5370\u6808\u7ed3\u6784 -h \u53d1\u751f\u9519\u8bef\u65f6\u8fdb\u5165\u6050\u614c\uff08panic\uff09\u72b6\u6001 -o \u6307\u5b9a\u8f93\u51fa\u6587\u4ef6\u540d // \u8be6\u89c1\u7b2c3.4\u8282 -S \u6253\u5370\u4ea7\u751f\u7684\u6c47\u7f16\u4ee3\u7801 -V \u6253\u5370\u7f16\u8bd1\u5668\u7248\u672c // \u8be6\u89c1\u7b2c2.3\u8282 -u \u7981\u6b62\u4f7f\u7528 unsafe \u5305\u4e2d\u7684\u4ee3\u7801 -w \u6253\u5370\u5f52\u7c7b\u540e\u7684\u8bed\u6cd5\u89e3\u6790\u6811 -x \u6253\u5370 lex tokens \u4ece Go 1.0.3 \u7248\u672c\u5f00\u59cb\uff0c\u4e0d\u518d\u4f7f\u7528 8g \uff0c 8l \u4e4b\u7c7b\u7684\u6307\u4ee4\u8fdb\u884c\u7a0b\u5e8f\u7684\u6784\u5efa\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u7edf\u4e00\u7684 go build \u548c go install \u7b49\u547d\u4ee4\uff0c\u800c\u8fd9\u4e9b\u6307\u4ee4\u4f1a\u81ea\u52a8\u8c03\u7528\u76f8\u5173\u7684\u7f16\u8bd1\u5668\u6216\u94fe\u63a5\u5668\u3002 \u5982\u679c\u4f60\u60f3\u83b7\u5f97\u66f4\u6df1\u5c42\u6b21\u7684\u4fe1\u606f\uff0c\u4f60\u53ef\u4ee5\u5728\u76ee\u5f55 $GOROOT/src/cmd \u4e0b\u627e\u5230\u7f16\u8bd1\u5668\u548c\u94fe\u63a5\u5668\u7684\u6e90\u4ee3\u7801\u3002Go \u8bed\u8a00\u672c\u8eab\u662f\u7531 C \u8bed\u8a00\u5f00\u53d1\u7684\uff0c\u800c\u4e0d\u662f Go \u8bed\u8a00\uff08Go 1.5 \u5f00\u59cb\u81ea\u4e3e\uff09\u3002\u8bcd\u6cd5\u5206\u6790\u7a0b\u5e8f\u662f GNU bison\uff0c\u8bed\u6cd5\u5206\u6790\u7a0b\u5e8f\u662f\u540d\u4e3a $GOROOT/src/cmd/gc/go.y \u7684 yacc \u6587\u4ef6\uff0c\u5b83\u4f1a\u5728\u540c\u4e00\u76ee\u5f55\u8f93\u51fa y.tab.{c,h} \u6587\u4ef6\u3002\u5982\u679c\u4f60\u60f3\u77e5\u9053\u66f4\u591a\u6709\u5173\u6784\u5efa\u8fc7\u7a0b\u7684\u4fe1\u606f\uff0c\u4f60\u53ef\u4ee5\u5728 $GOROOT/src/make.bash \u4e2d\u627e\u5230\u3002 \u5927\u90e8\u5206\u7684\u76ee\u5f55\u90fd\u5305\u542b\u4e86\u540d\u4e3a doc.go \u7684\u6587\u4ef6\uff0c\u8fd9\u4e2a\u6587\u4ef6\u63d0\u4f9b\u4e86\u66f4\u591a\u8be6\u7ec6\u7684\u4fe1\u606f\u3002 gccgo \u7f16\u8bd1\u5668\uff1a \u4e00\u6b3e\u76f8\u5bf9\u4e8e gc \u800c\u8a00\u66f4\u52a0\u4f20\u7edf\u7684\u7f16\u8bd1\u5668\uff0c\u4f7f\u7528 GCC \u4f5c\u4e3a\u540e\u7aef\u3002GCC \u662f\u4e00\u6b3e\u975e\u5e38\u6d41\u884c\u7684 GNU \u7f16\u8bd1\u5668\uff0c\u5b83\u80fd\u591f\u6784\u5efa\u57fa\u4e8e\u4f17\u591a\u5904\u7406\u5668\u67b6\u6784\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u7f16\u8bd1\u901f\u5ea6\u76f8\u5bf9 gc \u8f83\u6162\uff0c\u4f46\u4ea7\u751f\u7684\u672c\u5730\u4ee3\u7801\u8fd0\u884c\u8981\u7a0d\u5fae\u5feb\u4e00\u70b9\u3002\u5b83\u540c\u65f6\u4e5f\u63d0\u4f9b\u4e00\u4e9b\u4e0e C \u8bed\u8a00\u4e4b\u95f4\u7684\u4e92\u64cd\u4f5c\u6027\u3002 \u4ece Go 1 \u7248\u672c\u5f00\u59cb\uff0cgc \u548c gccgo \u5728\u7f16\u8bd1\u65b9\u9762\u90fd\u6709\u7b49\u4ef7\u7684\u529f\u80fd\u3002 \u6587\u4ef6\u6269\u5c55\u540d\u4e0e\u5305 (package)\uff1a Go \u8bed\u8a00\u6e90\u6587\u4ef6\u7684\u6269\u5c55\u540d\u5f88\u663e\u7136\u5c31\u662f .go \u3002 C \u6587\u4ef6\u4f7f\u7528\u540e\u7f00\u540d .c \uff0c\u6c47\u7f16\u6587\u4ef6\u4f7f\u7528\u540e\u7f00\u540d .s \u3002\u6240\u6709\u7684\u6e90\u4ee3\u7801\u6587\u4ef6\u90fd\u662f\u901a\u8fc7\u5305 (packages) \u6765\u7ec4\u7ec7\u3002\u5305\u542b\u53ef\u6267\u884c\u4ee3\u7801\u7684\u5305\u6587\u4ef6\u5728\u88ab\u538b\u7f29\u540e\u4f7f\u7528\u6269\u5c55\u540d .a \uff08AR \u6587\u6863\uff09\u3002 Go \u8bed\u8a00\u7684\u6807\u51c6\u5e93\uff08 \u7b2c 9.1 \u8282 \uff09\u5305\u6587\u4ef6\u5728\u88ab\u5b89\u88c5\u540e\u5c31\u662f\u4f7f\u7528\u8fd9\u79cd\u683c\u5f0f\u7684\u6587\u4ef6\u3002 \u6ce8\u610f \u5f53\u4f60\u5728\u521b\u5efa\u76ee\u5f55\u65f6\uff0c\u6587\u4ef6\u5939\u540d\u79f0\u6c38\u8fdc\u4e0d\u5e94\u8be5\u5305\u542b\u7a7a\u683c\uff0c\u800c\u5e94\u8be5\u4f7f\u7528\u4e0b\u5212\u7ebf \"_\" \u6216\u8005\u5176\u5b83\u4e00\u822c\u7b26\u53f7\u4ee3\u66ff\u3002","title":"2.1 \u5e73\u53f0\u4e0e\u67b6\u6784"},{"location":"02.1/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u7ae0\uff1a \u8bed\u8a00\u7684\u4e3b\u8981\u7279\u6027\u4e0e\u53d1\u5c55\u7684\u73af\u5883\u548c\u5f71\u54cd\u56e0\u7d20 \u4e0b\u4e00\u8282\uff1a Go \u73af\u5883\u53d8\u91cf","title":"\u94fe\u63a5"},{"location":"02.2/","text":"2.2 Go \u73af\u5883\u53d8\u91cf \u00b6 Go \u5f00\u53d1\u73af\u5883\u4f9d\u8d56\u4e8e\u4e00\u4e9b\u64cd\u4f5c\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\uff0c\u4f60\u6700\u597d\u5728\u5b89\u88c5 Go \u4e4b\u524d\u5c31\u5df2\u7ecf\u8bbe\u7f6e\u597d\u4ed6\u4eec\u3002\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f Windows \u7684\u8bdd\uff0c\u4f60\u5b8c\u5168\u4e0d\u7528\u8fdb\u884c\u624b\u52a8\u8bbe\u7f6e\uff0cGo \u5c06\u88ab\u9ed8\u8ba4\u5b89\u88c5\u5728\u76ee\u5f55 c:/go \u4e0b\u3002\u8fd9\u91cc\u5217\u4e3e\u51e0\u4e2a\u6700\u4e3a\u91cd\u8981\u7684\u73af\u5883\u53d8\u91cf\uff1a $GOROOT \u8868\u793a Go \u5728\u4f60\u7684\u7535\u8111\u4e0a\u7684\u5b89\u88c5\u4f4d\u7f6e\uff0c\u5b83\u7684\u503c\u4e00\u822c\u90fd\u662f $HOME/go \uff0c\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5b89\u88c5\u5728\u522b\u7684\u5730\u65b9\u3002 $GOARCH \u8868\u793a\u76ee\u6807\u673a\u5668\u7684\u5904\u7406\u5668\u67b6\u6784\uff0c\u5b83\u7684\u503c\u53ef\u4ee5\u662f 386\u3001amd64 \u6216 arm\u3002 $GOOS \u8868\u793a\u76ee\u6807\u673a\u5668\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5b83\u7684\u503c\u53ef\u4ee5\u662f darwin\u3001freebsd\u3001linux \u6216 windows\u3002 $GOBIN \u8868\u793a\u7f16\u8bd1\u5668\u548c\u94fe\u63a5\u5668\u7684\u5b89\u88c5\u4f4d\u7f6e\uff0c\u9ed8\u8ba4\u662f $GOROOT/bin \uff0c\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f Go 1.0.3 \u53ca\u4ee5\u540e\u7684\u7248\u672c\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u4f60\u53ef\u4ee5\u5c06\u5b83\u7684\u503c\u8bbe\u7f6e\u4e3a\u7a7a\uff0cGo \u5c06\u4f1a\u4f7f\u7528\u524d\u9762\u63d0\u5230\u7684\u9ed8\u8ba4\u503c\u3002 \u76ee\u6807\u673a\u5668\u662f\u6307\u4f60\u6253\u7b97\u8fd0\u884c\u4f60\u7684 Go \u5e94\u7528\u7a0b\u5e8f\u7684\u673a\u5668\u3002 Go \u7f16\u8bd1\u5668\u652f\u6301\u4ea4\u53c9\u7f16\u8bd1\uff0c\u4e5f\u5c31\u662f\u8bf4\u4f60\u53ef\u4ee5\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u6784\u5efa\u80fd\u591f\u5728\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u548c\u5904\u7406\u5668\u67b6\u6784\u4e0a\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4e5f\u5c31\u662f\u8bf4\u7f16\u5199\u6e90\u4ee3\u7801\u7684\u673a\u5668\u53ef\u4ee5\u548c\u76ee\u6807\u673a\u5668\u6709\u5b8c\u5168\u4e0d\u540c\u7684\u7279\u6027\uff08\u64cd\u4f5c\u7cfb\u7edf\u4e0e\u5904\u7406\u5668\u67b6\u6784\uff09\u3002 \u4e3a\u4e86\u533a\u5206\u672c\u5730\u673a\u5668\u548c\u76ee\u6807\u673a\u5668\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 $GOHOSTOS \u548c $GOHOSTARCH \u8bbe\u7f6e\u672c\u5730\u673a\u5668\u7684\u64cd\u4f5c\u7cfb\u7edf\u540d\u79f0\u548c\u7f16\u8bd1\u4f53\u7cfb\u7ed3\u6784\uff0c\u8fd9\u4e24\u4e2a\u53d8\u91cf\u53ea\u6709\u5728\u8fdb\u884c\u4ea4\u53c9\u7f16\u8bd1\u7684\u65f6\u5019\u624d\u4f1a\u7528\u5230\uff0c\u5982\u679c\u4f60\u4e0d\u8fdb\u884c\u663e\u793a\u8bbe\u7f6e\uff0c\u4ed6\u4eec\u7684\u503c\u4f1a\u548c\u672c\u5730\u673a\u5668\uff08 $GOOS \u548c $GOARCH \uff09\u4e00\u6837\u3002 $GOPATH \u9ed8\u8ba4\u91c7\u7528\u548c $GOROOT \u4e00\u6837\u7684\u503c\uff0c\u4f46\u4ece Go 1.1 \u7248\u672c\u5f00\u59cb\uff0c\u4f60\u5fc5\u987b\u4fee\u6539\u4e3a\u5176\u5b83\u8def\u5f84\u3002\u5b83\u53ef\u4ee5\u5305\u542b\u591a\u4e2a Go \u8bed\u8a00\u6e90\u7801\u6587\u4ef6\u3001\u5305\u6587\u4ef6\u548c\u53ef\u6267\u884c\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u800c\u8fd9\u4e9b\u8def\u5f84\u4e0b\u53c8\u5fc5\u987b\u5206\u522b\u5305\u542b\u4e09\u4e2a\u89c4\u5b9a\u7684\u76ee\u5f55\uff1a src \u3001 pkg \u548c bin \uff0c\u8fd9\u4e09\u4e2a\u76ee\u5f55\u5206\u522b\u7528\u4e8e\u5b58\u653e\u6e90\u7801\u6587\u4ef6\u3001\u5305\u6587\u4ef6\u548c\u53ef\u6267\u884c\u6587\u4ef6\u3002 $GOARM \u4e13\u95e8\u9488\u5bf9\u57fa\u4e8e arm \u67b6\u6784\u7684\u5904\u7406\u5668\uff0c\u5b83\u7684\u503c\u53ef\u4ee5\u662f 5 \u6216 6\uff0c\u9ed8\u8ba4\u4e3a 6\u3002 $GOMAXPROCS \u7528\u4e8e\u8bbe\u7f6e\u5e94\u7528\u7a0b\u5e8f\u53ef\u4f7f\u7528\u7684\u5904\u7406\u5668\u4e2a\u6570\u4e0e\u6838\u6570\uff0c\u8be6\u89c1 \u7b2c 14.1.3 \u8282 \u3002 \u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4f1a\u8ba8\u8bba\u5982\u4f55\u5728 Linux\u3001Mac OS X \u548c Windows \u4e0a\u5b89\u88c5 Go \u8bed\u8a00\u3002\u5728 FreeBSD \u4e0a\u7684\u5b89\u88c5\u548c Linux \u975e\u5e38\u7c7b\u4f3c\u3002\u5f00\u53d1\u56e2\u961f\u6b63\u5728\u5c1d\u8bd5\u5c06 Go \u8bed\u8a00\u79fb\u690d\u5230\u5176\u5b83\u4f8b\u5982 OpenBSD\u3001DragonFlyBSD\u3001NetBSD\u3001Plan 9\u3001Haiku \u548c Solaris \u64cd\u4f5c\u7cfb\u7edf\u4e0a\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u4e2a\u9875\u9762\u627e\u5230\u6700\u8fd1\u7684\u52a8\u6001\uff1a Go Porting Efforts \u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5e73\u53f0\u4e0e\u67b6\u6784 \u4e0b\u4e00\u8282\uff1a \u5728 Linux \u4e0a\u5b89\u88c5 Go","title":"2.2 Go \u73af\u5883\u53d8\u91cf"},{"location":"02.2/#22-go","text":"Go \u5f00\u53d1\u73af\u5883\u4f9d\u8d56\u4e8e\u4e00\u4e9b\u64cd\u4f5c\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\uff0c\u4f60\u6700\u597d\u5728\u5b89\u88c5 Go \u4e4b\u524d\u5c31\u5df2\u7ecf\u8bbe\u7f6e\u597d\u4ed6\u4eec\u3002\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f Windows \u7684\u8bdd\uff0c\u4f60\u5b8c\u5168\u4e0d\u7528\u8fdb\u884c\u624b\u52a8\u8bbe\u7f6e\uff0cGo \u5c06\u88ab\u9ed8\u8ba4\u5b89\u88c5\u5728\u76ee\u5f55 c:/go \u4e0b\u3002\u8fd9\u91cc\u5217\u4e3e\u51e0\u4e2a\u6700\u4e3a\u91cd\u8981\u7684\u73af\u5883\u53d8\u91cf\uff1a $GOROOT \u8868\u793a Go \u5728\u4f60\u7684\u7535\u8111\u4e0a\u7684\u5b89\u88c5\u4f4d\u7f6e\uff0c\u5b83\u7684\u503c\u4e00\u822c\u90fd\u662f $HOME/go \uff0c\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5b89\u88c5\u5728\u522b\u7684\u5730\u65b9\u3002 $GOARCH \u8868\u793a\u76ee\u6807\u673a\u5668\u7684\u5904\u7406\u5668\u67b6\u6784\uff0c\u5b83\u7684\u503c\u53ef\u4ee5\u662f 386\u3001amd64 \u6216 arm\u3002 $GOOS \u8868\u793a\u76ee\u6807\u673a\u5668\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5b83\u7684\u503c\u53ef\u4ee5\u662f darwin\u3001freebsd\u3001linux \u6216 windows\u3002 $GOBIN \u8868\u793a\u7f16\u8bd1\u5668\u548c\u94fe\u63a5\u5668\u7684\u5b89\u88c5\u4f4d\u7f6e\uff0c\u9ed8\u8ba4\u662f $GOROOT/bin \uff0c\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f Go 1.0.3 \u53ca\u4ee5\u540e\u7684\u7248\u672c\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u4f60\u53ef\u4ee5\u5c06\u5b83\u7684\u503c\u8bbe\u7f6e\u4e3a\u7a7a\uff0cGo \u5c06\u4f1a\u4f7f\u7528\u524d\u9762\u63d0\u5230\u7684\u9ed8\u8ba4\u503c\u3002 \u76ee\u6807\u673a\u5668\u662f\u6307\u4f60\u6253\u7b97\u8fd0\u884c\u4f60\u7684 Go \u5e94\u7528\u7a0b\u5e8f\u7684\u673a\u5668\u3002 Go \u7f16\u8bd1\u5668\u652f\u6301\u4ea4\u53c9\u7f16\u8bd1\uff0c\u4e5f\u5c31\u662f\u8bf4\u4f60\u53ef\u4ee5\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u6784\u5efa\u80fd\u591f\u5728\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u548c\u5904\u7406\u5668\u67b6\u6784\u4e0a\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4e5f\u5c31\u662f\u8bf4\u7f16\u5199\u6e90\u4ee3\u7801\u7684\u673a\u5668\u53ef\u4ee5\u548c\u76ee\u6807\u673a\u5668\u6709\u5b8c\u5168\u4e0d\u540c\u7684\u7279\u6027\uff08\u64cd\u4f5c\u7cfb\u7edf\u4e0e\u5904\u7406\u5668\u67b6\u6784\uff09\u3002 \u4e3a\u4e86\u533a\u5206\u672c\u5730\u673a\u5668\u548c\u76ee\u6807\u673a\u5668\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 $GOHOSTOS \u548c $GOHOSTARCH \u8bbe\u7f6e\u672c\u5730\u673a\u5668\u7684\u64cd\u4f5c\u7cfb\u7edf\u540d\u79f0\u548c\u7f16\u8bd1\u4f53\u7cfb\u7ed3\u6784\uff0c\u8fd9\u4e24\u4e2a\u53d8\u91cf\u53ea\u6709\u5728\u8fdb\u884c\u4ea4\u53c9\u7f16\u8bd1\u7684\u65f6\u5019\u624d\u4f1a\u7528\u5230\uff0c\u5982\u679c\u4f60\u4e0d\u8fdb\u884c\u663e\u793a\u8bbe\u7f6e\uff0c\u4ed6\u4eec\u7684\u503c\u4f1a\u548c\u672c\u5730\u673a\u5668\uff08 $GOOS \u548c $GOARCH \uff09\u4e00\u6837\u3002 $GOPATH \u9ed8\u8ba4\u91c7\u7528\u548c $GOROOT \u4e00\u6837\u7684\u503c\uff0c\u4f46\u4ece Go 1.1 \u7248\u672c\u5f00\u59cb\uff0c\u4f60\u5fc5\u987b\u4fee\u6539\u4e3a\u5176\u5b83\u8def\u5f84\u3002\u5b83\u53ef\u4ee5\u5305\u542b\u591a\u4e2a Go \u8bed\u8a00\u6e90\u7801\u6587\u4ef6\u3001\u5305\u6587\u4ef6\u548c\u53ef\u6267\u884c\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u800c\u8fd9\u4e9b\u8def\u5f84\u4e0b\u53c8\u5fc5\u987b\u5206\u522b\u5305\u542b\u4e09\u4e2a\u89c4\u5b9a\u7684\u76ee\u5f55\uff1a src \u3001 pkg \u548c bin \uff0c\u8fd9\u4e09\u4e2a\u76ee\u5f55\u5206\u522b\u7528\u4e8e\u5b58\u653e\u6e90\u7801\u6587\u4ef6\u3001\u5305\u6587\u4ef6\u548c\u53ef\u6267\u884c\u6587\u4ef6\u3002 $GOARM \u4e13\u95e8\u9488\u5bf9\u57fa\u4e8e arm \u67b6\u6784\u7684\u5904\u7406\u5668\uff0c\u5b83\u7684\u503c\u53ef\u4ee5\u662f 5 \u6216 6\uff0c\u9ed8\u8ba4\u4e3a 6\u3002 $GOMAXPROCS \u7528\u4e8e\u8bbe\u7f6e\u5e94\u7528\u7a0b\u5e8f\u53ef\u4f7f\u7528\u7684\u5904\u7406\u5668\u4e2a\u6570\u4e0e\u6838\u6570\uff0c\u8be6\u89c1 \u7b2c 14.1.3 \u8282 \u3002 \u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4f1a\u8ba8\u8bba\u5982\u4f55\u5728 Linux\u3001Mac OS X \u548c Windows \u4e0a\u5b89\u88c5 Go \u8bed\u8a00\u3002\u5728 FreeBSD \u4e0a\u7684\u5b89\u88c5\u548c Linux \u975e\u5e38\u7c7b\u4f3c\u3002\u5f00\u53d1\u56e2\u961f\u6b63\u5728\u5c1d\u8bd5\u5c06 Go \u8bed\u8a00\u79fb\u690d\u5230\u5176\u5b83\u4f8b\u5982 OpenBSD\u3001DragonFlyBSD\u3001NetBSD\u3001Plan 9\u3001Haiku \u548c Solaris \u64cd\u4f5c\u7cfb\u7edf\u4e0a\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u4e2a\u9875\u9762\u627e\u5230\u6700\u8fd1\u7684\u52a8\u6001\uff1a Go Porting Efforts \u3002","title":"2.2 Go \u73af\u5883\u53d8\u91cf"},{"location":"02.2/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5e73\u53f0\u4e0e\u67b6\u6784 \u4e0b\u4e00\u8282\uff1a \u5728 Linux \u4e0a\u5b89\u88c5 Go","title":"\u94fe\u63a5"},{"location":"02.3/","text":"2.3 \u5728 Linux \u4e0a\u5b89\u88c5 Go \u00b6 \u5982\u679c\u4f60\u80fd\u591f\u81ea\u5df1\u4e0b\u8f7d\u5e76\u7f16\u8bd1 Go \u7684\u6e90\u4ee3\u7801\u7684\u8bdd,\u5bf9\u4f60\u6765\u8bf4\u662f\u975e\u5e38\u6709\u6559\u80b2\u610f\u4e49\u7684\uff0c\u4f60\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u9875\u9762\u627e\u5230\u5b89\u88c5\u6307\u5357\u548c\u4e0b\u8f7d\u5730\u5740\uff1a Download the Go distribution \u3002 \u6211\u4eec\u63a5\u4e0b\u6765\u4e5f\u4f1a\u5e26\u4f60\u4e00\u6b65\u6b65\u5730\u5b8c\u6210\u5b89\u88c5\u8fc7\u7a0b\u3002 \u8bbe\u7f6e Go \u73af\u5883\u53d8\u91cf \u6211\u4eec\u5728 Linux \u7cfb\u7edf\u4e0b\u4e00\u822c\u901a\u8fc7\u6587\u4ef6 $HOME/.bashrc \u914d\u7f6e\u81ea\u5b9a\u4e49\u73af\u5883\u53d8\u91cf\uff0c\u6839\u636e\u4e0d\u540c\u7684\u53d1\u884c\u7248\u4e5f\u53ef\u80fd\u662f\u6587\u4ef6 $HOME/.profile \uff0c\u7136\u540e\u4f7f\u7528 gedit \u6216 vi \u6765\u7f16\u8f91\u6587\u4ef6\u5185\u5bb9\u3002 export GOROOT=$HOME/go \u4e3a\u4e86\u786e\u4fdd\u76f8\u5173\u6587\u4ef6\u5728\u6587\u4ef6\u7cfb\u7edf\u7684\u4efb\u4f55\u5730\u65b9\u90fd\u80fd\u88ab\u8c03\u7528\uff0c\u4f60\u8fd8\u9700\u8981\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\uff1a export PATH=$PATH:$GOROOT/bin \u5728\u5f00\u53d1 Go \u9879\u76ee\u65f6\uff0c\u4f60\u8fd8\u9700\u8981\u4e00\u4e2a\u73af\u5883\u53d8\u91cf\u6765\u4fdd\u5b58\u4f60\u7684\u5de5\u4f5c\u76ee\u5f55\u3002 export GOPATH=$HOME/Applications/Go $GOPATH \u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u5de5\u4f5c\u76ee\u5f55\uff0c\u53d6\u51b3\u4e8e\u4f60\u7684\u4e2a\u4eba\u60c5\u51b5\u3002\u5982\u679c\u4f60\u8bbe\u7f6e\u4e86\u591a\u4e2a\u5de5\u4f5c\u76ee\u5f55\uff0c\u90a3\u4e48\u5f53\u4f60\u5728\u4e4b\u540e\u4f7f\u7528 go get \uff08\u8fdc\u7a0b\u5305\u5b89\u88c5\u547d\u4ee4\uff09\u65f6\u8fdc\u7a0b\u5305\u5c06\u4f1a\u88ab\u5b89\u88c5\u5728\u7b2c\u4e00\u4e2a\u76ee\u5f55\u4e0b\u3002 \u5728\u5b8c\u6210\u8fd9\u4e9b\u8bbe\u7f6e\u540e\uff0c\u4f60\u9700\u8981\u5728\u7ec8\u7aef\u8f93\u5165\u6307\u4ee4 source .bashrc \u4ee5\u4f7f\u8fd9\u4e9b\u73af\u5883\u53d8\u91cf\u751f\u6548\u3002\u7136\u540e\u91cd\u542f\u7ec8\u7aef\uff0c\u8f93\u5165 go env \u548c env \u6765\u68c0\u67e5\u73af\u5883\u53d8\u91cf\u662f\u5426\u8bbe\u7f6e\u6b63\u786e\u3002 \u5b89\u88c5 C \u5de5\u5177 Go \u7684\u5de5\u5177\u94fe\u662f\u7528 C \u8bed\u8a00\u7f16\u5199\u7684\uff0c\u56e0\u6b64\u5728\u5b89\u88c5 Go \u4e4b\u524d\u4f60\u9700\u8981\u5148\u5b89\u88c5\u76f8\u5173\u7684 C \u5de5\u5177\u3002\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f Ubuntu \u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u5728\u7ec8\u7aef\u8f93\u5165\u4ee5\u4e0b\u6307\u4ee4\uff08 \u8bd1\u8005\u6ce8\uff1a\u7531\u4e8e\u7f51\u7edc\u73af\u5883\u7684\u7279\u6b8a\u6027\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u5c06\u6bcf\u4e2a\u5de5\u5177\u5206\u5f00\u5b89\u88c5 \uff09\u3002 sudo apt-get install bison ed gawk gcc libc6-dev make \u4f60\u53ef\u4ee5\u5728\u5176\u5b83\u53d1\u884c\u7248\u4e0a\u4f7f\u7528 RPM \u4e4b\u7c7b\u7684\u5de5\u5177\u3002 \u83b7\u53d6 Go \u6e90\u4ee3\u7801 \u4ece \u5b98\u65b9\u9875\u9762 \u6216 \u56fd\u5185\u955c\u50cf \u4e0b\u8f7d Go \u7684\u6e90\u7801\u5305\u5230\u4f60\u7684\u8ba1\u7b97\u673a\u4e0a\uff0c\u7136\u540e\u5c06\u89e3\u538b\u540e\u7684\u76ee\u5f55 go \u901a\u8fc7\u547d\u4ee4\u79fb\u52a8\u5230 $GOROOT \u6240\u6307\u5411\u7684\u4f4d\u7f6e\u3002 wget https://storage.googleapis.com/golang/go<VERSION>.src.tar.gz tar -zxvf go<VERSION>.src.tar.gz sudo mv go $GOROOT \u6784\u5efa Go \u5728\u7ec8\u7aef\u4f7f\u7528\u4ee5\u4e0b\u6307\u4ee4\u6765\u8fdb\u884c\u7f16\u8bd1\u5de5\u4f5c\u3002 cd $GOROOT/src ./all.bash \u7f16\u8bd1\u6ce8\u610f\u4e8b\u9879 \u7f16\u8bd1\u65f6\u5982\u679c\u51fa\u73b0\u5982\u4e0b\u62a5\u9519\uff1a \u53ef\u80fd\u662f\u56e0\u4e3a $GOROOT_BOOTSTRAP \u53d8\u91cf\u6ca1\u6709\u8bbe\u7f6e\u3002\u8fd9\u4e2a\u76ee\u5f55\u5728\u5b89\u88c5 Go 1.5 \u7248\u672c\u53ca\u4e4b\u540e\u7684\u7248\u672c\u65f6\u9700\u8981\u8bbe\u7f6e\u3002 \u7531\u4e8e\u5728 1.4 \u7248\u672c\u540e\uff0cGo \u7f16\u8bd1\u5668\u5b9e\u73b0\u4e86\u81ea\u4e3e\uff0c\u5373\u901a\u8fc7 1.4 \u7248\u672c\u6765\u7f16\u8bd1\u5b89\u88c5\u4e4b\u540e\u7248\u672c\u7684\u7f16\u8bd1\u5668\u3002\u5982\u679c\u4e0d\u8bbe\u7f6e\u8be5\u73af\u5883\u53d8\u91cf\u7684\u8bdd\uff0c\u4f1a\u4ea7\u751f\u8fd9\u6837\u4e00\u4e2a\u9519\u8bef Set $GOROOT_BOOTSTRAP to a working Go tree >= Go 1.4. \u3002 \u8bbe\u7f6e $GOROOT_BOOTSTRAP \u53d8\u91cf\uff1a export GOROOT_BOOTSTRAP=$HOME/go1.4 \u8bbe\u7f6e\u5b8c\u6210\u540e\uff0c\u4e0b\u8f7d 1.4 \u7248\u672c\u7684\u6e90\u7801\u5230\u8be5\u76ee\u5f55\uff1a git clone https://github.com/golang/go.git $HOME/go1.4 git checkout -b release-branch.go1.4 origin/release-branch.go1.4 \u8fdb\u5165 1.4 \u7684\u6587\u4ef6\u5939\u540e\uff0c\u8fdb\u884c\u7f16\u8bd1\uff1a cd $HOME/go1.4/src ./make.bash 1.4 \u7f16\u8bd1\u5b89\u88c5\u597d\u4e4b\u540e\uff0c\u8fdb\u5165 $GOROOT \u6587\u4ef6\u5939\uff0c\u771f\u6b63\u5f00\u59cb\u7f16\u8bd1\u5b89\u88c5 Go\uff1a cd $HOME/go/src ./all.bash \u5728\u5b8c\u6210\u7f16\u8bd1\u4e4b\u540e\uff08\u901a\u5e38\u5728 1 \u5206\u949f\u4ee5\u5185\uff0c\u5982\u679c\u4f60\u5728 B \u578b\u6811\u8393\u6d3e\u4e0a\u7f16\u8bd1\uff0c\u4e00\u822c\u9700\u8981 1 \u4e2a\u5c0f\u65f6\uff09\uff0c\u4f60\u4f1a\u5728\u7ec8\u7aef\u770b\u5230\u5982\u4e0b\u4fe1\u606f\u88ab\u6253\u5370\uff1a \u56fe 2.3 \u5b8c\u6210\u7f16\u8bd1\u540e\u5728\u7ec8\u7aef\u6253\u5370\u7684\u4fe1\u606f \u6ce8\u610f\u4e8b\u9879 \u5728\u6d4b\u8bd5 net/http \u5305\u65f6\u6709\u4e00\u4e2a\u6d4b\u8bd5\u4f1a\u5c1d\u8bd5\u8fde\u63a5 google.com \uff0c\u4f60\u53ef\u80fd\u4f1a\u770b\u5230\u5982\u4e0b\u6240\u793a\u7684\u4e00\u4e2a\u65e0\u5398\u5934\u7684\u9519\u8bef\u62a5\u544a\uff1a \u2018make[2]: Leaving directory `/localusr/go/src/pkg/net\u2019 \u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528\u4e00\u4e2a\u5e26\u6709\u9632\u706b\u5899\u7684\u673a\u5668\uff0c\u6211\u5efa\u8bae\u4f60\u53ef\u4ee5\u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u6682\u65f6\u5173\u95ed\u9632\u706b\u5899\uff0c\u4ee5\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u9519\u8bef\u3002 \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u53e6\u4e00\u4e2a\u529e\u6cd5\u662f\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf $DISABLE_NET_TESTS \u6765\u544a\u8bc9\u6784\u5efa\u5de5\u5177\u5ffd\u7565 net/http \u5305\u7684\u76f8\u5173\u6d4b\u8bd5\uff1a export DISABLE_NET_TESTS=1 \u5982\u679c\u4f60\u5b8c\u5168\u4e0d\u60f3\u8fd0\u884c\u5305\u7684\u6d4b\u8bd5\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c ./make.bash \u6765\u8fdb\u884c\u5355\u7eaf\u7684\u6784\u5efa\u8fc7\u7a0b\u3002 \u6d4b\u8bd5\u5b89\u88c5 \u4f7f\u7528\u4f60\u6700\u559c\u7231\u7684\u7f16\u8f91\u5668\u6765\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9\uff0c\u5e76\u4fdd\u5b58\u4e3a\u6587\u4ef6\u540d hello_world1.go \u3002 \u793a\u4f8b 2.1 hello_world1.go package main func main () { println ( \"Hello\" , \"world\" ) } \u5207\u6362\u76f8\u5173\u76ee\u5f55\u5230\u4e0b\uff0c\u7136\u540e\u6267\u884c\u6307\u4ee4 go run hello_world1.go \uff0c\u5c06\u4f1a\u6253\u5370\u4fe1\u606f\uff1a Hello, world \u3002 \u9a8c\u8bc1\u5b89\u88c5\u7248\u672c \u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u7ec8\u7aef\u8f93\u5165\u6307\u4ee4 go version \u6765\u6253\u5370 Go \u7684\u7248\u672c\u4fe1\u606f\u3002 \u5982\u679c\u4f60\u60f3\u8981\u901a\u8fc7 Go \u4ee3\u7801\u5728\u8fd0\u884c\u65f6\u68c0\u6d4b\u7248\u672c\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4f8b\u5b50\u5b9e\u73b0\u3002 \u793a\u4f8b 2.2 version.go package main import ( \"fmt\" \"runtime\" ) func main () { fmt . Printf ( \"%s\" , runtime . Version ()) } \u8fd9\u6bb5\u4ee3\u7801\u5c06\u4f1a\u8f93\u51fa go1.4.2 \u6216\u7c7b\u4f3c\u5b57\u7b26\u4e32\u3002 \u66f4\u65b0\u7248\u672c \u4f60\u53ef\u4ee5\u5728 \u53d1\u5e03\u5386\u53f2 \u9875\u9762\u67e5\u770b\u5230\u6700\u65b0\u7684\u7a33\u5b9a\u7248\u3002 \u5f53\u524d\u6700\u65b0\u7684\u7a33\u5b9a\u7248 Go 1 \u7cfb\u5217\u4e8e 2012 \u5e74 3 \u6708 28 \u65e5\u53d1\u5e03\u3002 Go \u7684\u6e90\u4ee3\u7801\u6709\u4ee5\u4e0b\u4e09\u4e2a\u5206\u652f\uff1a - Go release\uff1a\u6700\u65b0\u7a33\u5b9a\u7248\uff0c\u5b9e\u9645\u5f00\u53d1\u6700\u4f73\u9009\u62e9 - Go weekly\uff1a\u5305\u542b\u6700\u8fd1\u66f4\u65b0\u7684\u7248\u672c\uff0c\u4e00\u822c\u6bcf\u5468\u66f4\u65b0\u4e00\u6b21 - Go tip\uff1a\u6c38\u8fdc\u4fdd\u6301\u6700\u65b0\u7684\u7248\u672c\uff0c\u76f8\u5f53\u4e8e\u5185\u6d4b\u7248 \u5f53\u4f60\u5728\u4f7f\u7528\u4e0d\u540c\u7684\u7248\u672c\u65f6\uff0c\u6ce8\u610f\u5b98\u65b9\u535a\u5ba2\u53d1\u5e03\u7684\u4fe1\u606f\uff0c\u56e0\u4e3a\u4f60\u6240\u67e5\u9605\u7684\u6587\u6863\u53ef\u80fd\u548c\u4f60\u6b63\u5728\u4f7f\u7528\u7684\u7248\u672c\u4e0d\u76f8\u7b26\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Go \u73af\u5883\u53d8\u91cf \u4e0b\u4e00\u8282\uff1a \u5728 Mac OS X \u4e0a\u5b89\u88c5 Go","title":"2.3 \u5728 Linux \u4e0a\u5b89\u88c5 Go"},{"location":"02.3/#23-linux-go","text":"\u5982\u679c\u4f60\u80fd\u591f\u81ea\u5df1\u4e0b\u8f7d\u5e76\u7f16\u8bd1 Go \u7684\u6e90\u4ee3\u7801\u7684\u8bdd,\u5bf9\u4f60\u6765\u8bf4\u662f\u975e\u5e38\u6709\u6559\u80b2\u610f\u4e49\u7684\uff0c\u4f60\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u9875\u9762\u627e\u5230\u5b89\u88c5\u6307\u5357\u548c\u4e0b\u8f7d\u5730\u5740\uff1a Download the Go distribution \u3002 \u6211\u4eec\u63a5\u4e0b\u6765\u4e5f\u4f1a\u5e26\u4f60\u4e00\u6b65\u6b65\u5730\u5b8c\u6210\u5b89\u88c5\u8fc7\u7a0b\u3002 \u8bbe\u7f6e Go \u73af\u5883\u53d8\u91cf \u6211\u4eec\u5728 Linux \u7cfb\u7edf\u4e0b\u4e00\u822c\u901a\u8fc7\u6587\u4ef6 $HOME/.bashrc \u914d\u7f6e\u81ea\u5b9a\u4e49\u73af\u5883\u53d8\u91cf\uff0c\u6839\u636e\u4e0d\u540c\u7684\u53d1\u884c\u7248\u4e5f\u53ef\u80fd\u662f\u6587\u4ef6 $HOME/.profile \uff0c\u7136\u540e\u4f7f\u7528 gedit \u6216 vi \u6765\u7f16\u8f91\u6587\u4ef6\u5185\u5bb9\u3002 export GOROOT=$HOME/go \u4e3a\u4e86\u786e\u4fdd\u76f8\u5173\u6587\u4ef6\u5728\u6587\u4ef6\u7cfb\u7edf\u7684\u4efb\u4f55\u5730\u65b9\u90fd\u80fd\u88ab\u8c03\u7528\uff0c\u4f60\u8fd8\u9700\u8981\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\uff1a export PATH=$PATH:$GOROOT/bin \u5728\u5f00\u53d1 Go \u9879\u76ee\u65f6\uff0c\u4f60\u8fd8\u9700\u8981\u4e00\u4e2a\u73af\u5883\u53d8\u91cf\u6765\u4fdd\u5b58\u4f60\u7684\u5de5\u4f5c\u76ee\u5f55\u3002 export GOPATH=$HOME/Applications/Go $GOPATH \u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u5de5\u4f5c\u76ee\u5f55\uff0c\u53d6\u51b3\u4e8e\u4f60\u7684\u4e2a\u4eba\u60c5\u51b5\u3002\u5982\u679c\u4f60\u8bbe\u7f6e\u4e86\u591a\u4e2a\u5de5\u4f5c\u76ee\u5f55\uff0c\u90a3\u4e48\u5f53\u4f60\u5728\u4e4b\u540e\u4f7f\u7528 go get \uff08\u8fdc\u7a0b\u5305\u5b89\u88c5\u547d\u4ee4\uff09\u65f6\u8fdc\u7a0b\u5305\u5c06\u4f1a\u88ab\u5b89\u88c5\u5728\u7b2c\u4e00\u4e2a\u76ee\u5f55\u4e0b\u3002 \u5728\u5b8c\u6210\u8fd9\u4e9b\u8bbe\u7f6e\u540e\uff0c\u4f60\u9700\u8981\u5728\u7ec8\u7aef\u8f93\u5165\u6307\u4ee4 source .bashrc \u4ee5\u4f7f\u8fd9\u4e9b\u73af\u5883\u53d8\u91cf\u751f\u6548\u3002\u7136\u540e\u91cd\u542f\u7ec8\u7aef\uff0c\u8f93\u5165 go env \u548c env \u6765\u68c0\u67e5\u73af\u5883\u53d8\u91cf\u662f\u5426\u8bbe\u7f6e\u6b63\u786e\u3002 \u5b89\u88c5 C \u5de5\u5177 Go \u7684\u5de5\u5177\u94fe\u662f\u7528 C \u8bed\u8a00\u7f16\u5199\u7684\uff0c\u56e0\u6b64\u5728\u5b89\u88c5 Go \u4e4b\u524d\u4f60\u9700\u8981\u5148\u5b89\u88c5\u76f8\u5173\u7684 C \u5de5\u5177\u3002\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f Ubuntu \u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u5728\u7ec8\u7aef\u8f93\u5165\u4ee5\u4e0b\u6307\u4ee4\uff08 \u8bd1\u8005\u6ce8\uff1a\u7531\u4e8e\u7f51\u7edc\u73af\u5883\u7684\u7279\u6b8a\u6027\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u5c06\u6bcf\u4e2a\u5de5\u5177\u5206\u5f00\u5b89\u88c5 \uff09\u3002 sudo apt-get install bison ed gawk gcc libc6-dev make \u4f60\u53ef\u4ee5\u5728\u5176\u5b83\u53d1\u884c\u7248\u4e0a\u4f7f\u7528 RPM \u4e4b\u7c7b\u7684\u5de5\u5177\u3002 \u83b7\u53d6 Go \u6e90\u4ee3\u7801 \u4ece \u5b98\u65b9\u9875\u9762 \u6216 \u56fd\u5185\u955c\u50cf \u4e0b\u8f7d Go \u7684\u6e90\u7801\u5305\u5230\u4f60\u7684\u8ba1\u7b97\u673a\u4e0a\uff0c\u7136\u540e\u5c06\u89e3\u538b\u540e\u7684\u76ee\u5f55 go \u901a\u8fc7\u547d\u4ee4\u79fb\u52a8\u5230 $GOROOT \u6240\u6307\u5411\u7684\u4f4d\u7f6e\u3002 wget https://storage.googleapis.com/golang/go<VERSION>.src.tar.gz tar -zxvf go<VERSION>.src.tar.gz sudo mv go $GOROOT \u6784\u5efa Go \u5728\u7ec8\u7aef\u4f7f\u7528\u4ee5\u4e0b\u6307\u4ee4\u6765\u8fdb\u884c\u7f16\u8bd1\u5de5\u4f5c\u3002 cd $GOROOT/src ./all.bash \u7f16\u8bd1\u6ce8\u610f\u4e8b\u9879 \u7f16\u8bd1\u65f6\u5982\u679c\u51fa\u73b0\u5982\u4e0b\u62a5\u9519\uff1a \u53ef\u80fd\u662f\u56e0\u4e3a $GOROOT_BOOTSTRAP \u53d8\u91cf\u6ca1\u6709\u8bbe\u7f6e\u3002\u8fd9\u4e2a\u76ee\u5f55\u5728\u5b89\u88c5 Go 1.5 \u7248\u672c\u53ca\u4e4b\u540e\u7684\u7248\u672c\u65f6\u9700\u8981\u8bbe\u7f6e\u3002 \u7531\u4e8e\u5728 1.4 \u7248\u672c\u540e\uff0cGo \u7f16\u8bd1\u5668\u5b9e\u73b0\u4e86\u81ea\u4e3e\uff0c\u5373\u901a\u8fc7 1.4 \u7248\u672c\u6765\u7f16\u8bd1\u5b89\u88c5\u4e4b\u540e\u7248\u672c\u7684\u7f16\u8bd1\u5668\u3002\u5982\u679c\u4e0d\u8bbe\u7f6e\u8be5\u73af\u5883\u53d8\u91cf\u7684\u8bdd\uff0c\u4f1a\u4ea7\u751f\u8fd9\u6837\u4e00\u4e2a\u9519\u8bef Set $GOROOT_BOOTSTRAP to a working Go tree >= Go 1.4. \u3002 \u8bbe\u7f6e $GOROOT_BOOTSTRAP \u53d8\u91cf\uff1a export GOROOT_BOOTSTRAP=$HOME/go1.4 \u8bbe\u7f6e\u5b8c\u6210\u540e\uff0c\u4e0b\u8f7d 1.4 \u7248\u672c\u7684\u6e90\u7801\u5230\u8be5\u76ee\u5f55\uff1a git clone https://github.com/golang/go.git $HOME/go1.4 git checkout -b release-branch.go1.4 origin/release-branch.go1.4 \u8fdb\u5165 1.4 \u7684\u6587\u4ef6\u5939\u540e\uff0c\u8fdb\u884c\u7f16\u8bd1\uff1a cd $HOME/go1.4/src ./make.bash 1.4 \u7f16\u8bd1\u5b89\u88c5\u597d\u4e4b\u540e\uff0c\u8fdb\u5165 $GOROOT \u6587\u4ef6\u5939\uff0c\u771f\u6b63\u5f00\u59cb\u7f16\u8bd1\u5b89\u88c5 Go\uff1a cd $HOME/go/src ./all.bash \u5728\u5b8c\u6210\u7f16\u8bd1\u4e4b\u540e\uff08\u901a\u5e38\u5728 1 \u5206\u949f\u4ee5\u5185\uff0c\u5982\u679c\u4f60\u5728 B \u578b\u6811\u8393\u6d3e\u4e0a\u7f16\u8bd1\uff0c\u4e00\u822c\u9700\u8981 1 \u4e2a\u5c0f\u65f6\uff09\uff0c\u4f60\u4f1a\u5728\u7ec8\u7aef\u770b\u5230\u5982\u4e0b\u4fe1\u606f\u88ab\u6253\u5370\uff1a \u56fe 2.3 \u5b8c\u6210\u7f16\u8bd1\u540e\u5728\u7ec8\u7aef\u6253\u5370\u7684\u4fe1\u606f \u6ce8\u610f\u4e8b\u9879 \u5728\u6d4b\u8bd5 net/http \u5305\u65f6\u6709\u4e00\u4e2a\u6d4b\u8bd5\u4f1a\u5c1d\u8bd5\u8fde\u63a5 google.com \uff0c\u4f60\u53ef\u80fd\u4f1a\u770b\u5230\u5982\u4e0b\u6240\u793a\u7684\u4e00\u4e2a\u65e0\u5398\u5934\u7684\u9519\u8bef\u62a5\u544a\uff1a \u2018make[2]: Leaving directory `/localusr/go/src/pkg/net\u2019 \u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528\u4e00\u4e2a\u5e26\u6709\u9632\u706b\u5899\u7684\u673a\u5668\uff0c\u6211\u5efa\u8bae\u4f60\u53ef\u4ee5\u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u6682\u65f6\u5173\u95ed\u9632\u706b\u5899\uff0c\u4ee5\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u9519\u8bef\u3002 \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u53e6\u4e00\u4e2a\u529e\u6cd5\u662f\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf $DISABLE_NET_TESTS \u6765\u544a\u8bc9\u6784\u5efa\u5de5\u5177\u5ffd\u7565 net/http \u5305\u7684\u76f8\u5173\u6d4b\u8bd5\uff1a export DISABLE_NET_TESTS=1 \u5982\u679c\u4f60\u5b8c\u5168\u4e0d\u60f3\u8fd0\u884c\u5305\u7684\u6d4b\u8bd5\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c ./make.bash \u6765\u8fdb\u884c\u5355\u7eaf\u7684\u6784\u5efa\u8fc7\u7a0b\u3002 \u6d4b\u8bd5\u5b89\u88c5 \u4f7f\u7528\u4f60\u6700\u559c\u7231\u7684\u7f16\u8f91\u5668\u6765\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9\uff0c\u5e76\u4fdd\u5b58\u4e3a\u6587\u4ef6\u540d hello_world1.go \u3002 \u793a\u4f8b 2.1 hello_world1.go package main func main () { println ( \"Hello\" , \"world\" ) } \u5207\u6362\u76f8\u5173\u76ee\u5f55\u5230\u4e0b\uff0c\u7136\u540e\u6267\u884c\u6307\u4ee4 go run hello_world1.go \uff0c\u5c06\u4f1a\u6253\u5370\u4fe1\u606f\uff1a Hello, world \u3002 \u9a8c\u8bc1\u5b89\u88c5\u7248\u672c \u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u7ec8\u7aef\u8f93\u5165\u6307\u4ee4 go version \u6765\u6253\u5370 Go \u7684\u7248\u672c\u4fe1\u606f\u3002 \u5982\u679c\u4f60\u60f3\u8981\u901a\u8fc7 Go \u4ee3\u7801\u5728\u8fd0\u884c\u65f6\u68c0\u6d4b\u7248\u672c\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4f8b\u5b50\u5b9e\u73b0\u3002 \u793a\u4f8b 2.2 version.go package main import ( \"fmt\" \"runtime\" ) func main () { fmt . Printf ( \"%s\" , runtime . Version ()) } \u8fd9\u6bb5\u4ee3\u7801\u5c06\u4f1a\u8f93\u51fa go1.4.2 \u6216\u7c7b\u4f3c\u5b57\u7b26\u4e32\u3002 \u66f4\u65b0\u7248\u672c \u4f60\u53ef\u4ee5\u5728 \u53d1\u5e03\u5386\u53f2 \u9875\u9762\u67e5\u770b\u5230\u6700\u65b0\u7684\u7a33\u5b9a\u7248\u3002 \u5f53\u524d\u6700\u65b0\u7684\u7a33\u5b9a\u7248 Go 1 \u7cfb\u5217\u4e8e 2012 \u5e74 3 \u6708 28 \u65e5\u53d1\u5e03\u3002 Go \u7684\u6e90\u4ee3\u7801\u6709\u4ee5\u4e0b\u4e09\u4e2a\u5206\u652f\uff1a - Go release\uff1a\u6700\u65b0\u7a33\u5b9a\u7248\uff0c\u5b9e\u9645\u5f00\u53d1\u6700\u4f73\u9009\u62e9 - Go weekly\uff1a\u5305\u542b\u6700\u8fd1\u66f4\u65b0\u7684\u7248\u672c\uff0c\u4e00\u822c\u6bcf\u5468\u66f4\u65b0\u4e00\u6b21 - Go tip\uff1a\u6c38\u8fdc\u4fdd\u6301\u6700\u65b0\u7684\u7248\u672c\uff0c\u76f8\u5f53\u4e8e\u5185\u6d4b\u7248 \u5f53\u4f60\u5728\u4f7f\u7528\u4e0d\u540c\u7684\u7248\u672c\u65f6\uff0c\u6ce8\u610f\u5b98\u65b9\u535a\u5ba2\u53d1\u5e03\u7684\u4fe1\u606f\uff0c\u56e0\u4e3a\u4f60\u6240\u67e5\u9605\u7684\u6587\u6863\u53ef\u80fd\u548c\u4f60\u6b63\u5728\u4f7f\u7528\u7684\u7248\u672c\u4e0d\u76f8\u7b26\u3002","title":"2.3 \u5728 Linux \u4e0a\u5b89\u88c5 Go"},{"location":"02.3/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Go \u73af\u5883\u53d8\u91cf \u4e0b\u4e00\u8282\uff1a \u5728 Mac OS X \u4e0a\u5b89\u88c5 Go","title":"\u94fe\u63a5"},{"location":"02.4/","text":"2.4 \u5728 Mac OS X \u4e0a\u5b89\u88c5 Go \u00b6 \u5982\u679c\u4f60\u60f3\u8981\u5728\u4f60\u7684 Mac \u7cfb\u7edf\u4e0a\u5b89\u88c5 Go\uff0c\u5219\u5fc5\u987b\u4f7f\u7528 Intel 64 \u4f4d\u5904\u7406\u5668\uff0cGo \u4e0d\u652f\u6301 PowerPC \u5904\u7406\u5668\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u8be5\u9875\u9762\u67e5\u770b\u6709\u5173\u5728 PowerPC \u5904\u7406\u5668\u4e0a\u7684\u79fb\u690d\u8fdb\u5ea6\uff1a https://codedr-go-ppc.googlecode.com/hg/ \u3002 \u6ce8\u610f\u4e8b\u9879 \u5728 Mac \u7cfb\u7edf\u4e0b\u4f7f\u7528\u5230\u7684 C \u5de5\u5177\u94fe\u662f Xcode \u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u4f60\u9700\u8981\u901a\u8fc7\u5b89\u88c5 Xcode \u6765\u5b8c\u6210\u8fd9\u4e9b\u5de5\u5177\u7684\u5b89\u88c5\u3002\u4f60\u5e76\u4e0d\u9700\u8981\u5b89\u88c5\u5b8c\u6574\u7684 Xcode\uff0c\u800c\u53ea\u9700\u8981\u5b89\u88c5\u5b83\u7684\u547d\u4ee4\u884c\u5de5\u5177\u90e8\u5206\u3002 \u4f60\u53ef\u4ee5\u5728 \u4e0b\u8f7d\u9875\u9762 \u9875\u9762\u4e0b\u8f7d\u5230 Mac \u7cfb\u7edf\u4e0b\u7684\u4e00\u952e\u5b89\u88c5\u5305\u6216\u6e90\u4ee3\u7801\u81ea\u884c\u7f16\u8bd1\u3002 \u901a\u8fc7\u6e90\u4ee3\u7801\u7f16\u8bd1\u5b89\u88c5\u7684\u8fc7\u7a0b\u4e0e\u73af\u5883\u53d8\u91cf\u7684\u914d\u7f6e\u4e0e\u5728 Linux \u7cfb\u7edf\u975e\u5e38\u76f8\u4f3c\uff0c\u56e0\u6b64\u4e0d\u518d\u8d58\u8ff0\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5728 Linux \u4e0a\u5b89\u88c5 Go \u4e0b\u4e00\u8282\uff1a \u5728 Windows \u4e0a\u5b89\u88c5 Go","title":"2.4 \u5728 Mac OS X \u4e0a\u5b89\u88c5 Go"},{"location":"02.4/#24-mac-os-x-go","text":"\u5982\u679c\u4f60\u60f3\u8981\u5728\u4f60\u7684 Mac \u7cfb\u7edf\u4e0a\u5b89\u88c5 Go\uff0c\u5219\u5fc5\u987b\u4f7f\u7528 Intel 64 \u4f4d\u5904\u7406\u5668\uff0cGo \u4e0d\u652f\u6301 PowerPC \u5904\u7406\u5668\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u8be5\u9875\u9762\u67e5\u770b\u6709\u5173\u5728 PowerPC \u5904\u7406\u5668\u4e0a\u7684\u79fb\u690d\u8fdb\u5ea6\uff1a https://codedr-go-ppc.googlecode.com/hg/ \u3002 \u6ce8\u610f\u4e8b\u9879 \u5728 Mac \u7cfb\u7edf\u4e0b\u4f7f\u7528\u5230\u7684 C \u5de5\u5177\u94fe\u662f Xcode \u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u4f60\u9700\u8981\u901a\u8fc7\u5b89\u88c5 Xcode \u6765\u5b8c\u6210\u8fd9\u4e9b\u5de5\u5177\u7684\u5b89\u88c5\u3002\u4f60\u5e76\u4e0d\u9700\u8981\u5b89\u88c5\u5b8c\u6574\u7684 Xcode\uff0c\u800c\u53ea\u9700\u8981\u5b89\u88c5\u5b83\u7684\u547d\u4ee4\u884c\u5de5\u5177\u90e8\u5206\u3002 \u4f60\u53ef\u4ee5\u5728 \u4e0b\u8f7d\u9875\u9762 \u9875\u9762\u4e0b\u8f7d\u5230 Mac \u7cfb\u7edf\u4e0b\u7684\u4e00\u952e\u5b89\u88c5\u5305\u6216\u6e90\u4ee3\u7801\u81ea\u884c\u7f16\u8bd1\u3002 \u901a\u8fc7\u6e90\u4ee3\u7801\u7f16\u8bd1\u5b89\u88c5\u7684\u8fc7\u7a0b\u4e0e\u73af\u5883\u53d8\u91cf\u7684\u914d\u7f6e\u4e0e\u5728 Linux \u7cfb\u7edf\u975e\u5e38\u76f8\u4f3c\uff0c\u56e0\u6b64\u4e0d\u518d\u8d58\u8ff0\u3002","title":"2.4 \u5728 Mac OS X \u4e0a\u5b89\u88c5 Go"},{"location":"02.4/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5728 Linux \u4e0a\u5b89\u88c5 Go \u4e0b\u4e00\u8282\uff1a \u5728 Windows \u4e0a\u5b89\u88c5 Go","title":"\u94fe\u63a5"},{"location":"02.5/","text":"2.5 \u5728 Windows \u4e0a\u5b89\u88c5 Go \u00b6 \u4f60\u53ef\u4ee5\u5728 \u4e0b\u8f7d\u9875\u9762 \u9875\u9762\u4e0b\u8f7d\u5230 Windows \u7cfb\u7edf\u4e0b\u7684\u4e00\u952e\u5b89\u88c5\u5305\u3002 \u524d\u671f\u7684 Windows \u79fb\u690d\u5de5\u4f5c\u7531 Hector Chu \u5b8c\u6210\uff0c\u4f46\u76ee\u524d\u7684\u53d1\u884c\u7248\u5df2\u7ecf\u7531 Joe Poirier \u5168\u804c\u7ef4\u62a4\u3002 \u5728\u5b8c\u6210\u5b89\u88c5\u5305\u7684\u5b89\u88c5\u4e4b\u540e\uff0c\u4f60\u53ea\u9700\u8981\u914d\u7f6e $GOPATH \u8fd9\u4e00\u4e2a\u73af\u5883\u53d8\u91cf\u5c31\u53ef\u4ee5\u5f00\u59cb\u4f7f\u7528 Go \u8bed\u8a00\u8fdb\u884c\u5f00\u53d1\u4e86\uff0c\u5176\u5b83\u7684\u73af\u5883\u53d8\u91cf\u5b89\u88c5\u5305\u5747\u4f1a\u8fdb\u884c\u81ea\u52a8\u8bbe\u7f6e\u3002\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cGo \u5c06\u4f1a\u88ab\u5b89\u88c5\u5728\u76ee\u5f55 c:\\go \u4e0b\uff0c\u4f46\u5982\u679c\u4f60\u5728\u5b89\u88c5\u8fc7\u7a0b\u4e2d\u4fee\u6539\u5b89\u88c5\u76ee\u5f55\uff0c\u5219\u53ef\u80fd\u9700\u8981\u624b\u52a8\u4fee\u6539\u6240\u6709\u7684\u73af\u5883\u53d8\u91cf\u7684\u503c\u3002 \u5982\u679c\u4f60\u60f3\u8981\u6d4b\u8bd5\u5b89\u88c5\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u6307\u4ee4 go run \u8fd0\u884c hello_world1.go \u3002 \u5982\u679c\u53d1\u751f\u9519\u8bef fatal error: can\u2019t find import: fmt \u5219\u8bf4\u660e\u4f60\u7684\u73af\u5883\u53d8\u91cf\u6ca1\u6709\u914d\u7f6e\u6b63\u786e\u3002 \u5982\u679c\u4f60\u60f3\u8981\u5728 Windows \u4e0b\u4f7f\u7528 cgo \uff08\u8c03\u7528 C \u8bed\u8a00\u5199\u7684\u4ee3\u7801\uff09\uff0c\u5219\u9700\u8981\u5b89\u88c5 MinGW \uff0c\u4e00\u822c\u63a8\u8350\u5b89\u88c5 TDM-GCC \u3002\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f 64 \u4f4d\u64cd\u4f5c\u7cfb\u7edf\uff0c\u8bf7\u52a1\u5fc5\u5b89\u88c5 64 \u4f4d\u7248\u672c\u7684 MinGW\u3002\u5b89\u88c5\u5b8c\u6210\u8fdb\u884c\u73af\u5883\u53d8\u91cf\u7b49\u76f8\u5173\u914d\u7f6e\u5373\u53ef\u4f7f\u7528\u3002 \u5728 Windows \u4e0b\u8fd0\u884c\u5728\u865a\u62df\u673a\u91cc\u7684 Linux \u7cfb\u7edf\u4e0a\u5b89\u88c5 Go \uff1a \u5982\u679c\u4f60\u60f3\u8981\u5728 Windows \u4e0b\u7684\u865a\u62df\u673a\u91cc\u7684 Linux \u7cfb\u7edf\u4e0a\u5b89\u88c5 Go\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u865a\u62df\u673a\u8f6f\u4ef6 VMware \uff0c\u4e0b\u8f7d VMware player \uff0c\u641c\u7d22\u5e76\u4e0b\u8f7d\u4e00\u4e2a\u4f60\u559c\u6b22\u7684 Linux \u53d1\u884c\u7248\u955c\u50cf\uff0c\u7136\u540e\u5b89\u88c5\u5230\u865a\u62df\u673a\u91cc\uff0c\u5b89\u88c5 Go \u7684\u6d41\u7a0b\u53c2\u8003\u7b2c 2.3 \u8282\u4e2d\u7684\u5185\u5bb9\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5728 Mac OS X \u4e0a\u5b89\u88c5 Go \u4e0b\u4e00\u8282\uff1a \u5b89\u88c5\u76ee\u5f55\u6e05\u5355","title":"2.5 \u5728 Windows \u4e0a\u5b89\u88c5 Go"},{"location":"02.5/#25-windows-go","text":"\u4f60\u53ef\u4ee5\u5728 \u4e0b\u8f7d\u9875\u9762 \u9875\u9762\u4e0b\u8f7d\u5230 Windows \u7cfb\u7edf\u4e0b\u7684\u4e00\u952e\u5b89\u88c5\u5305\u3002 \u524d\u671f\u7684 Windows \u79fb\u690d\u5de5\u4f5c\u7531 Hector Chu \u5b8c\u6210\uff0c\u4f46\u76ee\u524d\u7684\u53d1\u884c\u7248\u5df2\u7ecf\u7531 Joe Poirier \u5168\u804c\u7ef4\u62a4\u3002 \u5728\u5b8c\u6210\u5b89\u88c5\u5305\u7684\u5b89\u88c5\u4e4b\u540e\uff0c\u4f60\u53ea\u9700\u8981\u914d\u7f6e $GOPATH \u8fd9\u4e00\u4e2a\u73af\u5883\u53d8\u91cf\u5c31\u53ef\u4ee5\u5f00\u59cb\u4f7f\u7528 Go \u8bed\u8a00\u8fdb\u884c\u5f00\u53d1\u4e86\uff0c\u5176\u5b83\u7684\u73af\u5883\u53d8\u91cf\u5b89\u88c5\u5305\u5747\u4f1a\u8fdb\u884c\u81ea\u52a8\u8bbe\u7f6e\u3002\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cGo \u5c06\u4f1a\u88ab\u5b89\u88c5\u5728\u76ee\u5f55 c:\\go \u4e0b\uff0c\u4f46\u5982\u679c\u4f60\u5728\u5b89\u88c5\u8fc7\u7a0b\u4e2d\u4fee\u6539\u5b89\u88c5\u76ee\u5f55\uff0c\u5219\u53ef\u80fd\u9700\u8981\u624b\u52a8\u4fee\u6539\u6240\u6709\u7684\u73af\u5883\u53d8\u91cf\u7684\u503c\u3002 \u5982\u679c\u4f60\u60f3\u8981\u6d4b\u8bd5\u5b89\u88c5\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u6307\u4ee4 go run \u8fd0\u884c hello_world1.go \u3002 \u5982\u679c\u53d1\u751f\u9519\u8bef fatal error: can\u2019t find import: fmt \u5219\u8bf4\u660e\u4f60\u7684\u73af\u5883\u53d8\u91cf\u6ca1\u6709\u914d\u7f6e\u6b63\u786e\u3002 \u5982\u679c\u4f60\u60f3\u8981\u5728 Windows \u4e0b\u4f7f\u7528 cgo \uff08\u8c03\u7528 C \u8bed\u8a00\u5199\u7684\u4ee3\u7801\uff09\uff0c\u5219\u9700\u8981\u5b89\u88c5 MinGW \uff0c\u4e00\u822c\u63a8\u8350\u5b89\u88c5 TDM-GCC \u3002\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f 64 \u4f4d\u64cd\u4f5c\u7cfb\u7edf\uff0c\u8bf7\u52a1\u5fc5\u5b89\u88c5 64 \u4f4d\u7248\u672c\u7684 MinGW\u3002\u5b89\u88c5\u5b8c\u6210\u8fdb\u884c\u73af\u5883\u53d8\u91cf\u7b49\u76f8\u5173\u914d\u7f6e\u5373\u53ef\u4f7f\u7528\u3002 \u5728 Windows \u4e0b\u8fd0\u884c\u5728\u865a\u62df\u673a\u91cc\u7684 Linux \u7cfb\u7edf\u4e0a\u5b89\u88c5 Go \uff1a \u5982\u679c\u4f60\u60f3\u8981\u5728 Windows \u4e0b\u7684\u865a\u62df\u673a\u91cc\u7684 Linux \u7cfb\u7edf\u4e0a\u5b89\u88c5 Go\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u865a\u62df\u673a\u8f6f\u4ef6 VMware \uff0c\u4e0b\u8f7d VMware player \uff0c\u641c\u7d22\u5e76\u4e0b\u8f7d\u4e00\u4e2a\u4f60\u559c\u6b22\u7684 Linux \u53d1\u884c\u7248\u955c\u50cf\uff0c\u7136\u540e\u5b89\u88c5\u5230\u865a\u62df\u673a\u91cc\uff0c\u5b89\u88c5 Go \u7684\u6d41\u7a0b\u53c2\u8003\u7b2c 2.3 \u8282\u4e2d\u7684\u5185\u5bb9\u3002","title":"2.5 \u5728 Windows \u4e0a\u5b89\u88c5 Go"},{"location":"02.5/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5728 Mac OS X \u4e0a\u5b89\u88c5 Go \u4e0b\u4e00\u8282\uff1a \u5b89\u88c5\u76ee\u5f55\u6e05\u5355","title":"\u94fe\u63a5"},{"location":"02.6/","text":"2.6 \u5b89\u88c5\u76ee\u5f55\u6e05\u5355 \u00b6 \u4f60\u7684 Go \u5b89\u88c5\u76ee\u5f55 ( $GOROOT ) \u7684\u6587\u4ef6\u5939\u7ed3\u6784\u5e94\u8be5\u5982\u4e0b\u6240\u793a\uff1a README.md, AUTHORS, CONTRIBUTORS, LICENSE /bin \uff1a\u5305\u542b\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5982\uff1a\u7f16\u8bd1\u5668\uff0cGo \u5de5\u5177 /doc \uff1a\u5305\u542b\u6587\u6863\u6a21\u7248 /lib \uff1a\u5305\u542b\u793a\u4f8b\u7a0b\u5e8f\uff0c\u4ee3\u7801\u5de5\u5177\uff0c\u672c\u5730\u6587\u6863\u7b49 /misc \uff1a\u5305\u542b\u4e0e\u652f\u6301 Go \u7f16\u8f91\u5668\u6709\u5173\u7684\u914d\u7f6e\u6587\u4ef6\u4ee5\u53ca cgo \u7684\u793a\u4f8b /os_arch \uff1a\u5305\u542b\u6807\u51c6\u5e93\u7684\u5305\u7684\u5bf9\u8c61\u6587\u4ef6 ( .a ) /src \uff1a\u5305\u542b\u6e90\u4ee3\u7801\u6784\u5efa\u811a\u672c\u548c\u6807\u51c6\u5e93\u7684\u5305\u7684\u5b8c\u6574\u6e90\u4ee3\u7801\uff08Go \u662f\u4e00\u95e8\u5f00\u6e90\u8bed\u8a00\uff09 /src/cmd \uff1a\u5305\u542b Go \u548c C \u7684\u7f16\u8bd1\u5668\u548c\u547d\u4ee4\u884c\u811a\u672c \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5728 Windows \u4e0a\u5b89\u88c5 Go \u4e0b\u4e00\u8282\uff1a Go \u8fd0\u884c\u65f6 (runtime)","title":"2.6 \u5b89\u88c5\u76ee\u5f55\u6e05\u5355"},{"location":"02.6/#26","text":"\u4f60\u7684 Go \u5b89\u88c5\u76ee\u5f55 ( $GOROOT ) \u7684\u6587\u4ef6\u5939\u7ed3\u6784\u5e94\u8be5\u5982\u4e0b\u6240\u793a\uff1a README.md, AUTHORS, CONTRIBUTORS, LICENSE /bin \uff1a\u5305\u542b\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5982\uff1a\u7f16\u8bd1\u5668\uff0cGo \u5de5\u5177 /doc \uff1a\u5305\u542b\u6587\u6863\u6a21\u7248 /lib \uff1a\u5305\u542b\u793a\u4f8b\u7a0b\u5e8f\uff0c\u4ee3\u7801\u5de5\u5177\uff0c\u672c\u5730\u6587\u6863\u7b49 /misc \uff1a\u5305\u542b\u4e0e\u652f\u6301 Go \u7f16\u8f91\u5668\u6709\u5173\u7684\u914d\u7f6e\u6587\u4ef6\u4ee5\u53ca cgo \u7684\u793a\u4f8b /os_arch \uff1a\u5305\u542b\u6807\u51c6\u5e93\u7684\u5305\u7684\u5bf9\u8c61\u6587\u4ef6 ( .a ) /src \uff1a\u5305\u542b\u6e90\u4ee3\u7801\u6784\u5efa\u811a\u672c\u548c\u6807\u51c6\u5e93\u7684\u5305\u7684\u5b8c\u6574\u6e90\u4ee3\u7801\uff08Go \u662f\u4e00\u95e8\u5f00\u6e90\u8bed\u8a00\uff09 /src/cmd \uff1a\u5305\u542b Go \u548c C \u7684\u7f16\u8bd1\u5668\u548c\u547d\u4ee4\u884c\u811a\u672c","title":"2.6 \u5b89\u88c5\u76ee\u5f55\u6e05\u5355"},{"location":"02.6/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5728 Windows \u4e0a\u5b89\u88c5 Go \u4e0b\u4e00\u8282\uff1a Go \u8fd0\u884c\u65f6 (runtime)","title":"\u94fe\u63a5"},{"location":"02.7/","text":"2.7 Go \u8fd0\u884c\u65f6 (runtime) \u00b6 \u5c3d\u7ba1 Go \u7f16\u8bd1\u5668\u4ea7\u751f\u7684\u662f\u672c\u5730\u53ef\u6267\u884c\u4ee3\u7801\uff0c\u8fd9\u4e9b\u4ee3\u7801\u4ecd\u65e7\u8fd0\u884c\u5728 Go \u7684 runtime\uff08\u8fd9\u90e8\u5206\u7684\u4ee3\u7801\u53ef\u4ee5\u5728 runtime \u5305\u4e2d\u627e\u5230\uff09\u5f53\u4e2d\u3002\u8fd9\u4e2a runtime \u7c7b\u4f3c Java \u548c .NET \u8bed\u8a00\u6240\u7528\u5230\u7684\u865a\u62df\u673a\uff0c\u5b83\u8d1f\u8d23\u7ba1\u7406\u5305\u62ec\u5185\u5b58\u5206\u914d\u3001\u5783\u573e\u56de\u6536\uff08 \u7b2c 10.8 \u8282 \uff09\u3001\u6808\u5904\u7406\u3001goroutine\u3001channel\u3001\u5207\u7247 (slice)\u3001map \u548c\u53cd\u5c04 (reflection) \u7b49\u7b49\u3002 runtime \u4e3b\u8981\u7531 C \u8bed\u8a00\u7f16\u5199\uff08Go 1.5 \u5f00\u59cb\u81ea\u4e3e\uff09\uff0c\u5e76\u4e14\u662f\u6bcf\u4e2a Go \u5305\u7684\u6700\u9876\u7ea7\u5305\u3002\u4f60\u53ef\u4ee5\u5728\u76ee\u5f55 $GOROOT/src/runtime \u4e2d\u627e\u5230\u76f8\u5173\u5185\u5bb9\u3002 \u5783\u573e\u56de\u6536\u5668 Go \u62e5\u6709\u7b80\u5355\u5374\u9ad8\u6548\u7684\u6807\u8bb0-\u6e05\u9664\u56de\u6536\u5668\u3002\u5b83\u7684\u4e3b\u8981\u601d\u60f3\u6765\u6e90\u4e8e IBM \u7684\u53ef\u590d\u7528\u5783\u573e\u56de\u6536\u5668\uff0c\u65e8\u5728\u6253\u9020\u4e00\u4e2a\u9ad8\u6548\u3001\u4f4e\u5ef6\u8fdf\u7684\u5e76\u53d1\u56de\u6536\u5668\u3002\u76ee\u524d gccgo \u8fd8\u6ca1\u6709\u56de\u6536\u5668\uff0c\u540c\u65f6\u9002\u7528 gc \u548c gccgo \u7684\u65b0\u56de\u6536\u5668\u6b63\u5728\u7814\u53d1\u4e2d\u3002\u4f7f\u7528\u4e00\u95e8\u5177\u6709\u5783\u573e\u56de\u6536\u529f\u80fd\u7684\u7f16\u7a0b\u8bed\u8a00\u4e0d\u4ee3\u8868\u4f60\u53ef\u4ee5\u907f\u514d\u5185\u5b58\u5206\u914d\u6240\u5e26\u6765\u7684\u95ee\u9898\uff0c\u5206\u914d\u548c\u56de\u6536\u5185\u5bb9\u90fd\u662f\u6d88\u8017 CPU \u8d44\u6e90\u7684\u4e00\u79cd\u884c\u4e3a\u3002 Go \u7684\u53ef\u6267\u884c\u6587\u4ef6\u90fd\u6bd4\u76f8\u5bf9\u5e94\u7684\u6e90\u4ee3\u7801\u6587\u4ef6\u8981\u5927\u5f88\u591a\uff0c\u8fd9\u6070\u6070\u8bf4\u660e\u4e86 Go \u7684 runtime \u5d4c\u5165\u5230\u4e86\u6bcf\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u5f53\u4e2d\u3002\u5f53\u7136\uff0c\u5728\u90e8\u7f72\u5230\u6570\u91cf\u5de8\u5927\u7684\u96c6\u7fa4\u65f6\uff0c\u8f83\u5927\u7684\u6587\u4ef6\u4f53\u79ef\u4e5f\u662f\u6bd4\u8f83\u5934\u75bc\u7684\u95ee\u9898\u3002\u4f46\u603b\u7684\u6765\u8bf4\uff0cGo \u7684\u90e8\u7f72\u5de5\u4f5c\u8fd8\u662f\u8981\u6bd4 Java \u548c Python \u8f7b\u677e\u5f97\u591a\u3002\u56e0\u4e3a Go \u4e0d\u9700\u8981\u4f9d\u8d56\u4efb\u4f55\u5176\u5b83\u6587\u4ef6\uff0c\u5b83\u53ea\u9700\u8981\u4e00\u4e2a\u5355\u72ec\u7684\u9759\u6001\u6587\u4ef6\uff0c\u8fd9\u6837\u4f60\u4e5f\u4e0d\u4f1a\u50cf\u4f7f\u7528\u5176\u5b83\u8bed\u8a00\u4e00\u6837\u5728\u5404\u79cd\u4e0d\u540c\u7248\u672c\u7684\u4f9d\u8d56\u6587\u4ef6\u4e4b\u95f4\u6df7\u6dc6\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5b89\u88c5\u76ee\u5f55\u6e05\u5355 \u4e0b\u4e00\u8282\uff1a Go \u89e3\u91ca\u5668","title":"2.7 Go \u8fd0\u884c\u65f6(runtime"},{"location":"02.7/#27-go-runtime","text":"\u5c3d\u7ba1 Go \u7f16\u8bd1\u5668\u4ea7\u751f\u7684\u662f\u672c\u5730\u53ef\u6267\u884c\u4ee3\u7801\uff0c\u8fd9\u4e9b\u4ee3\u7801\u4ecd\u65e7\u8fd0\u884c\u5728 Go \u7684 runtime\uff08\u8fd9\u90e8\u5206\u7684\u4ee3\u7801\u53ef\u4ee5\u5728 runtime \u5305\u4e2d\u627e\u5230\uff09\u5f53\u4e2d\u3002\u8fd9\u4e2a runtime \u7c7b\u4f3c Java \u548c .NET \u8bed\u8a00\u6240\u7528\u5230\u7684\u865a\u62df\u673a\uff0c\u5b83\u8d1f\u8d23\u7ba1\u7406\u5305\u62ec\u5185\u5b58\u5206\u914d\u3001\u5783\u573e\u56de\u6536\uff08 \u7b2c 10.8 \u8282 \uff09\u3001\u6808\u5904\u7406\u3001goroutine\u3001channel\u3001\u5207\u7247 (slice)\u3001map \u548c\u53cd\u5c04 (reflection) \u7b49\u7b49\u3002 runtime \u4e3b\u8981\u7531 C \u8bed\u8a00\u7f16\u5199\uff08Go 1.5 \u5f00\u59cb\u81ea\u4e3e\uff09\uff0c\u5e76\u4e14\u662f\u6bcf\u4e2a Go \u5305\u7684\u6700\u9876\u7ea7\u5305\u3002\u4f60\u53ef\u4ee5\u5728\u76ee\u5f55 $GOROOT/src/runtime \u4e2d\u627e\u5230\u76f8\u5173\u5185\u5bb9\u3002 \u5783\u573e\u56de\u6536\u5668 Go \u62e5\u6709\u7b80\u5355\u5374\u9ad8\u6548\u7684\u6807\u8bb0-\u6e05\u9664\u56de\u6536\u5668\u3002\u5b83\u7684\u4e3b\u8981\u601d\u60f3\u6765\u6e90\u4e8e IBM \u7684\u53ef\u590d\u7528\u5783\u573e\u56de\u6536\u5668\uff0c\u65e8\u5728\u6253\u9020\u4e00\u4e2a\u9ad8\u6548\u3001\u4f4e\u5ef6\u8fdf\u7684\u5e76\u53d1\u56de\u6536\u5668\u3002\u76ee\u524d gccgo \u8fd8\u6ca1\u6709\u56de\u6536\u5668\uff0c\u540c\u65f6\u9002\u7528 gc \u548c gccgo \u7684\u65b0\u56de\u6536\u5668\u6b63\u5728\u7814\u53d1\u4e2d\u3002\u4f7f\u7528\u4e00\u95e8\u5177\u6709\u5783\u573e\u56de\u6536\u529f\u80fd\u7684\u7f16\u7a0b\u8bed\u8a00\u4e0d\u4ee3\u8868\u4f60\u53ef\u4ee5\u907f\u514d\u5185\u5b58\u5206\u914d\u6240\u5e26\u6765\u7684\u95ee\u9898\uff0c\u5206\u914d\u548c\u56de\u6536\u5185\u5bb9\u90fd\u662f\u6d88\u8017 CPU \u8d44\u6e90\u7684\u4e00\u79cd\u884c\u4e3a\u3002 Go \u7684\u53ef\u6267\u884c\u6587\u4ef6\u90fd\u6bd4\u76f8\u5bf9\u5e94\u7684\u6e90\u4ee3\u7801\u6587\u4ef6\u8981\u5927\u5f88\u591a\uff0c\u8fd9\u6070\u6070\u8bf4\u660e\u4e86 Go \u7684 runtime \u5d4c\u5165\u5230\u4e86\u6bcf\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u5f53\u4e2d\u3002\u5f53\u7136\uff0c\u5728\u90e8\u7f72\u5230\u6570\u91cf\u5de8\u5927\u7684\u96c6\u7fa4\u65f6\uff0c\u8f83\u5927\u7684\u6587\u4ef6\u4f53\u79ef\u4e5f\u662f\u6bd4\u8f83\u5934\u75bc\u7684\u95ee\u9898\u3002\u4f46\u603b\u7684\u6765\u8bf4\uff0cGo \u7684\u90e8\u7f72\u5de5\u4f5c\u8fd8\u662f\u8981\u6bd4 Java \u548c Python \u8f7b\u677e\u5f97\u591a\u3002\u56e0\u4e3a Go \u4e0d\u9700\u8981\u4f9d\u8d56\u4efb\u4f55\u5176\u5b83\u6587\u4ef6\uff0c\u5b83\u53ea\u9700\u8981\u4e00\u4e2a\u5355\u72ec\u7684\u9759\u6001\u6587\u4ef6\uff0c\u8fd9\u6837\u4f60\u4e5f\u4e0d\u4f1a\u50cf\u4f7f\u7528\u5176\u5b83\u8bed\u8a00\u4e00\u6837\u5728\u5404\u79cd\u4e0d\u540c\u7248\u672c\u7684\u4f9d\u8d56\u6587\u4ef6\u4e4b\u95f4\u6df7\u6dc6\u3002","title":"2.7 Go \u8fd0\u884c\u65f6 (runtime)"},{"location":"02.7/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5b89\u88c5\u76ee\u5f55\u6e05\u5355 \u4e0b\u4e00\u8282\uff1a Go \u89e3\u91ca\u5668","title":"\u94fe\u63a5"},{"location":"02.8/","text":"2.8 Go \u89e3\u91ca\u5668 \u00b6 \u56e0\u4e3a Go \u5177\u6709\u50cf\u52a8\u6001\u8bed\u8a00\u90a3\u6837\u5feb\u901f\u7f16\u8bd1\u7684\u80fd\u529b\uff0c\u81ea\u7136\u800c\u7136\u5730\u5c31\u6709\u4eba\u4f1a\u95ee Go \u8bed\u8a00\u80fd\u5426\u5728 REPL (read-eval-print loop) \u7f16\u7a0b\u73af\u5883\u4e0b\u5b9e\u73b0\u3002Sebastien Binet \u5df2\u7ecf\u4f7f\u7528\u8fd9\u79cd\u73af\u5883\u5b9e\u73b0\u4e86\u4e00\u4e2a Go \u89e3\u91ca\u5668\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u4e2a\u9875\u9762\u627e\u5230\uff1a https://github.com/sbinet/igo \u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Go \u8fd0\u884c\u65f6 (runtime) \u4e0b\u4e00\u7ae0\uff1a \u7f16\u8f91\u5668\u3001\u96c6\u6210\u5f00\u53d1\u73af\u5883\u4e0e\u5176\u5b83\u5de5\u5177","title":"2.8 Go \u89e3\u91ca\u5668"},{"location":"02.8/#28-go","text":"\u56e0\u4e3a Go \u5177\u6709\u50cf\u52a8\u6001\u8bed\u8a00\u90a3\u6837\u5feb\u901f\u7f16\u8bd1\u7684\u80fd\u529b\uff0c\u81ea\u7136\u800c\u7136\u5730\u5c31\u6709\u4eba\u4f1a\u95ee Go \u8bed\u8a00\u80fd\u5426\u5728 REPL (read-eval-print loop) \u7f16\u7a0b\u73af\u5883\u4e0b\u5b9e\u73b0\u3002Sebastien Binet \u5df2\u7ecf\u4f7f\u7528\u8fd9\u79cd\u73af\u5883\u5b9e\u73b0\u4e86\u4e00\u4e2a Go \u89e3\u91ca\u5668\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u4e2a\u9875\u9762\u627e\u5230\uff1a https://github.com/sbinet/igo \u3002","title":"2.8 Go \u89e3\u91ca\u5668"},{"location":"02.8/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Go \u8fd0\u884c\u65f6 (runtime) \u4e0b\u4e00\u7ae0\uff1a \u7f16\u8f91\u5668\u3001\u96c6\u6210\u5f00\u53d1\u73af\u5883\u4e0e\u5176\u5b83\u5de5\u5177","title":"\u94fe\u63a5"},{"location":"03.0/","text":"3.0 \u7f16\u8f91\u5668\u3001\u96c6\u6210\u5f00\u53d1\u73af\u5883\u4e0e\u5176\u5b83\u5de5\u5177 \u00b6 \u56e0\u4e3a Go \u8bed\u8a00\u8fd8\u662f\u4e00\u95e8\u76f8\u5bf9\u5e74\u8f7b\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u6240\u4ee5\u4e0d\u7ba1\u662f\u5728\u96c6\u6210\u5f00\u53d1\u73af\u5883 (IDE) \u8fd8\u662f\u76f8\u5173\u7684\u63d2\u4ef6\u65b9\u9762\uff0c\u53d1\u5c55\u90fd\u4e0d\u662f\u5f88\u6210\u719f\u3002\u4e0d\u8fc7\u76ee\u524d\u8fd8\u662f\u6709\u4e00\u4e9b IDE \u80fd\u591f\u8f83\u597d\u5730\u652f\u6301 Go \u7684\u5f00\u53d1\uff0c\u6709\u4e9b\u5f00\u53d1\u5de5\u5177\u751a\u81f3\u662f\u8de8\u5e73\u53f0\u7684\uff0c\u4f60\u53ef\u4ee5\u5728 Linux\u3001Mac OS X \u6216\u8005 Windows \u4e0b\u5de5\u4f5c\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u67e5\u9605 \u7f16\u8f91\u5668\u548c IDE \u6269\u5c55 \u9875\u9762\u6765\u83b7\u53d6 Go \u5f00\u53d1\u5de5\u5177\u7684\u6700\u65b0\u4fe1\u606f\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u7ae0\uff1a Go \u89e3\u91ca\u5668 \u4e0b\u4e00\u8282\uff1a Go \u5f00\u53d1\u73af\u5883\u7684\u57fa\u672c\u8981\u6c42","title":"3.0 \u7f16\u8f91\u5668\u3001\u96c6\u6210\u5f00\u53d1\u73af\u5883\u4e0e\u5176\u5b83\u5de5\u5177"},{"location":"03.0/#30","text":"\u56e0\u4e3a Go \u8bed\u8a00\u8fd8\u662f\u4e00\u95e8\u76f8\u5bf9\u5e74\u8f7b\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u6240\u4ee5\u4e0d\u7ba1\u662f\u5728\u96c6\u6210\u5f00\u53d1\u73af\u5883 (IDE) \u8fd8\u662f\u76f8\u5173\u7684\u63d2\u4ef6\u65b9\u9762\uff0c\u53d1\u5c55\u90fd\u4e0d\u662f\u5f88\u6210\u719f\u3002\u4e0d\u8fc7\u76ee\u524d\u8fd8\u662f\u6709\u4e00\u4e9b IDE \u80fd\u591f\u8f83\u597d\u5730\u652f\u6301 Go \u7684\u5f00\u53d1\uff0c\u6709\u4e9b\u5f00\u53d1\u5de5\u5177\u751a\u81f3\u662f\u8de8\u5e73\u53f0\u7684\uff0c\u4f60\u53ef\u4ee5\u5728 Linux\u3001Mac OS X \u6216\u8005 Windows \u4e0b\u5de5\u4f5c\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u67e5\u9605 \u7f16\u8f91\u5668\u548c IDE \u6269\u5c55 \u9875\u9762\u6765\u83b7\u53d6 Go \u5f00\u53d1\u5de5\u5177\u7684\u6700\u65b0\u4fe1\u606f\u3002","title":"3.0 \u7f16\u8f91\u5668\u3001\u96c6\u6210\u5f00\u53d1\u73af\u5883\u4e0e\u5176\u5b83\u5de5\u5177"},{"location":"03.0/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u7ae0\uff1a Go \u89e3\u91ca\u5668 \u4e0b\u4e00\u8282\uff1a Go \u5f00\u53d1\u73af\u5883\u7684\u57fa\u672c\u8981\u6c42","title":"\u94fe\u63a5"},{"location":"03.1/","text":"3.1 Go \u5f00\u53d1\u73af\u5883\u7684\u57fa\u672c\u8981\u6c42 \u00b6 \u8fd9\u91cc\u6709\u4e00\u4e2a\u53ef\u4ee5\u7528\u6765\u5f00\u53d1 Go \u7684\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff0c\u4f60\u671f\u5f85\u6709\u4ee5\u4e0b\u54ea\u4e9b\u7279\u6027\uff0c\u4ece\u800c\u66ff\u4ee3\u4f60\u4f7f\u7528\u6587\u672c\u7f16\u8f91\u5668\u5199\u4ee3\u7801\u548c\u547d\u4ee4\u884c\u7f16\u8bd1\u4e0e\u94fe\u63a5\u7a0b\u5e8f\u7684\u65b9\u5f0f\uff1f \u8bed\u6cd5\u9ad8\u4eae\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u529f\u80fd\uff0c\u8fd9\u4e5f\u662f\u6bcf\u4e2a\u5f00\u53d1\u5de5\u5177\u90fd\u63d0\u4f9b\u914d\u7f6e\u6587\u4ef6\u6765\u5b9e\u73b0\u81ea\u5b9a\u4e49\u914d\u7f6e\u7684\u539f\u56e0\u3002 \u53ef\u4ee5\u81ea\u52a8\u4fdd\u5b58\u4ee3\u7801\uff0c\u81f3\u5c11\u5728\u6bcf\u6b21\u7f16\u8bd1\u524d\u90fd\u4f1a\u4fdd\u5b58\u3002 \u53ef\u4ee5\u663e\u793a\u4ee3\u7801\u6240\u5728\u7684\u884c\u6570\u3002 \u62e5\u6709\u8f83\u597d\u7684\u9879\u76ee\u6587\u4ef6\u7eb5\u89c8\u548c\u5bfc\u822a\u80fd\u529b\uff0c\u53ef\u4ee5\u540c\u65f6\u7f16\u8f91\u591a\u4e2a\u6e90\u6587\u4ef6\u5e76\u8bbe\u7f6e\u4e66\u7b7e\uff0c\u80fd\u591f\u5339\u914d\u62ec\u53f7\uff0c\u80fd\u591f\u8df3\u8f6c\u5230\u67d0\u4e2a\u51fd\u6570\u6216\u7c7b\u578b\u7684\u5b9a\u4e49\u90e8\u5206\u3002 \u5b8c\u7f8e\u7684\u67e5\u627e\u548c\u66ff\u6362\u529f\u80fd\uff0c\u66ff\u6362\u4e4b\u524d\u6700\u597d\u8fd8\u80fd\u9884\u89c8\u7ed3\u679c\u3002 \u53ef\u4ee5\u6ce8\u91ca\u6216\u53d6\u6d88\u6ce8\u91ca\u9009\u4e2d\u7684\u4e00\u884c\u6216\u591a\u884c\u4ee3\u7801\u3002 \u5f53\u6709\u7f16\u8bd1\u9519\u8bef\u65f6\uff0c\u53cc\u51fb\u9519\u8bef\u63d0\u793a\u53ef\u4ee5\u8df3\u8f6c\u5230\u53d1\u751f\u9519\u8bef\u7684\u4f4d\u7f6e\u3002 \u8de8\u5e73\u53f0\uff0c\u80fd\u591f\u5728 Linux\u3001Mac OS X \u548c Windows \u4e0b\u5de5\u4f5c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u4e00\u4e2a\u5f00\u53d1\u73af\u5883\u3002 \u6700\u597d\u662f\u514d\u8d39\u7684\uff0c\u4e0d\u8fc7\u6709\u4e9b\u5f00\u53d1\u8005\u8fd8\u662f\u5e0c\u671b\u80fd\u591f\u901a\u8fc7\u652f\u4ed8\u4e00\u5b9a\u91d1\u989d\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u5f00\u53d1\u73af\u5883\u3002 \u6700\u597d\u662f\u5f00\u6e90\u7684\u3002 \u80fd\u591f\u901a\u8fc7\u63d2\u4ef6\u67b6\u6784\u6765\u8f7b\u6613\u6269\u5c55\u548c\u66ff\u6362\u67d0\u4e2a\u529f\u80fd\u3002 \u5c3d\u7ba1\u96c6\u6210\u5f00\u53d1\u73af\u5883\u672c\u8eab\u5c31\u662f\u975e\u5e38\u590d\u6742\u7684\uff0c\u4f46\u4e00\u5b9a\u8981\u8ba9\u4eba\u611f\u89c9\u64cd\u4f5c\u65b9\u4fbf\u3002 \u80fd\u591f\u901a\u8fc7\u4ee3\u7801\u6a21\u7248\u6765\u7b80\u5316\u7f16\u7801\u8fc7\u7a0b\u4ece\u800c\u63d0\u5347\u7f16\u7801\u901f\u5ea6\u3002 \u4f7f\u7528 Go \u9879\u76ee\u7684\u6982\u5ff5\u6765\u6d4f\u89c8\u548c\u7ba1\u7406\u9879\u76ee\u4e2d\u7684\u6587\u4ef6\uff0c\u540c\u65f6\u8fd8\u8981\u62e5\u6709\u6784\u5efa\u7cfb\u7edf\u7684\u6982\u5ff5\uff0c\u8fd9\u6837\u624d\u80fd\u66f4\u52a0\u65b9\u4fbf\u7684\u6784\u5efa\u3001\u6e05\u7406\u6216\u8fd0\u884c\u6211\u4eec\u5efa\u7acb\u7684\u7a0b\u5e8f\u6216\u9879\u76ee\u3002\u6784\u5efa\u51fa\u7684\u7a0b\u5e8f\u9700\u8981\u80fd\u591f\u901a\u8fc7\u547d\u4ee4\u884c\u6216 IDE \u5185\u90e8\u7684\u63a7\u5236\u53f0\u8fd0\u884c\u3002 \u62e5\u6709\u65ad\u70b9\u3001\u68c0\u67e5\u53d8\u91cf\u503c\u3001\u5355\u6b65\u6267\u884c\u3001\u9010\u8fc7\u7a0b\u6267\u884c\u6807\u8bc6\u5e93\u4e2d\u4ee3\u7801\u7684\u80fd\u529b\u3002 \u80fd\u591f\u65b9\u4fbf\u7684\u5b58\u53d6\u6700\u8fd1\u4f7f\u7528\u8fc7\u7684\u6587\u4ef6\u6216\u9879\u76ee\u3002 \u62e5\u6709\u5bf9\u5305\u3001\u7c7b\u578b\u3001\u53d8\u91cf\u3001\u51fd\u6570\u548c\u65b9\u6cd5\u7684\u667a\u80fd\u4ee3\u7801\u8865\u5168\u7684\u529f\u80fd\u3002 \u80fd\u591f\u5bf9\u9879\u76ee\u6216\u5305\u4e2d\u7684\u4ee3\u7801\u5efa\u7acb\u62bd\u8c61\u8bed\u6cd5\u6811\u89c6\u56fe (AST-view)\u3002 \u5185\u7f6e Go \u7684\u76f8\u5173\u5de5\u5177\u3002 \u80fd\u591f\u65b9\u4fbf\u5b8c\u6574\u5730\u67e5\u9605 Go \u6587\u6863\u3002 \u80fd\u591f\u65b9\u4fbf\u5730\u5728\u4e0d\u540c\u7684 Go \u73af\u5883\u4e4b\u95f4\u5207\u6362\u3002 \u80fd\u591f\u5bfc\u51fa\u4e0d\u540c\u683c\u5f0f\u7684\u4ee3\u7801\u6587\u4ef6\uff0c\u5982\uff1aPDF\uff0cHTML \u6216\u683c\u5f0f\u5316\u540e\u7684\u4ee3\u7801\u3002 \u9488\u5bf9\u4e00\u4e9b\u7279\u5b9a\u7684\u9879\u76ee\u6709\u9879\u76ee\u6a21\u677f\uff0c\u5982\uff1aWeb \u5e94\u7528\uff0cApp Engine \u9879\u76ee\uff0c\u4ece\u800c\u80fd\u591f\u66f4\u5feb\u5730\u5f00\u59cb\u5f00\u53d1\u5de5\u4f5c\u3002 \u5177\u5907\u4ee3\u7801\u91cd\u6784\u7684\u80fd\u529b\u3002 \u96c6\u6210\u50cf hg \u6216 git \u8fd9\u6837\u7684\u7248\u672c\u63a7\u5236\u5de5\u5177\u3002 \u96c6\u6210 Google App Engine \u5f00\u53d1\u53ca\u8c03\u8bd5\u7684\u529f\u80fd\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7f16\u8f91\u5668\u3001\u96c6\u6210\u5f00\u53d1\u73af\u5883\u4e0e\u5176\u5b83\u5de5\u5177 \u4e0b\u4e00\u8282\uff1a \u7f16\u8f91\u5668\u548c\u96c6\u6210\u5f00\u53d1\u73af\u5883","title":"3.1 Go \u5f00\u53d1\u73af\u5883\u7684\u57fa\u672c\u8981\u6c42"},{"location":"03.1/#31-go","text":"\u8fd9\u91cc\u6709\u4e00\u4e2a\u53ef\u4ee5\u7528\u6765\u5f00\u53d1 Go \u7684\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff0c\u4f60\u671f\u5f85\u6709\u4ee5\u4e0b\u54ea\u4e9b\u7279\u6027\uff0c\u4ece\u800c\u66ff\u4ee3\u4f60\u4f7f\u7528\u6587\u672c\u7f16\u8f91\u5668\u5199\u4ee3\u7801\u548c\u547d\u4ee4\u884c\u7f16\u8bd1\u4e0e\u94fe\u63a5\u7a0b\u5e8f\u7684\u65b9\u5f0f\uff1f \u8bed\u6cd5\u9ad8\u4eae\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u529f\u80fd\uff0c\u8fd9\u4e5f\u662f\u6bcf\u4e2a\u5f00\u53d1\u5de5\u5177\u90fd\u63d0\u4f9b\u914d\u7f6e\u6587\u4ef6\u6765\u5b9e\u73b0\u81ea\u5b9a\u4e49\u914d\u7f6e\u7684\u539f\u56e0\u3002 \u53ef\u4ee5\u81ea\u52a8\u4fdd\u5b58\u4ee3\u7801\uff0c\u81f3\u5c11\u5728\u6bcf\u6b21\u7f16\u8bd1\u524d\u90fd\u4f1a\u4fdd\u5b58\u3002 \u53ef\u4ee5\u663e\u793a\u4ee3\u7801\u6240\u5728\u7684\u884c\u6570\u3002 \u62e5\u6709\u8f83\u597d\u7684\u9879\u76ee\u6587\u4ef6\u7eb5\u89c8\u548c\u5bfc\u822a\u80fd\u529b\uff0c\u53ef\u4ee5\u540c\u65f6\u7f16\u8f91\u591a\u4e2a\u6e90\u6587\u4ef6\u5e76\u8bbe\u7f6e\u4e66\u7b7e\uff0c\u80fd\u591f\u5339\u914d\u62ec\u53f7\uff0c\u80fd\u591f\u8df3\u8f6c\u5230\u67d0\u4e2a\u51fd\u6570\u6216\u7c7b\u578b\u7684\u5b9a\u4e49\u90e8\u5206\u3002 \u5b8c\u7f8e\u7684\u67e5\u627e\u548c\u66ff\u6362\u529f\u80fd\uff0c\u66ff\u6362\u4e4b\u524d\u6700\u597d\u8fd8\u80fd\u9884\u89c8\u7ed3\u679c\u3002 \u53ef\u4ee5\u6ce8\u91ca\u6216\u53d6\u6d88\u6ce8\u91ca\u9009\u4e2d\u7684\u4e00\u884c\u6216\u591a\u884c\u4ee3\u7801\u3002 \u5f53\u6709\u7f16\u8bd1\u9519\u8bef\u65f6\uff0c\u53cc\u51fb\u9519\u8bef\u63d0\u793a\u53ef\u4ee5\u8df3\u8f6c\u5230\u53d1\u751f\u9519\u8bef\u7684\u4f4d\u7f6e\u3002 \u8de8\u5e73\u53f0\uff0c\u80fd\u591f\u5728 Linux\u3001Mac OS X \u548c Windows \u4e0b\u5de5\u4f5c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u4e00\u4e2a\u5f00\u53d1\u73af\u5883\u3002 \u6700\u597d\u662f\u514d\u8d39\u7684\uff0c\u4e0d\u8fc7\u6709\u4e9b\u5f00\u53d1\u8005\u8fd8\u662f\u5e0c\u671b\u80fd\u591f\u901a\u8fc7\u652f\u4ed8\u4e00\u5b9a\u91d1\u989d\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u5f00\u53d1\u73af\u5883\u3002 \u6700\u597d\u662f\u5f00\u6e90\u7684\u3002 \u80fd\u591f\u901a\u8fc7\u63d2\u4ef6\u67b6\u6784\u6765\u8f7b\u6613\u6269\u5c55\u548c\u66ff\u6362\u67d0\u4e2a\u529f\u80fd\u3002 \u5c3d\u7ba1\u96c6\u6210\u5f00\u53d1\u73af\u5883\u672c\u8eab\u5c31\u662f\u975e\u5e38\u590d\u6742\u7684\uff0c\u4f46\u4e00\u5b9a\u8981\u8ba9\u4eba\u611f\u89c9\u64cd\u4f5c\u65b9\u4fbf\u3002 \u80fd\u591f\u901a\u8fc7\u4ee3\u7801\u6a21\u7248\u6765\u7b80\u5316\u7f16\u7801\u8fc7\u7a0b\u4ece\u800c\u63d0\u5347\u7f16\u7801\u901f\u5ea6\u3002 \u4f7f\u7528 Go \u9879\u76ee\u7684\u6982\u5ff5\u6765\u6d4f\u89c8\u548c\u7ba1\u7406\u9879\u76ee\u4e2d\u7684\u6587\u4ef6\uff0c\u540c\u65f6\u8fd8\u8981\u62e5\u6709\u6784\u5efa\u7cfb\u7edf\u7684\u6982\u5ff5\uff0c\u8fd9\u6837\u624d\u80fd\u66f4\u52a0\u65b9\u4fbf\u7684\u6784\u5efa\u3001\u6e05\u7406\u6216\u8fd0\u884c\u6211\u4eec\u5efa\u7acb\u7684\u7a0b\u5e8f\u6216\u9879\u76ee\u3002\u6784\u5efa\u51fa\u7684\u7a0b\u5e8f\u9700\u8981\u80fd\u591f\u901a\u8fc7\u547d\u4ee4\u884c\u6216 IDE \u5185\u90e8\u7684\u63a7\u5236\u53f0\u8fd0\u884c\u3002 \u62e5\u6709\u65ad\u70b9\u3001\u68c0\u67e5\u53d8\u91cf\u503c\u3001\u5355\u6b65\u6267\u884c\u3001\u9010\u8fc7\u7a0b\u6267\u884c\u6807\u8bc6\u5e93\u4e2d\u4ee3\u7801\u7684\u80fd\u529b\u3002 \u80fd\u591f\u65b9\u4fbf\u7684\u5b58\u53d6\u6700\u8fd1\u4f7f\u7528\u8fc7\u7684\u6587\u4ef6\u6216\u9879\u76ee\u3002 \u62e5\u6709\u5bf9\u5305\u3001\u7c7b\u578b\u3001\u53d8\u91cf\u3001\u51fd\u6570\u548c\u65b9\u6cd5\u7684\u667a\u80fd\u4ee3\u7801\u8865\u5168\u7684\u529f\u80fd\u3002 \u80fd\u591f\u5bf9\u9879\u76ee\u6216\u5305\u4e2d\u7684\u4ee3\u7801\u5efa\u7acb\u62bd\u8c61\u8bed\u6cd5\u6811\u89c6\u56fe (AST-view)\u3002 \u5185\u7f6e Go \u7684\u76f8\u5173\u5de5\u5177\u3002 \u80fd\u591f\u65b9\u4fbf\u5b8c\u6574\u5730\u67e5\u9605 Go \u6587\u6863\u3002 \u80fd\u591f\u65b9\u4fbf\u5730\u5728\u4e0d\u540c\u7684 Go \u73af\u5883\u4e4b\u95f4\u5207\u6362\u3002 \u80fd\u591f\u5bfc\u51fa\u4e0d\u540c\u683c\u5f0f\u7684\u4ee3\u7801\u6587\u4ef6\uff0c\u5982\uff1aPDF\uff0cHTML \u6216\u683c\u5f0f\u5316\u540e\u7684\u4ee3\u7801\u3002 \u9488\u5bf9\u4e00\u4e9b\u7279\u5b9a\u7684\u9879\u76ee\u6709\u9879\u76ee\u6a21\u677f\uff0c\u5982\uff1aWeb \u5e94\u7528\uff0cApp Engine \u9879\u76ee\uff0c\u4ece\u800c\u80fd\u591f\u66f4\u5feb\u5730\u5f00\u59cb\u5f00\u53d1\u5de5\u4f5c\u3002 \u5177\u5907\u4ee3\u7801\u91cd\u6784\u7684\u80fd\u529b\u3002 \u96c6\u6210\u50cf hg \u6216 git \u8fd9\u6837\u7684\u7248\u672c\u63a7\u5236\u5de5\u5177\u3002 \u96c6\u6210 Google App Engine \u5f00\u53d1\u53ca\u8c03\u8bd5\u7684\u529f\u80fd\u3002","title":"3.1 Go \u5f00\u53d1\u73af\u5883\u7684\u57fa\u672c\u8981\u6c42"},{"location":"03.1/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7f16\u8f91\u5668\u3001\u96c6\u6210\u5f00\u53d1\u73af\u5883\u4e0e\u5176\u5b83\u5de5\u5177 \u4e0b\u4e00\u8282\uff1a \u7f16\u8f91\u5668\u548c\u96c6\u6210\u5f00\u53d1\u73af\u5883","title":"\u94fe\u63a5"},{"location":"03.2/","text":"3.2 \u7f16\u8f91\u5668\u548c\u96c6\u6210\u5f00\u53d1\u73af\u5883 \u00b6 \u8fd9\u4e9b\u7f16\u8f91\u5668\u5305\u542b\u4e86\u4ee3\u7801\u9ad8\u4eae\u548c\u5176\u5b83\u4e0e Go \u6709\u5173\u7684\u4e00\u4e9b\u4f7f\u7528\u5de5\u5177\uff1aEmacs\u3001Vim\u3001Xcode 6\u3001KD Kate\u3001TextWrangler\u3001BBEdit\u3001McEdit\u3001TextMate\u3001TextPad\u3001JEdit\u3001SciTE\u3001Nano\u3001Notepad++\u3001Geany\u3001SlickEdit\u3001Visual Studio Code\u3001IntelliJ IDEA \u548c Sublime Text 2\u3002 \u4f60\u53ef\u4ee5\u5c06 Linux \u7684\u6587\u672c\u7f16\u8f91\u5668 GEdit \u6539\u9020\u6210\u4e00\u4e2a\u5f88\u597d\u7684 Go \u5f00\u53d1\u5de5\u5177\u3002 Sublime Text \u662f\u4e00\u4e2a\u9769\u547d\u6027\u7684\u8de8\u5e73\u53f0 (Linux\u3001Mac OS X\u3001Windows)\u6587\u672c\u7f16\u8f91\u5668\uff0c\u5b83\u652f\u6301\u7f16\u5199\u975e\u5e38\u591a\u7684\u7f16\u7a0b\u8bed\u8a00\u4ee3\u7801\u3002\u5bf9\u4e8e Go \u800c\u8a00\uff0c\u5b83\u6709\u4e00\u4e2a\u63d2\u4ef6\u53eb\u505a GoSublime \u6765\u652f\u6301\u4ee3\u7801\u8865\u5168\u548c\u4ee3\u7801\u6a21\u7248\u3002 \u8fd9\u91cc\u8fd8\u6709\u4e00\u4e9b\u66f4\u52a0\u9ad8\u7ea7\u7684 Go \u5f00\u53d1\u5de5\u5177\uff0c\u5176\u4e2d\u4e00\u4e9b\u662f\u4ee5\u63d2\u4ef6\u7684\u5f62\u5f0f\u5229\u7528\u672c\u8eab\u662f\u4f5c\u4e3a\u5f00\u53d1 Java \u7684\u5de5\u5177\u3002 IntelliJ Idea Plugin \u662f\u4e00\u4e2a IntelliJ IDEA \u7684\u63d2\u4ef6\uff0c\u5177\u6709\u5f88\u597d\u7684\u64cd\u4f5c\u4f53\u9a8c\u548c\u4ee3\u7801\u8865\u5168\u529f\u80fd\u3002 LiteIDE \u8fd9\u662f\u4e00\u6b3e\u4e13\u95e8\u9488\u5bf9 Go \u5f00\u53d1\u7684\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff0c\u5728\u7f16\u8f91\u3001\u7f16\u8bd1\u548c\u8fd0\u884c Go \u7a0b\u5e8f\u548c\u9879\u76ee\u65b9\u9762\u90fd\u6709\u975e\u5e38\u597d\u7684\u652f\u6301\u3002\u540c\u65f6\u8fd8\u5305\u62ec\u4e86\u5bf9\u6e90\u4ee3\u7801\u7684\u62bd\u8c61\u8bed\u6cd5\u6811\u89c6\u56fe\u548c\u4e00\u4e9b\u5185\u7f6e\u5de5\u5177\uff08\u6b64\u5f00\u53d1\u73af\u5883\u7531\u56fd\u4eba vfc \u5927\u53d4\u5f00\u53d1\uff09\u3002 GoClipse \u662f\u4e00\u6b3e Eclipse IDE \u7684\u63d2\u4ef6\uff0c\u62e5\u6709\u975e\u5e38\u591a\u7684\u7279\u6027\u4ee5\u53ca\u901a\u8fc7 GoCode \u6765\u5b9e\u73b0\u4ee3\u7801\u8865\u5168\u529f\u80fd\u3002 \u5982\u679c\u4f60\u5bf9\u96c6\u6210\u5f00\u53d1\u73af\u5883\u90fd\u4e0d\u662f\u5f88\u719f\u6089\uff0c\u90a3\u5c31\u4f7f\u7528 LiteIDE \u5427\uff0c\u53e6\u5916\u4f7f\u7528 GoClipse \u6216\u8005 IntelliJ Idea Plugin \u4e5f\u662f\u4e0d\u9519\u7684\u9009\u62e9\u3002 \u4ee3\u7801\u8865\u5168 \u4e00\u822c\u90fd\u662f\u901a\u8fc7\u5185\u7f6e GoCode \u5b9e\u73b0\u7684\uff08\u5982\uff1aLieteIDE\u3001GoClipse\uff09\uff0c\u5982\u679c\u9700\u8981\u624b\u52a8\u5b89\u88c5 GoCode\uff0c\u5728\u547d\u4ee4\u884c\u8f93\u5165\u6307\u4ee4 go get -u github.com/nsf/gocode \u5373\u53ef\uff08\u52a1\u5fc5\u4e8b\u5148\u914d\u7f6e\u597d Go \u73af\u5883\u53d8\u91cf\uff09 \u3002 \u63a5\u4e0b\u6765\u4f1a\u5bf9\u8fd9\u4e09\u4e2a\u96c6\u6210\u5f00\u53d1\u73af\u5883\u505a\u66f4\u52a0\u8be6\u7ec6\u7684\u8bf4\u660e\u3002 3.2.1 LiteIDE \u00b6 \u8fd9\u6b3e IDE \u7684\u5f53\u524d\u6700\u65b0\u7248\u672c\u53f7\u4e3a X27\uff0c\u4f60\u53ef\u4ee5\u4ece GitHub \u9875\u9762\u83b7\u53d6\u8be6\u60c5\u3002 LiteIDE \u662f\u4e00\u6b3e\u975e\u5e38\u597d\u7528\u7684\u8f7b\u91cf\u7ea7 Go \u96c6\u6210\u5f00\u53d1\u73af\u5883\uff08\u57fa\u4e8e QT\u3001Kate \u548c SciTE\uff09\uff0c\u5305\u542b\u4e86\u8de8\u5e73\u53f0\u5f00\u53d1\u53ca\u5176\u5b83\u5fc5\u8981\u7684\u7279\u6027\uff0c\u5bf9\u4ee3\u7801\u7f16\u5199\u3001\u81ea\u52a8\u8865\u5168\u548c\u8fd0\u884c\u8c03\u8bd5\u90fd\u6709\u6781\u4f73\u7684\u652f\u6301\u3002\u5b83\u91c7\u7528\u4e86 Go \u9879\u76ee\u7684\u6982\u5ff5\u6765\u5bf9\u9879\u76ee\u6587\u4ef6\u8fdb\u884c\u6d4f\u89c8\u548c\u7ba1\u7406\uff0c\u5b83\u8fd8\u652f\u6301\u5728\u5404\u4e2a Go \u5f00\u53d1\u73af\u5883\u4e4b\u95f4\u968f\u610f\u5207\u6362\u4ee5\u53ca\u4ea4\u53c9\u7f16\u8bd1\u7684\u529f\u80fd\u3002 \u540c\u65f6\uff0c\u5b83\u5177\u5907\u4e86\u62bd\u8c61\u8bed\u6cd5\u6811\u89c6\u56fe\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u6e05\u695a\u5730\u7eb5\u89c8\u9879\u76ee\u4e2d\u7684\u5e38\u91cf\u3001\u53d8\u91cf\u3001\u51fd\u6570\u3001\u4e0d\u540c\u7c7b\u578b\u4ee5\u53ca\u4ed6\u4eec\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u3002 \u56fe 3.1 LiteIDE \u4ee3\u7801\u7f16\u8f91\u754c\u9762\u548c\u62bd\u8c61\u8bed\u6cd5\u6811\u89c6\u56fe 3.2.2 GoClipse \u00b6 \u8be5\u6b3e\u63d2\u4ef6\u7684\u5f53\u524d\u6700\u65b0\u7248\u672c\u53f7\u4e3a 0.9.1\uff0c\u4f60\u53ef\u4ee5\u4ece GitHub \u9875\u9762\u83b7\u53d6\u8be6\u60c5\u3002 \u5176\u4f9d\u9644\u4e8e\u8457\u540d\u7684 Eclipse \u8fd9\u4e2a\u5927\u578b\u5f00\u53d1\u73af\u5883\uff0c\u867d\u7136\u9700\u8981\u5b89\u88c5 JVM \u8fd0\u884c\u73af\u5883\uff0c\u4f46\u5374\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4eab\u6709 Eclipse \u672c\u8eab\u6240\u5177\u6709\u7684\u8bf8\u591a\u529f\u80fd\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u7f16\u8f91\u5668\uff0c\u5b8c\u5584\u7684\u4ee3\u7801\u8865\u5168\u3001\u62bd\u8c61\u8bed\u6cd5\u6811\u89c6\u56fe\u3001\u9879\u76ee\u7ba1\u7406\u548c\u7a0b\u5e8f\u8c03\u8bd5\u529f\u80fd\u3002 \u56fe 3.2 GoClipse \u4ee3\u7801\u7f16\u8f91\u754c\u9762\u3001\u62bd\u8c61\u8bed\u6cd5\u6811\u89c6\u56fe\u548c\u9879\u76ee\u7ba1\u7406 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Go \u5f00\u53d1\u73af\u5883\u7684\u57fa\u672c\u8981\u6c42 \u4e0b\u4e00\u8282\uff1a \u8c03\u8bd5\u5668","title":"3.2 \u7f16\u8f91\u5668\u548c\u96c6\u6210\u5f00\u53d1\u73af\u5883"},{"location":"03.2/#32","text":"\u8fd9\u4e9b\u7f16\u8f91\u5668\u5305\u542b\u4e86\u4ee3\u7801\u9ad8\u4eae\u548c\u5176\u5b83\u4e0e Go \u6709\u5173\u7684\u4e00\u4e9b\u4f7f\u7528\u5de5\u5177\uff1aEmacs\u3001Vim\u3001Xcode 6\u3001KD Kate\u3001TextWrangler\u3001BBEdit\u3001McEdit\u3001TextMate\u3001TextPad\u3001JEdit\u3001SciTE\u3001Nano\u3001Notepad++\u3001Geany\u3001SlickEdit\u3001Visual Studio Code\u3001IntelliJ IDEA \u548c Sublime Text 2\u3002 \u4f60\u53ef\u4ee5\u5c06 Linux \u7684\u6587\u672c\u7f16\u8f91\u5668 GEdit \u6539\u9020\u6210\u4e00\u4e2a\u5f88\u597d\u7684 Go \u5f00\u53d1\u5de5\u5177\u3002 Sublime Text \u662f\u4e00\u4e2a\u9769\u547d\u6027\u7684\u8de8\u5e73\u53f0 (Linux\u3001Mac OS X\u3001Windows)\u6587\u672c\u7f16\u8f91\u5668\uff0c\u5b83\u652f\u6301\u7f16\u5199\u975e\u5e38\u591a\u7684\u7f16\u7a0b\u8bed\u8a00\u4ee3\u7801\u3002\u5bf9\u4e8e Go \u800c\u8a00\uff0c\u5b83\u6709\u4e00\u4e2a\u63d2\u4ef6\u53eb\u505a GoSublime \u6765\u652f\u6301\u4ee3\u7801\u8865\u5168\u548c\u4ee3\u7801\u6a21\u7248\u3002 \u8fd9\u91cc\u8fd8\u6709\u4e00\u4e9b\u66f4\u52a0\u9ad8\u7ea7\u7684 Go \u5f00\u53d1\u5de5\u5177\uff0c\u5176\u4e2d\u4e00\u4e9b\u662f\u4ee5\u63d2\u4ef6\u7684\u5f62\u5f0f\u5229\u7528\u672c\u8eab\u662f\u4f5c\u4e3a\u5f00\u53d1 Java \u7684\u5de5\u5177\u3002 IntelliJ Idea Plugin \u662f\u4e00\u4e2a IntelliJ IDEA \u7684\u63d2\u4ef6\uff0c\u5177\u6709\u5f88\u597d\u7684\u64cd\u4f5c\u4f53\u9a8c\u548c\u4ee3\u7801\u8865\u5168\u529f\u80fd\u3002 LiteIDE \u8fd9\u662f\u4e00\u6b3e\u4e13\u95e8\u9488\u5bf9 Go \u5f00\u53d1\u7684\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff0c\u5728\u7f16\u8f91\u3001\u7f16\u8bd1\u548c\u8fd0\u884c Go \u7a0b\u5e8f\u548c\u9879\u76ee\u65b9\u9762\u90fd\u6709\u975e\u5e38\u597d\u7684\u652f\u6301\u3002\u540c\u65f6\u8fd8\u5305\u62ec\u4e86\u5bf9\u6e90\u4ee3\u7801\u7684\u62bd\u8c61\u8bed\u6cd5\u6811\u89c6\u56fe\u548c\u4e00\u4e9b\u5185\u7f6e\u5de5\u5177\uff08\u6b64\u5f00\u53d1\u73af\u5883\u7531\u56fd\u4eba vfc \u5927\u53d4\u5f00\u53d1\uff09\u3002 GoClipse \u662f\u4e00\u6b3e Eclipse IDE \u7684\u63d2\u4ef6\uff0c\u62e5\u6709\u975e\u5e38\u591a\u7684\u7279\u6027\u4ee5\u53ca\u901a\u8fc7 GoCode \u6765\u5b9e\u73b0\u4ee3\u7801\u8865\u5168\u529f\u80fd\u3002 \u5982\u679c\u4f60\u5bf9\u96c6\u6210\u5f00\u53d1\u73af\u5883\u90fd\u4e0d\u662f\u5f88\u719f\u6089\uff0c\u90a3\u5c31\u4f7f\u7528 LiteIDE \u5427\uff0c\u53e6\u5916\u4f7f\u7528 GoClipse \u6216\u8005 IntelliJ Idea Plugin \u4e5f\u662f\u4e0d\u9519\u7684\u9009\u62e9\u3002 \u4ee3\u7801\u8865\u5168 \u4e00\u822c\u90fd\u662f\u901a\u8fc7\u5185\u7f6e GoCode \u5b9e\u73b0\u7684\uff08\u5982\uff1aLieteIDE\u3001GoClipse\uff09\uff0c\u5982\u679c\u9700\u8981\u624b\u52a8\u5b89\u88c5 GoCode\uff0c\u5728\u547d\u4ee4\u884c\u8f93\u5165\u6307\u4ee4 go get -u github.com/nsf/gocode \u5373\u53ef\uff08\u52a1\u5fc5\u4e8b\u5148\u914d\u7f6e\u597d Go \u73af\u5883\u53d8\u91cf\uff09 \u3002 \u63a5\u4e0b\u6765\u4f1a\u5bf9\u8fd9\u4e09\u4e2a\u96c6\u6210\u5f00\u53d1\u73af\u5883\u505a\u66f4\u52a0\u8be6\u7ec6\u7684\u8bf4\u660e\u3002","title":"3.2 \u7f16\u8f91\u5668\u548c\u96c6\u6210\u5f00\u53d1\u73af\u5883"},{"location":"03.2/#321-liteide","text":"\u8fd9\u6b3e IDE \u7684\u5f53\u524d\u6700\u65b0\u7248\u672c\u53f7\u4e3a X27\uff0c\u4f60\u53ef\u4ee5\u4ece GitHub \u9875\u9762\u83b7\u53d6\u8be6\u60c5\u3002 LiteIDE \u662f\u4e00\u6b3e\u975e\u5e38\u597d\u7528\u7684\u8f7b\u91cf\u7ea7 Go \u96c6\u6210\u5f00\u53d1\u73af\u5883\uff08\u57fa\u4e8e QT\u3001Kate \u548c SciTE\uff09\uff0c\u5305\u542b\u4e86\u8de8\u5e73\u53f0\u5f00\u53d1\u53ca\u5176\u5b83\u5fc5\u8981\u7684\u7279\u6027\uff0c\u5bf9\u4ee3\u7801\u7f16\u5199\u3001\u81ea\u52a8\u8865\u5168\u548c\u8fd0\u884c\u8c03\u8bd5\u90fd\u6709\u6781\u4f73\u7684\u652f\u6301\u3002\u5b83\u91c7\u7528\u4e86 Go \u9879\u76ee\u7684\u6982\u5ff5\u6765\u5bf9\u9879\u76ee\u6587\u4ef6\u8fdb\u884c\u6d4f\u89c8\u548c\u7ba1\u7406\uff0c\u5b83\u8fd8\u652f\u6301\u5728\u5404\u4e2a Go \u5f00\u53d1\u73af\u5883\u4e4b\u95f4\u968f\u610f\u5207\u6362\u4ee5\u53ca\u4ea4\u53c9\u7f16\u8bd1\u7684\u529f\u80fd\u3002 \u540c\u65f6\uff0c\u5b83\u5177\u5907\u4e86\u62bd\u8c61\u8bed\u6cd5\u6811\u89c6\u56fe\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u6e05\u695a\u5730\u7eb5\u89c8\u9879\u76ee\u4e2d\u7684\u5e38\u91cf\u3001\u53d8\u91cf\u3001\u51fd\u6570\u3001\u4e0d\u540c\u7c7b\u578b\u4ee5\u53ca\u4ed6\u4eec\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u3002 \u56fe 3.1 LiteIDE \u4ee3\u7801\u7f16\u8f91\u754c\u9762\u548c\u62bd\u8c61\u8bed\u6cd5\u6811\u89c6\u56fe","title":"3.2.1 LiteIDE"},{"location":"03.2/#322-goclipse","text":"\u8be5\u6b3e\u63d2\u4ef6\u7684\u5f53\u524d\u6700\u65b0\u7248\u672c\u53f7\u4e3a 0.9.1\uff0c\u4f60\u53ef\u4ee5\u4ece GitHub \u9875\u9762\u83b7\u53d6\u8be6\u60c5\u3002 \u5176\u4f9d\u9644\u4e8e\u8457\u540d\u7684 Eclipse \u8fd9\u4e2a\u5927\u578b\u5f00\u53d1\u73af\u5883\uff0c\u867d\u7136\u9700\u8981\u5b89\u88c5 JVM \u8fd0\u884c\u73af\u5883\uff0c\u4f46\u5374\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4eab\u6709 Eclipse \u672c\u8eab\u6240\u5177\u6709\u7684\u8bf8\u591a\u529f\u80fd\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u7f16\u8f91\u5668\uff0c\u5b8c\u5584\u7684\u4ee3\u7801\u8865\u5168\u3001\u62bd\u8c61\u8bed\u6cd5\u6811\u89c6\u56fe\u3001\u9879\u76ee\u7ba1\u7406\u548c\u7a0b\u5e8f\u8c03\u8bd5\u529f\u80fd\u3002 \u56fe 3.2 GoClipse \u4ee3\u7801\u7f16\u8f91\u754c\u9762\u3001\u62bd\u8c61\u8bed\u6cd5\u6811\u89c6\u56fe\u548c\u9879\u76ee\u7ba1\u7406","title":"3.2.2 GoClipse"},{"location":"03.2/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Go \u5f00\u53d1\u73af\u5883\u7684\u57fa\u672c\u8981\u6c42 \u4e0b\u4e00\u8282\uff1a \u8c03\u8bd5\u5668","title":"\u94fe\u63a5"},{"location":"03.3/","text":"3.3 \u8c03\u8bd5\u5668 \u00b6 \u5e94\u7528\u7a0b\u5e8f\u7684\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u8c03\u8bd5\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u4e00\u4e2a\u73af\u8282\uff0c\u56e0\u6b64\u6709\u4e00\u4e2a\u597d\u7684\u8c03\u8bd5\u5668\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u53ef\u60dc\u7684\u662f\uff0cGo \u5728\u8fd9\u65b9\u9762\u7684\u53d1\u5c55\u8fd8\u4e0d\u662f\u5f88\u5b8c\u5584\u3002\u76ee\u524d\u53ef\u7528\u7684\u8c03\u8bd5\u5668\u662f gdb\uff0c\u6700\u65b0\u7248\u5747\u4ee5\u5185\u7f6e\u5728\u96c6\u6210\u5f00\u53d1\u73af\u5883 LiteIDE \u548c GoClipse \u4e2d\uff0c\u4f46\u662f\u8be5\u8c03\u8bd5\u5668\u7684\u8c03\u8bd5\u65b9\u5f0f\u5e76\u4e0d\u7075\u6d3b\u4e14\u64cd\u4f5c\u96be\u5ea6\u8f83\u5927\u3002 \u5982\u679c\u4f60\u4e0d\u60f3\u4f7f\u7528\u8c03\u8bd5\u5668\uff0c\u4f60\u53ef\u4ee5\u6309\u7167\u4e0b\u9762\u7684\u4e00\u4e9b\u6709\u7528\u7684\u65b9\u6cd5\u6765\u8fbe\u5230\u57fa\u672c\u8c03\u8bd5\u7684\u76ee\u7684\uff1a \u5728\u5408\u9002\u7684\u4f4d\u7f6e\u4f7f\u7528\u6253\u5370\u8bed\u53e5\u8f93\u51fa\u76f8\u5173\u53d8\u91cf\u7684\u503c\uff08 print / println \u548c fmt.Print / fmt.Println / fmt.Printf \uff09\u3002 \u5728 fmt.Printf \u4e2d\u4f7f\u7528\u4e0b\u9762\u7684\u8bf4\u660e\u7b26\u6765\u6253\u5370\u6709\u5173\u53d8\u91cf\u7684\u76f8\u5173\u4fe1\u606f\uff1a %+v \u6253\u5370\u5305\u62ec\u5b57\u6bb5\u5728\u5185\u7684\u5b9e\u4f8b\u7684\u5b8c\u6574\u4fe1\u606f %#v \u6253\u5370\u5305\u62ec\u5b57\u6bb5\u548c\u9650\u5b9a\u7c7b\u578b\u540d\u79f0\u5728\u5185\u7684\u5b9e\u4f8b\u7684\u5b8c\u6574\u4fe1\u606f %T \u6253\u5370\u67d0\u4e2a\u7c7b\u578b\u7684\u5b8c\u6574\u8bf4\u660e \u4f7f\u7528 panic() \u8bed\u53e5\uff08 \u7b2c 13.2 \u8282 \uff09\u6765\u83b7\u53d6\u6808\u8ddf\u8e2a\u4fe1\u606f\uff08\u76f4\u5230 panic() \u65f6\u6240\u6709\u88ab\u8c03\u7528\u51fd\u6570\u7684\u5217\u8868\uff09\u3002 \u4f7f\u7528\u5173\u952e\u5b57 defer \u6765\u8ddf\u8e2a\u4ee3\u7801\u6267\u884c\u8fc7\u7a0b\uff08 \u7b2c 6.4 \u8282 \uff09\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7f16\u8f91\u5668\u548c\u96c6\u6210\u5f00\u53d1\u73af\u5883 \u4e0b\u4e00\u8282\uff1a \u6784\u5efa\u5e76\u8fd0\u884c Go \u7a0b\u5e8f","title":"3.3 \u8c03\u8bd5\u5668"},{"location":"03.3/#33","text":"\u5e94\u7528\u7a0b\u5e8f\u7684\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u8c03\u8bd5\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u4e00\u4e2a\u73af\u8282\uff0c\u56e0\u6b64\u6709\u4e00\u4e2a\u597d\u7684\u8c03\u8bd5\u5668\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u53ef\u60dc\u7684\u662f\uff0cGo \u5728\u8fd9\u65b9\u9762\u7684\u53d1\u5c55\u8fd8\u4e0d\u662f\u5f88\u5b8c\u5584\u3002\u76ee\u524d\u53ef\u7528\u7684\u8c03\u8bd5\u5668\u662f gdb\uff0c\u6700\u65b0\u7248\u5747\u4ee5\u5185\u7f6e\u5728\u96c6\u6210\u5f00\u53d1\u73af\u5883 LiteIDE \u548c GoClipse \u4e2d\uff0c\u4f46\u662f\u8be5\u8c03\u8bd5\u5668\u7684\u8c03\u8bd5\u65b9\u5f0f\u5e76\u4e0d\u7075\u6d3b\u4e14\u64cd\u4f5c\u96be\u5ea6\u8f83\u5927\u3002 \u5982\u679c\u4f60\u4e0d\u60f3\u4f7f\u7528\u8c03\u8bd5\u5668\uff0c\u4f60\u53ef\u4ee5\u6309\u7167\u4e0b\u9762\u7684\u4e00\u4e9b\u6709\u7528\u7684\u65b9\u6cd5\u6765\u8fbe\u5230\u57fa\u672c\u8c03\u8bd5\u7684\u76ee\u7684\uff1a \u5728\u5408\u9002\u7684\u4f4d\u7f6e\u4f7f\u7528\u6253\u5370\u8bed\u53e5\u8f93\u51fa\u76f8\u5173\u53d8\u91cf\u7684\u503c\uff08 print / println \u548c fmt.Print / fmt.Println / fmt.Printf \uff09\u3002 \u5728 fmt.Printf \u4e2d\u4f7f\u7528\u4e0b\u9762\u7684\u8bf4\u660e\u7b26\u6765\u6253\u5370\u6709\u5173\u53d8\u91cf\u7684\u76f8\u5173\u4fe1\u606f\uff1a %+v \u6253\u5370\u5305\u62ec\u5b57\u6bb5\u5728\u5185\u7684\u5b9e\u4f8b\u7684\u5b8c\u6574\u4fe1\u606f %#v \u6253\u5370\u5305\u62ec\u5b57\u6bb5\u548c\u9650\u5b9a\u7c7b\u578b\u540d\u79f0\u5728\u5185\u7684\u5b9e\u4f8b\u7684\u5b8c\u6574\u4fe1\u606f %T \u6253\u5370\u67d0\u4e2a\u7c7b\u578b\u7684\u5b8c\u6574\u8bf4\u660e \u4f7f\u7528 panic() \u8bed\u53e5\uff08 \u7b2c 13.2 \u8282 \uff09\u6765\u83b7\u53d6\u6808\u8ddf\u8e2a\u4fe1\u606f\uff08\u76f4\u5230 panic() \u65f6\u6240\u6709\u88ab\u8c03\u7528\u51fd\u6570\u7684\u5217\u8868\uff09\u3002 \u4f7f\u7528\u5173\u952e\u5b57 defer \u6765\u8ddf\u8e2a\u4ee3\u7801\u6267\u884c\u8fc7\u7a0b\uff08 \u7b2c 6.4 \u8282 \uff09\u3002","title":"3.3 \u8c03\u8bd5\u5668"},{"location":"03.3/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7f16\u8f91\u5668\u548c\u96c6\u6210\u5f00\u53d1\u73af\u5883 \u4e0b\u4e00\u8282\uff1a \u6784\u5efa\u5e76\u8fd0\u884c Go \u7a0b\u5e8f","title":"\u94fe\u63a5"},{"location":"03.4/","text":"3.4 \u6784\u5efa\u5e76\u8fd0\u884c Go \u7a0b\u5e8f \u00b6 \u5728\u5927\u591a\u6570 IDE \u4e2d\uff0c\u6bcf\u6b21\u6784\u5efa\u7a0b\u5e8f\u4e4b\u524d\u90fd\u4f1a\u81ea\u52a8\u8c03\u7528\u6e90\u7801\u683c\u5f0f\u5316\u5de5\u5177 gofmt \u5e76\u4fdd\u5b58\u683c\u5f0f\u5316\u540e\u7684\u6e90\u6587\u4ef6\u3002\u5982\u679c\u6784\u5efa\u6210\u529f\u5219\u4e0d\u4f1a\u8f93\u51fa\u4efb\u4f55\u4fe1\u606f\uff0c\u800c\u5f53\u53d1\u751f\u7f16\u8bd1\u65f6\u9519\u8bef\u65f6\uff0c\u5219\u4f1a\u6307\u660e\u6e90\u7801\u4e2d\u5177\u4f53\u7b2c\u51e0\u884c\u51fa\u73b0\u4e86\u4ec0\u4e48\u9519\u8bef\uff0c\u5982\uff1a a declared and not used \u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u53cc\u51fb IDE \u4e2d\u7684\u9519\u8bef\u4fe1\u606f\u76f4\u63a5\u8df3\u8f6c\u5230\u53d1\u751f\u9519\u8bef\u7684\u90a3\u4e00\u884c\u3002 \u5982\u679c\u7a0b\u5e8f\u6267\u884c\u4e00\u5207\u987a\u5229\u5e76\u6210\u529f\u9000\u51fa\u540e\uff0c\u5c06\u4f1a\u5728\u63a7\u5236\u53f0\u8f93\u51fa Program exited with code 0 \u3002 \u4ece Go 1 \u7248\u672c\u5f00\u59cb\uff0c\u4f7f\u7528 Go \u81ea\u5e26\u7684\u66f4\u52a0\u65b9\u4fbf\u7684\u5de5\u5177\u6765\u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\uff1a go build \u7f16\u8bd1\u81ea\u8eab\u5305\u548c\u4f9d\u8d56\u5305 go install \u7f16\u8bd1\u5e76\u5b89\u88c5\u81ea\u8eab\u5305\u548c\u4f9d\u8d56\u5305 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u8c03\u8bd5\u5668 \u4e0b\u4e00\u8282\uff1a \u683c\u5f0f\u5316\u4ee3\u7801","title":"3.4 \u6784\u5efa\u5e76\u8fd0\u884c Go \u7a0b\u5e8f"},{"location":"03.4/#34-go","text":"\u5728\u5927\u591a\u6570 IDE \u4e2d\uff0c\u6bcf\u6b21\u6784\u5efa\u7a0b\u5e8f\u4e4b\u524d\u90fd\u4f1a\u81ea\u52a8\u8c03\u7528\u6e90\u7801\u683c\u5f0f\u5316\u5de5\u5177 gofmt \u5e76\u4fdd\u5b58\u683c\u5f0f\u5316\u540e\u7684\u6e90\u6587\u4ef6\u3002\u5982\u679c\u6784\u5efa\u6210\u529f\u5219\u4e0d\u4f1a\u8f93\u51fa\u4efb\u4f55\u4fe1\u606f\uff0c\u800c\u5f53\u53d1\u751f\u7f16\u8bd1\u65f6\u9519\u8bef\u65f6\uff0c\u5219\u4f1a\u6307\u660e\u6e90\u7801\u4e2d\u5177\u4f53\u7b2c\u51e0\u884c\u51fa\u73b0\u4e86\u4ec0\u4e48\u9519\u8bef\uff0c\u5982\uff1a a declared and not used \u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u53cc\u51fb IDE \u4e2d\u7684\u9519\u8bef\u4fe1\u606f\u76f4\u63a5\u8df3\u8f6c\u5230\u53d1\u751f\u9519\u8bef\u7684\u90a3\u4e00\u884c\u3002 \u5982\u679c\u7a0b\u5e8f\u6267\u884c\u4e00\u5207\u987a\u5229\u5e76\u6210\u529f\u9000\u51fa\u540e\uff0c\u5c06\u4f1a\u5728\u63a7\u5236\u53f0\u8f93\u51fa Program exited with code 0 \u3002 \u4ece Go 1 \u7248\u672c\u5f00\u59cb\uff0c\u4f7f\u7528 Go \u81ea\u5e26\u7684\u66f4\u52a0\u65b9\u4fbf\u7684\u5de5\u5177\u6765\u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\uff1a go build \u7f16\u8bd1\u81ea\u8eab\u5305\u548c\u4f9d\u8d56\u5305 go install \u7f16\u8bd1\u5e76\u5b89\u88c5\u81ea\u8eab\u5305\u548c\u4f9d\u8d56\u5305","title":"3.4 \u6784\u5efa\u5e76\u8fd0\u884c Go \u7a0b\u5e8f"},{"location":"03.4/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u8c03\u8bd5\u5668 \u4e0b\u4e00\u8282\uff1a \u683c\u5f0f\u5316\u4ee3\u7801","title":"\u94fe\u63a5"},{"location":"03.5/","text":"3.5 \u683c\u5f0f\u5316\u4ee3\u7801 \u00b6 Go \u5f00\u53d1\u56e2\u961f\u4e0d\u60f3\u8981 Go \u8bed\u8a00\u50cf\u8bb8\u591a\u5176\u5b83\u8bed\u8a00\u90a3\u6837\u603b\u662f\u5728\u4e3a\u4ee3\u7801\u98ce\u683c\u800c\u5f15\u53d1\u65e0\u4f11\u6b62\u7684\u4e89\u8bba\uff0c\u6d6a\u8d39\u5927\u91cf\u5b9d\u8d35\u7684\u5f00\u53d1\u65f6\u95f4\uff0c\u56e0\u6b64\u4ed6\u4eec\u5236\u4f5c\u4e86\u4e00\u4e2a\u5de5\u5177\uff1a go fmt (gofmt)\u3002\u8fd9\u4e2a\u5de5\u5177\u53ef\u4ee5\u5c06\u4f60\u7684\u6e90\u4ee3\u7801\u683c\u5f0f\u5316\u6210\u7b26\u5408\u5b98\u65b9\u7edf\u4e00\u6807\u51c6\u7684\u98ce\u683c\uff0c\u5c5e\u4e8e\u8bed\u6cd5\u98ce\u683c\u5c42\u9762\u4e0a\u7684\u5c0f\u578b\u91cd\u6784\u3002\u9075\u5faa\u7edf\u4e00\u7684\u4ee3\u7801\u98ce\u683c\u662f Go \u5f00\u53d1\u4e2d\u65e0\u53ef\u64bc\u52a8\u7684\u94c1\u5f8b\uff0c\u56e0\u6b64\u4f60\u5fc5\u987b\u5728\u7f16\u8bd1\u6216\u63d0\u4ea4\u7248\u672c\u7ba1\u7406\u7cfb\u7edf\u4e4b\u524d\u4f7f\u7528 gofmt \u6765\u683c\u5f0f\u5316\u4f60\u7684\u4ee3\u7801\u3002 \u5c3d\u7ba1\u8fd9\u79cd\u505a\u6cd5\u4e5f\u5b58\u5728\u4e00\u4e9b\u4e89\u8bba\uff0c\u4f46\u4f7f\u7528 gofmt \u540e\u4f60\u4e0d\u518d\u9700\u8981\u81ea\u6210\u4e00\u5957\u4ee3\u7801\u98ce\u683c\u800c\u662f\u548c\u6240\u6709\u4eba\u4f7f\u7528\u76f8\u540c\u7684\u89c4\u5219\u3002\u8fd9\u4e0d\u4ec5\u589e\u5f3a\u4e86\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\uff0c\u800c\u4e14\u5728\u63a5\u624b\u5916\u90e8 Go \u9879\u76ee\u65f6\uff0c\u53ef\u4ee5\u66f4\u5feb\u5730\u4e86\u89e3\u5176\u4ee3\u7801\u7684\u542b\u4e49\u3002\u6b64\u5916\uff0c\u5927\u591a\u6570\u5f00\u53d1\u5de5\u5177\u4e5f\u90fd\u5185\u7f6e\u4e86\u8fd9\u4e00\u529f\u80fd\u3002 Go \u5bf9\u4e8e\u4ee3\u7801\u7684\u7f29\u8fdb\u5c42\u7ea7\u65b9\u9762\u4f7f\u7528 tab \u8fd8\u662f\u7a7a\u683c\u5e76\u6ca1\u6709\u5f3a\u5236\u89c4\u5b9a\uff0c\u4e00\u4e2a tab \u53ef\u4ee5\u4ee3\u8868 4 \u4e2a\u6216 8 \u4e2a\u7a7a\u683c\u3002\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c1 \u4e2a tab \u5e94\u8be5\u4ee3\u8868 4 \u4e2a\u7a7a\u683c\uff0c\u800c\u5728\u672c\u8eab\u7684\u4f8b\u5b50\u5f53\u4e2d\uff0c\u6bcf\u4e2a tab \u4ee3\u8868 8 \u4e2a\u7a7a\u683c\u3002\u81f3\u4e8e\u5f00\u53d1\u5de5\u5177\u65b9\u9762\uff0c\u4e00\u822c\u90fd\u662f\u76f4\u63a5\u4f7f\u7528 tab \u800c\u4e0d\u66ff\u6362\u6210\u7a7a\u683c\u3002 \u5728\u547d\u4ee4\u884c\u8f93\u5165 gofmt \u2013w program.go \u4f1a\u683c\u5f0f\u5316\u8be5\u6e90\u6587\u4ef6\u7684\u4ee3\u7801\u7136\u540e\u5c06\u683c\u5f0f\u5316\u540e\u7684\u4ee3\u7801\u8986\u76d6\u539f\u59cb\u5185\u5bb9\uff08\u5982\u679c\u4e0d\u52a0\u53c2\u6570 -w \u5219\u53ea\u4f1a\u6253\u5370\u683c\u5f0f\u5316\u540e\u7684\u7ed3\u679c\u800c\u4e0d\u91cd\u5199\u6587\u4ef6\uff09\uff1b gofmt -w *.go \u4f1a\u683c\u5f0f\u5316\u5e76\u91cd\u5199\u6240\u6709 Go \u6e90\u6587\u4ef6\uff1b gofmt map1 \u4f1a\u683c\u5f0f\u5316\u5e76\u91cd\u5199 map1 \u76ee\u5f55\u53ca\u5176\u5b50\u76ee\u5f55\u4e0b\u7684\u6240\u6709 Go \u6e90\u6587\u4ef6\u3002 gofmt \u4e5f\u53ef\u4ee5\u901a\u8fc7\u5728\u53c2\u6570 -r \u540e\u9762\u52a0\u5165\u7528\u53cc\u5f15\u53f7\u62ec\u8d77\u6765\u7684\u66ff\u6362\u89c4\u5219\u5b9e\u73b0\u4ee3\u7801\u7684\u7b80\u5355\u91cd\u6784\uff0c\u89c4\u5219\u7684\u683c\u5f0f\uff1a <\u539f\u59cb\u5185\u5bb9> -> <\u66ff\u6362\u5185\u5bb9> \u3002 \u5b9e\u4f8b\uff1a gofmt -r '(a) -> a' \u2013w *.go \u4e0a\u9762\u7684\u4ee3\u7801\u4f1a\u5c06\u6e90\u6587\u4ef6\u4e2d\u6ca1\u6709\u610f\u4e49\u7684\u62ec\u53f7\u53bb\u6389\u3002 gofmt -r 'a[n:len(a)] -> a[n:]' \u2013w *.go \u4e0a\u9762\u7684\u4ee3\u7801\u4f1a\u5c06\u6e90\u6587\u4ef6\u4e2d\u591a\u4f59\u7684 len(a) \u53bb\u6389\u3002\uff08 \u8bd1\u8005\u6ce8\uff1a\u4e86\u89e3\u5207\u7247 (slice) \u4e4b\u540e\u5c31\u660e\u767d\u8fd9\u4e3a\u4ec0\u4e48\u662f\u591a\u4f59\u7684\u4e86 \uff09 gofmt \u2013r 'A.Func1(a,b) -> A.Func2(b,a)' \u2013w *.go \u4e0a\u9762\u7684\u4ee3\u7801\u4f1a\u5c06\u6e90\u6587\u4ef6\u4e2d\u7b26\u5408\u6761\u4ef6\u7684\u51fd\u6570\u7684\u53c2\u6570\u8c03\u6362\u4f4d\u7f6e\u3002 \u5982\u679c\u60f3\u8981\u4e86\u89e3\u6709\u5173 gofmt \u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95ee\u8be5\u9875\u9762\uff1a http://golang.org/cmd/gofmt/ \u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6784\u5efa\u5e76\u8fd0\u884c Go \u7a0b\u5e8f \u4e0b\u4e00\u8282\uff1a \u751f\u6210\u4ee3\u7801\u6587\u6863","title":"3.5 \u683c\u5f0f\u5316\u4ee3\u7801"},{"location":"03.5/#35","text":"Go \u5f00\u53d1\u56e2\u961f\u4e0d\u60f3\u8981 Go \u8bed\u8a00\u50cf\u8bb8\u591a\u5176\u5b83\u8bed\u8a00\u90a3\u6837\u603b\u662f\u5728\u4e3a\u4ee3\u7801\u98ce\u683c\u800c\u5f15\u53d1\u65e0\u4f11\u6b62\u7684\u4e89\u8bba\uff0c\u6d6a\u8d39\u5927\u91cf\u5b9d\u8d35\u7684\u5f00\u53d1\u65f6\u95f4\uff0c\u56e0\u6b64\u4ed6\u4eec\u5236\u4f5c\u4e86\u4e00\u4e2a\u5de5\u5177\uff1a go fmt (gofmt)\u3002\u8fd9\u4e2a\u5de5\u5177\u53ef\u4ee5\u5c06\u4f60\u7684\u6e90\u4ee3\u7801\u683c\u5f0f\u5316\u6210\u7b26\u5408\u5b98\u65b9\u7edf\u4e00\u6807\u51c6\u7684\u98ce\u683c\uff0c\u5c5e\u4e8e\u8bed\u6cd5\u98ce\u683c\u5c42\u9762\u4e0a\u7684\u5c0f\u578b\u91cd\u6784\u3002\u9075\u5faa\u7edf\u4e00\u7684\u4ee3\u7801\u98ce\u683c\u662f Go \u5f00\u53d1\u4e2d\u65e0\u53ef\u64bc\u52a8\u7684\u94c1\u5f8b\uff0c\u56e0\u6b64\u4f60\u5fc5\u987b\u5728\u7f16\u8bd1\u6216\u63d0\u4ea4\u7248\u672c\u7ba1\u7406\u7cfb\u7edf\u4e4b\u524d\u4f7f\u7528 gofmt \u6765\u683c\u5f0f\u5316\u4f60\u7684\u4ee3\u7801\u3002 \u5c3d\u7ba1\u8fd9\u79cd\u505a\u6cd5\u4e5f\u5b58\u5728\u4e00\u4e9b\u4e89\u8bba\uff0c\u4f46\u4f7f\u7528 gofmt \u540e\u4f60\u4e0d\u518d\u9700\u8981\u81ea\u6210\u4e00\u5957\u4ee3\u7801\u98ce\u683c\u800c\u662f\u548c\u6240\u6709\u4eba\u4f7f\u7528\u76f8\u540c\u7684\u89c4\u5219\u3002\u8fd9\u4e0d\u4ec5\u589e\u5f3a\u4e86\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\uff0c\u800c\u4e14\u5728\u63a5\u624b\u5916\u90e8 Go \u9879\u76ee\u65f6\uff0c\u53ef\u4ee5\u66f4\u5feb\u5730\u4e86\u89e3\u5176\u4ee3\u7801\u7684\u542b\u4e49\u3002\u6b64\u5916\uff0c\u5927\u591a\u6570\u5f00\u53d1\u5de5\u5177\u4e5f\u90fd\u5185\u7f6e\u4e86\u8fd9\u4e00\u529f\u80fd\u3002 Go \u5bf9\u4e8e\u4ee3\u7801\u7684\u7f29\u8fdb\u5c42\u7ea7\u65b9\u9762\u4f7f\u7528 tab \u8fd8\u662f\u7a7a\u683c\u5e76\u6ca1\u6709\u5f3a\u5236\u89c4\u5b9a\uff0c\u4e00\u4e2a tab \u53ef\u4ee5\u4ee3\u8868 4 \u4e2a\u6216 8 \u4e2a\u7a7a\u683c\u3002\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c1 \u4e2a tab \u5e94\u8be5\u4ee3\u8868 4 \u4e2a\u7a7a\u683c\uff0c\u800c\u5728\u672c\u8eab\u7684\u4f8b\u5b50\u5f53\u4e2d\uff0c\u6bcf\u4e2a tab \u4ee3\u8868 8 \u4e2a\u7a7a\u683c\u3002\u81f3\u4e8e\u5f00\u53d1\u5de5\u5177\u65b9\u9762\uff0c\u4e00\u822c\u90fd\u662f\u76f4\u63a5\u4f7f\u7528 tab \u800c\u4e0d\u66ff\u6362\u6210\u7a7a\u683c\u3002 \u5728\u547d\u4ee4\u884c\u8f93\u5165 gofmt \u2013w program.go \u4f1a\u683c\u5f0f\u5316\u8be5\u6e90\u6587\u4ef6\u7684\u4ee3\u7801\u7136\u540e\u5c06\u683c\u5f0f\u5316\u540e\u7684\u4ee3\u7801\u8986\u76d6\u539f\u59cb\u5185\u5bb9\uff08\u5982\u679c\u4e0d\u52a0\u53c2\u6570 -w \u5219\u53ea\u4f1a\u6253\u5370\u683c\u5f0f\u5316\u540e\u7684\u7ed3\u679c\u800c\u4e0d\u91cd\u5199\u6587\u4ef6\uff09\uff1b gofmt -w *.go \u4f1a\u683c\u5f0f\u5316\u5e76\u91cd\u5199\u6240\u6709 Go \u6e90\u6587\u4ef6\uff1b gofmt map1 \u4f1a\u683c\u5f0f\u5316\u5e76\u91cd\u5199 map1 \u76ee\u5f55\u53ca\u5176\u5b50\u76ee\u5f55\u4e0b\u7684\u6240\u6709 Go \u6e90\u6587\u4ef6\u3002 gofmt \u4e5f\u53ef\u4ee5\u901a\u8fc7\u5728\u53c2\u6570 -r \u540e\u9762\u52a0\u5165\u7528\u53cc\u5f15\u53f7\u62ec\u8d77\u6765\u7684\u66ff\u6362\u89c4\u5219\u5b9e\u73b0\u4ee3\u7801\u7684\u7b80\u5355\u91cd\u6784\uff0c\u89c4\u5219\u7684\u683c\u5f0f\uff1a <\u539f\u59cb\u5185\u5bb9> -> <\u66ff\u6362\u5185\u5bb9> \u3002 \u5b9e\u4f8b\uff1a gofmt -r '(a) -> a' \u2013w *.go \u4e0a\u9762\u7684\u4ee3\u7801\u4f1a\u5c06\u6e90\u6587\u4ef6\u4e2d\u6ca1\u6709\u610f\u4e49\u7684\u62ec\u53f7\u53bb\u6389\u3002 gofmt -r 'a[n:len(a)] -> a[n:]' \u2013w *.go \u4e0a\u9762\u7684\u4ee3\u7801\u4f1a\u5c06\u6e90\u6587\u4ef6\u4e2d\u591a\u4f59\u7684 len(a) \u53bb\u6389\u3002\uff08 \u8bd1\u8005\u6ce8\uff1a\u4e86\u89e3\u5207\u7247 (slice) \u4e4b\u540e\u5c31\u660e\u767d\u8fd9\u4e3a\u4ec0\u4e48\u662f\u591a\u4f59\u7684\u4e86 \uff09 gofmt \u2013r 'A.Func1(a,b) -> A.Func2(b,a)' \u2013w *.go \u4e0a\u9762\u7684\u4ee3\u7801\u4f1a\u5c06\u6e90\u6587\u4ef6\u4e2d\u7b26\u5408\u6761\u4ef6\u7684\u51fd\u6570\u7684\u53c2\u6570\u8c03\u6362\u4f4d\u7f6e\u3002 \u5982\u679c\u60f3\u8981\u4e86\u89e3\u6709\u5173 gofmt \u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95ee\u8be5\u9875\u9762\uff1a http://golang.org/cmd/gofmt/ \u3002","title":"3.5 \u683c\u5f0f\u5316\u4ee3\u7801"},{"location":"03.5/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6784\u5efa\u5e76\u8fd0\u884c Go \u7a0b\u5e8f \u4e0b\u4e00\u8282\uff1a \u751f\u6210\u4ee3\u7801\u6587\u6863","title":"\u94fe\u63a5"},{"location":"03.6/","text":"3.6 \u751f\u6210\u4ee3\u7801\u6587\u6863 \u00b6 godoc \u5de5\u5177\u4f1a\u4ece Go \u7a0b\u5e8f\u548c\u5305\u6587\u4ef6\u4e2d\u63d0\u53d6\u9876\u7ea7\u58f0\u660e\u7684\u9996\u884c\u6ce8\u91ca\u4ee5\u53ca\u6bcf\u4e2a\u5bf9\u8c61\u7684\u76f8\u5173\u6ce8\u91ca\uff0c\u5e76\u751f\u6210\u76f8\u5173\u6587\u6863\u3002 \u5b83\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u63d0\u4f9b\u5728\u7ebf\u6587\u6863\u6d4f\u89c8\u7684 web \u670d\u52a1\u5668\uff0c http://golang.org \u5c31\u662f\u901a\u8fc7\u8fd9\u79cd\u5f62\u5f0f\u5b9e\u73b0\u7684\u3002 \u4e00\u822c\u7528\u6cd5 go doc package \u83b7\u53d6\u5305\u7684\u6587\u6863\u6ce8\u91ca\uff0c\u4f8b\u5982\uff1a go doc fmt \u4f1a\u663e\u793a\u4f7f\u7528 godoc \u751f\u6210\u7684 fmt \u5305\u7684\u6587\u6863\u6ce8\u91ca\u3002 go doc package/subpackage \u83b7\u53d6\u5b50\u5305\u7684\u6587\u6863\u6ce8\u91ca\uff0c\u4f8b\u5982\uff1a go doc container/list \u3002 go doc package function \u83b7\u53d6\u67d0\u4e2a\u51fd\u6570\u5728\u67d0\u4e2a\u5305\u4e2d\u7684\u6587\u6863\u6ce8\u91ca\uff0c\u4f8b\u5982\uff1a go doc fmt Printf \u4f1a\u663e\u793a\u6709\u5173 fmt.Printf() \u7684\u4f7f\u7528\u8bf4\u660e\u3002 \u8fd9\u4e2a\u5de5\u5177\u53ea\u80fd\u83b7\u53d6\u5728 Go \u5b89\u88c5\u76ee\u5f55\u4e0b ../go/src \u4e2d\u7684\u6ce8\u91ca\u5185\u5bb9\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u672c\u5730\u6587\u6863\u6d4f\u89c8 web \u670d\u52a1\u5668\u3002\u5728\u547d\u4ee4\u884c\u8f93\u5165 godoc -http=:6060 \uff0c\u7136\u540e\u4f7f\u7528\u6d4f\u89c8\u5668\u6253\u5f00 http://localhost:6060 \u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u770b\u5230\u672c\u5730\u6587\u6863\u6d4f\u89c8\u670d\u52a1\u5668\u63d0\u4f9b\u7684\u9875\u9762\u3002 godoc \u4e5f\u53ef\u4ee5\u7528\u4e8e\u751f\u6210\u975e\u6807\u51c6\u5e93\u7684 Go \u6e90\u7801\u6587\u4ef6\u7684\u6587\u6863\u6ce8\u91ca\uff08 \u7b2c 9.6 \u7ae0 \uff09\u3002 \u5982\u679c\u60f3\u8981\u83b7\u53d6\u66f4\u591a\u6709\u5173 godoc \u7684\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95ee\u8be5\u9875\u9762\uff1a http://golang.org/cmd/godoc/ \uff08\u5728\u7ebf\u7248\u7684\u7b2c\u4e09\u65b9\u5305 godoc \u53ef\u4ee5\u4f7f\u7528 Go Walker \uff09\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u683c\u5f0f\u5316\u4ee3\u7801 \u4e0b\u4e00\u8282\uff1a \u5176\u5b83\u5de5\u5177","title":"3.6 \u751f\u6210\u4ee3\u7801\u6587\u6863"},{"location":"03.6/#36","text":"godoc \u5de5\u5177\u4f1a\u4ece Go \u7a0b\u5e8f\u548c\u5305\u6587\u4ef6\u4e2d\u63d0\u53d6\u9876\u7ea7\u58f0\u660e\u7684\u9996\u884c\u6ce8\u91ca\u4ee5\u53ca\u6bcf\u4e2a\u5bf9\u8c61\u7684\u76f8\u5173\u6ce8\u91ca\uff0c\u5e76\u751f\u6210\u76f8\u5173\u6587\u6863\u3002 \u5b83\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u63d0\u4f9b\u5728\u7ebf\u6587\u6863\u6d4f\u89c8\u7684 web \u670d\u52a1\u5668\uff0c http://golang.org \u5c31\u662f\u901a\u8fc7\u8fd9\u79cd\u5f62\u5f0f\u5b9e\u73b0\u7684\u3002 \u4e00\u822c\u7528\u6cd5 go doc package \u83b7\u53d6\u5305\u7684\u6587\u6863\u6ce8\u91ca\uff0c\u4f8b\u5982\uff1a go doc fmt \u4f1a\u663e\u793a\u4f7f\u7528 godoc \u751f\u6210\u7684 fmt \u5305\u7684\u6587\u6863\u6ce8\u91ca\u3002 go doc package/subpackage \u83b7\u53d6\u5b50\u5305\u7684\u6587\u6863\u6ce8\u91ca\uff0c\u4f8b\u5982\uff1a go doc container/list \u3002 go doc package function \u83b7\u53d6\u67d0\u4e2a\u51fd\u6570\u5728\u67d0\u4e2a\u5305\u4e2d\u7684\u6587\u6863\u6ce8\u91ca\uff0c\u4f8b\u5982\uff1a go doc fmt Printf \u4f1a\u663e\u793a\u6709\u5173 fmt.Printf() \u7684\u4f7f\u7528\u8bf4\u660e\u3002 \u8fd9\u4e2a\u5de5\u5177\u53ea\u80fd\u83b7\u53d6\u5728 Go \u5b89\u88c5\u76ee\u5f55\u4e0b ../go/src \u4e2d\u7684\u6ce8\u91ca\u5185\u5bb9\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u672c\u5730\u6587\u6863\u6d4f\u89c8 web \u670d\u52a1\u5668\u3002\u5728\u547d\u4ee4\u884c\u8f93\u5165 godoc -http=:6060 \uff0c\u7136\u540e\u4f7f\u7528\u6d4f\u89c8\u5668\u6253\u5f00 http://localhost:6060 \u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u770b\u5230\u672c\u5730\u6587\u6863\u6d4f\u89c8\u670d\u52a1\u5668\u63d0\u4f9b\u7684\u9875\u9762\u3002 godoc \u4e5f\u53ef\u4ee5\u7528\u4e8e\u751f\u6210\u975e\u6807\u51c6\u5e93\u7684 Go \u6e90\u7801\u6587\u4ef6\u7684\u6587\u6863\u6ce8\u91ca\uff08 \u7b2c 9.6 \u7ae0 \uff09\u3002 \u5982\u679c\u60f3\u8981\u83b7\u53d6\u66f4\u591a\u6709\u5173 godoc \u7684\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95ee\u8be5\u9875\u9762\uff1a http://golang.org/cmd/godoc/ \uff08\u5728\u7ebf\u7248\u7684\u7b2c\u4e09\u65b9\u5305 godoc \u53ef\u4ee5\u4f7f\u7528 Go Walker \uff09\u3002","title":"3.6 \u751f\u6210\u4ee3\u7801\u6587\u6863"},{"location":"03.6/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u683c\u5f0f\u5316\u4ee3\u7801 \u4e0b\u4e00\u8282\uff1a \u5176\u5b83\u5de5\u5177","title":"\u94fe\u63a5"},{"location":"03.7/","text":"3.7 \u5176\u5b83\u5de5\u5177 \u00b6 Go \u81ea\u5e26\u7684\u5de5\u5177\u96c6\u4e3b\u8981\u4f7f\u7528\u811a\u672c\u548c Go \u8bed\u8a00\u81ea\u8eab\u7f16\u5199\u7684\uff0c\u76ee\u524d\u7248\u672c\u7684 Go \u5b9e\u73b0\u4e86\u4ee5\u4e0b\u4e09\u4e2a\u5de5\u5177\uff1a go install \u662f\u5b89\u88c5 Go \u5305\u7684\u5de5\u5177\uff0c\u7c7b\u4f3c Ruby \u4e2d\u7684 rubygems\u3002\u4e3b\u8981\u7528\u4e8e\u5b89\u88c5\u975e\u6807\u51c6\u5e93\u7684\u5305\u6587\u4ef6\uff0c\u5c06\u6e90\u4ee3\u7801\u7f16\u8bd1\u6210\u5bf9\u8c61\u6587\u4ef6\u3002 go fix \u7528\u4e8e\u5c06\u4f60\u7684 Go \u4ee3\u7801\u4ece\u65e7\u7684\u53d1\u884c\u7248\u8fc1\u79fb\u5230\u6700\u65b0\u7684\u53d1\u884c\u7248\uff0c\u5b83\u4e3b\u8981\u8d1f\u8d23\u7b80\u5355\u7684\u3001\u91cd\u590d\u7684\u3001\u67af\u71e5\u65e0\u5473\u7684\u4fee\u6539\u5de5\u4f5c\uff0c\u5982\u679c\u50cf API \u7b49\u590d\u6742\u7684\u51fd\u6570\u4fee\u6539\uff0c\u5de5\u5177\u5219\u4f1a\u7ed9\u51fa\u6587\u4ef6\u540d\u548c\u4ee3\u7801\u884c\u6570\u7684\u63d0\u793a\u4ee5\u4fbf\u8ba9\u5f00\u53d1\u4eba\u5458\u5feb\u901f\u5b9a\u4f4d\u5e76\u5347\u7ea7\u4ee3\u7801\u3002Go \u5f00\u53d1\u56e2\u961f\u4e00\u822c\u4e5f\u4f7f\u7528\u8fd9\u4e2a\u5de5\u5177\u5347\u7ea7 Go \u5185\u7f6e\u5de5\u5177\u4ee5\u53ca \u8c37\u6b4c\u5185\u90e8\u9879\u76ee\u7684\u4ee3\u7801\u3002 go fix \u4e4b\u6240\u4ee5\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\u662f\u56e0\u4e3a Go \u5728\u6807\u51c6\u5e93\u5c31\u63d0\u4f9b\u751f\u6210\u62bd\u8c61\u8bed\u6cd5\u6811\u548c\u901a\u8fc7\u62bd\u8c61\u8bed\u6cd5\u6811\u5bf9\u4ee3\u7801\u8fdb\u884c\u8fd8\u539f\u7684\u529f\u80fd\u3002\u8be5\u5de5\u5177\u4f1a\u5c1d\u8bd5\u66f4\u65b0\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u6240\u6709 Go \u6e90\u6587\u4ef6\uff0c\u5e76\u5728\u5b8c\u6210\u4ee3\u7801\u66f4\u65b0\u540e\u5728\u63a7\u5236\u53f0\u8f93\u51fa\u76f8\u5173\u7684\u6587\u4ef6\u540d\u79f0\u3002 go test \u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684\u5355\u5143\u6d4b\u8bd5\u6846\u67b6\uff08 \u7b2c 13 \u7ae0 \uff09\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u751f\u6210\u4ee3\u7801\u6587\u6863 \u4e0b\u4e00\u8282\uff1a Go \u6027\u80fd\u8bf4\u660e","title":"3.7 \u5176\u5b83\u5de5\u5177"},{"location":"03.7/#37","text":"Go \u81ea\u5e26\u7684\u5de5\u5177\u96c6\u4e3b\u8981\u4f7f\u7528\u811a\u672c\u548c Go \u8bed\u8a00\u81ea\u8eab\u7f16\u5199\u7684\uff0c\u76ee\u524d\u7248\u672c\u7684 Go \u5b9e\u73b0\u4e86\u4ee5\u4e0b\u4e09\u4e2a\u5de5\u5177\uff1a go install \u662f\u5b89\u88c5 Go \u5305\u7684\u5de5\u5177\uff0c\u7c7b\u4f3c Ruby \u4e2d\u7684 rubygems\u3002\u4e3b\u8981\u7528\u4e8e\u5b89\u88c5\u975e\u6807\u51c6\u5e93\u7684\u5305\u6587\u4ef6\uff0c\u5c06\u6e90\u4ee3\u7801\u7f16\u8bd1\u6210\u5bf9\u8c61\u6587\u4ef6\u3002 go fix \u7528\u4e8e\u5c06\u4f60\u7684 Go \u4ee3\u7801\u4ece\u65e7\u7684\u53d1\u884c\u7248\u8fc1\u79fb\u5230\u6700\u65b0\u7684\u53d1\u884c\u7248\uff0c\u5b83\u4e3b\u8981\u8d1f\u8d23\u7b80\u5355\u7684\u3001\u91cd\u590d\u7684\u3001\u67af\u71e5\u65e0\u5473\u7684\u4fee\u6539\u5de5\u4f5c\uff0c\u5982\u679c\u50cf API \u7b49\u590d\u6742\u7684\u51fd\u6570\u4fee\u6539\uff0c\u5de5\u5177\u5219\u4f1a\u7ed9\u51fa\u6587\u4ef6\u540d\u548c\u4ee3\u7801\u884c\u6570\u7684\u63d0\u793a\u4ee5\u4fbf\u8ba9\u5f00\u53d1\u4eba\u5458\u5feb\u901f\u5b9a\u4f4d\u5e76\u5347\u7ea7\u4ee3\u7801\u3002Go \u5f00\u53d1\u56e2\u961f\u4e00\u822c\u4e5f\u4f7f\u7528\u8fd9\u4e2a\u5de5\u5177\u5347\u7ea7 Go \u5185\u7f6e\u5de5\u5177\u4ee5\u53ca \u8c37\u6b4c\u5185\u90e8\u9879\u76ee\u7684\u4ee3\u7801\u3002 go fix \u4e4b\u6240\u4ee5\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\u662f\u56e0\u4e3a Go \u5728\u6807\u51c6\u5e93\u5c31\u63d0\u4f9b\u751f\u6210\u62bd\u8c61\u8bed\u6cd5\u6811\u548c\u901a\u8fc7\u62bd\u8c61\u8bed\u6cd5\u6811\u5bf9\u4ee3\u7801\u8fdb\u884c\u8fd8\u539f\u7684\u529f\u80fd\u3002\u8be5\u5de5\u5177\u4f1a\u5c1d\u8bd5\u66f4\u65b0\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u6240\u6709 Go \u6e90\u6587\u4ef6\uff0c\u5e76\u5728\u5b8c\u6210\u4ee3\u7801\u66f4\u65b0\u540e\u5728\u63a7\u5236\u53f0\u8f93\u51fa\u76f8\u5173\u7684\u6587\u4ef6\u540d\u79f0\u3002 go test \u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684\u5355\u5143\u6d4b\u8bd5\u6846\u67b6\uff08 \u7b2c 13 \u7ae0 \uff09\u3002","title":"3.7 \u5176\u5b83\u5de5\u5177"},{"location":"03.7/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u751f\u6210\u4ee3\u7801\u6587\u6863 \u4e0b\u4e00\u8282\uff1a Go \u6027\u80fd\u8bf4\u660e","title":"\u94fe\u63a5"},{"location":"03.8/","text":"3.8 Go \u6027\u80fd\u8bf4\u660e \u00b6 \u6839\u636e Go \u5f00\u53d1\u56e2\u961f\u548c\u57fa\u672c\u7684\u7b97\u6cd5\u6d4b\u8bd5\uff0cGo \u8bed\u8a00\u4e0e C \u8bed\u8a00\u7684\u6027\u80fd\u5dee\u8ddd\u5927\u6982\u5728 10%~20% \u4e4b\u95f4\uff08 \u8bd1\u8005\u6ce8\uff1a\u7531\u4e8e\u51fa\u7248\u65f6\u95f4\u9650\u5236\uff0c\u8be5\u6570\u636e\u5e94\u4e3a 2013 \u5e74 3 \u6708 28 \u65e5\u4e4b\u524d\u4ea7\u751f \uff09\u3002\u867d\u7136\u6ca1\u6709\u5b98\u65b9\u7684\u6027\u80fd\u6807\u51c6\uff0c\u4f46\u662f\u4e0e\u5176\u5b83\u5404\u4e2a\u8bed\u8a00\u76f8\u6bd4\u5df2\u7ecf\u62e5\u6709\u975e\u5e38\u51fa\u8272\u7684\u8868\u73b0\u3002 \u5982\u679c\u8bf4 Go \u8bed\u8a00\u7684\u6267\u884c\u6548\u7387\u5927\u7ea6\u6bd4 C++ \u6162 20% \u4e5f\u8bb8\u66f4\u6709\u5b9e\u9645\u610f\u4e49\u3002\u4fdd\u5b88\u4f30\u8ba1\u5728\u76f8\u540c\u7684\u73af\u5883\u548c\u6267\u884c\u76ee\u6807\u7684\u60c5\u51b5\u4e0b\uff0cGo \u7a0b\u5e8f\u6bd4 Java \u6216 Scala \u5e94\u7528\u7a0b\u5e8f\u8981\u5feb\u4e0a 2 \u500d\uff0c\u5e76\u6bd4\u8fd9\u4e24\u95e8\u8bed\u8a00\u5360\u7528\u7684\u5185\u5b58\u964d\u4f4e\u4e86 70% \u3002\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\u8fd9\u79cd\u6bd4\u8f83\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u800c\u50cf\u8c37\u6b4c\u8fd9\u6837\u62e5\u6709\u6210\u5343\u4e0a\u4e07\u53f0\u670d\u52a1\u5668\u7684\u516c\u53f8\u90fd\u629b\u5f03 C++ \u800c\u5f00\u59cb\u5c06 Go \u7528\u4e8e\u751f\u4ea7\u73af\u5883\u624d\u8db3\u591f\u8bf4\u660e\u5b83\u672c\u8eab\u6240\u5177\u6709\u7684\u4f18\u52bf\u3002 \u65f6\u4e0b\u6d41\u884c\u7684\u8bed\u8a00\u5927\u90fd\u662f\u8fd0\u884c\u5728\u865a\u62df\u673a\u4e0a\uff0c\u5982\uff1aJava \u548c Scala \u4f7f\u7528\u7684 JVM\uff0cC# \u548c VB.NET \u4f7f\u7528\u7684 .NET CLR\u3002\u5c3d\u7ba1\u865a\u62df\u673a\u7684\u6027\u80fd\u5df2\u7ecf\u6709\u4e86\u5f88\u5927\u7684\u63d0\u5347\uff0c\u4f46\u4efb\u4f55\u4f7f\u7528 JIT \u7f16\u8bd1\u5668\u548c\u811a\u672c\u8bed\u8a00\u89e3\u91ca\u5668\u7684\u7f16\u7a0b\u8bed\u8a00\uff08Ruby\u3001Python\u3001Perl \u548c JavaScript\uff09\u5728 C \u548c C++ \u7684\u7edd\u5bf9\u4f18\u52bf\u4e0b\u751a\u81f3\u90fd\u65e0\u6cd5\u5728\u6027\u80fd\u4e0a\u671b\u5176\u9879\u80cc\u3002 \u5982\u679c\u8bf4 Go \u6bd4 C++ \u8981\u6162 20%\uff0c\u90a3\u4e48 Go \u5c31\u8981\u6bd4\u4efb\u4f55\u975e\u9759\u6001\u548c\u7f16\u8bd1\u578b\u8bed\u8a00\u5feb 2 \u5230 10 \u500d\uff0c\u5e76\u4e14\u80fd\u591f\u66f4\u52a0\u9ad8\u6548\u5730\u4f7f\u7528\u5185\u5b58\u3002 \u5176\u5b9e\u6bd4\u8f83\u591a\u95e8\u8bed\u8a00\u4e4b\u95f4\u7684\u6027\u80fd\u662f\u4e00\u79cd\u975e\u5e38\u7325\u7410\u7684\u884c\u4e3a\uff0c\u56e0\u4e3a\u4efb\u4f55\u4e00\u79cd\u8bed\u8a00\u90fd\u6709\u5176\u6240\u64c5\u957f\u548c\u8584\u5f31\u7684\u65b9\u9762\u3002\u4f8b\u5982\u5728\u5904\u7406\u6587\u672c\u65b9\u9762\uff0c\u90a3\u4e9b\u53ea\u5904\u7406\u7eaf\u5b57\u8282\u7684\u8bed\u8a00\u663e\u7136\u8981\u6bd4\u5904\u7406 Unicode \u8fd9\u79cd\u66f4\u4e3a\u590d\u6742\u7f16\u7801\u7684\u8bed\u8a00\u8981\u51fa\u8272\u7684\u591a\u3002\u6709\u4e9b\u4eba\u53ef\u80fd\u8ba4\u4e3a\u4f7f\u7528\u4e24\u79cd\u4e0d\u540c\u7684\u8bed\u8a00\u5b9e\u73b0\u540c\u4e00\u4e2a\u76ee\u6807\u80fd\u591f\u5f97\u51fa\u6b63\u786e\u7684\u7ed3\u8bba\uff0c\u4f46\u662f\u5f88\u591a\u65f6\u5019\u6d4b\u8bd5\u8005\u53ef\u80fd\u5bf9\u4e00\u95e8\u8bed\u8a00\u975e\u5e38\u4e86\u89e3\u800c\u5bf9\u53e6\u4e00\u95e8\u8bed\u8a00\u53ea\u662f\u5927\u6982\u660e\u767d\uff0c\u6d4b\u8bd5\u8005\u5bf9\u7a0b\u5e8f\u7f16\u5199\u7684\u624b\u6cd5\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e5f\u4f1a\u5f71\u54cd\u7ed3\u679c\u7684\u516c\u5e73\u6027\uff0c\u56e0\u6b64\u6d4b\u8bd5\u7a0b\u5e8f\u5e94\u8be5\u5206\u522b\u7531\u5404\u81ea\u8bed\u8a00\u7684\u64c5\u957f\u8005\u6765\u7f16\u5199\uff0c\u8fd9\u6837\u624d\u80fd\u5f97\u5230\u5177\u6709\u53ef\u6bd4\u6027\u7684\u7ed3\u679c\u3002\u53e6\u5916\uff0c\u50cf\u5728\u7edf\u8ba1\u5b66\u65b9\u9762\uff0c\u4eba\u4eec\u5f88\u96be\u907f\u514d\u4eba\u4e3a\u56e0\u7d20\u5bf9\u7ed3\u679c\u7684\u5f71\u54cd\uff0c\u6240\u4ee5\u8fd9\u5728\u4e25\u683c\u610f\u4e49\u4e0a\u5e76\u4e0d\u662f\u79d1\u5b66\u3002\u8fd8\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6d4b\u8bd5\u7ed3\u679c\u7684\u53ef\u6bd4\u6027\u8fd8\u8981\u6839\u636e\u6d4b\u8bd5\u76ee\u6807\u6765\u533a\u522b\uff0c\u4f8b\u5982\u5f88\u591a\u53d1\u5c55\u5341\u591a\u5e74\u7684\u8bed\u8a00\u5df2\u7ecf\u9488\u5bf9\u5404\u7c7b\u95ee\u9898\u62e5\u6709\u975e\u5e38\u6210\u719f\u7684\u7c7b\u5e93\uff0c\u800c\u4f5c\u4e3a\u4e00\u95e8\u65b0\u751f\u8bed\u8a00\u7684 Go \u8bed\u8a00\uff0c\u5e76\u6ca1\u6709\u8db3\u591f\u7684\u65f6\u95f4\u6765\u63a8\u5bfc\u5404\u7c7b\u95ee\u9898\u7684\u6700\u4f73\u89e3\u51b3\u65b9\u6848\u3002\u5982\u679c\u4f60\u60f3\u83b7\u53d6\u66f4\u591a\u6709\u5173\u6027\u80fd\u7684\u8d44\u6599\uff0c\u8bf7\u8bbf\u95ee Computer Language Benchmark Game \uff08\u8be6\u89c1\u5f15\u7528 27\uff09\u3002 \u8fd9\u91cc\u6709\u4e00\u4e9b\u8bc4\u6d4b\u7ed3\u679c\uff1a \u6bd4\u8f83 Go \u548c Python \u5728\u7b80\u5355\u7684 web \u670d\u52a1\u5668\u65b9\u9762\u7684\u6027\u80fd\uff0c\u5355\u4f4d\u4e3a\u4f20\u8f93\u91cf\u6bcf\u79d2\uff1a \u539f\u751f\u7684 Go http \u5305\u8981\u6bd4 web.py \u5feb 7 \u81f3 8 \u500d\uff0c\u5982\u679c\u4f7f\u7528 web.go \u6846\u67b6\u5219\u7a0d\u5fae\u5dee\u70b9\uff0c\u6bd4 web.py \u5feb 6 \u81f3 7 \u500d\u3002\u5728 Python \u4e2d\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684 tornado \u5f02\u6b65\u670d\u52a1\u5668\u548c\u6846\u67b6\u5728 web \u73af\u5883\u4e0b\u8981\u6bd4 web.py \u5feb\u5f88\u591a\uff0cGo \u5927\u6982\u53ea\u6bd4\u5b83\u5feb 1.2 \u81f3 1.5 \u500d\uff08\u8be6\u89c1\u5f15\u7528 26\uff09\u3002 Go \u548c Python \u5728\u4e00\u822c\u5f00\u53d1\u7684\u5e73\u5747\u6c34\u5e73\u6d4b\u8bd5\u4e2d\uff0cGo \u8981\u6bd4 Python 3 \u5feb 25 \u500d\u5de6\u53f3\uff0c\u5c11\u5360\u7528\u4e09\u5206\u4e4b\u4e8c\u7684\u5185\u5b58\uff0c\u4f46\u6bd4 Python \u5927\u6982\u591a\u5199\u4e00\u500d\u7684\u4ee3\u7801\uff08\u8be6\u89c1\u5f15\u7528 27\uff09\u3002 \u6839\u636e Robert Hundt\uff082011 \u5e74 6 \u6708\uff0c\u8be6\u89c1\u5f15\u7528 28\uff09\u7684\u6587\u7ae0\u5bf9 C++\u3001Java\u3001Go \u548c Scala\uff0c\u4ee5\u53ca Go \u5f00\u53d1\u56e2\u961f\u7684\u53cd\u5e94\uff08\u8be6\u89c1\u5f15\u7528 29\uff09\uff0c\u53ef\u4ee5\u5f97\u51fa\u4ee5\u4e0b\u7ed3\u8bba\uff1a Go \u548c Scala \u4e4b\u95f4\u5177\u6709\u66f4\u591a\u7684\u53ef\u6bd4\u6027\uff08\u90fd\u4f7f\u7528\u66f4\u5c11\u7684\u4ee3\u7801\uff09\uff0c\u800c C++ \u548c Java \u90fd\u4f7f\u7528\u975e\u5e38\u5197\u957f\u7684\u4ee3\u7801\u3002 Go \u7684\u7f16\u8bd1\u901f\u5ea6\u8981\u6bd4\u7edd\u5927\u591a\u6570\u8bed\u8a00\u90fd\u8981\u5feb\uff0c\u6bd4 Java \u548c C++ \u5feb 5 \u81f3 6 \u500d\uff0c\u6bd4 Scala \u5feb 10 \u500d\u3002 Go \u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u4f53\u79ef\u662f\u6700\u5927\u7684\uff08\u6bcf\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u90fd\u5305\u542b runtime\uff09\u3002 \u5728\u6700\u7406\u60f3\u7684\u60c5\u51b5\u4e0b\uff0cGo \u80fd\u591f\u548c C++ \u4e00\u6837\u5feb\uff0c\u6bd4 Scala \u5feb 2 \u81f3 3 \u500d\uff0c\u6bd4 Java \u5feb 5 \u81f3 10 \u500d\u3002 Go \u5728\u5185\u5b58\u7ba1\u7406\u65b9\u9762\u4e5f\u53ef\u4ee5\u548c C++ \u76f8\u5ab2\u7f8e\uff0c\u51e0\u4e4e\u53ea\u9700\u8981 Scala \u6240\u4f7f\u7528\u7684\u4e00\u534a\uff0c\u662fJava\u7684\u4e94\u5206\u4e4b\u4e00\u5de6\u53f3\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5176\u5b83\u5de5\u5177 \u4e0b\u4e00\u8282\uff1a \u4e0e\u5176\u5b83\u8bed\u8a00\u8fdb\u884c\u4ea4\u4e92","title":"3.8 Go \u6027\u80fd\u8bf4\u660e"},{"location":"03.8/#38-go","text":"\u6839\u636e Go \u5f00\u53d1\u56e2\u961f\u548c\u57fa\u672c\u7684\u7b97\u6cd5\u6d4b\u8bd5\uff0cGo \u8bed\u8a00\u4e0e C \u8bed\u8a00\u7684\u6027\u80fd\u5dee\u8ddd\u5927\u6982\u5728 10%~20% \u4e4b\u95f4\uff08 \u8bd1\u8005\u6ce8\uff1a\u7531\u4e8e\u51fa\u7248\u65f6\u95f4\u9650\u5236\uff0c\u8be5\u6570\u636e\u5e94\u4e3a 2013 \u5e74 3 \u6708 28 \u65e5\u4e4b\u524d\u4ea7\u751f \uff09\u3002\u867d\u7136\u6ca1\u6709\u5b98\u65b9\u7684\u6027\u80fd\u6807\u51c6\uff0c\u4f46\u662f\u4e0e\u5176\u5b83\u5404\u4e2a\u8bed\u8a00\u76f8\u6bd4\u5df2\u7ecf\u62e5\u6709\u975e\u5e38\u51fa\u8272\u7684\u8868\u73b0\u3002 \u5982\u679c\u8bf4 Go \u8bed\u8a00\u7684\u6267\u884c\u6548\u7387\u5927\u7ea6\u6bd4 C++ \u6162 20% \u4e5f\u8bb8\u66f4\u6709\u5b9e\u9645\u610f\u4e49\u3002\u4fdd\u5b88\u4f30\u8ba1\u5728\u76f8\u540c\u7684\u73af\u5883\u548c\u6267\u884c\u76ee\u6807\u7684\u60c5\u51b5\u4e0b\uff0cGo \u7a0b\u5e8f\u6bd4 Java \u6216 Scala \u5e94\u7528\u7a0b\u5e8f\u8981\u5feb\u4e0a 2 \u500d\uff0c\u5e76\u6bd4\u8fd9\u4e24\u95e8\u8bed\u8a00\u5360\u7528\u7684\u5185\u5b58\u964d\u4f4e\u4e86 70% \u3002\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\u8fd9\u79cd\u6bd4\u8f83\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u800c\u50cf\u8c37\u6b4c\u8fd9\u6837\u62e5\u6709\u6210\u5343\u4e0a\u4e07\u53f0\u670d\u52a1\u5668\u7684\u516c\u53f8\u90fd\u629b\u5f03 C++ \u800c\u5f00\u59cb\u5c06 Go \u7528\u4e8e\u751f\u4ea7\u73af\u5883\u624d\u8db3\u591f\u8bf4\u660e\u5b83\u672c\u8eab\u6240\u5177\u6709\u7684\u4f18\u52bf\u3002 \u65f6\u4e0b\u6d41\u884c\u7684\u8bed\u8a00\u5927\u90fd\u662f\u8fd0\u884c\u5728\u865a\u62df\u673a\u4e0a\uff0c\u5982\uff1aJava \u548c Scala \u4f7f\u7528\u7684 JVM\uff0cC# \u548c VB.NET \u4f7f\u7528\u7684 .NET CLR\u3002\u5c3d\u7ba1\u865a\u62df\u673a\u7684\u6027\u80fd\u5df2\u7ecf\u6709\u4e86\u5f88\u5927\u7684\u63d0\u5347\uff0c\u4f46\u4efb\u4f55\u4f7f\u7528 JIT \u7f16\u8bd1\u5668\u548c\u811a\u672c\u8bed\u8a00\u89e3\u91ca\u5668\u7684\u7f16\u7a0b\u8bed\u8a00\uff08Ruby\u3001Python\u3001Perl \u548c JavaScript\uff09\u5728 C \u548c C++ \u7684\u7edd\u5bf9\u4f18\u52bf\u4e0b\u751a\u81f3\u90fd\u65e0\u6cd5\u5728\u6027\u80fd\u4e0a\u671b\u5176\u9879\u80cc\u3002 \u5982\u679c\u8bf4 Go \u6bd4 C++ \u8981\u6162 20%\uff0c\u90a3\u4e48 Go \u5c31\u8981\u6bd4\u4efb\u4f55\u975e\u9759\u6001\u548c\u7f16\u8bd1\u578b\u8bed\u8a00\u5feb 2 \u5230 10 \u500d\uff0c\u5e76\u4e14\u80fd\u591f\u66f4\u52a0\u9ad8\u6548\u5730\u4f7f\u7528\u5185\u5b58\u3002 \u5176\u5b9e\u6bd4\u8f83\u591a\u95e8\u8bed\u8a00\u4e4b\u95f4\u7684\u6027\u80fd\u662f\u4e00\u79cd\u975e\u5e38\u7325\u7410\u7684\u884c\u4e3a\uff0c\u56e0\u4e3a\u4efb\u4f55\u4e00\u79cd\u8bed\u8a00\u90fd\u6709\u5176\u6240\u64c5\u957f\u548c\u8584\u5f31\u7684\u65b9\u9762\u3002\u4f8b\u5982\u5728\u5904\u7406\u6587\u672c\u65b9\u9762\uff0c\u90a3\u4e9b\u53ea\u5904\u7406\u7eaf\u5b57\u8282\u7684\u8bed\u8a00\u663e\u7136\u8981\u6bd4\u5904\u7406 Unicode \u8fd9\u79cd\u66f4\u4e3a\u590d\u6742\u7f16\u7801\u7684\u8bed\u8a00\u8981\u51fa\u8272\u7684\u591a\u3002\u6709\u4e9b\u4eba\u53ef\u80fd\u8ba4\u4e3a\u4f7f\u7528\u4e24\u79cd\u4e0d\u540c\u7684\u8bed\u8a00\u5b9e\u73b0\u540c\u4e00\u4e2a\u76ee\u6807\u80fd\u591f\u5f97\u51fa\u6b63\u786e\u7684\u7ed3\u8bba\uff0c\u4f46\u662f\u5f88\u591a\u65f6\u5019\u6d4b\u8bd5\u8005\u53ef\u80fd\u5bf9\u4e00\u95e8\u8bed\u8a00\u975e\u5e38\u4e86\u89e3\u800c\u5bf9\u53e6\u4e00\u95e8\u8bed\u8a00\u53ea\u662f\u5927\u6982\u660e\u767d\uff0c\u6d4b\u8bd5\u8005\u5bf9\u7a0b\u5e8f\u7f16\u5199\u7684\u624b\u6cd5\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e5f\u4f1a\u5f71\u54cd\u7ed3\u679c\u7684\u516c\u5e73\u6027\uff0c\u56e0\u6b64\u6d4b\u8bd5\u7a0b\u5e8f\u5e94\u8be5\u5206\u522b\u7531\u5404\u81ea\u8bed\u8a00\u7684\u64c5\u957f\u8005\u6765\u7f16\u5199\uff0c\u8fd9\u6837\u624d\u80fd\u5f97\u5230\u5177\u6709\u53ef\u6bd4\u6027\u7684\u7ed3\u679c\u3002\u53e6\u5916\uff0c\u50cf\u5728\u7edf\u8ba1\u5b66\u65b9\u9762\uff0c\u4eba\u4eec\u5f88\u96be\u907f\u514d\u4eba\u4e3a\u56e0\u7d20\u5bf9\u7ed3\u679c\u7684\u5f71\u54cd\uff0c\u6240\u4ee5\u8fd9\u5728\u4e25\u683c\u610f\u4e49\u4e0a\u5e76\u4e0d\u662f\u79d1\u5b66\u3002\u8fd8\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6d4b\u8bd5\u7ed3\u679c\u7684\u53ef\u6bd4\u6027\u8fd8\u8981\u6839\u636e\u6d4b\u8bd5\u76ee\u6807\u6765\u533a\u522b\uff0c\u4f8b\u5982\u5f88\u591a\u53d1\u5c55\u5341\u591a\u5e74\u7684\u8bed\u8a00\u5df2\u7ecf\u9488\u5bf9\u5404\u7c7b\u95ee\u9898\u62e5\u6709\u975e\u5e38\u6210\u719f\u7684\u7c7b\u5e93\uff0c\u800c\u4f5c\u4e3a\u4e00\u95e8\u65b0\u751f\u8bed\u8a00\u7684 Go \u8bed\u8a00\uff0c\u5e76\u6ca1\u6709\u8db3\u591f\u7684\u65f6\u95f4\u6765\u63a8\u5bfc\u5404\u7c7b\u95ee\u9898\u7684\u6700\u4f73\u89e3\u51b3\u65b9\u6848\u3002\u5982\u679c\u4f60\u60f3\u83b7\u53d6\u66f4\u591a\u6709\u5173\u6027\u80fd\u7684\u8d44\u6599\uff0c\u8bf7\u8bbf\u95ee Computer Language Benchmark Game \uff08\u8be6\u89c1\u5f15\u7528 27\uff09\u3002 \u8fd9\u91cc\u6709\u4e00\u4e9b\u8bc4\u6d4b\u7ed3\u679c\uff1a \u6bd4\u8f83 Go \u548c Python \u5728\u7b80\u5355\u7684 web \u670d\u52a1\u5668\u65b9\u9762\u7684\u6027\u80fd\uff0c\u5355\u4f4d\u4e3a\u4f20\u8f93\u91cf\u6bcf\u79d2\uff1a \u539f\u751f\u7684 Go http \u5305\u8981\u6bd4 web.py \u5feb 7 \u81f3 8 \u500d\uff0c\u5982\u679c\u4f7f\u7528 web.go \u6846\u67b6\u5219\u7a0d\u5fae\u5dee\u70b9\uff0c\u6bd4 web.py \u5feb 6 \u81f3 7 \u500d\u3002\u5728 Python \u4e2d\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684 tornado \u5f02\u6b65\u670d\u52a1\u5668\u548c\u6846\u67b6\u5728 web \u73af\u5883\u4e0b\u8981\u6bd4 web.py \u5feb\u5f88\u591a\uff0cGo \u5927\u6982\u53ea\u6bd4\u5b83\u5feb 1.2 \u81f3 1.5 \u500d\uff08\u8be6\u89c1\u5f15\u7528 26\uff09\u3002 Go \u548c Python \u5728\u4e00\u822c\u5f00\u53d1\u7684\u5e73\u5747\u6c34\u5e73\u6d4b\u8bd5\u4e2d\uff0cGo \u8981\u6bd4 Python 3 \u5feb 25 \u500d\u5de6\u53f3\uff0c\u5c11\u5360\u7528\u4e09\u5206\u4e4b\u4e8c\u7684\u5185\u5b58\uff0c\u4f46\u6bd4 Python \u5927\u6982\u591a\u5199\u4e00\u500d\u7684\u4ee3\u7801\uff08\u8be6\u89c1\u5f15\u7528 27\uff09\u3002 \u6839\u636e Robert Hundt\uff082011 \u5e74 6 \u6708\uff0c\u8be6\u89c1\u5f15\u7528 28\uff09\u7684\u6587\u7ae0\u5bf9 C++\u3001Java\u3001Go \u548c Scala\uff0c\u4ee5\u53ca Go \u5f00\u53d1\u56e2\u961f\u7684\u53cd\u5e94\uff08\u8be6\u89c1\u5f15\u7528 29\uff09\uff0c\u53ef\u4ee5\u5f97\u51fa\u4ee5\u4e0b\u7ed3\u8bba\uff1a Go \u548c Scala \u4e4b\u95f4\u5177\u6709\u66f4\u591a\u7684\u53ef\u6bd4\u6027\uff08\u90fd\u4f7f\u7528\u66f4\u5c11\u7684\u4ee3\u7801\uff09\uff0c\u800c C++ \u548c Java \u90fd\u4f7f\u7528\u975e\u5e38\u5197\u957f\u7684\u4ee3\u7801\u3002 Go \u7684\u7f16\u8bd1\u901f\u5ea6\u8981\u6bd4\u7edd\u5927\u591a\u6570\u8bed\u8a00\u90fd\u8981\u5feb\uff0c\u6bd4 Java \u548c C++ \u5feb 5 \u81f3 6 \u500d\uff0c\u6bd4 Scala \u5feb 10 \u500d\u3002 Go \u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u4f53\u79ef\u662f\u6700\u5927\u7684\uff08\u6bcf\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u90fd\u5305\u542b runtime\uff09\u3002 \u5728\u6700\u7406\u60f3\u7684\u60c5\u51b5\u4e0b\uff0cGo \u80fd\u591f\u548c C++ \u4e00\u6837\u5feb\uff0c\u6bd4 Scala \u5feb 2 \u81f3 3 \u500d\uff0c\u6bd4 Java \u5feb 5 \u81f3 10 \u500d\u3002 Go \u5728\u5185\u5b58\u7ba1\u7406\u65b9\u9762\u4e5f\u53ef\u4ee5\u548c C++ \u76f8\u5ab2\u7f8e\uff0c\u51e0\u4e4e\u53ea\u9700\u8981 Scala \u6240\u4f7f\u7528\u7684\u4e00\u534a\uff0c\u662fJava\u7684\u4e94\u5206\u4e4b\u4e00\u5de6\u53f3\u3002","title":"3.8 Go \u6027\u80fd\u8bf4\u660e"},{"location":"03.8/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5176\u5b83\u5de5\u5177 \u4e0b\u4e00\u8282\uff1a \u4e0e\u5176\u5b83\u8bed\u8a00\u8fdb\u884c\u4ea4\u4e92","title":"\u94fe\u63a5"},{"location":"03.9/","text":"3.9 \u4e0e\u5176\u5b83\u8bed\u8a00\u8fdb\u884c\u4ea4\u4e92 \u00b6 3.9.1 \u4e0e C \u8fdb\u884c\u4ea4\u4e92 \u00b6 \u5de5\u5177 cgo \u63d0\u4f9b\u4e86\u5bf9 FFI\uff08\u5916\u90e8\u51fd\u6570\u63a5\u53e3\uff09\u7684\u652f\u6301\uff0c\u80fd\u591f\u4f7f\u7528 Go \u4ee3\u7801\u5b89\u5168\u5730\u8c03\u7528 C \u8bed\u8a00\u5e93\uff0c\u4f60\u53ef\u4ee5\u8bbf\u95ee cgo \u6587\u6863\u4e3b\u9875\uff1a http://golang.org/cmd/cgo \u3002cgo \u4f1a\u66ff\u4ee3 Go \u7f16\u8bd1\u5668\u6765\u4ea7\u751f\u53ef\u4ee5\u7ec4\u5408\u5728\u540c\u4e00\u4e2a\u5305\u4e2d\u7684 Go \u548c C \u4ee3\u7801\u3002\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\u4e00\u822c\u4f7f\u7528 cgo \u521b\u5efa\u5355\u72ec\u7684 C \u4ee3\u7801\u5305\u3002 \u5982\u679c\u4f60\u60f3\u8981\u5728\u4f60\u7684 Go \u7a0b\u5e8f\u4e2d\u4f7f\u7528 cgo\uff0c\u5219\u5fc5\u987b\u5728\u5355\u72ec\u7684\u4e00\u884c\u4f7f\u7528 import \"C\" \u6765\u5bfc\u5165\uff0c\u4e00\u822c\u6765\u8bf4\u4f60\u53ef\u80fd\u8fd8\u9700\u8981 import \"unsafe\" \u3002 \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 import \"C\" \u4e4b\u524d\u4f7f\u7528\u6ce8\u91ca\uff08\u5355\u884c\u6216\u591a\u884c\u6ce8\u91ca\u5747\u53ef\uff09\u7684\u5f62\u5f0f\u5bfc\u5165 C \u8bed\u8a00\u5e93\uff08\u751a\u81f3\u6709\u6548\u7684 C \u8bed\u8a00\u4ee3\u7801\uff09\uff0c\u5b83\u4eec\u4e4b\u95f4\u6ca1\u6709\u7a7a\u884c\uff0c\u4f8b\u5982\uff1a // #include <stdio.h> // #include <stdlib.h> import \"C\" \u540d\u79f0 \"C\" \u5e76\u4e0d\u5c5e\u4e8e\u6807\u51c6\u5e93\u7684\u4e00\u90e8\u5206\uff0c\u8fd9\u53ea\u662f cgo \u96c6\u6210\u7684\u4e00\u4e2a\u7279\u6b8a\u540d\u79f0\u7528\u4e8e\u5f15\u7528 C \u7684\u547d\u540d\u7a7a\u95f4\u3002\u5728\u8fd9\u4e2a\u547d\u540d\u7a7a\u95f4\u91cc\u6240\u5305\u542b\u7684 C \u7c7b\u578b\u90fd\u53ef\u4ee5\u88ab\u4f7f\u7528\uff0c\u4f8b\u5982 C.uint \u3001 C.long \u7b49\u7b49\uff0c\u8fd8\u6709 libc \u4e2d\u7684\u51fd\u6570 C.random() \u7b49\u4e5f\u53ef\u4ee5\u88ab\u8c03\u7528\u3002 \u5f53\u4f60\u60f3\u8981\u4f7f\u7528\u67d0\u4e2a\u7c7b\u578b\u4f5c\u4e3a C \u4e2d\u51fd\u6570\u7684\u53c2\u6570\u65f6\uff0c\u5fc5\u987b\u5c06\u5176\u8f6c\u6362\u4e3a C \u4e2d\u7684\u7c7b\u578b\uff0c\u53cd\u4e4b\u4ea6\u7136\uff0c\u4f8b\u5982\uff1a var i int C . uint ( i ) // \u4ece Go \u4e2d\u7684 int \u8f6c\u6362\u4e3a C \u4e2d\u7684\u65e0\u7b26\u53f7 int int ( C . random ()) // \u4ece C \u4e2d random() \u51fd\u6570\u8fd4\u56de\u7684 long \u8f6c\u6362\u4e3a Go \u4e2d\u7684 int \u4e0b\u9762\u7684 2 \u4e2a Go \u51fd\u6570 Random() \u548c Seed() \u5206\u522b\u8c03\u7528\u4e86 C \u4e2d\u7684 C.random() \u548c C.srandom() \u3002 \u793a\u4f8b 3.2 c1.go package rand // #include <stdlib.h> import \"C\" func Random () int { return int ( C . random ()) } func Seed ( i int ) { C . srandom ( C . uint ( i )) } C \u5f53\u4e2d\u5e76\u6ca1\u6709\u660e\u786e\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5982\u679c\u4f60\u60f3\u8981\u5c06\u4e00\u4e2a string \u7c7b\u578b\u7684\u53d8\u91cf\u4ece Go \u8f6c\u6362\u5230 C \u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 C.CString(s) \uff1b\u540c\u6837\uff0c\u53ef\u4ee5\u4f7f\u7528 C.GoString(cs) \u4ece C \u8f6c\u6362\u5230 Go \u4e2d\u7684 string \u7c7b\u578b\u3002 Go \u7684\u5185\u5b58\u7ba1\u7406\u673a\u5236\u65e0\u6cd5\u7ba1\u7406\u901a\u8fc7 C \u4ee3\u7801\u5206\u914d\u7684\u5185\u5b58\u3002 \u5f00\u53d1\u4eba\u5458\u9700\u8981\u901a\u8fc7\u624b\u52a8\u8c03\u7528 C.free \u6765\u91ca\u653e\u53d8\u91cf\u7684\u5185\u5b58\uff1a defer C . free ( unsafe . Pointer ( Cvariable )) \u8fd9\u4e00\u884c\u6700\u597d\u7d27\u8ddf\u5728\u4f7f\u7528 C \u4ee3\u7801\u521b\u5efa\u67d0\u4e2a\u53d8\u91cf\u4e4b\u540e\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u5fd8\u8bb0\u91ca\u653e\u5185\u5b58\u4e86\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 cgo \u521b\u5efa\u53d8\u91cf\u3001\u4f7f\u7528\u5e76\u91ca\u653e\u5176\u5185\u5b58\uff1a \u793a\u4f8b 3.3 c2.go package print // #include <stdio.h> // #include <stdlib.h> import \"C\" import \"unsafe\" func Print ( s string ) { cs := C . CString ( s ) defer C . free ( unsafe . Pointer ( cs )) C . fputs ( cs , ( * C . FILE )( C . stdout )) } \u6784\u5efa cgo \u5305 \u4f60\u53ef\u4ee5\u5728\u4f7f\u7528\u5c06\u4f1a\u5728\u7b2c 9.5 \u8282\u8bb2\u5230\u7684 Makefile \u6587\u4ef6\uff08\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a\u72ec\u7acb\u7684\u5305\uff09\uff0c\u9664\u4e86\u4f7f\u7528\u53d8\u91cf GOFILES \u4e4b\u5916\uff0c\u8fd8\u9700\u8981\u4f7f\u7528\u53d8\u91cf CGOFILES \u6765\u5217\u51fa\u9700\u8981\u4f7f\u7528 cgo \u7f16\u8bd1\u7684\u6587\u4ef6\u5217\u8868\u3002\u4f8b\u5982\uff0c\u793a\u4f8b 3.2 \u4e2d\u7684\u4ee3\u7801\u5c31\u53ef\u4ee5\u4f7f\u7528\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\u7684 Makefile \u6587\u4ef6\u6765\u7f16\u8bd1\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 gomake \u6216 make \uff1a include $(GOROOT)/src/Make.inc TARG=rand CGOFILES=\\ c1.go\\ include $(GOROOT)/src/Make.pkg 3.9.2 \u4e0e C++ \u8fdb\u884c\u4ea4\u4e92 \u00b6 SWIG\uff08\u7b80\u5316\u5c01\u88c5\u5668\u548c\u63a5\u53e3\u751f\u6210\u5668\uff09\u652f\u6301\u5728 Linux \u7cfb\u7edf\u4e0b\u4f7f\u7528 Go \u4ee3\u7801\u8c03\u7528 C \u6216\u8005 C++ \u4ee3\u7801\u3002\u8fd9\u91cc\u6709\u4e00\u4e9b\u4f7f\u7528 SWIG \u7684\u6ce8\u610f\u4e8b\u9879\uff1a \u7f16\u5199\u9700\u8981\u5c01\u88c5\u7684\u5e93\u7684 SWIG \u63a5\u53e3\u3002 SWIG \u4f1a\u4ea7\u751f C \u7684\u5b58\u6839\u51fd\u6570\u3002 \u8fd9\u4e9b\u5e93\u53ef\u4ee5\u4f7f\u7528 cgo \u6765\u8c03\u7528\u3002 \u76f8\u5173\u7684 Go \u6587\u4ef6\u4e5f\u53ef\u4ee5\u88ab\u81ea\u52a8\u751f\u6210\u3002 \u8fd9\u7c7b\u63a5\u53e3\u652f\u6301\u65b9\u6cd5\u91cd\u8f7d\u3001\u591a\u91cd\u7ee7\u627f\u4ee5\u53ca\u4f7f\u7528 Go \u4ee3\u7801\u5b9e\u73b0 C++ \u7684\u62bd\u8c61\u7c7b\u3002 \u76ee\u524d\u4f7f\u7528 SWIG \u5b58\u5728\u7684\u4e00\u4e2a\u95ee\u9898\u662f\u5b83\u65e0\u6cd5\u652f\u6301\u6240\u6709\u7684 C++ \u5e93\uff0c\u6bd4\u5982\u8bf4\u5b83\u5c31\u65e0\u6cd5\u89e3\u6790 TObject.h\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Go \u6027\u80fd\u8bf4\u660e \u4e0b\u4e00\u90e8\u5206\uff1a \u8bed\u8a00\u7684\u6838\u5fc3\u7ed3\u6784\u4e0e\u6280\u672f","title":"3.9 \u4e0e\u5176\u5b83\u8bed\u8a00\u8fdb\u884c\u4ea4\u4e92"},{"location":"03.9/#39","text":"","title":"3.9 \u4e0e\u5176\u5b83\u8bed\u8a00\u8fdb\u884c\u4ea4\u4e92"},{"location":"03.9/#391-c","text":"\u5de5\u5177 cgo \u63d0\u4f9b\u4e86\u5bf9 FFI\uff08\u5916\u90e8\u51fd\u6570\u63a5\u53e3\uff09\u7684\u652f\u6301\uff0c\u80fd\u591f\u4f7f\u7528 Go \u4ee3\u7801\u5b89\u5168\u5730\u8c03\u7528 C \u8bed\u8a00\u5e93\uff0c\u4f60\u53ef\u4ee5\u8bbf\u95ee cgo \u6587\u6863\u4e3b\u9875\uff1a http://golang.org/cmd/cgo \u3002cgo \u4f1a\u66ff\u4ee3 Go \u7f16\u8bd1\u5668\u6765\u4ea7\u751f\u53ef\u4ee5\u7ec4\u5408\u5728\u540c\u4e00\u4e2a\u5305\u4e2d\u7684 Go \u548c C \u4ee3\u7801\u3002\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\u4e00\u822c\u4f7f\u7528 cgo \u521b\u5efa\u5355\u72ec\u7684 C \u4ee3\u7801\u5305\u3002 \u5982\u679c\u4f60\u60f3\u8981\u5728\u4f60\u7684 Go \u7a0b\u5e8f\u4e2d\u4f7f\u7528 cgo\uff0c\u5219\u5fc5\u987b\u5728\u5355\u72ec\u7684\u4e00\u884c\u4f7f\u7528 import \"C\" \u6765\u5bfc\u5165\uff0c\u4e00\u822c\u6765\u8bf4\u4f60\u53ef\u80fd\u8fd8\u9700\u8981 import \"unsafe\" \u3002 \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 import \"C\" \u4e4b\u524d\u4f7f\u7528\u6ce8\u91ca\uff08\u5355\u884c\u6216\u591a\u884c\u6ce8\u91ca\u5747\u53ef\uff09\u7684\u5f62\u5f0f\u5bfc\u5165 C \u8bed\u8a00\u5e93\uff08\u751a\u81f3\u6709\u6548\u7684 C \u8bed\u8a00\u4ee3\u7801\uff09\uff0c\u5b83\u4eec\u4e4b\u95f4\u6ca1\u6709\u7a7a\u884c\uff0c\u4f8b\u5982\uff1a // #include <stdio.h> // #include <stdlib.h> import \"C\" \u540d\u79f0 \"C\" \u5e76\u4e0d\u5c5e\u4e8e\u6807\u51c6\u5e93\u7684\u4e00\u90e8\u5206\uff0c\u8fd9\u53ea\u662f cgo \u96c6\u6210\u7684\u4e00\u4e2a\u7279\u6b8a\u540d\u79f0\u7528\u4e8e\u5f15\u7528 C \u7684\u547d\u540d\u7a7a\u95f4\u3002\u5728\u8fd9\u4e2a\u547d\u540d\u7a7a\u95f4\u91cc\u6240\u5305\u542b\u7684 C \u7c7b\u578b\u90fd\u53ef\u4ee5\u88ab\u4f7f\u7528\uff0c\u4f8b\u5982 C.uint \u3001 C.long \u7b49\u7b49\uff0c\u8fd8\u6709 libc \u4e2d\u7684\u51fd\u6570 C.random() \u7b49\u4e5f\u53ef\u4ee5\u88ab\u8c03\u7528\u3002 \u5f53\u4f60\u60f3\u8981\u4f7f\u7528\u67d0\u4e2a\u7c7b\u578b\u4f5c\u4e3a C \u4e2d\u51fd\u6570\u7684\u53c2\u6570\u65f6\uff0c\u5fc5\u987b\u5c06\u5176\u8f6c\u6362\u4e3a C \u4e2d\u7684\u7c7b\u578b\uff0c\u53cd\u4e4b\u4ea6\u7136\uff0c\u4f8b\u5982\uff1a var i int C . uint ( i ) // \u4ece Go \u4e2d\u7684 int \u8f6c\u6362\u4e3a C \u4e2d\u7684\u65e0\u7b26\u53f7 int int ( C . random ()) // \u4ece C \u4e2d random() \u51fd\u6570\u8fd4\u56de\u7684 long \u8f6c\u6362\u4e3a Go \u4e2d\u7684 int \u4e0b\u9762\u7684 2 \u4e2a Go \u51fd\u6570 Random() \u548c Seed() \u5206\u522b\u8c03\u7528\u4e86 C \u4e2d\u7684 C.random() \u548c C.srandom() \u3002 \u793a\u4f8b 3.2 c1.go package rand // #include <stdlib.h> import \"C\" func Random () int { return int ( C . random ()) } func Seed ( i int ) { C . srandom ( C . uint ( i )) } C \u5f53\u4e2d\u5e76\u6ca1\u6709\u660e\u786e\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5982\u679c\u4f60\u60f3\u8981\u5c06\u4e00\u4e2a string \u7c7b\u578b\u7684\u53d8\u91cf\u4ece Go \u8f6c\u6362\u5230 C \u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 C.CString(s) \uff1b\u540c\u6837\uff0c\u53ef\u4ee5\u4f7f\u7528 C.GoString(cs) \u4ece C \u8f6c\u6362\u5230 Go \u4e2d\u7684 string \u7c7b\u578b\u3002 Go \u7684\u5185\u5b58\u7ba1\u7406\u673a\u5236\u65e0\u6cd5\u7ba1\u7406\u901a\u8fc7 C \u4ee3\u7801\u5206\u914d\u7684\u5185\u5b58\u3002 \u5f00\u53d1\u4eba\u5458\u9700\u8981\u901a\u8fc7\u624b\u52a8\u8c03\u7528 C.free \u6765\u91ca\u653e\u53d8\u91cf\u7684\u5185\u5b58\uff1a defer C . free ( unsafe . Pointer ( Cvariable )) \u8fd9\u4e00\u884c\u6700\u597d\u7d27\u8ddf\u5728\u4f7f\u7528 C \u4ee3\u7801\u521b\u5efa\u67d0\u4e2a\u53d8\u91cf\u4e4b\u540e\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u5fd8\u8bb0\u91ca\u653e\u5185\u5b58\u4e86\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 cgo \u521b\u5efa\u53d8\u91cf\u3001\u4f7f\u7528\u5e76\u91ca\u653e\u5176\u5185\u5b58\uff1a \u793a\u4f8b 3.3 c2.go package print // #include <stdio.h> // #include <stdlib.h> import \"C\" import \"unsafe\" func Print ( s string ) { cs := C . CString ( s ) defer C . free ( unsafe . Pointer ( cs )) C . fputs ( cs , ( * C . FILE )( C . stdout )) } \u6784\u5efa cgo \u5305 \u4f60\u53ef\u4ee5\u5728\u4f7f\u7528\u5c06\u4f1a\u5728\u7b2c 9.5 \u8282\u8bb2\u5230\u7684 Makefile \u6587\u4ef6\uff08\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a\u72ec\u7acb\u7684\u5305\uff09\uff0c\u9664\u4e86\u4f7f\u7528\u53d8\u91cf GOFILES \u4e4b\u5916\uff0c\u8fd8\u9700\u8981\u4f7f\u7528\u53d8\u91cf CGOFILES \u6765\u5217\u51fa\u9700\u8981\u4f7f\u7528 cgo \u7f16\u8bd1\u7684\u6587\u4ef6\u5217\u8868\u3002\u4f8b\u5982\uff0c\u793a\u4f8b 3.2 \u4e2d\u7684\u4ee3\u7801\u5c31\u53ef\u4ee5\u4f7f\u7528\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\u7684 Makefile \u6587\u4ef6\u6765\u7f16\u8bd1\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 gomake \u6216 make \uff1a include $(GOROOT)/src/Make.inc TARG=rand CGOFILES=\\ c1.go\\ include $(GOROOT)/src/Make.pkg","title":"3.9.1 \u4e0e C \u8fdb\u884c\u4ea4\u4e92"},{"location":"03.9/#392-c","text":"SWIG\uff08\u7b80\u5316\u5c01\u88c5\u5668\u548c\u63a5\u53e3\u751f\u6210\u5668\uff09\u652f\u6301\u5728 Linux \u7cfb\u7edf\u4e0b\u4f7f\u7528 Go \u4ee3\u7801\u8c03\u7528 C \u6216\u8005 C++ \u4ee3\u7801\u3002\u8fd9\u91cc\u6709\u4e00\u4e9b\u4f7f\u7528 SWIG \u7684\u6ce8\u610f\u4e8b\u9879\uff1a \u7f16\u5199\u9700\u8981\u5c01\u88c5\u7684\u5e93\u7684 SWIG \u63a5\u53e3\u3002 SWIG \u4f1a\u4ea7\u751f C \u7684\u5b58\u6839\u51fd\u6570\u3002 \u8fd9\u4e9b\u5e93\u53ef\u4ee5\u4f7f\u7528 cgo \u6765\u8c03\u7528\u3002 \u76f8\u5173\u7684 Go \u6587\u4ef6\u4e5f\u53ef\u4ee5\u88ab\u81ea\u52a8\u751f\u6210\u3002 \u8fd9\u7c7b\u63a5\u53e3\u652f\u6301\u65b9\u6cd5\u91cd\u8f7d\u3001\u591a\u91cd\u7ee7\u627f\u4ee5\u53ca\u4f7f\u7528 Go \u4ee3\u7801\u5b9e\u73b0 C++ \u7684\u62bd\u8c61\u7c7b\u3002 \u76ee\u524d\u4f7f\u7528 SWIG \u5b58\u5728\u7684\u4e00\u4e2a\u95ee\u9898\u662f\u5b83\u65e0\u6cd5\u652f\u6301\u6240\u6709\u7684 C++ \u5e93\uff0c\u6bd4\u5982\u8bf4\u5b83\u5c31\u65e0\u6cd5\u89e3\u6790 TObject.h\u3002","title":"3.9.2 \u4e0e C++ \u8fdb\u884c\u4ea4\u4e92"},{"location":"03.9/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Go \u6027\u80fd\u8bf4\u660e \u4e0b\u4e00\u90e8\u5206\uff1a \u8bed\u8a00\u7684\u6838\u5fc3\u7ed3\u6784\u4e0e\u6280\u672f","title":"\u94fe\u63a5"},{"location":"04.1/","text":"4.1 \u6587\u4ef6\u540d\u3001\u5173\u952e\u5b57\u4e0e\u6807\u8bc6\u7b26 \u00b6 Go \u7684\u6e90\u6587\u4ef6\u4ee5 .go \u4e3a\u540e\u7f00\u540d\u5b58\u50a8\u5728\u8ba1\u7b97\u673a\u4e2d\uff0c\u8fd9\u4e9b\u6587\u4ef6\u540d\u5747\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\uff0c\u5982 scanner.go \u3002\u5982\u679c\u6587\u4ef6\u540d\u7531\u591a\u4e2a\u90e8\u5206\u7ec4\u6210\uff0c\u5219\u4f7f\u7528\u4e0b\u5212\u7ebf _ \u5bf9\u5b83\u4eec\u8fdb\u884c\u5206\u9694\uff0c\u5982 scanner_test.go \u3002\u6587\u4ef6\u540d\u4e0d\u5305\u542b\u7a7a\u683c\u6216\u5176\u4ed6\u7279\u6b8a\u5b57\u7b26\u3002 \u4e00\u4e2a\u6e90\u6587\u4ef6\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u591a\u884c\u7684\u4ee3\u7801\uff0cGo \u672c\u8eab\u6ca1\u6709\u5bf9\u6e90\u6587\u4ef6\u7684\u5927\u5c0f\u8fdb\u884c\u9650\u5236\u3002 \u4f60\u4f1a\u53d1\u73b0\u5728 Go \u4ee3\u7801\u4e2d\u7684\u51e0\u4e4e\u6240\u6709\u4e1c\u897f\u90fd\u6709\u4e00\u4e2a\u540d\u79f0\u6216\u6807\u8bc6\u7b26\u3002\u53e6\u5916\uff0cGo \u8bed\u8a00\u4e5f\u662f\u533a\u5206\u5927\u5c0f\u5199\u7684\uff0c\u8fd9\u4e0e C \u5bb6\u65cf\u4e2d\u7684\u5176\u5b83\u8bed\u8a00\u76f8\u540c\u3002\u6709\u6548\u7684\u6807\u8bc6\u7b26\u5fc5\u987b\u4ee5\u5b57\u6bcd\uff08\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55 UTF-8 \u7f16\u7801\u7684\u5b57\u7b26\u6216 _ \uff09\u5f00\u5934\uff0c\u7136\u540e\u7d27\u8ddf\u7740 0 \u4e2a\u6216\u591a\u4e2a\u5b57\u7b26\u6216 Unicode \u6570\u5b57\uff0c\u5982\uff1aX56\u3001group1\u3001_x23\u3001i\u3001\u04e9\u051112\u3002 \u4ee5\u4e0b\u662f\u65e0\u6548\u7684\u6807\u8bc6\u7b26\uff1a 1ab\uff08\u4ee5\u6570\u5b57\u5f00\u5934\uff09 case\uff08Go \u8bed\u8a00\u7684\u5173\u952e\u5b57\uff09 a+b\uff08\u8fd0\u7b97\u7b26\u662f\u4e0d\u5141\u8bb8\u7684\uff09 _ \u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u6807\u8bc6\u7b26\uff0c\u88ab\u79f0\u4e3a\u7a7a\u767d\u6807\u8bc6\u7b26\u3002\u5b83\u53ef\u4ee5\u50cf\u5176\u4ed6\u6807\u8bc6\u7b26\u90a3\u6837\u7528\u4e8e\u53d8\u91cf\u7684\u58f0\u660e\u6216\u8d4b\u503c\uff08\u4efb\u4f55\u7c7b\u578b\u90fd\u53ef\u4ee5\u8d4b\u503c\u7ed9\u5b83\uff09\uff0c\u4f46\u4efb\u4f55\u8d4b\u7ed9\u8fd9\u4e2a\u6807\u8bc6\u7b26\u7684\u503c\u90fd\u5c06\u88ab\u629b\u5f03\uff0c\u56e0\u6b64\u8fd9\u4e9b\u503c\u4e0d\u80fd\u5728\u540e\u7eed\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528\uff0c\u4e5f\u4e0d\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u6807\u8bc6\u7b26\u4f5c\u4e3a\u53d8\u91cf\u5bf9\u5176\u5b83\u53d8\u91cf\u8fdb\u884c\u8d4b\u503c\u6216\u8fd0\u7b97\u3002 \u5728\u7f16\u7801\u8fc7\u7a0b\u4e2d\uff0c\u4f60\u53ef\u80fd\u4f1a\u9047\u5230\u6ca1\u6709\u540d\u79f0\u7684\u53d8\u91cf\u3001\u7c7b\u578b\u6216\u65b9\u6cd5\u3002\u867d\u7136\u8fd9\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u4f46\u6709\u65f6\u5019\u8fd9\u6837\u505a\u53ef\u4ee5\u6781\u5927\u5730\u589e\u5f3a\u4ee3\u7801\u7684\u7075\u6d3b\u6027\uff0c\u8fd9\u4e9b\u53d8\u91cf\u88ab\u7edf\u79f0\u4e3a\u533f\u540d\u53d8\u91cf\u3002 \u4e0b\u9762\u5217\u4e3e\u4e86 Go \u4ee3\u7801\u4e2d\u4f1a\u4f7f\u7528\u5230\u7684 25 \u4e2a\u5173\u952e\u5b57\u6216\u4fdd\u7559\u5b57\uff1a break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var \u4e4b\u6240\u4ee5\u523b\u610f\u5730\u5c06 Go \u4ee3\u7801\u4e2d\u7684\u5173\u952e\u5b57\u4fdd\u6301\u7684\u8fd9\u4e48\u5c11\uff0c\u662f\u4e3a\u4e86\u7b80\u5316\u5728\u7f16\u8bd1\u8fc7\u7a0b\u7b2c\u4e00\u6b65\u4e2d\u7684\u4ee3\u7801\u89e3\u6790\u3002\u548c\u5176\u5b83\u8bed\u8a00\u4e00\u6837\uff0c\u5173\u952e\u5b57\u4e0d\u80fd\u591f\u4f5c\u6807\u8bc6\u7b26\u4f7f\u7528\u3002 \u9664\u4e86\u4ee5\u4e0a\u4ecb\u7ecd\u7684\u8fd9\u4e9b\u5173\u952e\u5b57\uff0cGo \u8bed\u8a00\u8fd8\u6709 36 \u4e2a\u9884\u5b9a\u4e49\u6807\u8bc6\u7b26\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u57fa\u672c\u7c7b\u578b\u7684\u540d\u79f0\u548c\u4e00\u4e9b\u57fa\u672c\u7684\u5185\u7f6e\u51fd\u6570\uff08 \u7b2c 6.5 \u8282 \uff09\uff0c\u5b83\u4eec\u7684\u4f5c\u7528\u90fd\u5c06\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\u8fdb\u884c\u8fdb\u4e00\u6b65\u5730\u8bb2\u89e3\u3002 append bool byte cap close complex complex64 complex128 uint16 copy false float32 float64 imag int int8 int16 uint32 int32 int64 iota len make new nil panic uint64 print println real recover string true uint uint8 uintptr \u7a0b\u5e8f\u4e00\u822c\u7531\u5173\u952e\u5b57\u3001\u5e38\u91cf\u3001\u53d8\u91cf\u3001\u8fd0\u7b97\u7b26\u3001\u7c7b\u578b\u548c\u51fd\u6570\u7ec4\u6210\u3002 \u7a0b\u5e8f\u4e2d\u53ef\u80fd\u4f1a\u4f7f\u7528\u5230\u8fd9\u4e9b\u5206\u9694\u7b26\uff1a\u62ec\u53f7 () \uff0c\u4e2d\u62ec\u53f7 [] \u548c\u5927\u62ec\u53f7 {} \u3002 \u7a0b\u5e8f\u4e2d\u53ef\u80fd\u4f1a\u4f7f\u7528\u5230\u8fd9\u4e9b\u6807\u70b9\u7b26\u53f7\uff1a . \u3001 , \u3001 ; \u3001 : \u548c \u2026 \u3002 \u7a0b\u5e8f\u7684\u4ee3\u7801\u901a\u8fc7\u8bed\u53e5\u6765\u5b9e\u73b0\u7ed3\u6784\u5316\u3002\u6bcf\u4e2a\u8bed\u53e5\u4e0d\u9700\u8981\u50cf C \u5bb6\u65cf\u4e2d\u7684\u5176\u5b83\u8bed\u8a00\u4e00\u6837\u4ee5\u5206\u53f7 ; \u7ed3\u5c3e\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u5de5\u4f5c\u90fd\u5c06\u7531 Go \u7f16\u8bd1\u5668\u81ea\u52a8\u5b8c\u6210\u3002 \u5982\u679c\u4f60\u6253\u7b97\u5c06\u591a\u4e2a\u8bed\u53e5\u5199\u5728\u540c\u4e00\u884c\uff0c\u5b83\u4eec\u5219\u5fc5\u987b\u4f7f\u7528 ; \u4eba\u4e3a\u533a\u5206\uff0c\u4f46\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\u6211\u4eec\u5e76\u4e0d\u9f13\u52b1\u8fd9\u79cd\u505a\u6cd5\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u90e8\u5206\uff1a \u4e0e\u5176\u5b83\u8bed\u8a00\u8fdb\u884c\u4ea4\u4e92 \u4e0b\u4e00\u8282\uff1a Go \u7a0b\u5e8f\u7684\u57fa\u672c\u7ed3\u6784\u548c\u8981\u7d20","title":"4.1 \u6587\u4ef6\u540d\u3001\u5173\u952e\u5b57\u4e0e\u6807\u8bc6\u7b26"},{"location":"04.1/#41","text":"Go \u7684\u6e90\u6587\u4ef6\u4ee5 .go \u4e3a\u540e\u7f00\u540d\u5b58\u50a8\u5728\u8ba1\u7b97\u673a\u4e2d\uff0c\u8fd9\u4e9b\u6587\u4ef6\u540d\u5747\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\uff0c\u5982 scanner.go \u3002\u5982\u679c\u6587\u4ef6\u540d\u7531\u591a\u4e2a\u90e8\u5206\u7ec4\u6210\uff0c\u5219\u4f7f\u7528\u4e0b\u5212\u7ebf _ \u5bf9\u5b83\u4eec\u8fdb\u884c\u5206\u9694\uff0c\u5982 scanner_test.go \u3002\u6587\u4ef6\u540d\u4e0d\u5305\u542b\u7a7a\u683c\u6216\u5176\u4ed6\u7279\u6b8a\u5b57\u7b26\u3002 \u4e00\u4e2a\u6e90\u6587\u4ef6\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u591a\u884c\u7684\u4ee3\u7801\uff0cGo \u672c\u8eab\u6ca1\u6709\u5bf9\u6e90\u6587\u4ef6\u7684\u5927\u5c0f\u8fdb\u884c\u9650\u5236\u3002 \u4f60\u4f1a\u53d1\u73b0\u5728 Go \u4ee3\u7801\u4e2d\u7684\u51e0\u4e4e\u6240\u6709\u4e1c\u897f\u90fd\u6709\u4e00\u4e2a\u540d\u79f0\u6216\u6807\u8bc6\u7b26\u3002\u53e6\u5916\uff0cGo \u8bed\u8a00\u4e5f\u662f\u533a\u5206\u5927\u5c0f\u5199\u7684\uff0c\u8fd9\u4e0e C \u5bb6\u65cf\u4e2d\u7684\u5176\u5b83\u8bed\u8a00\u76f8\u540c\u3002\u6709\u6548\u7684\u6807\u8bc6\u7b26\u5fc5\u987b\u4ee5\u5b57\u6bcd\uff08\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55 UTF-8 \u7f16\u7801\u7684\u5b57\u7b26\u6216 _ \uff09\u5f00\u5934\uff0c\u7136\u540e\u7d27\u8ddf\u7740 0 \u4e2a\u6216\u591a\u4e2a\u5b57\u7b26\u6216 Unicode \u6570\u5b57\uff0c\u5982\uff1aX56\u3001group1\u3001_x23\u3001i\u3001\u04e9\u051112\u3002 \u4ee5\u4e0b\u662f\u65e0\u6548\u7684\u6807\u8bc6\u7b26\uff1a 1ab\uff08\u4ee5\u6570\u5b57\u5f00\u5934\uff09 case\uff08Go \u8bed\u8a00\u7684\u5173\u952e\u5b57\uff09 a+b\uff08\u8fd0\u7b97\u7b26\u662f\u4e0d\u5141\u8bb8\u7684\uff09 _ \u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u6807\u8bc6\u7b26\uff0c\u88ab\u79f0\u4e3a\u7a7a\u767d\u6807\u8bc6\u7b26\u3002\u5b83\u53ef\u4ee5\u50cf\u5176\u4ed6\u6807\u8bc6\u7b26\u90a3\u6837\u7528\u4e8e\u53d8\u91cf\u7684\u58f0\u660e\u6216\u8d4b\u503c\uff08\u4efb\u4f55\u7c7b\u578b\u90fd\u53ef\u4ee5\u8d4b\u503c\u7ed9\u5b83\uff09\uff0c\u4f46\u4efb\u4f55\u8d4b\u7ed9\u8fd9\u4e2a\u6807\u8bc6\u7b26\u7684\u503c\u90fd\u5c06\u88ab\u629b\u5f03\uff0c\u56e0\u6b64\u8fd9\u4e9b\u503c\u4e0d\u80fd\u5728\u540e\u7eed\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528\uff0c\u4e5f\u4e0d\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u6807\u8bc6\u7b26\u4f5c\u4e3a\u53d8\u91cf\u5bf9\u5176\u5b83\u53d8\u91cf\u8fdb\u884c\u8d4b\u503c\u6216\u8fd0\u7b97\u3002 \u5728\u7f16\u7801\u8fc7\u7a0b\u4e2d\uff0c\u4f60\u53ef\u80fd\u4f1a\u9047\u5230\u6ca1\u6709\u540d\u79f0\u7684\u53d8\u91cf\u3001\u7c7b\u578b\u6216\u65b9\u6cd5\u3002\u867d\u7136\u8fd9\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u4f46\u6709\u65f6\u5019\u8fd9\u6837\u505a\u53ef\u4ee5\u6781\u5927\u5730\u589e\u5f3a\u4ee3\u7801\u7684\u7075\u6d3b\u6027\uff0c\u8fd9\u4e9b\u53d8\u91cf\u88ab\u7edf\u79f0\u4e3a\u533f\u540d\u53d8\u91cf\u3002 \u4e0b\u9762\u5217\u4e3e\u4e86 Go \u4ee3\u7801\u4e2d\u4f1a\u4f7f\u7528\u5230\u7684 25 \u4e2a\u5173\u952e\u5b57\u6216\u4fdd\u7559\u5b57\uff1a break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var \u4e4b\u6240\u4ee5\u523b\u610f\u5730\u5c06 Go \u4ee3\u7801\u4e2d\u7684\u5173\u952e\u5b57\u4fdd\u6301\u7684\u8fd9\u4e48\u5c11\uff0c\u662f\u4e3a\u4e86\u7b80\u5316\u5728\u7f16\u8bd1\u8fc7\u7a0b\u7b2c\u4e00\u6b65\u4e2d\u7684\u4ee3\u7801\u89e3\u6790\u3002\u548c\u5176\u5b83\u8bed\u8a00\u4e00\u6837\uff0c\u5173\u952e\u5b57\u4e0d\u80fd\u591f\u4f5c\u6807\u8bc6\u7b26\u4f7f\u7528\u3002 \u9664\u4e86\u4ee5\u4e0a\u4ecb\u7ecd\u7684\u8fd9\u4e9b\u5173\u952e\u5b57\uff0cGo \u8bed\u8a00\u8fd8\u6709 36 \u4e2a\u9884\u5b9a\u4e49\u6807\u8bc6\u7b26\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u57fa\u672c\u7c7b\u578b\u7684\u540d\u79f0\u548c\u4e00\u4e9b\u57fa\u672c\u7684\u5185\u7f6e\u51fd\u6570\uff08 \u7b2c 6.5 \u8282 \uff09\uff0c\u5b83\u4eec\u7684\u4f5c\u7528\u90fd\u5c06\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\u8fdb\u884c\u8fdb\u4e00\u6b65\u5730\u8bb2\u89e3\u3002 append bool byte cap close complex complex64 complex128 uint16 copy false float32 float64 imag int int8 int16 uint32 int32 int64 iota len make new nil panic uint64 print println real recover string true uint uint8 uintptr \u7a0b\u5e8f\u4e00\u822c\u7531\u5173\u952e\u5b57\u3001\u5e38\u91cf\u3001\u53d8\u91cf\u3001\u8fd0\u7b97\u7b26\u3001\u7c7b\u578b\u548c\u51fd\u6570\u7ec4\u6210\u3002 \u7a0b\u5e8f\u4e2d\u53ef\u80fd\u4f1a\u4f7f\u7528\u5230\u8fd9\u4e9b\u5206\u9694\u7b26\uff1a\u62ec\u53f7 () \uff0c\u4e2d\u62ec\u53f7 [] \u548c\u5927\u62ec\u53f7 {} \u3002 \u7a0b\u5e8f\u4e2d\u53ef\u80fd\u4f1a\u4f7f\u7528\u5230\u8fd9\u4e9b\u6807\u70b9\u7b26\u53f7\uff1a . \u3001 , \u3001 ; \u3001 : \u548c \u2026 \u3002 \u7a0b\u5e8f\u7684\u4ee3\u7801\u901a\u8fc7\u8bed\u53e5\u6765\u5b9e\u73b0\u7ed3\u6784\u5316\u3002\u6bcf\u4e2a\u8bed\u53e5\u4e0d\u9700\u8981\u50cf C \u5bb6\u65cf\u4e2d\u7684\u5176\u5b83\u8bed\u8a00\u4e00\u6837\u4ee5\u5206\u53f7 ; \u7ed3\u5c3e\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u5de5\u4f5c\u90fd\u5c06\u7531 Go \u7f16\u8bd1\u5668\u81ea\u52a8\u5b8c\u6210\u3002 \u5982\u679c\u4f60\u6253\u7b97\u5c06\u591a\u4e2a\u8bed\u53e5\u5199\u5728\u540c\u4e00\u884c\uff0c\u5b83\u4eec\u5219\u5fc5\u987b\u4f7f\u7528 ; \u4eba\u4e3a\u533a\u5206\uff0c\u4f46\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\u6211\u4eec\u5e76\u4e0d\u9f13\u52b1\u8fd9\u79cd\u505a\u6cd5\u3002","title":"4.1 \u6587\u4ef6\u540d\u3001\u5173\u952e\u5b57\u4e0e\u6807\u8bc6\u7b26"},{"location":"04.1/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u90e8\u5206\uff1a \u4e0e\u5176\u5b83\u8bed\u8a00\u8fdb\u884c\u4ea4\u4e92 \u4e0b\u4e00\u8282\uff1a Go \u7a0b\u5e8f\u7684\u57fa\u672c\u7ed3\u6784\u548c\u8981\u7d20","title":"\u94fe\u63a5"},{"location":"04.2/","text":"4.2 Go \u7a0b\u5e8f\u7684\u57fa\u672c\u7ed3\u6784\u548c\u8981\u7d20 \u00b6 \u793a\u4f8b 4.1 hello_world.go package main import \"fmt\" func main () { fmt . Println ( \"hello, world\" ) } 4.2.1 \u5305\u7684\u6982\u5ff5\u3001\u5bfc\u5165\u4e0e\u53ef\u89c1\u6027 \u00b6 \u5305\u662f\u7ed3\u6784\u5316\u4ee3\u7801\u7684\u4e00\u79cd\u65b9\u5f0f\uff1a\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u7531\u5305\uff08\u901a\u5e38\u7b80\u79f0\u4e3a pkg\uff09\u7684\u6982\u5ff5\u7ec4\u6210\uff0c\u53ef\u4ee5\u4f7f\u7528\u81ea\u8eab\u7684\u5305\u6216\u8005\u4ece\u5176\u5b83\u5305\u4e2d\u5bfc\u5165\u5185\u5bb9\u3002 \u5982\u540c\u5176\u5b83\u4e00\u4e9b\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u7c7b\u5e93\u6216\u547d\u540d\u7a7a\u95f4\u7684\u6982\u5ff5\uff0c\u6bcf\u4e2a Go \u6587\u4ef6\u90fd\u5c5e\u4e8e\u4e14\u4ec5\u5c5e\u4e8e\u4e00\u4e2a\u5305\u3002\u4e00\u4e2a\u5305\u53ef\u4ee5\u7531\u8bb8\u591a\u4ee5 .go \u4e3a\u6269\u5c55\u540d\u7684\u6e90\u6587\u4ef6\u7ec4\u6210\uff0c\u56e0\u6b64\u6587\u4ef6\u540d\u548c\u5305\u540d\u4e00\u822c\u6765\u8bf4\u90fd\u662f\u4e0d\u76f8\u540c\u7684\u3002 \u4f60\u5fc5\u987b\u5728\u6e90\u6587\u4ef6\u4e2d\u975e\u6ce8\u91ca\u7684\u7b2c\u4e00\u884c\u6307\u660e\u8fd9\u4e2a\u6587\u4ef6\u5c5e\u4e8e\u54ea\u4e2a\u5305\uff0c\u5982\uff1a package main \u3002 package main \u8868\u793a\u4e00\u4e2a\u53ef\u72ec\u7acb\u6267\u884c\u7684\u7a0b\u5e8f\uff0c\u6bcf\u4e2a Go \u5e94\u7528\u7a0b\u5e8f\u90fd\u5305\u542b\u4e00\u4e2a\u540d\u4e3a main \u7684\u5305\u3002 \u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5305\u542b\u4e0d\u540c\u7684\u5305\uff0c\u800c\u4e14\u5373\u4f7f\u4f60\u53ea\u4f7f\u7528 main \u5305\u4e5f\u4e0d\u5fc5\u628a\u6240\u6709\u7684\u4ee3\u7801\u90fd\u5199\u5728\u4e00\u4e2a\u5de8\u5927\u7684\u6587\u4ef6\u91cc\uff1a\u4f60\u53ef\u4ee5\u7528\u4e00\u4e9b\u8f83\u5c0f\u7684\u6587\u4ef6\uff0c\u5e76\u4e14\u5728\u6bcf\u4e2a\u6587\u4ef6\u975e\u6ce8\u91ca\u7684\u7b2c\u4e00\u884c\u90fd\u4f7f\u7528 package main \u6765\u6307\u660e\u8fd9\u4e9b\u6587\u4ef6\u90fd\u5c5e\u4e8e main \u5305\u3002\u5982\u679c\u4f60\u6253\u7b97\u7f16\u8bd1\u5305\u540d\u4e0d\u662f\u4e3a main \u7684\u6e90\u6587\u4ef6\uff0c\u5982 pack1 \uff0c\u7f16\u8bd1\u540e\u4ea7\u751f\u7684\u5bf9\u8c61\u6587\u4ef6\u5c06\u4f1a\u662f pack1.a \u800c\u4e0d\u662f\u53ef\u6267\u884c\u7a0b\u5e8f\u3002\u53e6\u5916\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6240\u6709\u7684\u5305\u540d\u90fd\u5e94\u8be5\u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\u3002 \u6807\u51c6\u5e93 \u5728 Go \u7684\u5b89\u88c5\u6587\u4ef6\u91cc\u5305\u542b\u4e86\u4e00\u4e9b\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u7684\u5305\uff0c\u5373\u6807\u51c6\u5e93\u3002\u5728 Windows \u4e0b\uff0c\u6807\u51c6\u5e93\u7684\u4f4d\u7f6e\u5728 Go \u6839\u76ee\u5f55\u4e0b\u7684\u5b50\u76ee\u5f55 pkg\\windows_386 \u4e2d\uff1b\u5728 Linux \u4e0b\uff0c\u6807\u51c6\u5e93\u5728 Go \u6839\u76ee\u5f55\u4e0b\u7684\u5b50\u76ee\u5f55 pkg\\linux_amd64 \u4e2d\uff08\u5982\u679c\u662f\u5b89\u88c5\u7684\u662f 32 \u4f4d\uff0c\u5219\u5728 linux_386 \u76ee\u5f55\u4e2d\uff09\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6807\u51c6\u5305\u4f1a\u5b58\u653e\u5728 $GOROOT/pkg/$GOOS_$GOARCH/ \u76ee\u5f55\u4e0b\u3002 Go \u7684\u6807\u51c6\u5e93\u5305\u542b\u4e86\u5927\u91cf\u7684\u5305\uff08\u5982\uff1a fmt \u548c os \uff09\uff0c\u4f46\u662f\u4f60\u4e5f\u53ef\u4ee5\u521b\u5efa\u81ea\u5df1\u7684\u5305\uff08 \u7b2c 9 \u7ae0 \uff09\u3002 \u5982\u679c\u60f3\u8981\u6784\u5efa\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u5219\u5305\u548c\u5305\u5185\u7684\u6587\u4ef6\u90fd\u5fc5\u987b\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u8fdb\u884c\u7f16\u8bd1\u3002\u5305\u7684\u4f9d\u8d56\u5173\u7cfb\u51b3\u5b9a\u4e86\u5176\u6784\u5efa\u987a\u5e8f\u3002 \u5c5e\u4e8e\u540c\u4e00\u4e2a\u5305\u7684\u6e90\u6587\u4ef6\u5fc5\u987b\u5168\u90e8\u88ab\u4e00\u8d77\u7f16\u8bd1\uff0c\u4e00\u4e2a\u5305\u5373\u662f\u7f16\u8bd1\u65f6\u7684\u4e00\u4e2a\u5355\u5143\uff0c\u56e0\u6b64\u6839\u636e\u60ef\u4f8b\uff0c\u6bcf\u4e2a\u76ee\u5f55\u90fd\u53ea\u5305\u542b\u4e00\u4e2a\u5305\u3002 \u5982\u679c\u5bf9\u4e00\u4e2a\u5305\u8fdb\u884c\u66f4\u6539\u6216\u91cd\u65b0\u7f16\u8bd1\uff0c\u6240\u6709\u5f15\u7528\u4e86\u8fd9\u4e2a\u5305\u7684\u5ba2\u6237\u7aef\u7a0b\u5e8f\u90fd\u5fc5\u987b\u5168\u90e8\u91cd\u65b0\u7f16\u8bd1\u3002 Go \u4e2d\u7684\u5305\u6a21\u578b\u91c7\u7528\u4e86\u663e\u5f0f\u4f9d\u8d56\u5173\u7cfb\u7684\u673a\u5236\u6765\u8fbe\u5230\u5feb\u901f\u7f16\u8bd1\u7684\u76ee\u7684\uff0c\u7f16\u8bd1\u5668\u4f1a\u4ece\u540e\u7f00\u540d\u4e3a .o \u7684\u5bf9\u8c61\u6587\u4ef6\uff08\u9700\u8981\u4e14\u53ea\u9700\u8981\u8fd9\u4e2a\u6587\u4ef6\uff09\u4e2d\u63d0\u53d6\u4f20\u9012\u4f9d\u8d56\u7c7b\u578b\u7684\u4fe1\u606f\u3002 \u5982\u679c A.go \u4f9d\u8d56 B.go \uff0c\u800c B.go \u53c8\u4f9d\u8d56 C.go \uff1a \u7f16\u8bd1 C.go , B.go , \u7136\u540e\u662f A.go . \u4e3a\u4e86\u7f16\u8bd1 A.go , \u7f16\u8bd1\u5668\u8bfb\u53d6\u7684\u662f B.o \u800c\u4e0d\u662f C.o . \u8fd9\u79cd\u673a\u5236\u5bf9\u4e8e\u7f16\u8bd1\u5927\u578b\u7684\u9879\u76ee\u65f6\u53ef\u4ee5\u663e\u8457\u5730\u63d0\u5347\u7f16\u8bd1\u901f\u5ea6\u3002 \u6bcf\u4e00\u6bb5\u4ee3\u7801\u53ea\u4f1a\u88ab\u7f16\u8bd1\u4e00\u6b21 \u4e00\u4e2a Go \u7a0b\u5e8f\u662f\u901a\u8fc7 import \u5173\u952e\u5b57\u5c06\u4e00\u7ec4\u5305\u94fe\u63a5\u5728\u4e00\u8d77\u3002 import \"fmt\" \u544a\u8bc9 Go \u7f16\u8bd1\u5668\u8fd9\u4e2a\u7a0b\u5e8f\u9700\u8981\u4f7f\u7528 fmt \u5305\uff08\u7684\u51fd\u6570\uff0c\u6216\u5176\u4ed6\u5143\u7d20\uff09\uff0c fmt \u5305\u5b9e\u73b0\u4e86\u683c\u5f0f\u5316 IO\uff08\u8f93\u5165/\u8f93\u51fa\uff09\u7684\u51fd\u6570\u3002\u5305\u540d\u88ab\u5c01\u95ed\u5728\u534a\u89d2\u53cc\u5f15\u53f7 \"\" \u4e2d\u3002\u5982\u679c\u4f60\u6253\u7b97\u4ece\u5df2\u7f16\u8bd1\u7684\u5305\u4e2d\u5bfc\u5165\u5e76\u52a0\u8f7d\u516c\u5f00\u58f0\u660e\u7684\u65b9\u6cd5\uff0c\u4e0d\u9700\u8981\u63d2\u5165\u5df2\u7f16\u8bd1\u5305\u7684\u6e90\u4ee3\u7801\u3002 \u5982\u679c\u9700\u8981\u591a\u4e2a\u5305\uff0c\u5b83\u4eec\u53ef\u4ee5\u88ab\u5206\u522b\u5bfc\u5165\uff1a import \"fmt\" import \"os\" \u6216\uff1a import \"fmt\" ; import \"os\" \u4f46\u662f\u8fd8\u6709\u66f4\u77ed\u4e14\u66f4\u4f18\u96c5\u7684\u65b9\u6cd5\uff08\u88ab\u79f0\u4e3a\u56e0\u5f0f\u5206\u89e3\u5173\u952e\u5b57\uff0c\u8be5\u65b9\u6cd5\u540c\u6837\u9002\u7528\u4e8e const \u3001 var \u548c type \u7684\u58f0\u660e\u6216\u5b9a\u4e49\uff09\uff1a import ( \"fmt\" \"os\" ) \u5b83\u751a\u81f3\u8fd8\u53ef\u4ee5\u66f4\u77ed\u7684\u5f62\u5f0f\uff0c\u4f46\u4f7f\u7528 gofmt \u540e\u5c06\u4f1a\u88ab\u5f3a\u5236\u6362\u884c\uff1a import ( \"fmt\" ; \"os\" ) \u5f53\u4f60\u5bfc\u5165\u591a\u4e2a\u5305\u65f6\uff0c\u6700\u597d\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\u6392\u5217\u5305\u540d\uff0c\u8fd9\u6837\u505a\u66f4\u52a0\u6e05\u6670\u6613\u8bfb\u3002 \u5982\u679c\u5305\u540d\u4e0d\u662f\u4ee5 . \u6216 / \u5f00\u5934\uff0c\u5982 \"fmt\" \u6216\u8005 \"container/list\" \uff0c\u5219 Go \u4f1a\u5728\u5168\u5c40\u6587\u4ef6\u8fdb\u884c\u67e5\u627e\uff1b\u5982\u679c\u5305\u540d\u4ee5 ./ \u5f00\u5934\uff0c\u5219 Go \u4f1a\u5728\u76f8\u5bf9\u76ee\u5f55\u4e2d\u67e5\u627e\uff1b\u5982\u679c\u5305\u540d\u4ee5 / \u5f00\u5934\uff08\u5728 Windows \u4e0b\u4e5f\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528\uff09\uff0c\u5219\u4f1a\u5728\u7cfb\u7edf\u7684\u7edd\u5bf9\u8def\u5f84\u4e2d\u67e5\u627e\u3002 \u8bd1\u8005\u6ce8\uff1a\u4ee5\u76f8\u5bf9\u8def\u5f84\u5728GOPATH\u4e0b\u5bfc\u5165\u5305\u4f1a\u4ea7\u751f\u62a5\u9519\u4fe1\u606f \u62a5\u9519\u4fe1\u606f\uff1alocal import \"./XXX\" in non-local package \u5f15\u7528\uff1a Go programs cannot use relative import paths within a work space. \u6ce8\u89e3\uff1a\u5728GOPATH\u5916\u53ef\u4ee5\u4ee5\u76f8\u5bf9\u8def\u5f84\u7684\u5f62\u5f0f\u6267\u884cgo build\uff08go install \u4e0d\u53ef\u4ee5\uff09 \u5bfc\u5165\u5305\u5373\u7b49\u540c\u4e8e\u5305\u542b\u4e86\u8fd9\u4e2a\u5305\u7684\u6240\u6709\u7684\u4ee3\u7801\u5bf9\u8c61\u3002 \u9664\u4e86\u7b26\u53f7 _ \uff0c\u5305\u4e2d\u6240\u6709\u4ee3\u7801\u5bf9\u8c61\u7684\u6807\u8bc6\u7b26\u5fc5\u987b\u662f\u552f\u4e00\u7684\uff0c\u4ee5\u907f\u514d\u540d\u79f0\u51b2\u7a81\u3002\u4f46\u662f\u76f8\u540c\u7684\u6807\u8bc6\u7b26\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u5305\u4e2d\u4f7f\u7528\uff0c\u56e0\u4e3a\u53ef\u4ee5\u4f7f\u7528\u5305\u540d\u6765\u533a\u5206\u5b83\u4eec\u3002 \u5305\u901a\u8fc7\u4e0b\u9762\u8fd9\u4e2a\u88ab\u7f16\u8bd1\u5668\u5f3a\u5236\u6267\u884c\u7684\u89c4\u5219\u6765\u51b3\u5b9a\u662f\u5426\u5c06\u81ea\u8eab\u7684\u4ee3\u7801\u5bf9\u8c61\u66b4\u9732\u7ed9\u5916\u90e8\u6587\u4ef6\uff1a \u53ef\u89c1\u6027\u89c4\u5219 \u5f53\u6807\u8bc6\u7b26\uff08\u5305\u62ec\u5e38\u91cf\u3001\u53d8\u91cf\u3001\u7c7b\u578b\u3001\u51fd\u6570\u540d\u3001\u7ed3\u6784\u5b57\u6bb5\u7b49\u7b49\uff09\u4ee5\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\u5f00\u5934\uff0c\u5982\uff1aGroup1\uff0c\u90a3\u4e48\u4f7f\u7528\u8fd9\u79cd\u5f62\u5f0f\u7684\u6807\u8bc6\u7b26\u7684\u5bf9\u8c61\u5c31\u53ef\u4ee5\u88ab\u5916\u90e8\u5305\u7684\u4ee3\u7801\u6240\u4f7f\u7528\uff08\u5ba2\u6237\u7aef\u7a0b\u5e8f\u9700\u8981\u5148\u5bfc\u5165\u8fd9\u4e2a\u5305\uff09\uff0c\u8fd9\u88ab\u79f0\u4e3a\u5bfc\u51fa\uff08\u50cf\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u4e2d\u7684 public\uff09\uff1b\u6807\u8bc6\u7b26\u5982\u679c\u4ee5\u5c0f\u5199\u5b57\u6bcd\u5f00\u5934\uff0c\u5219\u5bf9\u5305\u5916\u662f\u4e0d\u53ef\u89c1\u7684\uff0c\u4f46\u662f\u5b83\u4eec\u5728\u6574\u4e2a\u5305\u7684\u5185\u90e8\u662f\u53ef\u89c1\u5e76\u4e14\u53ef\u7528\u7684\uff08\u50cf\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u4e2d\u7684 private \uff09\u3002 \uff08\u5927\u5199\u5b57\u6bcd\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55 Unicode \u7f16\u7801\u7684\u5b57\u7b26\uff0c\u6bd4\u5982\u5e0c\u814a\u6587\uff0c\u4e0d\u4ec5\u4ec5\u662f ASCII \u7801\u4e2d\u7684\u5927\u5199\u5b57\u6bcd\uff09\u3002 \u56e0\u6b64\uff0c\u5728\u5bfc\u5165\u4e00\u4e2a\u5916\u90e8\u5305\u540e\uff0c\u80fd\u591f\u4e14\u53ea\u80fd\u591f\u8bbf\u95ee\u8be5\u5305\u4e2d\u5bfc\u51fa\u7684\u5bf9\u8c61\u3002 \u5047\u8bbe\u5728\u5305 pack1 \u4e2d\u6211\u4eec\u6709\u4e00\u4e2a\u53d8\u91cf\u6216\u51fd\u6570\u53eb\u505a Thing \uff08\u4ee5 T \u5f00\u5934\uff0c\u6240\u4ee5\u5b83\u80fd\u591f\u88ab\u5bfc\u51fa\uff09\uff0c\u90a3\u4e48\u5728\u5f53\u524d\u5305\u4e2d\u5bfc\u5165 pack1 \u5305\uff0c Thing \u5c31\u53ef\u4ee5\u50cf\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u90a3\u6837\u4f7f\u7528\u70b9\u6807\u8bb0\u6765\u8c03\u7528\uff1a pack1.Thing \uff08pack1 \u5728\u8fd9\u91cc\u662f\u4e0d\u53ef\u4ee5\u7701\u7565\u7684\uff09\u3002 \u56e0\u6b64\u5305\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u547d\u540d\u7a7a\u95f4\u4f7f\u7528\uff0c\u5e2e\u52a9\u907f\u514d\u547d\u540d\u51b2\u7a81\uff08\u540d\u79f0\u51b2\u7a81\uff09\uff1a\u4e24\u4e2a\u5305\u4e2d\u7684\u540c\u540d\u53d8\u91cf\u7684\u533a\u522b\u5728\u4e8e\u5b83\u4eec\u7684\u5305\u540d\uff0c\u4f8b\u5982 pack1.Thing \u548c pack2.Thing \u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u5305\u7684\u522b\u540d\u6765\u89e3\u51b3\u5305\u540d\u4e4b\u95f4\u7684\u540d\u79f0\u51b2\u7a81\uff0c\u6216\u8005\u8bf4\u6839\u636e\u4f60\u7684\u4e2a\u4eba\u559c\u597d\u5bf9\u5305\u540d\u8fdb\u884c\u91cd\u65b0\u8bbe\u7f6e\uff0c\u5982\uff1a import fm \"fmt\" \u3002\u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u5305\u7684\u522b\u540d\uff1a \u793a\u4f8b 4.2 alias.go package main import fm \"fmt\" // alias3 func main () { fm . Println ( \"hello, world\" ) } \u6ce8\u610f\u4e8b\u9879 \u5982\u679c\u4f60\u5bfc\u5165\u4e86\u4e00\u4e2a\u5305\u5374\u6ca1\u6709\u4f7f\u7528\u5b83\uff0c\u5219\u4f1a\u5728\u6784\u5efa\u7a0b\u5e8f\u65f6\u5f15\u53d1\u9519\u8bef\uff0c\u5982 imported and not used: os \uff0c\u8fd9\u6b63\u662f\u9075\u5faa\u4e86 Go \u7684\u683c\u8a00\uff1a\u201c\u6ca1\u6709\u4e0d\u5fc5\u8981\u7684\u4ee3\u7801\uff01\u201d\u3002 \u5305\u7684\u5206\u7ea7\u58f0\u660e\u548c\u521d\u59cb\u5316 \u4f60\u53ef\u4ee5\u5728\u4f7f\u7528 import \u5bfc\u5165\u5305\u4e4b\u540e\u5b9a\u4e49\u6216\u58f0\u660e 0 \u4e2a\u6216\u591a\u4e2a\u5e38\u91cf (const)\u3001\u53d8\u91cf (var) \u548c\u7c7b\u578b (type)\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u7684\u4f5c\u7528\u57df\u90fd\u662f\u5168\u5c40\u7684\uff08\u5728\u672c\u5305\u8303\u56f4\u5185\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u88ab\u672c\u5305\u4e2d\u6240\u6709\u7684\u51fd\u6570\u8c03\u7528\uff08\u5982 gotemplate.go \u6e90\u6587\u4ef6\u4e2d\u7684 c \u548c v \uff09\uff0c\u7136\u540e\u58f0\u660e\u4e00\u4e2a\u6216\u591a\u4e2a\u51fd\u6570 (func)\u3002 4.2.2 \u51fd\u6570 \u00b6 \u8fd9\u662f\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6700\u7b80\u5355\u7684\u683c\u5f0f\uff1a func functionName () \u4f60\u53ef\u4ee5\u5728\u62ec\u53f7 () \u4e2d\u5199\u5165 0 \u4e2a\u6216\u591a\u4e2a\u51fd\u6570\u7684\u53c2\u6570\uff08\u4f7f\u7528\u9017\u53f7 , \u5206\u9694\uff09\uff0c\u6bcf\u4e2a\u53c2\u6570\u7684\u540d\u79f0\u540e\u9762\u5fc5\u987b\u7d27\u8ddf\u7740\u8be5\u53c2\u6570\u7684\u7c7b\u578b\u3002 main() \u51fd\u6570\u662f\u6bcf\u4e00\u4e2a\u53ef\u6267\u884c\u7a0b\u5e8f\u6240\u5fc5\u987b\u5305\u542b\u7684\uff0c\u4e00\u822c\u6765\u8bf4\u90fd\u662f\u5728\u542f\u52a8\u540e\u7b2c\u4e00\u4e2a\u6267\u884c\u7684\u51fd\u6570\uff08\u5982\u679c\u6709 init() \u51fd\u6570\u5219\u4f1a\u5148\u6267\u884c\u8be5\u51fd\u6570\uff09\u3002\u5982\u679c\u4f60\u7684 main \u5305\u7684\u6e90\u4ee3\u7801\u6ca1\u6709\u5305\u542b main() \u51fd\u6570\uff0c\u5219\u4f1a\u5f15\u53d1\u6784\u5efa\u9519\u8bef undefined: main.main \u3002 main() \u51fd\u6570\u65e2\u6ca1\u6709\u53c2\u6570\uff0c\u4e5f\u6ca1\u6709\u8fd4\u56de\u7c7b\u578b\uff08\u4e0e C \u5bb6\u65cf\u4e2d\u7684\u5176\u5b83\u8bed\u8a00\u6070\u597d\u76f8\u53cd\uff09\u3002\u5982\u679c\u4f60\u4e0d\u5c0f\u5fc3\u4e3a main() \u51fd\u6570\u6dfb\u52a0\u4e86\u53c2\u6570\u6216\u8005\u8fd4\u56de\u7c7b\u578b\uff0c\u5c06\u4f1a\u5f15\u53d1\u6784\u5efa\u9519\u8bef\uff1a func main must have no arguments and no return values results. \u5728\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u5e76\u5b8c\u6210\u521d\u59cb\u5316\u540e\uff0c\u7b2c\u4e00\u4e2a\u8c03\u7528\uff08\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\uff09\u7684\u51fd\u6570\u662f main.main() \uff08\u5982\uff1aC \u8bed\u8a00\uff09\uff0c\u8be5\u51fd\u6570\u4e00\u65e6\u8fd4\u56de\u5c31\u8868\u793a\u7a0b\u5e8f\u5df2\u6210\u529f\u6267\u884c\u5e76\u7acb\u5373\u9000\u51fa\u3002 \u51fd\u6570\u91cc\u7684\u4ee3\u7801\uff08\u51fd\u6570\u4f53\uff09\u4f7f\u7528\u5927\u62ec\u53f7 {} \u62ec\u8d77\u6765\u3002 \u5de6\u5927\u62ec\u53f7 { \u5fc5\u987b\u4e0e\u65b9\u6cd5\u7684\u58f0\u660e\u653e\u5728\u540c\u4e00\u884c\uff0c\u8fd9\u662f\u7f16\u8bd1\u5668\u7684\u5f3a\u5236\u89c4\u5b9a\uff0c\u5426\u5219\u4f60\u5728\u4f7f\u7528 gofmt \u65f6\u5c31\u4f1a\u51fa\u73b0\u9519\u8bef\u63d0\u793a\uff1a `build-error: syntax error: unexpected semicolon or newline before {` \uff08\u8fd9\u662f\u56e0\u4e3a\u7f16\u8bd1\u5668\u4f1a\u4ea7\u751f func main() ; \u8fd9\u6837\u7684\u7ed3\u679c\uff0c\u5f88\u660e\u663e\u8fd9\u662f\u9519\u8bef\u7684\uff09 Go \u8bed\u8a00\u867d\u7136\u770b\u8d77\u6765\u4e0d\u4f7f\u7528\u5206\u53f7\u4f5c\u4e3a\u8bed\u53e5\u7684\u7ed3\u675f\uff0c\u4f46\u5b9e\u9645\u4e0a\u8fd9\u4e00\u8fc7\u7a0b\u662f\u7531\u7f16\u8bd1\u5668\u81ea\u52a8\u5b8c\u6210\uff0c\u56e0\u6b64\u624d\u4f1a\u5f15\u53d1\u50cf\u4e0a\u9762\u8fd9\u6837\u7684\u9519\u8bef \u53f3\u5927\u62ec\u53f7 } \u9700\u8981\u88ab\u653e\u5728\u7d27\u63a5\u7740\u51fd\u6570\u4f53\u7684\u4e0b\u4e00\u884c\u3002\u5982\u679c\u4f60\u7684\u51fd\u6570\u975e\u5e38\u7b80\u77ed\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5c06\u5b83\u4eec\u653e\u5728\u540c\u4e00\u884c\uff1a func Sum ( a , b int ) int { return a + b } \u5bf9\u4e8e\u5927\u62ec\u53f7 {} \u7684\u4f7f\u7528\u89c4\u5219\u5728\u4efb\u4f55\u65f6\u5019\u90fd\u662f\u76f8\u540c\u7684\uff08\u5982\uff1a if \u8bed\u53e5\u7b49\uff09\u3002 \u56e0\u6b64\u7b26\u5408\u89c4\u8303\u7684\u51fd\u6570\u4e00\u822c\u5199\u6210\u5982\u4e0b\u7684\u5f62\u5f0f\uff1a func functionName ( parameter_list ) ( return_value_list ) { \u2026 } \u5176\u4e2d\uff1a parameter_list \u7684\u5f62\u5f0f\u4e3a (param1 type1, param2 type2, \u2026) return_value_list \u7684\u5f62\u5f0f\u4e3a (ret1 type1, ret2 type2, \u2026) \u53ea\u6709\u5f53\u67d0\u4e2a\u51fd\u6570\u9700\u8981\u88ab\u5916\u90e8\u5305\u8c03\u7528\u7684\u65f6\u5019\u624d\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u5f00\u5934\uff0c\u5e76\u9075\u5faa Pascal \u547d\u540d\u6cd5\uff1b\u5426\u5219\u5c31\u9075\u5faa\u9a86\u9a7c\u547d\u540d\u6cd5\uff0c\u5373\u7b2c\u4e00\u4e2a\u5355\u8bcd\u7684\u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4f59\u5355\u8bcd\u7684\u9996\u5b57\u6bcd\u5927\u5199\u3002 \u4e0b\u9762\u8fd9\u4e00\u884c\u8c03\u7528\u4e86 fmt \u5305\u4e2d\u7684 Println \u51fd\u6570\uff0c\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u8f93\u51fa\u5230\u63a7\u5236\u53f0\uff0c\u5e76\u5728\u6700\u540e\u81ea\u52a8\u589e\u52a0\u6362\u884c\u5b57\u7b26 \\n \uff1a fmt . Println \uff08 \"hello, world\" \uff09 \u4f7f\u7528 fmt.Print(\"hello, world\\n\") \u53ef\u4ee5\u5f97\u5230\u76f8\u540c\u7684\u7ed3\u679c\u3002 Print \u548c Println \u8fd9\u4e24\u4e2a\u51fd\u6570\u4e5f\u652f\u6301\u4f7f\u7528\u53d8\u91cf\uff0c\u5982\uff1a fmt.Println(arr) \u3002\u5982\u679c\u6ca1\u6709\u7279\u522b\u6307\u5b9a\uff0c\u5b83\u4eec\u4f1a\u4ee5\u9ed8\u8ba4\u7684\u6253\u5370\u683c\u5f0f\u5c06\u53d8\u91cf arr \u8f93\u51fa\u5230\u63a7\u5236\u53f0\u3002 \u5355\u7eaf\u5730\u6253\u5370\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216\u53d8\u91cf\u751a\u81f3\u53ef\u4ee5\u4f7f\u7528\u9884\u5b9a\u4e49\u7684\u65b9\u6cd5\u6765\u5b9e\u73b0\uff0c\u5982\uff1a print \u3001 println\uff1aprint(\"ABC\") \u3001 println(\"ABC\") \u3001 println(i) \uff08\u5e26\u4e00\u4e2a\u53d8\u91cf i \uff09\u3002 \u8fd9\u4e9b\u51fd\u6570\u53ea\u53ef\u4ee5\u7528\u4e8e\u8c03\u8bd5\u9636\u6bb5\uff0c\u5728\u90e8\u7f72\u7a0b\u5e8f\u7684\u65f6\u5019\u52a1\u5fc5\u5c06\u5b83\u4eec\u66ff\u6362\u6210 fmt \u4e2d\u7684\u76f8\u5173\u51fd\u6570\u3002 \u5f53\u88ab\u8c03\u7528\u51fd\u6570\u7684\u4ee3\u7801\u6267\u884c\u5230\u7ed3\u675f\u7b26 } \u6216\u8fd4\u56de\u8bed\u53e5\u65f6\u5c31\u4f1a\u8fd4\u56de\uff0c\u7136\u540e\u7a0b\u5e8f\u7ee7\u7eed\u6267\u884c\u8c03\u7528\u8be5\u51fd\u6570\u4e4b\u540e\u7684\u4ee3\u7801\u3002 \u7a0b\u5e8f\u6b63\u5e38\u9000\u51fa\u7684\u4ee3\u7801\u4e3a 0 \u5373 Program exited with code 0 \uff1b\u5982\u679c\u7a0b\u5e8f\u56e0\u4e3a\u5f02\u5e38\u800c\u88ab\u7ec8\u6b62\uff0c\u5219\u4f1a\u8fd4\u56de\u975e\u96f6\u503c\uff0c\u5982\uff1a 1 \u3002\u8fd9\u4e2a\u6570\u503c\u53ef\u4ee5\u7528\u6765\u6d4b\u8bd5\u662f\u5426\u6210\u529f\u6267\u884c\u4e00\u4e2a\u7a0b\u5e8f\u3002 4.2.3 \u6ce8\u91ca \u00b6 \u793a\u4f8b 4.2 hello_world2.go package main import \"fmt\" // Package implementing formatted I/O. func main () { fmt . Printf ( \"\u039a\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1 \u03ba\u03cc\u03c3\u03bc\u03b5; or \u3053\u3093\u306b\u3061\u306f \u4e16\u754c\\n\" ) } \u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u901a\u8fc7\u6253\u5370 \u039a\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1 \u03ba\u03cc\u03c3\u03bc\u03b5; or \u3053\u3093\u306b\u3061\u306f \u4e16\u754c \u5c55\u793a\u4e86\u5982\u4f55\u5728 Go \u4e2d\u4f7f\u7528\u56fd\u9645\u5316\u5b57\u7b26\uff0c\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u6ce8\u91ca\u3002 \u6ce8\u91ca\u4e0d\u4f1a\u88ab\u7f16\u8bd1\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7 godoc \u6765\u4f7f\u7528\uff08 \u7b2c 3.6 \u8282 \uff09\u3002 \u5355\u884c\u6ce8\u91ca\u662f\u6700\u5e38\u89c1\u7684\u6ce8\u91ca\u5f62\u5f0f\uff0c\u4f60\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u4f7f\u7528\u4ee5 // \u5f00\u5934\u7684\u5355\u884c\u6ce8\u91ca\u3002\u591a\u884c\u6ce8\u91ca\u4e5f\u53eb\u5757\u6ce8\u91ca\uff0c\u5747\u5df2\u4ee5 /* \u5f00\u5934\uff0c\u5e76\u4ee5 */ \u7ed3\u5c3e\uff0c\u4e14\u4e0d\u53ef\u4ee5\u5d4c\u5957\u4f7f\u7528\uff0c\u591a\u884c\u6ce8\u91ca\u4e00\u822c\u7528\u4e8e\u5305\u7684\u6587\u6863\u63cf\u8ff0\u6216\u6ce8\u91ca\u6210\u5757\u7684\u4ee3\u7801\u7247\u6bb5\u3002 \u6bcf\u4e00\u4e2a\u5305\u5e94\u8be5\u6709\u76f8\u5173\u6ce8\u91ca\uff0c\u5728 package \u8bed\u53e5\u4e4b\u524d\u7684\u5757\u6ce8\u91ca\u5c06\u88ab\u9ed8\u8ba4\u8ba4\u4e3a\u662f\u8fd9\u4e2a\u5305\u7684\u6587\u6863\u8bf4\u660e\uff0c\u5176\u4e2d\u5e94\u8be5\u63d0\u4f9b\u4e00\u4e9b\u76f8\u5173\u4fe1\u606f\u5e76\u5bf9\u6574\u4f53\u529f\u80fd\u505a\u7b80\u8981\u7684\u4ecb\u7ecd\u3002\u4e00\u4e2a\u5305\u53ef\u4ee5\u5206\u6563\u5728\u591a\u4e2a\u6587\u4ef6\u4e2d\uff0c\u4f46\u662f\u53ea\u9700\u8981\u5728\u5176\u4e2d\u4e00\u4e2a\u8fdb\u884c\u6ce8\u91ca\u8bf4\u660e\u5373\u53ef\u3002\u5f53\u5f00\u53d1\u4eba\u5458\u9700\u8981\u4e86\u89e3\u5305\u7684\u4e00\u4e9b\u60c5\u51b5\u65f6\uff0c\u81ea\u7136\u4f1a\u7528 godoc \u6765\u663e\u793a\u5305\u7684\u6587\u6863\u8bf4\u660e\uff0c\u5728\u9996\u884c\u7684\u7b80\u8981\u6ce8\u91ca\u4e4b\u540e\u53ef\u4ee5\u7528\u6210\u6bb5\u7684\u6ce8\u91ca\u6765\u8fdb\u884c\u66f4\u8be6\u7ec6\u7684\u8bf4\u660e\uff0c\u800c\u4e0d\u5fc5\u62e5\u6324\u5728\u4e00\u8d77\u3002\u53e6\u5916\uff0c\u5728\u591a\u6bb5\u6ce8\u91ca\u4e4b\u95f4\u5e94\u4ee5\u7a7a\u884c\u5206\u9694\u52a0\u4ee5\u533a\u5206\u3002 \u793a\u4f8b\uff1a // Package superman implements methods for saving the world. // // Experience has shown that a small number of procedures can prove // helpful when attempting to save the world. package superman \u51e0\u4e4e\u6240\u6709\u5168\u5c40\u4f5c\u7528\u57df\u7684\u7c7b\u578b\u3001\u5e38\u91cf\u3001\u53d8\u91cf\u3001\u51fd\u6570\u548c\u88ab\u5bfc\u51fa\u7684\u5bf9\u8c61\u90fd\u5e94\u8be5\u6709\u4e00\u4e2a\u5408\u7406\u7684\u6ce8\u91ca\u3002\u5982\u679c\u8fd9\u79cd\u6ce8\u91ca\uff08\u79f0\u4e3a\u6587\u6863\u6ce8\u91ca\uff09\u51fa\u73b0\u5728\u51fd\u6570\u524d\u9762\uff0c\u4f8b\u5982\u51fd\u6570 Abcd\uff0c\u5219\u8981\u4ee5 \"Abcd...\" \u4f5c\u4e3a\u5f00\u5934\u3002 \u793a\u4f8b\uff1a // enterOrbit causes Superman to fly into low Earth orbit, a position // that presents several possibilities for planet salvation. func enterOrbit () error { ... } godoc \u5de5\u5177\uff08 \u7b2c 3.6 \u8282 \uff09\u4f1a\u6536\u96c6\u8fd9\u4e9b\u6ce8\u91ca\u5e76\u4ea7\u751f\u4e00\u4e2a\u6280\u672f\u6587\u6863\u3002 4.2.4 \u7c7b\u578b \u00b6 \u53d8\u91cf\uff08\u6216\u5e38\u91cf\uff09\u5305\u542b\u6570\u636e\uff0c\u8fd9\u4e9b\u6570\u636e\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u7b80\u79f0\u7c7b\u578b\u3002\u4f7f\u7528 var \u58f0\u660e\u7684\u53d8\u91cf\u7684\u503c\u4f1a\u81ea\u52a8\u521d\u59cb\u5316\u4e3a\u8be5\u7c7b\u578b\u7684\u96f6\u503c\u3002\u7c7b\u578b\u5b9a\u4e49\u4e86\u67d0\u4e2a\u53d8\u91cf\u7684\u503c\u7684\u96c6\u5408\u4e0e\u53ef\u5bf9\u5176\u8fdb\u884c\u64cd\u4f5c\u7684\u96c6\u5408\u3002 \u7c7b\u578b\u53ef\u4ee5\u662f\u57fa\u672c\u7c7b\u578b\uff0c\u5982\uff1a int \u3001 float \u3001 bool \u3001 string \uff1b\u7ed3\u6784\u5316\u7684\uff08\u590d\u5408\u7684\uff09\uff0c\u5982\uff1a struct \u3001 array \u3001\u5207\u7247 (slice)\u3001 map \u3001\u901a\u9053 (channel)\uff1b\u53ea\u63cf\u8ff0\u7c7b\u578b\u7684\u884c\u4e3a\u7684\uff0c\u5982\uff1a interface \u3002 \u7ed3\u6784\u5316\u7684\u7c7b\u578b\u6ca1\u6709\u771f\u6b63\u7684\u503c\uff0c\u5b83\u4f7f\u7528 nil \u4f5c\u4e3a\u9ed8\u8ba4\u503c\uff08\u5728 Objective-C \u4e2d\u662f nil\uff0c\u5728 Java \u4e2d\u662f null\uff0c\u5728 C \u548c C++ \u4e2d\u662f NULL \u6216 0\uff09\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cGo \u8bed\u8a00\u4e2d\u4e0d\u5b58\u5728\u7c7b\u578b\u7ee7\u627f\u3002 \u51fd\u6570\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u786e\u5b9a\u7684\u7c7b\u578b\uff0c\u5c31\u662f\u4ee5\u51fd\u6570\u4f5c\u4e3a\u8fd4\u56de\u7c7b\u578b\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u58f0\u660e\u8981\u5199\u5728\u51fd\u6570\u540d\u548c\u53ef\u9009\u7684\u53c2\u6570\u5217\u8868\u4e4b\u540e\uff0c\u4f8b\u5982\uff1a func FunctionName ( a typea , b typeb ) typeFunc \u4f60\u53ef\u4ee5\u5728\u51fd\u6570\u4f53\u4e2d\u7684\u67d0\u5904\u8fd4\u56de\u4f7f\u7528\u7c7b\u578b\u4e3a typeFunc \u7684\u53d8\u91cf var \uff1a return var \u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u62e5\u6709\u591a\u8fd4\u56de\u503c\uff0c\u8fd4\u56de\u7c7b\u578b\u4e4b\u95f4\u9700\u8981\u4f7f\u7528\u9017\u53f7\u5206\u5272\uff0c\u5e76\u4f7f\u7528\u5c0f\u62ec\u53f7 () \u5c06\u5b83\u4eec\u62ec\u8d77\u6765\uff0c\u5982\uff1a func FunctionName ( a typea , b typeb ) ( t1 type1 , t2 type2 ) \u793a\u4f8b\uff1a \u51fd\u6570 Atoi() \uff08 \u7b2c 4.7 \u8282 \uff09\uff1a func Atoi(s string) (i int, err error) \u8fd4\u56de\u7684\u5f62\u5f0f\uff1a return var1 , var2 \u8fd9\u79cd\u591a\u8fd4\u56de\u503c\u4e00\u822c\u7528\u4e8e\u5224\u65ad\u67d0\u4e2a\u51fd\u6570\u662f\u5426\u6267\u884c\u6210\u529f (true/false) \u6216\u4e0e\u5176\u5b83\u8fd4\u56de\u503c\u4e00\u540c\u8fd4\u56de\u9519\u8bef\u6d88\u606f\uff08\u8be6\u89c1\u4e4b\u540e\u7684\u5e76\u884c\u8d4b\u503c\uff09\u3002 \u4f7f\u7528 type \u5173\u952e\u5b57\u53ef\u4ee5\u5b9a\u4e49\u4f60\u81ea\u5df1\u7684\u7c7b\u578b\uff0c\u4f60\u53ef\u80fd\u60f3\u8981\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\uff08 \u7b2c 10 \u7ae0 \uff09\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u7c7b\u578b\u7684\u522b\u540d\uff0c\u5982\uff1a type IZ int \u8fd9\u91cc\u5e76\u4e0d\u662f\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u522b\u540d\uff0c\u56e0\u4e3a\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u5b9a\u4e49\u4e4b\u540e\u7684\u7c7b\u578b\u53ef\u4ee5\u62e5\u6709\u66f4\u591a\u7684\u7279\u6027\uff0c\u4e14\u5728\u7c7b\u578b\u8f6c\u6362\u65f6\u5fc5\u987b\u663e\u5f0f\u8f6c\u6362\u3002 \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u58f0\u660e\u53d8\u91cf\uff1a var a IZ = 5 \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u5230 int \u662f\u53d8\u91cf a \u7684\u5e95\u5c42\u7c7b\u578b\uff0c\u8fd9\u4e5f\u4f7f\u5f97\u5b83\u4eec\u4e4b\u95f4\u5b58\u5728\u76f8\u4e92\u8f6c\u6362\u7684\u53ef\u80fd\uff08 \u7b2c 4.2.6 \u8282 \uff09\u3002 \u5982\u679c\u4f60\u6709\u591a\u4e2a\u7c7b\u578b\u9700\u8981\u5b9a\u4e49\uff0c\u53ef\u4ee5\u4f7f\u7528\u56e0\u5f0f\u5206\u89e3\u5173\u952e\u5b57\u7684\u65b9\u5f0f\uff0c\u4f8b\u5982\uff1a type ( IZ int FZ float64 STR string ) \u6bcf\u4e2a\u503c\u90fd\u5fc5\u987b\u5728\u7ecf\u8fc7\u7f16\u8bd1\u540e\u5c5e\u4e8e\u67d0\u4e2a\u7c7b\u578b\uff08\u7f16\u8bd1\u5668\u5fc5\u987b\u80fd\u591f\u63a8\u65ad\u51fa\u6240\u6709\u503c\u7684\u7c7b\u578b\uff09\uff0c\u56e0\u4e3a Go \u8bed\u8a00\u662f\u4e00\u79cd\u9759\u6001\u7c7b\u578b\u8bed\u8a00\u3002 4.2.5 Go \u7a0b\u5e8f\u7684\u4e00\u822c\u7ed3\u6784 \u00b6 \u4e0b\u9762\u7684\u7a0b\u5e8f\u53ef\u4ee5\u88ab\u987a\u5229\u7f16\u8bd1\u4f46\u4ec0\u4e48\u90fd\u505a\u4e0d\u4e86\uff0c\u4e0d\u8fc7\u8fd9\u5f88\u597d\u5730\u5c55\u793a\u4e86\u4e00\u4e2a Go \u7a0b\u5e8f\u7684\u9996\u9009\u7ed3\u6784\u3002\u8fd9\u79cd\u7ed3\u6784\u5e76\u6ca1\u6709\u88ab\u5f3a\u5236\u8981\u6c42\uff0c\u7f16\u8bd1\u5668\u4e5f\u4e0d\u5173\u5fc3 main() \u51fd\u6570\u5728\u524d\u8fd8\u662f\u53d8\u91cf\u7684\u58f0\u660e\u5728\u524d\uff0c\u4f46\u4f7f\u7528\u7edf\u4e00\u7684\u7ed3\u6784\u80fd\u591f\u5728\u4ece\u4e0a\u81f3\u4e0b\u9605\u8bfb Go \u4ee3\u7801\u65f6\u6709\u66f4\u597d\u7684\u4f53\u9a8c\u3002 \u6240\u6709\u7684\u7ed3\u6784\u5c06\u5728\u8fd9\u4e00\u7ae0\u6216\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\u8fdb\u4e00\u6b65\u5730\u89e3\u91ca\u8bf4\u660e\uff0c\u4f46\u603b\u4f53\u601d\u8def\u5982\u4e0b\uff1a \u5728\u5b8c\u6210\u5305\u7684 import \u4e4b\u540e\uff0c\u5f00\u59cb\u5bf9\u5e38\u91cf\u3001\u53d8\u91cf\u548c\u7c7b\u578b\u7684\u5b9a\u4e49\u6216\u58f0\u660e\u3002 \u5982\u679c\u5b58\u5728 init() \u51fd\u6570\u7684\u8bdd\uff0c\u5219\u5bf9\u8be5\u51fd\u6570\u8fdb\u884c\u5b9a\u4e49\uff08\u8fd9\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u51fd\u6570\uff0c\u6bcf\u4e2a\u542b\u6709\u8be5\u51fd\u6570\u7684\u5305\u90fd\u4f1a\u9996\u5148\u6267\u884c\u8fd9\u4e2a\u51fd\u6570\uff09\u3002 \u5982\u679c\u5f53\u524d\u5305\u662f main \u5305\uff0c\u5219\u5b9a\u4e49 main() \u51fd\u6570\u3002 \u7136\u540e\u5b9a\u4e49\u5176\u4f59\u7684\u51fd\u6570\uff0c\u9996\u5148\u662f\u7c7b\u578b\u7684\u65b9\u6cd5\uff0c\u63a5\u7740\u662f\u6309\u7167 main() \u51fd\u6570\u4e2d\u5148\u540e\u8c03\u7528\u7684\u987a\u5e8f\u6765\u5b9a\u4e49\u76f8\u5173\u51fd\u6570\uff0c\u5982\u679c\u6709\u5f88\u591a\u51fd\u6570\uff0c\u5219\u53ef\u4ee5\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\u6765\u8fdb\u884c\u6392\u5e8f\u3002 \u793a\u4f8b 4.4 gotemplate.go package main import ( \"fmt\" ) const c = \"C\" var v int = 5 type T struct {} func init () { // initialization of package } func main () { var a int Func1 () // ... fmt . Println ( a ) } func ( t T ) Method1 () { //... } func Func1 () { // exported function Func1 //... } Go \u7a0b\u5e8f\u7684\u6267\u884c\uff08\u7a0b\u5e8f\u542f\u52a8\uff09\u987a\u5e8f\u5982\u4e0b\uff1a \u6309\u987a\u5e8f\u5bfc\u5165\u6240\u6709\u88ab main \u5305\u5f15\u7528\u7684\u5176\u5b83\u5305\uff0c\u7136\u540e\u5728\u6bcf\u4e2a\u5305\u4e2d\u6267\u884c\u5982\u4e0b\u6d41\u7a0b\uff1a \u5982\u679c\u8be5\u5305\u53c8\u5bfc\u5165\u4e86\u5176\u5b83\u7684\u5305\uff0c\u5219\u4ece\u7b2c\u4e00\u6b65\u5f00\u59cb\u9012\u5f52\u6267\u884c\uff0c\u4f46\u662f\u6bcf\u4e2a\u5305\u53ea\u4f1a\u88ab\u5bfc\u5165\u4e00\u6b21\u3002 \u7136\u540e\u4ee5\u76f8\u53cd\u7684\u987a\u5e8f\u5728\u6bcf\u4e2a\u5305\u4e2d\u521d\u59cb\u5316\u5e38\u91cf\u548c\u53d8\u91cf\uff0c\u5982\u679c\u8be5\u5305\u542b\u6709 init() \u51fd\u6570\u7684\u8bdd\uff0c\u5219\u8c03\u7528\u8be5\u51fd\u6570\u3002 \u5728\u5b8c\u6210\u8fd9\u4e00\u5207\u4e4b\u540e\uff0c main \u4e5f\u6267\u884c\u540c\u6837\u7684\u8fc7\u7a0b\uff0c\u6700\u540e\u8c03\u7528 main() \u51fd\u6570\u5f00\u59cb\u6267\u884c\u7a0b\u5e8f\u3002 4.2.6 \u7c7b\u578b\u8f6c\u6362 \u00b6 \u5728\u5fc5\u8981\u4ee5\u53ca\u53ef\u884c\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u7c7b\u578b\u7684\u503c\u53ef\u4ee5\u88ab\u8f6c\u6362\u6210\u53e6\u4e00\u79cd\u7c7b\u578b\u7684\u503c\u3002\u7531\u4e8e Go \u8bed\u8a00\u4e0d\u5b58\u5728\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362\uff0c\u56e0\u6b64\u6240\u6709\u7684\u8f6c\u6362\u90fd\u5fc5\u987b\u663e\u5f0f\u8bf4\u660e\uff0c\u5c31\u50cf\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u4e00\u6837\uff08\u7c7b\u578b\u5728\u8fd9\u91cc\u7684\u4f5c\u7528\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u79cd\u51fd\u6570\uff09\uff1a valueOfTypeB = typeB ( valueOfTypeA ) \u7c7b\u578b B \u7684\u503c = \u7c7b\u578b B(\u7c7b\u578b A \u7684\u503c) \u793a\u4f8b\uff1a a := 5.0 b := int ( a ) \u4f46\u8fd9\u53ea\u80fd\u5728\u5b9a\u4e49\u6b63\u786e\u7684\u60c5\u51b5\u4e0b\u8f6c\u6362\u6210\u529f\uff0c\u4f8b\u5982\u4ece\u4e00\u4e2a\u53d6\u503c\u8303\u56f4\u8f83\u5c0f\u7684\u7c7b\u578b\u8f6c\u6362\u5230\u4e00\u4e2a\u53d6\u503c\u8303\u56f4\u8f83\u5927\u7684\u7c7b\u578b\uff08\u4f8b\u5982\u5c06 int16 \u8f6c\u6362\u4e3a int32 \uff09\u3002\u5f53\u4ece\u4e00\u4e2a\u53d6\u503c\u8303\u56f4\u8f83\u5927\u7684\u8f6c\u6362\u5230\u53d6\u503c\u8303\u56f4\u8f83\u5c0f\u7684\u7c7b\u578b\u65f6\uff08\u4f8b\u5982\u5c06 int32 \u8f6c\u6362\u4e3a int16 \u6216\u5c06 float32 \u8f6c\u6362\u4e3a int \uff09\uff0c\u4f1a\u53d1\u751f\u7cbe\u5ea6\u4e22\u5931\uff08\u622a\u65ad\uff09\u7684\u60c5\u51b5\u3002\u5f53\u7f16\u8bd1\u5668\u6355\u6349\u5230\u975e\u6cd5\u7684\u7c7b\u578b\u8f6c\u6362\u65f6\u4f1a\u5f15\u53d1\u7f16\u8bd1\u65f6\u9519\u8bef\uff0c\u5426\u5219\u5c06\u5f15\u53d1\u8fd0\u884c\u65f6\u9519\u8bef\u3002 \u5177\u6709\u76f8\u540c\u5e95\u5c42\u7c7b\u578b\u7684\u53d8\u91cf\u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u8f6c\u6362\uff1a var a IZ = 5 c := int ( a ) d := IZ ( c ) 4.2.7 Go \u547d\u540d\u89c4\u8303 \u00b6 \u5e72\u51c0\u3001\u53ef\u8bfb\u7684\u4ee3\u7801\u548c\u7b80\u6d01\u6027\u662f Go \u8ffd\u6c42\u7684\u4e3b\u8981\u76ee\u6807\u3002\u901a\u8fc7 gofmt \u6765\u5f3a\u5236\u5b9e\u73b0\u7edf\u4e00\u7684\u4ee3\u7801\u98ce\u683c\u3002Go \u8bed\u8a00\u4e2d\u5bf9\u8c61\u7684\u547d\u540d\u4e5f\u5e94\u8be5\u662f\u7b80\u6d01\u4e14\u6709\u610f\u4e49\u7684\u3002\u50cf Java \u548c Python \u4e2d\u90a3\u6837\u4f7f\u7528\u6df7\u5408\u7740\u5927\u5c0f\u5199\u548c\u4e0b\u5212\u7ebf\u7684\u5197\u957f\u7684\u540d\u79f0\u4f1a\u4e25\u91cd\u964d\u4f4e\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u3002\u540d\u79f0\u4e0d\u9700\u8981\u6307\u51fa\u81ea\u5df1\u6240\u5c5e\u7684\u5305\uff0c\u56e0\u4e3a\u5728\u8c03\u7528\u7684\u65f6\u5019\u4f1a\u4f7f\u7528\u5305\u540d\u4f5c\u4e3a\u9650\u5b9a\u7b26\u3002\u8fd4\u56de\u67d0\u4e2a\u5bf9\u8c61\u7684\u51fd\u6570\u6216\u65b9\u6cd5\u7684\u540d\u79f0\u4e00\u822c\u90fd\u662f\u4f7f\u7528\u540d\u8bcd\uff0c\u6ca1\u6709 Get... \u4e4b\u7c7b\u7684\u5b57\u7b26\uff0c\u5982\u679c\u662f\u7528\u4e8e\u4fee\u6539\u67d0\u4e2a\u5bf9\u8c61\uff0c\u5219\u4f7f\u7528 SetName() \u3002\u6709\u5fc5\u987b\u8981\u7684\u8bdd\u53ef\u4ee5\u4f7f\u7528\u5927\u5c0f\u5199\u6df7\u5408\u7684\u65b9\u5f0f\uff0c\u5982 MixedCaps() \u6216 mixedCaps() \uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u4e0b\u5212\u7ebf\u6765\u5206\u5272\u591a\u4e2a\u540d\u79f0\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6587\u4ef6\u540d\u3001\u5173\u952e\u5b57\u4e0e\u6807\u8bc6\u7b26 \u4e0b\u4e00\u8282\uff1a \u5e38\u91cf","title":"4.2 Go \u7a0b\u5e8f\u7684\u57fa\u672c\u7ed3\u6784\u548c\u8981\u7d20"},{"location":"04.2/#42-go","text":"\u793a\u4f8b 4.1 hello_world.go package main import \"fmt\" func main () { fmt . Println ( \"hello, world\" ) }","title":"4.2 Go \u7a0b\u5e8f\u7684\u57fa\u672c\u7ed3\u6784\u548c\u8981\u7d20"},{"location":"04.2/#421","text":"\u5305\u662f\u7ed3\u6784\u5316\u4ee3\u7801\u7684\u4e00\u79cd\u65b9\u5f0f\uff1a\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u7531\u5305\uff08\u901a\u5e38\u7b80\u79f0\u4e3a pkg\uff09\u7684\u6982\u5ff5\u7ec4\u6210\uff0c\u53ef\u4ee5\u4f7f\u7528\u81ea\u8eab\u7684\u5305\u6216\u8005\u4ece\u5176\u5b83\u5305\u4e2d\u5bfc\u5165\u5185\u5bb9\u3002 \u5982\u540c\u5176\u5b83\u4e00\u4e9b\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u7c7b\u5e93\u6216\u547d\u540d\u7a7a\u95f4\u7684\u6982\u5ff5\uff0c\u6bcf\u4e2a Go \u6587\u4ef6\u90fd\u5c5e\u4e8e\u4e14\u4ec5\u5c5e\u4e8e\u4e00\u4e2a\u5305\u3002\u4e00\u4e2a\u5305\u53ef\u4ee5\u7531\u8bb8\u591a\u4ee5 .go \u4e3a\u6269\u5c55\u540d\u7684\u6e90\u6587\u4ef6\u7ec4\u6210\uff0c\u56e0\u6b64\u6587\u4ef6\u540d\u548c\u5305\u540d\u4e00\u822c\u6765\u8bf4\u90fd\u662f\u4e0d\u76f8\u540c\u7684\u3002 \u4f60\u5fc5\u987b\u5728\u6e90\u6587\u4ef6\u4e2d\u975e\u6ce8\u91ca\u7684\u7b2c\u4e00\u884c\u6307\u660e\u8fd9\u4e2a\u6587\u4ef6\u5c5e\u4e8e\u54ea\u4e2a\u5305\uff0c\u5982\uff1a package main \u3002 package main \u8868\u793a\u4e00\u4e2a\u53ef\u72ec\u7acb\u6267\u884c\u7684\u7a0b\u5e8f\uff0c\u6bcf\u4e2a Go \u5e94\u7528\u7a0b\u5e8f\u90fd\u5305\u542b\u4e00\u4e2a\u540d\u4e3a main \u7684\u5305\u3002 \u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5305\u542b\u4e0d\u540c\u7684\u5305\uff0c\u800c\u4e14\u5373\u4f7f\u4f60\u53ea\u4f7f\u7528 main \u5305\u4e5f\u4e0d\u5fc5\u628a\u6240\u6709\u7684\u4ee3\u7801\u90fd\u5199\u5728\u4e00\u4e2a\u5de8\u5927\u7684\u6587\u4ef6\u91cc\uff1a\u4f60\u53ef\u4ee5\u7528\u4e00\u4e9b\u8f83\u5c0f\u7684\u6587\u4ef6\uff0c\u5e76\u4e14\u5728\u6bcf\u4e2a\u6587\u4ef6\u975e\u6ce8\u91ca\u7684\u7b2c\u4e00\u884c\u90fd\u4f7f\u7528 package main \u6765\u6307\u660e\u8fd9\u4e9b\u6587\u4ef6\u90fd\u5c5e\u4e8e main \u5305\u3002\u5982\u679c\u4f60\u6253\u7b97\u7f16\u8bd1\u5305\u540d\u4e0d\u662f\u4e3a main \u7684\u6e90\u6587\u4ef6\uff0c\u5982 pack1 \uff0c\u7f16\u8bd1\u540e\u4ea7\u751f\u7684\u5bf9\u8c61\u6587\u4ef6\u5c06\u4f1a\u662f pack1.a \u800c\u4e0d\u662f\u53ef\u6267\u884c\u7a0b\u5e8f\u3002\u53e6\u5916\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6240\u6709\u7684\u5305\u540d\u90fd\u5e94\u8be5\u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\u3002 \u6807\u51c6\u5e93 \u5728 Go \u7684\u5b89\u88c5\u6587\u4ef6\u91cc\u5305\u542b\u4e86\u4e00\u4e9b\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u7684\u5305\uff0c\u5373\u6807\u51c6\u5e93\u3002\u5728 Windows \u4e0b\uff0c\u6807\u51c6\u5e93\u7684\u4f4d\u7f6e\u5728 Go \u6839\u76ee\u5f55\u4e0b\u7684\u5b50\u76ee\u5f55 pkg\\windows_386 \u4e2d\uff1b\u5728 Linux \u4e0b\uff0c\u6807\u51c6\u5e93\u5728 Go \u6839\u76ee\u5f55\u4e0b\u7684\u5b50\u76ee\u5f55 pkg\\linux_amd64 \u4e2d\uff08\u5982\u679c\u662f\u5b89\u88c5\u7684\u662f 32 \u4f4d\uff0c\u5219\u5728 linux_386 \u76ee\u5f55\u4e2d\uff09\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6807\u51c6\u5305\u4f1a\u5b58\u653e\u5728 $GOROOT/pkg/$GOOS_$GOARCH/ \u76ee\u5f55\u4e0b\u3002 Go \u7684\u6807\u51c6\u5e93\u5305\u542b\u4e86\u5927\u91cf\u7684\u5305\uff08\u5982\uff1a fmt \u548c os \uff09\uff0c\u4f46\u662f\u4f60\u4e5f\u53ef\u4ee5\u521b\u5efa\u81ea\u5df1\u7684\u5305\uff08 \u7b2c 9 \u7ae0 \uff09\u3002 \u5982\u679c\u60f3\u8981\u6784\u5efa\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u5219\u5305\u548c\u5305\u5185\u7684\u6587\u4ef6\u90fd\u5fc5\u987b\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u8fdb\u884c\u7f16\u8bd1\u3002\u5305\u7684\u4f9d\u8d56\u5173\u7cfb\u51b3\u5b9a\u4e86\u5176\u6784\u5efa\u987a\u5e8f\u3002 \u5c5e\u4e8e\u540c\u4e00\u4e2a\u5305\u7684\u6e90\u6587\u4ef6\u5fc5\u987b\u5168\u90e8\u88ab\u4e00\u8d77\u7f16\u8bd1\uff0c\u4e00\u4e2a\u5305\u5373\u662f\u7f16\u8bd1\u65f6\u7684\u4e00\u4e2a\u5355\u5143\uff0c\u56e0\u6b64\u6839\u636e\u60ef\u4f8b\uff0c\u6bcf\u4e2a\u76ee\u5f55\u90fd\u53ea\u5305\u542b\u4e00\u4e2a\u5305\u3002 \u5982\u679c\u5bf9\u4e00\u4e2a\u5305\u8fdb\u884c\u66f4\u6539\u6216\u91cd\u65b0\u7f16\u8bd1\uff0c\u6240\u6709\u5f15\u7528\u4e86\u8fd9\u4e2a\u5305\u7684\u5ba2\u6237\u7aef\u7a0b\u5e8f\u90fd\u5fc5\u987b\u5168\u90e8\u91cd\u65b0\u7f16\u8bd1\u3002 Go \u4e2d\u7684\u5305\u6a21\u578b\u91c7\u7528\u4e86\u663e\u5f0f\u4f9d\u8d56\u5173\u7cfb\u7684\u673a\u5236\u6765\u8fbe\u5230\u5feb\u901f\u7f16\u8bd1\u7684\u76ee\u7684\uff0c\u7f16\u8bd1\u5668\u4f1a\u4ece\u540e\u7f00\u540d\u4e3a .o \u7684\u5bf9\u8c61\u6587\u4ef6\uff08\u9700\u8981\u4e14\u53ea\u9700\u8981\u8fd9\u4e2a\u6587\u4ef6\uff09\u4e2d\u63d0\u53d6\u4f20\u9012\u4f9d\u8d56\u7c7b\u578b\u7684\u4fe1\u606f\u3002 \u5982\u679c A.go \u4f9d\u8d56 B.go \uff0c\u800c B.go \u53c8\u4f9d\u8d56 C.go \uff1a \u7f16\u8bd1 C.go , B.go , \u7136\u540e\u662f A.go . \u4e3a\u4e86\u7f16\u8bd1 A.go , \u7f16\u8bd1\u5668\u8bfb\u53d6\u7684\u662f B.o \u800c\u4e0d\u662f C.o . \u8fd9\u79cd\u673a\u5236\u5bf9\u4e8e\u7f16\u8bd1\u5927\u578b\u7684\u9879\u76ee\u65f6\u53ef\u4ee5\u663e\u8457\u5730\u63d0\u5347\u7f16\u8bd1\u901f\u5ea6\u3002 \u6bcf\u4e00\u6bb5\u4ee3\u7801\u53ea\u4f1a\u88ab\u7f16\u8bd1\u4e00\u6b21 \u4e00\u4e2a Go \u7a0b\u5e8f\u662f\u901a\u8fc7 import \u5173\u952e\u5b57\u5c06\u4e00\u7ec4\u5305\u94fe\u63a5\u5728\u4e00\u8d77\u3002 import \"fmt\" \u544a\u8bc9 Go \u7f16\u8bd1\u5668\u8fd9\u4e2a\u7a0b\u5e8f\u9700\u8981\u4f7f\u7528 fmt \u5305\uff08\u7684\u51fd\u6570\uff0c\u6216\u5176\u4ed6\u5143\u7d20\uff09\uff0c fmt \u5305\u5b9e\u73b0\u4e86\u683c\u5f0f\u5316 IO\uff08\u8f93\u5165/\u8f93\u51fa\uff09\u7684\u51fd\u6570\u3002\u5305\u540d\u88ab\u5c01\u95ed\u5728\u534a\u89d2\u53cc\u5f15\u53f7 \"\" \u4e2d\u3002\u5982\u679c\u4f60\u6253\u7b97\u4ece\u5df2\u7f16\u8bd1\u7684\u5305\u4e2d\u5bfc\u5165\u5e76\u52a0\u8f7d\u516c\u5f00\u58f0\u660e\u7684\u65b9\u6cd5\uff0c\u4e0d\u9700\u8981\u63d2\u5165\u5df2\u7f16\u8bd1\u5305\u7684\u6e90\u4ee3\u7801\u3002 \u5982\u679c\u9700\u8981\u591a\u4e2a\u5305\uff0c\u5b83\u4eec\u53ef\u4ee5\u88ab\u5206\u522b\u5bfc\u5165\uff1a import \"fmt\" import \"os\" \u6216\uff1a import \"fmt\" ; import \"os\" \u4f46\u662f\u8fd8\u6709\u66f4\u77ed\u4e14\u66f4\u4f18\u96c5\u7684\u65b9\u6cd5\uff08\u88ab\u79f0\u4e3a\u56e0\u5f0f\u5206\u89e3\u5173\u952e\u5b57\uff0c\u8be5\u65b9\u6cd5\u540c\u6837\u9002\u7528\u4e8e const \u3001 var \u548c type \u7684\u58f0\u660e\u6216\u5b9a\u4e49\uff09\uff1a import ( \"fmt\" \"os\" ) \u5b83\u751a\u81f3\u8fd8\u53ef\u4ee5\u66f4\u77ed\u7684\u5f62\u5f0f\uff0c\u4f46\u4f7f\u7528 gofmt \u540e\u5c06\u4f1a\u88ab\u5f3a\u5236\u6362\u884c\uff1a import ( \"fmt\" ; \"os\" ) \u5f53\u4f60\u5bfc\u5165\u591a\u4e2a\u5305\u65f6\uff0c\u6700\u597d\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\u6392\u5217\u5305\u540d\uff0c\u8fd9\u6837\u505a\u66f4\u52a0\u6e05\u6670\u6613\u8bfb\u3002 \u5982\u679c\u5305\u540d\u4e0d\u662f\u4ee5 . \u6216 / \u5f00\u5934\uff0c\u5982 \"fmt\" \u6216\u8005 \"container/list\" \uff0c\u5219 Go \u4f1a\u5728\u5168\u5c40\u6587\u4ef6\u8fdb\u884c\u67e5\u627e\uff1b\u5982\u679c\u5305\u540d\u4ee5 ./ \u5f00\u5934\uff0c\u5219 Go \u4f1a\u5728\u76f8\u5bf9\u76ee\u5f55\u4e2d\u67e5\u627e\uff1b\u5982\u679c\u5305\u540d\u4ee5 / \u5f00\u5934\uff08\u5728 Windows \u4e0b\u4e5f\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528\uff09\uff0c\u5219\u4f1a\u5728\u7cfb\u7edf\u7684\u7edd\u5bf9\u8def\u5f84\u4e2d\u67e5\u627e\u3002 \u8bd1\u8005\u6ce8\uff1a\u4ee5\u76f8\u5bf9\u8def\u5f84\u5728GOPATH\u4e0b\u5bfc\u5165\u5305\u4f1a\u4ea7\u751f\u62a5\u9519\u4fe1\u606f \u62a5\u9519\u4fe1\u606f\uff1alocal import \"./XXX\" in non-local package \u5f15\u7528\uff1a Go programs cannot use relative import paths within a work space. \u6ce8\u89e3\uff1a\u5728GOPATH\u5916\u53ef\u4ee5\u4ee5\u76f8\u5bf9\u8def\u5f84\u7684\u5f62\u5f0f\u6267\u884cgo build\uff08go install \u4e0d\u53ef\u4ee5\uff09 \u5bfc\u5165\u5305\u5373\u7b49\u540c\u4e8e\u5305\u542b\u4e86\u8fd9\u4e2a\u5305\u7684\u6240\u6709\u7684\u4ee3\u7801\u5bf9\u8c61\u3002 \u9664\u4e86\u7b26\u53f7 _ \uff0c\u5305\u4e2d\u6240\u6709\u4ee3\u7801\u5bf9\u8c61\u7684\u6807\u8bc6\u7b26\u5fc5\u987b\u662f\u552f\u4e00\u7684\uff0c\u4ee5\u907f\u514d\u540d\u79f0\u51b2\u7a81\u3002\u4f46\u662f\u76f8\u540c\u7684\u6807\u8bc6\u7b26\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u5305\u4e2d\u4f7f\u7528\uff0c\u56e0\u4e3a\u53ef\u4ee5\u4f7f\u7528\u5305\u540d\u6765\u533a\u5206\u5b83\u4eec\u3002 \u5305\u901a\u8fc7\u4e0b\u9762\u8fd9\u4e2a\u88ab\u7f16\u8bd1\u5668\u5f3a\u5236\u6267\u884c\u7684\u89c4\u5219\u6765\u51b3\u5b9a\u662f\u5426\u5c06\u81ea\u8eab\u7684\u4ee3\u7801\u5bf9\u8c61\u66b4\u9732\u7ed9\u5916\u90e8\u6587\u4ef6\uff1a \u53ef\u89c1\u6027\u89c4\u5219 \u5f53\u6807\u8bc6\u7b26\uff08\u5305\u62ec\u5e38\u91cf\u3001\u53d8\u91cf\u3001\u7c7b\u578b\u3001\u51fd\u6570\u540d\u3001\u7ed3\u6784\u5b57\u6bb5\u7b49\u7b49\uff09\u4ee5\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\u5f00\u5934\uff0c\u5982\uff1aGroup1\uff0c\u90a3\u4e48\u4f7f\u7528\u8fd9\u79cd\u5f62\u5f0f\u7684\u6807\u8bc6\u7b26\u7684\u5bf9\u8c61\u5c31\u53ef\u4ee5\u88ab\u5916\u90e8\u5305\u7684\u4ee3\u7801\u6240\u4f7f\u7528\uff08\u5ba2\u6237\u7aef\u7a0b\u5e8f\u9700\u8981\u5148\u5bfc\u5165\u8fd9\u4e2a\u5305\uff09\uff0c\u8fd9\u88ab\u79f0\u4e3a\u5bfc\u51fa\uff08\u50cf\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u4e2d\u7684 public\uff09\uff1b\u6807\u8bc6\u7b26\u5982\u679c\u4ee5\u5c0f\u5199\u5b57\u6bcd\u5f00\u5934\uff0c\u5219\u5bf9\u5305\u5916\u662f\u4e0d\u53ef\u89c1\u7684\uff0c\u4f46\u662f\u5b83\u4eec\u5728\u6574\u4e2a\u5305\u7684\u5185\u90e8\u662f\u53ef\u89c1\u5e76\u4e14\u53ef\u7528\u7684\uff08\u50cf\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u4e2d\u7684 private \uff09\u3002 \uff08\u5927\u5199\u5b57\u6bcd\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55 Unicode \u7f16\u7801\u7684\u5b57\u7b26\uff0c\u6bd4\u5982\u5e0c\u814a\u6587\uff0c\u4e0d\u4ec5\u4ec5\u662f ASCII \u7801\u4e2d\u7684\u5927\u5199\u5b57\u6bcd\uff09\u3002 \u56e0\u6b64\uff0c\u5728\u5bfc\u5165\u4e00\u4e2a\u5916\u90e8\u5305\u540e\uff0c\u80fd\u591f\u4e14\u53ea\u80fd\u591f\u8bbf\u95ee\u8be5\u5305\u4e2d\u5bfc\u51fa\u7684\u5bf9\u8c61\u3002 \u5047\u8bbe\u5728\u5305 pack1 \u4e2d\u6211\u4eec\u6709\u4e00\u4e2a\u53d8\u91cf\u6216\u51fd\u6570\u53eb\u505a Thing \uff08\u4ee5 T \u5f00\u5934\uff0c\u6240\u4ee5\u5b83\u80fd\u591f\u88ab\u5bfc\u51fa\uff09\uff0c\u90a3\u4e48\u5728\u5f53\u524d\u5305\u4e2d\u5bfc\u5165 pack1 \u5305\uff0c Thing \u5c31\u53ef\u4ee5\u50cf\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u90a3\u6837\u4f7f\u7528\u70b9\u6807\u8bb0\u6765\u8c03\u7528\uff1a pack1.Thing \uff08pack1 \u5728\u8fd9\u91cc\u662f\u4e0d\u53ef\u4ee5\u7701\u7565\u7684\uff09\u3002 \u56e0\u6b64\u5305\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u547d\u540d\u7a7a\u95f4\u4f7f\u7528\uff0c\u5e2e\u52a9\u907f\u514d\u547d\u540d\u51b2\u7a81\uff08\u540d\u79f0\u51b2\u7a81\uff09\uff1a\u4e24\u4e2a\u5305\u4e2d\u7684\u540c\u540d\u53d8\u91cf\u7684\u533a\u522b\u5728\u4e8e\u5b83\u4eec\u7684\u5305\u540d\uff0c\u4f8b\u5982 pack1.Thing \u548c pack2.Thing \u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u5305\u7684\u522b\u540d\u6765\u89e3\u51b3\u5305\u540d\u4e4b\u95f4\u7684\u540d\u79f0\u51b2\u7a81\uff0c\u6216\u8005\u8bf4\u6839\u636e\u4f60\u7684\u4e2a\u4eba\u559c\u597d\u5bf9\u5305\u540d\u8fdb\u884c\u91cd\u65b0\u8bbe\u7f6e\uff0c\u5982\uff1a import fm \"fmt\" \u3002\u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u5305\u7684\u522b\u540d\uff1a \u793a\u4f8b 4.2 alias.go package main import fm \"fmt\" // alias3 func main () { fm . Println ( \"hello, world\" ) } \u6ce8\u610f\u4e8b\u9879 \u5982\u679c\u4f60\u5bfc\u5165\u4e86\u4e00\u4e2a\u5305\u5374\u6ca1\u6709\u4f7f\u7528\u5b83\uff0c\u5219\u4f1a\u5728\u6784\u5efa\u7a0b\u5e8f\u65f6\u5f15\u53d1\u9519\u8bef\uff0c\u5982 imported and not used: os \uff0c\u8fd9\u6b63\u662f\u9075\u5faa\u4e86 Go \u7684\u683c\u8a00\uff1a\u201c\u6ca1\u6709\u4e0d\u5fc5\u8981\u7684\u4ee3\u7801\uff01\u201d\u3002 \u5305\u7684\u5206\u7ea7\u58f0\u660e\u548c\u521d\u59cb\u5316 \u4f60\u53ef\u4ee5\u5728\u4f7f\u7528 import \u5bfc\u5165\u5305\u4e4b\u540e\u5b9a\u4e49\u6216\u58f0\u660e 0 \u4e2a\u6216\u591a\u4e2a\u5e38\u91cf (const)\u3001\u53d8\u91cf (var) \u548c\u7c7b\u578b (type)\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u7684\u4f5c\u7528\u57df\u90fd\u662f\u5168\u5c40\u7684\uff08\u5728\u672c\u5305\u8303\u56f4\u5185\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u88ab\u672c\u5305\u4e2d\u6240\u6709\u7684\u51fd\u6570\u8c03\u7528\uff08\u5982 gotemplate.go \u6e90\u6587\u4ef6\u4e2d\u7684 c \u548c v \uff09\uff0c\u7136\u540e\u58f0\u660e\u4e00\u4e2a\u6216\u591a\u4e2a\u51fd\u6570 (func)\u3002","title":"4.2.1 \u5305\u7684\u6982\u5ff5\u3001\u5bfc\u5165\u4e0e\u53ef\u89c1\u6027"},{"location":"04.2/#422","text":"\u8fd9\u662f\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6700\u7b80\u5355\u7684\u683c\u5f0f\uff1a func functionName () \u4f60\u53ef\u4ee5\u5728\u62ec\u53f7 () \u4e2d\u5199\u5165 0 \u4e2a\u6216\u591a\u4e2a\u51fd\u6570\u7684\u53c2\u6570\uff08\u4f7f\u7528\u9017\u53f7 , \u5206\u9694\uff09\uff0c\u6bcf\u4e2a\u53c2\u6570\u7684\u540d\u79f0\u540e\u9762\u5fc5\u987b\u7d27\u8ddf\u7740\u8be5\u53c2\u6570\u7684\u7c7b\u578b\u3002 main() \u51fd\u6570\u662f\u6bcf\u4e00\u4e2a\u53ef\u6267\u884c\u7a0b\u5e8f\u6240\u5fc5\u987b\u5305\u542b\u7684\uff0c\u4e00\u822c\u6765\u8bf4\u90fd\u662f\u5728\u542f\u52a8\u540e\u7b2c\u4e00\u4e2a\u6267\u884c\u7684\u51fd\u6570\uff08\u5982\u679c\u6709 init() \u51fd\u6570\u5219\u4f1a\u5148\u6267\u884c\u8be5\u51fd\u6570\uff09\u3002\u5982\u679c\u4f60\u7684 main \u5305\u7684\u6e90\u4ee3\u7801\u6ca1\u6709\u5305\u542b main() \u51fd\u6570\uff0c\u5219\u4f1a\u5f15\u53d1\u6784\u5efa\u9519\u8bef undefined: main.main \u3002 main() \u51fd\u6570\u65e2\u6ca1\u6709\u53c2\u6570\uff0c\u4e5f\u6ca1\u6709\u8fd4\u56de\u7c7b\u578b\uff08\u4e0e C \u5bb6\u65cf\u4e2d\u7684\u5176\u5b83\u8bed\u8a00\u6070\u597d\u76f8\u53cd\uff09\u3002\u5982\u679c\u4f60\u4e0d\u5c0f\u5fc3\u4e3a main() \u51fd\u6570\u6dfb\u52a0\u4e86\u53c2\u6570\u6216\u8005\u8fd4\u56de\u7c7b\u578b\uff0c\u5c06\u4f1a\u5f15\u53d1\u6784\u5efa\u9519\u8bef\uff1a func main must have no arguments and no return values results. \u5728\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u5e76\u5b8c\u6210\u521d\u59cb\u5316\u540e\uff0c\u7b2c\u4e00\u4e2a\u8c03\u7528\uff08\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\uff09\u7684\u51fd\u6570\u662f main.main() \uff08\u5982\uff1aC \u8bed\u8a00\uff09\uff0c\u8be5\u51fd\u6570\u4e00\u65e6\u8fd4\u56de\u5c31\u8868\u793a\u7a0b\u5e8f\u5df2\u6210\u529f\u6267\u884c\u5e76\u7acb\u5373\u9000\u51fa\u3002 \u51fd\u6570\u91cc\u7684\u4ee3\u7801\uff08\u51fd\u6570\u4f53\uff09\u4f7f\u7528\u5927\u62ec\u53f7 {} \u62ec\u8d77\u6765\u3002 \u5de6\u5927\u62ec\u53f7 { \u5fc5\u987b\u4e0e\u65b9\u6cd5\u7684\u58f0\u660e\u653e\u5728\u540c\u4e00\u884c\uff0c\u8fd9\u662f\u7f16\u8bd1\u5668\u7684\u5f3a\u5236\u89c4\u5b9a\uff0c\u5426\u5219\u4f60\u5728\u4f7f\u7528 gofmt \u65f6\u5c31\u4f1a\u51fa\u73b0\u9519\u8bef\u63d0\u793a\uff1a `build-error: syntax error: unexpected semicolon or newline before {` \uff08\u8fd9\u662f\u56e0\u4e3a\u7f16\u8bd1\u5668\u4f1a\u4ea7\u751f func main() ; \u8fd9\u6837\u7684\u7ed3\u679c\uff0c\u5f88\u660e\u663e\u8fd9\u662f\u9519\u8bef\u7684\uff09 Go \u8bed\u8a00\u867d\u7136\u770b\u8d77\u6765\u4e0d\u4f7f\u7528\u5206\u53f7\u4f5c\u4e3a\u8bed\u53e5\u7684\u7ed3\u675f\uff0c\u4f46\u5b9e\u9645\u4e0a\u8fd9\u4e00\u8fc7\u7a0b\u662f\u7531\u7f16\u8bd1\u5668\u81ea\u52a8\u5b8c\u6210\uff0c\u56e0\u6b64\u624d\u4f1a\u5f15\u53d1\u50cf\u4e0a\u9762\u8fd9\u6837\u7684\u9519\u8bef \u53f3\u5927\u62ec\u53f7 } \u9700\u8981\u88ab\u653e\u5728\u7d27\u63a5\u7740\u51fd\u6570\u4f53\u7684\u4e0b\u4e00\u884c\u3002\u5982\u679c\u4f60\u7684\u51fd\u6570\u975e\u5e38\u7b80\u77ed\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5c06\u5b83\u4eec\u653e\u5728\u540c\u4e00\u884c\uff1a func Sum ( a , b int ) int { return a + b } \u5bf9\u4e8e\u5927\u62ec\u53f7 {} \u7684\u4f7f\u7528\u89c4\u5219\u5728\u4efb\u4f55\u65f6\u5019\u90fd\u662f\u76f8\u540c\u7684\uff08\u5982\uff1a if \u8bed\u53e5\u7b49\uff09\u3002 \u56e0\u6b64\u7b26\u5408\u89c4\u8303\u7684\u51fd\u6570\u4e00\u822c\u5199\u6210\u5982\u4e0b\u7684\u5f62\u5f0f\uff1a func functionName ( parameter_list ) ( return_value_list ) { \u2026 } \u5176\u4e2d\uff1a parameter_list \u7684\u5f62\u5f0f\u4e3a (param1 type1, param2 type2, \u2026) return_value_list \u7684\u5f62\u5f0f\u4e3a (ret1 type1, ret2 type2, \u2026) \u53ea\u6709\u5f53\u67d0\u4e2a\u51fd\u6570\u9700\u8981\u88ab\u5916\u90e8\u5305\u8c03\u7528\u7684\u65f6\u5019\u624d\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u5f00\u5934\uff0c\u5e76\u9075\u5faa Pascal \u547d\u540d\u6cd5\uff1b\u5426\u5219\u5c31\u9075\u5faa\u9a86\u9a7c\u547d\u540d\u6cd5\uff0c\u5373\u7b2c\u4e00\u4e2a\u5355\u8bcd\u7684\u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u5176\u4f59\u5355\u8bcd\u7684\u9996\u5b57\u6bcd\u5927\u5199\u3002 \u4e0b\u9762\u8fd9\u4e00\u884c\u8c03\u7528\u4e86 fmt \u5305\u4e2d\u7684 Println \u51fd\u6570\uff0c\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u8f93\u51fa\u5230\u63a7\u5236\u53f0\uff0c\u5e76\u5728\u6700\u540e\u81ea\u52a8\u589e\u52a0\u6362\u884c\u5b57\u7b26 \\n \uff1a fmt . Println \uff08 \"hello, world\" \uff09 \u4f7f\u7528 fmt.Print(\"hello, world\\n\") \u53ef\u4ee5\u5f97\u5230\u76f8\u540c\u7684\u7ed3\u679c\u3002 Print \u548c Println \u8fd9\u4e24\u4e2a\u51fd\u6570\u4e5f\u652f\u6301\u4f7f\u7528\u53d8\u91cf\uff0c\u5982\uff1a fmt.Println(arr) \u3002\u5982\u679c\u6ca1\u6709\u7279\u522b\u6307\u5b9a\uff0c\u5b83\u4eec\u4f1a\u4ee5\u9ed8\u8ba4\u7684\u6253\u5370\u683c\u5f0f\u5c06\u53d8\u91cf arr \u8f93\u51fa\u5230\u63a7\u5236\u53f0\u3002 \u5355\u7eaf\u5730\u6253\u5370\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216\u53d8\u91cf\u751a\u81f3\u53ef\u4ee5\u4f7f\u7528\u9884\u5b9a\u4e49\u7684\u65b9\u6cd5\u6765\u5b9e\u73b0\uff0c\u5982\uff1a print \u3001 println\uff1aprint(\"ABC\") \u3001 println(\"ABC\") \u3001 println(i) \uff08\u5e26\u4e00\u4e2a\u53d8\u91cf i \uff09\u3002 \u8fd9\u4e9b\u51fd\u6570\u53ea\u53ef\u4ee5\u7528\u4e8e\u8c03\u8bd5\u9636\u6bb5\uff0c\u5728\u90e8\u7f72\u7a0b\u5e8f\u7684\u65f6\u5019\u52a1\u5fc5\u5c06\u5b83\u4eec\u66ff\u6362\u6210 fmt \u4e2d\u7684\u76f8\u5173\u51fd\u6570\u3002 \u5f53\u88ab\u8c03\u7528\u51fd\u6570\u7684\u4ee3\u7801\u6267\u884c\u5230\u7ed3\u675f\u7b26 } \u6216\u8fd4\u56de\u8bed\u53e5\u65f6\u5c31\u4f1a\u8fd4\u56de\uff0c\u7136\u540e\u7a0b\u5e8f\u7ee7\u7eed\u6267\u884c\u8c03\u7528\u8be5\u51fd\u6570\u4e4b\u540e\u7684\u4ee3\u7801\u3002 \u7a0b\u5e8f\u6b63\u5e38\u9000\u51fa\u7684\u4ee3\u7801\u4e3a 0 \u5373 Program exited with code 0 \uff1b\u5982\u679c\u7a0b\u5e8f\u56e0\u4e3a\u5f02\u5e38\u800c\u88ab\u7ec8\u6b62\uff0c\u5219\u4f1a\u8fd4\u56de\u975e\u96f6\u503c\uff0c\u5982\uff1a 1 \u3002\u8fd9\u4e2a\u6570\u503c\u53ef\u4ee5\u7528\u6765\u6d4b\u8bd5\u662f\u5426\u6210\u529f\u6267\u884c\u4e00\u4e2a\u7a0b\u5e8f\u3002","title":"4.2.2 \u51fd\u6570"},{"location":"04.2/#423","text":"\u793a\u4f8b 4.2 hello_world2.go package main import \"fmt\" // Package implementing formatted I/O. func main () { fmt . Printf ( \"\u039a\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1 \u03ba\u03cc\u03c3\u03bc\u03b5; or \u3053\u3093\u306b\u3061\u306f \u4e16\u754c\\n\" ) } \u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u901a\u8fc7\u6253\u5370 \u039a\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1 \u03ba\u03cc\u03c3\u03bc\u03b5; or \u3053\u3093\u306b\u3061\u306f \u4e16\u754c \u5c55\u793a\u4e86\u5982\u4f55\u5728 Go \u4e2d\u4f7f\u7528\u56fd\u9645\u5316\u5b57\u7b26\uff0c\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u6ce8\u91ca\u3002 \u6ce8\u91ca\u4e0d\u4f1a\u88ab\u7f16\u8bd1\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7 godoc \u6765\u4f7f\u7528\uff08 \u7b2c 3.6 \u8282 \uff09\u3002 \u5355\u884c\u6ce8\u91ca\u662f\u6700\u5e38\u89c1\u7684\u6ce8\u91ca\u5f62\u5f0f\uff0c\u4f60\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u4f7f\u7528\u4ee5 // \u5f00\u5934\u7684\u5355\u884c\u6ce8\u91ca\u3002\u591a\u884c\u6ce8\u91ca\u4e5f\u53eb\u5757\u6ce8\u91ca\uff0c\u5747\u5df2\u4ee5 /* \u5f00\u5934\uff0c\u5e76\u4ee5 */ \u7ed3\u5c3e\uff0c\u4e14\u4e0d\u53ef\u4ee5\u5d4c\u5957\u4f7f\u7528\uff0c\u591a\u884c\u6ce8\u91ca\u4e00\u822c\u7528\u4e8e\u5305\u7684\u6587\u6863\u63cf\u8ff0\u6216\u6ce8\u91ca\u6210\u5757\u7684\u4ee3\u7801\u7247\u6bb5\u3002 \u6bcf\u4e00\u4e2a\u5305\u5e94\u8be5\u6709\u76f8\u5173\u6ce8\u91ca\uff0c\u5728 package \u8bed\u53e5\u4e4b\u524d\u7684\u5757\u6ce8\u91ca\u5c06\u88ab\u9ed8\u8ba4\u8ba4\u4e3a\u662f\u8fd9\u4e2a\u5305\u7684\u6587\u6863\u8bf4\u660e\uff0c\u5176\u4e2d\u5e94\u8be5\u63d0\u4f9b\u4e00\u4e9b\u76f8\u5173\u4fe1\u606f\u5e76\u5bf9\u6574\u4f53\u529f\u80fd\u505a\u7b80\u8981\u7684\u4ecb\u7ecd\u3002\u4e00\u4e2a\u5305\u53ef\u4ee5\u5206\u6563\u5728\u591a\u4e2a\u6587\u4ef6\u4e2d\uff0c\u4f46\u662f\u53ea\u9700\u8981\u5728\u5176\u4e2d\u4e00\u4e2a\u8fdb\u884c\u6ce8\u91ca\u8bf4\u660e\u5373\u53ef\u3002\u5f53\u5f00\u53d1\u4eba\u5458\u9700\u8981\u4e86\u89e3\u5305\u7684\u4e00\u4e9b\u60c5\u51b5\u65f6\uff0c\u81ea\u7136\u4f1a\u7528 godoc \u6765\u663e\u793a\u5305\u7684\u6587\u6863\u8bf4\u660e\uff0c\u5728\u9996\u884c\u7684\u7b80\u8981\u6ce8\u91ca\u4e4b\u540e\u53ef\u4ee5\u7528\u6210\u6bb5\u7684\u6ce8\u91ca\u6765\u8fdb\u884c\u66f4\u8be6\u7ec6\u7684\u8bf4\u660e\uff0c\u800c\u4e0d\u5fc5\u62e5\u6324\u5728\u4e00\u8d77\u3002\u53e6\u5916\uff0c\u5728\u591a\u6bb5\u6ce8\u91ca\u4e4b\u95f4\u5e94\u4ee5\u7a7a\u884c\u5206\u9694\u52a0\u4ee5\u533a\u5206\u3002 \u793a\u4f8b\uff1a // Package superman implements methods for saving the world. // // Experience has shown that a small number of procedures can prove // helpful when attempting to save the world. package superman \u51e0\u4e4e\u6240\u6709\u5168\u5c40\u4f5c\u7528\u57df\u7684\u7c7b\u578b\u3001\u5e38\u91cf\u3001\u53d8\u91cf\u3001\u51fd\u6570\u548c\u88ab\u5bfc\u51fa\u7684\u5bf9\u8c61\u90fd\u5e94\u8be5\u6709\u4e00\u4e2a\u5408\u7406\u7684\u6ce8\u91ca\u3002\u5982\u679c\u8fd9\u79cd\u6ce8\u91ca\uff08\u79f0\u4e3a\u6587\u6863\u6ce8\u91ca\uff09\u51fa\u73b0\u5728\u51fd\u6570\u524d\u9762\uff0c\u4f8b\u5982\u51fd\u6570 Abcd\uff0c\u5219\u8981\u4ee5 \"Abcd...\" \u4f5c\u4e3a\u5f00\u5934\u3002 \u793a\u4f8b\uff1a // enterOrbit causes Superman to fly into low Earth orbit, a position // that presents several possibilities for planet salvation. func enterOrbit () error { ... } godoc \u5de5\u5177\uff08 \u7b2c 3.6 \u8282 \uff09\u4f1a\u6536\u96c6\u8fd9\u4e9b\u6ce8\u91ca\u5e76\u4ea7\u751f\u4e00\u4e2a\u6280\u672f\u6587\u6863\u3002","title":"4.2.3 \u6ce8\u91ca"},{"location":"04.2/#424","text":"\u53d8\u91cf\uff08\u6216\u5e38\u91cf\uff09\u5305\u542b\u6570\u636e\uff0c\u8fd9\u4e9b\u6570\u636e\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u7b80\u79f0\u7c7b\u578b\u3002\u4f7f\u7528 var \u58f0\u660e\u7684\u53d8\u91cf\u7684\u503c\u4f1a\u81ea\u52a8\u521d\u59cb\u5316\u4e3a\u8be5\u7c7b\u578b\u7684\u96f6\u503c\u3002\u7c7b\u578b\u5b9a\u4e49\u4e86\u67d0\u4e2a\u53d8\u91cf\u7684\u503c\u7684\u96c6\u5408\u4e0e\u53ef\u5bf9\u5176\u8fdb\u884c\u64cd\u4f5c\u7684\u96c6\u5408\u3002 \u7c7b\u578b\u53ef\u4ee5\u662f\u57fa\u672c\u7c7b\u578b\uff0c\u5982\uff1a int \u3001 float \u3001 bool \u3001 string \uff1b\u7ed3\u6784\u5316\u7684\uff08\u590d\u5408\u7684\uff09\uff0c\u5982\uff1a struct \u3001 array \u3001\u5207\u7247 (slice)\u3001 map \u3001\u901a\u9053 (channel)\uff1b\u53ea\u63cf\u8ff0\u7c7b\u578b\u7684\u884c\u4e3a\u7684\uff0c\u5982\uff1a interface \u3002 \u7ed3\u6784\u5316\u7684\u7c7b\u578b\u6ca1\u6709\u771f\u6b63\u7684\u503c\uff0c\u5b83\u4f7f\u7528 nil \u4f5c\u4e3a\u9ed8\u8ba4\u503c\uff08\u5728 Objective-C \u4e2d\u662f nil\uff0c\u5728 Java \u4e2d\u662f null\uff0c\u5728 C \u548c C++ \u4e2d\u662f NULL \u6216 0\uff09\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cGo \u8bed\u8a00\u4e2d\u4e0d\u5b58\u5728\u7c7b\u578b\u7ee7\u627f\u3002 \u51fd\u6570\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u786e\u5b9a\u7684\u7c7b\u578b\uff0c\u5c31\u662f\u4ee5\u51fd\u6570\u4f5c\u4e3a\u8fd4\u56de\u7c7b\u578b\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u58f0\u660e\u8981\u5199\u5728\u51fd\u6570\u540d\u548c\u53ef\u9009\u7684\u53c2\u6570\u5217\u8868\u4e4b\u540e\uff0c\u4f8b\u5982\uff1a func FunctionName ( a typea , b typeb ) typeFunc \u4f60\u53ef\u4ee5\u5728\u51fd\u6570\u4f53\u4e2d\u7684\u67d0\u5904\u8fd4\u56de\u4f7f\u7528\u7c7b\u578b\u4e3a typeFunc \u7684\u53d8\u91cf var \uff1a return var \u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u62e5\u6709\u591a\u8fd4\u56de\u503c\uff0c\u8fd4\u56de\u7c7b\u578b\u4e4b\u95f4\u9700\u8981\u4f7f\u7528\u9017\u53f7\u5206\u5272\uff0c\u5e76\u4f7f\u7528\u5c0f\u62ec\u53f7 () \u5c06\u5b83\u4eec\u62ec\u8d77\u6765\uff0c\u5982\uff1a func FunctionName ( a typea , b typeb ) ( t1 type1 , t2 type2 ) \u793a\u4f8b\uff1a \u51fd\u6570 Atoi() \uff08 \u7b2c 4.7 \u8282 \uff09\uff1a func Atoi(s string) (i int, err error) \u8fd4\u56de\u7684\u5f62\u5f0f\uff1a return var1 , var2 \u8fd9\u79cd\u591a\u8fd4\u56de\u503c\u4e00\u822c\u7528\u4e8e\u5224\u65ad\u67d0\u4e2a\u51fd\u6570\u662f\u5426\u6267\u884c\u6210\u529f (true/false) \u6216\u4e0e\u5176\u5b83\u8fd4\u56de\u503c\u4e00\u540c\u8fd4\u56de\u9519\u8bef\u6d88\u606f\uff08\u8be6\u89c1\u4e4b\u540e\u7684\u5e76\u884c\u8d4b\u503c\uff09\u3002 \u4f7f\u7528 type \u5173\u952e\u5b57\u53ef\u4ee5\u5b9a\u4e49\u4f60\u81ea\u5df1\u7684\u7c7b\u578b\uff0c\u4f60\u53ef\u80fd\u60f3\u8981\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\uff08 \u7b2c 10 \u7ae0 \uff09\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u7c7b\u578b\u7684\u522b\u540d\uff0c\u5982\uff1a type IZ int \u8fd9\u91cc\u5e76\u4e0d\u662f\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u522b\u540d\uff0c\u56e0\u4e3a\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u5b9a\u4e49\u4e4b\u540e\u7684\u7c7b\u578b\u53ef\u4ee5\u62e5\u6709\u66f4\u591a\u7684\u7279\u6027\uff0c\u4e14\u5728\u7c7b\u578b\u8f6c\u6362\u65f6\u5fc5\u987b\u663e\u5f0f\u8f6c\u6362\u3002 \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u58f0\u660e\u53d8\u91cf\uff1a var a IZ = 5 \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u5230 int \u662f\u53d8\u91cf a \u7684\u5e95\u5c42\u7c7b\u578b\uff0c\u8fd9\u4e5f\u4f7f\u5f97\u5b83\u4eec\u4e4b\u95f4\u5b58\u5728\u76f8\u4e92\u8f6c\u6362\u7684\u53ef\u80fd\uff08 \u7b2c 4.2.6 \u8282 \uff09\u3002 \u5982\u679c\u4f60\u6709\u591a\u4e2a\u7c7b\u578b\u9700\u8981\u5b9a\u4e49\uff0c\u53ef\u4ee5\u4f7f\u7528\u56e0\u5f0f\u5206\u89e3\u5173\u952e\u5b57\u7684\u65b9\u5f0f\uff0c\u4f8b\u5982\uff1a type ( IZ int FZ float64 STR string ) \u6bcf\u4e2a\u503c\u90fd\u5fc5\u987b\u5728\u7ecf\u8fc7\u7f16\u8bd1\u540e\u5c5e\u4e8e\u67d0\u4e2a\u7c7b\u578b\uff08\u7f16\u8bd1\u5668\u5fc5\u987b\u80fd\u591f\u63a8\u65ad\u51fa\u6240\u6709\u503c\u7684\u7c7b\u578b\uff09\uff0c\u56e0\u4e3a Go \u8bed\u8a00\u662f\u4e00\u79cd\u9759\u6001\u7c7b\u578b\u8bed\u8a00\u3002","title":"4.2.4 \u7c7b\u578b"},{"location":"04.2/#425-go","text":"\u4e0b\u9762\u7684\u7a0b\u5e8f\u53ef\u4ee5\u88ab\u987a\u5229\u7f16\u8bd1\u4f46\u4ec0\u4e48\u90fd\u505a\u4e0d\u4e86\uff0c\u4e0d\u8fc7\u8fd9\u5f88\u597d\u5730\u5c55\u793a\u4e86\u4e00\u4e2a Go \u7a0b\u5e8f\u7684\u9996\u9009\u7ed3\u6784\u3002\u8fd9\u79cd\u7ed3\u6784\u5e76\u6ca1\u6709\u88ab\u5f3a\u5236\u8981\u6c42\uff0c\u7f16\u8bd1\u5668\u4e5f\u4e0d\u5173\u5fc3 main() \u51fd\u6570\u5728\u524d\u8fd8\u662f\u53d8\u91cf\u7684\u58f0\u660e\u5728\u524d\uff0c\u4f46\u4f7f\u7528\u7edf\u4e00\u7684\u7ed3\u6784\u80fd\u591f\u5728\u4ece\u4e0a\u81f3\u4e0b\u9605\u8bfb Go \u4ee3\u7801\u65f6\u6709\u66f4\u597d\u7684\u4f53\u9a8c\u3002 \u6240\u6709\u7684\u7ed3\u6784\u5c06\u5728\u8fd9\u4e00\u7ae0\u6216\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\u8fdb\u4e00\u6b65\u5730\u89e3\u91ca\u8bf4\u660e\uff0c\u4f46\u603b\u4f53\u601d\u8def\u5982\u4e0b\uff1a \u5728\u5b8c\u6210\u5305\u7684 import \u4e4b\u540e\uff0c\u5f00\u59cb\u5bf9\u5e38\u91cf\u3001\u53d8\u91cf\u548c\u7c7b\u578b\u7684\u5b9a\u4e49\u6216\u58f0\u660e\u3002 \u5982\u679c\u5b58\u5728 init() \u51fd\u6570\u7684\u8bdd\uff0c\u5219\u5bf9\u8be5\u51fd\u6570\u8fdb\u884c\u5b9a\u4e49\uff08\u8fd9\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u51fd\u6570\uff0c\u6bcf\u4e2a\u542b\u6709\u8be5\u51fd\u6570\u7684\u5305\u90fd\u4f1a\u9996\u5148\u6267\u884c\u8fd9\u4e2a\u51fd\u6570\uff09\u3002 \u5982\u679c\u5f53\u524d\u5305\u662f main \u5305\uff0c\u5219\u5b9a\u4e49 main() \u51fd\u6570\u3002 \u7136\u540e\u5b9a\u4e49\u5176\u4f59\u7684\u51fd\u6570\uff0c\u9996\u5148\u662f\u7c7b\u578b\u7684\u65b9\u6cd5\uff0c\u63a5\u7740\u662f\u6309\u7167 main() \u51fd\u6570\u4e2d\u5148\u540e\u8c03\u7528\u7684\u987a\u5e8f\u6765\u5b9a\u4e49\u76f8\u5173\u51fd\u6570\uff0c\u5982\u679c\u6709\u5f88\u591a\u51fd\u6570\uff0c\u5219\u53ef\u4ee5\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\u6765\u8fdb\u884c\u6392\u5e8f\u3002 \u793a\u4f8b 4.4 gotemplate.go package main import ( \"fmt\" ) const c = \"C\" var v int = 5 type T struct {} func init () { // initialization of package } func main () { var a int Func1 () // ... fmt . Println ( a ) } func ( t T ) Method1 () { //... } func Func1 () { // exported function Func1 //... } Go \u7a0b\u5e8f\u7684\u6267\u884c\uff08\u7a0b\u5e8f\u542f\u52a8\uff09\u987a\u5e8f\u5982\u4e0b\uff1a \u6309\u987a\u5e8f\u5bfc\u5165\u6240\u6709\u88ab main \u5305\u5f15\u7528\u7684\u5176\u5b83\u5305\uff0c\u7136\u540e\u5728\u6bcf\u4e2a\u5305\u4e2d\u6267\u884c\u5982\u4e0b\u6d41\u7a0b\uff1a \u5982\u679c\u8be5\u5305\u53c8\u5bfc\u5165\u4e86\u5176\u5b83\u7684\u5305\uff0c\u5219\u4ece\u7b2c\u4e00\u6b65\u5f00\u59cb\u9012\u5f52\u6267\u884c\uff0c\u4f46\u662f\u6bcf\u4e2a\u5305\u53ea\u4f1a\u88ab\u5bfc\u5165\u4e00\u6b21\u3002 \u7136\u540e\u4ee5\u76f8\u53cd\u7684\u987a\u5e8f\u5728\u6bcf\u4e2a\u5305\u4e2d\u521d\u59cb\u5316\u5e38\u91cf\u548c\u53d8\u91cf\uff0c\u5982\u679c\u8be5\u5305\u542b\u6709 init() \u51fd\u6570\u7684\u8bdd\uff0c\u5219\u8c03\u7528\u8be5\u51fd\u6570\u3002 \u5728\u5b8c\u6210\u8fd9\u4e00\u5207\u4e4b\u540e\uff0c main \u4e5f\u6267\u884c\u540c\u6837\u7684\u8fc7\u7a0b\uff0c\u6700\u540e\u8c03\u7528 main() \u51fd\u6570\u5f00\u59cb\u6267\u884c\u7a0b\u5e8f\u3002","title":"4.2.5 Go \u7a0b\u5e8f\u7684\u4e00\u822c\u7ed3\u6784"},{"location":"04.2/#426","text":"\u5728\u5fc5\u8981\u4ee5\u53ca\u53ef\u884c\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u7c7b\u578b\u7684\u503c\u53ef\u4ee5\u88ab\u8f6c\u6362\u6210\u53e6\u4e00\u79cd\u7c7b\u578b\u7684\u503c\u3002\u7531\u4e8e Go \u8bed\u8a00\u4e0d\u5b58\u5728\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362\uff0c\u56e0\u6b64\u6240\u6709\u7684\u8f6c\u6362\u90fd\u5fc5\u987b\u663e\u5f0f\u8bf4\u660e\uff0c\u5c31\u50cf\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u4e00\u6837\uff08\u7c7b\u578b\u5728\u8fd9\u91cc\u7684\u4f5c\u7528\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u79cd\u51fd\u6570\uff09\uff1a valueOfTypeB = typeB ( valueOfTypeA ) \u7c7b\u578b B \u7684\u503c = \u7c7b\u578b B(\u7c7b\u578b A \u7684\u503c) \u793a\u4f8b\uff1a a := 5.0 b := int ( a ) \u4f46\u8fd9\u53ea\u80fd\u5728\u5b9a\u4e49\u6b63\u786e\u7684\u60c5\u51b5\u4e0b\u8f6c\u6362\u6210\u529f\uff0c\u4f8b\u5982\u4ece\u4e00\u4e2a\u53d6\u503c\u8303\u56f4\u8f83\u5c0f\u7684\u7c7b\u578b\u8f6c\u6362\u5230\u4e00\u4e2a\u53d6\u503c\u8303\u56f4\u8f83\u5927\u7684\u7c7b\u578b\uff08\u4f8b\u5982\u5c06 int16 \u8f6c\u6362\u4e3a int32 \uff09\u3002\u5f53\u4ece\u4e00\u4e2a\u53d6\u503c\u8303\u56f4\u8f83\u5927\u7684\u8f6c\u6362\u5230\u53d6\u503c\u8303\u56f4\u8f83\u5c0f\u7684\u7c7b\u578b\u65f6\uff08\u4f8b\u5982\u5c06 int32 \u8f6c\u6362\u4e3a int16 \u6216\u5c06 float32 \u8f6c\u6362\u4e3a int \uff09\uff0c\u4f1a\u53d1\u751f\u7cbe\u5ea6\u4e22\u5931\uff08\u622a\u65ad\uff09\u7684\u60c5\u51b5\u3002\u5f53\u7f16\u8bd1\u5668\u6355\u6349\u5230\u975e\u6cd5\u7684\u7c7b\u578b\u8f6c\u6362\u65f6\u4f1a\u5f15\u53d1\u7f16\u8bd1\u65f6\u9519\u8bef\uff0c\u5426\u5219\u5c06\u5f15\u53d1\u8fd0\u884c\u65f6\u9519\u8bef\u3002 \u5177\u6709\u76f8\u540c\u5e95\u5c42\u7c7b\u578b\u7684\u53d8\u91cf\u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u8f6c\u6362\uff1a var a IZ = 5 c := int ( a ) d := IZ ( c )","title":"4.2.6 \u7c7b\u578b\u8f6c\u6362"},{"location":"04.2/#427-go","text":"\u5e72\u51c0\u3001\u53ef\u8bfb\u7684\u4ee3\u7801\u548c\u7b80\u6d01\u6027\u662f Go \u8ffd\u6c42\u7684\u4e3b\u8981\u76ee\u6807\u3002\u901a\u8fc7 gofmt \u6765\u5f3a\u5236\u5b9e\u73b0\u7edf\u4e00\u7684\u4ee3\u7801\u98ce\u683c\u3002Go \u8bed\u8a00\u4e2d\u5bf9\u8c61\u7684\u547d\u540d\u4e5f\u5e94\u8be5\u662f\u7b80\u6d01\u4e14\u6709\u610f\u4e49\u7684\u3002\u50cf Java \u548c Python \u4e2d\u90a3\u6837\u4f7f\u7528\u6df7\u5408\u7740\u5927\u5c0f\u5199\u548c\u4e0b\u5212\u7ebf\u7684\u5197\u957f\u7684\u540d\u79f0\u4f1a\u4e25\u91cd\u964d\u4f4e\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u3002\u540d\u79f0\u4e0d\u9700\u8981\u6307\u51fa\u81ea\u5df1\u6240\u5c5e\u7684\u5305\uff0c\u56e0\u4e3a\u5728\u8c03\u7528\u7684\u65f6\u5019\u4f1a\u4f7f\u7528\u5305\u540d\u4f5c\u4e3a\u9650\u5b9a\u7b26\u3002\u8fd4\u56de\u67d0\u4e2a\u5bf9\u8c61\u7684\u51fd\u6570\u6216\u65b9\u6cd5\u7684\u540d\u79f0\u4e00\u822c\u90fd\u662f\u4f7f\u7528\u540d\u8bcd\uff0c\u6ca1\u6709 Get... \u4e4b\u7c7b\u7684\u5b57\u7b26\uff0c\u5982\u679c\u662f\u7528\u4e8e\u4fee\u6539\u67d0\u4e2a\u5bf9\u8c61\uff0c\u5219\u4f7f\u7528 SetName() \u3002\u6709\u5fc5\u987b\u8981\u7684\u8bdd\u53ef\u4ee5\u4f7f\u7528\u5927\u5c0f\u5199\u6df7\u5408\u7684\u65b9\u5f0f\uff0c\u5982 MixedCaps() \u6216 mixedCaps() \uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u4e0b\u5212\u7ebf\u6765\u5206\u5272\u591a\u4e2a\u540d\u79f0\u3002","title":"4.2.7 Go \u547d\u540d\u89c4\u8303"},{"location":"04.2/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6587\u4ef6\u540d\u3001\u5173\u952e\u5b57\u4e0e\u6807\u8bc6\u7b26 \u4e0b\u4e00\u8282\uff1a \u5e38\u91cf","title":"\u94fe\u63a5"},{"location":"04.3/","text":"4.3 \u5e38\u91cf \u00b6 \u5e38\u91cf\u4f7f\u7528\u5173\u952e\u5b57 const \u5b9a\u4e49\uff0c\u7528\u4e8e\u5b58\u50a8\u4e0d\u4f1a\u6539\u53d8\u7684\u6570\u636e\u3002 \u5b58\u50a8\u5728\u5e38\u91cf\u4e2d\u7684\u6570\u636e\u7c7b\u578b\u53ea\u53ef\u4ee5\u662f\u5e03\u5c14\u578b\u3001\u6570\u5b57\u578b\uff08\u6574\u6570\u578b\u3001\u6d6e\u70b9\u578b\u548c\u590d\u6570\uff09\u548c\u5b57\u7b26\u4e32\u578b\u3002 \u5e38\u91cf\u7684\u5b9a\u4e49\u683c\u5f0f\uff1a const identifier [type] = value \uff0c\u4f8b\u5982\uff1a const Pi = 3.14159 \u5728 Go \u8bed\u8a00\u4e2d\uff0c\u4f60\u53ef\u4ee5\u7701\u7565\u7c7b\u578b\u8bf4\u660e\u7b26 [type] \uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u53ef\u4ee5\u6839\u636e\u53d8\u91cf\u7684\u503c\u6765\u63a8\u65ad\u5176\u7c7b\u578b\u3002 \u663e\u5f0f\u7c7b\u578b\u5b9a\u4e49\uff1a const b string = \"abc\" \u9690\u5f0f\u7c7b\u578b\u5b9a\u4e49\uff1a const b = \"abc\" \u4e00\u4e2a\u6ca1\u6709\u6307\u5b9a\u7c7b\u578b\u7684\u5e38\u91cf\u88ab\u4f7f\u7528\u65f6\uff0c\u4f1a\u6839\u636e\u5176\u4f7f\u7528\u73af\u5883\u800c\u63a8\u65ad\u51fa\u5b83\u6240\u9700\u8981\u5177\u5907\u7684\u7c7b\u578b\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u672a\u5b9a\u4e49\u7c7b\u578b\u7684\u5e38\u91cf\u4f1a\u5728\u5fc5\u8981\u65f6\u523b\u6839\u636e\u4e0a\u4e0b\u6587\u6765\u83b7\u5f97\u76f8\u5173\u7c7b\u578b\u3002 var n int f ( n + 5 ) // \u65e0\u7c7b\u578b\u7684\u6570\u5b57\u578b\u5e38\u91cf \u201c5\u201d \u5b83\u7684\u7c7b\u578b\u5728\u8fd9\u91cc\u53d8\u6210\u4e86 int \u5e38\u91cf\u7684\u503c\u5fc5\u987b\u662f\u80fd\u591f\u5728\u7f16\u8bd1\u65f6\u5c31\u80fd\u591f\u786e\u5b9a\u7684\uff1b\u4f60\u53ef\u4ee5\u5728\u5176\u8d4b\u503c\u8868\u8fbe\u5f0f\u4e2d\u6d89\u53ca\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u4f46\u662f\u6240\u6709\u7528\u4e8e\u8ba1\u7b97\u7684\u503c\u5fc5\u987b\u5728\u7f16\u8bd1\u671f\u95f4\u5c31\u80fd\u83b7\u5f97\u3002 \u6b63\u786e\u7684\u505a\u6cd5\uff1a const c1 = 2/3 \u9519\u8bef\u7684\u505a\u6cd5\uff1a const c2 = getNumber() // \u5f15\u53d1\u6784\u5efa\u9519\u8bef: getNumber() used as value \u56e0\u4e3a\u5728\u7f16\u8bd1\u671f\u95f4\u81ea\u5b9a\u4e49\u51fd\u6570\u5747\u5c5e\u4e8e\u672a\u77e5\uff0c\u56e0\u6b64\u65e0\u6cd5\u7528\u4e8e\u5e38\u91cf\u7684\u8d4b\u503c\uff0c\u4f46\u5185\u7f6e\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\uff0c\u5982\uff1a len() \u3002 \u6570\u5b57\u578b\u7684\u5e38\u91cf\u662f\u6ca1\u6709\u5927\u5c0f\u548c\u7b26\u53f7\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u7cbe\u5ea6\u800c\u4e0d\u4f1a\u5bfc\u81f4\u6ea2\u51fa\uff1a const Ln2 = 0.693147180559945309417232121458 \\ 176568075500134360255254120680009 const Log2E = 1 / Ln2 // this is a precise reciprocal const Billion = 1e9 // float constant const hardEight = ( 1 << 100 ) >> 97 \u6839\u636e\u4e0a\u9762\u7684\u4f8b\u5b50\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u53cd\u659c\u6760 \\ \u53ef\u4ee5\u5728\u5e38\u91cf\u8868\u8fbe\u5f0f\u4e2d\u4f5c\u4e3a\u591a\u884c\u7684\u8fde\u63a5\u7b26\u4f7f\u7528\u3002 \u4e0e\u5404\u79cd\u7c7b\u578b\u7684\u6570\u5b57\u578b\u53d8\u91cf\u76f8\u6bd4\uff0c\u4f60\u65e0\u9700\u62c5\u5fc3\u5e38\u91cf\u4e4b\u95f4\u7684\u7c7b\u578b\u8f6c\u6362\u95ee\u9898\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u662f\u975e\u5e38\u7406\u60f3\u7684\u6570\u5b57\u3002 \u4e0d\u8fc7\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u5e38\u91cf\u8d4b\u503c\u7ed9\u4e00\u4e2a\u7cbe\u5ea6\u8fc7\u5c0f\u7684\u6570\u5b57\u578b\u53d8\u91cf\u65f6\uff0c\u53ef\u80fd\u4f1a\u56e0\u4e3a\u65e0\u6cd5\u6b63\u786e\u8868\u8fbe\u5e38\u91cf\u6240\u4ee3\u8868\u7684\u6570\u503c\u800c\u5bfc\u81f4\u6ea2\u51fa\uff0c\u8fd9\u4f1a\u5728\u7f16\u8bd1\u671f\u95f4\u5c31\u5f15\u53d1\u9519\u8bef\u3002\u53e6\u5916\uff0c\u5e38\u91cf\u4e5f\u5141\u8bb8\u4f7f\u7528\u5e76\u884c\u8d4b\u503c\u7684\u5f62\u5f0f\uff1a const beef , two , c = \"eat\" , 2 , \"veg\" const Monday , Tuesday , Wednesday , Thursday , Friday , Saturday = 1 , 2 , 3 , 4 , 5 , 6 const ( Monday , Tuesday , Wednesday = 1 , 2 , 3 Thursday , Friday , Saturday = 4 , 5 , 6 ) \u5e38\u91cf\u8fd8\u53ef\u4ee5\u7528\u4f5c\u679a\u4e3e\uff1a const ( Unknown = 0 Female = 1 Male = 2 ) \u73b0\u5728\uff0c\u6570\u5b57 0 \u3001 1 \u548c 2 \u5206\u522b\u4ee3\u8868\u672a\u77e5\u6027\u522b\u3001\u5973\u6027\u548c\u7537\u6027\u3002\u8fd9\u4e9b\u679a\u4e3e\u503c\u53ef\u4ee5\u7528\u4e8e\u6d4b\u8bd5\u67d0\u4e2a\u53d8\u91cf\u6216\u5e38\u91cf\u7684\u5b9e\u9645\u503c\uff0c\u6bd4\u5982\u4f7f\u7528 switch/case \u7ed3\u6784\uff08 \u7b2c 5.3 \u8282 \uff09\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c iota \u53ef\u4ee5\u88ab\u7528\u4f5c\u679a\u4e3e\u503c\uff1a const ( a = iota b = iota c = iota ) \u7b2c\u4e00\u4e2a iota \u7b49\u4e8e 0\uff0c\u6bcf\u5f53 iota \u5728\u65b0\u7684\u4e00\u884c\u88ab\u4f7f\u7528\u65f6\uff0c\u5b83\u7684\u503c\u90fd\u4f1a\u81ea\u52a8\u52a0 1\uff0c\u5e76\u4e14\u6ca1\u6709\u8d4b\u503c\u7684\u5e38\u91cf\u9ed8\u8ba4\u4f1a\u5e94\u7528\u4e0a\u4e00\u884c\u7684\u8d4b\u503c\u8868\u8fbe\u5f0f\uff1a // \u8d4b\u503c\u4e00\u4e2a\u5e38\u91cf\u65f6\uff0c\u4e4b\u540e\u6ca1\u8d4b\u503c\u7684\u5e38\u91cf\u90fd\u4f1a\u5e94\u7528\u4e0a\u4e00\u884c\u7684\u8d4b\u503c\u8868\u8fbe\u5f0f const ( a = iota // a = 0 b // b = 1 c // c = 2 d = 5 // d = 5 e // e = 5 ) // \u8d4b\u503c\u4e24\u4e2a\u5e38\u91cf\uff0ciota \u53ea\u4f1a\u589e\u957f\u4e00\u6b21\uff0c\u800c\u4e0d\u4f1a\u56e0\u4e3a\u4f7f\u7528\u4e86\u4e24\u6b21\u5c31\u589e\u957f\u4e24\u6b21 const ( Apple , Banana = iota + 1 , iota + 2 // Apple=1 Banana=2 Cherimoya , Durian // Cherimoya=2 Durian=3 Elderberry , Fig // Elderberry=3, Fig=4 ) // \u4f7f\u7528 iota \u7ed3\u5408 \u4f4d\u8fd0\u7b97 \u8868\u793a\u8d44\u6e90\u72b6\u6001\u7684\u4f7f\u7528\u6848\u4f8b const ( Open = 1 << iota // 0001 Close // 0010 Pending // 0100 ) const ( _ = iota // \u4f7f\u7528 _ \u5ffd\u7565\u4e0d\u9700\u8981\u7684 iota KB = 1 << ( 10 * iota ) // 1 << (10*1) MB // 1 << (10*2) GB // 1 << (10*3) TB // 1 << (10*4) PB // 1 << (10*5) EB // 1 << (10*6) ZB // 1 << (10*7) YB // 1 << (10*8) ) \uff08 \u8bd1\u8005\u6ce8\uff1a\u5173\u4e8e iota \u7684\u4f7f\u7528\u6d89\u53ca\u5230\u975e\u5e38\u590d\u6742\u591a\u6837\u7684\u60c5\u51b5\uff0c\u8fd9\u91cc\u4f5c\u8005\u89e3\u91ca\u7684\u5e76\u4e0d\u6e05\u6670\uff0c\u56e0\u4e3a\u5f88\u96be\u5bf9 iota \u7684\u7528\u6cd5\u8fdb\u884c\u76f4\u89c2\u7684\u6587\u5b57\u63cf\u8ff0\u3002\u5982\u5e0c\u671b\u8fdb\u4e00\u6b65\u4e86\u89e3\uff0c\u8bf7\u89c2\u770b\u89c6\u9891\u6559\u7a0b \u300aGo\u7f16\u7a0b\u57fa\u7840\u300b \u7b2c\u56db\u8bfe\uff1a\u5e38\u91cf\u4e0e\u8fd0\u7b97\u7b26 \uff09 iota \u4e5f\u53ef\u4ee5\u7528\u5728\u8868\u8fbe\u5f0f\u4e2d\uff0c\u5982\uff1a iota + 50 \u3002\u5728\u6bcf\u9047\u5230\u4e00\u4e2a\u65b0\u7684\u5e38\u91cf\u5757\u6216\u5355\u4e2a\u5e38\u91cf\u58f0\u660e\u65f6\uff0c iota \u90fd\u4f1a\u91cd\u7f6e\u4e3a 0\uff08 \u7b80\u5355\u5730\u8bb2\uff0c\u6bcf\u9047\u5230\u4e00\u6b21 const \u5173\u952e\u5b57\uff0c iota \u5c31\u91cd\u7f6e\u4e3a 0 \uff09\u3002 \u5f53\u7136\uff0c\u5e38\u91cf\u4e4b\u6240\u4ee5\u4e3a\u5e38\u91cf\u5c31\u662f\u6052\u5b9a\u4e0d\u53d8\u7684\u91cf\uff0c\u56e0\u6b64\u6211\u4eec\u65e0\u6cd5\u5728\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u4fee\u6539\u5b83\u7684\u503c\uff1b\u5982\u679c\u4f60\u5728\u4ee3\u7801\u4e2d\u8bd5\u56fe\u4fee\u6539\u5e38\u91cf\u7684\u503c\u5219\u4f1a\u5f15\u53d1\u7f16\u8bd1\u9519\u8bef\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Go \u7a0b\u5e8f\u7684\u57fa\u672c\u7ed3\u6784\u548c\u8981\u7d20 \u4e0b\u4e00\u8282\uff1a \u53d8\u91cf","title":"4.3 \u5e38\u91cf"},{"location":"04.3/#43","text":"\u5e38\u91cf\u4f7f\u7528\u5173\u952e\u5b57 const \u5b9a\u4e49\uff0c\u7528\u4e8e\u5b58\u50a8\u4e0d\u4f1a\u6539\u53d8\u7684\u6570\u636e\u3002 \u5b58\u50a8\u5728\u5e38\u91cf\u4e2d\u7684\u6570\u636e\u7c7b\u578b\u53ea\u53ef\u4ee5\u662f\u5e03\u5c14\u578b\u3001\u6570\u5b57\u578b\uff08\u6574\u6570\u578b\u3001\u6d6e\u70b9\u578b\u548c\u590d\u6570\uff09\u548c\u5b57\u7b26\u4e32\u578b\u3002 \u5e38\u91cf\u7684\u5b9a\u4e49\u683c\u5f0f\uff1a const identifier [type] = value \uff0c\u4f8b\u5982\uff1a const Pi = 3.14159 \u5728 Go \u8bed\u8a00\u4e2d\uff0c\u4f60\u53ef\u4ee5\u7701\u7565\u7c7b\u578b\u8bf4\u660e\u7b26 [type] \uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u53ef\u4ee5\u6839\u636e\u53d8\u91cf\u7684\u503c\u6765\u63a8\u65ad\u5176\u7c7b\u578b\u3002 \u663e\u5f0f\u7c7b\u578b\u5b9a\u4e49\uff1a const b string = \"abc\" \u9690\u5f0f\u7c7b\u578b\u5b9a\u4e49\uff1a const b = \"abc\" \u4e00\u4e2a\u6ca1\u6709\u6307\u5b9a\u7c7b\u578b\u7684\u5e38\u91cf\u88ab\u4f7f\u7528\u65f6\uff0c\u4f1a\u6839\u636e\u5176\u4f7f\u7528\u73af\u5883\u800c\u63a8\u65ad\u51fa\u5b83\u6240\u9700\u8981\u5177\u5907\u7684\u7c7b\u578b\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u672a\u5b9a\u4e49\u7c7b\u578b\u7684\u5e38\u91cf\u4f1a\u5728\u5fc5\u8981\u65f6\u523b\u6839\u636e\u4e0a\u4e0b\u6587\u6765\u83b7\u5f97\u76f8\u5173\u7c7b\u578b\u3002 var n int f ( n + 5 ) // \u65e0\u7c7b\u578b\u7684\u6570\u5b57\u578b\u5e38\u91cf \u201c5\u201d \u5b83\u7684\u7c7b\u578b\u5728\u8fd9\u91cc\u53d8\u6210\u4e86 int \u5e38\u91cf\u7684\u503c\u5fc5\u987b\u662f\u80fd\u591f\u5728\u7f16\u8bd1\u65f6\u5c31\u80fd\u591f\u786e\u5b9a\u7684\uff1b\u4f60\u53ef\u4ee5\u5728\u5176\u8d4b\u503c\u8868\u8fbe\u5f0f\u4e2d\u6d89\u53ca\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u4f46\u662f\u6240\u6709\u7528\u4e8e\u8ba1\u7b97\u7684\u503c\u5fc5\u987b\u5728\u7f16\u8bd1\u671f\u95f4\u5c31\u80fd\u83b7\u5f97\u3002 \u6b63\u786e\u7684\u505a\u6cd5\uff1a const c1 = 2/3 \u9519\u8bef\u7684\u505a\u6cd5\uff1a const c2 = getNumber() // \u5f15\u53d1\u6784\u5efa\u9519\u8bef: getNumber() used as value \u56e0\u4e3a\u5728\u7f16\u8bd1\u671f\u95f4\u81ea\u5b9a\u4e49\u51fd\u6570\u5747\u5c5e\u4e8e\u672a\u77e5\uff0c\u56e0\u6b64\u65e0\u6cd5\u7528\u4e8e\u5e38\u91cf\u7684\u8d4b\u503c\uff0c\u4f46\u5185\u7f6e\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\uff0c\u5982\uff1a len() \u3002 \u6570\u5b57\u578b\u7684\u5e38\u91cf\u662f\u6ca1\u6709\u5927\u5c0f\u548c\u7b26\u53f7\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u7cbe\u5ea6\u800c\u4e0d\u4f1a\u5bfc\u81f4\u6ea2\u51fa\uff1a const Ln2 = 0.693147180559945309417232121458 \\ 176568075500134360255254120680009 const Log2E = 1 / Ln2 // this is a precise reciprocal const Billion = 1e9 // float constant const hardEight = ( 1 << 100 ) >> 97 \u6839\u636e\u4e0a\u9762\u7684\u4f8b\u5b50\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u53cd\u659c\u6760 \\ \u53ef\u4ee5\u5728\u5e38\u91cf\u8868\u8fbe\u5f0f\u4e2d\u4f5c\u4e3a\u591a\u884c\u7684\u8fde\u63a5\u7b26\u4f7f\u7528\u3002 \u4e0e\u5404\u79cd\u7c7b\u578b\u7684\u6570\u5b57\u578b\u53d8\u91cf\u76f8\u6bd4\uff0c\u4f60\u65e0\u9700\u62c5\u5fc3\u5e38\u91cf\u4e4b\u95f4\u7684\u7c7b\u578b\u8f6c\u6362\u95ee\u9898\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u662f\u975e\u5e38\u7406\u60f3\u7684\u6570\u5b57\u3002 \u4e0d\u8fc7\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u5e38\u91cf\u8d4b\u503c\u7ed9\u4e00\u4e2a\u7cbe\u5ea6\u8fc7\u5c0f\u7684\u6570\u5b57\u578b\u53d8\u91cf\u65f6\uff0c\u53ef\u80fd\u4f1a\u56e0\u4e3a\u65e0\u6cd5\u6b63\u786e\u8868\u8fbe\u5e38\u91cf\u6240\u4ee3\u8868\u7684\u6570\u503c\u800c\u5bfc\u81f4\u6ea2\u51fa\uff0c\u8fd9\u4f1a\u5728\u7f16\u8bd1\u671f\u95f4\u5c31\u5f15\u53d1\u9519\u8bef\u3002\u53e6\u5916\uff0c\u5e38\u91cf\u4e5f\u5141\u8bb8\u4f7f\u7528\u5e76\u884c\u8d4b\u503c\u7684\u5f62\u5f0f\uff1a const beef , two , c = \"eat\" , 2 , \"veg\" const Monday , Tuesday , Wednesday , Thursday , Friday , Saturday = 1 , 2 , 3 , 4 , 5 , 6 const ( Monday , Tuesday , Wednesday = 1 , 2 , 3 Thursday , Friday , Saturday = 4 , 5 , 6 ) \u5e38\u91cf\u8fd8\u53ef\u4ee5\u7528\u4f5c\u679a\u4e3e\uff1a const ( Unknown = 0 Female = 1 Male = 2 ) \u73b0\u5728\uff0c\u6570\u5b57 0 \u3001 1 \u548c 2 \u5206\u522b\u4ee3\u8868\u672a\u77e5\u6027\u522b\u3001\u5973\u6027\u548c\u7537\u6027\u3002\u8fd9\u4e9b\u679a\u4e3e\u503c\u53ef\u4ee5\u7528\u4e8e\u6d4b\u8bd5\u67d0\u4e2a\u53d8\u91cf\u6216\u5e38\u91cf\u7684\u5b9e\u9645\u503c\uff0c\u6bd4\u5982\u4f7f\u7528 switch/case \u7ed3\u6784\uff08 \u7b2c 5.3 \u8282 \uff09\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c iota \u53ef\u4ee5\u88ab\u7528\u4f5c\u679a\u4e3e\u503c\uff1a const ( a = iota b = iota c = iota ) \u7b2c\u4e00\u4e2a iota \u7b49\u4e8e 0\uff0c\u6bcf\u5f53 iota \u5728\u65b0\u7684\u4e00\u884c\u88ab\u4f7f\u7528\u65f6\uff0c\u5b83\u7684\u503c\u90fd\u4f1a\u81ea\u52a8\u52a0 1\uff0c\u5e76\u4e14\u6ca1\u6709\u8d4b\u503c\u7684\u5e38\u91cf\u9ed8\u8ba4\u4f1a\u5e94\u7528\u4e0a\u4e00\u884c\u7684\u8d4b\u503c\u8868\u8fbe\u5f0f\uff1a // \u8d4b\u503c\u4e00\u4e2a\u5e38\u91cf\u65f6\uff0c\u4e4b\u540e\u6ca1\u8d4b\u503c\u7684\u5e38\u91cf\u90fd\u4f1a\u5e94\u7528\u4e0a\u4e00\u884c\u7684\u8d4b\u503c\u8868\u8fbe\u5f0f const ( a = iota // a = 0 b // b = 1 c // c = 2 d = 5 // d = 5 e // e = 5 ) // \u8d4b\u503c\u4e24\u4e2a\u5e38\u91cf\uff0ciota \u53ea\u4f1a\u589e\u957f\u4e00\u6b21\uff0c\u800c\u4e0d\u4f1a\u56e0\u4e3a\u4f7f\u7528\u4e86\u4e24\u6b21\u5c31\u589e\u957f\u4e24\u6b21 const ( Apple , Banana = iota + 1 , iota + 2 // Apple=1 Banana=2 Cherimoya , Durian // Cherimoya=2 Durian=3 Elderberry , Fig // Elderberry=3, Fig=4 ) // \u4f7f\u7528 iota \u7ed3\u5408 \u4f4d\u8fd0\u7b97 \u8868\u793a\u8d44\u6e90\u72b6\u6001\u7684\u4f7f\u7528\u6848\u4f8b const ( Open = 1 << iota // 0001 Close // 0010 Pending // 0100 ) const ( _ = iota // \u4f7f\u7528 _ \u5ffd\u7565\u4e0d\u9700\u8981\u7684 iota KB = 1 << ( 10 * iota ) // 1 << (10*1) MB // 1 << (10*2) GB // 1 << (10*3) TB // 1 << (10*4) PB // 1 << (10*5) EB // 1 << (10*6) ZB // 1 << (10*7) YB // 1 << (10*8) ) \uff08 \u8bd1\u8005\u6ce8\uff1a\u5173\u4e8e iota \u7684\u4f7f\u7528\u6d89\u53ca\u5230\u975e\u5e38\u590d\u6742\u591a\u6837\u7684\u60c5\u51b5\uff0c\u8fd9\u91cc\u4f5c\u8005\u89e3\u91ca\u7684\u5e76\u4e0d\u6e05\u6670\uff0c\u56e0\u4e3a\u5f88\u96be\u5bf9 iota \u7684\u7528\u6cd5\u8fdb\u884c\u76f4\u89c2\u7684\u6587\u5b57\u63cf\u8ff0\u3002\u5982\u5e0c\u671b\u8fdb\u4e00\u6b65\u4e86\u89e3\uff0c\u8bf7\u89c2\u770b\u89c6\u9891\u6559\u7a0b \u300aGo\u7f16\u7a0b\u57fa\u7840\u300b \u7b2c\u56db\u8bfe\uff1a\u5e38\u91cf\u4e0e\u8fd0\u7b97\u7b26 \uff09 iota \u4e5f\u53ef\u4ee5\u7528\u5728\u8868\u8fbe\u5f0f\u4e2d\uff0c\u5982\uff1a iota + 50 \u3002\u5728\u6bcf\u9047\u5230\u4e00\u4e2a\u65b0\u7684\u5e38\u91cf\u5757\u6216\u5355\u4e2a\u5e38\u91cf\u58f0\u660e\u65f6\uff0c iota \u90fd\u4f1a\u91cd\u7f6e\u4e3a 0\uff08 \u7b80\u5355\u5730\u8bb2\uff0c\u6bcf\u9047\u5230\u4e00\u6b21 const \u5173\u952e\u5b57\uff0c iota \u5c31\u91cd\u7f6e\u4e3a 0 \uff09\u3002 \u5f53\u7136\uff0c\u5e38\u91cf\u4e4b\u6240\u4ee5\u4e3a\u5e38\u91cf\u5c31\u662f\u6052\u5b9a\u4e0d\u53d8\u7684\u91cf\uff0c\u56e0\u6b64\u6211\u4eec\u65e0\u6cd5\u5728\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u4fee\u6539\u5b83\u7684\u503c\uff1b\u5982\u679c\u4f60\u5728\u4ee3\u7801\u4e2d\u8bd5\u56fe\u4fee\u6539\u5e38\u91cf\u7684\u503c\u5219\u4f1a\u5f15\u53d1\u7f16\u8bd1\u9519\u8bef\u3002","title":"4.3 \u5e38\u91cf"},{"location":"04.3/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Go \u7a0b\u5e8f\u7684\u57fa\u672c\u7ed3\u6784\u548c\u8981\u7d20 \u4e0b\u4e00\u8282\uff1a \u53d8\u91cf","title":"\u94fe\u63a5"},{"location":"04.4/","text":"4.4 \u53d8\u91cf \u00b6 4.4.1 \u7b80\u4ecb \u00b6 \u58f0\u660e\u53d8\u91cf\u7684\u4e00\u822c\u5f62\u5f0f\u662f\u4f7f\u7528 var \u5173\u952e\u5b57\uff1a var identifier type \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cGo \u548c\u8bb8\u591a\u7f16\u7a0b\u8bed\u8a00\u4e0d\u540c\uff0c\u5b83\u5728\u58f0\u660e\u53d8\u91cf\u65f6\u5c06\u53d8\u91cf\u7684\u7c7b\u578b\u653e\u5728\u53d8\u91cf\u7684\u540d\u79f0\u4e4b\u540e\u3002Go \u4e3a\u4ec0\u4e48\u8981\u9009\u62e9\u8fd9\u4e48\u505a\u5462\uff1f \u9996\u5148\uff0c\u5b83\u662f\u4e3a\u4e86\u907f\u514d\u50cf C \u8bed\u8a00\u4e2d\u90a3\u6837\u542b\u7cca\u4e0d\u6e05\u7684\u58f0\u660e\u5f62\u5f0f\uff0c\u4f8b\u5982\uff1a int* a, b; \u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u53ea\u6709 a \u662f\u6307\u9488\u800c b \u4e0d\u662f\u3002\u5982\u679c\u4f60\u60f3\u8981\u8fd9\u4e24\u4e2a\u53d8\u91cf\u90fd\u662f\u6307\u9488\uff0c\u5219\u9700\u8981\u5c06\u5b83\u4eec\u5206\u5f00\u4e66\u5199\uff08\u4f60\u53ef\u4ee5\u5728 Go \u8bed\u8a00\u7684\u58f0\u660e\u8bed\u6cd5 \u9875\u9762\u627e\u5230\u6709\u5173\u4e8e\u8fd9\u4e2a\u8bdd\u9898\u7684\u66f4\u591a\u8ba8\u8bba\uff09\u3002 \u800c\u5728 Go \u4e2d\uff0c\u5219\u53ef\u4ee5\u5f88\u8f7b\u677e\u5730\u5c06\u5b83\u4eec\u90fd\u58f0\u660e\u4e3a\u6307\u9488\u7c7b\u578b\uff1a var a , b * int \u5176\u6b21\uff0c\u8fd9\u79cd\u8bed\u6cd5\u80fd\u591f\u6309\u7167\u4ece\u5de6\u81f3\u53f3\u7684\u987a\u5e8f\u9605\u8bfb\uff0c\u4f7f\u5f97\u4ee3\u7801\u66f4\u52a0\u5bb9\u6613\u7406\u89e3\u3002 \u793a\u4f8b\uff1a var a int var b bool var str string \u4f60\u4e5f\u53ef\u4ee5\u6539\u5199\u6210\u8fd9\u79cd\u5f62\u5f0f\uff1a var ( a int b bool str string ) \u8fd9\u79cd\u56e0\u5f0f\u5206\u89e3\u5173\u952e\u5b57\u7684\u5199\u6cd5\u4e00\u822c\u7528\u4e8e\u58f0\u660e\u5168\u5c40\u53d8\u91cf\u3002 \u5f53\u4e00\u4e2a\u53d8\u91cf\u88ab\u58f0\u660e\u4e4b\u540e\uff0c\u7cfb\u7edf\u81ea\u52a8\u8d4b\u4e88\u5b83\u8be5\u7c7b\u578b\u7684\u96f6\u503c\uff1a int \u4e3a 0 \uff0c float32(64) \u4e3a 0.0 \uff0cbool \u4e3a false \uff0c string \u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u6307\u9488\u4e3a nil \u3002\u8bb0\u4f4f\uff0c\u6240\u6709\u7684\u5185\u5b58\u5728 Go \u4e2d\u90fd\u662f\u7ecf\u8fc7\u521d\u59cb\u5316\u7684\u3002 \u53d8\u91cf\u7684\u547d\u540d\u89c4\u5219\u9075\u5faa\u9a86\u9a7c\u547d\u540d\u6cd5\uff0c\u5373\u9996\u4e2a\u5355\u8bcd\u5c0f\u5199\uff0c\u6bcf\u4e2a\u65b0\u5355\u8bcd\u7684\u9996\u5b57\u6bcd\u5927\u5199\uff0c\u4f8b\u5982\uff1a numShips \u548c startDate \u3002 \u4f46\u5982\u679c\u4f60\u7684\u5168\u5c40\u53d8\u91cf\u5e0c\u671b\u80fd\u591f\u88ab\u5916\u90e8\u5305\u6240\u4f7f\u7528\uff0c\u5219\u9700\u8981\u5c06\u9996\u4e2a\u5355\u8bcd\u7684\u9996\u5b57\u6bcd\u4e5f\u5927\u5199\uff08\u7b2c 4.2 \u8282\uff1a\u53ef\u89c1\u6027\u89c4\u5219\uff09\u3002 \u4e00\u4e2a\u53d8\u91cf\uff08\u5e38\u91cf\u3001\u7c7b\u578b\u6216\u51fd\u6570\uff09\u5728\u7a0b\u5e8f\u4e2d\u90fd\u6709\u4e00\u5b9a\u7684\u4f5c\u7528\u8303\u56f4\uff0c\u79f0\u4e4b\u4e3a\u4f5c\u7528\u57df\u3002\u5982\u679c\u4e00\u4e2a\u53d8\u91cf\u5728\u51fd\u6570\u4f53\u5916\u58f0\u660e\uff0c\u5219\u88ab\u8ba4\u4e3a\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u53ef\u4ee5\u5728\u6574\u4e2a\u5305\u751a\u81f3\u5916\u90e8\u5305\uff08\u88ab\u5bfc\u51fa\u540e\uff09\u4f7f\u7528\uff0c\u4e0d\u7ba1\u4f60\u58f0\u660e\u5728\u54ea\u4e2a\u6e90\u6587\u4ef6\u91cc\u6216\u5728\u54ea\u4e2a\u6e90\u6587\u4ef6\u91cc\u8c03\u7528\u8be5\u53d8\u91cf\u3002 \u5728\u51fd\u6570\u4f53\u5185\u58f0\u660e\u7684\u53d8\u91cf\u79f0\u4e4b\u4e3a\u5c40\u90e8\u53d8\u91cf\uff0c\u5b83\u4eec\u7684\u4f5c\u7528\u57df\u53ea\u5728\u51fd\u6570\u4f53\u5185\uff0c\u53c2\u6570\u548c\u8fd4\u56de\u503c\u53d8\u91cf\u4e5f\u662f\u5c40\u90e8\u53d8\u91cf\u3002\u5728 \u7b2c 5 \u7ae0 \uff0c\u6211\u4eec\u5c06\u4f1a\u5b66\u4e60\u5230\u50cf if \u548c for \u8fd9\u4e9b\u63a7\u5236\u7ed3\u6784\uff0c\u800c\u5728\u8fd9\u4e9b\u7ed3\u6784\u4e2d\u58f0\u660e\u7684\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u53ea\u5728\u76f8\u5e94\u7684\u4ee3\u7801\u5757\u5185\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5c40\u90e8\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u53ef\u4ee5\u901a\u8fc7\u4ee3\u7801\u5757\uff08\u7528\u5927\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u90e8\u5206\uff09\u5224\u65ad\u3002 \u5c3d\u7ba1\u53d8\u91cf\u7684\u6807\u8bc6\u7b26\u5fc5\u987b\u662f\u552f\u4e00\u7684\uff0c\u4f46\u4f60\u53ef\u4ee5\u5728\u67d0\u4e2a\u4ee3\u7801\u5757\u7684\u5185\u5c42\u4ee3\u7801\u5757\u4e2d\u4f7f\u7528\u76f8\u540c\u540d\u79f0\u7684\u53d8\u91cf\uff0c\u5219\u6b64\u65f6\u5916\u90e8\u7684\u540c\u540d\u53d8\u91cf\u5c06\u4f1a\u6682\u65f6\u9690\u85cf\uff08\u7ed3\u675f\u5185\u90e8\u4ee3\u7801\u5757\u7684\u6267\u884c\u540e\u9690\u85cf\u7684\u5916\u90e8\u540c\u540d\u53d8\u91cf\u53c8\u4f1a\u51fa\u73b0\uff0c\u800c\u5185\u90e8\u540c\u540d\u53d8\u91cf\u5219\u88ab\u91ca\u653e\uff09\uff0c\u4f60\u4efb\u4f55\u7684\u64cd\u4f5c\u90fd\u53ea\u4f1a\u5f71\u54cd\u5185\u90e8\u4ee3\u7801\u5757\u7684\u5c40\u90e8\u53d8\u91cf\u3002 \u53d8\u91cf\u53ef\u4ee5\u7f16\u8bd1\u671f\u95f4\u5c31\u88ab\u8d4b\u503c\uff0c\u8d4b\u503c\u7ed9\u53d8\u91cf\u4f7f\u7528\u8fd0\u7b97\u7b26\u7b49\u53f7 = \uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u5bf9\u53d8\u91cf\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\u3002 \u793a\u4f8b\uff1a a = 15 b = false \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5f53\u53d8\u91cfa\u548c\u53d8\u91cfb\u4e4b\u95f4\u7c7b\u578b\u76f8\u540c\u65f6\uff0c\u624d\u80fd\u8fdb\u884c\u5982 a = b \u7684\u8d4b\u503c\u3002 \u58f0\u660e\u4e0e\u8d4b\u503c\uff08\u521d\u59cb\u5316\uff09\u8bed\u53e5\u4e5f\u53ef\u4ee5\u7ec4\u5408\u8d77\u6765\u3002 \u793a\u4f8b\uff1a var identifier [ type ] = value var a int = 15 var i = 5 var b bool = false var str string = \"Go says hello to the world!\" \u4f46\u662f Go \u7f16\u8bd1\u5668\u7684\u667a\u5546\u5df2\u7ecf\u9ad8\u5230\u53ef\u4ee5\u6839\u636e\u53d8\u91cf\u7684\u503c\u6765\u81ea\u52a8\u63a8\u65ad\u5176\u7c7b\u578b\uff0c\u8fd9\u6709\u70b9\u50cf Ruby \u548c Python \u8fd9\u7c7b\u52a8\u6001\u8bed\u8a00\uff0c\u53ea\u4e0d\u8fc7\u5b83\u4eec\u662f\u5728\u8fd0\u884c\u65f6\u8fdb\u884c\u63a8\u65ad\uff0c\u800c Go \u662f\u5728\u7f16\u8bd1\u65f6\u5c31\u5df2\u7ecf\u5b8c\u6210\u63a8\u65ad\u8fc7\u7a0b\u3002\u56e0\u6b64\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u8fd9\u4e9b\u5f62\u5f0f\u6765\u58f0\u660e\u53ca\u521d\u59cb\u5316\u53d8\u91cf\uff1a var a = 15 var b = false var str = \"Go says hello to the world!\" \u6216\uff1a var ( a = 15 b = false str = \"Go says hello to the world!\" numShips = 50 city string ) \u4e0d\u8fc7\u81ea\u52a8\u63a8\u65ad\u7c7b\u578b\u5e76\u4e0d\u662f\u4efb\u4f55\u65f6\u5019\u90fd\u9002\u7528\u7684\uff0c\u5f53\u4f60\u60f3\u8981\u7ed9\u53d8\u91cf\u7684\u7c7b\u578b\u5e76\u4e0d\u662f\u81ea\u52a8\u63a8\u65ad\u51fa\u7684\u67d0\u79cd\u7c7b\u578b\u65f6\uff0c\u4f60\u8fd8\u662f\u9700\u8981\u663e\u5f0f\u6307\u5b9a\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u4f8b\u5982\uff1a var n int64 = 2 \u7136\u800c\uff0c var a \u8fd9\u79cd\u8bed\u6cd5\u662f\u4e0d\u6b63\u786e\u7684\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u6ca1\u6709\u4efb\u4f55\u53ef\u4ee5\u7528\u4e8e\u81ea\u52a8\u63a8\u65ad\u7c7b\u578b\u7684\u4f9d\u636e\u3002\u53d8\u91cf\u7684\u7c7b\u578b\u4e5f\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u5b9e\u73b0\u81ea\u52a8\u63a8\u65ad\uff0c\u4f8b\u5982\uff1a var ( HOME = os . Getenv ( \"HOME\" ) USER = os . Getenv ( \"USER\" ) GOROOT = os . Getenv ( \"GOROOT\" ) ) \u8fd9\u79cd\u5199\u6cd5\u4e3b\u8981\u7528\u4e8e\u58f0\u660e\u5305\u7ea7\u522b\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u5f53\u4f60\u5728\u51fd\u6570\u4f53\u5185\u58f0\u660e\u5c40\u90e8\u53d8\u91cf\u65f6\uff0c\u5e94\u4f7f\u7528\u7b80\u77ed\u58f0\u660e\u8bed\u6cd5 := \uff0c\u4f8b\u5982\uff1a a := 1 \u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u5c55\u793a\u4e86\u5982\u4f55\u901a\u8fc7 runtime \u5305\u5728\u8fd0\u884c\u65f6\u83b7\u53d6\u6240\u5728\u7684\u64cd\u4f5c\u7cfb\u7edf\u7c7b\u578b\uff0c\u4ee5\u53ca\u5982\u4f55\u901a\u8fc7 os \u5305\u4e2d\u7684\u51fd\u6570 os.Getenv() \u6765\u83b7\u53d6\u73af\u5883\u53d8\u91cf\u4e2d\u7684\u503c\uff0c\u5e76\u4fdd\u5b58\u5230 string \u7c7b\u578b\u7684\u5c40\u90e8\u53d8\u91cf path \u4e2d\u3002 \u793a\u4f8b 4.5 goos.go package main import ( \"fmt\" \"runtime\" \"os\" ) func main () { var goos string = runtime . GOOS fmt . Printf ( \"The operating system is: %s\\n\" , goos ) path := os . Getenv ( \"PATH\" ) fmt . Printf ( \"Path is %s\\n\" , path ) } \u5982\u679c\u4f60\u5728 Windows \u4e0b\u8fd0\u884c\u8fd9\u6bb5\u4ee3\u7801\uff0c\u5219\u4f1a\u8f93\u51fa The operating system is: windows \u4ee5\u53ca\u76f8\u5e94\u7684\u73af\u5883\u53d8\u91cf\u7684\u503c\uff1b\u5982\u679c\u4f60\u5728 Linux \u4e0b\u8fd0\u884c\u8fd9\u6bb5\u4ee3\u7801\uff0c\u5219\u4f1a\u8f93\u51fa The operating system is: linux \u4ee5\u53ca\u76f8\u5e94\u7684\u7684\u73af\u5883\u53d8\u91cf\u7684\u503c\u3002 \u8fd9\u91cc\u7528\u5230\u4e86 Printf \u7684\u683c\u5f0f\u5316\u8f93\u51fa\u7684\u529f\u80fd\uff08 \u7b2c 4.4.3 \u8282 \uff09\u3002 4.4.2 \u503c\u7c7b\u578b\u548c\u5f15\u7528\u7c7b\u578b \u00b6 \u7a0b\u5e8f\u4e2d\u6240\u7528\u5230\u7684\u5185\u5b58\u5728\u8ba1\u7b97\u673a\u4e2d\u4f7f\u7528\u4e00\u5806\u7bb1\u5b50\u6765\u8868\u793a\uff08\u8fd9\u4e5f\u662f\u4eba\u4eec\u5728\u8bb2\u89e3\u5b83\u7684\u65f6\u5019\u7684\u753b\u6cd5\uff09\uff0c\u8fd9\u4e9b\u7bb1\u5b50\u88ab\u79f0\u4e3a\u201c\u5b57\u201d\u3002\u6839\u636e\u4e0d\u540c\u7684\u5904\u7406\u5668\u4ee5\u53ca\u64cd\u4f5c\u7cfb\u7edf\u7c7b\u578b\uff0c\u6240\u6709\u7684\u5b57\u90fd\u5177\u6709 32 \u4f4d\uff084 \u5b57\u8282\uff09\u6216 64 \u4f4d\uff088 \u5b57\u8282\uff09\u7684\u76f8\u540c\u957f\u5ea6\uff1b\u6240\u6709\u7684\u5b57\u90fd\u4f7f\u7528\u76f8\u5173\u7684\u5185\u5b58\u5730\u5740\u6765\u8fdb\u884c\u8868\u793a\uff08\u4ee5\u5341\u516d\u8fdb\u5236\u6570\u8868\u793a\uff09\u3002 \u6240\u6709\u50cf int \u3001 float \u3001 bool \u548c string \u8fd9\u4e9b\u57fa\u672c\u7c7b\u578b\u90fd\u5c5e\u4e8e\u503c\u7c7b\u578b\uff0c\u4f7f\u7528\u8fd9\u4e9b\u7c7b\u578b\u7684\u53d8\u91cf\u76f4\u63a5\u6307\u5411\u5b58\u5728\u5185\u5b58\u4e2d\u7684\u503c\uff1a \u53e6\u5916\uff0c\u50cf\u6570\u7ec4\uff08 \u7b2c 7 \u7ae0 \uff09\u548c\u7ed3\u6784\uff08 \u7b2c 10 \u7ae0 \uff09\u8fd9\u4e9b\u590d\u5408\u7c7b\u578b\u4e5f\u662f\u503c\u7c7b\u578b\u3002 \u5f53\u4f7f\u7528\u7b49\u53f7 = \u5c06\u4e00\u4e2a\u53d8\u91cf\u7684\u503c\u8d4b\u503c\u7ed9\u53e6\u4e00\u4e2a\u53d8\u91cf\u65f6\uff0c\u5982\uff1a j = i \uff0c\u5b9e\u9645\u4e0a\u662f\u5728\u5185\u5b58\u4e2d\u5c06 i \u7684\u503c\u8fdb\u884c\u4e86\u62f7\u8d1d\uff1a \u4f60\u53ef\u4ee5\u901a\u8fc7 &i \u6765\u83b7\u53d6\u53d8\u91cf i \u7684\u5185\u5b58\u5730\u5740\uff08 \u7b2c 4.9 \u8282 \uff09\uff0c\u4f8b\u5982\uff1a 0xf840000040 \uff08\u6bcf\u6b21\u7684\u5730\u5740\u90fd\u53ef\u80fd\u4e0d\u4e00\u6837\uff09\u3002\u503c\u7c7b\u578b\u7684\u53d8\u91cf\u7684\u503c\u5b58\u50a8\u5728\u6808\u4e2d\u3002 \u5185\u5b58\u5730\u5740\u4f1a\u6839\u636e\u673a\u5668\u7684\u4e0d\u540c\u800c\u6709\u6240\u4e0d\u540c\uff0c\u751a\u81f3\u76f8\u540c\u7684\u7a0b\u5e8f\u5728\u4e0d\u540c\u7684\u673a\u5668\u4e0a\u6267\u884c\u540e\u4e5f\u4f1a\u6709\u4e0d\u540c\u7684\u5185\u5b58\u5730\u5740\u3002\u56e0\u4e3a\u6bcf\u53f0\u673a\u5668\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u5b58\u50a8\u5668\u5e03\u5c40\uff0c\u5e76\u4e14\u4f4d\u7f6e\u5206\u914d\u4e5f\u53ef\u80fd\u4e0d\u540c\u3002 \u66f4\u590d\u6742\u7684\u6570\u636e\u901a\u5e38\u4f1a\u9700\u8981\u4f7f\u7528\u591a\u4e2a\u5b57\uff0c\u8fd9\u4e9b\u6570\u636e\u4e00\u822c\u4f7f\u7528\u5f15\u7528\u7c7b\u578b\u4fdd\u5b58\u3002 \u4e00\u4e2a\u5f15\u7528\u7c7b\u578b\u7684\u53d8\u91cf r1 \u5b58\u50a8\u7684\u662f r1 \u7684\u503c\u6240\u5728\u7684\u5185\u5b58\u5730\u5740\uff08\u6570\u5b57\uff09\uff0c\u6216\u5185\u5b58\u5730\u5740\u4e2d\u7b2c\u4e00\u4e2a\u5b57\u6240\u5728\u7684\u4f4d\u7f6e\u3002 \u8fd9\u4e2a\u5185\u5b58\u5730\u5740\u88ab\u79f0\u4e4b\u4e3a\u6307\u9488\uff08\u4f60\u53ef\u4ee5\u4ece\u4e0a\u56fe\u4e2d\u5f88\u6e05\u6670\u5730\u770b\u5230\uff0c \u7b2c 4.9 \u8282 \u5c06\u4f1a\u8be6\u7ec6\u8bf4\u660e\uff09\uff0c\u8fd9\u4e2a\u6307\u9488\u5b9e\u9645\u4e0a\u4e5f\u88ab\u5b58\u5728\u53e6\u5916\u7684\u67d0\u4e00\u4e2a\u5b57\u4e2d\u3002 \u540c\u4e00\u4e2a\u5f15\u7528\u7c7b\u578b\u7684\u6307\u9488\u6307\u5411\u7684\u591a\u4e2a\u5b57\u53ef\u4ee5\u662f\u5728\u8fde\u7eed\u7684\u5185\u5b58\u5730\u5740\u4e2d\uff08\u5185\u5b58\u5e03\u5c40\u662f\u8fde\u7eed\u7684\uff09\uff0c\u8fd9\u4e5f\u662f\u8ba1\u7b97\u6548\u7387\u6700\u9ad8\u7684\u4e00\u79cd\u5b58\u50a8\u5f62\u5f0f\uff1b\u4e5f\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u5b57\u5206\u6563\u5b58\u653e\u5728\u5185\u5b58\u4e2d\uff0c\u6bcf\u4e2a\u5b57\u90fd\u6307\u793a\u4e86\u4e0b\u4e00\u4e2a\u5b57\u6240\u5728\u7684\u5185\u5b58\u5730\u5740\u3002 \u5f53\u4f7f\u7528\u8d4b\u503c\u8bed\u53e5 r2 = r1 \u65f6\uff0c\u53ea\u6709\u5f15\u7528\uff08\u5730\u5740\uff09\u88ab\u590d\u5236\u3002 \u5982\u679c r1 \u7684\u503c\u88ab\u6539\u53d8\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e2a\u503c\u7684\u6240\u6709\u5f15\u7528\u90fd\u4f1a\u6307\u5411\u88ab\u4fee\u6539\u540e\u7684\u5185\u5bb9\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c r2 \u4e5f\u4f1a\u53d7\u5230\u5f71\u54cd\u3002 \u5728 Go \u8bed\u8a00\u4e2d\uff0c\u6307\u9488\uff08 \u7b2c 4.9 \u8282 \uff09\u5c5e\u4e8e\u5f15\u7528\u7c7b\u578b\uff0c\u5176\u5b83\u7684\u5f15\u7528\u7c7b\u578b\u8fd8\u5305\u62ec slices\uff08 \u7b2c 7 \u7ae0 \uff09\uff0cmaps\uff08 \u7b2c 8 \u7ae0 \uff09\u548c channel\uff08 \u7b2c 13 \u7ae0 \uff09\u3002\u88ab\u5f15\u7528\u7684\u53d8\u91cf\u4f1a\u5b58\u50a8\u5728\u5806\u4e2d\uff0c\u4ee5\u4fbf\u8fdb\u884c\u5783\u573e\u56de\u6536\uff0c\u4e14\u6bd4\u6808\u62e5\u6709\u66f4\u5927\u7684\u5185\u5b58\u7a7a\u95f4\u3002 4.4.3 \u6253\u5370 \u00b6 \u51fd\u6570 Printf \u53ef\u4ee5\u5728 fmt \u5305\u5916\u90e8\u4f7f\u7528\uff0c\u8fd9\u662f\u56e0\u4e3a\u5b83\u4ee5\u5927\u5199\u5b57\u6bcd P \u5f00\u5934\uff0c\u8be5\u51fd\u6570\u4e3b\u8981\u7528\u4e8e\u6253\u5370\u8f93\u51fa\u5230\u63a7\u5236\u53f0\u3002\u901a\u5e38\u4f7f\u7528\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\uff1a func Printf ( format string , list of variables to be printed ) \u5728\u793a\u4f8b 4.5 \u4e2d\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e3a\uff1a \"The operating system is: %s\\n\" \u3002 \u8fd9\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53ef\u4ee5\u542b\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u7684\u683c\u5f0f\u5316\u6807\u8bc6\u7b26\uff0c\u4f8b\u5982\uff1a %.. \uff0c\u5176\u4e2d .. \u53ef\u4ee5\u88ab\u4e0d\u540c\u7c7b\u578b\u6240\u5bf9\u5e94\u7684\u6807\u8bc6\u7b26\u66ff\u6362\uff0c\u5982 %s \u4ee3\u8868\u5b57\u7b26\u4e32\u6807\u8bc6\u7b26\u3001 %v \u4ee3\u8868\u4f7f\u7528\u7c7b\u578b\u7684\u9ed8\u8ba4\u8f93\u51fa\u683c\u5f0f\u7684\u6807\u8bc6\u7b26\u3002\u8fd9\u4e9b\u6807\u8bc6\u7b26\u6240\u5bf9\u5e94\u7684\u503c\u4ece\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u540e\u7684\u7b2c\u4e00\u4e2a\u9017\u53f7\u5f00\u59cb\u6309\u7167\u76f8\u540c\u987a\u5e8f\u6dfb\u52a0\uff0c\u5982\u679c\u53c2\u6570\u8d85\u8fc7 1 \u4e2a\u5219\u540c\u6837\u9700\u8981\u4f7f\u7528\u9017\u53f7\u5206\u9694\u3002\u4f7f\u7528\u8fd9\u4e9b\u5360\u4f4d\u7b26\u53ef\u4ee5\u5f88\u597d\u5730\u63a7\u5236\u683c\u5f0f\u5316\u8f93\u51fa\u7684\u6587\u672c\u3002 \u51fd\u6570 fmt.Sprintf \u4e0e Printf \u7684\u4f5c\u7528\u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u4e0d\u8fc7\u524d\u8005\u5c06\u683c\u5f0f\u5316\u540e\u7684\u5b57\u7b26\u4e32\u4ee5\u8fd4\u56de\u503c\u7684\u5f62\u5f0f\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u5728\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5305\u542b\u53d8\u91cf\u7684\u5b57\u7b26\u4e32\uff0c\u5177\u4f53\u4f8b\u5b50\u53ef\u4ee5\u53c2\u89c1\u793a\u4f8b 15.4 simple_tcp_server.go \u3002 \u51fd\u6570 fmt.Print \u548c fmt.Println \u4f1a\u81ea\u52a8\u4f7f\u7528\u683c\u5f0f\u5316\u6807\u8bc6\u7b26 %v \u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u683c\u5f0f\u5316\uff0c\u4e24\u8005\u90fd\u4f1a\u5728\u6bcf\u4e2a\u53c2\u6570\u4e4b\u95f4\u81ea\u52a8\u589e\u52a0\u7a7a\u683c\uff0c\u800c\u540e\u8005\u8fd8\u4f1a\u5728\u5b57\u7b26\u4e32\u7684\u6700\u540e\u52a0\u4e0a\u4e00\u4e2a\u6362\u884c\u7b26\u3002\u4f8b\u5982\uff1a fmt . Print ( \"Hello:\" , 23 ) \u5c06\u8f93\u51fa\uff1a Hello: 23 \u3002 4.4.4 \u7b80\u77ed\u5f62\u5f0f\uff0c\u4f7f\u7528 := \u8d4b\u503c\u64cd\u4f5c\u7b26 \u00b6 \u6211\u4eec\u77e5\u9053\u53ef\u4ee5\u5728\u53d8\u91cf\u7684\u521d\u59cb\u5316\u65f6\u7701\u7565\u53d8\u91cf\u7684\u7c7b\u578b\u800c\u7531\u7cfb\u7edf\u81ea\u52a8\u63a8\u65ad\uff0c\u800c\u8fd9\u4e2a\u65f6\u5019\u518d\u5728 Example 4.4.1 \u7684\u6700\u540e\u4e00\u4e2a\u58f0\u660e\u8bed\u53e5\u5199\u4e0a var \u5173\u952e\u5b57\u5c31\u663e\u5f97\u6709\u4e9b\u591a\u4f59\u4e86\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u4eec\u7b80\u5199\u4e3a a := 50 \u6216 b := false \u3002 a \u548c b \u7684\u7c7b\u578b\uff08 int \u548c bool \uff09\u5c06\u7531\u7f16\u8bd1\u5668\u81ea\u52a8\u63a8\u65ad\u3002 \u8fd9\u662f\u4f7f\u7528\u53d8\u91cf\u7684\u9996\u9009\u5f62\u5f0f\uff0c\u4f46\u662f\u5b83\u53ea\u80fd\u88ab\u7528\u5728\u51fd\u6570\u4f53\u5185\uff0c\u800c\u4e0d\u53ef\u4ee5\u7528\u4e8e\u5168\u5c40\u53d8\u91cf\u7684\u58f0\u660e\u4e0e\u8d4b\u503c\u3002\u4f7f\u7528\u64cd\u4f5c\u7b26 := \u53ef\u4ee5\u9ad8\u6548\u5730\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u53d8\u91cf\uff0c\u79f0\u4e4b\u4e3a\u521d\u59cb\u5316\u58f0\u660e\u3002 \u6ce8\u610f\u4e8b\u9879 \u5982\u679c\u5728\u76f8\u540c\u7684\u4ee3\u7801\u5757\u4e2d\uff0c\u6211\u4eec\u4e0d\u53ef\u4ee5\u518d\u6b21\u5bf9\u4e8e\u76f8\u540c\u540d\u79f0\u7684\u53d8\u91cf\u4f7f\u7528\u521d\u59cb\u5316\u58f0\u660e\uff0c\u4f8b\u5982\uff1a a := 20 \u5c31\u662f\u4e0d\u88ab\u5141\u8bb8\u7684\uff0c\u7f16\u8bd1\u5668\u4f1a\u63d0\u793a\u9519\u8bef no new variables on left side of := \uff0c\u4f46\u662f a = 20 \u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a\u8fd9\u662f\u7ed9\u76f8\u540c\u7684\u53d8\u91cf\u8d4b\u4e88\u4e00\u4e2a\u65b0\u7684\u503c\u3002 \u5982\u679c\u4f60\u5728\u5b9a\u4e49\u53d8\u91cf a \u4e4b\u524d\u4f7f\u7528\u5b83\uff0c\u5219\u4f1a\u5f97\u5230\u7f16\u8bd1\u9519\u8bef undefined: a \u3002 \u5982\u679c\u4f60\u58f0\u660e\u4e86\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u5374\u6ca1\u6709\u5728\u76f8\u540c\u7684\u4ee3\u7801\u5757\u4e2d\u4f7f\u7528\u5b83\uff0c\u540c\u6837\u4f1a\u5f97\u5230\u7f16\u8bd1\u9519\u8bef\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u5f53\u4e2d\u7684\u53d8\u91cf a \uff1a func main () { var a string = \"abc\" fmt . Println ( \"hello, world\" ) } \u5c1d\u8bd5\u7f16\u8bd1\u8fd9\u6bb5\u4ee3\u7801\u5c06\u5f97\u5230\u9519\u8bef a declared and not used \u3002 \u6b64\u5916\uff0c\u5355\u7eaf\u5730\u7ed9 a \u8d4b\u503c\u4e5f\u662f\u4e0d\u591f\u7684\uff0c\u8fd9\u4e2a\u503c\u5fc5\u987b\u88ab\u4f7f\u7528\uff0c\u6240\u4ee5\u4f7f\u7528 fmt.Println(\"hello, world\", a) \u4f1a\u79fb\u9664\u9519\u8bef\u3002 \u4f46\u662f\u5168\u5c40\u53d8\u91cf\u662f\u5141\u8bb8\u58f0\u660e\u4f46\u4e0d\u4f7f\u7528\u3002 \u5176\u4ed6\u7684\u7b80\u77ed\u5f62\u5f0f\u4e3a\uff1a \u540c\u4e00\u7c7b\u578b\u7684\u591a\u4e2a\u53d8\u91cf\u53ef\u4ee5\u58f0\u660e\u5728\u540c\u4e00\u884c\uff0c\u5982\uff1a var a , b , c int (\u8fd9\u662f\u5c06\u7c7b\u578b\u5199\u5728\u6807\u8bc6\u7b26\u540e\u9762\u7684\u4e00\u4e2a\u91cd\u8981\u539f\u56e0) \u591a\u53d8\u91cf\u53ef\u4ee5\u5728\u540c\u4e00\u884c\u8fdb\u884c\u8d4b\u503c\uff0c\u5982\uff1a a , b , c = 5 , 7 , \"abc\" \u4e0a\u9762\u8fd9\u884c\u5047\u8bbe\u4e86\u53d8\u91cf a \uff0c b \u548c c \u90fd\u5df2\u7ecf\u88ab\u58f0\u660e\uff0c\u5426\u5219\u7684\u8bdd\u5e94\u8be5\u8fd9\u6837\u4f7f\u7528\uff1a a , b , c := 5 , 7 , \"abc\" \u53f3\u8fb9\u7684\u8fd9\u4e9b\u503c\u4ee5\u76f8\u540c\u7684\u987a\u5e8f\u8d4b\u503c\u7ed9\u5de6\u8fb9\u7684\u53d8\u91cf\uff0c\u6240\u4ee5 a \u7684\u503c\u662f 5 \uff0c b \u7684\u503c\u662f 7 \uff0c c \u7684\u503c\u662f \"abc\" \u3002 \u8fd9\u88ab\u79f0\u4e3a \u5e76\u884c \u6216 \u540c\u65f6 \u8d4b\u503c\u3002 \u5982\u679c\u4f60\u60f3\u8981\u4ea4\u6362\u4e24\u4e2a\u53d8\u91cf\u7684\u503c\uff0c\u5219\u53ef\u4ee5\u7b80\u5355\u5730\u4f7f\u7528 a, b = b, a \u3002 (\u5728 Go \u8bed\u8a00\u4e2d\uff0c\u8fd9\u6837\u7701\u53bb\u4e86\u4f7f\u7528\u4ea4\u6362\u51fd\u6570\u7684\u5fc5\u8981) \u7a7a\u767d\u6807\u8bc6\u7b26 _ \u4e5f\u88ab\u7528\u4e8e\u629b\u5f03\u503c\uff0c\u5982\u503c 5 \u5728\uff1a _, b = 5, 7 \u4e2d\u88ab\u629b\u5f03\u3002 _ \u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u53ea\u5199\u53d8\u91cf\uff0c\u4f60\u4e0d\u80fd\u5f97\u5230\u5b83\u7684\u503c\u3002\u8fd9\u6837\u505a\u662f\u56e0\u4e3a Go \u8bed\u8a00\u4e2d\u4f60\u5fc5\u987b\u4f7f\u7528\u6240\u6709\u88ab\u58f0\u660e\u7684\u53d8\u91cf\uff0c\u4f46\u6709\u65f6\u4f60\u5e76\u4e0d\u9700\u8981\u4f7f\u7528\u4ece\u4e00\u4e2a\u51fd\u6570\u5f97\u5230\u7684\u6240\u6709\u8fd4\u56de\u503c\u3002 \u5e76\u884c\u8d4b\u503c\u4e5f\u88ab\u7528\u4e8e\u5f53\u4e00\u4e2a\u51fd\u6570\u8fd4\u56de\u591a\u4e2a\u8fd4\u56de\u503c\u65f6\uff0c\u6bd4\u5982\u8fd9\u91cc\u7684 val \u548c\u9519\u8bef err \u662f\u901a\u8fc7\u8c03\u7528 Func1 \u51fd\u6570\u540c\u65f6\u5f97\u5230\uff1a val, err = Func1(var1) \u3002 4.4.5 init \u51fd\u6570 \u00b6 \u53d8\u91cf\u9664\u4e86\u53ef\u4ee5\u5728\u5168\u5c40\u58f0\u660e\u4e2d\u521d\u59cb\u5316\uff0c\u4e5f\u53ef\u4ee5\u5728 init() \u51fd\u6570\u4e2d\u521d\u59cb\u5316\u3002\u8fd9\u662f\u4e00\u7c7b\u975e\u5e38\u7279\u6b8a\u7684\u51fd\u6570\uff0c\u5b83\u4e0d\u80fd\u591f\u88ab\u4eba\u4e3a\u8c03\u7528\uff0c\u800c\u662f\u5728\u6bcf\u4e2a\u5305\u5b8c\u6210\u521d\u59cb\u5316\u540e\u81ea\u52a8\u6267\u884c\uff0c\u5e76\u4e14\u6267\u884c\u4f18\u5148\u7ea7\u6bd4 main() \u51fd\u6570\u9ad8\u3002 \u6bcf\u4e2a\u6e90\u6587\u4ef6\u53ef\u4ee5\u5305\u542b\u591a\u4e2a init() \u51fd\u6570\uff0c\u540c\u4e00\u4e2a\u6e90\u6587\u4ef6\u4e2d\u7684 init() \u51fd\u6570\u4f1a\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u6267\u884c\uff0c\u5982\u679c\u4e00\u4e2a\u5305\u6709\u591a\u4e2a\u6e90\u6587\u4ef6\u5305\u542b init() \u51fd\u6570\u7684\u8bdd\uff0c\u5219\u5b98\u65b9\u9f13\u52b1\u4f46\u4e0d\u4fdd\u8bc1\u4ee5\u6587\u4ef6\u540d\u7684\u987a\u5e8f\u8c03\u7528\u3002\u521d\u59cb\u5316\u603b\u662f\u4ee5\u5355\u7ebf\u7a0b\u5e76\u4e14\u6309\u7167\u5305\u7684\u4f9d\u8d56\u5173\u7cfb\u987a\u5e8f\u6267\u884c\u3002 \u4e00\u4e2a\u53ef\u80fd\u7684\u7528\u9014\u662f\u5728\u5f00\u59cb\u6267\u884c\u7a0b\u5e8f\u4e4b\u524d\u5bf9\u6570\u636e\u8fdb\u884c\u68c0\u9a8c\u6216\u4fee\u590d\uff0c\u4ee5\u4fdd\u8bc1\u7a0b\u5e8f\u72b6\u6001\u7684\u6b63\u786e\u6027\u3002 \u793a\u4f8b 4.6 init.go : package trans import \"math\" var Pi float64 func init () { Pi = 4 * math . Atan ( 1 ) // init() function computes Pi } \u5728\u5b83\u7684 init() \u51fd\u6570\u4e2d\u8ba1\u7b97\u53d8\u91cf Pi \u7684\u521d\u59cb\u503c\u3002 \u793a\u4f8b 4.7 user_init.go \u4e2d\u5bfc\u5165\u4e86\u5305 trans \uff08\u9700\u8981 init.go \u76ee\u5f55\u4e3a ./trans/init.go \uff09\u5e76\u4e14\u4f7f\u7528\u5230\u4e86\u53d8\u91cf Pi \uff1a package main import ( \"fmt\" \"./trans\" ) var twoPi = 2 * trans . Pi func main () { fmt . Printf ( \"2*Pi = %g\\n\" , twoPi ) // 2*Pi = 6.283185307179586 } init() \u51fd\u6570\u4e5f\u7ecf\u5e38\u88ab\u7528\u5728\u5f53\u4e00\u4e2a\u7a0b\u5e8f\u5f00\u59cb\u4e4b\u524d\u8c03\u7528\u540e\u53f0\u6267\u884c\u7684 goroutine\uff0c\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u5f53\u4e2d\u7684 backend() \uff1a func init () { // setup preparations go backend () } \u7ec3\u4e60 \u63a8\u65ad\u4ee5\u4e0b\u7a0b\u5e8f\u7684\u8f93\u51fa\uff0c\u5e76\u89e3\u91ca\u4f60\u7684\u7b54\u6848\uff0c\u7136\u540e\u7f16\u8bd1\u5e76\u6267\u884c\u5b83\u4eec\u3002 \u7ec3\u4e60 4.1 local_scope.go : package main var a = \"G\" func main () { n () m () n () } func n () { print ( a ) } func m () { a := \"O\" print ( a ) } \u7ec3\u4e60 4.2 global_scope.go : package main var a = \"G\" func main () { n () m () n () } func n () { print ( a ) } func m () { a = \"O\" print ( a ) } \u7ec3\u4e60 4.3 function_calls_function.go package main var a string func main () { a = \"G\" print ( a ) f1 () } func f1 () { a := \"O\" print ( a ) f2 () } func f2 () { print ( a ) } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5e38\u91cf \u4e0b\u4e00\u8282\uff1a \u57fa\u672c\u7c7b\u578b\u548c\u8fd0\u7b97\u7b26","title":"4.4 \u53d8\u91cf"},{"location":"04.4/#44","text":"","title":"4.4 \u53d8\u91cf"},{"location":"04.4/#441","text":"\u58f0\u660e\u53d8\u91cf\u7684\u4e00\u822c\u5f62\u5f0f\u662f\u4f7f\u7528 var \u5173\u952e\u5b57\uff1a var identifier type \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cGo \u548c\u8bb8\u591a\u7f16\u7a0b\u8bed\u8a00\u4e0d\u540c\uff0c\u5b83\u5728\u58f0\u660e\u53d8\u91cf\u65f6\u5c06\u53d8\u91cf\u7684\u7c7b\u578b\u653e\u5728\u53d8\u91cf\u7684\u540d\u79f0\u4e4b\u540e\u3002Go \u4e3a\u4ec0\u4e48\u8981\u9009\u62e9\u8fd9\u4e48\u505a\u5462\uff1f \u9996\u5148\uff0c\u5b83\u662f\u4e3a\u4e86\u907f\u514d\u50cf C \u8bed\u8a00\u4e2d\u90a3\u6837\u542b\u7cca\u4e0d\u6e05\u7684\u58f0\u660e\u5f62\u5f0f\uff0c\u4f8b\u5982\uff1a int* a, b; \u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u53ea\u6709 a \u662f\u6307\u9488\u800c b \u4e0d\u662f\u3002\u5982\u679c\u4f60\u60f3\u8981\u8fd9\u4e24\u4e2a\u53d8\u91cf\u90fd\u662f\u6307\u9488\uff0c\u5219\u9700\u8981\u5c06\u5b83\u4eec\u5206\u5f00\u4e66\u5199\uff08\u4f60\u53ef\u4ee5\u5728 Go \u8bed\u8a00\u7684\u58f0\u660e\u8bed\u6cd5 \u9875\u9762\u627e\u5230\u6709\u5173\u4e8e\u8fd9\u4e2a\u8bdd\u9898\u7684\u66f4\u591a\u8ba8\u8bba\uff09\u3002 \u800c\u5728 Go \u4e2d\uff0c\u5219\u53ef\u4ee5\u5f88\u8f7b\u677e\u5730\u5c06\u5b83\u4eec\u90fd\u58f0\u660e\u4e3a\u6307\u9488\u7c7b\u578b\uff1a var a , b * int \u5176\u6b21\uff0c\u8fd9\u79cd\u8bed\u6cd5\u80fd\u591f\u6309\u7167\u4ece\u5de6\u81f3\u53f3\u7684\u987a\u5e8f\u9605\u8bfb\uff0c\u4f7f\u5f97\u4ee3\u7801\u66f4\u52a0\u5bb9\u6613\u7406\u89e3\u3002 \u793a\u4f8b\uff1a var a int var b bool var str string \u4f60\u4e5f\u53ef\u4ee5\u6539\u5199\u6210\u8fd9\u79cd\u5f62\u5f0f\uff1a var ( a int b bool str string ) \u8fd9\u79cd\u56e0\u5f0f\u5206\u89e3\u5173\u952e\u5b57\u7684\u5199\u6cd5\u4e00\u822c\u7528\u4e8e\u58f0\u660e\u5168\u5c40\u53d8\u91cf\u3002 \u5f53\u4e00\u4e2a\u53d8\u91cf\u88ab\u58f0\u660e\u4e4b\u540e\uff0c\u7cfb\u7edf\u81ea\u52a8\u8d4b\u4e88\u5b83\u8be5\u7c7b\u578b\u7684\u96f6\u503c\uff1a int \u4e3a 0 \uff0c float32(64) \u4e3a 0.0 \uff0cbool \u4e3a false \uff0c string \u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u6307\u9488\u4e3a nil \u3002\u8bb0\u4f4f\uff0c\u6240\u6709\u7684\u5185\u5b58\u5728 Go \u4e2d\u90fd\u662f\u7ecf\u8fc7\u521d\u59cb\u5316\u7684\u3002 \u53d8\u91cf\u7684\u547d\u540d\u89c4\u5219\u9075\u5faa\u9a86\u9a7c\u547d\u540d\u6cd5\uff0c\u5373\u9996\u4e2a\u5355\u8bcd\u5c0f\u5199\uff0c\u6bcf\u4e2a\u65b0\u5355\u8bcd\u7684\u9996\u5b57\u6bcd\u5927\u5199\uff0c\u4f8b\u5982\uff1a numShips \u548c startDate \u3002 \u4f46\u5982\u679c\u4f60\u7684\u5168\u5c40\u53d8\u91cf\u5e0c\u671b\u80fd\u591f\u88ab\u5916\u90e8\u5305\u6240\u4f7f\u7528\uff0c\u5219\u9700\u8981\u5c06\u9996\u4e2a\u5355\u8bcd\u7684\u9996\u5b57\u6bcd\u4e5f\u5927\u5199\uff08\u7b2c 4.2 \u8282\uff1a\u53ef\u89c1\u6027\u89c4\u5219\uff09\u3002 \u4e00\u4e2a\u53d8\u91cf\uff08\u5e38\u91cf\u3001\u7c7b\u578b\u6216\u51fd\u6570\uff09\u5728\u7a0b\u5e8f\u4e2d\u90fd\u6709\u4e00\u5b9a\u7684\u4f5c\u7528\u8303\u56f4\uff0c\u79f0\u4e4b\u4e3a\u4f5c\u7528\u57df\u3002\u5982\u679c\u4e00\u4e2a\u53d8\u91cf\u5728\u51fd\u6570\u4f53\u5916\u58f0\u660e\uff0c\u5219\u88ab\u8ba4\u4e3a\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u53ef\u4ee5\u5728\u6574\u4e2a\u5305\u751a\u81f3\u5916\u90e8\u5305\uff08\u88ab\u5bfc\u51fa\u540e\uff09\u4f7f\u7528\uff0c\u4e0d\u7ba1\u4f60\u58f0\u660e\u5728\u54ea\u4e2a\u6e90\u6587\u4ef6\u91cc\u6216\u5728\u54ea\u4e2a\u6e90\u6587\u4ef6\u91cc\u8c03\u7528\u8be5\u53d8\u91cf\u3002 \u5728\u51fd\u6570\u4f53\u5185\u58f0\u660e\u7684\u53d8\u91cf\u79f0\u4e4b\u4e3a\u5c40\u90e8\u53d8\u91cf\uff0c\u5b83\u4eec\u7684\u4f5c\u7528\u57df\u53ea\u5728\u51fd\u6570\u4f53\u5185\uff0c\u53c2\u6570\u548c\u8fd4\u56de\u503c\u53d8\u91cf\u4e5f\u662f\u5c40\u90e8\u53d8\u91cf\u3002\u5728 \u7b2c 5 \u7ae0 \uff0c\u6211\u4eec\u5c06\u4f1a\u5b66\u4e60\u5230\u50cf if \u548c for \u8fd9\u4e9b\u63a7\u5236\u7ed3\u6784\uff0c\u800c\u5728\u8fd9\u4e9b\u7ed3\u6784\u4e2d\u58f0\u660e\u7684\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u53ea\u5728\u76f8\u5e94\u7684\u4ee3\u7801\u5757\u5185\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5c40\u90e8\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u53ef\u4ee5\u901a\u8fc7\u4ee3\u7801\u5757\uff08\u7528\u5927\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u90e8\u5206\uff09\u5224\u65ad\u3002 \u5c3d\u7ba1\u53d8\u91cf\u7684\u6807\u8bc6\u7b26\u5fc5\u987b\u662f\u552f\u4e00\u7684\uff0c\u4f46\u4f60\u53ef\u4ee5\u5728\u67d0\u4e2a\u4ee3\u7801\u5757\u7684\u5185\u5c42\u4ee3\u7801\u5757\u4e2d\u4f7f\u7528\u76f8\u540c\u540d\u79f0\u7684\u53d8\u91cf\uff0c\u5219\u6b64\u65f6\u5916\u90e8\u7684\u540c\u540d\u53d8\u91cf\u5c06\u4f1a\u6682\u65f6\u9690\u85cf\uff08\u7ed3\u675f\u5185\u90e8\u4ee3\u7801\u5757\u7684\u6267\u884c\u540e\u9690\u85cf\u7684\u5916\u90e8\u540c\u540d\u53d8\u91cf\u53c8\u4f1a\u51fa\u73b0\uff0c\u800c\u5185\u90e8\u540c\u540d\u53d8\u91cf\u5219\u88ab\u91ca\u653e\uff09\uff0c\u4f60\u4efb\u4f55\u7684\u64cd\u4f5c\u90fd\u53ea\u4f1a\u5f71\u54cd\u5185\u90e8\u4ee3\u7801\u5757\u7684\u5c40\u90e8\u53d8\u91cf\u3002 \u53d8\u91cf\u53ef\u4ee5\u7f16\u8bd1\u671f\u95f4\u5c31\u88ab\u8d4b\u503c\uff0c\u8d4b\u503c\u7ed9\u53d8\u91cf\u4f7f\u7528\u8fd0\u7b97\u7b26\u7b49\u53f7 = \uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u5bf9\u53d8\u91cf\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\u3002 \u793a\u4f8b\uff1a a = 15 b = false \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5f53\u53d8\u91cfa\u548c\u53d8\u91cfb\u4e4b\u95f4\u7c7b\u578b\u76f8\u540c\u65f6\uff0c\u624d\u80fd\u8fdb\u884c\u5982 a = b \u7684\u8d4b\u503c\u3002 \u58f0\u660e\u4e0e\u8d4b\u503c\uff08\u521d\u59cb\u5316\uff09\u8bed\u53e5\u4e5f\u53ef\u4ee5\u7ec4\u5408\u8d77\u6765\u3002 \u793a\u4f8b\uff1a var identifier [ type ] = value var a int = 15 var i = 5 var b bool = false var str string = \"Go says hello to the world!\" \u4f46\u662f Go \u7f16\u8bd1\u5668\u7684\u667a\u5546\u5df2\u7ecf\u9ad8\u5230\u53ef\u4ee5\u6839\u636e\u53d8\u91cf\u7684\u503c\u6765\u81ea\u52a8\u63a8\u65ad\u5176\u7c7b\u578b\uff0c\u8fd9\u6709\u70b9\u50cf Ruby \u548c Python \u8fd9\u7c7b\u52a8\u6001\u8bed\u8a00\uff0c\u53ea\u4e0d\u8fc7\u5b83\u4eec\u662f\u5728\u8fd0\u884c\u65f6\u8fdb\u884c\u63a8\u65ad\uff0c\u800c Go \u662f\u5728\u7f16\u8bd1\u65f6\u5c31\u5df2\u7ecf\u5b8c\u6210\u63a8\u65ad\u8fc7\u7a0b\u3002\u56e0\u6b64\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u8fd9\u4e9b\u5f62\u5f0f\u6765\u58f0\u660e\u53ca\u521d\u59cb\u5316\u53d8\u91cf\uff1a var a = 15 var b = false var str = \"Go says hello to the world!\" \u6216\uff1a var ( a = 15 b = false str = \"Go says hello to the world!\" numShips = 50 city string ) \u4e0d\u8fc7\u81ea\u52a8\u63a8\u65ad\u7c7b\u578b\u5e76\u4e0d\u662f\u4efb\u4f55\u65f6\u5019\u90fd\u9002\u7528\u7684\uff0c\u5f53\u4f60\u60f3\u8981\u7ed9\u53d8\u91cf\u7684\u7c7b\u578b\u5e76\u4e0d\u662f\u81ea\u52a8\u63a8\u65ad\u51fa\u7684\u67d0\u79cd\u7c7b\u578b\u65f6\uff0c\u4f60\u8fd8\u662f\u9700\u8981\u663e\u5f0f\u6307\u5b9a\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u4f8b\u5982\uff1a var n int64 = 2 \u7136\u800c\uff0c var a \u8fd9\u79cd\u8bed\u6cd5\u662f\u4e0d\u6b63\u786e\u7684\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u6ca1\u6709\u4efb\u4f55\u53ef\u4ee5\u7528\u4e8e\u81ea\u52a8\u63a8\u65ad\u7c7b\u578b\u7684\u4f9d\u636e\u3002\u53d8\u91cf\u7684\u7c7b\u578b\u4e5f\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u5b9e\u73b0\u81ea\u52a8\u63a8\u65ad\uff0c\u4f8b\u5982\uff1a var ( HOME = os . Getenv ( \"HOME\" ) USER = os . Getenv ( \"USER\" ) GOROOT = os . Getenv ( \"GOROOT\" ) ) \u8fd9\u79cd\u5199\u6cd5\u4e3b\u8981\u7528\u4e8e\u58f0\u660e\u5305\u7ea7\u522b\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u5f53\u4f60\u5728\u51fd\u6570\u4f53\u5185\u58f0\u660e\u5c40\u90e8\u53d8\u91cf\u65f6\uff0c\u5e94\u4f7f\u7528\u7b80\u77ed\u58f0\u660e\u8bed\u6cd5 := \uff0c\u4f8b\u5982\uff1a a := 1 \u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u5c55\u793a\u4e86\u5982\u4f55\u901a\u8fc7 runtime \u5305\u5728\u8fd0\u884c\u65f6\u83b7\u53d6\u6240\u5728\u7684\u64cd\u4f5c\u7cfb\u7edf\u7c7b\u578b\uff0c\u4ee5\u53ca\u5982\u4f55\u901a\u8fc7 os \u5305\u4e2d\u7684\u51fd\u6570 os.Getenv() \u6765\u83b7\u53d6\u73af\u5883\u53d8\u91cf\u4e2d\u7684\u503c\uff0c\u5e76\u4fdd\u5b58\u5230 string \u7c7b\u578b\u7684\u5c40\u90e8\u53d8\u91cf path \u4e2d\u3002 \u793a\u4f8b 4.5 goos.go package main import ( \"fmt\" \"runtime\" \"os\" ) func main () { var goos string = runtime . GOOS fmt . Printf ( \"The operating system is: %s\\n\" , goos ) path := os . Getenv ( \"PATH\" ) fmt . Printf ( \"Path is %s\\n\" , path ) } \u5982\u679c\u4f60\u5728 Windows \u4e0b\u8fd0\u884c\u8fd9\u6bb5\u4ee3\u7801\uff0c\u5219\u4f1a\u8f93\u51fa The operating system is: windows \u4ee5\u53ca\u76f8\u5e94\u7684\u73af\u5883\u53d8\u91cf\u7684\u503c\uff1b\u5982\u679c\u4f60\u5728 Linux \u4e0b\u8fd0\u884c\u8fd9\u6bb5\u4ee3\u7801\uff0c\u5219\u4f1a\u8f93\u51fa The operating system is: linux \u4ee5\u53ca\u76f8\u5e94\u7684\u7684\u73af\u5883\u53d8\u91cf\u7684\u503c\u3002 \u8fd9\u91cc\u7528\u5230\u4e86 Printf \u7684\u683c\u5f0f\u5316\u8f93\u51fa\u7684\u529f\u80fd\uff08 \u7b2c 4.4.3 \u8282 \uff09\u3002","title":"4.4.1 \u7b80\u4ecb"},{"location":"04.4/#442","text":"\u7a0b\u5e8f\u4e2d\u6240\u7528\u5230\u7684\u5185\u5b58\u5728\u8ba1\u7b97\u673a\u4e2d\u4f7f\u7528\u4e00\u5806\u7bb1\u5b50\u6765\u8868\u793a\uff08\u8fd9\u4e5f\u662f\u4eba\u4eec\u5728\u8bb2\u89e3\u5b83\u7684\u65f6\u5019\u7684\u753b\u6cd5\uff09\uff0c\u8fd9\u4e9b\u7bb1\u5b50\u88ab\u79f0\u4e3a\u201c\u5b57\u201d\u3002\u6839\u636e\u4e0d\u540c\u7684\u5904\u7406\u5668\u4ee5\u53ca\u64cd\u4f5c\u7cfb\u7edf\u7c7b\u578b\uff0c\u6240\u6709\u7684\u5b57\u90fd\u5177\u6709 32 \u4f4d\uff084 \u5b57\u8282\uff09\u6216 64 \u4f4d\uff088 \u5b57\u8282\uff09\u7684\u76f8\u540c\u957f\u5ea6\uff1b\u6240\u6709\u7684\u5b57\u90fd\u4f7f\u7528\u76f8\u5173\u7684\u5185\u5b58\u5730\u5740\u6765\u8fdb\u884c\u8868\u793a\uff08\u4ee5\u5341\u516d\u8fdb\u5236\u6570\u8868\u793a\uff09\u3002 \u6240\u6709\u50cf int \u3001 float \u3001 bool \u548c string \u8fd9\u4e9b\u57fa\u672c\u7c7b\u578b\u90fd\u5c5e\u4e8e\u503c\u7c7b\u578b\uff0c\u4f7f\u7528\u8fd9\u4e9b\u7c7b\u578b\u7684\u53d8\u91cf\u76f4\u63a5\u6307\u5411\u5b58\u5728\u5185\u5b58\u4e2d\u7684\u503c\uff1a \u53e6\u5916\uff0c\u50cf\u6570\u7ec4\uff08 \u7b2c 7 \u7ae0 \uff09\u548c\u7ed3\u6784\uff08 \u7b2c 10 \u7ae0 \uff09\u8fd9\u4e9b\u590d\u5408\u7c7b\u578b\u4e5f\u662f\u503c\u7c7b\u578b\u3002 \u5f53\u4f7f\u7528\u7b49\u53f7 = \u5c06\u4e00\u4e2a\u53d8\u91cf\u7684\u503c\u8d4b\u503c\u7ed9\u53e6\u4e00\u4e2a\u53d8\u91cf\u65f6\uff0c\u5982\uff1a j = i \uff0c\u5b9e\u9645\u4e0a\u662f\u5728\u5185\u5b58\u4e2d\u5c06 i \u7684\u503c\u8fdb\u884c\u4e86\u62f7\u8d1d\uff1a \u4f60\u53ef\u4ee5\u901a\u8fc7 &i \u6765\u83b7\u53d6\u53d8\u91cf i \u7684\u5185\u5b58\u5730\u5740\uff08 \u7b2c 4.9 \u8282 \uff09\uff0c\u4f8b\u5982\uff1a 0xf840000040 \uff08\u6bcf\u6b21\u7684\u5730\u5740\u90fd\u53ef\u80fd\u4e0d\u4e00\u6837\uff09\u3002\u503c\u7c7b\u578b\u7684\u53d8\u91cf\u7684\u503c\u5b58\u50a8\u5728\u6808\u4e2d\u3002 \u5185\u5b58\u5730\u5740\u4f1a\u6839\u636e\u673a\u5668\u7684\u4e0d\u540c\u800c\u6709\u6240\u4e0d\u540c\uff0c\u751a\u81f3\u76f8\u540c\u7684\u7a0b\u5e8f\u5728\u4e0d\u540c\u7684\u673a\u5668\u4e0a\u6267\u884c\u540e\u4e5f\u4f1a\u6709\u4e0d\u540c\u7684\u5185\u5b58\u5730\u5740\u3002\u56e0\u4e3a\u6bcf\u53f0\u673a\u5668\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u5b58\u50a8\u5668\u5e03\u5c40\uff0c\u5e76\u4e14\u4f4d\u7f6e\u5206\u914d\u4e5f\u53ef\u80fd\u4e0d\u540c\u3002 \u66f4\u590d\u6742\u7684\u6570\u636e\u901a\u5e38\u4f1a\u9700\u8981\u4f7f\u7528\u591a\u4e2a\u5b57\uff0c\u8fd9\u4e9b\u6570\u636e\u4e00\u822c\u4f7f\u7528\u5f15\u7528\u7c7b\u578b\u4fdd\u5b58\u3002 \u4e00\u4e2a\u5f15\u7528\u7c7b\u578b\u7684\u53d8\u91cf r1 \u5b58\u50a8\u7684\u662f r1 \u7684\u503c\u6240\u5728\u7684\u5185\u5b58\u5730\u5740\uff08\u6570\u5b57\uff09\uff0c\u6216\u5185\u5b58\u5730\u5740\u4e2d\u7b2c\u4e00\u4e2a\u5b57\u6240\u5728\u7684\u4f4d\u7f6e\u3002 \u8fd9\u4e2a\u5185\u5b58\u5730\u5740\u88ab\u79f0\u4e4b\u4e3a\u6307\u9488\uff08\u4f60\u53ef\u4ee5\u4ece\u4e0a\u56fe\u4e2d\u5f88\u6e05\u6670\u5730\u770b\u5230\uff0c \u7b2c 4.9 \u8282 \u5c06\u4f1a\u8be6\u7ec6\u8bf4\u660e\uff09\uff0c\u8fd9\u4e2a\u6307\u9488\u5b9e\u9645\u4e0a\u4e5f\u88ab\u5b58\u5728\u53e6\u5916\u7684\u67d0\u4e00\u4e2a\u5b57\u4e2d\u3002 \u540c\u4e00\u4e2a\u5f15\u7528\u7c7b\u578b\u7684\u6307\u9488\u6307\u5411\u7684\u591a\u4e2a\u5b57\u53ef\u4ee5\u662f\u5728\u8fde\u7eed\u7684\u5185\u5b58\u5730\u5740\u4e2d\uff08\u5185\u5b58\u5e03\u5c40\u662f\u8fde\u7eed\u7684\uff09\uff0c\u8fd9\u4e5f\u662f\u8ba1\u7b97\u6548\u7387\u6700\u9ad8\u7684\u4e00\u79cd\u5b58\u50a8\u5f62\u5f0f\uff1b\u4e5f\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u5b57\u5206\u6563\u5b58\u653e\u5728\u5185\u5b58\u4e2d\uff0c\u6bcf\u4e2a\u5b57\u90fd\u6307\u793a\u4e86\u4e0b\u4e00\u4e2a\u5b57\u6240\u5728\u7684\u5185\u5b58\u5730\u5740\u3002 \u5f53\u4f7f\u7528\u8d4b\u503c\u8bed\u53e5 r2 = r1 \u65f6\uff0c\u53ea\u6709\u5f15\u7528\uff08\u5730\u5740\uff09\u88ab\u590d\u5236\u3002 \u5982\u679c r1 \u7684\u503c\u88ab\u6539\u53d8\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e2a\u503c\u7684\u6240\u6709\u5f15\u7528\u90fd\u4f1a\u6307\u5411\u88ab\u4fee\u6539\u540e\u7684\u5185\u5bb9\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c r2 \u4e5f\u4f1a\u53d7\u5230\u5f71\u54cd\u3002 \u5728 Go \u8bed\u8a00\u4e2d\uff0c\u6307\u9488\uff08 \u7b2c 4.9 \u8282 \uff09\u5c5e\u4e8e\u5f15\u7528\u7c7b\u578b\uff0c\u5176\u5b83\u7684\u5f15\u7528\u7c7b\u578b\u8fd8\u5305\u62ec slices\uff08 \u7b2c 7 \u7ae0 \uff09\uff0cmaps\uff08 \u7b2c 8 \u7ae0 \uff09\u548c channel\uff08 \u7b2c 13 \u7ae0 \uff09\u3002\u88ab\u5f15\u7528\u7684\u53d8\u91cf\u4f1a\u5b58\u50a8\u5728\u5806\u4e2d\uff0c\u4ee5\u4fbf\u8fdb\u884c\u5783\u573e\u56de\u6536\uff0c\u4e14\u6bd4\u6808\u62e5\u6709\u66f4\u5927\u7684\u5185\u5b58\u7a7a\u95f4\u3002","title":"4.4.2 \u503c\u7c7b\u578b\u548c\u5f15\u7528\u7c7b\u578b"},{"location":"04.4/#443","text":"\u51fd\u6570 Printf \u53ef\u4ee5\u5728 fmt \u5305\u5916\u90e8\u4f7f\u7528\uff0c\u8fd9\u662f\u56e0\u4e3a\u5b83\u4ee5\u5927\u5199\u5b57\u6bcd P \u5f00\u5934\uff0c\u8be5\u51fd\u6570\u4e3b\u8981\u7528\u4e8e\u6253\u5370\u8f93\u51fa\u5230\u63a7\u5236\u53f0\u3002\u901a\u5e38\u4f7f\u7528\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\uff1a func Printf ( format string , list of variables to be printed ) \u5728\u793a\u4f8b 4.5 \u4e2d\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e3a\uff1a \"The operating system is: %s\\n\" \u3002 \u8fd9\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53ef\u4ee5\u542b\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u7684\u683c\u5f0f\u5316\u6807\u8bc6\u7b26\uff0c\u4f8b\u5982\uff1a %.. \uff0c\u5176\u4e2d .. \u53ef\u4ee5\u88ab\u4e0d\u540c\u7c7b\u578b\u6240\u5bf9\u5e94\u7684\u6807\u8bc6\u7b26\u66ff\u6362\uff0c\u5982 %s \u4ee3\u8868\u5b57\u7b26\u4e32\u6807\u8bc6\u7b26\u3001 %v \u4ee3\u8868\u4f7f\u7528\u7c7b\u578b\u7684\u9ed8\u8ba4\u8f93\u51fa\u683c\u5f0f\u7684\u6807\u8bc6\u7b26\u3002\u8fd9\u4e9b\u6807\u8bc6\u7b26\u6240\u5bf9\u5e94\u7684\u503c\u4ece\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u540e\u7684\u7b2c\u4e00\u4e2a\u9017\u53f7\u5f00\u59cb\u6309\u7167\u76f8\u540c\u987a\u5e8f\u6dfb\u52a0\uff0c\u5982\u679c\u53c2\u6570\u8d85\u8fc7 1 \u4e2a\u5219\u540c\u6837\u9700\u8981\u4f7f\u7528\u9017\u53f7\u5206\u9694\u3002\u4f7f\u7528\u8fd9\u4e9b\u5360\u4f4d\u7b26\u53ef\u4ee5\u5f88\u597d\u5730\u63a7\u5236\u683c\u5f0f\u5316\u8f93\u51fa\u7684\u6587\u672c\u3002 \u51fd\u6570 fmt.Sprintf \u4e0e Printf \u7684\u4f5c\u7528\u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u4e0d\u8fc7\u524d\u8005\u5c06\u683c\u5f0f\u5316\u540e\u7684\u5b57\u7b26\u4e32\u4ee5\u8fd4\u56de\u503c\u7684\u5f62\u5f0f\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u5728\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5305\u542b\u53d8\u91cf\u7684\u5b57\u7b26\u4e32\uff0c\u5177\u4f53\u4f8b\u5b50\u53ef\u4ee5\u53c2\u89c1\u793a\u4f8b 15.4 simple_tcp_server.go \u3002 \u51fd\u6570 fmt.Print \u548c fmt.Println \u4f1a\u81ea\u52a8\u4f7f\u7528\u683c\u5f0f\u5316\u6807\u8bc6\u7b26 %v \u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u683c\u5f0f\u5316\uff0c\u4e24\u8005\u90fd\u4f1a\u5728\u6bcf\u4e2a\u53c2\u6570\u4e4b\u95f4\u81ea\u52a8\u589e\u52a0\u7a7a\u683c\uff0c\u800c\u540e\u8005\u8fd8\u4f1a\u5728\u5b57\u7b26\u4e32\u7684\u6700\u540e\u52a0\u4e0a\u4e00\u4e2a\u6362\u884c\u7b26\u3002\u4f8b\u5982\uff1a fmt . Print ( \"Hello:\" , 23 ) \u5c06\u8f93\u51fa\uff1a Hello: 23 \u3002","title":"4.4.3 \u6253\u5370"},{"location":"04.4/#444","text":"\u6211\u4eec\u77e5\u9053\u53ef\u4ee5\u5728\u53d8\u91cf\u7684\u521d\u59cb\u5316\u65f6\u7701\u7565\u53d8\u91cf\u7684\u7c7b\u578b\u800c\u7531\u7cfb\u7edf\u81ea\u52a8\u63a8\u65ad\uff0c\u800c\u8fd9\u4e2a\u65f6\u5019\u518d\u5728 Example 4.4.1 \u7684\u6700\u540e\u4e00\u4e2a\u58f0\u660e\u8bed\u53e5\u5199\u4e0a var \u5173\u952e\u5b57\u5c31\u663e\u5f97\u6709\u4e9b\u591a\u4f59\u4e86\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u4eec\u7b80\u5199\u4e3a a := 50 \u6216 b := false \u3002 a \u548c b \u7684\u7c7b\u578b\uff08 int \u548c bool \uff09\u5c06\u7531\u7f16\u8bd1\u5668\u81ea\u52a8\u63a8\u65ad\u3002 \u8fd9\u662f\u4f7f\u7528\u53d8\u91cf\u7684\u9996\u9009\u5f62\u5f0f\uff0c\u4f46\u662f\u5b83\u53ea\u80fd\u88ab\u7528\u5728\u51fd\u6570\u4f53\u5185\uff0c\u800c\u4e0d\u53ef\u4ee5\u7528\u4e8e\u5168\u5c40\u53d8\u91cf\u7684\u58f0\u660e\u4e0e\u8d4b\u503c\u3002\u4f7f\u7528\u64cd\u4f5c\u7b26 := \u53ef\u4ee5\u9ad8\u6548\u5730\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u53d8\u91cf\uff0c\u79f0\u4e4b\u4e3a\u521d\u59cb\u5316\u58f0\u660e\u3002 \u6ce8\u610f\u4e8b\u9879 \u5982\u679c\u5728\u76f8\u540c\u7684\u4ee3\u7801\u5757\u4e2d\uff0c\u6211\u4eec\u4e0d\u53ef\u4ee5\u518d\u6b21\u5bf9\u4e8e\u76f8\u540c\u540d\u79f0\u7684\u53d8\u91cf\u4f7f\u7528\u521d\u59cb\u5316\u58f0\u660e\uff0c\u4f8b\u5982\uff1a a := 20 \u5c31\u662f\u4e0d\u88ab\u5141\u8bb8\u7684\uff0c\u7f16\u8bd1\u5668\u4f1a\u63d0\u793a\u9519\u8bef no new variables on left side of := \uff0c\u4f46\u662f a = 20 \u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a\u8fd9\u662f\u7ed9\u76f8\u540c\u7684\u53d8\u91cf\u8d4b\u4e88\u4e00\u4e2a\u65b0\u7684\u503c\u3002 \u5982\u679c\u4f60\u5728\u5b9a\u4e49\u53d8\u91cf a \u4e4b\u524d\u4f7f\u7528\u5b83\uff0c\u5219\u4f1a\u5f97\u5230\u7f16\u8bd1\u9519\u8bef undefined: a \u3002 \u5982\u679c\u4f60\u58f0\u660e\u4e86\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u5374\u6ca1\u6709\u5728\u76f8\u540c\u7684\u4ee3\u7801\u5757\u4e2d\u4f7f\u7528\u5b83\uff0c\u540c\u6837\u4f1a\u5f97\u5230\u7f16\u8bd1\u9519\u8bef\uff0c\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u5f53\u4e2d\u7684\u53d8\u91cf a \uff1a func main () { var a string = \"abc\" fmt . Println ( \"hello, world\" ) } \u5c1d\u8bd5\u7f16\u8bd1\u8fd9\u6bb5\u4ee3\u7801\u5c06\u5f97\u5230\u9519\u8bef a declared and not used \u3002 \u6b64\u5916\uff0c\u5355\u7eaf\u5730\u7ed9 a \u8d4b\u503c\u4e5f\u662f\u4e0d\u591f\u7684\uff0c\u8fd9\u4e2a\u503c\u5fc5\u987b\u88ab\u4f7f\u7528\uff0c\u6240\u4ee5\u4f7f\u7528 fmt.Println(\"hello, world\", a) \u4f1a\u79fb\u9664\u9519\u8bef\u3002 \u4f46\u662f\u5168\u5c40\u53d8\u91cf\u662f\u5141\u8bb8\u58f0\u660e\u4f46\u4e0d\u4f7f\u7528\u3002 \u5176\u4ed6\u7684\u7b80\u77ed\u5f62\u5f0f\u4e3a\uff1a \u540c\u4e00\u7c7b\u578b\u7684\u591a\u4e2a\u53d8\u91cf\u53ef\u4ee5\u58f0\u660e\u5728\u540c\u4e00\u884c\uff0c\u5982\uff1a var a , b , c int (\u8fd9\u662f\u5c06\u7c7b\u578b\u5199\u5728\u6807\u8bc6\u7b26\u540e\u9762\u7684\u4e00\u4e2a\u91cd\u8981\u539f\u56e0) \u591a\u53d8\u91cf\u53ef\u4ee5\u5728\u540c\u4e00\u884c\u8fdb\u884c\u8d4b\u503c\uff0c\u5982\uff1a a , b , c = 5 , 7 , \"abc\" \u4e0a\u9762\u8fd9\u884c\u5047\u8bbe\u4e86\u53d8\u91cf a \uff0c b \u548c c \u90fd\u5df2\u7ecf\u88ab\u58f0\u660e\uff0c\u5426\u5219\u7684\u8bdd\u5e94\u8be5\u8fd9\u6837\u4f7f\u7528\uff1a a , b , c := 5 , 7 , \"abc\" \u53f3\u8fb9\u7684\u8fd9\u4e9b\u503c\u4ee5\u76f8\u540c\u7684\u987a\u5e8f\u8d4b\u503c\u7ed9\u5de6\u8fb9\u7684\u53d8\u91cf\uff0c\u6240\u4ee5 a \u7684\u503c\u662f 5 \uff0c b \u7684\u503c\u662f 7 \uff0c c \u7684\u503c\u662f \"abc\" \u3002 \u8fd9\u88ab\u79f0\u4e3a \u5e76\u884c \u6216 \u540c\u65f6 \u8d4b\u503c\u3002 \u5982\u679c\u4f60\u60f3\u8981\u4ea4\u6362\u4e24\u4e2a\u53d8\u91cf\u7684\u503c\uff0c\u5219\u53ef\u4ee5\u7b80\u5355\u5730\u4f7f\u7528 a, b = b, a \u3002 (\u5728 Go \u8bed\u8a00\u4e2d\uff0c\u8fd9\u6837\u7701\u53bb\u4e86\u4f7f\u7528\u4ea4\u6362\u51fd\u6570\u7684\u5fc5\u8981) \u7a7a\u767d\u6807\u8bc6\u7b26 _ \u4e5f\u88ab\u7528\u4e8e\u629b\u5f03\u503c\uff0c\u5982\u503c 5 \u5728\uff1a _, b = 5, 7 \u4e2d\u88ab\u629b\u5f03\u3002 _ \u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u53ea\u5199\u53d8\u91cf\uff0c\u4f60\u4e0d\u80fd\u5f97\u5230\u5b83\u7684\u503c\u3002\u8fd9\u6837\u505a\u662f\u56e0\u4e3a Go \u8bed\u8a00\u4e2d\u4f60\u5fc5\u987b\u4f7f\u7528\u6240\u6709\u88ab\u58f0\u660e\u7684\u53d8\u91cf\uff0c\u4f46\u6709\u65f6\u4f60\u5e76\u4e0d\u9700\u8981\u4f7f\u7528\u4ece\u4e00\u4e2a\u51fd\u6570\u5f97\u5230\u7684\u6240\u6709\u8fd4\u56de\u503c\u3002 \u5e76\u884c\u8d4b\u503c\u4e5f\u88ab\u7528\u4e8e\u5f53\u4e00\u4e2a\u51fd\u6570\u8fd4\u56de\u591a\u4e2a\u8fd4\u56de\u503c\u65f6\uff0c\u6bd4\u5982\u8fd9\u91cc\u7684 val \u548c\u9519\u8bef err \u662f\u901a\u8fc7\u8c03\u7528 Func1 \u51fd\u6570\u540c\u65f6\u5f97\u5230\uff1a val, err = Func1(var1) \u3002","title":"4.4.4 \u7b80\u77ed\u5f62\u5f0f\uff0c\u4f7f\u7528 := \u8d4b\u503c\u64cd\u4f5c\u7b26"},{"location":"04.4/#445-init","text":"\u53d8\u91cf\u9664\u4e86\u53ef\u4ee5\u5728\u5168\u5c40\u58f0\u660e\u4e2d\u521d\u59cb\u5316\uff0c\u4e5f\u53ef\u4ee5\u5728 init() \u51fd\u6570\u4e2d\u521d\u59cb\u5316\u3002\u8fd9\u662f\u4e00\u7c7b\u975e\u5e38\u7279\u6b8a\u7684\u51fd\u6570\uff0c\u5b83\u4e0d\u80fd\u591f\u88ab\u4eba\u4e3a\u8c03\u7528\uff0c\u800c\u662f\u5728\u6bcf\u4e2a\u5305\u5b8c\u6210\u521d\u59cb\u5316\u540e\u81ea\u52a8\u6267\u884c\uff0c\u5e76\u4e14\u6267\u884c\u4f18\u5148\u7ea7\u6bd4 main() \u51fd\u6570\u9ad8\u3002 \u6bcf\u4e2a\u6e90\u6587\u4ef6\u53ef\u4ee5\u5305\u542b\u591a\u4e2a init() \u51fd\u6570\uff0c\u540c\u4e00\u4e2a\u6e90\u6587\u4ef6\u4e2d\u7684 init() \u51fd\u6570\u4f1a\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u6267\u884c\uff0c\u5982\u679c\u4e00\u4e2a\u5305\u6709\u591a\u4e2a\u6e90\u6587\u4ef6\u5305\u542b init() \u51fd\u6570\u7684\u8bdd\uff0c\u5219\u5b98\u65b9\u9f13\u52b1\u4f46\u4e0d\u4fdd\u8bc1\u4ee5\u6587\u4ef6\u540d\u7684\u987a\u5e8f\u8c03\u7528\u3002\u521d\u59cb\u5316\u603b\u662f\u4ee5\u5355\u7ebf\u7a0b\u5e76\u4e14\u6309\u7167\u5305\u7684\u4f9d\u8d56\u5173\u7cfb\u987a\u5e8f\u6267\u884c\u3002 \u4e00\u4e2a\u53ef\u80fd\u7684\u7528\u9014\u662f\u5728\u5f00\u59cb\u6267\u884c\u7a0b\u5e8f\u4e4b\u524d\u5bf9\u6570\u636e\u8fdb\u884c\u68c0\u9a8c\u6216\u4fee\u590d\uff0c\u4ee5\u4fdd\u8bc1\u7a0b\u5e8f\u72b6\u6001\u7684\u6b63\u786e\u6027\u3002 \u793a\u4f8b 4.6 init.go : package trans import \"math\" var Pi float64 func init () { Pi = 4 * math . Atan ( 1 ) // init() function computes Pi } \u5728\u5b83\u7684 init() \u51fd\u6570\u4e2d\u8ba1\u7b97\u53d8\u91cf Pi \u7684\u521d\u59cb\u503c\u3002 \u793a\u4f8b 4.7 user_init.go \u4e2d\u5bfc\u5165\u4e86\u5305 trans \uff08\u9700\u8981 init.go \u76ee\u5f55\u4e3a ./trans/init.go \uff09\u5e76\u4e14\u4f7f\u7528\u5230\u4e86\u53d8\u91cf Pi \uff1a package main import ( \"fmt\" \"./trans\" ) var twoPi = 2 * trans . Pi func main () { fmt . Printf ( \"2*Pi = %g\\n\" , twoPi ) // 2*Pi = 6.283185307179586 } init() \u51fd\u6570\u4e5f\u7ecf\u5e38\u88ab\u7528\u5728\u5f53\u4e00\u4e2a\u7a0b\u5e8f\u5f00\u59cb\u4e4b\u524d\u8c03\u7528\u540e\u53f0\u6267\u884c\u7684 goroutine\uff0c\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u5f53\u4e2d\u7684 backend() \uff1a func init () { // setup preparations go backend () } \u7ec3\u4e60 \u63a8\u65ad\u4ee5\u4e0b\u7a0b\u5e8f\u7684\u8f93\u51fa\uff0c\u5e76\u89e3\u91ca\u4f60\u7684\u7b54\u6848\uff0c\u7136\u540e\u7f16\u8bd1\u5e76\u6267\u884c\u5b83\u4eec\u3002 \u7ec3\u4e60 4.1 local_scope.go : package main var a = \"G\" func main () { n () m () n () } func n () { print ( a ) } func m () { a := \"O\" print ( a ) } \u7ec3\u4e60 4.2 global_scope.go : package main var a = \"G\" func main () { n () m () n () } func n () { print ( a ) } func m () { a = \"O\" print ( a ) } \u7ec3\u4e60 4.3 function_calls_function.go package main var a string func main () { a = \"G\" print ( a ) f1 () } func f1 () { a := \"O\" print ( a ) f2 () } func f2 () { print ( a ) }","title":"4.4.5 init \u51fd\u6570"},{"location":"04.4/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5e38\u91cf \u4e0b\u4e00\u8282\uff1a \u57fa\u672c\u7c7b\u578b\u548c\u8fd0\u7b97\u7b26","title":"\u94fe\u63a5"},{"location":"04.5/","text":"4.5 \u57fa\u672c\u7c7b\u578b\u548c\u8fd0\u7b97\u7b26 \u00b6 \u6211\u4eec\u5c06\u5728\u8fd9\u4e2a\u90e8\u5206\u8bb2\u89e3\u6709\u5173\u5e03\u5c14\u578b\u3001\u6570\u5b57\u578b\u548c\u5b57\u7b26\u578b\u7684\u76f8\u5173\u77e5\u8bc6\u3002 \u8868\u8fbe\u5f0f\u662f\u4e00\u79cd\u7279\u5b9a\u7684\u7c7b\u578b\u7684\u503c\uff0c\u5b83\u53ef\u4ee5\u7531\u5176\u5b83\u7684\u503c\u4ee5\u53ca\u8fd0\u7b97\u7b26\u7ec4\u5408\u800c\u6210\u3002\u6bcf\u4e2a\u7c7b\u578b\u90fd\u5b9a\u4e49\u4e86\u53ef\u4ee5\u548c\u81ea\u5df1\u7ed3\u5408\u7684\u8fd0\u7b97\u7b26\u96c6\u5408\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u4e86\u4e0d\u5728\u8fd9\u4e2a\u96c6\u5408\u4e2d\u7684\u8fd0\u7b97\u7b26\uff0c\u5219\u4f1a\u5728\u7f16\u8bd1\u65f6\u83b7\u5f97\u7f16\u8bd1\u9519\u8bef\u3002 \u4e00\u5143\u8fd0\u7b97\u7b26\u53ea\u53ef\u4ee5\u7528\u4e8e\u4e00\u4e2a\u503c\u7684\u64cd\u4f5c\uff08\u4f5c\u4e3a\u540e\u7f00\uff09\uff0c\u800c\u4e8c\u5143\u8fd0\u7b97\u7b26\u5219\u53ef\u4ee5\u548c\u4e24\u4e2a\u503c\u6216\u8005\u64cd\u4f5c\u6570\u7ed3\u5408\uff08\u4f5c\u4e3a\u4e2d\u7f00\uff09\u3002 \u53ea\u6709\u4e24\u4e2a\u7c7b\u578b\u76f8\u540c\u7684\u503c\u624d\u53ef\u4ee5\u548c\u4e8c\u5143\u8fd0\u7b97\u7b26\u7ed3\u5408\uff0c\u53e6\u5916\u8981\u6ce8\u610f\u7684\u662f\uff0cGo \u662f\u5f3a\u7c7b\u578b\u8bed\u8a00\uff0c\u56e0\u6b64\u4e0d\u4f1a\u8fdb\u884c\u9690\u5f0f\u8f6c\u6362\uff0c\u4efb\u4f55\u4e0d\u540c\u7c7b\u578b\u4e4b\u95f4\u7684\u8f6c\u6362\u90fd\u5fc5\u987b\u663e\u5f0f\u8bf4\u660e\uff08\u7b2c 4.2 \u8282\uff09\u3002Go \u4e0d\u5b58\u5728\u50cf C \u90a3\u6837\u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff0c\u8868\u8fbe\u5f0f\u7684\u89e3\u6790\u987a\u5e8f\u662f\u4ece\u5de6\u81f3\u53f3\u3002 \u4f60\u53ef\u4ee5\u5728\u7b2c 4.5.3 \u8282\u627e\u5230\u6709\u5173\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u4f18\u5148\u7ea7\u8d8a\u9ad8\u7684\u8fd0\u7b97\u7b26\u5728\u6761\u4ef6\u76f8\u540c\u7684\u60c5\u51b5\u4e0b\u5c06\u88ab\u4f18\u5148\u6267\u884c\u3002\u4f46\u662f\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u62ec\u53f7\u5c06\u5176\u4e2d\u7684\u8868\u8fbe\u5f0f\u62ec\u8d77\u6765\uff0c\u4ee5\u4eba\u4e3a\u5730\u63d0\u5347\u67d0\u4e2a\u8868\u8fbe\u5f0f\u7684\u8fd0\u7b97\u4f18\u5148\u7ea7\u3002 4.5.1 \u5e03\u5c14\u7c7b\u578b bool \u00b6 \u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a var b bool = true \u3002 \u5e03\u5c14\u578b\u7684\u503c\u53ea\u53ef\u4ee5\u662f\u5e38\u91cf true \u6216\u8005 false\u3002 \u4e24\u4e2a\u7c7b\u578b\u76f8\u540c\u7684\u503c\u53ef\u4ee5\u4f7f\u7528\u76f8\u7b49 == \u6216\u8005\u4e0d\u7b49 != \u8fd0\u7b97\u7b26\u6765\u8fdb\u884c\u6bd4\u8f83\u5e76\u83b7\u5f97\u4e00\u4e2a\u5e03\u5c14\u578b\u7684\u503c\u3002 \u5f53\u76f8\u7b49\u8fd0\u7b97\u7b26\u4e24\u8fb9\u7684\u503c\u662f\u5b8c\u5168\u76f8\u540c\u7684\u503c\u7684\u65f6\u5019\u4f1a\u8fd4\u56de true \uff0c\u5426\u5219\u8fd4\u56de false \uff0c\u5e76\u4e14\u53ea\u6709\u5728\u4e24\u4e2a\u7684\u503c\u7684\u7c7b\u578b\u76f8\u540c\u7684\u60c5\u51b5\u4e0b\u624d\u53ef\u4ee5\u4f7f\u7528\u3002 \u793a\u4f8b\uff1a var aVar = 10 aVar == 5 - > false aVar == 10 - > true \u5f53\u4e0d\u7b49\u8fd0\u7b97\u7b26\u4e24\u8fb9\u7684\u503c\u662f\u4e0d\u540c\u7684\u65f6\u5019\u4f1a\u8fd4\u56de true \uff0c\u5426\u5219\u8fd4\u56de false \u3002 \u793a\u4f8b\uff1a var aVar = 10 aVar != 5 - > true aVar != 10 - > false Go \u5bf9\u4e8e\u503c\u4e4b\u95f4\u7684\u6bd4\u8f83\u6709\u975e\u5e38\u4e25\u683c\u7684\u9650\u5236\uff0c\u53ea\u6709\u4e24\u4e2a\u7c7b\u578b\u76f8\u540c\u7684\u503c\u624d\u53ef\u4ee5\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u503c\u7684\u7c7b\u578b\u662f\u63a5\u53e3\uff08interface\uff0c \u7b2c 11 \u7ae0 \uff09\uff0c\u5b83\u4eec\u4e5f\u5fc5\u987b\u90fd\u5b9e\u73b0\u4e86\u76f8\u540c\u7684\u63a5\u53e3\u3002\u5982\u679c\u5176\u4e2d\u4e00\u4e2a\u503c\u662f\u5e38\u91cf\uff0c\u90a3\u4e48\u53e6\u5916\u4e00\u4e2a\u503c\u7684\u7c7b\u578b\u5fc5\u987b\u548c\u8be5\u5e38\u91cf\u7c7b\u578b\u76f8\u517c\u5bb9\u7684\u3002\u5982\u679c\u4ee5\u4e0a\u6761\u4ef6\u90fd\u4e0d\u6ee1\u8db3\uff0c\u5219\u5176\u4e2d\u4e00\u4e2a\u503c\u7684\u7c7b\u578b\u5fc5\u987b\u5728\u88ab\u8f6c\u6362\u4e3a\u548c\u53e6\u5916\u4e00\u4e2a\u503c\u7684\u7c7b\u578b\u76f8\u540c\u4e4b\u540e\u624d\u53ef\u4ee5\u8fdb\u884c\u6bd4\u8f83\u3002 \u5e03\u5c14\u578b\u7684\u5e38\u91cf\u548c\u53d8\u91cf\u4e5f\u53ef\u4ee5\u901a\u8fc7\u548c\u903b\u8f91\u8fd0\u7b97\u7b26\uff08\u975e ! \u3001\u4e0e && \u3001\u6216 || \uff09\u7ed3\u5408\u6765\u4ea7\u751f\u53e6\u5916\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u8fd9\u6837\u7684\u903b\u8f91\u8bed\u53e5\u5c31\u5176\u672c\u8eab\u800c\u8a00\uff0c\u5e76\u4e0d\u662f\u4e00\u4e2a\u5b8c\u6574\u7684 Go \u8bed\u53e5\u3002 \u903b\u8f91\u503c\u53ef\u4ee5\u88ab\u7528\u4e8e\u6761\u4ef6\u7ed3\u6784\u4e2d\u7684\u6761\u4ef6\u8bed\u53e5\uff08 \u7b2c 5 \u7ae0 \uff09\uff0c\u4ee5\u4fbf\u6d4b\u8bd5\u67d0\u4e2a\u6761\u4ef6\u662f\u5426\u6ee1\u8db3\u3002\u53e6\u5916\uff0c\u4e0e && \u3001\u6216 || \u4e0e\u76f8\u7b49 == \u6216\u4e0d\u7b49 != \u5c5e\u4e8e\u4e8c\u5143\u8fd0\u7b97\u7b26\uff0c\u800c\u975e ! \u5c5e\u4e8e\u4e00\u5143\u8fd0\u7b97\u7b26\u3002\u5728\u63a5\u4e0b\u6765\u7684\u5185\u5bb9\u4e2d\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528 T \u6765\u4ee3\u8868\u6761\u4ef6\u7b26\u5408\u7684\u8bed\u53e5\uff0c\u7528 F \u6765\u4ee3\u8868\u6761\u4ef6\u4e0d\u7b26\u5408\u7684\u8bed\u53e5\u3002 Go \u8bed\u8a00\u4e2d\u5305\u542b\u4ee5\u4e0b\u903b\u8f91\u8fd0\u7b97\u7b26\uff1a \u975e\u8fd0\u7b97\u7b26\uff1a ! ! T - > false ! F - > true \u975e\u8fd0\u7b97\u7b26\u7528\u4e8e\u53d6\u5f97\u548c\u5e03\u5c14\u503c\u76f8\u53cd\u7684\u7ed3\u679c\u3002 \u4e0e\u8fd0\u7b97\u7b26\uff1a && T && T - > true T && F - > false F && T - > false F && F - > false \u53ea\u6709\u5f53\u4e24\u8fb9\u7684\u503c\u90fd\u4e3a true \u7684\u65f6\u5019\uff0c\u548c\u8fd0\u7b97\u7b26\u7684\u7ed3\u679c\u624d\u662f true \u3002 \u6216\u8fd0\u7b97\u7b26\uff1a || T || T - > true T || F - > true F || T - > true F || F - > false \u53ea\u6709\u5f53\u4e24\u8fb9\u7684\u503c\u90fd\u4e3a false \u7684\u65f6\u5019\uff0c\u6216\u8fd0\u7b97\u7b26\u7684\u7ed3\u679c\u624d\u662f false \uff0c\u5176\u4e2d\u4efb\u610f\u4e00\u8fb9\u7684\u503c\u4e3a true \u5c31\u80fd\u591f\u4f7f\u5f97\u8be5\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u4e3a true \u3002 \u5728 Go \u8bed\u8a00\u4e2d\uff0c && \u548c || \u662f\u5177\u6709\u5feb\u6377\u6027\u8d28\u7684\u8fd0\u7b97\u7b26\uff0c\u5f53\u8fd0\u7b97\u7b26\u5de6\u8fb9\u8868\u8fbe\u5f0f\u7684\u503c\u5df2\u7ecf\u80fd\u591f\u51b3\u5b9a\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u7684\u65f6\u5019\uff08 && \u5de6\u8fb9\u7684\u503c\u4e3a false \uff0c || \u5de6\u8fb9\u7684\u503c\u4e3a true \uff09\uff0c\u8fd0\u7b97\u7b26\u53f3\u8fb9\u7684\u8868\u8fbe\u5f0f\u5c06\u4e0d\u4f1a\u88ab\u6267\u884c\u3002\u5229\u7528\u8fd9\u4e2a\u6027\u8d28\uff0c\u5982\u679c\u4f60\u6709\u591a\u4e2a\u6761\u4ef6\u5224\u65ad\uff0c\u5e94\u5f53\u5c06\u8ba1\u7b97\u8fc7\u7a0b\u8f83\u4e3a\u590d\u6742\u7684\u8868\u8fbe\u5f0f\u653e\u5728\u8fd0\u7b97\u7b26\u7684\u53f3\u4fa7\u4ee5\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u8fd0\u7b97\u3002 \u5229\u7528\u62ec\u53f7\u540c\u6837\u53ef\u4ee5\u5347\u7ea7\u67d0\u4e2a\u8868\u8fbe\u5f0f\u7684\u8fd0\u7b97\u4f18\u5148\u7ea7\u3002 \u5728\u683c\u5f0f\u5316\u8f93\u51fa\u65f6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 %t \u6765\u8868\u793a\u4f60\u8981\u8f93\u51fa\u7684\u503c\u4e3a\u5e03\u5c14\u578b\u3002 \u5e03\u5c14\u503c\uff08\u4ee5\u53ca\u4efb\u4f55\u7ed3\u679c\u4e3a\u5e03\u5c14\u503c\u7684\u8868\u8fbe\u5f0f\uff09\u6700\u5e38\u7528\u5728\u6761\u4ef6\u7ed3\u6784\u7684\u6761\u4ef6\u8bed\u53e5\u4e2d\uff0c\u4f8b\u5982\uff1aif\u3001for \u548c switch \u7ed3\u6784\uff08\u7b2c 5 \u7ae0\uff09\u3002 \u5bf9\u4e8e\u5e03\u5c14\u503c\u7684\u597d\u7684\u547d\u540d\u80fd\u591f\u5f88\u597d\u5730\u63d0\u5347\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\uff0c\u4f8b\u5982\u4ee5 is \u6216\u8005 Is \u5f00\u5934\u7684 isSorted \u3001 isFinished \u3001 isVisible \uff0c\u4f7f\u7528\u8fd9\u6837\u7684\u547d\u540d\u80fd\u591f\u5728\u9605\u8bfb\u4ee3\u7801\u7684\u83b7\u5f97\u9605\u8bfb\u6b63\u5e38\u8bed\u53e5\u4e00\u6837\u7684\u826f\u597d\u4f53\u9a8c\uff0c\u4f8b\u5982\u6807\u51c6\u5e93\u4e2d\u7684 unicode.IsDigit(ch) \uff08 \u7b2c 4.5.5 \u8282 \uff09\u3002 4.5.2 \u6570\u5b57\u7c7b\u578b \u00b6 4.5.2.1 \u6574\u578b int \u548c\u6d6e\u70b9\u578b float \u00b6 Go \u8bed\u8a00\u652f\u6301\u6574\u578b\u548c\u6d6e\u70b9\u578b\u6570\u5b57\uff0c\u5e76\u4e14\u539f\u751f\u652f\u6301\u590d\u6570\uff0c\u5176\u4e2d\u4f4d\u7684\u8fd0\u7b97\u91c7\u7528\u8865\u7801\uff08\u8be6\u60c5\u53c2\u89c1 \u4e8c\u7684\u8865\u7801 \u9875\u9762\uff09\u3002 Go \u4e5f\u6709\u57fa\u4e8e\u67b6\u6784\u7684\u7c7b\u578b\uff0c\u4f8b\u5982\uff1a int \u3001 uint \u548c uintptr \u3002 \u8fd9\u4e9b\u7c7b\u578b\u7684\u957f\u5ea6\u90fd\u662f\u6839\u636e\u8fd0\u884c\u7a0b\u5e8f\u6240\u5728\u7684\u64cd\u4f5c\u7cfb\u7edf\u7c7b\u578b\u6240\u51b3\u5b9a\u7684\uff1a int \u548c uint \u5728 32 \u4f4d\u64cd\u4f5c\u7cfb\u7edf\u4e0a\uff0c\u5b83\u4eec\u5747\u4f7f\u7528 32 \u4f4d\uff084 \u4e2a\u5b57\u8282\uff09\uff0c\u5728 64 \u4f4d\u64cd\u4f5c\u7cfb\u7edf\u4e0a\uff0c\u5b83\u4eec\u5747\u4f7f\u7528 64 \u4f4d\uff088 \u4e2a\u5b57\u8282\uff09\u3002 uintptr \u7684\u957f\u5ea6\u88ab\u8bbe\u5b9a\u4e3a\u8db3\u591f\u5b58\u653e\u4e00\u4e2a\u6307\u9488\u5373\u53ef\u3002 Go \u8bed\u8a00\u4e2d\u6ca1\u6709 float \u7c7b\u578b\u3002\uff08Go\u8bed\u8a00\u4e2d\u53ea\u6709 float32 \u548c float64 \uff09\u6ca1\u6709 double \u7c7b\u578b\u3002 \u4e0e\u64cd\u4f5c\u7cfb\u7edf\u67b6\u6784\u65e0\u5173\u7684\u7c7b\u578b\u90fd\u6709\u56fa\u5b9a\u7684\u5927\u5c0f\uff0c\u5e76\u5728\u7c7b\u578b\u7684\u540d\u79f0\u4e2d\u5c31\u53ef\u4ee5\u770b\u51fa\u6765\uff1a \u6574\u6570\uff1a int8 \uff08-128 -> 127\uff09 int16 \uff08-32768 -> 32767\uff09 int32 \uff08-2,147,483,648 -> 2,147,483,647\uff09 int64 \uff08-9,223,372,036,854,775,808 -> 9,223,372,036,854,775,807\uff09 \u65e0\u7b26\u53f7\u6574\u6570\uff1a uint8 \uff080 -> 255\uff09 uint16 \uff080 -> 65,535\uff09 uint32 \uff080 -> 4,294,967,295\uff09 uint64 \uff080 -> 18,446,744,073,709,551,615\uff09 \u6d6e\u70b9\u578b\uff08IEEE-754 \u6807\u51c6\uff09\uff1a float32 \uff08+- 1e-45 -> +- 3.4 * 1e38\uff09 float64 \uff08+- 5 * 1e-324 -> 107 * 1e308\uff09 int \u578b\u662f\u8ba1\u7b97\u6700\u5feb\u7684\u4e00\u79cd\u7c7b\u578b\u3002 \u6574\u578b\u7684\u96f6\u503c\u4e3a 0 \uff0c\u6d6e\u70b9\u578b\u7684\u96f6\u503c\u4e3a 0.0 \u3002 float32 \u7cbe\u786e\u5230\u5c0f\u6570\u70b9\u540e 7 \u4f4d\uff0c float64 \u7cbe\u786e\u5230\u5c0f\u6570\u70b9\u540e 15 \u4f4d\u3002\u7531\u4e8e\u7cbe\u786e\u5ea6\u7684\u7f18\u6545\uff0c\u4f60\u5728\u4f7f\u7528 == \u6216\u8005 != \u6765\u6bd4\u8f83\u6d6e\u70b9\u6570\u65f6\u5e94\u5f53\u975e\u5e38\u5c0f\u5fc3\u3002\u4f60\u6700\u597d\u5728\u6b63\u5f0f\u4f7f\u7528\u524d\u6d4b\u8bd5\u5bf9\u4e8e\u7cbe\u786e\u5ea6\u8981\u6c42\u8f83\u9ad8\u7684\u8fd0\u7b97\u3002 \u4f60\u5e94\u8be5\u5c3d\u53ef\u80fd\u5730\u4f7f\u7528 float64 \uff0c\u56e0\u4e3a math \u5305\u4e2d\u6240\u6709\u6709\u5173\u6570\u5b66\u8fd0\u7b97\u7684\u51fd\u6570\u90fd\u4f1a\u8981\u6c42\u63a5\u6536\u8fd9\u4e2a\u7c7b\u578b\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0\u524d\u7f00 0 \u6765\u8868\u793a 8 \u8fdb\u5236\u6570\uff08\u5982\uff1a077\uff09\uff0c\u589e\u52a0\u524d\u7f00 0x \u6765\u8868\u793a 16 \u8fdb\u5236\u6570\uff08\u5982\uff1a 0xFF \uff09\uff0c\u4ee5\u53ca\u4f7f\u7528 e \u6765\u8868\u793a 10 \u7684\u8fde\u4e58\uff08\u5982\uff1a 1e3 = 1000\uff0c\u6216\u8005 6.022e23 = 6.022 x 1e23\uff09\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 a := uint64(0) \u6765\u540c\u65f6\u5b8c\u6210\u7c7b\u578b\u8f6c\u6362\u548c\u8d4b\u503c\u64cd\u4f5c\uff0c\u8fd9\u6837 a \u7684\u7c7b\u578b\u5c31\u662f uint64 \u3002 Go \u4e2d\u4e0d\u5141\u8bb8\u4e0d\u540c\u7c7b\u578b\u4e4b\u95f4\u7684\u6df7\u5408\u4f7f\u7528\uff0c\u4f46\u662f\u5bf9\u4e8e\u5e38\u91cf\u7684\u7c7b\u578b\u9650\u5236\u975e\u5e38\u5c11\uff0c\u56e0\u6b64\u5141\u8bb8\u5e38\u91cf\u4e4b\u95f4\u7684\u6df7\u5408\u4f7f\u7528\uff0c\u4e0b\u9762\u8fd9\u4e2a\u7a0b\u5e8f\u5f88\u597d\u5730\u89e3\u91ca\u4e86\u8fd9\u4e2a\u73b0\u8c61\uff08\u8be5\u7a0b\u5e8f\u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1\uff09\uff1a \u793a\u4f8b 4.8 type_mixing.go package main func main () { var a int var b int32 a = 15 b = a + a // \u7f16\u8bd1\u9519\u8bef b = b + 5 // \u56e0\u4e3a 5 \u662f\u5e38\u91cf\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u7f16\u8bd1 } \u5982\u679c\u4f60\u5c1d\u8bd5\u7f16\u8bd1\u8be5\u7a0b\u5e8f\uff0c\u5219\u5c06\u5f97\u5230\u7f16\u8bd1\u9519\u8bef cannot use a + a (type int) as type int32 in assignment \u3002 \u540c\u6837\u5730\uff0c int16 \u4e5f\u4e0d\u80fd\u591f\u88ab\u9690\u5f0f\u8f6c\u6362\u4e3a int32 \u3002 \u4e0b\u9762\u8fd9\u4e2a\u7a0b\u5e8f\u5c55\u793a\u4e86\u901a\u8fc7\u663e\u5f0f\u8f6c\u6362\u6765\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\uff08 \u7b2c 4.2 \u8282 \uff09\u3002 \u793a\u4f8b 4.9 casting.go package main import \"fmt\" func main () { var n int16 = 34 var m int32 // compiler error: cannot use n (type int16) as type int32 in assignment //m = n m = int32 ( n ) fmt . Printf ( \"32 bit int is: %d\\n\" , m ) fmt . Printf ( \"16 bit int is: %d\\n\" , n ) } \u8f93\u51fa\uff1a 32 bit int is: 34 16 bit int is: 34 \u683c\u5f0f\u5316\u8bf4\u660e\u7b26 \u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u91cc\uff0c %d \u7528\u4e8e\u683c\u5f0f\u5316\u6574\u6570\uff08 %x \u548c %X \u7528\u4e8e\u683c\u5f0f\u5316 16 \u8fdb\u5236\u8868\u793a\u7684\u6570\u5b57\uff09\uff0c %g \u7528\u4e8e\u683c\u5f0f\u5316\u6d6e\u70b9\u578b\uff08 %f \u8f93\u51fa\u6d6e\u70b9\u6570\uff0c %e \u8f93\u51fa\u79d1\u5b66\u8ba1\u6570\u8868\u793a\u6cd5\uff09\uff0c %0nd \u7528\u4e8e\u89c4\u5b9a\u8f93\u51fa\u957f\u5ea6\u4e3a n \u7684\u6574\u6570\uff0c\u5176\u4e2d\u5f00\u5934\u7684\u6570\u5b57 0 \u662f\u5fc5\u987b\u7684\u3002 %n.mg \u7528\u4e8e\u8868\u793a\u6570\u5b57 n \u5e76\u7cbe\u786e\u5230\u5c0f\u6570\u70b9\u540e m \u4f4d\uff0c\u9664\u4e86\u4f7f\u7528 g \u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 e \u6216\u8005 f\uff0c\u4f8b\u5982\uff1a\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 %5.2e \u6765\u8f93\u51fa 3.4 \u7684\u7ed3\u679c\u4e3a 3.40e+00 \u3002 \u6570\u5b57\u503c\u8f6c\u6362 \u5f53\u8fdb\u884c\u7c7b\u4f3c a32bitInt = int32(a32Float) \u7684\u8f6c\u6362\u65f6\uff0c\u5c0f\u6570\u70b9\u540e\u7684\u6570\u5b57\u5c06\u88ab\u4e22\u5f03\u3002\u8fd9\u79cd\u60c5\u51b5\u4e00\u822c\u53d1\u751f\u5f53\u4ece\u53d6\u503c\u8303\u56f4\u8f83\u5927\u7684\u7c7b\u578b\u8f6c\u6362\u4e3a\u53d6\u503c\u8303\u56f4\u8f83\u5c0f\u7684\u7c7b\u578b\u65f6\uff0c\u6216\u8005\u4f60\u53ef\u4ee5\u5199\u4e00\u4e2a\u4e13\u95e8\u7528\u4e8e\u5904\u7406\u7c7b\u578b\u8f6c\u6362\u7684\u51fd\u6570\u6765\u786e\u4fdd\u6ca1\u6709\u53d1\u751f\u7cbe\u5ea6\u7684\u4e22\u5931\u3002\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u5c55\u793a\u5982\u4f55\u5b89\u5168\u5730\u4ece int \u578b\u8f6c\u6362\u4e3a int8 \uff1a func Uint8FromInt ( n int ) ( uint8 , error ) { if 0 <= n && n <= math . MaxUint8 { // conversion is safe return uint8 ( n ), nil } return 0 , fmt . Errorf ( \"%d is out of the uint8 range\" , n ) } \u6216\u8005\u5b89\u5168\u5730\u4ece float64 \u8f6c\u6362\u4e3a int \uff1a func IntFromFloat64 ( x float64 ) int { if math . MinInt32 <= x && x <= math . MaxInt32 { // x lies in the integer range whole , fraction := math . Modf ( x ) if fraction >= 0.5 { whole ++ } return int ( whole ) } panic ( fmt . Sprintf ( \"%g is out of the int32 range\" , x )) } \u4e0d\u8fc7\u5982\u679c\u4f60\u5b9e\u9645\u5b58\u7684\u6570\u5b57\u8d85\u51fa\u4f60\u8981\u8f6c\u6362\u5230\u7684\u7c7b\u578b\u7684\u53d6\u503c\u8303\u56f4\u7684\u8bdd\uff0c\u5219\u4f1a\u5f15\u53d1 panic \uff08 \u7b2c 13.2 \u8282 \uff09\u3002 \u95ee\u9898 4.1 int \u548c int64 \u662f\u76f8\u540c\u7684\u7c7b\u578b\u5417\uff1f 4.5.2.2 \u590d\u6570 \u00b6 Go \u62e5\u6709\u4ee5\u4e0b\u590d\u6570\u7c7b\u578b\uff1a complex64 (32 \u4f4d\u5b9e\u6570\u548c\u865a\u6570) complex128 (64 \u4f4d\u5b9e\u6570\u548c\u865a\u6570) \u590d\u6570\u4f7f\u7528 re+imI \u6765\u8868\u793a\uff0c\u5176\u4e2d re \u4ee3\u8868\u5b9e\u6570\u90e8\u5206\uff0c im \u4ee3\u8868\u865a\u6570\u90e8\u5206\uff0c I \u4ee3\u8868\u6839\u53f7\u8d1f 1\u3002 \u793a\u4f8b\uff1a var c1 complex64 = 5 + 10i fmt . Printf ( \"The value is: %v\" , c1 ) // \u8f93\u51fa\uff1a 5 + 10i \u5982\u679c re \u548c im \u7684\u7c7b\u578b\u5747\u4e3a float32 \uff0c\u90a3\u4e48\u7c7b\u578b\u4e3a complex64 \u7684\u590d\u6570 c \u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u6765\u83b7\u5f97\uff1a c = complex ( re , im ) \u51fd\u6570 real(c) \u548c imag(c) \u53ef\u4ee5\u5206\u522b\u83b7\u5f97\u76f8\u5e94\u7684\u5b9e\u6570\u548c\u865a\u6570\u90e8\u5206\u3002 \u5728\u4f7f\u7528\u683c\u5f0f\u5316\u8bf4\u660e\u7b26\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 %v \u6765\u8868\u793a\u590d\u6570\uff0c\u4f46\u5f53\u4f60\u5e0c\u671b\u53ea\u8868\u793a\u5176\u4e2d\u7684\u4e00\u4e2a\u90e8\u5206\u7684\u65f6\u5019\u9700\u8981\u4f7f\u7528 %f \u3002 \u590d\u6570\u652f\u6301\u548c\u5176\u5b83\u6570\u5b57\u7c7b\u578b\u4e00\u6837\u7684\u8fd0\u7b97\u3002\u5f53\u4f60\u4f7f\u7528\u7b49\u53f7 == \u6216\u8005\u4e0d\u7b49\u53f7 != \u5bf9\u590d\u6570\u8fdb\u884c\u6bd4\u8f83\u8fd0\u7b97\u65f6\uff0c\u6ce8\u610f\u5bf9\u7cbe\u786e\u5ea6\u7684\u628a\u63e1\u3002 cmath \u5305\u4e2d\u5305\u542b\u4e86\u4e00\u4e9b\u64cd\u4f5c\u590d\u6570\u7684\u516c\u5171\u65b9\u6cd5\u3002\u5982\u679c\u4f60\u5bf9\u5185\u5b58\u7684\u8981\u6c42\u4e0d\u662f\u7279\u522b\u9ad8\uff0c\u6700\u597d\u4f7f\u7528 complex128 \u4f5c\u4e3a\u8ba1\u7b97\u7c7b\u578b\uff0c\u56e0\u4e3a\u76f8\u5173\u51fd\u6570\u90fd\u4f7f\u7528\u8fd9\u4e2a\u7c7b\u578b\u7684\u53c2\u6570\u3002 4.5.2.3 \u4f4d\u8fd0\u7b97 \u00b6 \u4f4d\u8fd0\u7b97\u53ea\u80fd\u7528\u4e8e\u6574\u6570\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u4e14\u9700\u5f53\u5b83\u4eec\u62e5\u6709\u7b49\u957f\u4f4d\u6a21\u5f0f\u65f6\u3002 %b \u662f\u7528\u4e8e\u8868\u793a\u4f4d\u7684\u683c\u5f0f\u5316\u6807\u8bc6\u7b26\u3002 \u4e8c\u5143\u8fd0\u7b97\u7b26 \u6309\u4f4d\u4e0e & \uff1a \u5bf9\u5e94\u4f4d\u7f6e\u4e0a\u7684\u503c\u7ecf\u8fc7\u548c\u8fd0\u7b97\u7ed3\u679c\uff0c\u5177\u4f53\u53c2\u89c1\u548c\u8fd0\u7b97\u7b26\uff08\u7b2c 4.5.1 \u8282\uff09\uff0c\u5e76\u5c06 T (true) \u66ff\u6362\u4e3a 1 \uff0c\u5c06 F (false) \u66ff\u6362\u4e3a 0 1 & 1 -> 1 1 & 0 -> 0 0 & 1 -> 0 0 & 0 -> 0 \u6309\u4f4d\u6216 | \uff1a \u5bf9\u5e94\u4f4d\u7f6e\u4e0a\u7684\u503c\u7ecf\u8fc7\u6216\u8fd0\u7b97\u7ed3\u679c\uff0c\u5177\u4f53\u53c2\u89c1\u6216\u8fd0\u7b97\u7b26\uff08\u7b2c 4.5.1 \u8282\uff09\uff0c\u5e76\u5c06 T (true) \u66ff\u6362\u4e3a 1 \uff0c\u5c06 F (false) \u66ff\u6362\u4e3a 0 1 | 1 -> 1 1 | 0 -> 1 0 | 1 -> 1 0 | 0 -> 0 \u6309\u4f4d\u5f02\u6216 ^ \uff1a \u5bf9\u5e94\u4f4d\u7f6e\u4e0a\u7684\u503c\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\u7ec4\u5408\uff1a 1 ^ 1 -> 0 1 ^ 0 -> 1 0 ^ 1 -> 1 0 ^ 0 -> 0 \u4f4d\u6e05\u9664 &^ \uff1a\u5c06\u6307\u5b9a\u4f4d\u7f6e\u4e0a\u7684\u503c\u8bbe\u7f6e\u4e3a 0 \u3002 package main import \"fmt\" func main () { var x uint8 = 15 var y uint8 = 4 fmt . Printf ( \"%08b\\n\" , x &^ y ); // 00001011 } \u4e00\u5143\u8fd0\u7b97\u7b26 \u6309\u4f4d\u8865\u8db3 ^ \uff1a \u8be5\u8fd0\u7b97\u7b26\u4e0e\u5f02\u6216\u8fd0\u7b97\u7b26\u4e00\u540c\u4f7f\u7528\uff0c\u5373 m^x \uff0c\u5bf9\u4e8e\u65e0\u7b26\u53f7 x \u4f7f\u7528 \u201c\u5168\u90e8\u4f4d\u8bbe\u7f6e\u4e3a 1\u201d \u7684\u89c4\u5219\uff0c\u5bf9\u4e8e\u6709\u7b26\u53f7 x \u65f6\u4f7f\u7528 m=-1 \u3002\u4f8b\u5982\uff1a ^10 = -01 ^ 10 = -11 \u4f4d\u5de6\u79fb << \uff1a \u7528\u6cd5\uff1a bitP << n \u3002 bitP \u7684\u4f4d\u5411\u5de6\u79fb\u52a8 n \u4f4d\uff0c\u53f3\u4fa7\u7a7a\u767d\u90e8\u5206\u4f7f\u7528 0 \u586b\u5145\uff1b\u5982\u679c n \u7b49\u4e8e 2\uff0c\u5219\u7ed3\u679c\u662f 2 \u7684\u76f8\u5e94\u500d\u6570\uff0c\u5373 2 \u7684 n \u6b21\u65b9\u3002\u4f8b\u5982\uff1a 1 << 10 // \u7b49\u4e8e 1 KB 1 << 20 // \u7b49\u4e8e 1 MB 1 << 30 // \u7b49\u4e8e 1 GB \u4f4d\u53f3\u79fb >> \uff1a \u7528\u6cd5\uff1a bitP >> n \u3002 bitP \u7684\u4f4d\u5411\u53f3\u79fb\u52a8 n \u4f4d\uff0c\u5de6\u4fa7\u7a7a\u767d\u90e8\u5206\u4f7f\u7528 0 \u586b\u5145\uff1b\u5982\u679c n \u7b49\u4e8e 2\uff0c\u5219\u7ed3\u679c\u662f\u5f53\u524d\u503c\u9664\u4ee5 2 \u7684 n \u6b21\u65b9\u3002 \u5f53\u5e0c\u671b\u628a\u7ed3\u679c\u8d4b\u503c\u7ed9\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u65f6\uff0c\u53ef\u4ee5\u7b80\u5199\u4e3a a <<= 2 \u6216\u8005 b ^= a & 0xffffffff \u3002 \u4f4d\u5de6\u79fb\u5e38\u89c1\u5b9e\u73b0\u5b58\u50a8\u5355\u4f4d\u7684\u7528\u4f8b \u4f7f\u7528\u4f4d\u5de6\u79fb\u4e0e iota \u8ba1\u6570\u914d\u5408\u53ef\u4f18\u96c5\u5730\u5b9e\u73b0\u5b58\u50a8\u5355\u4f4d\u7684\u5e38\u91cf\u679a\u4e3e\uff1a type ByteSize float64 const ( _ = iota // \u901a\u8fc7\u8d4b\u503c\u7ed9\u7a7a\u767d\u6807\u8bc6\u7b26\u6765\u5ffd\u7565\u503c KB ByteSize = 1 << ( 10 * iota ) MB GB TB PB EB ZB YB ) \u5728\u901a\u8baf\u4e2d\u4f7f\u7528\u4f4d\u5de6\u79fb\u8868\u793a\u6807\u8bc6\u7684\u7528\u4f8b type BitFlag int const ( Active BitFlag = 1 << iota // 1 << 0 == 1 Send // 1 << 1 == 2 Receive // 1 << 2 == 4 ) flag := Active | Send // == 3 4.5.2.4 \u903b\u8f91\u8fd0\u7b97\u7b26 \u00b6 Go \u4e2d\u62e5\u6709\u4ee5\u4e0b\u903b\u8f91\u8fd0\u7b97\u7b26\uff1a == \u3001 != \uff08\u7b2c 4.5.1 \u8282\uff09\u3001 < \u3001 <= \u3001 > \u3001 >= \u3002 \u5b83\u4eec\u4e4b\u6240\u4ee5\u88ab\u79f0\u4e3a\u903b\u8f91\u8fd0\u7b97\u7b26\u662f\u56e0\u4e3a\u5b83\u4eec\u7684\u8fd0\u7b97\u7ed3\u679c\u603b\u662f\u4e3a\u5e03\u5c14\u503c bool \u3002\u4f8b\u5982\uff1a b3 := 10 > 5 // b3 is true 4.5.2.5 \u7b97\u672f\u8fd0\u7b97\u7b26 \u00b6 \u5e38\u89c1\u53ef\u7528\u4e8e\u6574\u6570\u548c\u6d6e\u70b9\u6570\u7684\u4e8c\u5143\u8fd0\u7b97\u7b26\u6709 + \u3001 - \u3001 * \u548c / \u3002 \uff08\u76f8\u5bf9\u4e8e\u4e00\u822c\u89c4\u5219\u800c\u8a00\uff0cGo \u5728\u8fdb\u884c\u5b57\u7b26\u4e32\u62fc\u63a5\u65f6\u5141\u8bb8\u4f7f\u7528\u5bf9\u8fd0\u7b97\u7b26 + \u7684\u91cd\u8f7d\uff0c\u4f46 Go \u672c\u8eab\u4e0d\u5141\u8bb8\u5f00\u53d1\u8005\u8fdb\u884c\u81ea\u5b9a\u4e49\u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff09 / \u5bf9\u4e8e\u6574\u6570\u8fd0\u7b97\u800c\u8a00\uff0c\u7ed3\u679c\u4f9d\u65e7\u4e3a\u6574\u6570\uff0c\u4f8b\u5982\uff1a 9 / 4 -> 2 \u3002 \u53d6\u4f59\u8fd0\u7b97\u7b26\u53ea\u80fd\u4f5c\u7528\u4e8e\u6574\u6570\uff1a 9 % 4 -> 1 \u3002 \u6574\u6570\u9664\u4ee5 0 \u53ef\u80fd\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\uff0c\u5c06\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6\u7684\u6050\u614c\u72b6\u6001\uff08\u5982\u679c\u9664\u4ee5 0 \u7684\u884c\u4e3a\u5728\u7f16\u8bd1\u65f6\u5c31\u80fd\u88ab\u6355\u6349\u5230\uff0c\u5219\u4f1a\u5f15\u53d1\u7f16\u8bd1\u9519\u8bef\uff09\uff1b \u7b2c 13 \u7ae0 \u5c06\u4f1a\u8be6\u7ec6\u8bb2\u89e3\u5982\u4f55\u6b63\u786e\u5730\u5904\u7406\u6b64\u7c7b\u60c5\u51b5\u3002 \u6d6e\u70b9\u6570\u9664\u4ee5 0.0 \u4f1a\u8fd4\u56de\u4e00\u4e2a\u65e0\u7a77\u5c3d\u7684\u7ed3\u679c\uff0c\u4f7f\u7528 +Inf \u8868\u793a\u3002 \u7ec3\u4e60 4.4 \u5c1d\u8bd5\u7f16\u8bd1 divby0.go \u3002 \u4f60\u53ef\u4ee5\u5c06\u8bed\u53e5 b = b + a \u7b80\u5199\u4e3a b += a \uff0c\u540c\u6837\u7684\u5199\u6cd5\u4e5f\u53ef\u7528\u4e8e -= \u3001 *= \u3001 /= \u3001 %= \u3002 \u5bf9\u4e8e\u6574\u6570\u548c\u6d6e\u70b9\u6570\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u5143\u8fd0\u7b97\u7b26 ++ \uff08\u9012\u589e\uff09\u548c -- \uff08\u9012\u51cf\uff09\uff0c\u4f46\u53ea\u80fd\u7528\u4e8e\u540e\u7f00\uff1a i++ -> i += 1 -> i = i + 1 i-- -> i -= 1 -> i = i - 1 \u540c\u65f6\uff0c\u5e26\u6709 ++ \u548c -- \u7684\u53ea\u80fd\u4f5c\u4e3a\u8bed\u53e5\uff0c\u800c\u975e\u8868\u8fbe\u5f0f\uff0c\u56e0\u6b64 n = i++ \u8fd9\u79cd\u5199\u6cd5\u662f\u65e0\u6548\u7684\uff0c\u5176\u5b83\u50cf f(i++) \u6216\u8005 a[i]=b[i++] \u8fd9\u4e9b\u53ef\u4ee5\u7528\u4e8e C\u3001C++ \u548c Java \u4e2d\u7684\u5199\u6cd5\u5728 Go \u4e2d\u4e5f\u662f\u4e0d\u5141\u8bb8\u7684\u3002 \u5728\u8fd0\u7b97\u65f6 \u6ea2\u51fa \u4e0d\u4f1a\u4ea7\u751f\u9519\u8bef\uff0cGo \u4f1a\u7b80\u5355\u5730\u5c06\u8d85\u51fa\u4f4d\u6570\u629b\u5f03\u3002\u5982\u679c\u4f60\u9700\u8981\u8303\u56f4\u65e0\u9650\u5927\u7684\u6574\u6570\u6216\u8005\u6709\u7406\u6570\uff08\u610f\u5473\u7740\u53ea\u88ab\u9650\u5236\u4e8e\u8ba1\u7b97\u673a\u5185\u5b58\uff09\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u5e93\u4e2d\u7684 big \u5305\uff0c\u8be5\u5305\u63d0\u4f9b\u4e86\u7c7b\u4f3c big.Int \u548c big.Rat \u8fd9\u6837\u7684\u7c7b\u578b\uff08 \u7b2c 9.4 \u8282 \uff09\u3002 4.5.2.6 \u968f\u673a\u6570 \u00b6 \u4e00\u4e9b\u50cf\u6e38\u620f\u6216\u8005\u7edf\u8ba1\u5b66\u7c7b\u7684\u5e94\u7528\u9700\u8981\u7528\u5230\u968f\u673a\u6570\u3002 rand \u5305\u5b9e\u73b0\u4e86\u4f2a\u968f\u673a\u6570\u7684\u751f\u6210\u3002 \u793a\u4f8b 4.10 random.go \u6f14\u793a\u4e86\u5982\u4f55\u751f\u6210 10 \u4e2a\u975e\u8d1f\u968f\u673a\u6570\uff1a package main import ( \"fmt\" \"math/rand\" \"time\" ) func main () { for i := 0 ; i < 10 ; i ++ { a := rand . Int () fmt . Printf ( \"%d / \" , a ) } for i := 0 ; i < 5 ; i ++ { r := rand . Intn ( 8 ) fmt . Printf ( \"%d / \" , r ) } fmt . Println () timens := int64 ( time . Now (). Nanosecond ()) rand . Seed ( timens ) for i := 0 ; i < 10 ; i ++ { fmt . Printf ( \"%2.2f / \" , 100 * rand . Float32 ()) } } \u53ef\u80fd\u7684\u8f93\u51fa\uff1a 816681689 / 1325201247 / 623951027 / 478285186 / 1654146165 / 1951252986 / 2029250107 / 762911244 / 1372544545 / 591415086 / / 3 / 0 / 6 / 4 / 2 /22.10 / 65.77 / 65.89 / 16.85 / 75.56 / 46.90 / 55.24 / 55.95 / 25.58 / 70.61 / \u51fd\u6570 rand.Float32 \u548c rand.Float64 \u8fd4\u56de\u4ecb\u4e8e \\([0.0, 1.0)\\) \u4e4b\u95f4\u7684\u4f2a\u968f\u673a\u6570\uff0c\u5176\u4e2d\u5305\u62ec 0.0 \u4f46\u4e0d\u5305\u62ec 1.0 \u3002\u51fd\u6570 rand.Intn \u8fd4\u56de\u4ecb\u4e8e \\([0, n)\\) \u4e4b\u95f4\u7684\u4f2a\u968f\u673a\u6570\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 rand.Seed(value) \u51fd\u6570\u6765\u63d0\u4f9b\u4f2a\u968f\u673a\u6570\u7684\u751f\u6210\u79cd\u5b50\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u4f1a\u4f7f\u7528\u5f53\u524d\u65f6\u95f4\u7684\u7eb3\u79d2\u7ea7\u6570\u5b57\uff08\u7b2c 4.8 \u8282\uff09\u3002 4.5.3 \u8fd0\u7b97\u7b26\u4e0e\u4f18\u5148\u7ea7 \u00b6 \u6709\u4e9b\u8fd0\u7b97\u7b26\u62e5\u6709\u8f83\u9ad8\u7684\u4f18\u5148\u7ea7\uff0c\u4e8c\u5143\u8fd0\u7b97\u7b26\u7684\u8fd0\u7b97\u65b9\u5411\u5747\u662f\u4ece\u5de6\u81f3\u53f3\u3002\u4e0b\u8868\u5217\u51fa\u4e86\u6240\u6709\u8fd0\u7b97\u7b26\u4ee5\u53ca\u5b83\u4eec\u7684\u4f18\u5148\u7ea7\uff0c\u7531\u4e0a\u81f3\u4e0b\u4ee3\u8868\u4f18\u5148\u7ea7\u7531\u9ad8\u5230\u4f4e\uff1a \u4f18\u5148\u7ea7 \u8fd0\u7b97\u7b26 7 ^ ! 6 * / % << >> & &^ 5 + - | ^ 4 == != < <= >= > 3 <- 2 && 1 || \u5f53\u7136\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u62ec\u53f7\u6765\u4e34\u65f6\u63d0\u5347\u67d0\u4e2a\u8868\u8fbe\u5f0f\u7684\u6574\u4f53\u8fd0\u7b97\u4f18\u5148\u7ea7\u3002 4.5.4 \u7c7b\u578b\u522b\u540d \u00b6 \u5f53\u4f60\u5728\u4f7f\u7528\u67d0\u4e2a\u7c7b\u578b\u65f6\uff0c\u4f60\u53ef\u4ee5\u7ed9\u5b83\u8d77\u53e6\u4e00\u4e2a\u540d\u5b57\uff0c\u7136\u540e\u4f60\u5c31\u53ef\u4ee5\u5728\u4f60\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528\u65b0\u7684\u540d\u5b57\uff08\u7528\u4e8e\u7b80\u5316\u540d\u79f0\u6216\u89e3\u51b3\u540d\u79f0\u51b2\u7a81\uff09\u3002 \u5728 type TZ int \u4e2d\uff0c TZ \u5c31\u662f int \u7c7b\u578b\u7684\u65b0\u540d\u79f0\uff08\u7528\u4e8e\u8868\u793a\u7a0b\u5e8f\u4e2d\u7684\u65f6\u533a\uff09\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528 TZ \u6765\u64cd\u4f5c int \u7c7b\u578b\u7684\u6570\u636e\u3002 \u793a\u4f8b 4.11 type.go package main import \"fmt\" type TZ int func main () { var a , b TZ = 3 , 4 c := a + b fmt . Printf ( \"c has the value: %d\" , c ) // \u8f93\u51fa\uff1ac has the value: 7 } \u5b9e\u9645\u4e0a\uff0c\u7c7b\u578b\u522b\u540d\u5f97\u5230\u7684\u65b0\u7c7b\u578b\u5e76\u975e\u548c\u539f\u7c7b\u578b\u5b8c\u5168\u76f8\u540c\uff0c\u65b0\u7c7b\u578b\u4e0d\u4f1a\u62e5\u6709\u539f\u7c7b\u578b\u6240\u9644\u5e26\u7684\u65b9\u6cd5\uff08 \u7b2c 10 \u7ae0 \uff09\uff1b TZ \u53ef\u4ee5\u81ea\u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5\u7528\u6765\u8f93\u51fa\u66f4\u52a0\u4eba\u6027\u5316\u7684\u65f6\u533a\u4fe1\u606f\u3002 \u7ec3\u4e60 4.5 \u5b9a\u4e49\u4e00\u4e2a string \u7684\u7c7b\u578b\u522b\u540d Rope \uff0c\u5e76\u58f0\u660e\u4e00\u4e2a\u8be5\u7c7b\u578b\u7684\u53d8\u91cf\u3002 4.5.5 \u5b57\u7b26\u7c7b\u578b \u00b6 \u4e25\u683c\u6765\u8bf4\uff0c\u8fd9\u5e76\u4e0d\u662f Go \u8bed\u8a00\u7684\u4e00\u4e2a\u7c7b\u578b\uff0c\u5b57\u7b26\u53ea\u662f\u6574\u6570\u7684\u7279\u6b8a\u7528\u4f8b\u3002 byte \u7c7b\u578b\u662f uint8 \u7684\u522b\u540d\uff0c\u5bf9\u4e8e\u53ea\u5360\u7528 1 \u4e2a\u5b57\u8282\u7684\u4f20\u7edf ASCII \u7f16\u7801\u7684\u5b57\u7b26\u6765\u8bf4\uff0c\u5b8c\u5168\u6ca1\u6709\u95ee\u9898\u3002\u4f8b\u5982\uff1a var ch byte = 'A' \uff1b\u5b57\u7b26\u4f7f\u7528\u5355\u5f15\u53f7\u62ec\u8d77\u6765\u3002 \u5728 ASCII \u7801\u8868\u4e2d\uff0c 'A' \u7684\u503c\u662f 65 \uff0c\u800c\u4f7f\u7528 16 \u8fdb\u5236\u8868\u793a\u5219\u4e3a 41 \uff0c\u6240\u4ee5\u4e0b\u9762\u7684\u5199\u6cd5\u662f\u7b49\u6548\u7684\uff1a var ch byte = 65 \u6216 var ch byte = '\\x41' \uff08 \\x \u603b\u662f\u7d27\u8ddf\u7740\u957f\u5ea6\u4e3a 2 \u7684 16 \u8fdb\u5236\u6570\uff09 \u53e6\u5916\u4e00\u79cd\u53ef\u80fd\u7684\u5199\u6cd5\u662f \\ \u540e\u9762\u7d27\u8ddf\u7740\u957f\u5ea6\u4e3a 3 \u7684 8 \u8fdb\u5236\u6570\uff0c\u4f8b\u5982\uff1a \\377 \u3002 \u4e0d\u8fc7 Go \u540c\u6837\u652f\u6301 Unicode\uff08UTF-8\uff09\uff0c\u56e0\u6b64\u5b57\u7b26\u540c\u6837\u79f0\u4e3a Unicode \u4ee3\u7801\u70b9\u6216\u8005 runes\uff0c\u5e76\u5728\u5185\u5b58\u4e2d\u4f7f\u7528 int \u6765\u8868\u793a\u3002\u5728\u6587\u6863\u4e2d\uff0c\u4e00\u822c\u4f7f\u7528\u683c\u5f0f U+hhhh \u6765\u8868\u793a\uff0c\u5176\u4e2d h \u8868\u793a\u4e00\u4e2a 16 \u8fdb\u5236\u6570\u3002\u5176\u5b9e rune \u4e5f\u662f Go \u5f53\u4e2d\u7684\u4e00\u4e2a\u7c7b\u578b\uff0c\u5e76\u4e14\u662f int32 \u7684\u522b\u540d\u3002 \u5728\u4e66\u5199 Unicode \u5b57\u7b26\u65f6\uff0c\u9700\u8981\u5728 16 \u8fdb\u5236\u6570\u4e4b\u524d\u52a0\u4e0a\u524d\u7f00 \\u \u6216\u8005 \\U \u3002 \u56e0\u4e3a Unicode \u81f3\u5c11\u5360\u7528 2 \u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u6211\u4eec\u4f7f\u7528 int16 \u6216\u8005 int \u7c7b\u578b\u6765\u8868\u793a\u3002\u5982\u679c\u9700\u8981\u4f7f\u7528\u5230 4 \u5b57\u8282\uff0c\u5219\u4f1a\u52a0\u4e0a \\U \u524d\u7f00\uff1b\u524d\u7f00 \\u \u5219\u603b\u662f\u7d27\u8ddf\u7740\u957f\u5ea6\u4e3a 4 \u7684 16 \u8fdb\u5236\u6570\uff0c\u524d\u7f00 \\U \u7d27\u8ddf\u7740\u957f\u5ea6\u4e3a 8 \u7684 16 \u8fdb\u5236\u6570\u3002 \u793a\u4f8b 4.12 char.go var ch int = '\\u0041' var ch2 int = '\\u03B2' var ch3 int = '\\U00101234' fmt . Printf ( \"%d - %d - %d\\n\" , ch , ch2 , ch3 ) // integer fmt . Printf ( \"%c - %c - %c\\n\" , ch , ch2 , ch3 ) // character fmt . Printf ( \"%X - %X - %X\\n\" , ch , ch2 , ch3 ) // UTF-8 bytes fmt . Printf ( \"%U - %U - %U\" , ch , ch2 , ch3 ) // UTF-8 code point \u8f93\u51fa\uff1a 65 - 946 - 1053236 A - \u03b2 - r 41 - 3B2 - 101234 U+0041 - U+03B2 - U+101234 \u683c\u5f0f\u5316\u8bf4\u660e\u7b26 %c \u7528\u4e8e\u8868\u793a\u5b57\u7b26\uff1b\u5f53\u548c\u5b57\u7b26\u914d\u5408\u4f7f\u7528\u65f6\uff0c %v \u6216 %d \u4f1a\u8f93\u51fa\u7528\u4e8e\u8868\u793a\u8be5\u5b57\u7b26\u7684\u6574\u6570\uff1b %U \u8f93\u51fa\u683c\u5f0f\u4e3a U+hhhh \u7684\u5b57\u7b26\u4e32\uff08\u53e6\u4e00\u4e2a\u793a\u4f8b\u89c1 \u7b2c 5.4.4 \u8282 \uff09\u3002 \u5305 unicode \u5305\u542b\u4e86\u4e00\u4e9b\u9488\u5bf9\u6d4b\u8bd5\u5b57\u7b26\u7684\u975e\u5e38\u6709\u7528\u7684\u51fd\u6570\uff08\u5176\u4e2d ch \u4ee3\u8868\u5b57\u7b26\uff09\uff1a \u5224\u65ad\u662f\u5426\u4e3a\u5b57\u6bcd\uff1a unicode.IsLetter(ch) \u5224\u65ad\u662f\u5426\u4e3a\u6570\u5b57\uff1a unicode.IsDigit(ch) \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\u767d\u7b26\u53f7\uff1a unicode.IsSpace(ch) \u8fd9\u4e9b\u51fd\u6570\u8fd4\u56de\u5355\u4e2a\u5e03\u5c14\u503c\u3002\u5305 utf8 \u62e5\u6709\u66f4\u591a\u4e0e rune \u7c7b\u578b\u76f8\u5173\u7684\u51fd\u6570\u3002 \uff08 \u8bd1\u8005\u6ce8\uff1a\u5173\u4e8e\u7c7b\u578b\u7684\u76f8\u5173\u8bb2\u89e3\uff0c\u53ef\u53c2\u8003\u89c6\u9891\u6559\u7a0b \u300aGo\u7f16\u7a0b\u57fa\u7840\u300b \u7b2c 3 \u8bfe\uff1a \u7c7b\u578b\u4e0e\u53d8\u91cf \uff09 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u53d8\u91cf \u4e0b\u4e00\u8282\uff1a \u5b57\u7b26\u4e32","title":"4.5 \u57fa\u672c\u7c7b\u578b\u548c\u8fd0\u7b97\u7b26"},{"location":"04.5/#45","text":"\u6211\u4eec\u5c06\u5728\u8fd9\u4e2a\u90e8\u5206\u8bb2\u89e3\u6709\u5173\u5e03\u5c14\u578b\u3001\u6570\u5b57\u578b\u548c\u5b57\u7b26\u578b\u7684\u76f8\u5173\u77e5\u8bc6\u3002 \u8868\u8fbe\u5f0f\u662f\u4e00\u79cd\u7279\u5b9a\u7684\u7c7b\u578b\u7684\u503c\uff0c\u5b83\u53ef\u4ee5\u7531\u5176\u5b83\u7684\u503c\u4ee5\u53ca\u8fd0\u7b97\u7b26\u7ec4\u5408\u800c\u6210\u3002\u6bcf\u4e2a\u7c7b\u578b\u90fd\u5b9a\u4e49\u4e86\u53ef\u4ee5\u548c\u81ea\u5df1\u7ed3\u5408\u7684\u8fd0\u7b97\u7b26\u96c6\u5408\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u4e86\u4e0d\u5728\u8fd9\u4e2a\u96c6\u5408\u4e2d\u7684\u8fd0\u7b97\u7b26\uff0c\u5219\u4f1a\u5728\u7f16\u8bd1\u65f6\u83b7\u5f97\u7f16\u8bd1\u9519\u8bef\u3002 \u4e00\u5143\u8fd0\u7b97\u7b26\u53ea\u53ef\u4ee5\u7528\u4e8e\u4e00\u4e2a\u503c\u7684\u64cd\u4f5c\uff08\u4f5c\u4e3a\u540e\u7f00\uff09\uff0c\u800c\u4e8c\u5143\u8fd0\u7b97\u7b26\u5219\u53ef\u4ee5\u548c\u4e24\u4e2a\u503c\u6216\u8005\u64cd\u4f5c\u6570\u7ed3\u5408\uff08\u4f5c\u4e3a\u4e2d\u7f00\uff09\u3002 \u53ea\u6709\u4e24\u4e2a\u7c7b\u578b\u76f8\u540c\u7684\u503c\u624d\u53ef\u4ee5\u548c\u4e8c\u5143\u8fd0\u7b97\u7b26\u7ed3\u5408\uff0c\u53e6\u5916\u8981\u6ce8\u610f\u7684\u662f\uff0cGo \u662f\u5f3a\u7c7b\u578b\u8bed\u8a00\uff0c\u56e0\u6b64\u4e0d\u4f1a\u8fdb\u884c\u9690\u5f0f\u8f6c\u6362\uff0c\u4efb\u4f55\u4e0d\u540c\u7c7b\u578b\u4e4b\u95f4\u7684\u8f6c\u6362\u90fd\u5fc5\u987b\u663e\u5f0f\u8bf4\u660e\uff08\u7b2c 4.2 \u8282\uff09\u3002Go \u4e0d\u5b58\u5728\u50cf C \u90a3\u6837\u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff0c\u8868\u8fbe\u5f0f\u7684\u89e3\u6790\u987a\u5e8f\u662f\u4ece\u5de6\u81f3\u53f3\u3002 \u4f60\u53ef\u4ee5\u5728\u7b2c 4.5.3 \u8282\u627e\u5230\u6709\u5173\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u4f18\u5148\u7ea7\u8d8a\u9ad8\u7684\u8fd0\u7b97\u7b26\u5728\u6761\u4ef6\u76f8\u540c\u7684\u60c5\u51b5\u4e0b\u5c06\u88ab\u4f18\u5148\u6267\u884c\u3002\u4f46\u662f\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u62ec\u53f7\u5c06\u5176\u4e2d\u7684\u8868\u8fbe\u5f0f\u62ec\u8d77\u6765\uff0c\u4ee5\u4eba\u4e3a\u5730\u63d0\u5347\u67d0\u4e2a\u8868\u8fbe\u5f0f\u7684\u8fd0\u7b97\u4f18\u5148\u7ea7\u3002","title":"4.5 \u57fa\u672c\u7c7b\u578b\u548c\u8fd0\u7b97\u7b26"},{"location":"04.5/#451-bool","text":"\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a var b bool = true \u3002 \u5e03\u5c14\u578b\u7684\u503c\u53ea\u53ef\u4ee5\u662f\u5e38\u91cf true \u6216\u8005 false\u3002 \u4e24\u4e2a\u7c7b\u578b\u76f8\u540c\u7684\u503c\u53ef\u4ee5\u4f7f\u7528\u76f8\u7b49 == \u6216\u8005\u4e0d\u7b49 != \u8fd0\u7b97\u7b26\u6765\u8fdb\u884c\u6bd4\u8f83\u5e76\u83b7\u5f97\u4e00\u4e2a\u5e03\u5c14\u578b\u7684\u503c\u3002 \u5f53\u76f8\u7b49\u8fd0\u7b97\u7b26\u4e24\u8fb9\u7684\u503c\u662f\u5b8c\u5168\u76f8\u540c\u7684\u503c\u7684\u65f6\u5019\u4f1a\u8fd4\u56de true \uff0c\u5426\u5219\u8fd4\u56de false \uff0c\u5e76\u4e14\u53ea\u6709\u5728\u4e24\u4e2a\u7684\u503c\u7684\u7c7b\u578b\u76f8\u540c\u7684\u60c5\u51b5\u4e0b\u624d\u53ef\u4ee5\u4f7f\u7528\u3002 \u793a\u4f8b\uff1a var aVar = 10 aVar == 5 - > false aVar == 10 - > true \u5f53\u4e0d\u7b49\u8fd0\u7b97\u7b26\u4e24\u8fb9\u7684\u503c\u662f\u4e0d\u540c\u7684\u65f6\u5019\u4f1a\u8fd4\u56de true \uff0c\u5426\u5219\u8fd4\u56de false \u3002 \u793a\u4f8b\uff1a var aVar = 10 aVar != 5 - > true aVar != 10 - > false Go \u5bf9\u4e8e\u503c\u4e4b\u95f4\u7684\u6bd4\u8f83\u6709\u975e\u5e38\u4e25\u683c\u7684\u9650\u5236\uff0c\u53ea\u6709\u4e24\u4e2a\u7c7b\u578b\u76f8\u540c\u7684\u503c\u624d\u53ef\u4ee5\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u503c\u7684\u7c7b\u578b\u662f\u63a5\u53e3\uff08interface\uff0c \u7b2c 11 \u7ae0 \uff09\uff0c\u5b83\u4eec\u4e5f\u5fc5\u987b\u90fd\u5b9e\u73b0\u4e86\u76f8\u540c\u7684\u63a5\u53e3\u3002\u5982\u679c\u5176\u4e2d\u4e00\u4e2a\u503c\u662f\u5e38\u91cf\uff0c\u90a3\u4e48\u53e6\u5916\u4e00\u4e2a\u503c\u7684\u7c7b\u578b\u5fc5\u987b\u548c\u8be5\u5e38\u91cf\u7c7b\u578b\u76f8\u517c\u5bb9\u7684\u3002\u5982\u679c\u4ee5\u4e0a\u6761\u4ef6\u90fd\u4e0d\u6ee1\u8db3\uff0c\u5219\u5176\u4e2d\u4e00\u4e2a\u503c\u7684\u7c7b\u578b\u5fc5\u987b\u5728\u88ab\u8f6c\u6362\u4e3a\u548c\u53e6\u5916\u4e00\u4e2a\u503c\u7684\u7c7b\u578b\u76f8\u540c\u4e4b\u540e\u624d\u53ef\u4ee5\u8fdb\u884c\u6bd4\u8f83\u3002 \u5e03\u5c14\u578b\u7684\u5e38\u91cf\u548c\u53d8\u91cf\u4e5f\u53ef\u4ee5\u901a\u8fc7\u548c\u903b\u8f91\u8fd0\u7b97\u7b26\uff08\u975e ! \u3001\u4e0e && \u3001\u6216 || \uff09\u7ed3\u5408\u6765\u4ea7\u751f\u53e6\u5916\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u8fd9\u6837\u7684\u903b\u8f91\u8bed\u53e5\u5c31\u5176\u672c\u8eab\u800c\u8a00\uff0c\u5e76\u4e0d\u662f\u4e00\u4e2a\u5b8c\u6574\u7684 Go \u8bed\u53e5\u3002 \u903b\u8f91\u503c\u53ef\u4ee5\u88ab\u7528\u4e8e\u6761\u4ef6\u7ed3\u6784\u4e2d\u7684\u6761\u4ef6\u8bed\u53e5\uff08 \u7b2c 5 \u7ae0 \uff09\uff0c\u4ee5\u4fbf\u6d4b\u8bd5\u67d0\u4e2a\u6761\u4ef6\u662f\u5426\u6ee1\u8db3\u3002\u53e6\u5916\uff0c\u4e0e && \u3001\u6216 || \u4e0e\u76f8\u7b49 == \u6216\u4e0d\u7b49 != \u5c5e\u4e8e\u4e8c\u5143\u8fd0\u7b97\u7b26\uff0c\u800c\u975e ! \u5c5e\u4e8e\u4e00\u5143\u8fd0\u7b97\u7b26\u3002\u5728\u63a5\u4e0b\u6765\u7684\u5185\u5bb9\u4e2d\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528 T \u6765\u4ee3\u8868\u6761\u4ef6\u7b26\u5408\u7684\u8bed\u53e5\uff0c\u7528 F \u6765\u4ee3\u8868\u6761\u4ef6\u4e0d\u7b26\u5408\u7684\u8bed\u53e5\u3002 Go \u8bed\u8a00\u4e2d\u5305\u542b\u4ee5\u4e0b\u903b\u8f91\u8fd0\u7b97\u7b26\uff1a \u975e\u8fd0\u7b97\u7b26\uff1a ! ! T - > false ! F - > true \u975e\u8fd0\u7b97\u7b26\u7528\u4e8e\u53d6\u5f97\u548c\u5e03\u5c14\u503c\u76f8\u53cd\u7684\u7ed3\u679c\u3002 \u4e0e\u8fd0\u7b97\u7b26\uff1a && T && T - > true T && F - > false F && T - > false F && F - > false \u53ea\u6709\u5f53\u4e24\u8fb9\u7684\u503c\u90fd\u4e3a true \u7684\u65f6\u5019\uff0c\u548c\u8fd0\u7b97\u7b26\u7684\u7ed3\u679c\u624d\u662f true \u3002 \u6216\u8fd0\u7b97\u7b26\uff1a || T || T - > true T || F - > true F || T - > true F || F - > false \u53ea\u6709\u5f53\u4e24\u8fb9\u7684\u503c\u90fd\u4e3a false \u7684\u65f6\u5019\uff0c\u6216\u8fd0\u7b97\u7b26\u7684\u7ed3\u679c\u624d\u662f false \uff0c\u5176\u4e2d\u4efb\u610f\u4e00\u8fb9\u7684\u503c\u4e3a true \u5c31\u80fd\u591f\u4f7f\u5f97\u8be5\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u4e3a true \u3002 \u5728 Go \u8bed\u8a00\u4e2d\uff0c && \u548c || \u662f\u5177\u6709\u5feb\u6377\u6027\u8d28\u7684\u8fd0\u7b97\u7b26\uff0c\u5f53\u8fd0\u7b97\u7b26\u5de6\u8fb9\u8868\u8fbe\u5f0f\u7684\u503c\u5df2\u7ecf\u80fd\u591f\u51b3\u5b9a\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u7684\u65f6\u5019\uff08 && \u5de6\u8fb9\u7684\u503c\u4e3a false \uff0c || \u5de6\u8fb9\u7684\u503c\u4e3a true \uff09\uff0c\u8fd0\u7b97\u7b26\u53f3\u8fb9\u7684\u8868\u8fbe\u5f0f\u5c06\u4e0d\u4f1a\u88ab\u6267\u884c\u3002\u5229\u7528\u8fd9\u4e2a\u6027\u8d28\uff0c\u5982\u679c\u4f60\u6709\u591a\u4e2a\u6761\u4ef6\u5224\u65ad\uff0c\u5e94\u5f53\u5c06\u8ba1\u7b97\u8fc7\u7a0b\u8f83\u4e3a\u590d\u6742\u7684\u8868\u8fbe\u5f0f\u653e\u5728\u8fd0\u7b97\u7b26\u7684\u53f3\u4fa7\u4ee5\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u8fd0\u7b97\u3002 \u5229\u7528\u62ec\u53f7\u540c\u6837\u53ef\u4ee5\u5347\u7ea7\u67d0\u4e2a\u8868\u8fbe\u5f0f\u7684\u8fd0\u7b97\u4f18\u5148\u7ea7\u3002 \u5728\u683c\u5f0f\u5316\u8f93\u51fa\u65f6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 %t \u6765\u8868\u793a\u4f60\u8981\u8f93\u51fa\u7684\u503c\u4e3a\u5e03\u5c14\u578b\u3002 \u5e03\u5c14\u503c\uff08\u4ee5\u53ca\u4efb\u4f55\u7ed3\u679c\u4e3a\u5e03\u5c14\u503c\u7684\u8868\u8fbe\u5f0f\uff09\u6700\u5e38\u7528\u5728\u6761\u4ef6\u7ed3\u6784\u7684\u6761\u4ef6\u8bed\u53e5\u4e2d\uff0c\u4f8b\u5982\uff1aif\u3001for \u548c switch \u7ed3\u6784\uff08\u7b2c 5 \u7ae0\uff09\u3002 \u5bf9\u4e8e\u5e03\u5c14\u503c\u7684\u597d\u7684\u547d\u540d\u80fd\u591f\u5f88\u597d\u5730\u63d0\u5347\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\uff0c\u4f8b\u5982\u4ee5 is \u6216\u8005 Is \u5f00\u5934\u7684 isSorted \u3001 isFinished \u3001 isVisible \uff0c\u4f7f\u7528\u8fd9\u6837\u7684\u547d\u540d\u80fd\u591f\u5728\u9605\u8bfb\u4ee3\u7801\u7684\u83b7\u5f97\u9605\u8bfb\u6b63\u5e38\u8bed\u53e5\u4e00\u6837\u7684\u826f\u597d\u4f53\u9a8c\uff0c\u4f8b\u5982\u6807\u51c6\u5e93\u4e2d\u7684 unicode.IsDigit(ch) \uff08 \u7b2c 4.5.5 \u8282 \uff09\u3002","title":"4.5.1 \u5e03\u5c14\u7c7b\u578b bool"},{"location":"04.5/#452","text":"","title":"4.5.2 \u6570\u5b57\u7c7b\u578b"},{"location":"04.5/#4521-int-float","text":"Go \u8bed\u8a00\u652f\u6301\u6574\u578b\u548c\u6d6e\u70b9\u578b\u6570\u5b57\uff0c\u5e76\u4e14\u539f\u751f\u652f\u6301\u590d\u6570\uff0c\u5176\u4e2d\u4f4d\u7684\u8fd0\u7b97\u91c7\u7528\u8865\u7801\uff08\u8be6\u60c5\u53c2\u89c1 \u4e8c\u7684\u8865\u7801 \u9875\u9762\uff09\u3002 Go \u4e5f\u6709\u57fa\u4e8e\u67b6\u6784\u7684\u7c7b\u578b\uff0c\u4f8b\u5982\uff1a int \u3001 uint \u548c uintptr \u3002 \u8fd9\u4e9b\u7c7b\u578b\u7684\u957f\u5ea6\u90fd\u662f\u6839\u636e\u8fd0\u884c\u7a0b\u5e8f\u6240\u5728\u7684\u64cd\u4f5c\u7cfb\u7edf\u7c7b\u578b\u6240\u51b3\u5b9a\u7684\uff1a int \u548c uint \u5728 32 \u4f4d\u64cd\u4f5c\u7cfb\u7edf\u4e0a\uff0c\u5b83\u4eec\u5747\u4f7f\u7528 32 \u4f4d\uff084 \u4e2a\u5b57\u8282\uff09\uff0c\u5728 64 \u4f4d\u64cd\u4f5c\u7cfb\u7edf\u4e0a\uff0c\u5b83\u4eec\u5747\u4f7f\u7528 64 \u4f4d\uff088 \u4e2a\u5b57\u8282\uff09\u3002 uintptr \u7684\u957f\u5ea6\u88ab\u8bbe\u5b9a\u4e3a\u8db3\u591f\u5b58\u653e\u4e00\u4e2a\u6307\u9488\u5373\u53ef\u3002 Go \u8bed\u8a00\u4e2d\u6ca1\u6709 float \u7c7b\u578b\u3002\uff08Go\u8bed\u8a00\u4e2d\u53ea\u6709 float32 \u548c float64 \uff09\u6ca1\u6709 double \u7c7b\u578b\u3002 \u4e0e\u64cd\u4f5c\u7cfb\u7edf\u67b6\u6784\u65e0\u5173\u7684\u7c7b\u578b\u90fd\u6709\u56fa\u5b9a\u7684\u5927\u5c0f\uff0c\u5e76\u5728\u7c7b\u578b\u7684\u540d\u79f0\u4e2d\u5c31\u53ef\u4ee5\u770b\u51fa\u6765\uff1a \u6574\u6570\uff1a int8 \uff08-128 -> 127\uff09 int16 \uff08-32768 -> 32767\uff09 int32 \uff08-2,147,483,648 -> 2,147,483,647\uff09 int64 \uff08-9,223,372,036,854,775,808 -> 9,223,372,036,854,775,807\uff09 \u65e0\u7b26\u53f7\u6574\u6570\uff1a uint8 \uff080 -> 255\uff09 uint16 \uff080 -> 65,535\uff09 uint32 \uff080 -> 4,294,967,295\uff09 uint64 \uff080 -> 18,446,744,073,709,551,615\uff09 \u6d6e\u70b9\u578b\uff08IEEE-754 \u6807\u51c6\uff09\uff1a float32 \uff08+- 1e-45 -> +- 3.4 * 1e38\uff09 float64 \uff08+- 5 * 1e-324 -> 107 * 1e308\uff09 int \u578b\u662f\u8ba1\u7b97\u6700\u5feb\u7684\u4e00\u79cd\u7c7b\u578b\u3002 \u6574\u578b\u7684\u96f6\u503c\u4e3a 0 \uff0c\u6d6e\u70b9\u578b\u7684\u96f6\u503c\u4e3a 0.0 \u3002 float32 \u7cbe\u786e\u5230\u5c0f\u6570\u70b9\u540e 7 \u4f4d\uff0c float64 \u7cbe\u786e\u5230\u5c0f\u6570\u70b9\u540e 15 \u4f4d\u3002\u7531\u4e8e\u7cbe\u786e\u5ea6\u7684\u7f18\u6545\uff0c\u4f60\u5728\u4f7f\u7528 == \u6216\u8005 != \u6765\u6bd4\u8f83\u6d6e\u70b9\u6570\u65f6\u5e94\u5f53\u975e\u5e38\u5c0f\u5fc3\u3002\u4f60\u6700\u597d\u5728\u6b63\u5f0f\u4f7f\u7528\u524d\u6d4b\u8bd5\u5bf9\u4e8e\u7cbe\u786e\u5ea6\u8981\u6c42\u8f83\u9ad8\u7684\u8fd0\u7b97\u3002 \u4f60\u5e94\u8be5\u5c3d\u53ef\u80fd\u5730\u4f7f\u7528 float64 \uff0c\u56e0\u4e3a math \u5305\u4e2d\u6240\u6709\u6709\u5173\u6570\u5b66\u8fd0\u7b97\u7684\u51fd\u6570\u90fd\u4f1a\u8981\u6c42\u63a5\u6536\u8fd9\u4e2a\u7c7b\u578b\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0\u524d\u7f00 0 \u6765\u8868\u793a 8 \u8fdb\u5236\u6570\uff08\u5982\uff1a077\uff09\uff0c\u589e\u52a0\u524d\u7f00 0x \u6765\u8868\u793a 16 \u8fdb\u5236\u6570\uff08\u5982\uff1a 0xFF \uff09\uff0c\u4ee5\u53ca\u4f7f\u7528 e \u6765\u8868\u793a 10 \u7684\u8fde\u4e58\uff08\u5982\uff1a 1e3 = 1000\uff0c\u6216\u8005 6.022e23 = 6.022 x 1e23\uff09\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 a := uint64(0) \u6765\u540c\u65f6\u5b8c\u6210\u7c7b\u578b\u8f6c\u6362\u548c\u8d4b\u503c\u64cd\u4f5c\uff0c\u8fd9\u6837 a \u7684\u7c7b\u578b\u5c31\u662f uint64 \u3002 Go \u4e2d\u4e0d\u5141\u8bb8\u4e0d\u540c\u7c7b\u578b\u4e4b\u95f4\u7684\u6df7\u5408\u4f7f\u7528\uff0c\u4f46\u662f\u5bf9\u4e8e\u5e38\u91cf\u7684\u7c7b\u578b\u9650\u5236\u975e\u5e38\u5c11\uff0c\u56e0\u6b64\u5141\u8bb8\u5e38\u91cf\u4e4b\u95f4\u7684\u6df7\u5408\u4f7f\u7528\uff0c\u4e0b\u9762\u8fd9\u4e2a\u7a0b\u5e8f\u5f88\u597d\u5730\u89e3\u91ca\u4e86\u8fd9\u4e2a\u73b0\u8c61\uff08\u8be5\u7a0b\u5e8f\u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1\uff09\uff1a \u793a\u4f8b 4.8 type_mixing.go package main func main () { var a int var b int32 a = 15 b = a + a // \u7f16\u8bd1\u9519\u8bef b = b + 5 // \u56e0\u4e3a 5 \u662f\u5e38\u91cf\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u7f16\u8bd1 } \u5982\u679c\u4f60\u5c1d\u8bd5\u7f16\u8bd1\u8be5\u7a0b\u5e8f\uff0c\u5219\u5c06\u5f97\u5230\u7f16\u8bd1\u9519\u8bef cannot use a + a (type int) as type int32 in assignment \u3002 \u540c\u6837\u5730\uff0c int16 \u4e5f\u4e0d\u80fd\u591f\u88ab\u9690\u5f0f\u8f6c\u6362\u4e3a int32 \u3002 \u4e0b\u9762\u8fd9\u4e2a\u7a0b\u5e8f\u5c55\u793a\u4e86\u901a\u8fc7\u663e\u5f0f\u8f6c\u6362\u6765\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\uff08 \u7b2c 4.2 \u8282 \uff09\u3002 \u793a\u4f8b 4.9 casting.go package main import \"fmt\" func main () { var n int16 = 34 var m int32 // compiler error: cannot use n (type int16) as type int32 in assignment //m = n m = int32 ( n ) fmt . Printf ( \"32 bit int is: %d\\n\" , m ) fmt . Printf ( \"16 bit int is: %d\\n\" , n ) } \u8f93\u51fa\uff1a 32 bit int is: 34 16 bit int is: 34 \u683c\u5f0f\u5316\u8bf4\u660e\u7b26 \u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u91cc\uff0c %d \u7528\u4e8e\u683c\u5f0f\u5316\u6574\u6570\uff08 %x \u548c %X \u7528\u4e8e\u683c\u5f0f\u5316 16 \u8fdb\u5236\u8868\u793a\u7684\u6570\u5b57\uff09\uff0c %g \u7528\u4e8e\u683c\u5f0f\u5316\u6d6e\u70b9\u578b\uff08 %f \u8f93\u51fa\u6d6e\u70b9\u6570\uff0c %e \u8f93\u51fa\u79d1\u5b66\u8ba1\u6570\u8868\u793a\u6cd5\uff09\uff0c %0nd \u7528\u4e8e\u89c4\u5b9a\u8f93\u51fa\u957f\u5ea6\u4e3a n \u7684\u6574\u6570\uff0c\u5176\u4e2d\u5f00\u5934\u7684\u6570\u5b57 0 \u662f\u5fc5\u987b\u7684\u3002 %n.mg \u7528\u4e8e\u8868\u793a\u6570\u5b57 n \u5e76\u7cbe\u786e\u5230\u5c0f\u6570\u70b9\u540e m \u4f4d\uff0c\u9664\u4e86\u4f7f\u7528 g \u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 e \u6216\u8005 f\uff0c\u4f8b\u5982\uff1a\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 %5.2e \u6765\u8f93\u51fa 3.4 \u7684\u7ed3\u679c\u4e3a 3.40e+00 \u3002 \u6570\u5b57\u503c\u8f6c\u6362 \u5f53\u8fdb\u884c\u7c7b\u4f3c a32bitInt = int32(a32Float) \u7684\u8f6c\u6362\u65f6\uff0c\u5c0f\u6570\u70b9\u540e\u7684\u6570\u5b57\u5c06\u88ab\u4e22\u5f03\u3002\u8fd9\u79cd\u60c5\u51b5\u4e00\u822c\u53d1\u751f\u5f53\u4ece\u53d6\u503c\u8303\u56f4\u8f83\u5927\u7684\u7c7b\u578b\u8f6c\u6362\u4e3a\u53d6\u503c\u8303\u56f4\u8f83\u5c0f\u7684\u7c7b\u578b\u65f6\uff0c\u6216\u8005\u4f60\u53ef\u4ee5\u5199\u4e00\u4e2a\u4e13\u95e8\u7528\u4e8e\u5904\u7406\u7c7b\u578b\u8f6c\u6362\u7684\u51fd\u6570\u6765\u786e\u4fdd\u6ca1\u6709\u53d1\u751f\u7cbe\u5ea6\u7684\u4e22\u5931\u3002\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u5c55\u793a\u5982\u4f55\u5b89\u5168\u5730\u4ece int \u578b\u8f6c\u6362\u4e3a int8 \uff1a func Uint8FromInt ( n int ) ( uint8 , error ) { if 0 <= n && n <= math . MaxUint8 { // conversion is safe return uint8 ( n ), nil } return 0 , fmt . Errorf ( \"%d is out of the uint8 range\" , n ) } \u6216\u8005\u5b89\u5168\u5730\u4ece float64 \u8f6c\u6362\u4e3a int \uff1a func IntFromFloat64 ( x float64 ) int { if math . MinInt32 <= x && x <= math . MaxInt32 { // x lies in the integer range whole , fraction := math . Modf ( x ) if fraction >= 0.5 { whole ++ } return int ( whole ) } panic ( fmt . Sprintf ( \"%g is out of the int32 range\" , x )) } \u4e0d\u8fc7\u5982\u679c\u4f60\u5b9e\u9645\u5b58\u7684\u6570\u5b57\u8d85\u51fa\u4f60\u8981\u8f6c\u6362\u5230\u7684\u7c7b\u578b\u7684\u53d6\u503c\u8303\u56f4\u7684\u8bdd\uff0c\u5219\u4f1a\u5f15\u53d1 panic \uff08 \u7b2c 13.2 \u8282 \uff09\u3002 \u95ee\u9898 4.1 int \u548c int64 \u662f\u76f8\u540c\u7684\u7c7b\u578b\u5417\uff1f","title":"4.5.2.1 \u6574\u578b int \u548c\u6d6e\u70b9\u578b float"},{"location":"04.5/#4522","text":"Go \u62e5\u6709\u4ee5\u4e0b\u590d\u6570\u7c7b\u578b\uff1a complex64 (32 \u4f4d\u5b9e\u6570\u548c\u865a\u6570) complex128 (64 \u4f4d\u5b9e\u6570\u548c\u865a\u6570) \u590d\u6570\u4f7f\u7528 re+imI \u6765\u8868\u793a\uff0c\u5176\u4e2d re \u4ee3\u8868\u5b9e\u6570\u90e8\u5206\uff0c im \u4ee3\u8868\u865a\u6570\u90e8\u5206\uff0c I \u4ee3\u8868\u6839\u53f7\u8d1f 1\u3002 \u793a\u4f8b\uff1a var c1 complex64 = 5 + 10i fmt . Printf ( \"The value is: %v\" , c1 ) // \u8f93\u51fa\uff1a 5 + 10i \u5982\u679c re \u548c im \u7684\u7c7b\u578b\u5747\u4e3a float32 \uff0c\u90a3\u4e48\u7c7b\u578b\u4e3a complex64 \u7684\u590d\u6570 c \u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u6765\u83b7\u5f97\uff1a c = complex ( re , im ) \u51fd\u6570 real(c) \u548c imag(c) \u53ef\u4ee5\u5206\u522b\u83b7\u5f97\u76f8\u5e94\u7684\u5b9e\u6570\u548c\u865a\u6570\u90e8\u5206\u3002 \u5728\u4f7f\u7528\u683c\u5f0f\u5316\u8bf4\u660e\u7b26\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 %v \u6765\u8868\u793a\u590d\u6570\uff0c\u4f46\u5f53\u4f60\u5e0c\u671b\u53ea\u8868\u793a\u5176\u4e2d\u7684\u4e00\u4e2a\u90e8\u5206\u7684\u65f6\u5019\u9700\u8981\u4f7f\u7528 %f \u3002 \u590d\u6570\u652f\u6301\u548c\u5176\u5b83\u6570\u5b57\u7c7b\u578b\u4e00\u6837\u7684\u8fd0\u7b97\u3002\u5f53\u4f60\u4f7f\u7528\u7b49\u53f7 == \u6216\u8005\u4e0d\u7b49\u53f7 != \u5bf9\u590d\u6570\u8fdb\u884c\u6bd4\u8f83\u8fd0\u7b97\u65f6\uff0c\u6ce8\u610f\u5bf9\u7cbe\u786e\u5ea6\u7684\u628a\u63e1\u3002 cmath \u5305\u4e2d\u5305\u542b\u4e86\u4e00\u4e9b\u64cd\u4f5c\u590d\u6570\u7684\u516c\u5171\u65b9\u6cd5\u3002\u5982\u679c\u4f60\u5bf9\u5185\u5b58\u7684\u8981\u6c42\u4e0d\u662f\u7279\u522b\u9ad8\uff0c\u6700\u597d\u4f7f\u7528 complex128 \u4f5c\u4e3a\u8ba1\u7b97\u7c7b\u578b\uff0c\u56e0\u4e3a\u76f8\u5173\u51fd\u6570\u90fd\u4f7f\u7528\u8fd9\u4e2a\u7c7b\u578b\u7684\u53c2\u6570\u3002","title":"4.5.2.2 \u590d\u6570"},{"location":"04.5/#4523","text":"\u4f4d\u8fd0\u7b97\u53ea\u80fd\u7528\u4e8e\u6574\u6570\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u4e14\u9700\u5f53\u5b83\u4eec\u62e5\u6709\u7b49\u957f\u4f4d\u6a21\u5f0f\u65f6\u3002 %b \u662f\u7528\u4e8e\u8868\u793a\u4f4d\u7684\u683c\u5f0f\u5316\u6807\u8bc6\u7b26\u3002 \u4e8c\u5143\u8fd0\u7b97\u7b26 \u6309\u4f4d\u4e0e & \uff1a \u5bf9\u5e94\u4f4d\u7f6e\u4e0a\u7684\u503c\u7ecf\u8fc7\u548c\u8fd0\u7b97\u7ed3\u679c\uff0c\u5177\u4f53\u53c2\u89c1\u548c\u8fd0\u7b97\u7b26\uff08\u7b2c 4.5.1 \u8282\uff09\uff0c\u5e76\u5c06 T (true) \u66ff\u6362\u4e3a 1 \uff0c\u5c06 F (false) \u66ff\u6362\u4e3a 0 1 & 1 -> 1 1 & 0 -> 0 0 & 1 -> 0 0 & 0 -> 0 \u6309\u4f4d\u6216 | \uff1a \u5bf9\u5e94\u4f4d\u7f6e\u4e0a\u7684\u503c\u7ecf\u8fc7\u6216\u8fd0\u7b97\u7ed3\u679c\uff0c\u5177\u4f53\u53c2\u89c1\u6216\u8fd0\u7b97\u7b26\uff08\u7b2c 4.5.1 \u8282\uff09\uff0c\u5e76\u5c06 T (true) \u66ff\u6362\u4e3a 1 \uff0c\u5c06 F (false) \u66ff\u6362\u4e3a 0 1 | 1 -> 1 1 | 0 -> 1 0 | 1 -> 1 0 | 0 -> 0 \u6309\u4f4d\u5f02\u6216 ^ \uff1a \u5bf9\u5e94\u4f4d\u7f6e\u4e0a\u7684\u503c\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\u7ec4\u5408\uff1a 1 ^ 1 -> 0 1 ^ 0 -> 1 0 ^ 1 -> 1 0 ^ 0 -> 0 \u4f4d\u6e05\u9664 &^ \uff1a\u5c06\u6307\u5b9a\u4f4d\u7f6e\u4e0a\u7684\u503c\u8bbe\u7f6e\u4e3a 0 \u3002 package main import \"fmt\" func main () { var x uint8 = 15 var y uint8 = 4 fmt . Printf ( \"%08b\\n\" , x &^ y ); // 00001011 } \u4e00\u5143\u8fd0\u7b97\u7b26 \u6309\u4f4d\u8865\u8db3 ^ \uff1a \u8be5\u8fd0\u7b97\u7b26\u4e0e\u5f02\u6216\u8fd0\u7b97\u7b26\u4e00\u540c\u4f7f\u7528\uff0c\u5373 m^x \uff0c\u5bf9\u4e8e\u65e0\u7b26\u53f7 x \u4f7f\u7528 \u201c\u5168\u90e8\u4f4d\u8bbe\u7f6e\u4e3a 1\u201d \u7684\u89c4\u5219\uff0c\u5bf9\u4e8e\u6709\u7b26\u53f7 x \u65f6\u4f7f\u7528 m=-1 \u3002\u4f8b\u5982\uff1a ^10 = -01 ^ 10 = -11 \u4f4d\u5de6\u79fb << \uff1a \u7528\u6cd5\uff1a bitP << n \u3002 bitP \u7684\u4f4d\u5411\u5de6\u79fb\u52a8 n \u4f4d\uff0c\u53f3\u4fa7\u7a7a\u767d\u90e8\u5206\u4f7f\u7528 0 \u586b\u5145\uff1b\u5982\u679c n \u7b49\u4e8e 2\uff0c\u5219\u7ed3\u679c\u662f 2 \u7684\u76f8\u5e94\u500d\u6570\uff0c\u5373 2 \u7684 n \u6b21\u65b9\u3002\u4f8b\u5982\uff1a 1 << 10 // \u7b49\u4e8e 1 KB 1 << 20 // \u7b49\u4e8e 1 MB 1 << 30 // \u7b49\u4e8e 1 GB \u4f4d\u53f3\u79fb >> \uff1a \u7528\u6cd5\uff1a bitP >> n \u3002 bitP \u7684\u4f4d\u5411\u53f3\u79fb\u52a8 n \u4f4d\uff0c\u5de6\u4fa7\u7a7a\u767d\u90e8\u5206\u4f7f\u7528 0 \u586b\u5145\uff1b\u5982\u679c n \u7b49\u4e8e 2\uff0c\u5219\u7ed3\u679c\u662f\u5f53\u524d\u503c\u9664\u4ee5 2 \u7684 n \u6b21\u65b9\u3002 \u5f53\u5e0c\u671b\u628a\u7ed3\u679c\u8d4b\u503c\u7ed9\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u65f6\uff0c\u53ef\u4ee5\u7b80\u5199\u4e3a a <<= 2 \u6216\u8005 b ^= a & 0xffffffff \u3002 \u4f4d\u5de6\u79fb\u5e38\u89c1\u5b9e\u73b0\u5b58\u50a8\u5355\u4f4d\u7684\u7528\u4f8b \u4f7f\u7528\u4f4d\u5de6\u79fb\u4e0e iota \u8ba1\u6570\u914d\u5408\u53ef\u4f18\u96c5\u5730\u5b9e\u73b0\u5b58\u50a8\u5355\u4f4d\u7684\u5e38\u91cf\u679a\u4e3e\uff1a type ByteSize float64 const ( _ = iota // \u901a\u8fc7\u8d4b\u503c\u7ed9\u7a7a\u767d\u6807\u8bc6\u7b26\u6765\u5ffd\u7565\u503c KB ByteSize = 1 << ( 10 * iota ) MB GB TB PB EB ZB YB ) \u5728\u901a\u8baf\u4e2d\u4f7f\u7528\u4f4d\u5de6\u79fb\u8868\u793a\u6807\u8bc6\u7684\u7528\u4f8b type BitFlag int const ( Active BitFlag = 1 << iota // 1 << 0 == 1 Send // 1 << 1 == 2 Receive // 1 << 2 == 4 ) flag := Active | Send // == 3","title":"4.5.2.3 \u4f4d\u8fd0\u7b97"},{"location":"04.5/#4524","text":"Go \u4e2d\u62e5\u6709\u4ee5\u4e0b\u903b\u8f91\u8fd0\u7b97\u7b26\uff1a == \u3001 != \uff08\u7b2c 4.5.1 \u8282\uff09\u3001 < \u3001 <= \u3001 > \u3001 >= \u3002 \u5b83\u4eec\u4e4b\u6240\u4ee5\u88ab\u79f0\u4e3a\u903b\u8f91\u8fd0\u7b97\u7b26\u662f\u56e0\u4e3a\u5b83\u4eec\u7684\u8fd0\u7b97\u7ed3\u679c\u603b\u662f\u4e3a\u5e03\u5c14\u503c bool \u3002\u4f8b\u5982\uff1a b3 := 10 > 5 // b3 is true","title":"4.5.2.4 \u903b\u8f91\u8fd0\u7b97\u7b26"},{"location":"04.5/#4525","text":"\u5e38\u89c1\u53ef\u7528\u4e8e\u6574\u6570\u548c\u6d6e\u70b9\u6570\u7684\u4e8c\u5143\u8fd0\u7b97\u7b26\u6709 + \u3001 - \u3001 * \u548c / \u3002 \uff08\u76f8\u5bf9\u4e8e\u4e00\u822c\u89c4\u5219\u800c\u8a00\uff0cGo \u5728\u8fdb\u884c\u5b57\u7b26\u4e32\u62fc\u63a5\u65f6\u5141\u8bb8\u4f7f\u7528\u5bf9\u8fd0\u7b97\u7b26 + \u7684\u91cd\u8f7d\uff0c\u4f46 Go \u672c\u8eab\u4e0d\u5141\u8bb8\u5f00\u53d1\u8005\u8fdb\u884c\u81ea\u5b9a\u4e49\u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff09 / \u5bf9\u4e8e\u6574\u6570\u8fd0\u7b97\u800c\u8a00\uff0c\u7ed3\u679c\u4f9d\u65e7\u4e3a\u6574\u6570\uff0c\u4f8b\u5982\uff1a 9 / 4 -> 2 \u3002 \u53d6\u4f59\u8fd0\u7b97\u7b26\u53ea\u80fd\u4f5c\u7528\u4e8e\u6574\u6570\uff1a 9 % 4 -> 1 \u3002 \u6574\u6570\u9664\u4ee5 0 \u53ef\u80fd\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\uff0c\u5c06\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6\u7684\u6050\u614c\u72b6\u6001\uff08\u5982\u679c\u9664\u4ee5 0 \u7684\u884c\u4e3a\u5728\u7f16\u8bd1\u65f6\u5c31\u80fd\u88ab\u6355\u6349\u5230\uff0c\u5219\u4f1a\u5f15\u53d1\u7f16\u8bd1\u9519\u8bef\uff09\uff1b \u7b2c 13 \u7ae0 \u5c06\u4f1a\u8be6\u7ec6\u8bb2\u89e3\u5982\u4f55\u6b63\u786e\u5730\u5904\u7406\u6b64\u7c7b\u60c5\u51b5\u3002 \u6d6e\u70b9\u6570\u9664\u4ee5 0.0 \u4f1a\u8fd4\u56de\u4e00\u4e2a\u65e0\u7a77\u5c3d\u7684\u7ed3\u679c\uff0c\u4f7f\u7528 +Inf \u8868\u793a\u3002 \u7ec3\u4e60 4.4 \u5c1d\u8bd5\u7f16\u8bd1 divby0.go \u3002 \u4f60\u53ef\u4ee5\u5c06\u8bed\u53e5 b = b + a \u7b80\u5199\u4e3a b += a \uff0c\u540c\u6837\u7684\u5199\u6cd5\u4e5f\u53ef\u7528\u4e8e -= \u3001 *= \u3001 /= \u3001 %= \u3002 \u5bf9\u4e8e\u6574\u6570\u548c\u6d6e\u70b9\u6570\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u5143\u8fd0\u7b97\u7b26 ++ \uff08\u9012\u589e\uff09\u548c -- \uff08\u9012\u51cf\uff09\uff0c\u4f46\u53ea\u80fd\u7528\u4e8e\u540e\u7f00\uff1a i++ -> i += 1 -> i = i + 1 i-- -> i -= 1 -> i = i - 1 \u540c\u65f6\uff0c\u5e26\u6709 ++ \u548c -- \u7684\u53ea\u80fd\u4f5c\u4e3a\u8bed\u53e5\uff0c\u800c\u975e\u8868\u8fbe\u5f0f\uff0c\u56e0\u6b64 n = i++ \u8fd9\u79cd\u5199\u6cd5\u662f\u65e0\u6548\u7684\uff0c\u5176\u5b83\u50cf f(i++) \u6216\u8005 a[i]=b[i++] \u8fd9\u4e9b\u53ef\u4ee5\u7528\u4e8e C\u3001C++ \u548c Java \u4e2d\u7684\u5199\u6cd5\u5728 Go \u4e2d\u4e5f\u662f\u4e0d\u5141\u8bb8\u7684\u3002 \u5728\u8fd0\u7b97\u65f6 \u6ea2\u51fa \u4e0d\u4f1a\u4ea7\u751f\u9519\u8bef\uff0cGo \u4f1a\u7b80\u5355\u5730\u5c06\u8d85\u51fa\u4f4d\u6570\u629b\u5f03\u3002\u5982\u679c\u4f60\u9700\u8981\u8303\u56f4\u65e0\u9650\u5927\u7684\u6574\u6570\u6216\u8005\u6709\u7406\u6570\uff08\u610f\u5473\u7740\u53ea\u88ab\u9650\u5236\u4e8e\u8ba1\u7b97\u673a\u5185\u5b58\uff09\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u5e93\u4e2d\u7684 big \u5305\uff0c\u8be5\u5305\u63d0\u4f9b\u4e86\u7c7b\u4f3c big.Int \u548c big.Rat \u8fd9\u6837\u7684\u7c7b\u578b\uff08 \u7b2c 9.4 \u8282 \uff09\u3002","title":"4.5.2.5 \u7b97\u672f\u8fd0\u7b97\u7b26"},{"location":"04.5/#4526","text":"\u4e00\u4e9b\u50cf\u6e38\u620f\u6216\u8005\u7edf\u8ba1\u5b66\u7c7b\u7684\u5e94\u7528\u9700\u8981\u7528\u5230\u968f\u673a\u6570\u3002 rand \u5305\u5b9e\u73b0\u4e86\u4f2a\u968f\u673a\u6570\u7684\u751f\u6210\u3002 \u793a\u4f8b 4.10 random.go \u6f14\u793a\u4e86\u5982\u4f55\u751f\u6210 10 \u4e2a\u975e\u8d1f\u968f\u673a\u6570\uff1a package main import ( \"fmt\" \"math/rand\" \"time\" ) func main () { for i := 0 ; i < 10 ; i ++ { a := rand . Int () fmt . Printf ( \"%d / \" , a ) } for i := 0 ; i < 5 ; i ++ { r := rand . Intn ( 8 ) fmt . Printf ( \"%d / \" , r ) } fmt . Println () timens := int64 ( time . Now (). Nanosecond ()) rand . Seed ( timens ) for i := 0 ; i < 10 ; i ++ { fmt . Printf ( \"%2.2f / \" , 100 * rand . Float32 ()) } } \u53ef\u80fd\u7684\u8f93\u51fa\uff1a 816681689 / 1325201247 / 623951027 / 478285186 / 1654146165 / 1951252986 / 2029250107 / 762911244 / 1372544545 / 591415086 / / 3 / 0 / 6 / 4 / 2 /22.10 / 65.77 / 65.89 / 16.85 / 75.56 / 46.90 / 55.24 / 55.95 / 25.58 / 70.61 / \u51fd\u6570 rand.Float32 \u548c rand.Float64 \u8fd4\u56de\u4ecb\u4e8e \\([0.0, 1.0)\\) \u4e4b\u95f4\u7684\u4f2a\u968f\u673a\u6570\uff0c\u5176\u4e2d\u5305\u62ec 0.0 \u4f46\u4e0d\u5305\u62ec 1.0 \u3002\u51fd\u6570 rand.Intn \u8fd4\u56de\u4ecb\u4e8e \\([0, n)\\) \u4e4b\u95f4\u7684\u4f2a\u968f\u673a\u6570\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 rand.Seed(value) \u51fd\u6570\u6765\u63d0\u4f9b\u4f2a\u968f\u673a\u6570\u7684\u751f\u6210\u79cd\u5b50\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u4f1a\u4f7f\u7528\u5f53\u524d\u65f6\u95f4\u7684\u7eb3\u79d2\u7ea7\u6570\u5b57\uff08\u7b2c 4.8 \u8282\uff09\u3002","title":"4.5.2.6 \u968f\u673a\u6570"},{"location":"04.5/#453","text":"\u6709\u4e9b\u8fd0\u7b97\u7b26\u62e5\u6709\u8f83\u9ad8\u7684\u4f18\u5148\u7ea7\uff0c\u4e8c\u5143\u8fd0\u7b97\u7b26\u7684\u8fd0\u7b97\u65b9\u5411\u5747\u662f\u4ece\u5de6\u81f3\u53f3\u3002\u4e0b\u8868\u5217\u51fa\u4e86\u6240\u6709\u8fd0\u7b97\u7b26\u4ee5\u53ca\u5b83\u4eec\u7684\u4f18\u5148\u7ea7\uff0c\u7531\u4e0a\u81f3\u4e0b\u4ee3\u8868\u4f18\u5148\u7ea7\u7531\u9ad8\u5230\u4f4e\uff1a \u4f18\u5148\u7ea7 \u8fd0\u7b97\u7b26 7 ^ ! 6 * / % << >> & &^ 5 + - | ^ 4 == != < <= >= > 3 <- 2 && 1 || \u5f53\u7136\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u62ec\u53f7\u6765\u4e34\u65f6\u63d0\u5347\u67d0\u4e2a\u8868\u8fbe\u5f0f\u7684\u6574\u4f53\u8fd0\u7b97\u4f18\u5148\u7ea7\u3002","title":"4.5.3 \u8fd0\u7b97\u7b26\u4e0e\u4f18\u5148\u7ea7"},{"location":"04.5/#454","text":"\u5f53\u4f60\u5728\u4f7f\u7528\u67d0\u4e2a\u7c7b\u578b\u65f6\uff0c\u4f60\u53ef\u4ee5\u7ed9\u5b83\u8d77\u53e6\u4e00\u4e2a\u540d\u5b57\uff0c\u7136\u540e\u4f60\u5c31\u53ef\u4ee5\u5728\u4f60\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528\u65b0\u7684\u540d\u5b57\uff08\u7528\u4e8e\u7b80\u5316\u540d\u79f0\u6216\u89e3\u51b3\u540d\u79f0\u51b2\u7a81\uff09\u3002 \u5728 type TZ int \u4e2d\uff0c TZ \u5c31\u662f int \u7c7b\u578b\u7684\u65b0\u540d\u79f0\uff08\u7528\u4e8e\u8868\u793a\u7a0b\u5e8f\u4e2d\u7684\u65f6\u533a\uff09\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528 TZ \u6765\u64cd\u4f5c int \u7c7b\u578b\u7684\u6570\u636e\u3002 \u793a\u4f8b 4.11 type.go package main import \"fmt\" type TZ int func main () { var a , b TZ = 3 , 4 c := a + b fmt . Printf ( \"c has the value: %d\" , c ) // \u8f93\u51fa\uff1ac has the value: 7 } \u5b9e\u9645\u4e0a\uff0c\u7c7b\u578b\u522b\u540d\u5f97\u5230\u7684\u65b0\u7c7b\u578b\u5e76\u975e\u548c\u539f\u7c7b\u578b\u5b8c\u5168\u76f8\u540c\uff0c\u65b0\u7c7b\u578b\u4e0d\u4f1a\u62e5\u6709\u539f\u7c7b\u578b\u6240\u9644\u5e26\u7684\u65b9\u6cd5\uff08 \u7b2c 10 \u7ae0 \uff09\uff1b TZ \u53ef\u4ee5\u81ea\u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5\u7528\u6765\u8f93\u51fa\u66f4\u52a0\u4eba\u6027\u5316\u7684\u65f6\u533a\u4fe1\u606f\u3002 \u7ec3\u4e60 4.5 \u5b9a\u4e49\u4e00\u4e2a string \u7684\u7c7b\u578b\u522b\u540d Rope \uff0c\u5e76\u58f0\u660e\u4e00\u4e2a\u8be5\u7c7b\u578b\u7684\u53d8\u91cf\u3002","title":"4.5.4 \u7c7b\u578b\u522b\u540d"},{"location":"04.5/#455","text":"\u4e25\u683c\u6765\u8bf4\uff0c\u8fd9\u5e76\u4e0d\u662f Go \u8bed\u8a00\u7684\u4e00\u4e2a\u7c7b\u578b\uff0c\u5b57\u7b26\u53ea\u662f\u6574\u6570\u7684\u7279\u6b8a\u7528\u4f8b\u3002 byte \u7c7b\u578b\u662f uint8 \u7684\u522b\u540d\uff0c\u5bf9\u4e8e\u53ea\u5360\u7528 1 \u4e2a\u5b57\u8282\u7684\u4f20\u7edf ASCII \u7f16\u7801\u7684\u5b57\u7b26\u6765\u8bf4\uff0c\u5b8c\u5168\u6ca1\u6709\u95ee\u9898\u3002\u4f8b\u5982\uff1a var ch byte = 'A' \uff1b\u5b57\u7b26\u4f7f\u7528\u5355\u5f15\u53f7\u62ec\u8d77\u6765\u3002 \u5728 ASCII \u7801\u8868\u4e2d\uff0c 'A' \u7684\u503c\u662f 65 \uff0c\u800c\u4f7f\u7528 16 \u8fdb\u5236\u8868\u793a\u5219\u4e3a 41 \uff0c\u6240\u4ee5\u4e0b\u9762\u7684\u5199\u6cd5\u662f\u7b49\u6548\u7684\uff1a var ch byte = 65 \u6216 var ch byte = '\\x41' \uff08 \\x \u603b\u662f\u7d27\u8ddf\u7740\u957f\u5ea6\u4e3a 2 \u7684 16 \u8fdb\u5236\u6570\uff09 \u53e6\u5916\u4e00\u79cd\u53ef\u80fd\u7684\u5199\u6cd5\u662f \\ \u540e\u9762\u7d27\u8ddf\u7740\u957f\u5ea6\u4e3a 3 \u7684 8 \u8fdb\u5236\u6570\uff0c\u4f8b\u5982\uff1a \\377 \u3002 \u4e0d\u8fc7 Go \u540c\u6837\u652f\u6301 Unicode\uff08UTF-8\uff09\uff0c\u56e0\u6b64\u5b57\u7b26\u540c\u6837\u79f0\u4e3a Unicode \u4ee3\u7801\u70b9\u6216\u8005 runes\uff0c\u5e76\u5728\u5185\u5b58\u4e2d\u4f7f\u7528 int \u6765\u8868\u793a\u3002\u5728\u6587\u6863\u4e2d\uff0c\u4e00\u822c\u4f7f\u7528\u683c\u5f0f U+hhhh \u6765\u8868\u793a\uff0c\u5176\u4e2d h \u8868\u793a\u4e00\u4e2a 16 \u8fdb\u5236\u6570\u3002\u5176\u5b9e rune \u4e5f\u662f Go \u5f53\u4e2d\u7684\u4e00\u4e2a\u7c7b\u578b\uff0c\u5e76\u4e14\u662f int32 \u7684\u522b\u540d\u3002 \u5728\u4e66\u5199 Unicode \u5b57\u7b26\u65f6\uff0c\u9700\u8981\u5728 16 \u8fdb\u5236\u6570\u4e4b\u524d\u52a0\u4e0a\u524d\u7f00 \\u \u6216\u8005 \\U \u3002 \u56e0\u4e3a Unicode \u81f3\u5c11\u5360\u7528 2 \u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u6211\u4eec\u4f7f\u7528 int16 \u6216\u8005 int \u7c7b\u578b\u6765\u8868\u793a\u3002\u5982\u679c\u9700\u8981\u4f7f\u7528\u5230 4 \u5b57\u8282\uff0c\u5219\u4f1a\u52a0\u4e0a \\U \u524d\u7f00\uff1b\u524d\u7f00 \\u \u5219\u603b\u662f\u7d27\u8ddf\u7740\u957f\u5ea6\u4e3a 4 \u7684 16 \u8fdb\u5236\u6570\uff0c\u524d\u7f00 \\U \u7d27\u8ddf\u7740\u957f\u5ea6\u4e3a 8 \u7684 16 \u8fdb\u5236\u6570\u3002 \u793a\u4f8b 4.12 char.go var ch int = '\\u0041' var ch2 int = '\\u03B2' var ch3 int = '\\U00101234' fmt . Printf ( \"%d - %d - %d\\n\" , ch , ch2 , ch3 ) // integer fmt . Printf ( \"%c - %c - %c\\n\" , ch , ch2 , ch3 ) // character fmt . Printf ( \"%X - %X - %X\\n\" , ch , ch2 , ch3 ) // UTF-8 bytes fmt . Printf ( \"%U - %U - %U\" , ch , ch2 , ch3 ) // UTF-8 code point \u8f93\u51fa\uff1a 65 - 946 - 1053236 A - \u03b2 - r 41 - 3B2 - 101234 U+0041 - U+03B2 - U+101234 \u683c\u5f0f\u5316\u8bf4\u660e\u7b26 %c \u7528\u4e8e\u8868\u793a\u5b57\u7b26\uff1b\u5f53\u548c\u5b57\u7b26\u914d\u5408\u4f7f\u7528\u65f6\uff0c %v \u6216 %d \u4f1a\u8f93\u51fa\u7528\u4e8e\u8868\u793a\u8be5\u5b57\u7b26\u7684\u6574\u6570\uff1b %U \u8f93\u51fa\u683c\u5f0f\u4e3a U+hhhh \u7684\u5b57\u7b26\u4e32\uff08\u53e6\u4e00\u4e2a\u793a\u4f8b\u89c1 \u7b2c 5.4.4 \u8282 \uff09\u3002 \u5305 unicode \u5305\u542b\u4e86\u4e00\u4e9b\u9488\u5bf9\u6d4b\u8bd5\u5b57\u7b26\u7684\u975e\u5e38\u6709\u7528\u7684\u51fd\u6570\uff08\u5176\u4e2d ch \u4ee3\u8868\u5b57\u7b26\uff09\uff1a \u5224\u65ad\u662f\u5426\u4e3a\u5b57\u6bcd\uff1a unicode.IsLetter(ch) \u5224\u65ad\u662f\u5426\u4e3a\u6570\u5b57\uff1a unicode.IsDigit(ch) \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\u767d\u7b26\u53f7\uff1a unicode.IsSpace(ch) \u8fd9\u4e9b\u51fd\u6570\u8fd4\u56de\u5355\u4e2a\u5e03\u5c14\u503c\u3002\u5305 utf8 \u62e5\u6709\u66f4\u591a\u4e0e rune \u7c7b\u578b\u76f8\u5173\u7684\u51fd\u6570\u3002 \uff08 \u8bd1\u8005\u6ce8\uff1a\u5173\u4e8e\u7c7b\u578b\u7684\u76f8\u5173\u8bb2\u89e3\uff0c\u53ef\u53c2\u8003\u89c6\u9891\u6559\u7a0b \u300aGo\u7f16\u7a0b\u57fa\u7840\u300b \u7b2c 3 \u8bfe\uff1a \u7c7b\u578b\u4e0e\u53d8\u91cf \uff09","title":"4.5.5 \u5b57\u7b26\u7c7b\u578b"},{"location":"04.5/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u53d8\u91cf \u4e0b\u4e00\u8282\uff1a \u5b57\u7b26\u4e32","title":"\u94fe\u63a5"},{"location":"04.6/","text":"4.6 \u5b57\u7b26\u4e32 \u00b6 \u5b57\u7b26\u4e32\u662f UTF-8 \u5b57\u7b26\u7684\u4e00\u4e2a\u5e8f\u5217\uff08\u5f53\u5b57\u7b26\u4e3a ASCII \u7801\u65f6\u5219\u5360\u7528 1 \u4e2a\u5b57\u8282\uff0c\u5176\u5b83\u5b57\u7b26\u6839\u636e\u9700\u8981\u5360\u7528 2-4 \u4e2a\u5b57\u8282\uff09\u3002UTF-8 \u662f\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u7f16\u7801\u683c\u5f0f\uff0c\u662f\u6587\u672c\u6587\u4ef6\u7684\u6807\u51c6\u7f16\u7801\uff0c\u5176\u5b83\u5305\u62ec XML \u548c JSON \u5728\u5185\uff0c\u4e5f\u90fd\u4f7f\u7528\u8be5\u7f16\u7801\u3002\u7531\u4e8e\u8be5\u7f16\u7801\u5bf9\u5360\u7528\u5b57\u8282\u957f\u5ea6\u7684\u4e0d\u5b9a\u6027\uff0cGo \u4e2d\u7684\u5b57\u7b26\u4e32\u91cc\u9762\u7684\u5b57\u7b26\u4e5f\u53ef\u80fd\u6839\u636e\u9700\u8981\u5360\u7528 1 \u81f3 4 \u4e2a\u5b57\u8282\uff08\u793a\u4f8b\u89c1 \u7b2c 4.6 \u8282 \uff09\uff0c\u8fd9\u4e0e\u5176\u5b83\u8bed\u8a00\u5982 C++\u3001Java \u6216\u8005 Python \u4e0d\u540c\uff08Java \u59cb\u7ec8\u4f7f\u7528 2 \u4e2a\u5b57\u8282\uff09\u3002Go \u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\u4e0d\u4ec5\u51cf\u5c11\u4e86\u5185\u5b58\u548c\u786c\u76d8\u7a7a\u95f4\u5360\u7528\uff0c\u540c\u65f6\u4e5f\u4e0d\u7528\u50cf\u5176\u5b83\u8bed\u8a00\u90a3\u6837\u9700\u8981\u5bf9\u4f7f\u7528 UTF-8 \u5b57\u7b26\u96c6\u7684\u6587\u672c\u8fdb\u884c\u7f16\u7801\u548c\u89e3\u7801\u3002 \u5b57\u7b26\u4e32\u662f\u4e00\u79cd\u503c\u7c7b\u578b\uff0c\u4e14\u503c\u4e0d\u53ef\u53d8\uff0c\u5373\u521b\u5efa\u67d0\u4e2a\u6587\u672c\u540e\u4f60\u65e0\u6cd5\u518d\u6b21\u4fee\u6539\u8fd9\u4e2a\u6587\u672c\u7684\u5185\u5bb9\uff1b\u66f4\u6df1\u5165\u5730\u8bb2\uff0c\u5b57\u7b26\u4e32\u662f\u5b57\u8282\u7684\u5b9a\u957f\u6570\u7ec4\u3002 Go \u652f\u6301\u4ee5\u4e0b 2 \u79cd\u5f62\u5f0f\u7684\u5b57\u9762\u503c\uff1a \u89e3\u91ca\u5b57\u7b26\u4e32\uff1a \u8be5\u7c7b\u5b57\u7b26\u4e32\u4f7f\u7528\u53cc\u5f15\u53f7\u62ec\u8d77\u6765\uff0c\u5176\u4e2d\u7684\u76f8\u5173\u7684\u8f6c\u4e49\u5b57\u7b26\u5c06\u88ab\u66ff\u6362\uff0c\u8fd9\u4e9b\u8f6c\u4e49\u5b57\u7b26\u5305\u62ec\uff1a \\n \uff1a\u6362\u884c\u7b26 \\r \uff1a\u56de\u8f66\u7b26 \\t \uff1atab \u952e \\u \u6216 \\U \uff1aUnicode \u5b57\u7b26 \\\\ \uff1a\u53cd\u659c\u6760\u81ea\u8eab \u975e\u89e3\u91ca\u5b57\u7b26\u4e32\uff1a \u8be5\u7c7b\u5b57\u7b26\u4e32\u4f7f\u7528\u53cd\u5f15\u53f7\u62ec\u8d77\u6765\uff0c\u652f\u6301\u6362\u884c\uff0c\u4f8b\u5982\uff1a `This is a raw string \\n` \u4e2d\u7684 `\\n\\` \u4f1a\u88ab\u539f\u6837\u8f93\u51fa\u3002 \u548c C/C++\u4e0d\u4e00\u6837\uff0cGo \u4e2d\u7684\u5b57\u7b26\u4e32\u662f\u6839\u636e\u957f\u5ea6\u9650\u5b9a\uff0c\u800c\u975e\u7279\u6b8a\u5b57\u7b26 \\0 \u3002 string \u7c7b\u578b\u7684\u96f6\u503c\u4e3a\u957f\u5ea6\u4e3a\u96f6\u7684\u5b57\u7b26\u4e32\uff0c\u5373\u7a7a\u5b57\u7b26\u4e32 \"\" \u3002 \u4e00\u822c\u7684\u6bd4\u8f83\u8fd0\u7b97\u7b26\uff08 == \u3001 != \u3001 < \u3001 <= \u3001 >= \u3001 > \uff09\u901a\u8fc7\u5728\u5185\u5b58\u4e2d\u6309\u5b57\u8282\u6bd4\u8f83\u6765\u5b9e\u73b0\u5b57\u7b26\u4e32\u7684\u5bf9\u6bd4\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570 len() \u6765\u83b7\u53d6\u5b57\u7b26\u4e32\u6240\u5360\u7684\u5b57\u8282\u957f\u5ea6\uff0c\u4f8b\u5982\uff1a len(str) \u3002 \u5b57\u7b26\u4e32\u7684\u5185\u5bb9\uff08\u7eaf\u5b57\u8282\uff09\u53ef\u4ee5\u901a\u8fc7\u6807\u51c6\u7d22\u5f15\u6cd5\u6765\u83b7\u53d6\uff0c\u5728\u4e2d\u62ec\u53f7 [] \u5185\u5199\u5165\u7d22\u5f15\uff0c\u7d22\u5f15\u4ece 0 \u5f00\u59cb\u8ba1\u6570\uff1a \u5b57\u7b26\u4e32 str \u7684\u7b2c 1 \u4e2a\u5b57\u8282\uff1a str[0] \u7b2c i \u4e2a\u5b57\u8282\uff1a str[i - 1] \u6700\u540e 1 \u4e2a\u5b57\u8282\uff1a str[len(str)-1] \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u79cd\u8f6c\u6362\u65b9\u6848\u53ea\u5bf9\u7eaf ASCII \u7801\u7684\u5b57\u7b26\u4e32\u6709\u6548\u3002 \u6ce8\u610f\u4e8b\u9879 \u83b7\u53d6\u5b57\u7b26\u4e32\u4e2d\u67d0\u4e2a\u5b57\u8282\u7684\u5730\u5740\u7684\u884c\u4e3a\u662f\u975e\u6cd5\u7684\uff0c\u4f8b\u5982\uff1a &str[i] \u3002 \u5b57\u7b26\u4e32\u62fc\u63a5\u7b26 + \u4e24\u4e2a\u5b57\u7b26\u4e32 s1 \u548c s2 \u53ef\u4ee5\u901a\u8fc7 s := s1 + s2 \u62fc\u63a5\u5728\u4e00\u8d77\u3002 s2 \u8ffd\u52a0\u5728 s1 \u5c3e\u90e8\u5e76\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32 s \u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u6765\u5bf9\u4ee3\u7801\u4e2d\u591a\u884c\u7684\u5b57\u7b26\u4e32\u8fdb\u884c\u62fc\u63a5\uff1a str := \"Beginning of the string \" + \"second part of the string\" \u7531\u4e8e\u7f16\u8bd1\u5668\u884c\u5c3e\u81ea\u52a8\u8865\u5168\u5206\u53f7\u7684\u7f18\u6545\uff0c\u52a0\u53f7 + \u5fc5\u987b\u653e\u5728\u7b2c\u4e00\u884c\u3002 \u62fc\u63a5\u7684\u7b80\u5199\u5f62\u5f0f += \u4e5f\u53ef\u4ee5\u7528\u4e8e\u5b57\u7b26\u4e32\uff1a s := \"hel\" + \"lo,\" s += \"world!\" fmt . Println ( s ) //\u8f93\u51fa \u201chello, world!\u201d \u5728\u5faa\u73af\u4e2d\u4f7f\u7528\u52a0\u53f7 + \u62fc\u63a5\u5b57\u7b26\u4e32\u5e76\u4e0d\u662f\u6700\u9ad8\u6548\u7684\u505a\u6cd5\uff0c\u66f4\u597d\u7684\u529e\u6cd5\u662f\u4f7f\u7528\u51fd\u6570 strings.Join() \uff08 \u7b2c 4.7.10 \u8282 \uff09\uff0c\u6709\u6ca1\u6709\u66f4\u597d\u7684\u529e\u6cd5\u4e86\uff1f\u6709\uff01\u4f7f\u7528\u5b57\u8282\u7f13\u51b2\uff08 bytes.Buffer \uff09\u62fc\u63a5\u66f4\u52a0\u7ed9\u529b\uff08 \u7b2c 7.2.6 \u8282 \uff09\uff01 \u5728 \u7b2c 7 \u7ae0 \uff0c\u6211\u4eec\u4f1a\u8bb2\u5230\u901a\u8fc7\u5c06\u5b57\u7b26\u4e32\u770b\u4f5c\u662f\u5b57\u8282 ( byte ) \u7684\u5207\u7247 (slice) \u6765\u5b9e\u73b0\u5bf9\u5176\u6807\u51c6\u7d22\u5f15\u6cd5\u7684\u64cd\u4f5c\u3002\u4f1a\u5728 \u7b2c 5.4.1 \u8282 \u4e2d\u8bb2\u5230\u7684 for \u5faa\u73af\u53ea\u4f1a\u6839\u636e\u7d22\u5f15\u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d\u7684\u7eaf\u5b57\u8282\uff0c\u800c\u5728 \u7b2c 5.4.4 \u8282 \uff08\u4ee5\u53ca \u7b2c 7.6.1 \u8282 \u7684\u793a\u4f8b\uff09\u5c06\u4f1a\u5c55\u793a\u5982\u4f55\u4f7f\u7528 for-range \u5faa\u73af\u6765\u5b9e\u73b0\u5bf9 Unicode \u5b57\u7b26\u4e32\u7684\u8fed\u4ee3\u64cd\u4f5c\u3002\u5728\u4e0b\u4e00\u8282\uff0c\u6211\u4eec\u4f1a\u5b66\u4e60\u5230\u8bb8\u591a\u6709\u5173\u5b57\u7b26\u4e32\u64cd\u4f5c\u7684\u51fd\u6570\u548c\u65b9\u6cd5\uff0c\u540c\u65f6 fmt \u5305\u4e2d\u7684 fmt.Sprint(x) \u4e5f\u53ef\u4ee5\u683c\u5f0f\u5316\u751f\u6210\u5e76\u8fd4\u56de\u4f60\u6240\u9700\u8981\u7684\u5b57\u7b26\u4e32\uff08 \u7b2c 4.4.3 \u8282 \uff09\u3002 \u7ec3\u4e60 4.6 count_characters.go \u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u7edf\u8ba1\u5b57\u8282\u548c\u5b57\u7b26 (rune) \u7684\u7a0b\u5e8f\uff0c\u5e76\u5bf9\u5b57\u7b26\u4e32 asSASA ddd dsjkdsjs dk \u8fdb\u884c\u5206\u6790\uff0c\u7136\u540e\u518d\u5206\u6790 asSASA ddd dsjkdsjs\u3053\u3093 dk \uff0c\u6700\u540e\u89e3\u91ca\u4e24\u8005\u4e0d\u540c\u7684\u539f\u56e0\uff08\u63d0\u793a\uff1a\u4f7f\u7528 unicode/utf8 \u5305\uff09\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u57fa\u672c\u7c7b\u578b\u548c\u8fd0\u7b97\u7b26 \u4e0b\u4e00\u8282\uff1a strings \u548c strconv \u5305","title":"4.6 \u5b57\u7b26\u4e32"},{"location":"04.6/#46","text":"\u5b57\u7b26\u4e32\u662f UTF-8 \u5b57\u7b26\u7684\u4e00\u4e2a\u5e8f\u5217\uff08\u5f53\u5b57\u7b26\u4e3a ASCII \u7801\u65f6\u5219\u5360\u7528 1 \u4e2a\u5b57\u8282\uff0c\u5176\u5b83\u5b57\u7b26\u6839\u636e\u9700\u8981\u5360\u7528 2-4 \u4e2a\u5b57\u8282\uff09\u3002UTF-8 \u662f\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u7f16\u7801\u683c\u5f0f\uff0c\u662f\u6587\u672c\u6587\u4ef6\u7684\u6807\u51c6\u7f16\u7801\uff0c\u5176\u5b83\u5305\u62ec XML \u548c JSON \u5728\u5185\uff0c\u4e5f\u90fd\u4f7f\u7528\u8be5\u7f16\u7801\u3002\u7531\u4e8e\u8be5\u7f16\u7801\u5bf9\u5360\u7528\u5b57\u8282\u957f\u5ea6\u7684\u4e0d\u5b9a\u6027\uff0cGo \u4e2d\u7684\u5b57\u7b26\u4e32\u91cc\u9762\u7684\u5b57\u7b26\u4e5f\u53ef\u80fd\u6839\u636e\u9700\u8981\u5360\u7528 1 \u81f3 4 \u4e2a\u5b57\u8282\uff08\u793a\u4f8b\u89c1 \u7b2c 4.6 \u8282 \uff09\uff0c\u8fd9\u4e0e\u5176\u5b83\u8bed\u8a00\u5982 C++\u3001Java \u6216\u8005 Python \u4e0d\u540c\uff08Java \u59cb\u7ec8\u4f7f\u7528 2 \u4e2a\u5b57\u8282\uff09\u3002Go \u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\u4e0d\u4ec5\u51cf\u5c11\u4e86\u5185\u5b58\u548c\u786c\u76d8\u7a7a\u95f4\u5360\u7528\uff0c\u540c\u65f6\u4e5f\u4e0d\u7528\u50cf\u5176\u5b83\u8bed\u8a00\u90a3\u6837\u9700\u8981\u5bf9\u4f7f\u7528 UTF-8 \u5b57\u7b26\u96c6\u7684\u6587\u672c\u8fdb\u884c\u7f16\u7801\u548c\u89e3\u7801\u3002 \u5b57\u7b26\u4e32\u662f\u4e00\u79cd\u503c\u7c7b\u578b\uff0c\u4e14\u503c\u4e0d\u53ef\u53d8\uff0c\u5373\u521b\u5efa\u67d0\u4e2a\u6587\u672c\u540e\u4f60\u65e0\u6cd5\u518d\u6b21\u4fee\u6539\u8fd9\u4e2a\u6587\u672c\u7684\u5185\u5bb9\uff1b\u66f4\u6df1\u5165\u5730\u8bb2\uff0c\u5b57\u7b26\u4e32\u662f\u5b57\u8282\u7684\u5b9a\u957f\u6570\u7ec4\u3002 Go \u652f\u6301\u4ee5\u4e0b 2 \u79cd\u5f62\u5f0f\u7684\u5b57\u9762\u503c\uff1a \u89e3\u91ca\u5b57\u7b26\u4e32\uff1a \u8be5\u7c7b\u5b57\u7b26\u4e32\u4f7f\u7528\u53cc\u5f15\u53f7\u62ec\u8d77\u6765\uff0c\u5176\u4e2d\u7684\u76f8\u5173\u7684\u8f6c\u4e49\u5b57\u7b26\u5c06\u88ab\u66ff\u6362\uff0c\u8fd9\u4e9b\u8f6c\u4e49\u5b57\u7b26\u5305\u62ec\uff1a \\n \uff1a\u6362\u884c\u7b26 \\r \uff1a\u56de\u8f66\u7b26 \\t \uff1atab \u952e \\u \u6216 \\U \uff1aUnicode \u5b57\u7b26 \\\\ \uff1a\u53cd\u659c\u6760\u81ea\u8eab \u975e\u89e3\u91ca\u5b57\u7b26\u4e32\uff1a \u8be5\u7c7b\u5b57\u7b26\u4e32\u4f7f\u7528\u53cd\u5f15\u53f7\u62ec\u8d77\u6765\uff0c\u652f\u6301\u6362\u884c\uff0c\u4f8b\u5982\uff1a `This is a raw string \\n` \u4e2d\u7684 `\\n\\` \u4f1a\u88ab\u539f\u6837\u8f93\u51fa\u3002 \u548c C/C++\u4e0d\u4e00\u6837\uff0cGo \u4e2d\u7684\u5b57\u7b26\u4e32\u662f\u6839\u636e\u957f\u5ea6\u9650\u5b9a\uff0c\u800c\u975e\u7279\u6b8a\u5b57\u7b26 \\0 \u3002 string \u7c7b\u578b\u7684\u96f6\u503c\u4e3a\u957f\u5ea6\u4e3a\u96f6\u7684\u5b57\u7b26\u4e32\uff0c\u5373\u7a7a\u5b57\u7b26\u4e32 \"\" \u3002 \u4e00\u822c\u7684\u6bd4\u8f83\u8fd0\u7b97\u7b26\uff08 == \u3001 != \u3001 < \u3001 <= \u3001 >= \u3001 > \uff09\u901a\u8fc7\u5728\u5185\u5b58\u4e2d\u6309\u5b57\u8282\u6bd4\u8f83\u6765\u5b9e\u73b0\u5b57\u7b26\u4e32\u7684\u5bf9\u6bd4\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570 len() \u6765\u83b7\u53d6\u5b57\u7b26\u4e32\u6240\u5360\u7684\u5b57\u8282\u957f\u5ea6\uff0c\u4f8b\u5982\uff1a len(str) \u3002 \u5b57\u7b26\u4e32\u7684\u5185\u5bb9\uff08\u7eaf\u5b57\u8282\uff09\u53ef\u4ee5\u901a\u8fc7\u6807\u51c6\u7d22\u5f15\u6cd5\u6765\u83b7\u53d6\uff0c\u5728\u4e2d\u62ec\u53f7 [] \u5185\u5199\u5165\u7d22\u5f15\uff0c\u7d22\u5f15\u4ece 0 \u5f00\u59cb\u8ba1\u6570\uff1a \u5b57\u7b26\u4e32 str \u7684\u7b2c 1 \u4e2a\u5b57\u8282\uff1a str[0] \u7b2c i \u4e2a\u5b57\u8282\uff1a str[i - 1] \u6700\u540e 1 \u4e2a\u5b57\u8282\uff1a str[len(str)-1] \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u79cd\u8f6c\u6362\u65b9\u6848\u53ea\u5bf9\u7eaf ASCII \u7801\u7684\u5b57\u7b26\u4e32\u6709\u6548\u3002 \u6ce8\u610f\u4e8b\u9879 \u83b7\u53d6\u5b57\u7b26\u4e32\u4e2d\u67d0\u4e2a\u5b57\u8282\u7684\u5730\u5740\u7684\u884c\u4e3a\u662f\u975e\u6cd5\u7684\uff0c\u4f8b\u5982\uff1a &str[i] \u3002 \u5b57\u7b26\u4e32\u62fc\u63a5\u7b26 + \u4e24\u4e2a\u5b57\u7b26\u4e32 s1 \u548c s2 \u53ef\u4ee5\u901a\u8fc7 s := s1 + s2 \u62fc\u63a5\u5728\u4e00\u8d77\u3002 s2 \u8ffd\u52a0\u5728 s1 \u5c3e\u90e8\u5e76\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32 s \u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u6765\u5bf9\u4ee3\u7801\u4e2d\u591a\u884c\u7684\u5b57\u7b26\u4e32\u8fdb\u884c\u62fc\u63a5\uff1a str := \"Beginning of the string \" + \"second part of the string\" \u7531\u4e8e\u7f16\u8bd1\u5668\u884c\u5c3e\u81ea\u52a8\u8865\u5168\u5206\u53f7\u7684\u7f18\u6545\uff0c\u52a0\u53f7 + \u5fc5\u987b\u653e\u5728\u7b2c\u4e00\u884c\u3002 \u62fc\u63a5\u7684\u7b80\u5199\u5f62\u5f0f += \u4e5f\u53ef\u4ee5\u7528\u4e8e\u5b57\u7b26\u4e32\uff1a s := \"hel\" + \"lo,\" s += \"world!\" fmt . Println ( s ) //\u8f93\u51fa \u201chello, world!\u201d \u5728\u5faa\u73af\u4e2d\u4f7f\u7528\u52a0\u53f7 + \u62fc\u63a5\u5b57\u7b26\u4e32\u5e76\u4e0d\u662f\u6700\u9ad8\u6548\u7684\u505a\u6cd5\uff0c\u66f4\u597d\u7684\u529e\u6cd5\u662f\u4f7f\u7528\u51fd\u6570 strings.Join() \uff08 \u7b2c 4.7.10 \u8282 \uff09\uff0c\u6709\u6ca1\u6709\u66f4\u597d\u7684\u529e\u6cd5\u4e86\uff1f\u6709\uff01\u4f7f\u7528\u5b57\u8282\u7f13\u51b2\uff08 bytes.Buffer \uff09\u62fc\u63a5\u66f4\u52a0\u7ed9\u529b\uff08 \u7b2c 7.2.6 \u8282 \uff09\uff01 \u5728 \u7b2c 7 \u7ae0 \uff0c\u6211\u4eec\u4f1a\u8bb2\u5230\u901a\u8fc7\u5c06\u5b57\u7b26\u4e32\u770b\u4f5c\u662f\u5b57\u8282 ( byte ) \u7684\u5207\u7247 (slice) \u6765\u5b9e\u73b0\u5bf9\u5176\u6807\u51c6\u7d22\u5f15\u6cd5\u7684\u64cd\u4f5c\u3002\u4f1a\u5728 \u7b2c 5.4.1 \u8282 \u4e2d\u8bb2\u5230\u7684 for \u5faa\u73af\u53ea\u4f1a\u6839\u636e\u7d22\u5f15\u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d\u7684\u7eaf\u5b57\u8282\uff0c\u800c\u5728 \u7b2c 5.4.4 \u8282 \uff08\u4ee5\u53ca \u7b2c 7.6.1 \u8282 \u7684\u793a\u4f8b\uff09\u5c06\u4f1a\u5c55\u793a\u5982\u4f55\u4f7f\u7528 for-range \u5faa\u73af\u6765\u5b9e\u73b0\u5bf9 Unicode \u5b57\u7b26\u4e32\u7684\u8fed\u4ee3\u64cd\u4f5c\u3002\u5728\u4e0b\u4e00\u8282\uff0c\u6211\u4eec\u4f1a\u5b66\u4e60\u5230\u8bb8\u591a\u6709\u5173\u5b57\u7b26\u4e32\u64cd\u4f5c\u7684\u51fd\u6570\u548c\u65b9\u6cd5\uff0c\u540c\u65f6 fmt \u5305\u4e2d\u7684 fmt.Sprint(x) \u4e5f\u53ef\u4ee5\u683c\u5f0f\u5316\u751f\u6210\u5e76\u8fd4\u56de\u4f60\u6240\u9700\u8981\u7684\u5b57\u7b26\u4e32\uff08 \u7b2c 4.4.3 \u8282 \uff09\u3002 \u7ec3\u4e60 4.6 count_characters.go \u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u7edf\u8ba1\u5b57\u8282\u548c\u5b57\u7b26 (rune) \u7684\u7a0b\u5e8f\uff0c\u5e76\u5bf9\u5b57\u7b26\u4e32 asSASA ddd dsjkdsjs dk \u8fdb\u884c\u5206\u6790\uff0c\u7136\u540e\u518d\u5206\u6790 asSASA ddd dsjkdsjs\u3053\u3093 dk \uff0c\u6700\u540e\u89e3\u91ca\u4e24\u8005\u4e0d\u540c\u7684\u539f\u56e0\uff08\u63d0\u793a\uff1a\u4f7f\u7528 unicode/utf8 \u5305\uff09\u3002","title":"4.6 \u5b57\u7b26\u4e32"},{"location":"04.6/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u57fa\u672c\u7c7b\u578b\u548c\u8fd0\u7b97\u7b26 \u4e0b\u4e00\u8282\uff1a strings \u548c strconv \u5305","title":"\u94fe\u63a5"},{"location":"04.7/","text":"4.7 strings \u548c strconv \u5305 \u00b6 \u4f5c\u4e3a\u4e00\u79cd\u57fa\u672c\u6570\u636e\u7ed3\u6784\uff0c\u6bcf\u79cd\u8bed\u8a00\u90fd\u6709\u4e00\u4e9b\u5bf9\u4e8e\u5b57\u7b26\u4e32\u7684\u9884\u5b9a\u4e49\u5904\u7406\u51fd\u6570\u3002Go \u4e2d\u4f7f\u7528 strings \u5305\u6765\u5b8c\u6210\u5bf9\u5b57\u7b26\u4e32\u7684\u4e3b\u8981\u64cd\u4f5c\u3002 4.7.1 \u524d\u7f00\u548c\u540e\u7f00 \u00b6 HasPrefix() \u5224\u65ad\u5b57\u7b26\u4e32 s \u662f\u5426\u4ee5 prefix \u5f00\u5934\uff1a strings . HasPrefix ( s , prefix string ) bool HasSuffix() \u5224\u65ad\u5b57\u7b26\u4e32 s \u662f\u5426\u4ee5 suffix \u7ed3\u5c3e\uff1a strings . HasSuffix ( s , suffix string ) bool \u793a\u4f8b 4.13 presuffix.go package main import ( \"fmt\" \"strings\" ) func main () { var str string = \"This is an example of a string\" fmt . Printf ( \"T/F? Does the string \\\"%s\\\" have prefix %s? \" , str , \"Th\" ) fmt . Printf ( \"%t\\n\" , strings . HasPrefix ( str , \"Th\" )) } \u8f93\u51fa\uff1a T/F? Does the string \"This is an example of a string\" have prefix Th? true \u8fd9\u4e2a\u4f8b\u5b50\u540c\u6837\u6f14\u793a\u4e86\u8f6c\u4e49\u5b57\u7b26 \\ \u548c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4f7f\u7528\u3002 4.7.2 \u5b57\u7b26\u4e32\u5305\u542b\u5173\u7cfb \u00b6 Contains() \u5224\u65ad\u5b57\u7b26\u4e32 s \u662f\u5426\u5305\u542b substr \uff1a strings . Contains ( s , substr string ) bool 4.7.3 \u5224\u65ad\u5b50\u5b57\u7b26\u4e32\u6216\u5b57\u7b26\u5728\u7236\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u7684\u4f4d\u7f6e\uff08\u7d22\u5f15\uff09 \u00b6 Index() \u8fd4\u56de\u5b57\u7b26\u4e32 str \u5728\u5b57\u7b26\u4e32 s \u4e2d\u7684\u7d22\u5f15\uff08 str \u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\uff09\uff0c -1 \u8868\u793a\u5b57\u7b26\u4e32 s \u4e0d\u5305\u542b\u5b57\u7b26\u4e32 str \uff1a strings . Index ( s , str string ) int LastIndex() \u8fd4\u56de\u5b57\u7b26\u4e32 str \u5728\u5b57\u7b26\u4e32 s \u4e2d\u6700\u540e\u51fa\u73b0\u4f4d\u7f6e\u7684\u7d22\u5f15\uff08 str \u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\uff09\uff0c -1 \u8868\u793a\u5b57\u7b26\u4e32 s \u4e0d\u5305\u542b\u5b57\u7b26\u4e32 str \uff1a strings . LastIndex ( s , str string ) int \u5982\u679c\u9700\u8981\u67e5\u8be2\u975e ASCII \u7f16\u7801\u7684\u5b57\u7b26\u5728\u7236\u5b57\u7b26\u4e32\u4e2d\u7684\u4f4d\u7f6e\uff0c\u5efa\u8bae\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\u6765\u5bf9\u5b57\u7b26\u8fdb\u884c\u5b9a\u4f4d\uff1a strings . IndexRune ( s string , r rune ) int \u6ce8: \u539f\u6587\u4e3a \"If ch is a non-ASCII character use strings.IndexRune(s string, ch int) int.\" \u8be5\u65b9\u6cd5\u5728\u6700\u65b0\u7248\u672c\u7684 Go \u4e2d\u5b9a\u4e49\u4e3a func IndexRune(s string, r rune) int \u5b9e\u9645\u4f7f\u7528\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570 rune \u53ef\u4ee5\u662f rune \u6216 int, \u4f8b\u5982 strings.IndexRune(\"chicken\", 99) \u6216 strings.IndexRune(\"chicken\", rune('k')) \u793a\u4f8b 4.14 index_in_string.go package main import ( \"fmt\" \"strings\" ) func main () { var str string = \"Hi, I'm Marc, Hi.\" fmt . Printf ( \"The position of \\\"Marc\\\" is: \" ) fmt . Printf ( \"%d\\n\" , strings . Index ( str , \"Marc\" )) fmt . Printf ( \"The position of the first instance of \\\"Hi\\\" is: \" ) fmt . Printf ( \"%d\\n\" , strings . Index ( str , \"Hi\" )) fmt . Printf ( \"The position of the last instance of \\\"Hi\\\" is: \" ) fmt . Printf ( \"%d\\n\" , strings . LastIndex ( str , \"Hi\" )) fmt . Printf ( \"The position of \\\"Burger\\\" is: \" ) fmt . Printf ( \"%d\\n\" , strings . Index ( str , \"Burger\" )) } \u8f93\u51fa\uff1a The position of \"Marc\" is: 8 The position of the first instance of \"Hi\" is: 0 The position of the last instance of \"Hi\" is: 14 The position of \"Burger\" is: -1 4.7.4 \u5b57\u7b26\u4e32\u66ff\u6362 \u00b6 Replace() \u7528\u4e8e\u5c06\u5b57\u7b26\u4e32 str \u4e2d\u7684\u524d n \u4e2a\u5b57\u7b26\u4e32 old \u66ff\u6362\u4e3a\u5b57\u7b26\u4e32 new \uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u5982\u679c n = -1 \u5219\u66ff\u6362\u6240\u6709\u5b57\u7b26\u4e32 old \u4e3a\u5b57\u7b26\u4e32 new \uff1a strings . Replace ( str , old , new string , n int ) string 4.7.5 \u7edf\u8ba1\u5b57\u7b26\u4e32\u51fa\u73b0\u6b21\u6570 \u00b6 Count() \u7528\u4e8e\u8ba1\u7b97\u5b57\u7b26\u4e32 str \u5728\u5b57\u7b26\u4e32 s \u4e2d\u51fa\u73b0\u7684\u975e\u91cd\u53e0\u6b21\u6570\uff1a strings . Count ( s , str string ) int \u793a\u4f8b 4.15 count_substring.go package main import ( \"fmt\" \"strings\" ) func main () { var str string = \"Hello, how is it going, Hugo?\" var manyG = \"gggggggggg\" fmt . Printf ( \"Number of H's in %s is: \" , str ) fmt . Printf ( \"%d\\n\" , strings . Count ( str , \"H\" )) fmt . Printf ( \"Number of double g's in %s is: \" , manyG ) fmt . Printf ( \"%d\\n\" , strings . Count ( manyG , \"gg\" )) } \u8f93\u51fa\uff1a Number of H's in Hello, how is it going, Hugo? is: 2 Number of double g\u2019s in gggggggggg is: 5 4.7.6 \u91cd\u590d\u5b57\u7b26\u4e32 \u00b6 Repeat() \u7528\u4e8e\u91cd\u590d count \u6b21\u5b57\u7b26\u4e32 s \u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff1a strings . Repeat ( s , count int ) string \u793a\u4f8b 4.16 repeat_string.go package main import ( \"fmt\" \"strings\" ) func main () { var origS string = \"Hi there! \" var newS string newS = strings . Repeat ( origS , 3 ) fmt . Printf ( \"The new repeated string is: %s\\n\" , newS ) } \u8f93\u51fa\uff1a The new repeated string is: Hi there! Hi there! Hi there! 4.7.7 \u4fee\u6539\u5b57\u7b26\u4e32\u5927\u5c0f\u5199 \u00b6 ToLower() \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684 Unicode \u5b57\u7b26\u5168\u90e8\u8f6c\u6362\u4e3a\u76f8\u5e94\u7684\u5c0f\u5199\u5b57\u7b26\uff1a strings . ToLower ( s ) string ToUpper() \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684 Unicode \u5b57\u7b26\u5168\u90e8\u8f6c\u6362\u4e3a\u76f8\u5e94\u7684\u5927\u5199\u5b57\u7b26\uff1a strings . ToUpper ( s ) string \u793a\u4f8b 4.17 toupper_lower.go package main import ( \"fmt\" \"strings\" ) func main () { var orig string = \"Hey, how are you George?\" var lower string var upper string fmt . Printf ( \"The original string is: %s\\n\" , orig ) lower = strings . ToLower ( orig ) fmt . Printf ( \"The lowercase string is: %s\\n\" , lower ) upper = strings . ToUpper ( orig ) fmt . Printf ( \"The uppercase string is: %s\\n\" , upper ) } \u8f93\u51fa\uff1a The original string is: Hey, how are you George? The lowercase string is: hey, how are you george? The uppercase string is: HEY, HOW ARE YOU GEORGE? 4.7.8 \u4fee\u526a\u5b57\u7b26\u4e32 \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528 strings.TrimSpace(s) \u6765\u5254\u9664\u5b57\u7b26\u4e32\u5f00\u5934\u548c\u7ed3\u5c3e\u7684\u7a7a\u767d\u7b26\u53f7\uff1b\u5982\u679c\u4f60\u60f3\u8981\u5254\u9664\u6307\u5b9a\u5b57\u7b26\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 strings.Trim(s, \"cut\") \u6765\u5c06\u5f00\u5934\u548c\u7ed3\u5c3e\u7684 cut \u53bb\u9664\u6389\u3002\u8be5\u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u53ef\u4ee5\u5305\u542b\u4efb\u4f55\u5b57\u7b26\uff0c\u5982\u679c\u4f60\u53ea\u60f3\u5254\u9664\u5f00\u5934\u6216\u8005\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 TrimLeft() \u6216\u8005 TrimRight() \u6765\u5b9e\u73b0\u3002 4.7.9 \u5206\u5272\u5b57\u7b26\u4e32 \u00b6 strings.Fields(s) \u5c06\u4f1a\u5229\u7528 1 \u4e2a\u6216\u591a\u4e2a\u7a7a\u767d\u7b26\u53f7\u6765\u4f5c\u4e3a\u52a8\u6001\u957f\u5ea6\u7684\u5206\u9694\u7b26\u5c06\u5b57\u7b26\u4e32\u5206\u5272\u6210\u82e5\u5e72\u5c0f\u5757\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a slice\uff0c\u5982\u679c\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u7a7a\u767d\u7b26\u53f7\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u957f\u5ea6\u4e3a 0 \u7684 slice\u3002 strings.Split(s, sep) \u7528\u4e8e\u81ea\u5b9a\u4e49\u5206\u5272\u7b26\u53f7\u6765\u5bf9\u6307\u5b9a\u5b57\u7b26\u4e32\u8fdb\u884c\u5206\u5272\uff0c\u540c\u6837\u8fd4\u56de slice\u3002 \u56e0\u4e3a\u8fd9 2 \u4e2a\u51fd\u6570\u90fd\u4f1a\u8fd4\u56de slice\uff0c\u6240\u4ee5\u4e60\u60ef\u4f7f\u7528 for-range \u5faa\u73af\u6765\u5bf9\u5176\u8fdb\u884c\u5904\u7406\uff08\u7b2c 7.3 \u8282\uff09\u3002 4.7.10 \u62fc\u63a5 slice \u5230\u5b57\u7b26\u4e32 \u00b6 Join() \u7528\u4e8e\u5c06\u5143\u7d20\u7c7b\u578b\u4e3a string \u7684 slice \u4f7f\u7528\u5206\u5272\u7b26\u53f7\u6765\u62fc\u63a5\u7ec4\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\uff1a strings . Join ( sl [] string , sep string ) string \u793a\u4f8b 4.18 strings_splitjoin.go package main import ( \"fmt\" \"strings\" ) func main () { str := \"The quick brown fox jumps over the lazy dog\" sl := strings . Fields ( str ) fmt . Printf ( \"Splitted in slice: %v\\n\" , sl ) for _ , val := range sl { fmt . Printf ( \"%s - \" , val ) } fmt . Println () str2 := \"GO1|The ABC of Go|25\" sl2 := strings . Split ( str2 , \"|\" ) fmt . Printf ( \"Splitted in slice: %v\\n\" , sl2 ) for _ , val := range sl2 { fmt . Printf ( \"%s - \" , val ) } fmt . Println () str3 := strings . Join ( sl2 , \";\" ) fmt . Printf ( \"sl2 joined by ;: %s\\n\" , str3 ) } \u8f93\u51fa\uff1a Splitted in slice: [The quick brown fox jumps over the lazy dog] The - quick - brown - fox - jumps - over - the - lazy - dog - Splitted in slice: [GO1 The ABC of Go 25] GO1 - The ABC of Go - 25 - sl2 joined by ;: GO1;The ABC of Go;25 \u5176\u5b83\u6709\u5173\u5b57\u7b26\u4e32\u64cd\u4f5c\u7684\u6587\u6863\u8bf7\u53c2\u9605 \u5b98\u65b9\u6587\u6863 \uff08 \u8bd1\u8005\u6ce8\uff1a\u56fd\u5185\u7528\u6237\u53ef\u8bbf\u95ee \u8be5\u9875\u9762 \uff09\u3002 4.7.11 \u4ece\u5b57\u7b26\u4e32\u4e2d\u8bfb\u53d6\u5185\u5bb9 \u00b6 \u51fd\u6570 strings.NewReader(str) \u7528\u4e8e\u751f\u6210\u4e00\u4e2a Reader \u5e76\u8bfb\u53d6\u5b57\u7b26\u4e32\u4e2d\u7684\u5185\u5bb9\uff0c\u7136\u540e\u8fd4\u56de\u6307\u5411\u8be5 Reader \u7684\u6307\u9488\uff0c\u4ece\u5176\u5b83\u7c7b\u578b\u8bfb\u53d6\u5185\u5bb9\u7684\u51fd\u6570\u8fd8\u6709\uff1a Read() \u4ece []byte \u4e2d\u8bfb\u53d6\u5185\u5bb9\u3002 ReadByte() \u548c ReadRune() \u4ece\u5b57\u7b26\u4e32\u4e2d\u8bfb\u53d6\u4e0b\u4e00\u4e2a byte \u6216\u8005 rune \u3002 4.7.12 \u5b57\u7b26\u4e32\u4e0e\u5176\u5b83\u7c7b\u578b\u7684\u8f6c\u6362 \u00b6 \u4e0e\u5b57\u7b26\u4e32\u76f8\u5173\u7684\u7c7b\u578b\u8f6c\u6362\u90fd\u662f\u901a\u8fc7 strconv \u5305\u5b9e\u73b0\u7684\u3002 \u8be5\u5305\u5305\u542b\u4e86\u4e00\u4e9b\u53d8\u91cf\u7528\u4e8e\u83b7\u53d6\u7a0b\u5e8f\u8fd0\u884c\u7684\u64cd\u4f5c\u7cfb\u7edf\u5e73\u53f0\u4e0b int \u7c7b\u578b\u6240\u5360\u7684\u4f4d\u6570\uff0c\u5982\uff1a strconv.IntSize \u3002 \u4efb\u4f55\u7c7b\u578b T \u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u603b\u662f\u6210\u529f\u7684\u3002 \u9488\u5bf9\u4ece\u6570\u5b57\u7c7b\u578b\u8f6c\u6362\u5230\u5b57\u7b26\u4e32\uff0cGo \u63d0\u4f9b\u4e86\u4ee5\u4e0b\u51fd\u6570\uff1a strconv.Itoa(i int) string \u8fd4\u56de\u6570\u5b57 i \u6240\u8868\u793a\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u5341\u8fdb\u5236\u6570\u3002 strconv.FormatFloat(f float64, fmt byte, prec int, bitSize int) string \u5c06 64 \u4f4d\u6d6e\u70b9\u578b\u7684\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d fmt \u8868\u793a\u683c\u5f0f\uff08\u5176\u503c\u53ef\u4ee5\u662f 'b' \u3001 'e' \u3001 'f' \u6216 'g' \uff09\uff0c prec \u8868\u793a\u7cbe\u5ea6\uff0c bitSize \u5219\u4f7f\u7528 32 \u8868\u793a float32 \uff0c\u7528 64 \u8868\u793a float64 \u3002 \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5176\u5b83\u7c7b\u578b tp \u5e76\u4e0d\u603b\u662f\u53ef\u80fd\u7684\uff0c\u53ef\u80fd\u4f1a\u5728\u8fd0\u884c\u65f6\u629b\u51fa\u9519\u8bef parsing \"\u2026\": invalid argument \u3002 \u9488\u5bf9\u4ece\u5b57\u7b26\u4e32\u7c7b\u578b\u8f6c\u6362\u4e3a\u6570\u5b57\u7c7b\u578b\uff0cGo \u63d0\u4f9b\u4e86\u4ee5\u4e0b\u51fd\u6570\uff1a strconv.Atoi(s string) (i int, err error) \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a int \u578b\u3002 strconv.ParseFloat(s string, bitSize int) (f float64, err error) \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a float64 \u578b\u3002 \u5229\u7528\u591a\u8fd4\u56de\u503c\u7684\u7279\u6027\uff0c\u8fd9\u4e9b\u51fd\u6570\u4f1a\u8fd4\u56de 2 \u4e2a\u503c\uff0c\u7b2c 1 \u4e2a\u662f\u8f6c\u6362\u540e\u7684\u7ed3\u679c\uff08\u5982\u679c\u8f6c\u6362\u6210\u529f\uff09\uff0c\u7b2c 2 \u4e2a\u662f\u53ef\u80fd\u51fa\u73b0\u7684\u9519\u8bef\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u4e00\u822c\u4f7f\u7528\u4ee5\u4e0b\u5f62\u5f0f\u6765\u8fdb\u884c\u4ece\u5b57\u7b26\u4e32\u5230\u5176\u5b83\u7c7b\u578b\u7684\u8f6c\u6362\uff1a val, err = strconv.Atoi(s) \u5728\u4e0b\u9762\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5ffd\u7565\u53ef\u80fd\u51fa\u73b0\u7684\u8f6c\u6362\u9519\u8bef\uff1a \u793a\u4f8b 4.19 string_conversion.go package main import ( \"fmt\" \"strconv\" ) func main () { var orig string = \"666\" var an int var newS string fmt . Printf ( \"The size of ints is: %d\\n\" , strconv . IntSize ) an , _ = strconv . Atoi ( orig ) fmt . Printf ( \"The integer is: %d\\n\" , an ) an = an + 5 newS = strconv . Itoa ( an ) fmt . Printf ( \"The new string is: %s\\n\" , newS ) } \u8f93\u51fa\uff1a 64 \u4f4d\u7cfb\u7edf\uff1a The size of ints is: 64 32 \u4f4d\u7cfb\u7edf\uff1a The size of ints is: 32 The integer is: 666 The new string is: 671 \u5728\u7b2c 5.1 \u8282\uff0c\u6211\u4eec\u5c06\u4f1a\u5229\u7528 if \u8bed\u53e5\u6765\u5bf9\u53ef\u80fd\u51fa\u73b0\u7684\u9519\u8bef\u8fdb\u884c\u5206\u7c7b\u5904\u7406\u3002 \u66f4\u591a\u6709\u5173\u8be5\u5305\u7684\u8ba8\u8bba\uff0c\u8bf7\u53c2\u9605 \u5b98\u65b9\u6587\u6863 \uff08 \u8bd1\u8005\u6ce8\uff1a\u56fd\u5185\u7528\u6237\u53ef\u8bbf\u95ee \u8be5\u9875\u9762 \uff09\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5b57\u7b26\u4e32 \u4e0b\u4e00\u8282\uff1a \u65f6\u95f4\u548c\u65e5\u671f","title":"4.7 strings \u548c strconv \u5305"},{"location":"04.7/#47-strings-strconv","text":"\u4f5c\u4e3a\u4e00\u79cd\u57fa\u672c\u6570\u636e\u7ed3\u6784\uff0c\u6bcf\u79cd\u8bed\u8a00\u90fd\u6709\u4e00\u4e9b\u5bf9\u4e8e\u5b57\u7b26\u4e32\u7684\u9884\u5b9a\u4e49\u5904\u7406\u51fd\u6570\u3002Go \u4e2d\u4f7f\u7528 strings \u5305\u6765\u5b8c\u6210\u5bf9\u5b57\u7b26\u4e32\u7684\u4e3b\u8981\u64cd\u4f5c\u3002","title":"4.7 strings \u548c strconv \u5305"},{"location":"04.7/#471","text":"HasPrefix() \u5224\u65ad\u5b57\u7b26\u4e32 s \u662f\u5426\u4ee5 prefix \u5f00\u5934\uff1a strings . HasPrefix ( s , prefix string ) bool HasSuffix() \u5224\u65ad\u5b57\u7b26\u4e32 s \u662f\u5426\u4ee5 suffix \u7ed3\u5c3e\uff1a strings . HasSuffix ( s , suffix string ) bool \u793a\u4f8b 4.13 presuffix.go package main import ( \"fmt\" \"strings\" ) func main () { var str string = \"This is an example of a string\" fmt . Printf ( \"T/F? Does the string \\\"%s\\\" have prefix %s? \" , str , \"Th\" ) fmt . Printf ( \"%t\\n\" , strings . HasPrefix ( str , \"Th\" )) } \u8f93\u51fa\uff1a T/F? Does the string \"This is an example of a string\" have prefix Th? true \u8fd9\u4e2a\u4f8b\u5b50\u540c\u6837\u6f14\u793a\u4e86\u8f6c\u4e49\u5b57\u7b26 \\ \u548c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4f7f\u7528\u3002","title":"4.7.1 \u524d\u7f00\u548c\u540e\u7f00"},{"location":"04.7/#472","text":"Contains() \u5224\u65ad\u5b57\u7b26\u4e32 s \u662f\u5426\u5305\u542b substr \uff1a strings . Contains ( s , substr string ) bool","title":"4.7.2 \u5b57\u7b26\u4e32\u5305\u542b\u5173\u7cfb"},{"location":"04.7/#473","text":"Index() \u8fd4\u56de\u5b57\u7b26\u4e32 str \u5728\u5b57\u7b26\u4e32 s \u4e2d\u7684\u7d22\u5f15\uff08 str \u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\uff09\uff0c -1 \u8868\u793a\u5b57\u7b26\u4e32 s \u4e0d\u5305\u542b\u5b57\u7b26\u4e32 str \uff1a strings . Index ( s , str string ) int LastIndex() \u8fd4\u56de\u5b57\u7b26\u4e32 str \u5728\u5b57\u7b26\u4e32 s \u4e2d\u6700\u540e\u51fa\u73b0\u4f4d\u7f6e\u7684\u7d22\u5f15\uff08 str \u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u7d22\u5f15\uff09\uff0c -1 \u8868\u793a\u5b57\u7b26\u4e32 s \u4e0d\u5305\u542b\u5b57\u7b26\u4e32 str \uff1a strings . LastIndex ( s , str string ) int \u5982\u679c\u9700\u8981\u67e5\u8be2\u975e ASCII \u7f16\u7801\u7684\u5b57\u7b26\u5728\u7236\u5b57\u7b26\u4e32\u4e2d\u7684\u4f4d\u7f6e\uff0c\u5efa\u8bae\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\u6765\u5bf9\u5b57\u7b26\u8fdb\u884c\u5b9a\u4f4d\uff1a strings . IndexRune ( s string , r rune ) int \u6ce8: \u539f\u6587\u4e3a \"If ch is a non-ASCII character use strings.IndexRune(s string, ch int) int.\" \u8be5\u65b9\u6cd5\u5728\u6700\u65b0\u7248\u672c\u7684 Go \u4e2d\u5b9a\u4e49\u4e3a func IndexRune(s string, r rune) int \u5b9e\u9645\u4f7f\u7528\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570 rune \u53ef\u4ee5\u662f rune \u6216 int, \u4f8b\u5982 strings.IndexRune(\"chicken\", 99) \u6216 strings.IndexRune(\"chicken\", rune('k')) \u793a\u4f8b 4.14 index_in_string.go package main import ( \"fmt\" \"strings\" ) func main () { var str string = \"Hi, I'm Marc, Hi.\" fmt . Printf ( \"The position of \\\"Marc\\\" is: \" ) fmt . Printf ( \"%d\\n\" , strings . Index ( str , \"Marc\" )) fmt . Printf ( \"The position of the first instance of \\\"Hi\\\" is: \" ) fmt . Printf ( \"%d\\n\" , strings . Index ( str , \"Hi\" )) fmt . Printf ( \"The position of the last instance of \\\"Hi\\\" is: \" ) fmt . Printf ( \"%d\\n\" , strings . LastIndex ( str , \"Hi\" )) fmt . Printf ( \"The position of \\\"Burger\\\" is: \" ) fmt . Printf ( \"%d\\n\" , strings . Index ( str , \"Burger\" )) } \u8f93\u51fa\uff1a The position of \"Marc\" is: 8 The position of the first instance of \"Hi\" is: 0 The position of the last instance of \"Hi\" is: 14 The position of \"Burger\" is: -1","title":"4.7.3 \u5224\u65ad\u5b50\u5b57\u7b26\u4e32\u6216\u5b57\u7b26\u5728\u7236\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u7684\u4f4d\u7f6e\uff08\u7d22\u5f15\uff09"},{"location":"04.7/#474","text":"Replace() \u7528\u4e8e\u5c06\u5b57\u7b26\u4e32 str \u4e2d\u7684\u524d n \u4e2a\u5b57\u7b26\u4e32 old \u66ff\u6362\u4e3a\u5b57\u7b26\u4e32 new \uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u5982\u679c n = -1 \u5219\u66ff\u6362\u6240\u6709\u5b57\u7b26\u4e32 old \u4e3a\u5b57\u7b26\u4e32 new \uff1a strings . Replace ( str , old , new string , n int ) string","title":"4.7.4 \u5b57\u7b26\u4e32\u66ff\u6362"},{"location":"04.7/#475","text":"Count() \u7528\u4e8e\u8ba1\u7b97\u5b57\u7b26\u4e32 str \u5728\u5b57\u7b26\u4e32 s \u4e2d\u51fa\u73b0\u7684\u975e\u91cd\u53e0\u6b21\u6570\uff1a strings . Count ( s , str string ) int \u793a\u4f8b 4.15 count_substring.go package main import ( \"fmt\" \"strings\" ) func main () { var str string = \"Hello, how is it going, Hugo?\" var manyG = \"gggggggggg\" fmt . Printf ( \"Number of H's in %s is: \" , str ) fmt . Printf ( \"%d\\n\" , strings . Count ( str , \"H\" )) fmt . Printf ( \"Number of double g's in %s is: \" , manyG ) fmt . Printf ( \"%d\\n\" , strings . Count ( manyG , \"gg\" )) } \u8f93\u51fa\uff1a Number of H's in Hello, how is it going, Hugo? is: 2 Number of double g\u2019s in gggggggggg is: 5","title":"4.7.5 \u7edf\u8ba1\u5b57\u7b26\u4e32\u51fa\u73b0\u6b21\u6570"},{"location":"04.7/#476","text":"Repeat() \u7528\u4e8e\u91cd\u590d count \u6b21\u5b57\u7b26\u4e32 s \u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff1a strings . Repeat ( s , count int ) string \u793a\u4f8b 4.16 repeat_string.go package main import ( \"fmt\" \"strings\" ) func main () { var origS string = \"Hi there! \" var newS string newS = strings . Repeat ( origS , 3 ) fmt . Printf ( \"The new repeated string is: %s\\n\" , newS ) } \u8f93\u51fa\uff1a The new repeated string is: Hi there! Hi there! Hi there!","title":"4.7.6 \u91cd\u590d\u5b57\u7b26\u4e32"},{"location":"04.7/#477","text":"ToLower() \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684 Unicode \u5b57\u7b26\u5168\u90e8\u8f6c\u6362\u4e3a\u76f8\u5e94\u7684\u5c0f\u5199\u5b57\u7b26\uff1a strings . ToLower ( s ) string ToUpper() \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684 Unicode \u5b57\u7b26\u5168\u90e8\u8f6c\u6362\u4e3a\u76f8\u5e94\u7684\u5927\u5199\u5b57\u7b26\uff1a strings . ToUpper ( s ) string \u793a\u4f8b 4.17 toupper_lower.go package main import ( \"fmt\" \"strings\" ) func main () { var orig string = \"Hey, how are you George?\" var lower string var upper string fmt . Printf ( \"The original string is: %s\\n\" , orig ) lower = strings . ToLower ( orig ) fmt . Printf ( \"The lowercase string is: %s\\n\" , lower ) upper = strings . ToUpper ( orig ) fmt . Printf ( \"The uppercase string is: %s\\n\" , upper ) } \u8f93\u51fa\uff1a The original string is: Hey, how are you George? The lowercase string is: hey, how are you george? The uppercase string is: HEY, HOW ARE YOU GEORGE?","title":"4.7.7 \u4fee\u6539\u5b57\u7b26\u4e32\u5927\u5c0f\u5199"},{"location":"04.7/#478","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 strings.TrimSpace(s) \u6765\u5254\u9664\u5b57\u7b26\u4e32\u5f00\u5934\u548c\u7ed3\u5c3e\u7684\u7a7a\u767d\u7b26\u53f7\uff1b\u5982\u679c\u4f60\u60f3\u8981\u5254\u9664\u6307\u5b9a\u5b57\u7b26\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 strings.Trim(s, \"cut\") \u6765\u5c06\u5f00\u5934\u548c\u7ed3\u5c3e\u7684 cut \u53bb\u9664\u6389\u3002\u8be5\u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u53ef\u4ee5\u5305\u542b\u4efb\u4f55\u5b57\u7b26\uff0c\u5982\u679c\u4f60\u53ea\u60f3\u5254\u9664\u5f00\u5934\u6216\u8005\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 TrimLeft() \u6216\u8005 TrimRight() \u6765\u5b9e\u73b0\u3002","title":"4.7.8 \u4fee\u526a\u5b57\u7b26\u4e32"},{"location":"04.7/#479","text":"strings.Fields(s) \u5c06\u4f1a\u5229\u7528 1 \u4e2a\u6216\u591a\u4e2a\u7a7a\u767d\u7b26\u53f7\u6765\u4f5c\u4e3a\u52a8\u6001\u957f\u5ea6\u7684\u5206\u9694\u7b26\u5c06\u5b57\u7b26\u4e32\u5206\u5272\u6210\u82e5\u5e72\u5c0f\u5757\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a slice\uff0c\u5982\u679c\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u7a7a\u767d\u7b26\u53f7\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u957f\u5ea6\u4e3a 0 \u7684 slice\u3002 strings.Split(s, sep) \u7528\u4e8e\u81ea\u5b9a\u4e49\u5206\u5272\u7b26\u53f7\u6765\u5bf9\u6307\u5b9a\u5b57\u7b26\u4e32\u8fdb\u884c\u5206\u5272\uff0c\u540c\u6837\u8fd4\u56de slice\u3002 \u56e0\u4e3a\u8fd9 2 \u4e2a\u51fd\u6570\u90fd\u4f1a\u8fd4\u56de slice\uff0c\u6240\u4ee5\u4e60\u60ef\u4f7f\u7528 for-range \u5faa\u73af\u6765\u5bf9\u5176\u8fdb\u884c\u5904\u7406\uff08\u7b2c 7.3 \u8282\uff09\u3002","title":"4.7.9 \u5206\u5272\u5b57\u7b26\u4e32"},{"location":"04.7/#4710-slice","text":"Join() \u7528\u4e8e\u5c06\u5143\u7d20\u7c7b\u578b\u4e3a string \u7684 slice \u4f7f\u7528\u5206\u5272\u7b26\u53f7\u6765\u62fc\u63a5\u7ec4\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\uff1a strings . Join ( sl [] string , sep string ) string \u793a\u4f8b 4.18 strings_splitjoin.go package main import ( \"fmt\" \"strings\" ) func main () { str := \"The quick brown fox jumps over the lazy dog\" sl := strings . Fields ( str ) fmt . Printf ( \"Splitted in slice: %v\\n\" , sl ) for _ , val := range sl { fmt . Printf ( \"%s - \" , val ) } fmt . Println () str2 := \"GO1|The ABC of Go|25\" sl2 := strings . Split ( str2 , \"|\" ) fmt . Printf ( \"Splitted in slice: %v\\n\" , sl2 ) for _ , val := range sl2 { fmt . Printf ( \"%s - \" , val ) } fmt . Println () str3 := strings . Join ( sl2 , \";\" ) fmt . Printf ( \"sl2 joined by ;: %s\\n\" , str3 ) } \u8f93\u51fa\uff1a Splitted in slice: [The quick brown fox jumps over the lazy dog] The - quick - brown - fox - jumps - over - the - lazy - dog - Splitted in slice: [GO1 The ABC of Go 25] GO1 - The ABC of Go - 25 - sl2 joined by ;: GO1;The ABC of Go;25 \u5176\u5b83\u6709\u5173\u5b57\u7b26\u4e32\u64cd\u4f5c\u7684\u6587\u6863\u8bf7\u53c2\u9605 \u5b98\u65b9\u6587\u6863 \uff08 \u8bd1\u8005\u6ce8\uff1a\u56fd\u5185\u7528\u6237\u53ef\u8bbf\u95ee \u8be5\u9875\u9762 \uff09\u3002","title":"4.7.10 \u62fc\u63a5 slice \u5230\u5b57\u7b26\u4e32"},{"location":"04.7/#4711","text":"\u51fd\u6570 strings.NewReader(str) \u7528\u4e8e\u751f\u6210\u4e00\u4e2a Reader \u5e76\u8bfb\u53d6\u5b57\u7b26\u4e32\u4e2d\u7684\u5185\u5bb9\uff0c\u7136\u540e\u8fd4\u56de\u6307\u5411\u8be5 Reader \u7684\u6307\u9488\uff0c\u4ece\u5176\u5b83\u7c7b\u578b\u8bfb\u53d6\u5185\u5bb9\u7684\u51fd\u6570\u8fd8\u6709\uff1a Read() \u4ece []byte \u4e2d\u8bfb\u53d6\u5185\u5bb9\u3002 ReadByte() \u548c ReadRune() \u4ece\u5b57\u7b26\u4e32\u4e2d\u8bfb\u53d6\u4e0b\u4e00\u4e2a byte \u6216\u8005 rune \u3002","title":"4.7.11 \u4ece\u5b57\u7b26\u4e32\u4e2d\u8bfb\u53d6\u5185\u5bb9"},{"location":"04.7/#4712","text":"\u4e0e\u5b57\u7b26\u4e32\u76f8\u5173\u7684\u7c7b\u578b\u8f6c\u6362\u90fd\u662f\u901a\u8fc7 strconv \u5305\u5b9e\u73b0\u7684\u3002 \u8be5\u5305\u5305\u542b\u4e86\u4e00\u4e9b\u53d8\u91cf\u7528\u4e8e\u83b7\u53d6\u7a0b\u5e8f\u8fd0\u884c\u7684\u64cd\u4f5c\u7cfb\u7edf\u5e73\u53f0\u4e0b int \u7c7b\u578b\u6240\u5360\u7684\u4f4d\u6570\uff0c\u5982\uff1a strconv.IntSize \u3002 \u4efb\u4f55\u7c7b\u578b T \u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u603b\u662f\u6210\u529f\u7684\u3002 \u9488\u5bf9\u4ece\u6570\u5b57\u7c7b\u578b\u8f6c\u6362\u5230\u5b57\u7b26\u4e32\uff0cGo \u63d0\u4f9b\u4e86\u4ee5\u4e0b\u51fd\u6570\uff1a strconv.Itoa(i int) string \u8fd4\u56de\u6570\u5b57 i \u6240\u8868\u793a\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u5341\u8fdb\u5236\u6570\u3002 strconv.FormatFloat(f float64, fmt byte, prec int, bitSize int) string \u5c06 64 \u4f4d\u6d6e\u70b9\u578b\u7684\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d fmt \u8868\u793a\u683c\u5f0f\uff08\u5176\u503c\u53ef\u4ee5\u662f 'b' \u3001 'e' \u3001 'f' \u6216 'g' \uff09\uff0c prec \u8868\u793a\u7cbe\u5ea6\uff0c bitSize \u5219\u4f7f\u7528 32 \u8868\u793a float32 \uff0c\u7528 64 \u8868\u793a float64 \u3002 \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5176\u5b83\u7c7b\u578b tp \u5e76\u4e0d\u603b\u662f\u53ef\u80fd\u7684\uff0c\u53ef\u80fd\u4f1a\u5728\u8fd0\u884c\u65f6\u629b\u51fa\u9519\u8bef parsing \"\u2026\": invalid argument \u3002 \u9488\u5bf9\u4ece\u5b57\u7b26\u4e32\u7c7b\u578b\u8f6c\u6362\u4e3a\u6570\u5b57\u7c7b\u578b\uff0cGo \u63d0\u4f9b\u4e86\u4ee5\u4e0b\u51fd\u6570\uff1a strconv.Atoi(s string) (i int, err error) \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a int \u578b\u3002 strconv.ParseFloat(s string, bitSize int) (f float64, err error) \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a float64 \u578b\u3002 \u5229\u7528\u591a\u8fd4\u56de\u503c\u7684\u7279\u6027\uff0c\u8fd9\u4e9b\u51fd\u6570\u4f1a\u8fd4\u56de 2 \u4e2a\u503c\uff0c\u7b2c 1 \u4e2a\u662f\u8f6c\u6362\u540e\u7684\u7ed3\u679c\uff08\u5982\u679c\u8f6c\u6362\u6210\u529f\uff09\uff0c\u7b2c 2 \u4e2a\u662f\u53ef\u80fd\u51fa\u73b0\u7684\u9519\u8bef\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u4e00\u822c\u4f7f\u7528\u4ee5\u4e0b\u5f62\u5f0f\u6765\u8fdb\u884c\u4ece\u5b57\u7b26\u4e32\u5230\u5176\u5b83\u7c7b\u578b\u7684\u8f6c\u6362\uff1a val, err = strconv.Atoi(s) \u5728\u4e0b\u9762\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5ffd\u7565\u53ef\u80fd\u51fa\u73b0\u7684\u8f6c\u6362\u9519\u8bef\uff1a \u793a\u4f8b 4.19 string_conversion.go package main import ( \"fmt\" \"strconv\" ) func main () { var orig string = \"666\" var an int var newS string fmt . Printf ( \"The size of ints is: %d\\n\" , strconv . IntSize ) an , _ = strconv . Atoi ( orig ) fmt . Printf ( \"The integer is: %d\\n\" , an ) an = an + 5 newS = strconv . Itoa ( an ) fmt . Printf ( \"The new string is: %s\\n\" , newS ) } \u8f93\u51fa\uff1a 64 \u4f4d\u7cfb\u7edf\uff1a The size of ints is: 64 32 \u4f4d\u7cfb\u7edf\uff1a The size of ints is: 32 The integer is: 666 The new string is: 671 \u5728\u7b2c 5.1 \u8282\uff0c\u6211\u4eec\u5c06\u4f1a\u5229\u7528 if \u8bed\u53e5\u6765\u5bf9\u53ef\u80fd\u51fa\u73b0\u7684\u9519\u8bef\u8fdb\u884c\u5206\u7c7b\u5904\u7406\u3002 \u66f4\u591a\u6709\u5173\u8be5\u5305\u7684\u8ba8\u8bba\uff0c\u8bf7\u53c2\u9605 \u5b98\u65b9\u6587\u6863 \uff08 \u8bd1\u8005\u6ce8\uff1a\u56fd\u5185\u7528\u6237\u53ef\u8bbf\u95ee \u8be5\u9875\u9762 \uff09\u3002","title":"4.7.12 \u5b57\u7b26\u4e32\u4e0e\u5176\u5b83\u7c7b\u578b\u7684\u8f6c\u6362"},{"location":"04.7/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5b57\u7b26\u4e32 \u4e0b\u4e00\u8282\uff1a \u65f6\u95f4\u548c\u65e5\u671f","title":"\u94fe\u63a5"},{"location":"04.8/","text":"4.8 \u65f6\u95f4\u548c\u65e5\u671f \u00b6 time \u5305\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6570\u636e\u7c7b\u578b time.Time \uff08\u4f5c\u4e3a\u503c\u4f7f\u7528\uff09\u4ee5\u53ca\u663e\u793a\u548c\u6d4b\u91cf\u65f6\u95f4\u548c\u65e5\u671f\u7684\u529f\u80fd\u51fd\u6570\u3002 \u5f53\u524d\u65f6\u95f4\u53ef\u4ee5\u4f7f\u7528 time.Now() \u83b7\u53d6\uff0c\u6216\u8005\u4f7f\u7528 t.Day() \u3001 t.Minute() \u7b49\u7b49\u6765\u83b7\u53d6\u65f6\u95f4\u7684\u4e00\u90e8\u5206\uff1b\u4f60\u751a\u81f3\u53ef\u4ee5\u81ea\u5b9a\u4e49\u65f6\u95f4\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\uff1a fmt.Printf(\"%02d.%02d.%4d\\n\", t.Day(), t.Month(), t.Year()) \u5c06\u4f1a\u8f93\u51fa 21.07.2011 \u3002 Duration \u7c7b\u578b\u8868\u793a\u4e24\u4e2a\u8fde\u7eed\u65f6\u523b\u6240\u76f8\u5dee\u7684\u7eb3\u79d2\u6570\uff0c\u7c7b\u578b\u4e3a int64 \u3002 Location \u7c7b\u578b\u6620\u5c04\u67d0\u4e2a\u65f6\u533a\u7684\u65f6\u95f4\uff0cUTC \u8868\u793a\u901a\u7528\u534f\u8c03\u4e16\u754c\u65f6\u95f4\u3002 \u5305\u4e2d\u7684\u4e00\u4e2a\u9884\u5b9a\u4e49\u51fd\u6570 func (t Time) Format(layout string) string \u53ef\u4ee5\u6839\u636e\u4e00\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u5c06\u4e00\u4e2a\u65f6\u95f4 t \u8f6c\u6362\u4e3a\u76f8\u5e94\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u9884\u5b9a\u4e49\u7684\u683c\u5f0f\uff0c\u5982\uff1a time.ANSIC \u6216 time.RFC822 \u3002 \u4e00\u822c\u7684\u683c\u5f0f\u5316\u8bbe\u8ba1\u662f\u901a\u8fc7\u5bf9\u4e8e\u4e00\u4e2a\u6807\u51c6\u65f6\u95f4\u7684\u683c\u5f0f\u5316\u63cf\u8ff0\u6765\u5c55\u73b0\u7684\uff0c\u8fd9\u542c\u8d77\u6765\u5f88\u5947\u602a\uff08 02 Jan 2006 15:04 \u662f Go \u8bed\u8a00\u7684\u8bde\u751f\u65f6\u95f4\u4e14\u81ea\u5b9a\u4e49\u683c\u5f0f\u5316\u65f6\u5fc5\u987b\u4ee5\u6b64\u65f6\u95f4\u4e3a\u57fa\u51c6\uff09\uff0c\u4f46\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4f60\u5c31\u4f1a\u4e00\u76ee\u4e86\u7136\uff1a fmt . Println ( t . Format ( \"02 Jan 2006 15:04\" )) \u8f93\u51fa\uff1a 21 Jul 2011 10:31 \u5176\u5b83\u6709\u5173\u65f6\u95f4\u64cd\u4f5c\u7684\u6587\u6863\u8bf7\u53c2\u9605 \u5b98\u65b9\u6587\u6863 \uff08 \u8bd1\u8005\u6ce8\uff1a\u56fd\u5185\u7528\u6237\u53ef\u8bbf\u95ee \u8be5\u9875\u9762 \uff09\u3002 \u793a\u4f8b 4.20 time.go package main import ( \"fmt\" \"time\" ) var week time . Duration func main () { t := time . Now () fmt . Println ( t ) // e.g. Wed Dec 21 09:52:14 +0100 RST 2011 fmt . Printf ( \"%02d.%02d.%4d\\n\" , t . Day (), t . Month (), t . Year ()) // 21.12.2011 t = time . Now (). UTC () fmt . Println ( t ) // Wed Dec 21 08:52:14 +0000 UTC 2011 fmt . Println ( time . Now ()) // Wed Dec 21 09:52:14 +0100 RST 2011 // calculating times: week = 60 * 60 * 24 * 7 * 1e9 // must be in nanosec week_from_now := t . Add ( time . Duration ( week )) fmt . Println ( week_from_now ) // Wed Dec 28 08:52:14 +0000 UTC 2011 // formatting times: fmt . Println ( t . Format ( time . RFC822 )) // 21 Dec 11 0852 UTC fmt . Println ( t . Format ( time . ANSIC )) // Wed Dec 21 08:56:34 2011 // The time must be 2006-01-02 15:04:05 fmt . Println ( t . Format ( \"02 Jan 2006 15:04\" )) // 21 Dec 2011 08:52 s := t . Format ( \"20060102\" ) fmt . Println ( t , \"=>\" , s ) // Wed Dec 21 08:52:14 +0000 UTC 2011 => 20111221 } \u8f93\u51fa\u7684\u7ed3\u679c\u5df2\u7ecf\u5199\u5728\u6bcf\u884c // \u7684\u540e\u9762\u3002 \u5982\u679c\u4f60\u9700\u8981\u5728\u5e94\u7528\u7a0b\u5e8f\u5728\u7ecf\u8fc7\u4e00\u5b9a\u65f6\u95f4\u6216\u5468\u671f\u6267\u884c\u67d0\u9879\u4efb\u52a1\uff08\u4e8b\u4ef6\u5904\u7406\u7684\u7279\u4f8b\uff09\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 time.After() \u6216\u8005 time.Ticker \uff1a\u6211\u4eec\u5c06\u4f1a\u5728 \u7b2c 14.5 \u8282 \u8ba8\u8bba\u8fd9\u4e9b\u6709\u8da3\u7684\u4e8b\u60c5\u3002 \u53e6\u5916\uff0c time.Sleep(d Duration) \u53ef\u4ee5\u5b9e\u73b0\u5bf9\u67d0\u4e2a\u8fdb\u7a0b\uff08\u5b9e\u8d28\u4e0a\u662f goroutine\uff09\u65f6\u957f\u4e3a d \u7684\u6682\u505c\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a strings \u548c strconv \u5305 \u4e0b\u4e00\u8282\uff1a \u6307\u9488","title":"4.8 \u65f6\u95f4\u548c\u65e5\u671f"},{"location":"04.8/#48","text":"time \u5305\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6570\u636e\u7c7b\u578b time.Time \uff08\u4f5c\u4e3a\u503c\u4f7f\u7528\uff09\u4ee5\u53ca\u663e\u793a\u548c\u6d4b\u91cf\u65f6\u95f4\u548c\u65e5\u671f\u7684\u529f\u80fd\u51fd\u6570\u3002 \u5f53\u524d\u65f6\u95f4\u53ef\u4ee5\u4f7f\u7528 time.Now() \u83b7\u53d6\uff0c\u6216\u8005\u4f7f\u7528 t.Day() \u3001 t.Minute() \u7b49\u7b49\u6765\u83b7\u53d6\u65f6\u95f4\u7684\u4e00\u90e8\u5206\uff1b\u4f60\u751a\u81f3\u53ef\u4ee5\u81ea\u5b9a\u4e49\u65f6\u95f4\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\uff1a fmt.Printf(\"%02d.%02d.%4d\\n\", t.Day(), t.Month(), t.Year()) \u5c06\u4f1a\u8f93\u51fa 21.07.2011 \u3002 Duration \u7c7b\u578b\u8868\u793a\u4e24\u4e2a\u8fde\u7eed\u65f6\u523b\u6240\u76f8\u5dee\u7684\u7eb3\u79d2\u6570\uff0c\u7c7b\u578b\u4e3a int64 \u3002 Location \u7c7b\u578b\u6620\u5c04\u67d0\u4e2a\u65f6\u533a\u7684\u65f6\u95f4\uff0cUTC \u8868\u793a\u901a\u7528\u534f\u8c03\u4e16\u754c\u65f6\u95f4\u3002 \u5305\u4e2d\u7684\u4e00\u4e2a\u9884\u5b9a\u4e49\u51fd\u6570 func (t Time) Format(layout string) string \u53ef\u4ee5\u6839\u636e\u4e00\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u5c06\u4e00\u4e2a\u65f6\u95f4 t \u8f6c\u6362\u4e3a\u76f8\u5e94\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u9884\u5b9a\u4e49\u7684\u683c\u5f0f\uff0c\u5982\uff1a time.ANSIC \u6216 time.RFC822 \u3002 \u4e00\u822c\u7684\u683c\u5f0f\u5316\u8bbe\u8ba1\u662f\u901a\u8fc7\u5bf9\u4e8e\u4e00\u4e2a\u6807\u51c6\u65f6\u95f4\u7684\u683c\u5f0f\u5316\u63cf\u8ff0\u6765\u5c55\u73b0\u7684\uff0c\u8fd9\u542c\u8d77\u6765\u5f88\u5947\u602a\uff08 02 Jan 2006 15:04 \u662f Go \u8bed\u8a00\u7684\u8bde\u751f\u65f6\u95f4\u4e14\u81ea\u5b9a\u4e49\u683c\u5f0f\u5316\u65f6\u5fc5\u987b\u4ee5\u6b64\u65f6\u95f4\u4e3a\u57fa\u51c6\uff09\uff0c\u4f46\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4f60\u5c31\u4f1a\u4e00\u76ee\u4e86\u7136\uff1a fmt . Println ( t . Format ( \"02 Jan 2006 15:04\" )) \u8f93\u51fa\uff1a 21 Jul 2011 10:31 \u5176\u5b83\u6709\u5173\u65f6\u95f4\u64cd\u4f5c\u7684\u6587\u6863\u8bf7\u53c2\u9605 \u5b98\u65b9\u6587\u6863 \uff08 \u8bd1\u8005\u6ce8\uff1a\u56fd\u5185\u7528\u6237\u53ef\u8bbf\u95ee \u8be5\u9875\u9762 \uff09\u3002 \u793a\u4f8b 4.20 time.go package main import ( \"fmt\" \"time\" ) var week time . Duration func main () { t := time . Now () fmt . Println ( t ) // e.g. Wed Dec 21 09:52:14 +0100 RST 2011 fmt . Printf ( \"%02d.%02d.%4d\\n\" , t . Day (), t . Month (), t . Year ()) // 21.12.2011 t = time . Now (). UTC () fmt . Println ( t ) // Wed Dec 21 08:52:14 +0000 UTC 2011 fmt . Println ( time . Now ()) // Wed Dec 21 09:52:14 +0100 RST 2011 // calculating times: week = 60 * 60 * 24 * 7 * 1e9 // must be in nanosec week_from_now := t . Add ( time . Duration ( week )) fmt . Println ( week_from_now ) // Wed Dec 28 08:52:14 +0000 UTC 2011 // formatting times: fmt . Println ( t . Format ( time . RFC822 )) // 21 Dec 11 0852 UTC fmt . Println ( t . Format ( time . ANSIC )) // Wed Dec 21 08:56:34 2011 // The time must be 2006-01-02 15:04:05 fmt . Println ( t . Format ( \"02 Jan 2006 15:04\" )) // 21 Dec 2011 08:52 s := t . Format ( \"20060102\" ) fmt . Println ( t , \"=>\" , s ) // Wed Dec 21 08:52:14 +0000 UTC 2011 => 20111221 } \u8f93\u51fa\u7684\u7ed3\u679c\u5df2\u7ecf\u5199\u5728\u6bcf\u884c // \u7684\u540e\u9762\u3002 \u5982\u679c\u4f60\u9700\u8981\u5728\u5e94\u7528\u7a0b\u5e8f\u5728\u7ecf\u8fc7\u4e00\u5b9a\u65f6\u95f4\u6216\u5468\u671f\u6267\u884c\u67d0\u9879\u4efb\u52a1\uff08\u4e8b\u4ef6\u5904\u7406\u7684\u7279\u4f8b\uff09\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 time.After() \u6216\u8005 time.Ticker \uff1a\u6211\u4eec\u5c06\u4f1a\u5728 \u7b2c 14.5 \u8282 \u8ba8\u8bba\u8fd9\u4e9b\u6709\u8da3\u7684\u4e8b\u60c5\u3002 \u53e6\u5916\uff0c time.Sleep(d Duration) \u53ef\u4ee5\u5b9e\u73b0\u5bf9\u67d0\u4e2a\u8fdb\u7a0b\uff08\u5b9e\u8d28\u4e0a\u662f goroutine\uff09\u65f6\u957f\u4e3a d \u7684\u6682\u505c\u3002","title":"4.8 \u65f6\u95f4\u548c\u65e5\u671f"},{"location":"04.8/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a strings \u548c strconv \u5305 \u4e0b\u4e00\u8282\uff1a \u6307\u9488","title":"\u94fe\u63a5"},{"location":"04.9/","text":"4.9 \u6307\u9488 \u00b6 \u4e0d\u50cf Java \u548c .NET\uff0cGo \u8bed\u8a00\u4e3a\u7a0b\u5e8f\u5458\u63d0\u4f9b\u4e86\u63a7\u5236\u6570\u636e\u7ed3\u6784\u7684\u6307\u9488\u7684\u80fd\u529b\uff1b\u4f46\u662f\uff0c\u4f60\u4e0d\u80fd\u8fdb\u884c\u6307\u9488\u8fd0\u7b97\u3002\u901a\u8fc7\u7ed9\u4e88\u7a0b\u5e8f\u5458\u57fa\u672c\u5185\u5b58\u5e03\u5c40\uff0cGo \u8bed\u8a00\u5141\u8bb8\u4f60\u63a7\u5236\u7279\u5b9a\u96c6\u5408\u7684\u6570\u636e\u7ed3\u6784\u3001\u5206\u914d\u7684\u6570\u91cf\u4ee5\u53ca\u5185\u5b58\u8bbf\u95ee\u6a21\u5f0f\uff0c\u8fd9\u4e9b\u5bf9\u6784\u5efa\u8fd0\u884c\u826f\u597d\u7684\u7cfb\u7edf\u662f\u975e\u5e38\u91cd\u8981\u7684\uff1a\u6307\u9488\u5bf9\u4e8e\u6027\u80fd\u7684\u5f71\u54cd\u662f\u4e0d\u8a00\u800c\u55bb\u7684\uff0c\u800c\u5982\u679c\u4f60\u60f3\u8981\u505a\u7684\u662f\u7cfb\u7edf\u7f16\u7a0b\u3001\u64cd\u4f5c\u7cfb\u7edf\u6216\u8005\u7f51\u7edc\u5e94\u7528\uff0c\u6307\u9488\u66f4\u662f\u4e0d\u53ef\u6216\u7f3a\u7684\u4e00\u90e8\u5206\u3002 \u7531\u4e8e\u5404\u79cd\u539f\u56e0\uff0c\u6307\u9488\u5bf9\u4e8e\u4f7f\u7528\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u73b0\u4ee3\u7a0b\u5e8f\u5458\u6765\u8bf4\u53ef\u80fd\u663e\u5f97\u6709\u4e9b\u964c\u751f\uff0c\u4e0d\u8fc7\u6211\u4eec\u5c06\u4f1a\u5728\u8fd9\u4e00\u5c0f\u8282\u5bf9\u6b64\u8fdb\u884c\u89e3\u91ca\uff0c\u5e76\u5728\u672a\u6765\u7684\u7ae0\u8282\u4e2d\u5c55\u5f00\u6df1\u5165\u8ba8\u8bba\u3002 \u7a0b\u5e8f\u5728\u5185\u5b58\u4e2d\u5b58\u50a8\u5b83\u7684\u503c\uff0c\u6bcf\u4e2a\u5185\u5b58\u5757\uff08\u6216\u5b57\uff09\u6709\u4e00\u4e2a\u5730\u5740\uff0c\u901a\u5e38\u7528\u5341\u516d\u8fdb\u5236\u6570\u8868\u793a\uff0c\u5982\uff1a 0x6b0820 \u6216 0xf84001d7f0 \u3002 Go \u8bed\u8a00\u7684\u53d6\u5730\u5740\u7b26\u662f & \uff0c\u653e\u5230\u4e00\u4e2a\u53d8\u91cf\u524d\u4f7f\u7528\u5c31\u4f1a\u8fd4\u56de\u76f8\u5e94\u53d8\u91cf\u7684\u5185\u5b58\u5730\u5740\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\uff08\u793a\u4f8b 4.9 pointer.go \uff09\u53ef\u80fd\u8f93\u51fa An integer: 5, its location in memory: 0x6b0820 \uff08\u8fd9\u4e2a\u503c\u968f\u7740\u4f60\u6bcf\u6b21\u8fd0\u884c\u7a0b\u5e8f\u800c\u53d8\u5316\uff09\u3002 var i1 = 5 fmt . Printf ( \"An integer: %d, it's location in memory: %p\\n\" , i1 , & i1 ) \u8fd9\u4e2a\u5730\u5740\u53ef\u4ee5\u5b58\u50a8\u5728\u4e00\u4e2a\u53eb\u505a\u6307\u9488\u7684\u7279\u6b8a\u6570\u636e\u7c7b\u578b\u4e2d\uff0c\u5728\u672c\u4f8b\u4e2d\u8fd9\u662f\u4e00\u4e2a\u6307\u5411 int \u7684\u6307\u9488\uff0c\u5373 i1 \uff1a\u6b64\u5904\u4f7f\u7528 *int \u8868\u793a\u3002\u5982\u679c\u6211\u4eec\u60f3\u8c03\u7528\u6307\u9488 intP \uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u58f0\u660e\u5b83\uff1a var intP * int \u7136\u540e\u4f7f\u7528 intP = &i1 \u662f\u5408\u6cd5\u7684\uff0c\u6b64\u65f6 intP \u6307\u5411 i1 \u3002 \uff08\u6307\u9488\u7684\u683c\u5f0f\u5316\u6807\u8bc6\u7b26\u4e3a %p \uff09 intP \u5b58\u50a8\u4e86 i1 \u7684\u5185\u5b58\u5730\u5740\uff1b\u5b83\u6307\u5411\u4e86 i1 \u7684\u4f4d\u7f6e\uff0c\u5b83\u5f15\u7528\u4e86\u53d8\u91cf i1 \u3002 \u4e00\u4e2a\u6307\u9488\u53d8\u91cf\u53ef\u4ee5\u6307\u5411\u4efb\u4f55\u4e00\u4e2a\u503c\u7684\u5185\u5b58\u5730\u5740 \u5b83\u6307\u5411\u90a3\u4e2a\u503c\u7684\u5185\u5b58\u5730\u5740\uff0c\u5728 32 \u4f4d\u673a\u5668\u4e0a\u5360\u7528 4 \u4e2a\u5b57\u8282\uff0c\u5728 64 \u4f4d\u673a\u5668\u4e0a\u5360\u7528 8 \u4e2a\u5b57\u8282\uff0c\u5e76\u4e14\u4e0e\u5b83\u6240\u6307\u5411\u7684\u503c\u7684\u5927\u5c0f\u65e0\u5173\u3002\u5f53\u7136\uff0c\u53ef\u4ee5\u58f0\u660e\u6307\u9488\u6307\u5411\u4efb\u4f55\u7c7b\u578b\u7684\u503c\u6765\u8868\u660e\u5b83\u7684\u539f\u59cb\u6027\u6216\u7ed3\u6784\u6027\uff1b\u4f60\u53ef\u4ee5\u5728\u6307\u9488\u7c7b\u578b\u524d\u9762\u52a0\u4e0a * \u53f7\uff08\u524d\u7f00\uff09\u6765\u83b7\u53d6\u6307\u9488\u6240\u6307\u5411\u7684\u5185\u5bb9\uff0c\u8fd9\u91cc\u7684 * \u53f7\u662f\u4e00\u4e2a\u7c7b\u578b\u66f4\u6539\u5668\u3002\u4f7f\u7528\u4e00\u4e2a\u6307\u9488\u5f15\u7528\u4e00\u4e2a\u503c\u88ab\u79f0\u4e3a\u95f4\u63a5\u5f15\u7528\u3002 \u5f53\u4e00\u4e2a\u6307\u9488\u88ab\u5b9a\u4e49\u540e\u6ca1\u6709\u5206\u914d\u5230\u4efb\u4f55\u53d8\u91cf\u65f6\uff0c\u5b83\u7684\u503c\u4e3a nil \u3002 \u4e00\u4e2a\u6307\u9488\u53d8\u91cf\u901a\u5e38\u7f29\u5199\u4e3a ptr \u3002 \u6ce8\u610f\u4e8b\u9879 \u5728\u4e66\u5199\u8868\u8fbe\u5f0f\u7c7b\u4f3c var p *type \u65f6\uff0c\u5207\u8bb0\u5728 * \u53f7\u548c\u6307\u9488\u540d\u79f0\u95f4\u7559\u6709\u4e00\u4e2a\u7a7a\u683c\uff0c\u56e0\u4e3a - var p*type \u662f\u8bed\u6cd5\u6b63\u786e\u7684\uff0c\u4f46\u662f\u5728\u66f4\u590d\u6742\u7684\u8868\u8fbe\u5f0f\u4e2d\uff0c\u5b83\u5bb9\u6613\u88ab\u8bef\u8ba4\u4e3a\u662f\u4e00\u4e2a\u4e58\u6cd5\u8868\u8fbe\u5f0f\uff01 \u7b26\u53f7 * \u53ef\u4ee5\u653e\u5728\u4e00\u4e2a\u6307\u9488\u524d\uff0c\u5982 *intP \uff0c\u90a3\u4e48\u5b83\u5c06\u5f97\u5230\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u5730\u5740\u4e0a\u6240\u5b58\u50a8\u7684\u503c\uff1b\u8fd9\u88ab\u79f0\u4e3a\u53cd\u5f15\u7528\uff08\u6216\u8005\u5185\u5bb9\u6216\u8005\u95f4\u63a5\u5f15\u7528\uff09\u64cd\u4f5c\u7b26\uff1b\u53e6\u4e00\u79cd\u8bf4\u6cd5\u662f\u6307\u9488\u8f6c\u79fb\u3002 \u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u53d8\u91cf var \uff0c \u5982\u4e0b\u8868\u8fbe\u5f0f\u90fd\u662f\u6b63\u786e\u7684\uff1a var == *(&var) \u3002 \u73b0\u5728\uff0c\u6211\u4eec\u5e94\u5f53\u80fd\u7406\u89e3 pointer.go \u7684\u5168\u90e8\u5185\u5bb9\u53ca\u5176\u8f93\u51fa\uff1a \u793a\u4f8b 4.21 pointer.go : package main import \"fmt\" func main () { var i1 = 5 fmt . Printf ( \"An integer: %d, its location in memory: %p\\n\" , i1 , & i1 ) var intP * int intP = & i1 fmt . Printf ( \"The value at memory location %p is %d\\n\" , intP , * intP ) } \u8f93\u51fa\uff1a An integer: 5, its location in memory: 0x24f0820 The value at memory location 0x24f0820 is 5 \u6211\u4eec\u53ef\u4ee5\u7528\u4e0b\u56fe\u6765\u8868\u793a\u5185\u5b58\u4f7f\u7528\u7684\u60c5\u51b5\uff1a \u7a0b\u5e8f string_pointer.go \u4e3a\u6211\u4eec\u5c55\u793a\u4e86\u6307\u9488\u5bf9 string \u7684\u4f8b\u5b50\u3002 \u5b83\u5c55\u793a\u4e86\u5206\u914d\u4e00\u4e2a\u65b0\u7684\u503c\u7ed9 *p \u5e76\u4e14\u66f4\u6539\u8fd9\u4e2a\u53d8\u91cf\u81ea\u5df1\u7684\u503c\uff08\u8fd9\u91cc\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff09\u3002 \u793a\u4f8b 4.22 string_pointer.go package main import \"fmt\" func main () { s := \"good bye\" var p * string = & s * p = \"ciao\" fmt . Printf ( \"Here is the pointer p: %p\\n\" , p ) // prints address fmt . Printf ( \"Here is the string *p: %s\\n\" , * p ) // prints string fmt . Printf ( \"Here is the string s: %s\\n\" , s ) // prints same string } \u8f93\u51fa\uff1a Here is the pointer p: 0x2540820 Here is the string *p: ciao Here is the string s: ciao \u901a\u8fc7\u5bf9 *p \u8d4b\u53e6\u4e00\u4e2a\u503c\u6765\u66f4\u6539\u201c\u5bf9\u8c61\u201d\uff0c\u8fd9\u6837 s \u4e5f\u4f1a\u968f\u4e4b\u66f4\u6539\u3002 \u5185\u5b58\u793a\u610f\u56fe\u5982\u4e0b\uff1a \u6ce8\u610f\u4e8b\u9879 \u4f60\u4e0d\u80fd\u83b7\u53d6\u5b57\u9762\u91cf\u6216\u5e38\u91cf\u7684\u5730\u5740\uff0c\u4f8b\u5982\uff1a const i = 5 ptr := & i //error: cannot take the address of i ptr2 := & 10 //error: cannot take the address of 10 \u6240\u4ee5\u8bf4\uff0cGo \u8bed\u8a00\u548c C\u3001C++ \u4ee5\u53ca D \u8bed\u8a00\u8fd9\u4e9b\u4f4e\u7ea7\uff08\u7cfb\u7edf\uff09\u8bed\u8a00\u4e00\u6837\uff0c\u90fd\u6709\u6307\u9488\u7684\u6982\u5ff5\u3002\u4f46\u662f\u5bf9\u4e8e\u7ecf\u5e38\u5bfc\u81f4 C \u8bed\u8a00\u5185\u5b58\u6cc4\u6f0f\u7ee7\u800c\u7a0b\u5e8f\u5d29\u6e83\u7684\u6307\u9488\u8fd0\u7b97\uff08\u6240\u8c13\u7684\u6307\u9488\u7b97\u6cd5\uff0c\u5982\uff1a pointer+2 \uff0c\u79fb\u52a8\u6307\u9488\u6307\u5411\u5b57\u7b26\u4e32\u7684\u5b57\u8282\u6570\u6216\u6570\u7ec4\u7684\u67d0\u4e2a\u4f4d\u7f6e\uff09\u662f\u4e0d\u88ab\u5141\u8bb8\u7684\u3002Go \u8bed\u8a00\u4e2d\u7684\u6307\u9488\u4fdd\u8bc1\u4e86\u5185\u5b58\u5b89\u5168\uff0c\u66f4\u50cf\u662f Java\u3001C# \u548c VB.NET \u4e2d\u7684\u5f15\u7528\u3002 \u56e0\u6b64 p++ \u5728 Go \u8bed\u8a00\u7684\u4ee3\u7801\u4e2d\u662f\u4e0d\u5408\u6cd5\u7684\u3002 \u6307\u9488\u7684\u4e00\u4e2a\u9ad8\u7ea7\u5e94\u7528\u662f\u4f60\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u53d8\u91cf\u7684\u5f15\u7528\uff08\u5982\u51fd\u6570\u7684\u53c2\u6570\uff09\uff0c\u8fd9\u6837\u4e0d\u4f1a\u4f20\u9012\u53d8\u91cf\u7684\u62f7\u8d1d\u3002\u6307\u9488\u4f20\u9012\u662f\u5f88\u5ec9\u4ef7\u7684\uff0c\u53ea\u5360\u7528 4 \u4e2a\u6216 8 \u4e2a\u5b57\u8282\u3002\u5f53\u7a0b\u5e8f\u5728\u5de5\u4f5c\u4e2d\u9700\u8981\u5360\u7528\u5927\u91cf\u7684\u5185\u5b58\uff0c\u6216\u5f88\u591a\u53d8\u91cf\uff0c\u6216\u8005\u4e24\u8005\u90fd\u6709\uff0c\u4f7f\u7528\u6307\u9488\u4f1a\u51cf\u5c11\u5185\u5b58\u5360\u7528\u548c\u63d0\u9ad8\u6548\u7387\u3002\u88ab\u6307\u5411\u7684\u53d8\u91cf\u4e5f\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u76f4\u5230\u6ca1\u6709\u4efb\u4f55\u6307\u9488\u6307\u5411\u5b83\u4eec\uff0c\u6240\u4ee5\u4ece\u5b83\u4eec\u88ab\u521b\u5efa\u5f00\u59cb\u5c31\u5177\u6709\u76f8\u4e92\u72ec\u7acb\u7684\u751f\u547d\u5468\u671f\u3002 \u53e6\u4e00\u65b9\u9762\uff08\u867d\u7136\u4e0d\u592a\u53ef\u80fd\uff09\uff0c\u7531\u4e8e\u4e00\u4e2a\u6307\u9488\u5bfc\u81f4\u7684\u95f4\u63a5\u5f15\u7528\uff08\u4e00\u4e2a\u8fdb\u7a0b\u6267\u884c\u4e86\u53e6\u4e00\u4e2a\u5730\u5740\uff09\uff0c\u6307\u9488\u7684\u8fc7\u5ea6\u9891\u7e41\u4f7f\u7528\u4e5f\u4f1a\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d\u3002 \u6307\u9488\u4e5f\u53ef\u4ee5\u6307\u5411\u53e6\u4e00\u4e2a\u6307\u9488\uff0c\u5e76\u4e14\u53ef\u4ee5\u8fdb\u884c\u4efb\u610f\u6df1\u5ea6\u7684\u5d4c\u5957\uff0c\u5bfc\u81f4\u4f60\u53ef\u4ee5\u6709\u591a\u7ea7\u7684\u95f4\u63a5\u5f15\u7528\uff0c\u4f46\u5728\u5927\u591a\u6570\u60c5\u51b5\u8fd9\u4f1a\u4f7f\u4f60\u7684\u4ee3\u7801\u7ed3\u6784\u4e0d\u6e05\u6670\u3002 \u5982\u6211\u4eec\u6240\u89c1\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b Go \u8bed\u8a00\u53ef\u4ee5\u4f7f\u7a0b\u5e8f\u5458\u8f7b\u677e\u521b\u5efa\u6307\u9488\uff0c\u5e76\u4e14\u9690\u85cf\u95f4\u63a5\u5f15\u7528\uff0c\u5982\uff1a\u81ea\u52a8\u53cd\u5411\u5f15\u7528\u3002 \u5bf9\u4e00\u4e2a\u7a7a\u6307\u9488\u7684\u53cd\u5411\u5f15\u7528\u662f\u4e0d\u5408\u6cd5\u7684\uff0c\u5e76\u4e14\u4f1a\u4f7f\u7a0b\u5e8f\u5d29\u6e83\uff1a \u793a\u4f8b 4.23 testcrash.go : package main func main () { var p * int = nil * p = 0 } // in Windows: stops only with: <exit code=\"-1073741819\" msg=\"process crashed\"/> // runtime error: invalid memory address or nil pointer dereference \u95ee\u9898 4.2 \u5217\u4e3e Go \u8bed\u8a00\u4e2d * \u53f7\u7684\u6240\u6709\u7528\u6cd5\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u65f6\u95f4\u548c\u65e5\u671f \u4e0b\u4e00\u8282\uff1a \u63a7\u5236\u7ed3\u6784","title":"4.9 \u6307\u9488"},{"location":"04.9/#49","text":"\u4e0d\u50cf Java \u548c .NET\uff0cGo \u8bed\u8a00\u4e3a\u7a0b\u5e8f\u5458\u63d0\u4f9b\u4e86\u63a7\u5236\u6570\u636e\u7ed3\u6784\u7684\u6307\u9488\u7684\u80fd\u529b\uff1b\u4f46\u662f\uff0c\u4f60\u4e0d\u80fd\u8fdb\u884c\u6307\u9488\u8fd0\u7b97\u3002\u901a\u8fc7\u7ed9\u4e88\u7a0b\u5e8f\u5458\u57fa\u672c\u5185\u5b58\u5e03\u5c40\uff0cGo \u8bed\u8a00\u5141\u8bb8\u4f60\u63a7\u5236\u7279\u5b9a\u96c6\u5408\u7684\u6570\u636e\u7ed3\u6784\u3001\u5206\u914d\u7684\u6570\u91cf\u4ee5\u53ca\u5185\u5b58\u8bbf\u95ee\u6a21\u5f0f\uff0c\u8fd9\u4e9b\u5bf9\u6784\u5efa\u8fd0\u884c\u826f\u597d\u7684\u7cfb\u7edf\u662f\u975e\u5e38\u91cd\u8981\u7684\uff1a\u6307\u9488\u5bf9\u4e8e\u6027\u80fd\u7684\u5f71\u54cd\u662f\u4e0d\u8a00\u800c\u55bb\u7684\uff0c\u800c\u5982\u679c\u4f60\u60f3\u8981\u505a\u7684\u662f\u7cfb\u7edf\u7f16\u7a0b\u3001\u64cd\u4f5c\u7cfb\u7edf\u6216\u8005\u7f51\u7edc\u5e94\u7528\uff0c\u6307\u9488\u66f4\u662f\u4e0d\u53ef\u6216\u7f3a\u7684\u4e00\u90e8\u5206\u3002 \u7531\u4e8e\u5404\u79cd\u539f\u56e0\uff0c\u6307\u9488\u5bf9\u4e8e\u4f7f\u7528\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u73b0\u4ee3\u7a0b\u5e8f\u5458\u6765\u8bf4\u53ef\u80fd\u663e\u5f97\u6709\u4e9b\u964c\u751f\uff0c\u4e0d\u8fc7\u6211\u4eec\u5c06\u4f1a\u5728\u8fd9\u4e00\u5c0f\u8282\u5bf9\u6b64\u8fdb\u884c\u89e3\u91ca\uff0c\u5e76\u5728\u672a\u6765\u7684\u7ae0\u8282\u4e2d\u5c55\u5f00\u6df1\u5165\u8ba8\u8bba\u3002 \u7a0b\u5e8f\u5728\u5185\u5b58\u4e2d\u5b58\u50a8\u5b83\u7684\u503c\uff0c\u6bcf\u4e2a\u5185\u5b58\u5757\uff08\u6216\u5b57\uff09\u6709\u4e00\u4e2a\u5730\u5740\uff0c\u901a\u5e38\u7528\u5341\u516d\u8fdb\u5236\u6570\u8868\u793a\uff0c\u5982\uff1a 0x6b0820 \u6216 0xf84001d7f0 \u3002 Go \u8bed\u8a00\u7684\u53d6\u5730\u5740\u7b26\u662f & \uff0c\u653e\u5230\u4e00\u4e2a\u53d8\u91cf\u524d\u4f7f\u7528\u5c31\u4f1a\u8fd4\u56de\u76f8\u5e94\u53d8\u91cf\u7684\u5185\u5b58\u5730\u5740\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\uff08\u793a\u4f8b 4.9 pointer.go \uff09\u53ef\u80fd\u8f93\u51fa An integer: 5, its location in memory: 0x6b0820 \uff08\u8fd9\u4e2a\u503c\u968f\u7740\u4f60\u6bcf\u6b21\u8fd0\u884c\u7a0b\u5e8f\u800c\u53d8\u5316\uff09\u3002 var i1 = 5 fmt . Printf ( \"An integer: %d, it's location in memory: %p\\n\" , i1 , & i1 ) \u8fd9\u4e2a\u5730\u5740\u53ef\u4ee5\u5b58\u50a8\u5728\u4e00\u4e2a\u53eb\u505a\u6307\u9488\u7684\u7279\u6b8a\u6570\u636e\u7c7b\u578b\u4e2d\uff0c\u5728\u672c\u4f8b\u4e2d\u8fd9\u662f\u4e00\u4e2a\u6307\u5411 int \u7684\u6307\u9488\uff0c\u5373 i1 \uff1a\u6b64\u5904\u4f7f\u7528 *int \u8868\u793a\u3002\u5982\u679c\u6211\u4eec\u60f3\u8c03\u7528\u6307\u9488 intP \uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u58f0\u660e\u5b83\uff1a var intP * int \u7136\u540e\u4f7f\u7528 intP = &i1 \u662f\u5408\u6cd5\u7684\uff0c\u6b64\u65f6 intP \u6307\u5411 i1 \u3002 \uff08\u6307\u9488\u7684\u683c\u5f0f\u5316\u6807\u8bc6\u7b26\u4e3a %p \uff09 intP \u5b58\u50a8\u4e86 i1 \u7684\u5185\u5b58\u5730\u5740\uff1b\u5b83\u6307\u5411\u4e86 i1 \u7684\u4f4d\u7f6e\uff0c\u5b83\u5f15\u7528\u4e86\u53d8\u91cf i1 \u3002 \u4e00\u4e2a\u6307\u9488\u53d8\u91cf\u53ef\u4ee5\u6307\u5411\u4efb\u4f55\u4e00\u4e2a\u503c\u7684\u5185\u5b58\u5730\u5740 \u5b83\u6307\u5411\u90a3\u4e2a\u503c\u7684\u5185\u5b58\u5730\u5740\uff0c\u5728 32 \u4f4d\u673a\u5668\u4e0a\u5360\u7528 4 \u4e2a\u5b57\u8282\uff0c\u5728 64 \u4f4d\u673a\u5668\u4e0a\u5360\u7528 8 \u4e2a\u5b57\u8282\uff0c\u5e76\u4e14\u4e0e\u5b83\u6240\u6307\u5411\u7684\u503c\u7684\u5927\u5c0f\u65e0\u5173\u3002\u5f53\u7136\uff0c\u53ef\u4ee5\u58f0\u660e\u6307\u9488\u6307\u5411\u4efb\u4f55\u7c7b\u578b\u7684\u503c\u6765\u8868\u660e\u5b83\u7684\u539f\u59cb\u6027\u6216\u7ed3\u6784\u6027\uff1b\u4f60\u53ef\u4ee5\u5728\u6307\u9488\u7c7b\u578b\u524d\u9762\u52a0\u4e0a * \u53f7\uff08\u524d\u7f00\uff09\u6765\u83b7\u53d6\u6307\u9488\u6240\u6307\u5411\u7684\u5185\u5bb9\uff0c\u8fd9\u91cc\u7684 * \u53f7\u662f\u4e00\u4e2a\u7c7b\u578b\u66f4\u6539\u5668\u3002\u4f7f\u7528\u4e00\u4e2a\u6307\u9488\u5f15\u7528\u4e00\u4e2a\u503c\u88ab\u79f0\u4e3a\u95f4\u63a5\u5f15\u7528\u3002 \u5f53\u4e00\u4e2a\u6307\u9488\u88ab\u5b9a\u4e49\u540e\u6ca1\u6709\u5206\u914d\u5230\u4efb\u4f55\u53d8\u91cf\u65f6\uff0c\u5b83\u7684\u503c\u4e3a nil \u3002 \u4e00\u4e2a\u6307\u9488\u53d8\u91cf\u901a\u5e38\u7f29\u5199\u4e3a ptr \u3002 \u6ce8\u610f\u4e8b\u9879 \u5728\u4e66\u5199\u8868\u8fbe\u5f0f\u7c7b\u4f3c var p *type \u65f6\uff0c\u5207\u8bb0\u5728 * \u53f7\u548c\u6307\u9488\u540d\u79f0\u95f4\u7559\u6709\u4e00\u4e2a\u7a7a\u683c\uff0c\u56e0\u4e3a - var p*type \u662f\u8bed\u6cd5\u6b63\u786e\u7684\uff0c\u4f46\u662f\u5728\u66f4\u590d\u6742\u7684\u8868\u8fbe\u5f0f\u4e2d\uff0c\u5b83\u5bb9\u6613\u88ab\u8bef\u8ba4\u4e3a\u662f\u4e00\u4e2a\u4e58\u6cd5\u8868\u8fbe\u5f0f\uff01 \u7b26\u53f7 * \u53ef\u4ee5\u653e\u5728\u4e00\u4e2a\u6307\u9488\u524d\uff0c\u5982 *intP \uff0c\u90a3\u4e48\u5b83\u5c06\u5f97\u5230\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u5730\u5740\u4e0a\u6240\u5b58\u50a8\u7684\u503c\uff1b\u8fd9\u88ab\u79f0\u4e3a\u53cd\u5f15\u7528\uff08\u6216\u8005\u5185\u5bb9\u6216\u8005\u95f4\u63a5\u5f15\u7528\uff09\u64cd\u4f5c\u7b26\uff1b\u53e6\u4e00\u79cd\u8bf4\u6cd5\u662f\u6307\u9488\u8f6c\u79fb\u3002 \u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u53d8\u91cf var \uff0c \u5982\u4e0b\u8868\u8fbe\u5f0f\u90fd\u662f\u6b63\u786e\u7684\uff1a var == *(&var) \u3002 \u73b0\u5728\uff0c\u6211\u4eec\u5e94\u5f53\u80fd\u7406\u89e3 pointer.go \u7684\u5168\u90e8\u5185\u5bb9\u53ca\u5176\u8f93\u51fa\uff1a \u793a\u4f8b 4.21 pointer.go : package main import \"fmt\" func main () { var i1 = 5 fmt . Printf ( \"An integer: %d, its location in memory: %p\\n\" , i1 , & i1 ) var intP * int intP = & i1 fmt . Printf ( \"The value at memory location %p is %d\\n\" , intP , * intP ) } \u8f93\u51fa\uff1a An integer: 5, its location in memory: 0x24f0820 The value at memory location 0x24f0820 is 5 \u6211\u4eec\u53ef\u4ee5\u7528\u4e0b\u56fe\u6765\u8868\u793a\u5185\u5b58\u4f7f\u7528\u7684\u60c5\u51b5\uff1a \u7a0b\u5e8f string_pointer.go \u4e3a\u6211\u4eec\u5c55\u793a\u4e86\u6307\u9488\u5bf9 string \u7684\u4f8b\u5b50\u3002 \u5b83\u5c55\u793a\u4e86\u5206\u914d\u4e00\u4e2a\u65b0\u7684\u503c\u7ed9 *p \u5e76\u4e14\u66f4\u6539\u8fd9\u4e2a\u53d8\u91cf\u81ea\u5df1\u7684\u503c\uff08\u8fd9\u91cc\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff09\u3002 \u793a\u4f8b 4.22 string_pointer.go package main import \"fmt\" func main () { s := \"good bye\" var p * string = & s * p = \"ciao\" fmt . Printf ( \"Here is the pointer p: %p\\n\" , p ) // prints address fmt . Printf ( \"Here is the string *p: %s\\n\" , * p ) // prints string fmt . Printf ( \"Here is the string s: %s\\n\" , s ) // prints same string } \u8f93\u51fa\uff1a Here is the pointer p: 0x2540820 Here is the string *p: ciao Here is the string s: ciao \u901a\u8fc7\u5bf9 *p \u8d4b\u53e6\u4e00\u4e2a\u503c\u6765\u66f4\u6539\u201c\u5bf9\u8c61\u201d\uff0c\u8fd9\u6837 s \u4e5f\u4f1a\u968f\u4e4b\u66f4\u6539\u3002 \u5185\u5b58\u793a\u610f\u56fe\u5982\u4e0b\uff1a \u6ce8\u610f\u4e8b\u9879 \u4f60\u4e0d\u80fd\u83b7\u53d6\u5b57\u9762\u91cf\u6216\u5e38\u91cf\u7684\u5730\u5740\uff0c\u4f8b\u5982\uff1a const i = 5 ptr := & i //error: cannot take the address of i ptr2 := & 10 //error: cannot take the address of 10 \u6240\u4ee5\u8bf4\uff0cGo \u8bed\u8a00\u548c C\u3001C++ \u4ee5\u53ca D \u8bed\u8a00\u8fd9\u4e9b\u4f4e\u7ea7\uff08\u7cfb\u7edf\uff09\u8bed\u8a00\u4e00\u6837\uff0c\u90fd\u6709\u6307\u9488\u7684\u6982\u5ff5\u3002\u4f46\u662f\u5bf9\u4e8e\u7ecf\u5e38\u5bfc\u81f4 C \u8bed\u8a00\u5185\u5b58\u6cc4\u6f0f\u7ee7\u800c\u7a0b\u5e8f\u5d29\u6e83\u7684\u6307\u9488\u8fd0\u7b97\uff08\u6240\u8c13\u7684\u6307\u9488\u7b97\u6cd5\uff0c\u5982\uff1a pointer+2 \uff0c\u79fb\u52a8\u6307\u9488\u6307\u5411\u5b57\u7b26\u4e32\u7684\u5b57\u8282\u6570\u6216\u6570\u7ec4\u7684\u67d0\u4e2a\u4f4d\u7f6e\uff09\u662f\u4e0d\u88ab\u5141\u8bb8\u7684\u3002Go \u8bed\u8a00\u4e2d\u7684\u6307\u9488\u4fdd\u8bc1\u4e86\u5185\u5b58\u5b89\u5168\uff0c\u66f4\u50cf\u662f Java\u3001C# \u548c VB.NET \u4e2d\u7684\u5f15\u7528\u3002 \u56e0\u6b64 p++ \u5728 Go \u8bed\u8a00\u7684\u4ee3\u7801\u4e2d\u662f\u4e0d\u5408\u6cd5\u7684\u3002 \u6307\u9488\u7684\u4e00\u4e2a\u9ad8\u7ea7\u5e94\u7528\u662f\u4f60\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u53d8\u91cf\u7684\u5f15\u7528\uff08\u5982\u51fd\u6570\u7684\u53c2\u6570\uff09\uff0c\u8fd9\u6837\u4e0d\u4f1a\u4f20\u9012\u53d8\u91cf\u7684\u62f7\u8d1d\u3002\u6307\u9488\u4f20\u9012\u662f\u5f88\u5ec9\u4ef7\u7684\uff0c\u53ea\u5360\u7528 4 \u4e2a\u6216 8 \u4e2a\u5b57\u8282\u3002\u5f53\u7a0b\u5e8f\u5728\u5de5\u4f5c\u4e2d\u9700\u8981\u5360\u7528\u5927\u91cf\u7684\u5185\u5b58\uff0c\u6216\u5f88\u591a\u53d8\u91cf\uff0c\u6216\u8005\u4e24\u8005\u90fd\u6709\uff0c\u4f7f\u7528\u6307\u9488\u4f1a\u51cf\u5c11\u5185\u5b58\u5360\u7528\u548c\u63d0\u9ad8\u6548\u7387\u3002\u88ab\u6307\u5411\u7684\u53d8\u91cf\u4e5f\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u76f4\u5230\u6ca1\u6709\u4efb\u4f55\u6307\u9488\u6307\u5411\u5b83\u4eec\uff0c\u6240\u4ee5\u4ece\u5b83\u4eec\u88ab\u521b\u5efa\u5f00\u59cb\u5c31\u5177\u6709\u76f8\u4e92\u72ec\u7acb\u7684\u751f\u547d\u5468\u671f\u3002 \u53e6\u4e00\u65b9\u9762\uff08\u867d\u7136\u4e0d\u592a\u53ef\u80fd\uff09\uff0c\u7531\u4e8e\u4e00\u4e2a\u6307\u9488\u5bfc\u81f4\u7684\u95f4\u63a5\u5f15\u7528\uff08\u4e00\u4e2a\u8fdb\u7a0b\u6267\u884c\u4e86\u53e6\u4e00\u4e2a\u5730\u5740\uff09\uff0c\u6307\u9488\u7684\u8fc7\u5ea6\u9891\u7e41\u4f7f\u7528\u4e5f\u4f1a\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d\u3002 \u6307\u9488\u4e5f\u53ef\u4ee5\u6307\u5411\u53e6\u4e00\u4e2a\u6307\u9488\uff0c\u5e76\u4e14\u53ef\u4ee5\u8fdb\u884c\u4efb\u610f\u6df1\u5ea6\u7684\u5d4c\u5957\uff0c\u5bfc\u81f4\u4f60\u53ef\u4ee5\u6709\u591a\u7ea7\u7684\u95f4\u63a5\u5f15\u7528\uff0c\u4f46\u5728\u5927\u591a\u6570\u60c5\u51b5\u8fd9\u4f1a\u4f7f\u4f60\u7684\u4ee3\u7801\u7ed3\u6784\u4e0d\u6e05\u6670\u3002 \u5982\u6211\u4eec\u6240\u89c1\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b Go \u8bed\u8a00\u53ef\u4ee5\u4f7f\u7a0b\u5e8f\u5458\u8f7b\u677e\u521b\u5efa\u6307\u9488\uff0c\u5e76\u4e14\u9690\u85cf\u95f4\u63a5\u5f15\u7528\uff0c\u5982\uff1a\u81ea\u52a8\u53cd\u5411\u5f15\u7528\u3002 \u5bf9\u4e00\u4e2a\u7a7a\u6307\u9488\u7684\u53cd\u5411\u5f15\u7528\u662f\u4e0d\u5408\u6cd5\u7684\uff0c\u5e76\u4e14\u4f1a\u4f7f\u7a0b\u5e8f\u5d29\u6e83\uff1a \u793a\u4f8b 4.23 testcrash.go : package main func main () { var p * int = nil * p = 0 } // in Windows: stops only with: <exit code=\"-1073741819\" msg=\"process crashed\"/> // runtime error: invalid memory address or nil pointer dereference \u95ee\u9898 4.2 \u5217\u4e3e Go \u8bed\u8a00\u4e2d * \u53f7\u7684\u6240\u6709\u7528\u6cd5\u3002","title":"4.9 \u6307\u9488"},{"location":"04.9/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u65f6\u95f4\u548c\u65e5\u671f \u4e0b\u4e00\u8282\uff1a \u63a7\u5236\u7ed3\u6784","title":"\u94fe\u63a5"},{"location":"05.0/","text":"5.0 \u63a7\u5236\u7ed3\u6784 \u00b6 \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u770b\u5230\u7684 Go \u7a0b\u5e8f\u90fd\u662f\u4ece main() \u51fd\u6570\u5f00\u59cb\u6267\u884c\uff0c\u7136\u540e\u6309\u987a\u5e8f\u6267\u884c\u8be5\u51fd\u6570\u4f53\u4e2d\u7684\u4ee3\u7801\u3002\u4f46\u6211\u4eec\u7ecf\u5e38\u4f1a\u9700\u8981\u53ea\u6709\u5728\u6ee1\u8db3\u4e00\u4e9b\u7279\u5b9a\u60c5\u51b5\u65f6\u624d\u6267\u884c\u67d0\u4e9b\u4ee3\u7801\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u4ee3\u7801\u91cc\u8fdb\u884c\u6761\u4ef6\u5224\u65ad\u3002\u9488\u5bf9\u8fd9\u79cd\u9700\u6c42\uff0cGo \u63d0\u4f9b\u4e86\u4e0b\u9762\u8fd9\u4e9b\u6761\u4ef6\u7ed3\u6784\u548c\u5206\u652f\u7ed3\u6784\uff1a if - else \u7ed3\u6784 switch \u7ed3\u6784 select \u7ed3\u6784\uff0c\u7528\u4e8e channel \u7684\u9009\u62e9\uff08 \u7b2c 14.4 \u8282 \uff09 \u53ef\u4ee5\u4f7f\u7528\u8fed\u4ee3\u6216\u5faa\u73af\u7ed3\u6784\u6765\u91cd\u590d\u6267\u884c\u4e00\u6b21\u6216\u591a\u6b21\u67d0\u6bb5\u4ee3\u7801\uff08\u4efb\u52a1\uff09\uff1a for ( range ) \u7ed3\u6784 \u4e00\u4e9b\u5982 break \u548c continue \u8fd9\u6837\u7684\u5173\u952e\u5b57\u53ef\u4ee5\u7528\u4e8e\u4e2d\u9014\u6539\u53d8\u5faa\u73af\u7684\u72b6\u6001\u3002 \u6b64\u5916\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 return \u6765\u7ed3\u675f\u67d0\u4e2a\u51fd\u6570\u7684\u6267\u884c\uff0c\u6216\u4f7f\u7528 goto \u548c\u6807\u7b7e\u6765\u8c03\u6574\u7a0b\u5e8f\u7684\u6267\u884c\u4f4d\u7f6e\u3002 Go \u5b8c\u5168\u7701\u7565\u4e86 if \u3001 switch \u548c for \u7ed3\u6784\u4e2d\u6761\u4ef6\u8bed\u53e5\u4e24\u4fa7\u7684\u62ec\u53f7\uff0c\u76f8\u6bd4 Java\u3001C++ \u548c C# \u4e2d\u51cf\u5c11\u4e86\u5f88\u591a\u89c6\u89c9\u6df7\u4e71\u7684\u56e0\u7d20\uff0c\u540c\u65f6\u4e5f\u4f7f\u4f60\u7684\u4ee3\u7801\u66f4\u52a0\u7b80\u6d01\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u7ae0\uff1a \u6307\u9488 \u4e0b\u4e00\u8282\uff1a if-else \u7ed3\u6784","title":"5.0 \u63a7\u5236\u7ed3\u6784"},{"location":"05.0/#50","text":"\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u770b\u5230\u7684 Go \u7a0b\u5e8f\u90fd\u662f\u4ece main() \u51fd\u6570\u5f00\u59cb\u6267\u884c\uff0c\u7136\u540e\u6309\u987a\u5e8f\u6267\u884c\u8be5\u51fd\u6570\u4f53\u4e2d\u7684\u4ee3\u7801\u3002\u4f46\u6211\u4eec\u7ecf\u5e38\u4f1a\u9700\u8981\u53ea\u6709\u5728\u6ee1\u8db3\u4e00\u4e9b\u7279\u5b9a\u60c5\u51b5\u65f6\u624d\u6267\u884c\u67d0\u4e9b\u4ee3\u7801\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u4ee3\u7801\u91cc\u8fdb\u884c\u6761\u4ef6\u5224\u65ad\u3002\u9488\u5bf9\u8fd9\u79cd\u9700\u6c42\uff0cGo \u63d0\u4f9b\u4e86\u4e0b\u9762\u8fd9\u4e9b\u6761\u4ef6\u7ed3\u6784\u548c\u5206\u652f\u7ed3\u6784\uff1a if - else \u7ed3\u6784 switch \u7ed3\u6784 select \u7ed3\u6784\uff0c\u7528\u4e8e channel \u7684\u9009\u62e9\uff08 \u7b2c 14.4 \u8282 \uff09 \u53ef\u4ee5\u4f7f\u7528\u8fed\u4ee3\u6216\u5faa\u73af\u7ed3\u6784\u6765\u91cd\u590d\u6267\u884c\u4e00\u6b21\u6216\u591a\u6b21\u67d0\u6bb5\u4ee3\u7801\uff08\u4efb\u52a1\uff09\uff1a for ( range ) \u7ed3\u6784 \u4e00\u4e9b\u5982 break \u548c continue \u8fd9\u6837\u7684\u5173\u952e\u5b57\u53ef\u4ee5\u7528\u4e8e\u4e2d\u9014\u6539\u53d8\u5faa\u73af\u7684\u72b6\u6001\u3002 \u6b64\u5916\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 return \u6765\u7ed3\u675f\u67d0\u4e2a\u51fd\u6570\u7684\u6267\u884c\uff0c\u6216\u4f7f\u7528 goto \u548c\u6807\u7b7e\u6765\u8c03\u6574\u7a0b\u5e8f\u7684\u6267\u884c\u4f4d\u7f6e\u3002 Go \u5b8c\u5168\u7701\u7565\u4e86 if \u3001 switch \u548c for \u7ed3\u6784\u4e2d\u6761\u4ef6\u8bed\u53e5\u4e24\u4fa7\u7684\u62ec\u53f7\uff0c\u76f8\u6bd4 Java\u3001C++ \u548c C# \u4e2d\u51cf\u5c11\u4e86\u5f88\u591a\u89c6\u89c9\u6df7\u4e71\u7684\u56e0\u7d20\uff0c\u540c\u65f6\u4e5f\u4f7f\u4f60\u7684\u4ee3\u7801\u66f4\u52a0\u7b80\u6d01\u3002","title":"5.0 \u63a7\u5236\u7ed3\u6784"},{"location":"05.0/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u7ae0\uff1a \u6307\u9488 \u4e0b\u4e00\u8282\uff1a if-else \u7ed3\u6784","title":"\u94fe\u63a5"},{"location":"05.1/","text":"5.1 if-else \u7ed3\u6784 \u00b6 if \u662f\u7528\u4e8e\u6d4b\u8bd5\u67d0\u4e2a\u6761\u4ef6\uff08\u5e03\u5c14\u578b\u6216\u903b\u8f91\u578b\uff09\u7684\u8bed\u53e5\uff0c\u5982\u679c\u8be5\u6761\u4ef6\u6210\u7acb\uff0c\u5219\u4f1a\u6267\u884c if \u540e\u7531\u5927\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u4ee3\u7801\u5757\uff0c\u5426\u5219\u5c31\u5ffd\u7565\u8be5\u4ee3\u7801\u5757\u7ee7\u7eed\u6267\u884c\u540e\u7eed\u7684\u4ee3\u7801\u3002 if condition { // do something } \u5982\u679c\u5b58\u5728\u7b2c\u4e8c\u4e2a\u5206\u652f\uff0c\u5219\u53ef\u4ee5\u5728\u4e0a\u9762\u4ee3\u7801\u7684\u57fa\u7840\u4e0a\u6dfb\u52a0 else \u5173\u952e\u5b57\u4ee5\u53ca\u53e6\u4e00\u4ee3\u7801\u5757\uff0c\u8fd9\u4e2a\u4ee3\u7801\u5757\u4e2d\u7684\u4ee3\u7801\u53ea\u6709\u5728\u6761\u4ef6\u4e0d\u6ee1\u8db3\u65f6\u624d\u4f1a\u6267\u884c\u3002 if \u548c else \u540e\u7684\u4e24\u4e2a\u4ee3\u7801\u5757\u662f\u76f8\u4e92\u72ec\u7acb\u7684\u5206\u652f\uff0c\u53ea\u53ef\u80fd\u6267\u884c\u5176\u4e2d\u4e00\u4e2a\u3002 if condition { // do something } else { // do something } \u5982\u679c\u5b58\u5728\u7b2c\u4e09\u4e2a\u5206\u652f\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u8fd9\u79cd\u4e09\u4e2a\u72ec\u7acb\u5206\u652f\u7684\u5f62\u5f0f\uff1a if condition1 { // do something } else if condition2 { // do something else } else { // catch-all or default } else-if \u5206\u652f\u7684\u6570\u91cf\u662f\u6ca1\u6709\u9650\u5236\u7684\uff0c\u4f46\u662f\u4e3a\u4e86\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\uff0c\u8fd8\u662f\u4e0d\u8981\u5728 if \u540e\u9762\u52a0\u5165\u592a\u591a\u7684 else-if \u7ed3\u6784\u3002\u5982\u679c\u4f60\u5fc5\u987b\u4f7f\u7528\u8fd9\u79cd\u5f62\u5f0f\uff0c\u5219\u628a\u5c3d\u53ef\u80fd\u5148\u6ee1\u8db3\u7684\u6761\u4ef6\u653e\u5728\u524d\u9762\u3002 \u5373\u4f7f\u5f53\u4ee3\u7801\u5757\u4e4b\u95f4\u53ea\u6709\u4e00\u6761\u8bed\u53e5\u65f6\uff0c\u5927\u62ec\u53f7\u4e5f\u4e0d\u53ef\u88ab\u7701\u7565\uff08\u5c3d\u7ba1\u6709\u4e9b\u4eba\u5e76\u4e0d\u8d5e\u6210\uff0c\u4f46\u8fd9\u8fd8\u662f\u7b26\u5408\u4e86\u8f6f\u4ef6\u5de5\u7a0b\u539f\u5219\u7684\u4e3b\u6d41\u505a\u6cd5\uff09\u3002 \u5173\u952e\u5b57 if \u548c else \u4e4b\u540e\u7684\u5de6\u5927\u62ec\u53f7 { \u5fc5\u987b\u548c\u5173\u952e\u5b57\u5728\u540c\u4e00\u884c\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u4e86 else-if \u7ed3\u6784\uff0c\u5219\u524d\u6bb5\u4ee3\u7801\u5757\u7684\u53f3\u5927\u62ec\u53f7 } \u5fc5\u987b\u548c else-if \u5173\u952e\u5b57\u5728\u540c\u4e00\u884c\u3002\u8fd9\u4e24\u6761\u89c4\u5219\u90fd\u662f\u88ab\u7f16\u8bd1\u5668\u5f3a\u5236\u89c4\u5b9a\u7684\u3002 \u975e\u6cd5\u7684 Go \u4ee3\u7801: if x { } else { // \u65e0\u6548\u7684 } \u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u4f60\u4f7f\u7528 gofmt \u683c\u5f0f\u5316\u4ee3\u7801\u4e4b\u540e\uff0c\u6bcf\u4e2a\u5206\u652f\u5185\u7684\u4ee3\u7801\u90fd\u4f1a\u7f29\u8fdb 4 \u4e2a\u6216 8 \u4e2a\u7a7a\u683c\uff0c\u6216\u8005\u662f 1 \u4e2a tab\uff0c\u5e76\u4e14\u53f3\u5927\u62ec\u53f7\u4e0e\u5bf9\u5e94\u7684 if \u5173\u952e\u5b57\u5782\u76f4\u5bf9\u9f50\u3002 \u5728\u6709\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6761\u4ef6\u8bed\u53e5\u4e24\u4fa7\u7684\u62ec\u53f7\u662f\u53ef\u4ee5\u88ab\u7701\u7565\u7684\uff1b\u5f53\u6761\u4ef6\u6bd4\u8f83\u590d\u6742\u65f6\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u62ec\u53f7\u8ba9\u4ee3\u7801\u66f4\u6613\u8bfb\u3002\u6761\u4ef6\u5141\u8bb8\u662f\u7b26\u5408\u6761\u4ef6\uff0c\u9700\u4f7f\u7528 && \u3001 || \u6216 ! \uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u62ec\u53f7\u6765\u63d0\u5347\u67d0\u4e2a\u8868\u8fbe\u5f0f\u7684\u8fd0\u7b97\u4f18\u5148\u7ea7\uff0c\u5e76\u63d0\u9ad8\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u3002 \u4e00\u79cd\u53ef\u80fd\u7528\u5230\u6761\u4ef6\u8bed\u53e5\u7684\u573a\u666f\u662f\u6d4b\u8bd5\u53d8\u91cf\u7684\u503c\uff0c\u5728\u4e0d\u540c\u7684\u60c5\u51b5\u6267\u884c\u4e0d\u540c\u7684\u8bed\u53e5\uff0c\u4e0d\u8fc7\u5c06\u5728\u7b2c 5.3 \u8282\u8bb2\u5230\u7684 switch \u7ed3\u6784\u4f1a\u66f4\u9002\u5408\u8fd9\u79cd\u60c5\u51b5\u3002 \u793a\u4f8b 5.1 booleans.go package main import \"fmt\" func main () { bool1 := true if bool1 { fmt . Printf ( \"The value is true\\n\" ) } else { fmt . Printf ( \"The value is false\\n\" ) } } \u8f93\u51fa\uff1a The value is true \u6ce8\u610f\u4e8b\u9879 \u8fd9\u91cc\u4e0d\u9700\u8981\u4f7f\u7528 if bool1 == true \u6765\u5224\u65ad\uff0c\u56e0\u4e3a bool1 \u672c\u8eab\u5df2\u7ecf\u662f\u4e00\u4e2a\u5e03\u5c14\u7c7b\u578b\u7684\u503c\u3002 \u8fd9\u79cd\u505a\u6cd5\u4e00\u822c\u90fd\u7528\u5728\u6d4b\u8bd5 true \u6216\u8005\u6709\u5229\u6761\u4ef6\u65f6\uff0c\u4f46\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u53d6\u53cd ! \u6765\u5224\u65ad\u503c\u7684\u76f8\u53cd\u7ed3\u679c\uff0c\u5982\uff1a if !bool1 \u6216\u8005 if !(condition) \u3002\u540e\u8005\u7684\u62ec\u53f7\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u662f\u5fc5\u987b\u7684\uff0c\u5982\u8fd9\u79cd\u60c5\u51b5\uff1a if !(var1 == var2) \u3002 \u5f53 if \u7ed3\u6784\u5185\u6709 break \u3001 continue \u3001 goto \u6216\u8005 return \u8bed\u53e5\u65f6\uff0cGo \u4ee3\u7801\u7684\u5e38\u89c1\u5199\u6cd5\u662f\u7701\u7565 else \u90e8\u5206\uff08\u53e6\u89c1 \u7b2c 5.2 \u8282 \uff09\u3002\u65e0\u8bba\u6ee1\u8db3\u54ea\u4e2a\u6761\u4ef6\u90fd\u4f1a\u8fd4\u56de x \u6216\u8005 y \u65f6\uff0c\u4e00\u822c\u4f7f\u7528\u4ee5\u4e0b\u5199\u6cd5\uff1a if condition { return x } return y \u6ce8\u610f\u4e8b\u9879 \u4e0d\u8981\u540c\u65f6\u5728 if-else \u7ed3\u6784\u7684\u4e24\u4e2a\u5206\u652f\u91cc\u90fd\u4f7f\u7528 return \u8bed\u53e5\uff0c\u8fd9\u5c06\u5bfc\u81f4\u7f16\u8bd1\u62a5\u9519 function ends without a return statement \uff08\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a\u7f16\u8bd1\u5668\u7684 Bug \u6216\u8005\u7279\u6027\uff09\u3002\uff08 \u8bd1\u8005\u6ce8\uff1a\u8be5\u95ee\u9898\u5df2\u7ecf\u5728 Go 1.1 \u4e2d\u88ab\u4fee\u590d\u6216\u8005\u8bf4\u6539\u8fdb \uff09 \u8fd9\u91cc\u4e3e\u4e00\u4e9b\u6709\u7528\u7684\u4f8b\u5b50\uff1a \u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a\uff1a if str == \"\" { ... } if len(str) == 0 {...} \u5224\u65ad\u8fd0\u884c Go \u7a0b\u5e8f\u7684\u64cd\u4f5c\u7cfb\u7edf\u7c7b\u578b\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5e38\u91cf runtime.GOOS \u6765\u5224\u65ad\uff08 \u7b2c 2.2 \u8282 \uff09\u3002 if runtime . GOOS == \"windows\" { . .. } else { // Unix-like . .. } \u8fd9\u6bb5\u4ee3\u7801\u4e00\u822c\u88ab\u653e\u5728 init() \u51fd\u6570\u4e2d\u6267\u884c\u3002\u8fd9\u513f\u8fd8\u6709\u4e00\u6bb5\u793a\u4f8b\u6765\u6f14\u793a\u5982\u4f55\u6839\u636e\u64cd\u4f5c\u7cfb\u7edf\u6765\u51b3\u5b9a\u8f93\u5165\u7ed3\u675f\u7684\u63d0\u793a\uff1a var prompt = \"Enter a digit, e.g. 3 \" + \"or %s to quit.\" func init () { if runtime . GOOS == \"windows\" { prompt = fmt . Sprintf ( prompt , \"Ctrl+Z, Enter\" ) } else { //Unix-like prompt = fmt . Sprintf ( prompt , \"Ctrl+D\" ) } } \u51fd\u6570 Abs() \u7528\u4e8e\u8fd4\u56de\u4e00\u4e2a\u6574\u578b\u6570\u5b57\u7684\u7edd\u5bf9\u503c: func Abs ( x int ) int { if x < 0 { return - x } return x } isGreater \u7528\u4e8e\u6bd4\u8f83\u4e24\u4e2a\u6574\u578b\u6570\u5b57\u7684\u5927\u5c0f: func isGreater ( x , y int ) bool { if x > y { return true } return false } \u5728\u7b2c\u56db\u79cd\u60c5\u51b5\u4e2d\uff0c if \u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u521d\u59cb\u5316\u8bed\u53e5\uff08\u5982\uff1a\u7ed9\u4e00\u4e2a\u53d8\u91cf\u8d4b\u503c\uff09\u3002\u8fd9\u79cd\u5199\u6cd5\u5177\u6709\u56fa\u5b9a\u7684\u683c\u5f0f\uff08\u5728\u521d\u59cb\u5316\u8bed\u53e5\u540e\u65b9\u5fc5\u987b\u52a0\u4e0a\u5206\u53f7\uff09\uff1a if initialization ; condition { // do something } \u4f8b\u5982: val := 10 if val > max { // do something } \u4f60\u4e5f\u53ef\u4ee5\u8fd9\u6837\u5199: if val := 10 ; val > max { // do something } \u4f46\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4f7f\u7528\u7b80\u77ed\u65b9\u5f0f := \u58f0\u660e\u7684\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u53ea\u5b58\u5728\u4e8e if \u7ed3\u6784\u4e2d\uff08\u5728 if \u7ed3\u6784\u7684\u5927\u62ec\u53f7\u4e4b\u95f4\uff0c\u5982\u679c\u4f7f\u7528 if-else \u7ed3\u6784\u5219\u5728 else \u4ee3\u7801\u5757\u4e2d\u53d8\u91cf\u4e5f\u4f1a\u5b58\u5728\uff09\u3002\u5982\u679c\u53d8\u91cf\u5728 if \u7ed3\u6784\u4e4b\u524d\u5c31\u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48\u5728 if \u7ed3\u6784\u4e2d\uff0c\u8be5\u53d8\u91cf\u539f\u6765\u7684\u503c\u4f1a\u88ab\u9690\u85cf\u3002\u6700\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u5c31\u662f\u4e0d\u8981\u5728\u521d\u59cb\u5316\u8bed\u53e5\u4e2d\u58f0\u660e\u53d8\u91cf\uff08\u89c1 5.2 \u8282\u7684\u4f8b 3 \u4e86\u89e3\u66f4\u591a)\u3002 \u793a\u4f8b 5.2 ifelse.go package main import \"fmt\" func main () { var first int = 10 var cond int if first <= 0 { fmt . Printf ( \"first is less than or equal to 0\\n\" ) } else if first > 0 && first < 5 { fmt . Printf ( \"first is between 0 and 5\\n\" ) } else { fmt . Printf ( \"first is 5 or greater\\n\" ) } if cond = 5 ; cond > 10 { fmt . Printf ( \"cond is greater than 10\\n\" ) } else { fmt . Printf ( \"cond is not greater than 10\\n\" ) } } \u8f93\u51fa\uff1a first is 5 or greater cond is not greater than 10 \u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u5c55\u793a\u4e86\u5982\u4f55\u901a\u8fc7\u5728\u521d\u59cb\u5316\u8bed\u53e5\u4e2d\u83b7\u53d6\u51fd\u6570 process() \u7684\u8fd4\u56de\u503c\uff0c\u5e76\u5728\u6761\u4ef6\u8bed\u53e5\u4e2d\u4f5c\u4e3a\u5224\u5b9a\u6761\u4ef6\u6765\u51b3\u5b9a\u662f\u5426\u6267\u884c if \u7ed3\u6784\u4e2d\u7684\u4ee3\u7801\uff1a if value := process ( data ); value > max { ... } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u63a7\u5236\u7ed3\u6784 \u4e0b\u4e00\u8282\uff1a \u6d4b\u8bd5\u591a\u8fd4\u56de\u503c\u51fd\u6570\u7684\u9519\u8bef","title":"5.1 if-else \u7ed3\u6784"},{"location":"05.1/#51-if-else","text":"if \u662f\u7528\u4e8e\u6d4b\u8bd5\u67d0\u4e2a\u6761\u4ef6\uff08\u5e03\u5c14\u578b\u6216\u903b\u8f91\u578b\uff09\u7684\u8bed\u53e5\uff0c\u5982\u679c\u8be5\u6761\u4ef6\u6210\u7acb\uff0c\u5219\u4f1a\u6267\u884c if \u540e\u7531\u5927\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u4ee3\u7801\u5757\uff0c\u5426\u5219\u5c31\u5ffd\u7565\u8be5\u4ee3\u7801\u5757\u7ee7\u7eed\u6267\u884c\u540e\u7eed\u7684\u4ee3\u7801\u3002 if condition { // do something } \u5982\u679c\u5b58\u5728\u7b2c\u4e8c\u4e2a\u5206\u652f\uff0c\u5219\u53ef\u4ee5\u5728\u4e0a\u9762\u4ee3\u7801\u7684\u57fa\u7840\u4e0a\u6dfb\u52a0 else \u5173\u952e\u5b57\u4ee5\u53ca\u53e6\u4e00\u4ee3\u7801\u5757\uff0c\u8fd9\u4e2a\u4ee3\u7801\u5757\u4e2d\u7684\u4ee3\u7801\u53ea\u6709\u5728\u6761\u4ef6\u4e0d\u6ee1\u8db3\u65f6\u624d\u4f1a\u6267\u884c\u3002 if \u548c else \u540e\u7684\u4e24\u4e2a\u4ee3\u7801\u5757\u662f\u76f8\u4e92\u72ec\u7acb\u7684\u5206\u652f\uff0c\u53ea\u53ef\u80fd\u6267\u884c\u5176\u4e2d\u4e00\u4e2a\u3002 if condition { // do something } else { // do something } \u5982\u679c\u5b58\u5728\u7b2c\u4e09\u4e2a\u5206\u652f\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u8fd9\u79cd\u4e09\u4e2a\u72ec\u7acb\u5206\u652f\u7684\u5f62\u5f0f\uff1a if condition1 { // do something } else if condition2 { // do something else } else { // catch-all or default } else-if \u5206\u652f\u7684\u6570\u91cf\u662f\u6ca1\u6709\u9650\u5236\u7684\uff0c\u4f46\u662f\u4e3a\u4e86\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\uff0c\u8fd8\u662f\u4e0d\u8981\u5728 if \u540e\u9762\u52a0\u5165\u592a\u591a\u7684 else-if \u7ed3\u6784\u3002\u5982\u679c\u4f60\u5fc5\u987b\u4f7f\u7528\u8fd9\u79cd\u5f62\u5f0f\uff0c\u5219\u628a\u5c3d\u53ef\u80fd\u5148\u6ee1\u8db3\u7684\u6761\u4ef6\u653e\u5728\u524d\u9762\u3002 \u5373\u4f7f\u5f53\u4ee3\u7801\u5757\u4e4b\u95f4\u53ea\u6709\u4e00\u6761\u8bed\u53e5\u65f6\uff0c\u5927\u62ec\u53f7\u4e5f\u4e0d\u53ef\u88ab\u7701\u7565\uff08\u5c3d\u7ba1\u6709\u4e9b\u4eba\u5e76\u4e0d\u8d5e\u6210\uff0c\u4f46\u8fd9\u8fd8\u662f\u7b26\u5408\u4e86\u8f6f\u4ef6\u5de5\u7a0b\u539f\u5219\u7684\u4e3b\u6d41\u505a\u6cd5\uff09\u3002 \u5173\u952e\u5b57 if \u548c else \u4e4b\u540e\u7684\u5de6\u5927\u62ec\u53f7 { \u5fc5\u987b\u548c\u5173\u952e\u5b57\u5728\u540c\u4e00\u884c\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u4e86 else-if \u7ed3\u6784\uff0c\u5219\u524d\u6bb5\u4ee3\u7801\u5757\u7684\u53f3\u5927\u62ec\u53f7 } \u5fc5\u987b\u548c else-if \u5173\u952e\u5b57\u5728\u540c\u4e00\u884c\u3002\u8fd9\u4e24\u6761\u89c4\u5219\u90fd\u662f\u88ab\u7f16\u8bd1\u5668\u5f3a\u5236\u89c4\u5b9a\u7684\u3002 \u975e\u6cd5\u7684 Go \u4ee3\u7801: if x { } else { // \u65e0\u6548\u7684 } \u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u4f60\u4f7f\u7528 gofmt \u683c\u5f0f\u5316\u4ee3\u7801\u4e4b\u540e\uff0c\u6bcf\u4e2a\u5206\u652f\u5185\u7684\u4ee3\u7801\u90fd\u4f1a\u7f29\u8fdb 4 \u4e2a\u6216 8 \u4e2a\u7a7a\u683c\uff0c\u6216\u8005\u662f 1 \u4e2a tab\uff0c\u5e76\u4e14\u53f3\u5927\u62ec\u53f7\u4e0e\u5bf9\u5e94\u7684 if \u5173\u952e\u5b57\u5782\u76f4\u5bf9\u9f50\u3002 \u5728\u6709\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6761\u4ef6\u8bed\u53e5\u4e24\u4fa7\u7684\u62ec\u53f7\u662f\u53ef\u4ee5\u88ab\u7701\u7565\u7684\uff1b\u5f53\u6761\u4ef6\u6bd4\u8f83\u590d\u6742\u65f6\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u62ec\u53f7\u8ba9\u4ee3\u7801\u66f4\u6613\u8bfb\u3002\u6761\u4ef6\u5141\u8bb8\u662f\u7b26\u5408\u6761\u4ef6\uff0c\u9700\u4f7f\u7528 && \u3001 || \u6216 ! \uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u62ec\u53f7\u6765\u63d0\u5347\u67d0\u4e2a\u8868\u8fbe\u5f0f\u7684\u8fd0\u7b97\u4f18\u5148\u7ea7\uff0c\u5e76\u63d0\u9ad8\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u3002 \u4e00\u79cd\u53ef\u80fd\u7528\u5230\u6761\u4ef6\u8bed\u53e5\u7684\u573a\u666f\u662f\u6d4b\u8bd5\u53d8\u91cf\u7684\u503c\uff0c\u5728\u4e0d\u540c\u7684\u60c5\u51b5\u6267\u884c\u4e0d\u540c\u7684\u8bed\u53e5\uff0c\u4e0d\u8fc7\u5c06\u5728\u7b2c 5.3 \u8282\u8bb2\u5230\u7684 switch \u7ed3\u6784\u4f1a\u66f4\u9002\u5408\u8fd9\u79cd\u60c5\u51b5\u3002 \u793a\u4f8b 5.1 booleans.go package main import \"fmt\" func main () { bool1 := true if bool1 { fmt . Printf ( \"The value is true\\n\" ) } else { fmt . Printf ( \"The value is false\\n\" ) } } \u8f93\u51fa\uff1a The value is true \u6ce8\u610f\u4e8b\u9879 \u8fd9\u91cc\u4e0d\u9700\u8981\u4f7f\u7528 if bool1 == true \u6765\u5224\u65ad\uff0c\u56e0\u4e3a bool1 \u672c\u8eab\u5df2\u7ecf\u662f\u4e00\u4e2a\u5e03\u5c14\u7c7b\u578b\u7684\u503c\u3002 \u8fd9\u79cd\u505a\u6cd5\u4e00\u822c\u90fd\u7528\u5728\u6d4b\u8bd5 true \u6216\u8005\u6709\u5229\u6761\u4ef6\u65f6\uff0c\u4f46\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u53d6\u53cd ! \u6765\u5224\u65ad\u503c\u7684\u76f8\u53cd\u7ed3\u679c\uff0c\u5982\uff1a if !bool1 \u6216\u8005 if !(condition) \u3002\u540e\u8005\u7684\u62ec\u53f7\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u662f\u5fc5\u987b\u7684\uff0c\u5982\u8fd9\u79cd\u60c5\u51b5\uff1a if !(var1 == var2) \u3002 \u5f53 if \u7ed3\u6784\u5185\u6709 break \u3001 continue \u3001 goto \u6216\u8005 return \u8bed\u53e5\u65f6\uff0cGo \u4ee3\u7801\u7684\u5e38\u89c1\u5199\u6cd5\u662f\u7701\u7565 else \u90e8\u5206\uff08\u53e6\u89c1 \u7b2c 5.2 \u8282 \uff09\u3002\u65e0\u8bba\u6ee1\u8db3\u54ea\u4e2a\u6761\u4ef6\u90fd\u4f1a\u8fd4\u56de x \u6216\u8005 y \u65f6\uff0c\u4e00\u822c\u4f7f\u7528\u4ee5\u4e0b\u5199\u6cd5\uff1a if condition { return x } return y \u6ce8\u610f\u4e8b\u9879 \u4e0d\u8981\u540c\u65f6\u5728 if-else \u7ed3\u6784\u7684\u4e24\u4e2a\u5206\u652f\u91cc\u90fd\u4f7f\u7528 return \u8bed\u53e5\uff0c\u8fd9\u5c06\u5bfc\u81f4\u7f16\u8bd1\u62a5\u9519 function ends without a return statement \uff08\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a\u7f16\u8bd1\u5668\u7684 Bug \u6216\u8005\u7279\u6027\uff09\u3002\uff08 \u8bd1\u8005\u6ce8\uff1a\u8be5\u95ee\u9898\u5df2\u7ecf\u5728 Go 1.1 \u4e2d\u88ab\u4fee\u590d\u6216\u8005\u8bf4\u6539\u8fdb \uff09 \u8fd9\u91cc\u4e3e\u4e00\u4e9b\u6709\u7528\u7684\u4f8b\u5b50\uff1a \u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a\uff1a if str == \"\" { ... } if len(str) == 0 {...} \u5224\u65ad\u8fd0\u884c Go \u7a0b\u5e8f\u7684\u64cd\u4f5c\u7cfb\u7edf\u7c7b\u578b\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5e38\u91cf runtime.GOOS \u6765\u5224\u65ad\uff08 \u7b2c 2.2 \u8282 \uff09\u3002 if runtime . GOOS == \"windows\" { . .. } else { // Unix-like . .. } \u8fd9\u6bb5\u4ee3\u7801\u4e00\u822c\u88ab\u653e\u5728 init() \u51fd\u6570\u4e2d\u6267\u884c\u3002\u8fd9\u513f\u8fd8\u6709\u4e00\u6bb5\u793a\u4f8b\u6765\u6f14\u793a\u5982\u4f55\u6839\u636e\u64cd\u4f5c\u7cfb\u7edf\u6765\u51b3\u5b9a\u8f93\u5165\u7ed3\u675f\u7684\u63d0\u793a\uff1a var prompt = \"Enter a digit, e.g. 3 \" + \"or %s to quit.\" func init () { if runtime . GOOS == \"windows\" { prompt = fmt . Sprintf ( prompt , \"Ctrl+Z, Enter\" ) } else { //Unix-like prompt = fmt . Sprintf ( prompt , \"Ctrl+D\" ) } } \u51fd\u6570 Abs() \u7528\u4e8e\u8fd4\u56de\u4e00\u4e2a\u6574\u578b\u6570\u5b57\u7684\u7edd\u5bf9\u503c: func Abs ( x int ) int { if x < 0 { return - x } return x } isGreater \u7528\u4e8e\u6bd4\u8f83\u4e24\u4e2a\u6574\u578b\u6570\u5b57\u7684\u5927\u5c0f: func isGreater ( x , y int ) bool { if x > y { return true } return false } \u5728\u7b2c\u56db\u79cd\u60c5\u51b5\u4e2d\uff0c if \u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u521d\u59cb\u5316\u8bed\u53e5\uff08\u5982\uff1a\u7ed9\u4e00\u4e2a\u53d8\u91cf\u8d4b\u503c\uff09\u3002\u8fd9\u79cd\u5199\u6cd5\u5177\u6709\u56fa\u5b9a\u7684\u683c\u5f0f\uff08\u5728\u521d\u59cb\u5316\u8bed\u53e5\u540e\u65b9\u5fc5\u987b\u52a0\u4e0a\u5206\u53f7\uff09\uff1a if initialization ; condition { // do something } \u4f8b\u5982: val := 10 if val > max { // do something } \u4f60\u4e5f\u53ef\u4ee5\u8fd9\u6837\u5199: if val := 10 ; val > max { // do something } \u4f46\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4f7f\u7528\u7b80\u77ed\u65b9\u5f0f := \u58f0\u660e\u7684\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u53ea\u5b58\u5728\u4e8e if \u7ed3\u6784\u4e2d\uff08\u5728 if \u7ed3\u6784\u7684\u5927\u62ec\u53f7\u4e4b\u95f4\uff0c\u5982\u679c\u4f7f\u7528 if-else \u7ed3\u6784\u5219\u5728 else \u4ee3\u7801\u5757\u4e2d\u53d8\u91cf\u4e5f\u4f1a\u5b58\u5728\uff09\u3002\u5982\u679c\u53d8\u91cf\u5728 if \u7ed3\u6784\u4e4b\u524d\u5c31\u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48\u5728 if \u7ed3\u6784\u4e2d\uff0c\u8be5\u53d8\u91cf\u539f\u6765\u7684\u503c\u4f1a\u88ab\u9690\u85cf\u3002\u6700\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u5c31\u662f\u4e0d\u8981\u5728\u521d\u59cb\u5316\u8bed\u53e5\u4e2d\u58f0\u660e\u53d8\u91cf\uff08\u89c1 5.2 \u8282\u7684\u4f8b 3 \u4e86\u89e3\u66f4\u591a)\u3002 \u793a\u4f8b 5.2 ifelse.go package main import \"fmt\" func main () { var first int = 10 var cond int if first <= 0 { fmt . Printf ( \"first is less than or equal to 0\\n\" ) } else if first > 0 && first < 5 { fmt . Printf ( \"first is between 0 and 5\\n\" ) } else { fmt . Printf ( \"first is 5 or greater\\n\" ) } if cond = 5 ; cond > 10 { fmt . Printf ( \"cond is greater than 10\\n\" ) } else { fmt . Printf ( \"cond is not greater than 10\\n\" ) } } \u8f93\u51fa\uff1a first is 5 or greater cond is not greater than 10 \u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u5c55\u793a\u4e86\u5982\u4f55\u901a\u8fc7\u5728\u521d\u59cb\u5316\u8bed\u53e5\u4e2d\u83b7\u53d6\u51fd\u6570 process() \u7684\u8fd4\u56de\u503c\uff0c\u5e76\u5728\u6761\u4ef6\u8bed\u53e5\u4e2d\u4f5c\u4e3a\u5224\u5b9a\u6761\u4ef6\u6765\u51b3\u5b9a\u662f\u5426\u6267\u884c if \u7ed3\u6784\u4e2d\u7684\u4ee3\u7801\uff1a if value := process ( data ); value > max { ... }","title":"5.1 if-else \u7ed3\u6784"},{"location":"05.1/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u63a7\u5236\u7ed3\u6784 \u4e0b\u4e00\u8282\uff1a \u6d4b\u8bd5\u591a\u8fd4\u56de\u503c\u51fd\u6570\u7684\u9519\u8bef","title":"\u94fe\u63a5"},{"location":"05.2/","text":"5.2 \u6d4b\u8bd5\u591a\u8fd4\u56de\u503c\u51fd\u6570\u7684\u9519\u8bef \u00b6 Go \u8bed\u8a00\u7684\u51fd\u6570\u7ecf\u5e38\u4f7f\u7528\u4e24\u4e2a\u8fd4\u56de\u503c\u6765\u8868\u793a\u6267\u884c\u662f\u5426\u6210\u529f\uff1a\u8fd4\u56de\u67d0\u4e2a\u503c\u4ee5\u53ca true \u8868\u793a\u6210\u529f\uff1b\u8fd4\u56de\u96f6\u503c\uff08\u6216 nil \uff09\u548c false \u8868\u793a\u5931\u8d25\uff08 \u7b2c 4.4 \u8282 \uff09\u3002\u5f53\u4e0d\u4f7f\u7528 true \u6216 false \u7684\u65f6\u5019\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a error \u7c7b\u578b\u7684\u53d8\u91cf\u6765\u4ee3\u66ff\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u8fd4\u56de\u503c\uff1a\u6210\u529f\u6267\u884c\u7684\u8bdd\uff0c error \u7684\u503c\u4e3a nil \uff0c\u5426\u5219\u5c31\u4f1a\u5305\u542b\u76f8\u5e94\u7684\u9519\u8bef\u4fe1\u606f\uff08Go \u8bed\u8a00\u4e2d\u7684\u9519\u8bef\u7c7b\u578b\u4e3a error : var err error \uff0c\u6211\u4eec\u5c06\u4f1a\u5728 \u7b2c 13 \u7ae0 \u8fdb\u884c\u66f4\u591a\u5730\u8ba8\u8bba\uff09\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u5f88\u660e\u663e\u9700\u8981\u7528\u4e00\u4e2a if \u8bed\u53e5\u6765\u6d4b\u8bd5\u6267\u884c\u7ed3\u679c\uff1b\u7531\u4e8e\u5176\u7b26\u53f7\u7684\u539f\u56e0\uff0c\u8fd9\u6837\u7684\u5f62\u5f0f\u53c8\u79f0\u4e4b\u4e3a\u201c\u9017\u53f7 ok \u6a21\u5f0f\u201d(comma, ok pattern)\u3002 \u5728 \u7b2c 4.7 \u8282 \u7684\u7a0b\u5e8f string_conversion.go \u4e2d\uff0c\u51fd\u6570 strconv.Atoi() \u7684\u4f5c\u7528\u662f\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6574\u6570\u3002\u4e4b\u524d\u6211\u4eec\u5ffd\u7565\u4e86\u76f8\u5173\u7684\u9519\u8bef\u68c0\u67e5\uff1a anInt , _ = strconv . Atoi ( origStr ) \u5982\u679c origStr \u4e0d\u80fd\u88ab\u8f6c\u6362\u4e3a\u6574\u6570\uff0c anInt \u7684\u503c\u4f1a\u53d8\u6210 0 \u800c _ \u65e0\u89c6\u4e86\u9519\u8bef\uff0c\u7a0b\u5e8f\u4f1a\u7ee7\u7eed\u8fd0\u884c\u3002 \u8fd9\u6837\u505a\u662f\u975e\u5e38\u4e0d\u597d\u7684\uff1a\u7a0b\u5e8f\u5e94\u8be5\u5728\u6700\u63a5\u8fd1\u7684\u4f4d\u7f6e\u68c0\u67e5\u6240\u6709\u76f8\u5173\u7684\u9519\u8bef\uff0c\u81f3\u5c11\u9700\u8981\u6697\u793a\u7528\u6237\u6709\u9519\u8bef\u53d1\u751f\u5e76\u5bf9\u51fd\u6570\u8fdb\u884c\u8fd4\u56de\uff0c\u751a\u81f3\u4e2d\u65ad\u7a0b\u5e8f\u3002 \u6211\u4eec\u5728\u7b2c\u4e8c\u4e2a\u7248\u672c\u4e2d\u5bf9\u4ee3\u7801\u8fdb\u884c\u4e86\u6539\u8fdb\uff1a \u793a\u4f8b 1\uff1a \u793a\u4f8b 5.3 string_conversion2.go package main import ( \"fmt\" \"strconv\" ) func main () { var orig string = \"ABC\" // var an int var newS string // var err error fmt . Printf ( \"The size of ints is: %d\\n\" , strconv . IntSize ) // anInt, err = strconv.Atoi(origStr) an , err := strconv . Atoi ( orig ) if err != nil { fmt . Printf ( \"orig %s is not an integer - exiting with error\\n\" , orig ) return } fmt . Printf ( \"The integer is %d\\n\" , an ) an = an + 5 newS = strconv . Itoa ( an ) fmt . Printf ( \"The new string is: %s\\n\" , newS ) } \u8fd9\u662f\u6d4b\u8bd5 err \u53d8\u91cf\u662f\u5426\u5305\u542b\u4e00\u4e2a\u771f\u6b63\u7684\u9519\u8bef\uff08 if err != nil \uff09\u7684\u4e60\u60ef\u7528\u6cd5\u3002\u5982\u679c\u786e\u5b9e\u5b58\u5728\u9519\u8bef\uff0c\u5219\u4f1a\u6253\u5370\u76f8\u5e94\u7684\u9519\u8bef\u4fe1\u606f\u7136\u540e\u901a\u8fc7 return \u63d0\u524d\u7ed3\u675f\u51fd\u6570\u7684\u6267\u884c\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u643a\u5e26\u8fd4\u56de\u503c\u7684 return \u5f62\u5f0f\uff0c\u4f8b\u5982 return err \u3002\u8fd9\u6837\u4e00\u6765\uff0c\u51fd\u6570\u7684\u8c03\u7528\u8005\u5c31\u53ef\u4ee5\u68c0\u67e5\u51fd\u6570\u6267\u884c\u8fc7\u7a0b\u4e2d\u662f\u5426\u5b58\u5728\u9519\u8bef\u4e86\u3002 \u4e60\u60ef\u7528\u6cd5 value , err := pack1 . Function1 ( param1 ) if err != nil { fmt . Printf ( \"An error occured in pack1.Function1 with parameter %v\" , param1 ) return err } // \u672a\u53d1\u751f\u9519\u8bef\uff0c\u7ee7\u7eed\u6267\u884c\uff1a \u7531\u4e8e\u672c\u4f8b\u7684\u51fd\u6570\u8c03\u7528\u8005\u5c5e\u4e8e main \u51fd\u6570\uff0c\u6240\u4ee5\u7a0b\u5e8f\u4f1a\u76f4\u63a5\u505c\u6b62\u8fd0\u884c\u3002 \u5982\u679c\u6211\u4eec\u60f3\u8981\u5728\u9519\u8bef\u53d1\u751f\u7684\u540c\u65f6\u7ec8\u6b62\u7a0b\u5e8f\u7684\u8fd0\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 os \u5305\u7684 Exit \u51fd\u6570\uff1a \u4e60\u60ef\u7528\u6cd5 if err != nil { fmt . Printf ( \"Program stopping with error %v\" , err ) os . Exit ( 1 ) } \uff08\u6b64\u5904\u7684\u9000\u51fa\u4ee3\u7801 1 \u53ef\u4ee5\u4f7f\u7528\u5916\u90e8\u811a\u672c\u83b7\u53d6\u5230\uff09 \u6709\u65f6\u5019\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u79cd\u4e60\u60ef\u7528\u6cd5\u88ab\u8fde\u7eed\u91cd\u590d\u5730\u4f7f\u7528\u5728\u67d0\u6bb5\u4ee3\u7801\u4e2d\u3002 \u5f53\u6ca1\u6709\u9519\u8bef\u53d1\u751f\u65f6\uff0c\u4ee3\u7801\u7ee7\u7eed\u8fd0\u884c\u5c31\u662f\u552f\u4e00\u8981\u505a\u7684\u4e8b\u60c5\uff0c\u6240\u4ee5 if \u8bed\u53e5\u5757\u540e\u9762\u4e0d\u9700\u8981\u4f7f\u7528 else \u5206\u652f\u3002 \u793a\u4f8b 2\uff1a\u6211\u4eec\u5c1d\u8bd5\u901a\u8fc7 os.Open \u65b9\u6cd5\u6253\u5f00\u4e00\u4e2a\u540d\u4e3a name \u7684\u53ea\u8bfb\u6587\u4ef6\uff1a f , err := os . Open ( name ) if err != nil { return err } doSomething ( f ) // \u5f53\u6ca1\u6709\u9519\u8bef\u53d1\u751f\u65f6\uff0c\u6587\u4ef6\u5bf9\u8c61\u88ab\u4f20\u5165\u5230\u67d0\u4e2a\u51fd\u6570\u4e2d doSomething \u7ec3\u4e60 5.1 \u5c1d\u8bd5\u6539\u5199 string_conversion2.go \u4e2d\u7684\u4ee3\u7801\uff0c\u8981\u6c42\u4f7f\u7528 := \u65b9\u6cd5\u6765\u5bf9 err \u8fdb\u884c\u8d4b\u503c\uff0c\u54ea\u4e9b\u5730\u65b9\u53ef\u4ee5\u88ab\u4fee\u6539\uff1f \u793a\u4f8b 3\uff1a\u53ef\u4ee5\u5c06\u9519\u8bef\u7684\u83b7\u53d6\u653e\u7f6e\u5728 if \u8bed\u53e5\u7684\u521d\u59cb\u5316\u90e8\u5206\uff1a \u4e60\u60ef\u7528\u6cd5 if err := file . Chmod ( 0664 ); err != nil { fmt . Println ( err ) return err } \u793a\u4f8b 4\uff1a\u6216\u8005\u5c06 ok-pattern \u7684\u83b7\u53d6\u653e\u7f6e\u5728 if \u8bed\u53e5\u7684\u521d\u59cb\u5316\u90e8\u5206\uff0c\u7136\u540e\u8fdb\u884c\u5224\u65ad\uff1a \u4e60\u60ef\u7528\u6cd5 if value , ok := readData (); ok { \u2026 } \u6ce8\u610f\u4e8b\u9879 \u5982\u679c\u60a8\u50cf\u4e0b\u9762\u4e00\u6837\uff0c\u6ca1\u6709\u4e3a\u591a\u8fd4\u56de\u503c\u7684\u51fd\u6570\u51c6\u5907\u8db3\u591f\u7684\u53d8\u91cf\u6765\u5b58\u653e\u7ed3\u679c\uff1a func mySqrt ( f float64 ) ( v float64 , ok bool ) { if f < 0 { return } // error case return math . Sqrt ( f ), true } func main () { t := mySqrt ( 25.0 ) fmt . Println ( t ) } \u60a8\u4f1a\u5f97\u5230\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\uff1a multiple-value mySqrt() in single-value context \u3002 \u6b63\u786e\u7684\u505a\u6cd5\u662f\uff1a t , ok := mySqrt ( 25.0 ) if ok { fmt . Println ( t ) } \u6ce8\u610f\u4e8b\u9879 2 \u5f53\u60a8\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6574\u6570\u65f6\uff0c\u4e14\u786e\u5b9a\u8f6c\u6362\u4e00\u5b9a\u80fd\u591f\u6210\u529f\u65f6\uff0c\u53ef\u4ee5\u5c06 Atoi() \u51fd\u6570\u8fdb\u884c\u4e00\u5c42\u5ffd\u7565\u9519\u8bef\u7684\u5c01\u88c5\uff1a func atoi ( s string ) ( n int ) { n , _ = strconv . Atoi ( s ) return } \u5b9e\u9645\u4e0a\uff0c fmt \u5305\uff08 \u7b2c 4.4.3 \u8282 \uff09\u6700\u7b80\u5355\u7684\u6253\u5370\u51fd\u6570\u4e5f\u6709 2 \u4e2a\u8fd4\u56de\u503c\uff1a count , err := fmt . Println ( x ) // number of bytes printed, nil or 0, error \u5f53\u6253\u5370\u5230\u63a7\u5236\u53f0\u65f6\uff0c\u53ef\u4ee5\u5c06\u8be5\u51fd\u6570\u8fd4\u56de\u7684\u9519\u8bef\u5ffd\u7565\uff1b\u4f46\u5f53\u8f93\u51fa\u5230\u6587\u4ef6\u6d41\u3001\u7f51\u7edc\u6d41\u7b49\u5177\u6709\u4e0d\u786e\u5b9a\u56e0\u7d20\u7684\u8f93\u51fa\u5bf9\u8c61\u65f6\uff0c\u5e94\u8be5\u59cb\u7ec8\u68c0\u67e5\u662f\u5426\u6709\u9519\u8bef\u53d1\u751f\uff08\u53e6\u89c1 \u7ec3\u4e60 6.1b \uff09\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a if-else \u7ed3\u6784 \u4e0b\u4e00\u8282\uff1a switch \u7ed3\u6784","title":"5.2 \u6d4b\u8bd5\u591a\u8fd4\u56de\u503c\u51fd\u6570\u7684\u9519\u8bef"},{"location":"05.2/#52","text":"Go \u8bed\u8a00\u7684\u51fd\u6570\u7ecf\u5e38\u4f7f\u7528\u4e24\u4e2a\u8fd4\u56de\u503c\u6765\u8868\u793a\u6267\u884c\u662f\u5426\u6210\u529f\uff1a\u8fd4\u56de\u67d0\u4e2a\u503c\u4ee5\u53ca true \u8868\u793a\u6210\u529f\uff1b\u8fd4\u56de\u96f6\u503c\uff08\u6216 nil \uff09\u548c false \u8868\u793a\u5931\u8d25\uff08 \u7b2c 4.4 \u8282 \uff09\u3002\u5f53\u4e0d\u4f7f\u7528 true \u6216 false \u7684\u65f6\u5019\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a error \u7c7b\u578b\u7684\u53d8\u91cf\u6765\u4ee3\u66ff\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u8fd4\u56de\u503c\uff1a\u6210\u529f\u6267\u884c\u7684\u8bdd\uff0c error \u7684\u503c\u4e3a nil \uff0c\u5426\u5219\u5c31\u4f1a\u5305\u542b\u76f8\u5e94\u7684\u9519\u8bef\u4fe1\u606f\uff08Go \u8bed\u8a00\u4e2d\u7684\u9519\u8bef\u7c7b\u578b\u4e3a error : var err error \uff0c\u6211\u4eec\u5c06\u4f1a\u5728 \u7b2c 13 \u7ae0 \u8fdb\u884c\u66f4\u591a\u5730\u8ba8\u8bba\uff09\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u5f88\u660e\u663e\u9700\u8981\u7528\u4e00\u4e2a if \u8bed\u53e5\u6765\u6d4b\u8bd5\u6267\u884c\u7ed3\u679c\uff1b\u7531\u4e8e\u5176\u7b26\u53f7\u7684\u539f\u56e0\uff0c\u8fd9\u6837\u7684\u5f62\u5f0f\u53c8\u79f0\u4e4b\u4e3a\u201c\u9017\u53f7 ok \u6a21\u5f0f\u201d(comma, ok pattern)\u3002 \u5728 \u7b2c 4.7 \u8282 \u7684\u7a0b\u5e8f string_conversion.go \u4e2d\uff0c\u51fd\u6570 strconv.Atoi() \u7684\u4f5c\u7528\u662f\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6574\u6570\u3002\u4e4b\u524d\u6211\u4eec\u5ffd\u7565\u4e86\u76f8\u5173\u7684\u9519\u8bef\u68c0\u67e5\uff1a anInt , _ = strconv . Atoi ( origStr ) \u5982\u679c origStr \u4e0d\u80fd\u88ab\u8f6c\u6362\u4e3a\u6574\u6570\uff0c anInt \u7684\u503c\u4f1a\u53d8\u6210 0 \u800c _ \u65e0\u89c6\u4e86\u9519\u8bef\uff0c\u7a0b\u5e8f\u4f1a\u7ee7\u7eed\u8fd0\u884c\u3002 \u8fd9\u6837\u505a\u662f\u975e\u5e38\u4e0d\u597d\u7684\uff1a\u7a0b\u5e8f\u5e94\u8be5\u5728\u6700\u63a5\u8fd1\u7684\u4f4d\u7f6e\u68c0\u67e5\u6240\u6709\u76f8\u5173\u7684\u9519\u8bef\uff0c\u81f3\u5c11\u9700\u8981\u6697\u793a\u7528\u6237\u6709\u9519\u8bef\u53d1\u751f\u5e76\u5bf9\u51fd\u6570\u8fdb\u884c\u8fd4\u56de\uff0c\u751a\u81f3\u4e2d\u65ad\u7a0b\u5e8f\u3002 \u6211\u4eec\u5728\u7b2c\u4e8c\u4e2a\u7248\u672c\u4e2d\u5bf9\u4ee3\u7801\u8fdb\u884c\u4e86\u6539\u8fdb\uff1a \u793a\u4f8b 1\uff1a \u793a\u4f8b 5.3 string_conversion2.go package main import ( \"fmt\" \"strconv\" ) func main () { var orig string = \"ABC\" // var an int var newS string // var err error fmt . Printf ( \"The size of ints is: %d\\n\" , strconv . IntSize ) // anInt, err = strconv.Atoi(origStr) an , err := strconv . Atoi ( orig ) if err != nil { fmt . Printf ( \"orig %s is not an integer - exiting with error\\n\" , orig ) return } fmt . Printf ( \"The integer is %d\\n\" , an ) an = an + 5 newS = strconv . Itoa ( an ) fmt . Printf ( \"The new string is: %s\\n\" , newS ) } \u8fd9\u662f\u6d4b\u8bd5 err \u53d8\u91cf\u662f\u5426\u5305\u542b\u4e00\u4e2a\u771f\u6b63\u7684\u9519\u8bef\uff08 if err != nil \uff09\u7684\u4e60\u60ef\u7528\u6cd5\u3002\u5982\u679c\u786e\u5b9e\u5b58\u5728\u9519\u8bef\uff0c\u5219\u4f1a\u6253\u5370\u76f8\u5e94\u7684\u9519\u8bef\u4fe1\u606f\u7136\u540e\u901a\u8fc7 return \u63d0\u524d\u7ed3\u675f\u51fd\u6570\u7684\u6267\u884c\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u643a\u5e26\u8fd4\u56de\u503c\u7684 return \u5f62\u5f0f\uff0c\u4f8b\u5982 return err \u3002\u8fd9\u6837\u4e00\u6765\uff0c\u51fd\u6570\u7684\u8c03\u7528\u8005\u5c31\u53ef\u4ee5\u68c0\u67e5\u51fd\u6570\u6267\u884c\u8fc7\u7a0b\u4e2d\u662f\u5426\u5b58\u5728\u9519\u8bef\u4e86\u3002 \u4e60\u60ef\u7528\u6cd5 value , err := pack1 . Function1 ( param1 ) if err != nil { fmt . Printf ( \"An error occured in pack1.Function1 with parameter %v\" , param1 ) return err } // \u672a\u53d1\u751f\u9519\u8bef\uff0c\u7ee7\u7eed\u6267\u884c\uff1a \u7531\u4e8e\u672c\u4f8b\u7684\u51fd\u6570\u8c03\u7528\u8005\u5c5e\u4e8e main \u51fd\u6570\uff0c\u6240\u4ee5\u7a0b\u5e8f\u4f1a\u76f4\u63a5\u505c\u6b62\u8fd0\u884c\u3002 \u5982\u679c\u6211\u4eec\u60f3\u8981\u5728\u9519\u8bef\u53d1\u751f\u7684\u540c\u65f6\u7ec8\u6b62\u7a0b\u5e8f\u7684\u8fd0\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 os \u5305\u7684 Exit \u51fd\u6570\uff1a \u4e60\u60ef\u7528\u6cd5 if err != nil { fmt . Printf ( \"Program stopping with error %v\" , err ) os . Exit ( 1 ) } \uff08\u6b64\u5904\u7684\u9000\u51fa\u4ee3\u7801 1 \u53ef\u4ee5\u4f7f\u7528\u5916\u90e8\u811a\u672c\u83b7\u53d6\u5230\uff09 \u6709\u65f6\u5019\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u79cd\u4e60\u60ef\u7528\u6cd5\u88ab\u8fde\u7eed\u91cd\u590d\u5730\u4f7f\u7528\u5728\u67d0\u6bb5\u4ee3\u7801\u4e2d\u3002 \u5f53\u6ca1\u6709\u9519\u8bef\u53d1\u751f\u65f6\uff0c\u4ee3\u7801\u7ee7\u7eed\u8fd0\u884c\u5c31\u662f\u552f\u4e00\u8981\u505a\u7684\u4e8b\u60c5\uff0c\u6240\u4ee5 if \u8bed\u53e5\u5757\u540e\u9762\u4e0d\u9700\u8981\u4f7f\u7528 else \u5206\u652f\u3002 \u793a\u4f8b 2\uff1a\u6211\u4eec\u5c1d\u8bd5\u901a\u8fc7 os.Open \u65b9\u6cd5\u6253\u5f00\u4e00\u4e2a\u540d\u4e3a name \u7684\u53ea\u8bfb\u6587\u4ef6\uff1a f , err := os . Open ( name ) if err != nil { return err } doSomething ( f ) // \u5f53\u6ca1\u6709\u9519\u8bef\u53d1\u751f\u65f6\uff0c\u6587\u4ef6\u5bf9\u8c61\u88ab\u4f20\u5165\u5230\u67d0\u4e2a\u51fd\u6570\u4e2d doSomething \u7ec3\u4e60 5.1 \u5c1d\u8bd5\u6539\u5199 string_conversion2.go \u4e2d\u7684\u4ee3\u7801\uff0c\u8981\u6c42\u4f7f\u7528 := \u65b9\u6cd5\u6765\u5bf9 err \u8fdb\u884c\u8d4b\u503c\uff0c\u54ea\u4e9b\u5730\u65b9\u53ef\u4ee5\u88ab\u4fee\u6539\uff1f \u793a\u4f8b 3\uff1a\u53ef\u4ee5\u5c06\u9519\u8bef\u7684\u83b7\u53d6\u653e\u7f6e\u5728 if \u8bed\u53e5\u7684\u521d\u59cb\u5316\u90e8\u5206\uff1a \u4e60\u60ef\u7528\u6cd5 if err := file . Chmod ( 0664 ); err != nil { fmt . Println ( err ) return err } \u793a\u4f8b 4\uff1a\u6216\u8005\u5c06 ok-pattern \u7684\u83b7\u53d6\u653e\u7f6e\u5728 if \u8bed\u53e5\u7684\u521d\u59cb\u5316\u90e8\u5206\uff0c\u7136\u540e\u8fdb\u884c\u5224\u65ad\uff1a \u4e60\u60ef\u7528\u6cd5 if value , ok := readData (); ok { \u2026 } \u6ce8\u610f\u4e8b\u9879 \u5982\u679c\u60a8\u50cf\u4e0b\u9762\u4e00\u6837\uff0c\u6ca1\u6709\u4e3a\u591a\u8fd4\u56de\u503c\u7684\u51fd\u6570\u51c6\u5907\u8db3\u591f\u7684\u53d8\u91cf\u6765\u5b58\u653e\u7ed3\u679c\uff1a func mySqrt ( f float64 ) ( v float64 , ok bool ) { if f < 0 { return } // error case return math . Sqrt ( f ), true } func main () { t := mySqrt ( 25.0 ) fmt . Println ( t ) } \u60a8\u4f1a\u5f97\u5230\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\uff1a multiple-value mySqrt() in single-value context \u3002 \u6b63\u786e\u7684\u505a\u6cd5\u662f\uff1a t , ok := mySqrt ( 25.0 ) if ok { fmt . Println ( t ) } \u6ce8\u610f\u4e8b\u9879 2 \u5f53\u60a8\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6574\u6570\u65f6\uff0c\u4e14\u786e\u5b9a\u8f6c\u6362\u4e00\u5b9a\u80fd\u591f\u6210\u529f\u65f6\uff0c\u53ef\u4ee5\u5c06 Atoi() \u51fd\u6570\u8fdb\u884c\u4e00\u5c42\u5ffd\u7565\u9519\u8bef\u7684\u5c01\u88c5\uff1a func atoi ( s string ) ( n int ) { n , _ = strconv . Atoi ( s ) return } \u5b9e\u9645\u4e0a\uff0c fmt \u5305\uff08 \u7b2c 4.4.3 \u8282 \uff09\u6700\u7b80\u5355\u7684\u6253\u5370\u51fd\u6570\u4e5f\u6709 2 \u4e2a\u8fd4\u56de\u503c\uff1a count , err := fmt . Println ( x ) // number of bytes printed, nil or 0, error \u5f53\u6253\u5370\u5230\u63a7\u5236\u53f0\u65f6\uff0c\u53ef\u4ee5\u5c06\u8be5\u51fd\u6570\u8fd4\u56de\u7684\u9519\u8bef\u5ffd\u7565\uff1b\u4f46\u5f53\u8f93\u51fa\u5230\u6587\u4ef6\u6d41\u3001\u7f51\u7edc\u6d41\u7b49\u5177\u6709\u4e0d\u786e\u5b9a\u56e0\u7d20\u7684\u8f93\u51fa\u5bf9\u8c61\u65f6\uff0c\u5e94\u8be5\u59cb\u7ec8\u68c0\u67e5\u662f\u5426\u6709\u9519\u8bef\u53d1\u751f\uff08\u53e6\u89c1 \u7ec3\u4e60 6.1b \uff09\u3002","title":"5.2 \u6d4b\u8bd5\u591a\u8fd4\u56de\u503c\u51fd\u6570\u7684\u9519\u8bef"},{"location":"05.2/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a if-else \u7ed3\u6784 \u4e0b\u4e00\u8282\uff1a switch \u7ed3\u6784","title":"\u94fe\u63a5"},{"location":"05.3/","text":"5.3 switch \u7ed3\u6784 \u00b6 \u76f8\u6bd4\u8f83 C \u548c Java \u7b49\u5176\u5b83\u8bed\u8a00\u800c\u8a00\uff0cGo \u8bed\u8a00\u4e2d\u7684 switch \u7ed3\u6784\u4f7f\u7528\u4e0a\u66f4\u52a0\u7075\u6d3b\u3002\u5b83\u63a5\u53d7\u4efb\u610f\u5f62\u5f0f\u7684\u8868\u8fbe\u5f0f\uff1a switch var1 { case val1 : ... case val2 : ... default : ... } \u53d8\u91cf var1 \u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\uff0c\u800c val1 \u548c val2 \u5219\u53ef\u4ee5\u662f\u540c\u7c7b\u578b\u7684\u4efb\u610f\u503c\u3002\u7c7b\u578b\u4e0d\u88ab\u5c40\u9650\u4e8e\u5e38\u91cf\u6216\u6574\u6570\uff0c\u4f46\u5fc5\u987b\u662f\u76f8\u540c\u7684\u7c7b\u578b\uff1b\u6216\u8005\u6700\u7ec8\u7ed3\u679c\u4e3a\u76f8\u540c\u7c7b\u578b\u7684\u8868\u8fbe\u5f0f\u3002\u524d\u82b1\u62ec\u53f7 { \u5fc5\u987b\u548c switch \u5173\u952e\u5b57\u5728\u540c\u4e00\u884c\u3002 \u60a8\u53ef\u4ee5\u540c\u65f6\u6d4b\u8bd5\u591a\u4e2a\u53ef\u80fd\u7b26\u5408\u6761\u4ef6\u7684\u503c\uff0c\u4f7f\u7528\u9017\u53f7\u5206\u5272\u5b83\u4eec\uff0c\u4f8b\u5982\uff1a case val1, val2, val3 \u3002 \u6bcf\u4e00\u4e2a case \u5206\u652f\u90fd\u662f\u552f\u4e00\u7684\uff0c\u4ece\u4e0a\u81f3\u4e0b\u9010\u4e00\u6d4b\u8bd5\uff0c\u76f4\u5230\u5339\u914d\u4e3a\u6b62\u3002\uff08 Go \u8bed\u8a00\u4f7f\u7528\u5feb\u901f\u7684\u67e5\u627e\u7b97\u6cd5\u6765\u6d4b\u8bd5 switch \u6761\u4ef6\u4e0e case \u5206\u652f\u7684\u5339\u914d\u60c5\u51b5\uff0c\u76f4\u5230\u7b97\u6cd5\u5339\u914d\u5230\u67d0\u4e2a case \u6216\u8005\u8fdb\u5165 default \u6761\u4ef6\u4e3a\u6b62\u3002\uff09 \u4e00\u65e6\u6210\u529f\u5730\u5339\u914d\u5230\u67d0\u4e2a\u5206\u652f\uff0c\u5728\u6267\u884c\u5b8c\u76f8\u5e94\u4ee3\u7801\u540e\u5c31\u4f1a\u9000\u51fa\u6574\u4e2a switch \u4ee3\u7801\u5757\uff0c\u4e5f\u5c31\u662f\u8bf4\u60a8\u4e0d\u9700\u8981\u7279\u522b\u4f7f\u7528 break \u8bed\u53e5\u6765\u8868\u793a\u7ed3\u675f\u3002 \u56e0\u6b64\uff0c\u7a0b\u5e8f\u4e5f\u4e0d\u4f1a\u81ea\u52a8\u5730\u53bb\u6267\u884c\u4e0b\u4e00\u4e2a\u5206\u652f\u7684\u4ee3\u7801\u3002\u5982\u679c\u5728\u6267\u884c\u5b8c\u6bcf\u4e2a\u5206\u652f\u7684\u4ee3\u7801\u540e\uff0c\u8fd8\u5e0c\u671b\u7ee7\u7eed\u6267\u884c\u540e\u7eed\u5206\u652f\u7684\u4ee3\u7801\uff0c\u53ef\u4ee5\u4f7f\u7528 fallthrough \u5173\u952e\u5b57\u6765\u8fbe\u5230\u76ee\u7684\u3002 \u56e0\u6b64\uff1a switch i { case 0 : // \u7a7a\u5206\u652f\uff0c\u53ea\u6709\u5f53 i == 0 \u65f6\u624d\u4f1a\u8fdb\u5165\u5206\u652f case 1 : f () // \u5f53 i == 0 \u65f6\u51fd\u6570\u4e0d\u4f1a\u88ab\u8c03\u7528 } \u5e76\u4e14\uff1a switch i { case 0 : fallthrough case 1 : f () // \u5f53 i == 0 \u65f6\u51fd\u6570\u4e5f\u4f1a\u88ab\u8c03\u7528 } \u5728 case ...: \u8bed\u53e5\u4e4b\u540e\uff0c\u60a8\u4e0d\u9700\u8981\u4f7f\u7528\u82b1\u62ec\u53f7\u5c06\u591a\u884c\u8bed\u53e5\u62ec\u8d77\u6765\uff0c\u4f46\u60a8\u53ef\u4ee5\u5728\u5206\u652f\u4e2d\u8fdb\u884c\u4efb\u610f\u5f62\u5f0f\u7684\u7f16\u7801\u3002\u5f53\u4ee3\u7801\u5757\u53ea\u6709\u4e00\u884c\u65f6\uff0c\u53ef\u4ee5\u76f4\u63a5\u653e\u7f6e\u5728 case \u8bed\u53e5\u4e4b\u540e\u3002 \u60a8\u540c\u6837\u53ef\u4ee5\u4f7f\u7528 return \u8bed\u53e5\u6765\u63d0\u524d\u7ed3\u675f\u4ee3\u7801\u5757\u7684\u6267\u884c\u3002\u5f53\u60a8\u5728 switch \u8bed\u53e5\u5757\u4e2d\u4f7f\u7528 return \u8bed\u53e5\uff0c\u5e76\u4e14\u60a8\u7684\u51fd\u6570\u662f\u6709\u8fd4\u56de\u503c\u7684\uff0c\u60a8\u8fd8\u9700\u8981\u5728 switch \u4e4b\u540e\u6dfb\u52a0\u76f8\u5e94\u7684 return \u8bed\u53e5\u4ee5\u786e\u4fdd\u51fd\u6570\u59cb\u7ec8\u4f1a\u8fd4\u56de\u3002 \u53ef\u9009\u7684 default \u5206\u652f\u53ef\u4ee5\u51fa\u73b0\u5728\u4efb\u4f55\u987a\u5e8f\uff0c\u4f46\u6700\u597d\u5c06\u5b83\u653e\u5728\u6700\u540e\u3002\u5b83\u7684\u4f5c\u7528\u7c7b\u4f3c\u4e0e if-else \u8bed\u53e5\u4e2d\u7684 else \uff0c\u8868\u793a\u4e0d\u7b26\u5408\u4efb\u4f55\u5df2\u7ed9\u51fa\u6761\u4ef6\u65f6\uff0c\u6267\u884c\u76f8\u5173\u8bed\u53e5\u3002 \u793a\u4f8b 5.4 switch1.go \uff1a package main import \"fmt\" func main () { var num1 int = 100 switch num1 { case 98 , 99 : fmt . Println ( \"It's equal to 98\" ) case 100 : fmt . Println ( \"It's equal to 100\" ) default : fmt . Println ( \"It's not equal to 98 or 100\" ) } } \u8f93\u51fa\uff1a It's equal to 100 \u5728\u7b2c 12.1 \u8282\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528 switch \u8bed\u53e5\u5224\u65ad\u4ece\u952e\u76d8\u8f93\u5165\u7684\u5b57\u7b26\uff08\u8be6\u89c1 \u7b2c 12.2 \u8282 \u7684 switch.go \uff09\u3002 switch \u8bed\u53e5\u7684\u7b2c\u4e8c\u79cd\u5f62\u5f0f\u662f\u4e0d\u63d0\u4f9b\u4efb\u4f55\u88ab\u5224\u65ad\u7684\u503c\uff08\u5b9e\u9645\u4e0a\u9ed8\u8ba4\u4e3a\u5224\u65ad\u662f\u5426\u4e3a true \uff09\uff0c\u7136\u540e\u5728\u6bcf\u4e2a case \u5206\u652f\u4e2d\u8fdb\u884c\u6d4b\u8bd5\u4e0d\u540c\u7684\u6761\u4ef6\u3002\u5f53\u4efb\u4e00\u5206\u652f\u7684\u6d4b\u8bd5\u7ed3\u679c\u4e3a true \u65f6\uff0c\u8be5\u5206\u652f\u7684\u4ee3\u7801\u4f1a\u88ab\u6267\u884c\u3002\u8fd9\u770b\u8d77\u6765\u975e\u5e38\u50cf\u94fe\u5f0f\u7684 if-else \u8bed\u53e5\uff0c\u4f46\u662f\u5728\u6d4b\u8bd5\u6761\u4ef6\u975e\u5e38\u591a\u7684\u60c5\u51b5\u4e0b\uff0c\u63d0\u4f9b\u4e86\u53ef\u8bfb\u6027\u66f4\u597d\u7684\u4e66\u5199\u65b9\u5f0f\u3002 switch { case condition1 : ... case condition2 : ... default : ... } \u4f8b\u5982\uff1a switch { case i < 0 : f1 () case i == 0 : f2 () case i > 0 : f3 () } \u4efb\u4f55\u652f\u6301\u8fdb\u884c\u76f8\u7b49\u5224\u65ad\u7684\u7c7b\u578b\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u6d4b\u8bd5\u8868\u8fbe\u5f0f\u7684\u6761\u4ef6\uff0c\u5305\u62ec int \u3001 string \u3001\u6307\u9488\u7b49\u3002 \u793a\u4f8b 5.4 switch2.go \uff1a package main import \"fmt\" func main () { var num1 int = 7 switch { case num1 < 0 : fmt . Println ( \"Number is negative\" ) case num1 > 0 && num1 < 10 : fmt . Println ( \"Number is between 0 and 10\" ) default : fmt . Println ( \"Number is 10 or greater\" ) } } \u8f93\u51fa\uff1a Number is between 0 and 10 switch \u8bed\u53e5\u7684\u7b2c\u4e09\u79cd\u5f62\u5f0f\u662f\u5305\u542b\u4e00\u4e2a\u521d\u59cb\u5316\u8bed\u53e5\uff1a switch initialization { case val1 : ... case val2 : ... default : ... } \u8fd9\u79cd\u5f62\u5f0f\u53ef\u4ee5\u975e\u5e38\u4f18\u96c5\u5730\u8fdb\u884c\u6761\u4ef6\u5224\u65ad\uff1a switch result := calculate (); { case result < 0 : ... case result > 0 : ... default : // 0 } \u5728\u4e0b\u9762\u8fd9\u4e2a\u4ee3\u7801\u7247\u6bb5\u4e2d\uff0c\u53d8\u91cf a \u548c b \u88ab\u5e73\u884c\u521d\u59cb\u5316\uff0c\u7136\u540e\u4f5c\u4e3a\u5224\u65ad\u6761\u4ef6\uff1a switch a , b := x [ i ], y [ j ]; { case a < b : t = - 1 case a == b : t = 0 case a > b : t = 1 } switch \u8bed\u53e5\u8fd8\u53ef\u4ee5\u88ab\u7528\u4e8e type-switch\uff08\u8be6\u89c1 \u7b2c 11.4 \u8282 \uff09\u6765\u5224\u65ad\u67d0\u4e2a interface \u53d8\u91cf\u4e2d\u5b9e\u9645\u5b58\u50a8\u7684\u53d8\u91cf\u7c7b\u578b\u3002 \u95ee\u9898 5.1\uff1a \u8bf7\u8bf4\u51fa\u4e0b\u9762\u4ee3\u7801\u7247\u6bb5\u8f93\u51fa\u7684\u7ed3\u679c\uff1a k := 6 switch k { case 4 : fmt . Println ( \"was <= 4\" ) fallthrough case 5 : fmt . Println ( \"was <= 5\" ) fallthrough case 6 : fmt . Println ( \"was <= 6\" ) fallthrough case 7 : fmt . Println ( \"was <= 7\" ) fallthrough case 8 : fmt . Println ( \"was <= 8\" ) fallthrough default : fmt . Println ( \"default case\" ) } \u7ec3\u4e60 5.2\uff1a season.go \uff1a \u5199\u4e00\u4e2a Season() \u51fd\u6570\uff0c\u8981\u6c42\u63a5\u53d7\u4e00\u4e2a\u4ee3\u8868\u6708\u4efd\u7684\u6570\u5b57\uff0c\u7136\u540e\u8fd4\u56de\u6240\u4ee3\u8868\u6708\u4efd\u6240\u5728\u5b63\u8282\u7684\u540d\u79f0\uff08\u4e0d\u7528\u8003\u8651\u6708\u4efd\u7684\u65e5\u671f\uff09\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6d4b\u8bd5\u591a\u8fd4\u56de\u503c\u51fd\u6570\u7684\u9519\u8bef \u4e0b\u4e00\u8282\uff1a for \u7ed3\u6784","title":"5.3 switch \u7ed3\u6784"},{"location":"05.3/#53-switch","text":"\u76f8\u6bd4\u8f83 C \u548c Java \u7b49\u5176\u5b83\u8bed\u8a00\u800c\u8a00\uff0cGo \u8bed\u8a00\u4e2d\u7684 switch \u7ed3\u6784\u4f7f\u7528\u4e0a\u66f4\u52a0\u7075\u6d3b\u3002\u5b83\u63a5\u53d7\u4efb\u610f\u5f62\u5f0f\u7684\u8868\u8fbe\u5f0f\uff1a switch var1 { case val1 : ... case val2 : ... default : ... } \u53d8\u91cf var1 \u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\uff0c\u800c val1 \u548c val2 \u5219\u53ef\u4ee5\u662f\u540c\u7c7b\u578b\u7684\u4efb\u610f\u503c\u3002\u7c7b\u578b\u4e0d\u88ab\u5c40\u9650\u4e8e\u5e38\u91cf\u6216\u6574\u6570\uff0c\u4f46\u5fc5\u987b\u662f\u76f8\u540c\u7684\u7c7b\u578b\uff1b\u6216\u8005\u6700\u7ec8\u7ed3\u679c\u4e3a\u76f8\u540c\u7c7b\u578b\u7684\u8868\u8fbe\u5f0f\u3002\u524d\u82b1\u62ec\u53f7 { \u5fc5\u987b\u548c switch \u5173\u952e\u5b57\u5728\u540c\u4e00\u884c\u3002 \u60a8\u53ef\u4ee5\u540c\u65f6\u6d4b\u8bd5\u591a\u4e2a\u53ef\u80fd\u7b26\u5408\u6761\u4ef6\u7684\u503c\uff0c\u4f7f\u7528\u9017\u53f7\u5206\u5272\u5b83\u4eec\uff0c\u4f8b\u5982\uff1a case val1, val2, val3 \u3002 \u6bcf\u4e00\u4e2a case \u5206\u652f\u90fd\u662f\u552f\u4e00\u7684\uff0c\u4ece\u4e0a\u81f3\u4e0b\u9010\u4e00\u6d4b\u8bd5\uff0c\u76f4\u5230\u5339\u914d\u4e3a\u6b62\u3002\uff08 Go \u8bed\u8a00\u4f7f\u7528\u5feb\u901f\u7684\u67e5\u627e\u7b97\u6cd5\u6765\u6d4b\u8bd5 switch \u6761\u4ef6\u4e0e case \u5206\u652f\u7684\u5339\u914d\u60c5\u51b5\uff0c\u76f4\u5230\u7b97\u6cd5\u5339\u914d\u5230\u67d0\u4e2a case \u6216\u8005\u8fdb\u5165 default \u6761\u4ef6\u4e3a\u6b62\u3002\uff09 \u4e00\u65e6\u6210\u529f\u5730\u5339\u914d\u5230\u67d0\u4e2a\u5206\u652f\uff0c\u5728\u6267\u884c\u5b8c\u76f8\u5e94\u4ee3\u7801\u540e\u5c31\u4f1a\u9000\u51fa\u6574\u4e2a switch \u4ee3\u7801\u5757\uff0c\u4e5f\u5c31\u662f\u8bf4\u60a8\u4e0d\u9700\u8981\u7279\u522b\u4f7f\u7528 break \u8bed\u53e5\u6765\u8868\u793a\u7ed3\u675f\u3002 \u56e0\u6b64\uff0c\u7a0b\u5e8f\u4e5f\u4e0d\u4f1a\u81ea\u52a8\u5730\u53bb\u6267\u884c\u4e0b\u4e00\u4e2a\u5206\u652f\u7684\u4ee3\u7801\u3002\u5982\u679c\u5728\u6267\u884c\u5b8c\u6bcf\u4e2a\u5206\u652f\u7684\u4ee3\u7801\u540e\uff0c\u8fd8\u5e0c\u671b\u7ee7\u7eed\u6267\u884c\u540e\u7eed\u5206\u652f\u7684\u4ee3\u7801\uff0c\u53ef\u4ee5\u4f7f\u7528 fallthrough \u5173\u952e\u5b57\u6765\u8fbe\u5230\u76ee\u7684\u3002 \u56e0\u6b64\uff1a switch i { case 0 : // \u7a7a\u5206\u652f\uff0c\u53ea\u6709\u5f53 i == 0 \u65f6\u624d\u4f1a\u8fdb\u5165\u5206\u652f case 1 : f () // \u5f53 i == 0 \u65f6\u51fd\u6570\u4e0d\u4f1a\u88ab\u8c03\u7528 } \u5e76\u4e14\uff1a switch i { case 0 : fallthrough case 1 : f () // \u5f53 i == 0 \u65f6\u51fd\u6570\u4e5f\u4f1a\u88ab\u8c03\u7528 } \u5728 case ...: \u8bed\u53e5\u4e4b\u540e\uff0c\u60a8\u4e0d\u9700\u8981\u4f7f\u7528\u82b1\u62ec\u53f7\u5c06\u591a\u884c\u8bed\u53e5\u62ec\u8d77\u6765\uff0c\u4f46\u60a8\u53ef\u4ee5\u5728\u5206\u652f\u4e2d\u8fdb\u884c\u4efb\u610f\u5f62\u5f0f\u7684\u7f16\u7801\u3002\u5f53\u4ee3\u7801\u5757\u53ea\u6709\u4e00\u884c\u65f6\uff0c\u53ef\u4ee5\u76f4\u63a5\u653e\u7f6e\u5728 case \u8bed\u53e5\u4e4b\u540e\u3002 \u60a8\u540c\u6837\u53ef\u4ee5\u4f7f\u7528 return \u8bed\u53e5\u6765\u63d0\u524d\u7ed3\u675f\u4ee3\u7801\u5757\u7684\u6267\u884c\u3002\u5f53\u60a8\u5728 switch \u8bed\u53e5\u5757\u4e2d\u4f7f\u7528 return \u8bed\u53e5\uff0c\u5e76\u4e14\u60a8\u7684\u51fd\u6570\u662f\u6709\u8fd4\u56de\u503c\u7684\uff0c\u60a8\u8fd8\u9700\u8981\u5728 switch \u4e4b\u540e\u6dfb\u52a0\u76f8\u5e94\u7684 return \u8bed\u53e5\u4ee5\u786e\u4fdd\u51fd\u6570\u59cb\u7ec8\u4f1a\u8fd4\u56de\u3002 \u53ef\u9009\u7684 default \u5206\u652f\u53ef\u4ee5\u51fa\u73b0\u5728\u4efb\u4f55\u987a\u5e8f\uff0c\u4f46\u6700\u597d\u5c06\u5b83\u653e\u5728\u6700\u540e\u3002\u5b83\u7684\u4f5c\u7528\u7c7b\u4f3c\u4e0e if-else \u8bed\u53e5\u4e2d\u7684 else \uff0c\u8868\u793a\u4e0d\u7b26\u5408\u4efb\u4f55\u5df2\u7ed9\u51fa\u6761\u4ef6\u65f6\uff0c\u6267\u884c\u76f8\u5173\u8bed\u53e5\u3002 \u793a\u4f8b 5.4 switch1.go \uff1a package main import \"fmt\" func main () { var num1 int = 100 switch num1 { case 98 , 99 : fmt . Println ( \"It's equal to 98\" ) case 100 : fmt . Println ( \"It's equal to 100\" ) default : fmt . Println ( \"It's not equal to 98 or 100\" ) } } \u8f93\u51fa\uff1a It's equal to 100 \u5728\u7b2c 12.1 \u8282\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528 switch \u8bed\u53e5\u5224\u65ad\u4ece\u952e\u76d8\u8f93\u5165\u7684\u5b57\u7b26\uff08\u8be6\u89c1 \u7b2c 12.2 \u8282 \u7684 switch.go \uff09\u3002 switch \u8bed\u53e5\u7684\u7b2c\u4e8c\u79cd\u5f62\u5f0f\u662f\u4e0d\u63d0\u4f9b\u4efb\u4f55\u88ab\u5224\u65ad\u7684\u503c\uff08\u5b9e\u9645\u4e0a\u9ed8\u8ba4\u4e3a\u5224\u65ad\u662f\u5426\u4e3a true \uff09\uff0c\u7136\u540e\u5728\u6bcf\u4e2a case \u5206\u652f\u4e2d\u8fdb\u884c\u6d4b\u8bd5\u4e0d\u540c\u7684\u6761\u4ef6\u3002\u5f53\u4efb\u4e00\u5206\u652f\u7684\u6d4b\u8bd5\u7ed3\u679c\u4e3a true \u65f6\uff0c\u8be5\u5206\u652f\u7684\u4ee3\u7801\u4f1a\u88ab\u6267\u884c\u3002\u8fd9\u770b\u8d77\u6765\u975e\u5e38\u50cf\u94fe\u5f0f\u7684 if-else \u8bed\u53e5\uff0c\u4f46\u662f\u5728\u6d4b\u8bd5\u6761\u4ef6\u975e\u5e38\u591a\u7684\u60c5\u51b5\u4e0b\uff0c\u63d0\u4f9b\u4e86\u53ef\u8bfb\u6027\u66f4\u597d\u7684\u4e66\u5199\u65b9\u5f0f\u3002 switch { case condition1 : ... case condition2 : ... default : ... } \u4f8b\u5982\uff1a switch { case i < 0 : f1 () case i == 0 : f2 () case i > 0 : f3 () } \u4efb\u4f55\u652f\u6301\u8fdb\u884c\u76f8\u7b49\u5224\u65ad\u7684\u7c7b\u578b\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u6d4b\u8bd5\u8868\u8fbe\u5f0f\u7684\u6761\u4ef6\uff0c\u5305\u62ec int \u3001 string \u3001\u6307\u9488\u7b49\u3002 \u793a\u4f8b 5.4 switch2.go \uff1a package main import \"fmt\" func main () { var num1 int = 7 switch { case num1 < 0 : fmt . Println ( \"Number is negative\" ) case num1 > 0 && num1 < 10 : fmt . Println ( \"Number is between 0 and 10\" ) default : fmt . Println ( \"Number is 10 or greater\" ) } } \u8f93\u51fa\uff1a Number is between 0 and 10 switch \u8bed\u53e5\u7684\u7b2c\u4e09\u79cd\u5f62\u5f0f\u662f\u5305\u542b\u4e00\u4e2a\u521d\u59cb\u5316\u8bed\u53e5\uff1a switch initialization { case val1 : ... case val2 : ... default : ... } \u8fd9\u79cd\u5f62\u5f0f\u53ef\u4ee5\u975e\u5e38\u4f18\u96c5\u5730\u8fdb\u884c\u6761\u4ef6\u5224\u65ad\uff1a switch result := calculate (); { case result < 0 : ... case result > 0 : ... default : // 0 } \u5728\u4e0b\u9762\u8fd9\u4e2a\u4ee3\u7801\u7247\u6bb5\u4e2d\uff0c\u53d8\u91cf a \u548c b \u88ab\u5e73\u884c\u521d\u59cb\u5316\uff0c\u7136\u540e\u4f5c\u4e3a\u5224\u65ad\u6761\u4ef6\uff1a switch a , b := x [ i ], y [ j ]; { case a < b : t = - 1 case a == b : t = 0 case a > b : t = 1 } switch \u8bed\u53e5\u8fd8\u53ef\u4ee5\u88ab\u7528\u4e8e type-switch\uff08\u8be6\u89c1 \u7b2c 11.4 \u8282 \uff09\u6765\u5224\u65ad\u67d0\u4e2a interface \u53d8\u91cf\u4e2d\u5b9e\u9645\u5b58\u50a8\u7684\u53d8\u91cf\u7c7b\u578b\u3002 \u95ee\u9898 5.1\uff1a \u8bf7\u8bf4\u51fa\u4e0b\u9762\u4ee3\u7801\u7247\u6bb5\u8f93\u51fa\u7684\u7ed3\u679c\uff1a k := 6 switch k { case 4 : fmt . Println ( \"was <= 4\" ) fallthrough case 5 : fmt . Println ( \"was <= 5\" ) fallthrough case 6 : fmt . Println ( \"was <= 6\" ) fallthrough case 7 : fmt . Println ( \"was <= 7\" ) fallthrough case 8 : fmt . Println ( \"was <= 8\" ) fallthrough default : fmt . Println ( \"default case\" ) } \u7ec3\u4e60 5.2\uff1a season.go \uff1a \u5199\u4e00\u4e2a Season() \u51fd\u6570\uff0c\u8981\u6c42\u63a5\u53d7\u4e00\u4e2a\u4ee3\u8868\u6708\u4efd\u7684\u6570\u5b57\uff0c\u7136\u540e\u8fd4\u56de\u6240\u4ee3\u8868\u6708\u4efd\u6240\u5728\u5b63\u8282\u7684\u540d\u79f0\uff08\u4e0d\u7528\u8003\u8651\u6708\u4efd\u7684\u65e5\u671f\uff09\u3002","title":"5.3 switch \u7ed3\u6784"},{"location":"05.3/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6d4b\u8bd5\u591a\u8fd4\u56de\u503c\u51fd\u6570\u7684\u9519\u8bef \u4e0b\u4e00\u8282\uff1a for \u7ed3\u6784","title":"\u94fe\u63a5"},{"location":"05.4/","text":"5.4 for \u7ed3\u6784 \u00b6 \u5982\u679c\u60f3\u8981\u91cd\u590d\u6267\u884c\u67d0\u4e9b\u8bed\u53e5\uff0cGo \u8bed\u8a00\u4e2d\u60a8\u53ea\u6709 for \u7ed3\u6784\u53ef\u4ee5\u4f7f\u7528\u3002\u4e0d\u8981\u5c0f\u770b\u5b83\uff0c\u8fd9\u4e2a for \u7ed3\u6784\u6bd4\u5176\u5b83\u8bed\u8a00\u4e2d\u7684\u66f4\u4e3a\u7075\u6d3b\u3002 \u6ce8\u610f\u4e8b\u9879 \u5176\u5b83\u8bb8\u591a\u8bed\u8a00\u4e2d\u4e5f\u6ca1\u6709\u53d1\u73b0\u548c do-while \u5b8c\u5168\u5bf9\u7b49\u7684 for \u7ed3\u6784\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u8fd9\u79cd\u9700\u6c42\u5e76\u4e0d\u662f\u90a3\u4e48\u5f3a\u70c8\u3002 5.4.1 \u57fa\u4e8e\u8ba1\u6570\u5668\u7684\u8fed\u4ee3 \u00b6 \u6587\u4ef6 for1.go \u4e2d\u6f14\u793a\u4e86\u6700\u7b80\u5355\u7684\u57fa\u4e8e\u8ba1\u6570\u5668\u7684\u8fed\u4ee3\uff0c\u57fa\u672c\u5f62\u5f0f\u4e3a\uff1a for \u521d\u59cb\u5316\u8bed\u53e5; \u6761\u4ef6\u8bed\u53e5; \u4fee\u9970\u8bed\u53e5 {} \u793a\u4f8b 5.6 for1.go \uff1a package main import \"fmt\" func main () { for i := 0 ; i < 5 ; i ++ { fmt . Printf ( \"This is the %d iteration\\n\" , i ) } } \u8f93\u51fa\uff1a This is the 0 iteration This is the 1 iteration This is the 2 iteration This is the 3 iteration This is the 4 iteration \u7531\u82b1\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u4ee3\u7801\u5757\u4f1a\u88ab\u91cd\u590d\u6267\u884c\u5df2\u77e5\u6b21\u6570\uff0c\u8be5\u6b21\u6570\u662f\u6839\u636e\u8ba1\u6570\u5668\uff08\u6b64\u4f8b\u4e3a i \uff09\u51b3\u5b9a\u7684\u3002\u5faa\u73af\u5f00\u59cb\u524d\uff0c\u4f1a\u6267\u884c\u4e14\u4ec5\u4f1a\u6267\u884c\u4e00\u6b21\u521d\u59cb\u5316\u8bed\u53e5 i := 0; \uff1b\u8fd9\u6bd4\u5728\u5faa\u73af\u4e4b\u524d\u58f0\u660e\u66f4\u4e3a\u7b80\u77ed\u3002\u7d27\u63a5\u7740\u7684\u662f\u6761\u4ef6\u8bed\u53e5 i < 5; \uff0c\u5728\u6bcf\u6b21\u5faa\u73af\u5f00\u59cb\u524d\u90fd\u4f1a\u8fdb\u884c\u5224\u65ad\uff0c\u4e00\u65e6\u5224\u65ad\u7ed3\u679c\u4e3a false \uff0c\u5219\u9000\u51fa\u5faa\u73af\u4f53\u3002\u6700\u540e\u4e00\u90e8\u5206\u4e3a\u4fee\u9970\u8bed\u53e5 i++ \uff0c\u4e00\u822c\u7528\u4e8e\u589e\u52a0\u6216\u51cf\u5c11\u8ba1\u6570\u5668\u3002 \u8fd9\u4e09\u90e8\u5206\u7ec4\u6210\u7684\u5faa\u73af\u7684\u5934\u90e8\uff0c\u5b83\u4eec\u4e4b\u95f4\u4f7f\u7528\u5206\u53f7 ; \u76f8\u9694\uff0c\u4f46\u5e76\u4e0d\u9700\u8981\u62ec\u53f7 () \u5c06\u5b83\u4eec\u62ec\u8d77\u6765\u3002\u4f8b\u5982\uff1a for (i = 0; i < 10; i++) { } \uff0c\u8fd9\u662f\u65e0\u6548\u7684\u4ee3\u7801\uff01 \u540c\u6837\u7684\uff0c\u5de6\u82b1\u62ec\u53f7 { \u5fc5\u987b\u548c for \u8bed\u53e5\u5728\u540c\u4e00\u884c\uff0c\u8ba1\u6570\u5668\u7684\u751f\u547d\u5468\u671f\u5728\u9047\u5230\u53f3\u82b1\u62ec\u53f7 } \u65f6\u4fbf\u7ec8\u6b62\u3002\u4e00\u822c\u4e60\u60ef\u4f7f\u7528 i\u3001j\u3001z \u6216 ix \u7b49\u8f83\u77ed\u7684\u540d\u79f0\u547d\u540d\u8ba1\u6570\u5668\u3002 \u7279\u522b\u6ce8\u610f\uff0c\u6c38\u8fdc\u4e0d\u8981\u5728\u5faa\u73af\u4f53\u5185\u4fee\u6539\u8ba1\u6570\u5668\uff0c\u8fd9\u5728\u4efb\u4f55\u8bed\u8a00\u4e2d\u90fd\u662f\u975e\u5e38\u5dee\u7684\u5b9e\u8df5\uff01 \u60a8\u8fd8\u53ef\u4ee5\u5728\u5faa\u73af\u4e2d\u540c\u65f6\u4f7f\u7528\u591a\u4e2a\u8ba1\u6570\u5668\uff1a for i , j := 0 , N ; i < j ; i , j = i + 1 , j - 1 {} \u8fd9\u5f97\u76ca\u4e8e Go \u8bed\u8a00\u5177\u6709\u7684\u5e73\u884c\u8d4b\u503c\u7684\u7279\u6027\uff08\u53ef\u4ee5\u67e5\u770b \u7b2c 7 \u7ae0 string_reverse.go \u4e2d\u53cd\u8f6c\u6570\u7ec4\u7684\u793a\u4f8b\uff09\u3002 \u60a8\u53ef\u4ee5\u5c06\u4e24\u4e2a for \u5faa\u73af\u5d4c\u5957\u8d77\u6765\uff1a for i := 0 ; i < 5 ; i ++ { for j := 0 ; j < 10 ; j ++ { println ( j ) } } \u5982\u679c\u60a8\u4f7f\u7528 for \u5faa\u73af\u8fed\u4ee3\u4e00\u4e2a Unicode \u7f16\u7801\u7684\u5b57\u7b26\u4e32\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f \u793a\u4f8b 5.7 for_string.go \uff1a package main import \"fmt\" func main () { str := \"Go is a beautiful language!\" fmt . Printf ( \"The length of str is: %d\\n\" , len ( str )) for ix := 0 ; ix < len ( str ); ix ++ { fmt . Printf ( \"Character on position %d is: %c \\n\" , ix , str [ ix ]) } str2 := \"\u65e5\u672c\u8a9e\" fmt . Printf ( \"The length of str2 is: %d\\n\" , len ( str2 )) for ix := 0 ; ix < len ( str2 ); ix ++ { fmt . Printf ( \"Character on position %d is: %c \\n\" , ix , str2 [ ix ]) } } \u8f93\u51fa\uff1a The length of str is: 27 Character on position 0 is: G Character on position 1 is: o Character on position 2 is: Character on position 3 is: i Character on position 4 is: s Character on position 5 is: Character on position 6 is: a Character on position 7 is: Character on position 8 is: b Character on position 9 is: e Character on position 10 is: a Character on position 11 is: u Character on position 12 is: t Character on position 13 is: i Character on position 14 is: f Character on position 15 is: u Character on position 16 is: l Character on position 17 is: Character on position 18 is: l Character on position 19 is: a Character on position 20 is: n Character on position 21 is: g Character on position 22 is: u Character on position 23 is: a Character on position 24 is: g Character on position 25 is: e Character on position 26 is: ! The length of str2 is: 9 Character on position 0 is: \u00e6 Character on position 1 is: \u0097 Character on position 2 is: \u00a5 Character on position 3 is: \u00e6 Character on position 4 is: \u009c Character on position 5 is: \u00ac Character on position 6 is: \u00e8 Character on position 7 is: \u00aa Character on position 8 is: \u009e \u5982\u679c\u6211\u4eec\u6253\u5370 str \u548c str2 \u7684\u957f\u5ea6\uff0c\u4f1a\u5206\u522b\u5f97\u5230 27 \u548c 9 \u3002 \u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0cASCII \u7f16\u7801\u7684\u5b57\u7b26\u5360\u7528 1 \u4e2a\u5b57\u8282\uff0c\u65e2\u6bcf\u4e2a\u7d22\u5f15\u90fd\u6307\u5411\u4e0d\u540c\u7684\u5b57\u7b26\uff0c\u800c\u975e ASCII \u7f16\u7801\u7684\u5b57\u7b26\uff08\u5360\u6709 2 \u5230 4 \u4e2a\u5b57\u8282\uff09\u4e0d\u80fd\u5355\u7eaf\u5730\u4f7f\u7528\u7d22\u5f15\u6765\u5224\u65ad\u662f\u5426\u4e3a\u540c\u4e00\u4e2a\u5b57\u7b26\u3002\u6211\u4eec\u4f1a\u5728 \u7b2c 5.4.4 \u8282 \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u7ec3\u4e60\u9898 \u00b6 \u7ec3\u4e60 5.4 for_loop.go \u4f7f\u7528 for \u7ed3\u6784\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5faa\u73af\u3002\u8981\u6c42\u5faa\u73af 15 \u6b21\u7136\u540e\u4f7f\u7528 fmt \u5305\u6765\u6253\u5370\u8ba1\u6570\u5668\u7684\u503c\u3002 \u4f7f\u7528 goto \u8bed\u53e5\u91cd\u5199\u5faa\u73af\uff0c\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528 for \u5173\u952e\u5b57\u3002 \u7ec3\u4e60 5.5 for_character.go \u521b\u5efa\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8981\u6c42\u80fd\u591f\u6253\u5370\u7c7b\u4f3c\u4e0b\u9762\u7684\u7ed3\u679c\uff08\u5c3e\u884c\u8fbe 25 \u4e2a\u5b57\u7b26\u4e3a\u6b62\uff09\uff1a G GG GGG GGGG GGGGG GGGGGG \u4f7f\u7528 2 \u5c42\u5d4c\u5957 for \u5faa\u73af\u3002 \u4ec5\u7528 1 \u5c42 for \u5faa\u73af\u4ee5\u53ca\u5b57\u7b26\u4e32\u8fde\u63a5\u3002 \u7ec3\u4e60 5.6 bitwise_complement.go \u4f7f\u7528\u6309\u4f4d\u8865\u7801\u4ece 0 \u5230 10\uff0c\u4f7f\u7528\u4f4d\u8868\u8fbe\u5f0f %b \u6765\u683c\u5f0f\u5316\u8f93\u51fa\u3002 \u7ec3\u4e60 5.7 Fizz-Buzz \u95ee\u9898\uff1a fizzbuzz.go \u5199\u4e00\u4e2a\u4ece 1 \u6253\u5370\u5230 100 \u7684\u7a0b\u5e8f\uff0c\u4f46\u662f\u6bcf\u5f53\u9047\u5230 3 \u7684\u500d\u6570\u65f6\uff0c\u4e0d\u6253\u5370\u76f8\u5e94\u7684\u6570\u5b57\uff0c\u4f46\u6253\u5370\u4e00\u6b21 \"Fizz\"\u3002\u9047\u5230 5 \u7684\u500d\u6570\u65f6\uff0c\u6253\u5370 Buzz \u800c\u4e0d\u662f\u76f8\u5e94\u7684\u6570\u5b57\u3002\u5bf9\u4e8e\u540c\u65f6\u4e3a 3 \u548c 5 \u7684\u500d\u6570\u7684\u6570\uff0c\u6253\u5370 FizzBuzz \uff08\u63d0\u793a\uff1a\u4f7f\u7528 switch \u8bed\u53e5\uff09\u3002 \u7ec3\u4e60 5.8 rectangle_stars.go \u4f7f\u7528 * \u7b26\u53f7\u6253\u5370\u5bbd\u4e3a 20\uff0c\u9ad8\u4e3a 10 \u7684\u77e9\u5f62\u3002 5.4.2 \u57fa\u4e8e\u6761\u4ef6\u5224\u65ad\u7684\u8fed\u4ee3 \u00b6 for \u7ed3\u6784\u7684\u7b2c\u4e8c\u79cd\u5f62\u5f0f\u662f\u6ca1\u6709\u5934\u90e8\u7684\u6761\u4ef6\u5224\u65ad\u8fed\u4ee3\uff08\u7c7b\u4f3c\u5176\u5b83\u8bed\u8a00\u4e2d\u7684 while \u5faa\u73af\uff09\uff0c\u57fa\u672c\u5f62\u5f0f\u4e3a\uff1a for \u6761\u4ef6\u8bed\u53e5 {} \u3002 \u60a8\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u662f\u6ca1\u6709\u521d\u59cb\u5316\u8bed\u53e5\u548c\u4fee\u9970\u8bed\u53e5\u7684 for \u7ed3\u6784\uff0c\u56e0\u6b64 ;; \u4fbf\u662f\u591a\u4f59\u7684\u4e86\u3002 Listing 5.8 for2.go \uff1a package main import \"fmt\" func main () { var i int = 5 for i >= 0 { i = i - 1 fmt . Printf ( \"The variable i is now: %d\\n\" , i ) } } \u8f93\u51fa\uff1a The variable i is now: 4 The variable i is now: 3 The variable i is now: 2 The variable i is now: 1 The variable i is now: 0 The variable i is now: -1 5.4.3 \u65e0\u9650\u5faa\u73af \u00b6 \u6761\u4ef6\u8bed\u53e5\u662f\u53ef\u4ee5\u88ab\u7701\u7565\u7684\uff0c\u5982 i:=0; ; i++ \u6216 for { } \u6216 for ;; { } \uff08 ;; \u4f1a\u5728\u4f7f\u7528 gofmt \u65f6\u88ab\u79fb\u9664\uff09\uff1a\u8fd9\u4e9b\u5faa\u73af\u7684\u672c\u8d28\u5c31\u662f\u65e0\u9650\u5faa\u73af\u3002\u6700\u540e\u4e00\u4e2a\u5f62\u5f0f\u4e5f\u53ef\u4ee5\u88ab\u6539\u5199\u4e3a for true { } \uff0c\u4f46\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u4f1a\u76f4\u63a5\u5199 for { } \u3002 \u5982\u679c for \u5faa\u73af\u7684\u5934\u90e8\u6ca1\u6709\u6761\u4ef6\u8bed\u53e5\uff0c\u90a3\u4e48\u5c31\u4f1a\u8ba4\u4e3a\u6761\u4ef6\u6c38\u8fdc\u4e3a true\uff0c\u56e0\u6b64\u5faa\u73af\u4f53\u5185\u5fc5\u987b\u6709\u76f8\u5173\u7684\u6761\u4ef6\u5224\u65ad\u4ee5\u786e\u4fdd\u4f1a\u5728\u67d0\u4e2a\u65f6\u523b\u9000\u51fa\u5faa\u73af\u3002 \u60f3\u8981\u76f4\u63a5\u9000\u51fa\u5faa\u73af\u4f53\uff0c\u53ef\u4ee5\u4f7f\u7528 break \u8bed\u53e5\uff08\u7b2c 5.5 \u8282\uff09\u6216 return \u8bed\u53e5\u76f4\u63a5\u8fd4\u56de\uff08\u7b2c 6.1 \u8282\uff09\u3002 \u4f46\u8fd9\u4e24\u8005\u4e4b\u95f4\u6709\u6240\u533a\u522b\uff0cbreak \u53ea\u662f\u9000\u51fa\u5f53\u524d\u7684\u5faa\u73af\u4f53\uff0c\u800c return \u8bed\u53e5\u63d0\u524d\u5bf9\u51fd\u6570\u8fdb\u884c\u8fd4\u56de\uff0c\u4e0d\u4f1a\u6267\u884c\u540e\u7eed\u7684\u4ee3\u7801\u3002 \u65e0\u9650\u5faa\u73af\u7684\u7ecf\u5178\u5e94\u7528\u662f\u670d\u52a1\u5668\uff0c\u7528\u4e8e\u4e0d\u65ad\u7b49\u5f85\u548c\u63a5\u53d7\u65b0\u7684\u8bf7\u6c42\u3002 for t , err = p . Token (); err == nil ; t , err = p . Token () { ... } 5.4.4 for-range \u7ed3\u6784 \u00b6 \u8fd9\u662f Go \u7279\u6709\u7684\u4e00\u79cd\u7684\u8fed\u4ee3\u7ed3\u6784\uff0c\u60a8\u4f1a\u53d1\u73b0\u5b83\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\u90fd\u975e\u5e38\u6709\u7528\u3002\u5b83\u53ef\u4ee5\u8fed\u4ee3\u4efb\u4f55\u4e00\u4e2a\u96c6\u5408\uff08\u5305\u62ec\u6570\u7ec4\u548c map \uff0c\u8be6\u89c1\u7b2c 7 \u548c 8 \u7ae0\uff09\u3002\u8bed\u6cd5\u4e0a\u5f88\u7c7b\u4f3c\u5176\u5b83\u8bed\u8a00\u4e2d\u7684 foreach \u8bed\u53e5\uff0c\u4f46\u60a8\u4f9d\u65e7\u53ef\u4ee5\u83b7\u5f97\u6bcf\u6b21\u8fed\u4ee3\u6240\u5bf9\u5e94\u7684\u7d22\u5f15\u3002\u4e00\u822c\u5f62\u5f0f\u4e3a\uff1a for ix, val := range coll { } \u3002 \u8981\u6ce8\u610f\u7684\u662f\uff0c val \u59cb\u7ec8\u4e3a\u96c6\u5408\u4e2d\u5bf9\u5e94\u7d22\u5f15\u7684\u503c\u62f7\u8d1d\uff0c\u56e0\u6b64\u5b83\u4e00\u822c\u53ea\u5177\u6709\u53ea\u8bfb\u6027\u8d28\uff0c\u5bf9\u5b83\u6240\u505a\u7684\u4efb\u4f55\u4fee\u6539\u90fd\u4e0d\u4f1a\u5f71\u54cd\u5230\u96c6\u5408\u4e2d\u539f\u6709\u7684\u503c\uff08 \u8bd1\u8005\u6ce8\uff1a\u5982\u679c val \u4e3a\u6307\u9488\uff0c\u5219\u4f1a\u4ea7\u751f\u6307\u9488\u7684\u62f7\u8d1d\uff0c\u4f9d\u65e7\u53ef\u4ee5\u4fee\u6539\u96c6\u5408\u4e2d\u7684\u539f\u503c \uff09\u3002\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f Unicode \u7f16\u7801\u7684\u5b57\u7b26\uff08\u6216\u79f0\u4e4b\u4e3a rune \uff09\u96c6\u5408\uff0c\u56e0\u6b64\u60a8\u4e5f\u53ef\u4ee5\u7528\u5b83\u8fed\u4ee3\u5b57\u7b26\u4e32\uff1a for pos , char := range str { ... } \u6bcf\u4e2a rune \u5b57\u7b26\u548c\u7d22\u5f15\u5728 for-range \u5faa\u73af\u4e2d\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002\u5b83\u80fd\u591f\u81ea\u52a8\u6839\u636e UTF-8 \u89c4\u5219\u8bc6\u522b Unicode \u7f16\u7801\u7684\u5b57\u7b26\u3002 \u793a\u4f8b 5.9 range_string.go \uff1a package main import \"fmt\" func main () { str := \"Go is a beautiful language!\" fmt . Printf ( \"The length of str is: %d\\n\" , len ( str )) for pos , char := range str { fmt . Printf ( \"Character on position %d is: %c \\n\" , pos , char ) } fmt . Println () str2 := \"Chinese: \u65e5\u672c\u8a9e\" fmt . Printf ( \"The length of str2 is: %d\\n\" , len ( str2 )) for pos , char := range str2 { fmt . Printf ( \"character %c starts at byte position %d\\n\" , char , pos ) } fmt . Println () fmt . Println ( \"index int(rune) rune char bytes\" ) for index , rune := range str2 { fmt . Printf ( \"%-2d %d %U '%c' % X\\n\" , index , rune , rune , rune , [] byte ( string ( rune ))) } } \u8f93\u51fa\uff1a The length of str is: 27 Character on position 0 is: G Character on position 1 is: o Character on position 2 is: Character on position 3 is: i Character on position 4 is: s Character on position 5 is: Character on position 6 is: a Character on position 7 is: Character on position 8 is: b Character on position 9 is: e Character on position 10 is: a Character on position 11 is: u Character on position 12 is: t Character on position 13 is: i Character on position 14 is: f Character on position 15 is: u Character on position 16 is: l Character on position 17 is: Character on position 18 is: l Character on position 19 is: a Character on position 20 is: n Character on position 21 is: g Character on position 22 is: u Character on position 23 is: a Character on position 24 is: g Character on position 25 is: e Character on position 26 is: ! The length of str2 is: 18 character C starts at byte position 0 character h starts at byte position 1 character i starts at byte position 2 character n starts at byte position 3 character e starts at byte position 4 character s starts at byte position 5 character e starts at byte position 6 character : starts at byte position 7 character starts at byte position 8 character \u65e5 starts at byte position 9 character \u672c starts at byte position 12 character \u8a9e starts at byte position 15 index int(rune) rune char bytes 0 67 U+0043 'C' 43 1 104 U+0068 'h' 68 2 105 U+0069 'i' 69 3 110 U+006E 'n' 6E 4 101 U+0065 'e' 65 5 115 U+0073 's' 73 6 101 U+0065 'e' 65 7 58 U+003A ':' 3A 8 32 U+0020 ' ' 20 9 26085 U+65E5 '\u65e5' E6 97 A5 12 26412 U+672C '\u672c' E6 9C AC 15 35486 U+8A9E '\u8a9e' E8 AA 9E \u8bf7\u5c06\u8f93\u51fa\u7ed3\u679c\u548c Listing 5.7\uff08 for_string.go \uff09\u8fdb\u884c\u5bf9\u6bd4\u3002 \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5e38\u7528\u82f1\u6587\u5b57\u7b26\u4f7f\u7528 1 \u4e2a\u5b57\u8282\u8868\u793a\uff0c\u800c\u6c49\u5b57\uff08 \u8bd1\u8005\u6ce8\uff1a\u4e25\u683c\u6765\u8bf4\uff0c\u201cChinese: \u65e5\u672c\u8a9e\u201d\u7684 Chinese \u5e94\u8be5\u662f Japanese \uff09\u4f7f\u7528 3 \u4e2a\u5b57\u7b26\u8868\u793a\u3002 \u7ec3\u4e60 5.9 \u4ee5\u4e0b\u7a0b\u5e8f\u7684\u8f93\u51fa\u7ed3\u679c\u662f\u4ec0\u4e48\uff1f for i := 0 ; i < 5 ; i ++ { var v int fmt . Printf ( \"%d \" , v ) v = 5 } \u95ee\u9898 5.2\uff1a \u8bf7\u63cf\u8ff0\u4ee5\u4e0b for \u5faa\u73af\u7684\u8f93\u51fa\u7ed3\u679c\uff1a 1. for i := 0 ; ; i ++ { fmt . Println ( \"Value of i is now:\" , i ) } 2. for i := 0 ; i < 3 ; { fmt . Println ( \"Value of i:\" , i ) } 3. s := \"\" for ; s != \"aaaaa\" ; { fmt . Println ( \"Value of s:\" , s ) s = s + \"a\" } 4. for i , j , s := 0 , 5 , \"a\" ; i < 3 && j < 100 && s != \"aaaaa\" ; i , j , s = i + 1 , j + 1 , s + \"a\" { fmt . Println ( \"Value of i, j, s:\" , i , j , s ) } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a switch \u7ed3\u6784 \u4e0b\u4e00\u8282\uff1a Break \u4e0e continue","title":"5.4 for \u7ed3\u6784"},{"location":"05.4/#54-for","text":"\u5982\u679c\u60f3\u8981\u91cd\u590d\u6267\u884c\u67d0\u4e9b\u8bed\u53e5\uff0cGo \u8bed\u8a00\u4e2d\u60a8\u53ea\u6709 for \u7ed3\u6784\u53ef\u4ee5\u4f7f\u7528\u3002\u4e0d\u8981\u5c0f\u770b\u5b83\uff0c\u8fd9\u4e2a for \u7ed3\u6784\u6bd4\u5176\u5b83\u8bed\u8a00\u4e2d\u7684\u66f4\u4e3a\u7075\u6d3b\u3002 \u6ce8\u610f\u4e8b\u9879 \u5176\u5b83\u8bb8\u591a\u8bed\u8a00\u4e2d\u4e5f\u6ca1\u6709\u53d1\u73b0\u548c do-while \u5b8c\u5168\u5bf9\u7b49\u7684 for \u7ed3\u6784\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u8fd9\u79cd\u9700\u6c42\u5e76\u4e0d\u662f\u90a3\u4e48\u5f3a\u70c8\u3002","title":"5.4 for \u7ed3\u6784"},{"location":"05.4/#541","text":"\u6587\u4ef6 for1.go \u4e2d\u6f14\u793a\u4e86\u6700\u7b80\u5355\u7684\u57fa\u4e8e\u8ba1\u6570\u5668\u7684\u8fed\u4ee3\uff0c\u57fa\u672c\u5f62\u5f0f\u4e3a\uff1a for \u521d\u59cb\u5316\u8bed\u53e5; \u6761\u4ef6\u8bed\u53e5; \u4fee\u9970\u8bed\u53e5 {} \u793a\u4f8b 5.6 for1.go \uff1a package main import \"fmt\" func main () { for i := 0 ; i < 5 ; i ++ { fmt . Printf ( \"This is the %d iteration\\n\" , i ) } } \u8f93\u51fa\uff1a This is the 0 iteration This is the 1 iteration This is the 2 iteration This is the 3 iteration This is the 4 iteration \u7531\u82b1\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u4ee3\u7801\u5757\u4f1a\u88ab\u91cd\u590d\u6267\u884c\u5df2\u77e5\u6b21\u6570\uff0c\u8be5\u6b21\u6570\u662f\u6839\u636e\u8ba1\u6570\u5668\uff08\u6b64\u4f8b\u4e3a i \uff09\u51b3\u5b9a\u7684\u3002\u5faa\u73af\u5f00\u59cb\u524d\uff0c\u4f1a\u6267\u884c\u4e14\u4ec5\u4f1a\u6267\u884c\u4e00\u6b21\u521d\u59cb\u5316\u8bed\u53e5 i := 0; \uff1b\u8fd9\u6bd4\u5728\u5faa\u73af\u4e4b\u524d\u58f0\u660e\u66f4\u4e3a\u7b80\u77ed\u3002\u7d27\u63a5\u7740\u7684\u662f\u6761\u4ef6\u8bed\u53e5 i < 5; \uff0c\u5728\u6bcf\u6b21\u5faa\u73af\u5f00\u59cb\u524d\u90fd\u4f1a\u8fdb\u884c\u5224\u65ad\uff0c\u4e00\u65e6\u5224\u65ad\u7ed3\u679c\u4e3a false \uff0c\u5219\u9000\u51fa\u5faa\u73af\u4f53\u3002\u6700\u540e\u4e00\u90e8\u5206\u4e3a\u4fee\u9970\u8bed\u53e5 i++ \uff0c\u4e00\u822c\u7528\u4e8e\u589e\u52a0\u6216\u51cf\u5c11\u8ba1\u6570\u5668\u3002 \u8fd9\u4e09\u90e8\u5206\u7ec4\u6210\u7684\u5faa\u73af\u7684\u5934\u90e8\uff0c\u5b83\u4eec\u4e4b\u95f4\u4f7f\u7528\u5206\u53f7 ; \u76f8\u9694\uff0c\u4f46\u5e76\u4e0d\u9700\u8981\u62ec\u53f7 () \u5c06\u5b83\u4eec\u62ec\u8d77\u6765\u3002\u4f8b\u5982\uff1a for (i = 0; i < 10; i++) { } \uff0c\u8fd9\u662f\u65e0\u6548\u7684\u4ee3\u7801\uff01 \u540c\u6837\u7684\uff0c\u5de6\u82b1\u62ec\u53f7 { \u5fc5\u987b\u548c for \u8bed\u53e5\u5728\u540c\u4e00\u884c\uff0c\u8ba1\u6570\u5668\u7684\u751f\u547d\u5468\u671f\u5728\u9047\u5230\u53f3\u82b1\u62ec\u53f7 } \u65f6\u4fbf\u7ec8\u6b62\u3002\u4e00\u822c\u4e60\u60ef\u4f7f\u7528 i\u3001j\u3001z \u6216 ix \u7b49\u8f83\u77ed\u7684\u540d\u79f0\u547d\u540d\u8ba1\u6570\u5668\u3002 \u7279\u522b\u6ce8\u610f\uff0c\u6c38\u8fdc\u4e0d\u8981\u5728\u5faa\u73af\u4f53\u5185\u4fee\u6539\u8ba1\u6570\u5668\uff0c\u8fd9\u5728\u4efb\u4f55\u8bed\u8a00\u4e2d\u90fd\u662f\u975e\u5e38\u5dee\u7684\u5b9e\u8df5\uff01 \u60a8\u8fd8\u53ef\u4ee5\u5728\u5faa\u73af\u4e2d\u540c\u65f6\u4f7f\u7528\u591a\u4e2a\u8ba1\u6570\u5668\uff1a for i , j := 0 , N ; i < j ; i , j = i + 1 , j - 1 {} \u8fd9\u5f97\u76ca\u4e8e Go \u8bed\u8a00\u5177\u6709\u7684\u5e73\u884c\u8d4b\u503c\u7684\u7279\u6027\uff08\u53ef\u4ee5\u67e5\u770b \u7b2c 7 \u7ae0 string_reverse.go \u4e2d\u53cd\u8f6c\u6570\u7ec4\u7684\u793a\u4f8b\uff09\u3002 \u60a8\u53ef\u4ee5\u5c06\u4e24\u4e2a for \u5faa\u73af\u5d4c\u5957\u8d77\u6765\uff1a for i := 0 ; i < 5 ; i ++ { for j := 0 ; j < 10 ; j ++ { println ( j ) } } \u5982\u679c\u60a8\u4f7f\u7528 for \u5faa\u73af\u8fed\u4ee3\u4e00\u4e2a Unicode \u7f16\u7801\u7684\u5b57\u7b26\u4e32\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f \u793a\u4f8b 5.7 for_string.go \uff1a package main import \"fmt\" func main () { str := \"Go is a beautiful language!\" fmt . Printf ( \"The length of str is: %d\\n\" , len ( str )) for ix := 0 ; ix < len ( str ); ix ++ { fmt . Printf ( \"Character on position %d is: %c \\n\" , ix , str [ ix ]) } str2 := \"\u65e5\u672c\u8a9e\" fmt . Printf ( \"The length of str2 is: %d\\n\" , len ( str2 )) for ix := 0 ; ix < len ( str2 ); ix ++ { fmt . Printf ( \"Character on position %d is: %c \\n\" , ix , str2 [ ix ]) } } \u8f93\u51fa\uff1a The length of str is: 27 Character on position 0 is: G Character on position 1 is: o Character on position 2 is: Character on position 3 is: i Character on position 4 is: s Character on position 5 is: Character on position 6 is: a Character on position 7 is: Character on position 8 is: b Character on position 9 is: e Character on position 10 is: a Character on position 11 is: u Character on position 12 is: t Character on position 13 is: i Character on position 14 is: f Character on position 15 is: u Character on position 16 is: l Character on position 17 is: Character on position 18 is: l Character on position 19 is: a Character on position 20 is: n Character on position 21 is: g Character on position 22 is: u Character on position 23 is: a Character on position 24 is: g Character on position 25 is: e Character on position 26 is: ! The length of str2 is: 9 Character on position 0 is: \u00e6 Character on position 1 is: \u0097 Character on position 2 is: \u00a5 Character on position 3 is: \u00e6 Character on position 4 is: \u009c Character on position 5 is: \u00ac Character on position 6 is: \u00e8 Character on position 7 is: \u00aa Character on position 8 is: \u009e \u5982\u679c\u6211\u4eec\u6253\u5370 str \u548c str2 \u7684\u957f\u5ea6\uff0c\u4f1a\u5206\u522b\u5f97\u5230 27 \u548c 9 \u3002 \u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0cASCII \u7f16\u7801\u7684\u5b57\u7b26\u5360\u7528 1 \u4e2a\u5b57\u8282\uff0c\u65e2\u6bcf\u4e2a\u7d22\u5f15\u90fd\u6307\u5411\u4e0d\u540c\u7684\u5b57\u7b26\uff0c\u800c\u975e ASCII \u7f16\u7801\u7684\u5b57\u7b26\uff08\u5360\u6709 2 \u5230 4 \u4e2a\u5b57\u8282\uff09\u4e0d\u80fd\u5355\u7eaf\u5730\u4f7f\u7528\u7d22\u5f15\u6765\u5224\u65ad\u662f\u5426\u4e3a\u540c\u4e00\u4e2a\u5b57\u7b26\u3002\u6211\u4eec\u4f1a\u5728 \u7b2c 5.4.4 \u8282 \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002","title":"5.4.1 \u57fa\u4e8e\u8ba1\u6570\u5668\u7684\u8fed\u4ee3"},{"location":"05.4/#_1","text":"\u7ec3\u4e60 5.4 for_loop.go \u4f7f\u7528 for \u7ed3\u6784\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5faa\u73af\u3002\u8981\u6c42\u5faa\u73af 15 \u6b21\u7136\u540e\u4f7f\u7528 fmt \u5305\u6765\u6253\u5370\u8ba1\u6570\u5668\u7684\u503c\u3002 \u4f7f\u7528 goto \u8bed\u53e5\u91cd\u5199\u5faa\u73af\uff0c\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528 for \u5173\u952e\u5b57\u3002 \u7ec3\u4e60 5.5 for_character.go \u521b\u5efa\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8981\u6c42\u80fd\u591f\u6253\u5370\u7c7b\u4f3c\u4e0b\u9762\u7684\u7ed3\u679c\uff08\u5c3e\u884c\u8fbe 25 \u4e2a\u5b57\u7b26\u4e3a\u6b62\uff09\uff1a G GG GGG GGGG GGGGG GGGGGG \u4f7f\u7528 2 \u5c42\u5d4c\u5957 for \u5faa\u73af\u3002 \u4ec5\u7528 1 \u5c42 for \u5faa\u73af\u4ee5\u53ca\u5b57\u7b26\u4e32\u8fde\u63a5\u3002 \u7ec3\u4e60 5.6 bitwise_complement.go \u4f7f\u7528\u6309\u4f4d\u8865\u7801\u4ece 0 \u5230 10\uff0c\u4f7f\u7528\u4f4d\u8868\u8fbe\u5f0f %b \u6765\u683c\u5f0f\u5316\u8f93\u51fa\u3002 \u7ec3\u4e60 5.7 Fizz-Buzz \u95ee\u9898\uff1a fizzbuzz.go \u5199\u4e00\u4e2a\u4ece 1 \u6253\u5370\u5230 100 \u7684\u7a0b\u5e8f\uff0c\u4f46\u662f\u6bcf\u5f53\u9047\u5230 3 \u7684\u500d\u6570\u65f6\uff0c\u4e0d\u6253\u5370\u76f8\u5e94\u7684\u6570\u5b57\uff0c\u4f46\u6253\u5370\u4e00\u6b21 \"Fizz\"\u3002\u9047\u5230 5 \u7684\u500d\u6570\u65f6\uff0c\u6253\u5370 Buzz \u800c\u4e0d\u662f\u76f8\u5e94\u7684\u6570\u5b57\u3002\u5bf9\u4e8e\u540c\u65f6\u4e3a 3 \u548c 5 \u7684\u500d\u6570\u7684\u6570\uff0c\u6253\u5370 FizzBuzz \uff08\u63d0\u793a\uff1a\u4f7f\u7528 switch \u8bed\u53e5\uff09\u3002 \u7ec3\u4e60 5.8 rectangle_stars.go \u4f7f\u7528 * \u7b26\u53f7\u6253\u5370\u5bbd\u4e3a 20\uff0c\u9ad8\u4e3a 10 \u7684\u77e9\u5f62\u3002","title":"\u7ec3\u4e60\u9898"},{"location":"05.4/#542","text":"for \u7ed3\u6784\u7684\u7b2c\u4e8c\u79cd\u5f62\u5f0f\u662f\u6ca1\u6709\u5934\u90e8\u7684\u6761\u4ef6\u5224\u65ad\u8fed\u4ee3\uff08\u7c7b\u4f3c\u5176\u5b83\u8bed\u8a00\u4e2d\u7684 while \u5faa\u73af\uff09\uff0c\u57fa\u672c\u5f62\u5f0f\u4e3a\uff1a for \u6761\u4ef6\u8bed\u53e5 {} \u3002 \u60a8\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u662f\u6ca1\u6709\u521d\u59cb\u5316\u8bed\u53e5\u548c\u4fee\u9970\u8bed\u53e5\u7684 for \u7ed3\u6784\uff0c\u56e0\u6b64 ;; \u4fbf\u662f\u591a\u4f59\u7684\u4e86\u3002 Listing 5.8 for2.go \uff1a package main import \"fmt\" func main () { var i int = 5 for i >= 0 { i = i - 1 fmt . Printf ( \"The variable i is now: %d\\n\" , i ) } } \u8f93\u51fa\uff1a The variable i is now: 4 The variable i is now: 3 The variable i is now: 2 The variable i is now: 1 The variable i is now: 0 The variable i is now: -1","title":"5.4.2 \u57fa\u4e8e\u6761\u4ef6\u5224\u65ad\u7684\u8fed\u4ee3"},{"location":"05.4/#543","text":"\u6761\u4ef6\u8bed\u53e5\u662f\u53ef\u4ee5\u88ab\u7701\u7565\u7684\uff0c\u5982 i:=0; ; i++ \u6216 for { } \u6216 for ;; { } \uff08 ;; \u4f1a\u5728\u4f7f\u7528 gofmt \u65f6\u88ab\u79fb\u9664\uff09\uff1a\u8fd9\u4e9b\u5faa\u73af\u7684\u672c\u8d28\u5c31\u662f\u65e0\u9650\u5faa\u73af\u3002\u6700\u540e\u4e00\u4e2a\u5f62\u5f0f\u4e5f\u53ef\u4ee5\u88ab\u6539\u5199\u4e3a for true { } \uff0c\u4f46\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u4f1a\u76f4\u63a5\u5199 for { } \u3002 \u5982\u679c for \u5faa\u73af\u7684\u5934\u90e8\u6ca1\u6709\u6761\u4ef6\u8bed\u53e5\uff0c\u90a3\u4e48\u5c31\u4f1a\u8ba4\u4e3a\u6761\u4ef6\u6c38\u8fdc\u4e3a true\uff0c\u56e0\u6b64\u5faa\u73af\u4f53\u5185\u5fc5\u987b\u6709\u76f8\u5173\u7684\u6761\u4ef6\u5224\u65ad\u4ee5\u786e\u4fdd\u4f1a\u5728\u67d0\u4e2a\u65f6\u523b\u9000\u51fa\u5faa\u73af\u3002 \u60f3\u8981\u76f4\u63a5\u9000\u51fa\u5faa\u73af\u4f53\uff0c\u53ef\u4ee5\u4f7f\u7528 break \u8bed\u53e5\uff08\u7b2c 5.5 \u8282\uff09\u6216 return \u8bed\u53e5\u76f4\u63a5\u8fd4\u56de\uff08\u7b2c 6.1 \u8282\uff09\u3002 \u4f46\u8fd9\u4e24\u8005\u4e4b\u95f4\u6709\u6240\u533a\u522b\uff0cbreak \u53ea\u662f\u9000\u51fa\u5f53\u524d\u7684\u5faa\u73af\u4f53\uff0c\u800c return \u8bed\u53e5\u63d0\u524d\u5bf9\u51fd\u6570\u8fdb\u884c\u8fd4\u56de\uff0c\u4e0d\u4f1a\u6267\u884c\u540e\u7eed\u7684\u4ee3\u7801\u3002 \u65e0\u9650\u5faa\u73af\u7684\u7ecf\u5178\u5e94\u7528\u662f\u670d\u52a1\u5668\uff0c\u7528\u4e8e\u4e0d\u65ad\u7b49\u5f85\u548c\u63a5\u53d7\u65b0\u7684\u8bf7\u6c42\u3002 for t , err = p . Token (); err == nil ; t , err = p . Token () { ... }","title":"5.4.3 \u65e0\u9650\u5faa\u73af"},{"location":"05.4/#544-for-range","text":"\u8fd9\u662f Go \u7279\u6709\u7684\u4e00\u79cd\u7684\u8fed\u4ee3\u7ed3\u6784\uff0c\u60a8\u4f1a\u53d1\u73b0\u5b83\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\u90fd\u975e\u5e38\u6709\u7528\u3002\u5b83\u53ef\u4ee5\u8fed\u4ee3\u4efb\u4f55\u4e00\u4e2a\u96c6\u5408\uff08\u5305\u62ec\u6570\u7ec4\u548c map \uff0c\u8be6\u89c1\u7b2c 7 \u548c 8 \u7ae0\uff09\u3002\u8bed\u6cd5\u4e0a\u5f88\u7c7b\u4f3c\u5176\u5b83\u8bed\u8a00\u4e2d\u7684 foreach \u8bed\u53e5\uff0c\u4f46\u60a8\u4f9d\u65e7\u53ef\u4ee5\u83b7\u5f97\u6bcf\u6b21\u8fed\u4ee3\u6240\u5bf9\u5e94\u7684\u7d22\u5f15\u3002\u4e00\u822c\u5f62\u5f0f\u4e3a\uff1a for ix, val := range coll { } \u3002 \u8981\u6ce8\u610f\u7684\u662f\uff0c val \u59cb\u7ec8\u4e3a\u96c6\u5408\u4e2d\u5bf9\u5e94\u7d22\u5f15\u7684\u503c\u62f7\u8d1d\uff0c\u56e0\u6b64\u5b83\u4e00\u822c\u53ea\u5177\u6709\u53ea\u8bfb\u6027\u8d28\uff0c\u5bf9\u5b83\u6240\u505a\u7684\u4efb\u4f55\u4fee\u6539\u90fd\u4e0d\u4f1a\u5f71\u54cd\u5230\u96c6\u5408\u4e2d\u539f\u6709\u7684\u503c\uff08 \u8bd1\u8005\u6ce8\uff1a\u5982\u679c val \u4e3a\u6307\u9488\uff0c\u5219\u4f1a\u4ea7\u751f\u6307\u9488\u7684\u62f7\u8d1d\uff0c\u4f9d\u65e7\u53ef\u4ee5\u4fee\u6539\u96c6\u5408\u4e2d\u7684\u539f\u503c \uff09\u3002\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f Unicode \u7f16\u7801\u7684\u5b57\u7b26\uff08\u6216\u79f0\u4e4b\u4e3a rune \uff09\u96c6\u5408\uff0c\u56e0\u6b64\u60a8\u4e5f\u53ef\u4ee5\u7528\u5b83\u8fed\u4ee3\u5b57\u7b26\u4e32\uff1a for pos , char := range str { ... } \u6bcf\u4e2a rune \u5b57\u7b26\u548c\u7d22\u5f15\u5728 for-range \u5faa\u73af\u4e2d\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002\u5b83\u80fd\u591f\u81ea\u52a8\u6839\u636e UTF-8 \u89c4\u5219\u8bc6\u522b Unicode \u7f16\u7801\u7684\u5b57\u7b26\u3002 \u793a\u4f8b 5.9 range_string.go \uff1a package main import \"fmt\" func main () { str := \"Go is a beautiful language!\" fmt . Printf ( \"The length of str is: %d\\n\" , len ( str )) for pos , char := range str { fmt . Printf ( \"Character on position %d is: %c \\n\" , pos , char ) } fmt . Println () str2 := \"Chinese: \u65e5\u672c\u8a9e\" fmt . Printf ( \"The length of str2 is: %d\\n\" , len ( str2 )) for pos , char := range str2 { fmt . Printf ( \"character %c starts at byte position %d\\n\" , char , pos ) } fmt . Println () fmt . Println ( \"index int(rune) rune char bytes\" ) for index , rune := range str2 { fmt . Printf ( \"%-2d %d %U '%c' % X\\n\" , index , rune , rune , rune , [] byte ( string ( rune ))) } } \u8f93\u51fa\uff1a The length of str is: 27 Character on position 0 is: G Character on position 1 is: o Character on position 2 is: Character on position 3 is: i Character on position 4 is: s Character on position 5 is: Character on position 6 is: a Character on position 7 is: Character on position 8 is: b Character on position 9 is: e Character on position 10 is: a Character on position 11 is: u Character on position 12 is: t Character on position 13 is: i Character on position 14 is: f Character on position 15 is: u Character on position 16 is: l Character on position 17 is: Character on position 18 is: l Character on position 19 is: a Character on position 20 is: n Character on position 21 is: g Character on position 22 is: u Character on position 23 is: a Character on position 24 is: g Character on position 25 is: e Character on position 26 is: ! The length of str2 is: 18 character C starts at byte position 0 character h starts at byte position 1 character i starts at byte position 2 character n starts at byte position 3 character e starts at byte position 4 character s starts at byte position 5 character e starts at byte position 6 character : starts at byte position 7 character starts at byte position 8 character \u65e5 starts at byte position 9 character \u672c starts at byte position 12 character \u8a9e starts at byte position 15 index int(rune) rune char bytes 0 67 U+0043 'C' 43 1 104 U+0068 'h' 68 2 105 U+0069 'i' 69 3 110 U+006E 'n' 6E 4 101 U+0065 'e' 65 5 115 U+0073 's' 73 6 101 U+0065 'e' 65 7 58 U+003A ':' 3A 8 32 U+0020 ' ' 20 9 26085 U+65E5 '\u65e5' E6 97 A5 12 26412 U+672C '\u672c' E6 9C AC 15 35486 U+8A9E '\u8a9e' E8 AA 9E \u8bf7\u5c06\u8f93\u51fa\u7ed3\u679c\u548c Listing 5.7\uff08 for_string.go \uff09\u8fdb\u884c\u5bf9\u6bd4\u3002 \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5e38\u7528\u82f1\u6587\u5b57\u7b26\u4f7f\u7528 1 \u4e2a\u5b57\u8282\u8868\u793a\uff0c\u800c\u6c49\u5b57\uff08 \u8bd1\u8005\u6ce8\uff1a\u4e25\u683c\u6765\u8bf4\uff0c\u201cChinese: \u65e5\u672c\u8a9e\u201d\u7684 Chinese \u5e94\u8be5\u662f Japanese \uff09\u4f7f\u7528 3 \u4e2a\u5b57\u7b26\u8868\u793a\u3002 \u7ec3\u4e60 5.9 \u4ee5\u4e0b\u7a0b\u5e8f\u7684\u8f93\u51fa\u7ed3\u679c\u662f\u4ec0\u4e48\uff1f for i := 0 ; i < 5 ; i ++ { var v int fmt . Printf ( \"%d \" , v ) v = 5 } \u95ee\u9898 5.2\uff1a \u8bf7\u63cf\u8ff0\u4ee5\u4e0b for \u5faa\u73af\u7684\u8f93\u51fa\u7ed3\u679c\uff1a 1. for i := 0 ; ; i ++ { fmt . Println ( \"Value of i is now:\" , i ) } 2. for i := 0 ; i < 3 ; { fmt . Println ( \"Value of i:\" , i ) } 3. s := \"\" for ; s != \"aaaaa\" ; { fmt . Println ( \"Value of s:\" , s ) s = s + \"a\" } 4. for i , j , s := 0 , 5 , \"a\" ; i < 3 && j < 100 && s != \"aaaaa\" ; i , j , s = i + 1 , j + 1 , s + \"a\" { fmt . Println ( \"Value of i, j, s:\" , i , j , s ) }","title":"5.4.4 for-range \u7ed3\u6784"},{"location":"05.4/#_2","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a switch \u7ed3\u6784 \u4e0b\u4e00\u8282\uff1a Break \u4e0e continue","title":"\u94fe\u63a5"},{"location":"05.5/","text":"5.5 break \u4e0e continue \u00b6 \u60a8\u53ef\u4ee5\u4f7f\u7528 break \u8bed\u53e5\u91cd\u5199 for2.go \u7684\u4ee3\u7801\uff1a \u793a\u4f8b 5.10 for3.go \uff1a for { i = i - 1 fmt . Printf ( \"The variable i is now: %d\\n\" , i ) if i < 0 { break } } \u56e0\u6b64\u6bcf\u6b21\u8fed\u4ee3\u90fd\u4f1a\u5bf9\u6761\u4ef6\u8fdb\u884c\u68c0\u67e5\uff08 i < 0 \uff09\uff0c\u4ee5\u6b64\u5224\u65ad\u662f\u5426\u9700\u8981\u505c\u6b62\u5faa\u73af\u3002\u5982\u679c\u9000\u51fa\u6761\u4ef6\u6ee1\u8db3\uff0c\u5219\u4f7f\u7528 break \u8bed\u53e5\u9000\u51fa\u5faa\u73af\u3002 \u4e00\u4e2a break \u7684\u4f5c\u7528\u8303\u56f4\u4e3a\u8be5\u8bed\u53e5\u51fa\u73b0\u540e\u7684\u6700\u5185\u90e8\u7684\u7ed3\u6784\uff0c\u5b83\u53ef\u4ee5\u88ab\u7528\u4e8e\u4efb\u4f55\u5f62\u5f0f\u7684 for \u5faa\u73af\uff08\u8ba1\u6570\u5668\u3001\u6761\u4ef6\u5224\u65ad\u7b49\uff09\u3002\u4f46\u5728 switch \u6216 select \u8bed\u53e5\u4e2d\uff08\u8be6\u89c1 \u7b2c 13 \u7ae0 \uff09\uff0c break \u8bed\u53e5\u7684\u4f5c\u7528\u7ed3\u679c\u662f\u8df3\u8fc7\u6574\u4e2a\u4ee3\u7801\u5757\uff0c\u6267\u884c\u540e\u7eed\u7684\u4ee3\u7801\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\u5305\u542b\u4e86\u5d4c\u5957\u7684\u5faa\u73af\u4f53\uff08for4.go\uff09\uff0c break \u53ea\u4f1a\u9000\u51fa\u6700\u5185\u5c42\u7684\u5faa\u73af\uff1a \u793a\u4f8b 5.11 for4.go \uff1a package main func main () { for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 10 ; j ++ { if j > 5 { break } print ( j ) } print ( \" \" ) } } \u8f93\u51fa\uff1a 012345 012345 012345 \u5173\u952e\u5b57 continue \u5ffd\u7565\u5269\u4f59\u7684\u5faa\u73af\u4f53\u800c\u76f4\u63a5\u8fdb\u5165\u4e0b\u4e00\u6b21\u5faa\u73af\u7684\u8fc7\u7a0b\uff0c\u4f46\u4e0d\u662f\u65e0\u6761\u4ef6\u6267\u884c\u4e0b\u4e00\u6b21\u5faa\u73af\uff0c\u6267\u884c\u4e4b\u524d\u4f9d\u65e7\u9700\u8981\u6ee1\u8db3\u5faa\u73af\u7684\u5224\u65ad\u6761\u4ef6\u3002 \u793a\u4f8b 5.12 for5.go \uff1a package main func main () { for i := 0 ; i < 10 ; i ++ { if i == 5 { continue } print ( i ) print ( \" \" ) } } \u8f93\u51fa\uff1a 0 1 2 3 4 6 7 8 9 \u663e\u7136\uff0c 5 \u88ab\u8df3\u8fc7\u4e86\u3002 \u53e6\u5916\uff0c\u5173\u952e\u5b57 continue \u53ea\u80fd\u88ab\u7528\u4e8e for \u5faa\u73af\u4e2d\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a for \u7ed3\u6784 \u4e0b\u4e00\u8282\uff1a \u6807\u7b7e\u4e0e goto","title":"5.5 Break \u4e0e continue"},{"location":"05.5/#55-break-continue","text":"\u60a8\u53ef\u4ee5\u4f7f\u7528 break \u8bed\u53e5\u91cd\u5199 for2.go \u7684\u4ee3\u7801\uff1a \u793a\u4f8b 5.10 for3.go \uff1a for { i = i - 1 fmt . Printf ( \"The variable i is now: %d\\n\" , i ) if i < 0 { break } } \u56e0\u6b64\u6bcf\u6b21\u8fed\u4ee3\u90fd\u4f1a\u5bf9\u6761\u4ef6\u8fdb\u884c\u68c0\u67e5\uff08 i < 0 \uff09\uff0c\u4ee5\u6b64\u5224\u65ad\u662f\u5426\u9700\u8981\u505c\u6b62\u5faa\u73af\u3002\u5982\u679c\u9000\u51fa\u6761\u4ef6\u6ee1\u8db3\uff0c\u5219\u4f7f\u7528 break \u8bed\u53e5\u9000\u51fa\u5faa\u73af\u3002 \u4e00\u4e2a break \u7684\u4f5c\u7528\u8303\u56f4\u4e3a\u8be5\u8bed\u53e5\u51fa\u73b0\u540e\u7684\u6700\u5185\u90e8\u7684\u7ed3\u6784\uff0c\u5b83\u53ef\u4ee5\u88ab\u7528\u4e8e\u4efb\u4f55\u5f62\u5f0f\u7684 for \u5faa\u73af\uff08\u8ba1\u6570\u5668\u3001\u6761\u4ef6\u5224\u65ad\u7b49\uff09\u3002\u4f46\u5728 switch \u6216 select \u8bed\u53e5\u4e2d\uff08\u8be6\u89c1 \u7b2c 13 \u7ae0 \uff09\uff0c break \u8bed\u53e5\u7684\u4f5c\u7528\u7ed3\u679c\u662f\u8df3\u8fc7\u6574\u4e2a\u4ee3\u7801\u5757\uff0c\u6267\u884c\u540e\u7eed\u7684\u4ee3\u7801\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\u5305\u542b\u4e86\u5d4c\u5957\u7684\u5faa\u73af\u4f53\uff08for4.go\uff09\uff0c break \u53ea\u4f1a\u9000\u51fa\u6700\u5185\u5c42\u7684\u5faa\u73af\uff1a \u793a\u4f8b 5.11 for4.go \uff1a package main func main () { for i := 0 ; i < 3 ; i ++ { for j := 0 ; j < 10 ; j ++ { if j > 5 { break } print ( j ) } print ( \" \" ) } } \u8f93\u51fa\uff1a 012345 012345 012345 \u5173\u952e\u5b57 continue \u5ffd\u7565\u5269\u4f59\u7684\u5faa\u73af\u4f53\u800c\u76f4\u63a5\u8fdb\u5165\u4e0b\u4e00\u6b21\u5faa\u73af\u7684\u8fc7\u7a0b\uff0c\u4f46\u4e0d\u662f\u65e0\u6761\u4ef6\u6267\u884c\u4e0b\u4e00\u6b21\u5faa\u73af\uff0c\u6267\u884c\u4e4b\u524d\u4f9d\u65e7\u9700\u8981\u6ee1\u8db3\u5faa\u73af\u7684\u5224\u65ad\u6761\u4ef6\u3002 \u793a\u4f8b 5.12 for5.go \uff1a package main func main () { for i := 0 ; i < 10 ; i ++ { if i == 5 { continue } print ( i ) print ( \" \" ) } } \u8f93\u51fa\uff1a 0 1 2 3 4 6 7 8 9 \u663e\u7136\uff0c 5 \u88ab\u8df3\u8fc7\u4e86\u3002 \u53e6\u5916\uff0c\u5173\u952e\u5b57 continue \u53ea\u80fd\u88ab\u7528\u4e8e for \u5faa\u73af\u4e2d\u3002","title":"5.5 break \u4e0e continue"},{"location":"05.5/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a for \u7ed3\u6784 \u4e0b\u4e00\u8282\uff1a \u6807\u7b7e\u4e0e goto","title":"\u94fe\u63a5"},{"location":"05.6/","text":"5.6 \u6807\u7b7e\u4e0e goto \u00b6 for \u3001 switch \u6216 select \u8bed\u53e5\u90fd\u53ef\u4ee5\u914d\u5408\u6807\u7b7e (label) \u5f62\u5f0f\u7684\u6807\u8bc6\u7b26\u4f7f\u7528\uff0c\u5373\u67d0\u4e00\u884c\u7b2c\u4e00\u4e2a\u4ee5\u5192\u53f7 ( : ) \u7ed3\u5c3e\u7684\u5355\u8bcd\uff08gofmt \u4f1a\u5c06\u540e\u7eed\u4ee3\u7801\u81ea\u52a8\u79fb\u81f3\u4e0b\u4e00\u884c\uff09\u3002 \u793a\u4f8b 5.13 for6.go \uff1a \uff08\u6807\u7b7e\u7684\u540d\u79f0\u662f\u5927\u5c0f\u5199\u654f\u611f\u7684\uff0c\u4e3a\u4e86\u63d0\u5347\u53ef\u8bfb\u6027\uff0c\u4e00\u822c\u5efa\u8bae\u4f7f\u7528\u5168\u90e8\u5927\u5199\u5b57\u6bcd\uff09 package main import \"fmt\" func main () { LABEL1 : for i := 0 ; i <= 5 ; i ++ { for j := 0 ; j <= 5 ; j ++ { if j == 4 { continue LABEL1 } fmt . Printf ( \"i is: %d, and j is: %d\\n\" , i , j ) } } } \u672c\u4f8b\u4e2d\uff0c continue \u8bed\u53e5\u6307\u5411 LABEL1 \uff0c\u5f53\u6267\u884c\u5230\u8be5\u8bed\u53e5\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u8df3\u8f6c\u5230 LABEL1 \u6807\u7b7e\u7684\u4f4d\u7f6e\u3002 \u60a8\u53ef\u4ee5\u770b\u5230\u5f53 j==4 \u548c j==5 \u7684\u65f6\u5019\uff0c\u6ca1\u6709\u4efb\u4f55\u8f93\u51fa\uff1a\u6807\u7b7e\u7684\u4f5c\u7528\u5bf9\u8c61\u4e3a\u5916\u90e8\u5faa\u73af\uff0c\u56e0\u6b64 i \u4f1a\u76f4\u63a5\u53d8\u6210\u4e0b\u4e00\u4e2a\u5faa\u73af\u7684\u503c\uff0c\u800c\u6b64\u65f6 j \u7684\u503c\u5c31\u88ab\u91cd\u8bbe\u4e3a 0 \uff0c\u5373\u5b83\u7684\u521d\u59cb\u503c\u3002\u5982\u679c\u5c06 continue \u6539\u4e3a break \uff0c\u5219\u4e0d\u4f1a\u53ea\u9000\u51fa\u5185\u5c42\u5faa\u73af\uff0c\u800c\u662f\u76f4\u63a5\u9000\u51fa\u5916\u5c42\u5faa\u73af\u4e86\u3002\u53e6\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 goto \u8bed\u53e5\u548c\u6807\u7b7e\u914d\u5408\u4f7f\u7528\u6765\u6a21\u62df\u5faa\u73af\u3002 \u793a\u4f8b 5.14 goto.go \uff1a package main func main () { i := 0 HERE : print ( i ) i ++ if i == 5 { return } goto HERE } \u4e0a\u9762\u7684\u4ee3\u7801\u4f1a\u8f93\u51fa 01234 \u3002 \u4f7f\u7528\u9006\u5411\u7684 goto \u4f1a\u5f88\u5feb\u5bfc\u81f4\u610f\u5927\u5229\u9762\u6761\u5f0f\u7684\u4ee3\u7801\uff0c\u6240\u4ee5\u4e0d\u5e94\u5f53\u4f7f\u7528\u800c\u9009\u62e9\u66f4\u597d\u7684\u66ff\u4ee3\u65b9\u6848\u3002 \u7279\u522b\u6ce8\u610f \u4f7f\u7528\u6807\u7b7e\u548c goto \u8bed\u53e5\u662f\u4e0d\u88ab\u9f13\u52b1\u7684\uff1a\u5b83\u4eec\u4f1a\u5f88\u5feb\u5bfc\u81f4\u975e\u5e38\u7cdf\u7cd5\u7684\u7a0b\u5e8f\u8bbe\u8ba1\uff0c\u800c\u4e14\u603b\u6709\u66f4\u52a0\u53ef\u8bfb\u7684\u66ff\u4ee3\u65b9\u6848\u6765\u5b9e\u73b0\u76f8\u540c\u7684\u9700\u6c42\u3002 \u4e00\u4e2a\u5efa\u8bae\u4f7f\u7528 goto \u8bed\u53e5\u7684\u793a\u4f8b\u4f1a\u5728 \u7b2c 15.1 \u7ae0 \u7684 simple_tcp_server.go \u4e2d\u51fa\u73b0\uff1a\u793a\u4f8b\u4e2d\u5728\u53d1\u751f\u8bfb\u53d6\u9519\u8bef\u65f6\uff0c\u4f7f\u7528 goto \u6765\u8df3\u51fa\u65e0\u9650\u8bfb\u53d6\u5faa\u73af\u5e76\u5173\u95ed\u76f8\u5e94\u7684\u5ba2\u6237\u7aef\u94fe\u63a5\u3002 \u5b9a\u4e49\u4f46\u672a\u4f7f\u7528\u6807\u7b7e\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u9519\u8bef\uff1a label \u2026 defined and not used \u3002 \u5982\u679c\u60a8\u5fc5\u987b\u4f7f\u7528 goto \uff0c\u5e94\u5f53\u53ea\u4f7f\u7528\u6b63\u5e8f\u7684\u6807\u7b7e\uff08\u6807\u7b7e\u4f4d\u4e8e goto \u8bed\u53e5\u4e4b\u540e\uff09\uff0c\u4f46\u6ce8\u610f\u6807\u7b7e\u548c goto \u8bed\u53e5\u4e4b\u95f4\u4e0d\u80fd\u51fa\u73b0\u5b9a\u4e49\u65b0\u53d8\u91cf\u7684\u8bed\u53e5\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u5931\u8d25\u3002 \u793a\u4f8b 5.15 goto2.go \uff1a // compile error goto2.go:8: goto TARGET jumps over declaration of b at goto2.go:8 package main import \"fmt\" func main () { a := 1 goto TARGET // compile error b := 9 TARGET : b += a fmt . Printf ( \"a is %v *** b is %v\" , a , b ) } \u95ee\u9898 5.3 \u8bf7\u63cf\u8ff0\u4e0b\u9762 for \u5faa\u73af\u7684\u8f93\u51fa\uff1a 1. i := 0 for { //since there are no checks, this is an infinite loop if i >= 3 { break } //break out of this for loop when this condition is met fmt . Println ( \"Value of i is:\" , i ) i ++ } fmt . Println ( \"A statement just after for loop.\" ) 2. for i := 0 ; i < 7 ; i ++ { if i % 2 == 0 { continue } fmt . Println ( \"Odd:\" , i ) } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Break \u4e0e continue \u4e0b\u4e00\u7ae0\uff1a \u51fd\u6570","title":"5.6 \u6807\u7b7e\u4e0e goto"},{"location":"05.6/#56-goto","text":"for \u3001 switch \u6216 select \u8bed\u53e5\u90fd\u53ef\u4ee5\u914d\u5408\u6807\u7b7e (label) \u5f62\u5f0f\u7684\u6807\u8bc6\u7b26\u4f7f\u7528\uff0c\u5373\u67d0\u4e00\u884c\u7b2c\u4e00\u4e2a\u4ee5\u5192\u53f7 ( : ) \u7ed3\u5c3e\u7684\u5355\u8bcd\uff08gofmt \u4f1a\u5c06\u540e\u7eed\u4ee3\u7801\u81ea\u52a8\u79fb\u81f3\u4e0b\u4e00\u884c\uff09\u3002 \u793a\u4f8b 5.13 for6.go \uff1a \uff08\u6807\u7b7e\u7684\u540d\u79f0\u662f\u5927\u5c0f\u5199\u654f\u611f\u7684\uff0c\u4e3a\u4e86\u63d0\u5347\u53ef\u8bfb\u6027\uff0c\u4e00\u822c\u5efa\u8bae\u4f7f\u7528\u5168\u90e8\u5927\u5199\u5b57\u6bcd\uff09 package main import \"fmt\" func main () { LABEL1 : for i := 0 ; i <= 5 ; i ++ { for j := 0 ; j <= 5 ; j ++ { if j == 4 { continue LABEL1 } fmt . Printf ( \"i is: %d, and j is: %d\\n\" , i , j ) } } } \u672c\u4f8b\u4e2d\uff0c continue \u8bed\u53e5\u6307\u5411 LABEL1 \uff0c\u5f53\u6267\u884c\u5230\u8be5\u8bed\u53e5\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u8df3\u8f6c\u5230 LABEL1 \u6807\u7b7e\u7684\u4f4d\u7f6e\u3002 \u60a8\u53ef\u4ee5\u770b\u5230\u5f53 j==4 \u548c j==5 \u7684\u65f6\u5019\uff0c\u6ca1\u6709\u4efb\u4f55\u8f93\u51fa\uff1a\u6807\u7b7e\u7684\u4f5c\u7528\u5bf9\u8c61\u4e3a\u5916\u90e8\u5faa\u73af\uff0c\u56e0\u6b64 i \u4f1a\u76f4\u63a5\u53d8\u6210\u4e0b\u4e00\u4e2a\u5faa\u73af\u7684\u503c\uff0c\u800c\u6b64\u65f6 j \u7684\u503c\u5c31\u88ab\u91cd\u8bbe\u4e3a 0 \uff0c\u5373\u5b83\u7684\u521d\u59cb\u503c\u3002\u5982\u679c\u5c06 continue \u6539\u4e3a break \uff0c\u5219\u4e0d\u4f1a\u53ea\u9000\u51fa\u5185\u5c42\u5faa\u73af\uff0c\u800c\u662f\u76f4\u63a5\u9000\u51fa\u5916\u5c42\u5faa\u73af\u4e86\u3002\u53e6\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 goto \u8bed\u53e5\u548c\u6807\u7b7e\u914d\u5408\u4f7f\u7528\u6765\u6a21\u62df\u5faa\u73af\u3002 \u793a\u4f8b 5.14 goto.go \uff1a package main func main () { i := 0 HERE : print ( i ) i ++ if i == 5 { return } goto HERE } \u4e0a\u9762\u7684\u4ee3\u7801\u4f1a\u8f93\u51fa 01234 \u3002 \u4f7f\u7528\u9006\u5411\u7684 goto \u4f1a\u5f88\u5feb\u5bfc\u81f4\u610f\u5927\u5229\u9762\u6761\u5f0f\u7684\u4ee3\u7801\uff0c\u6240\u4ee5\u4e0d\u5e94\u5f53\u4f7f\u7528\u800c\u9009\u62e9\u66f4\u597d\u7684\u66ff\u4ee3\u65b9\u6848\u3002 \u7279\u522b\u6ce8\u610f \u4f7f\u7528\u6807\u7b7e\u548c goto \u8bed\u53e5\u662f\u4e0d\u88ab\u9f13\u52b1\u7684\uff1a\u5b83\u4eec\u4f1a\u5f88\u5feb\u5bfc\u81f4\u975e\u5e38\u7cdf\u7cd5\u7684\u7a0b\u5e8f\u8bbe\u8ba1\uff0c\u800c\u4e14\u603b\u6709\u66f4\u52a0\u53ef\u8bfb\u7684\u66ff\u4ee3\u65b9\u6848\u6765\u5b9e\u73b0\u76f8\u540c\u7684\u9700\u6c42\u3002 \u4e00\u4e2a\u5efa\u8bae\u4f7f\u7528 goto \u8bed\u53e5\u7684\u793a\u4f8b\u4f1a\u5728 \u7b2c 15.1 \u7ae0 \u7684 simple_tcp_server.go \u4e2d\u51fa\u73b0\uff1a\u793a\u4f8b\u4e2d\u5728\u53d1\u751f\u8bfb\u53d6\u9519\u8bef\u65f6\uff0c\u4f7f\u7528 goto \u6765\u8df3\u51fa\u65e0\u9650\u8bfb\u53d6\u5faa\u73af\u5e76\u5173\u95ed\u76f8\u5e94\u7684\u5ba2\u6237\u7aef\u94fe\u63a5\u3002 \u5b9a\u4e49\u4f46\u672a\u4f7f\u7528\u6807\u7b7e\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u9519\u8bef\uff1a label \u2026 defined and not used \u3002 \u5982\u679c\u60a8\u5fc5\u987b\u4f7f\u7528 goto \uff0c\u5e94\u5f53\u53ea\u4f7f\u7528\u6b63\u5e8f\u7684\u6807\u7b7e\uff08\u6807\u7b7e\u4f4d\u4e8e goto \u8bed\u53e5\u4e4b\u540e\uff09\uff0c\u4f46\u6ce8\u610f\u6807\u7b7e\u548c goto \u8bed\u53e5\u4e4b\u95f4\u4e0d\u80fd\u51fa\u73b0\u5b9a\u4e49\u65b0\u53d8\u91cf\u7684\u8bed\u53e5\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u5931\u8d25\u3002 \u793a\u4f8b 5.15 goto2.go \uff1a // compile error goto2.go:8: goto TARGET jumps over declaration of b at goto2.go:8 package main import \"fmt\" func main () { a := 1 goto TARGET // compile error b := 9 TARGET : b += a fmt . Printf ( \"a is %v *** b is %v\" , a , b ) } \u95ee\u9898 5.3 \u8bf7\u63cf\u8ff0\u4e0b\u9762 for \u5faa\u73af\u7684\u8f93\u51fa\uff1a 1. i := 0 for { //since there are no checks, this is an infinite loop if i >= 3 { break } //break out of this for loop when this condition is met fmt . Println ( \"Value of i is:\" , i ) i ++ } fmt . Println ( \"A statement just after for loop.\" ) 2. for i := 0 ; i < 7 ; i ++ { if i % 2 == 0 { continue } fmt . Println ( \"Odd:\" , i ) }","title":"5.6 \u6807\u7b7e\u4e0e goto"},{"location":"05.6/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Break \u4e0e continue \u4e0b\u4e00\u7ae0\uff1a \u51fd\u6570","title":"\u94fe\u63a5"},{"location":"06.0/","text":"6.0 \u51fd\u6570 (function) \u00b6 \u51fd\u6570\u662f Go \u91cc\u9762\u7684\u57fa\u672c\u4ee3\u7801\u5757\uff1aGo \u51fd\u6570\u7684\u529f\u80fd\u975e\u5e38\u5f3a\u5927\uff0c\u4ee5\u81f3\u4e8e\u88ab\u8ba4\u4e3a\u62e5\u6709\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\u7684\u591a\u79cd\u7279\u6027\u3002\u5728\u8fd9\u4e00\u7ae0\uff0c\u6211\u4eec\u5c06\u5bf9 \u7b2c 4.2.2 \u8282 \u6240\u7b80\u8981\u63cf\u8ff0\u7684\u51fd\u6570\u8fdb\u884c\u8be6\u7ec6\u7684\u8bb2\u89e3\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u7ae0\uff1a \u6807\u7b7e\u4e0e goto \u4e0b\u4e00\u8282\uff1a \u4ecb\u7ecd","title":"6.0 \u51fd\u6570 (function)"},{"location":"06.0/#60-function","text":"\u51fd\u6570\u662f Go \u91cc\u9762\u7684\u57fa\u672c\u4ee3\u7801\u5757\uff1aGo \u51fd\u6570\u7684\u529f\u80fd\u975e\u5e38\u5f3a\u5927\uff0c\u4ee5\u81f3\u4e8e\u88ab\u8ba4\u4e3a\u62e5\u6709\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\u7684\u591a\u79cd\u7279\u6027\u3002\u5728\u8fd9\u4e00\u7ae0\uff0c\u6211\u4eec\u5c06\u5bf9 \u7b2c 4.2.2 \u8282 \u6240\u7b80\u8981\u63cf\u8ff0\u7684\u51fd\u6570\u8fdb\u884c\u8be6\u7ec6\u7684\u8bb2\u89e3\u3002","title":"6.0 \u51fd\u6570 (function)"},{"location":"06.0/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u7ae0\uff1a \u6807\u7b7e\u4e0e goto \u4e0b\u4e00\u8282\uff1a \u4ecb\u7ecd","title":"\u94fe\u63a5"},{"location":"06.1/","text":"6.1 \u4ecb\u7ecd \u00b6 \u6bcf\u4e00\u4e2a\u7a0b\u5e8f\u90fd\u5305\u542b\u5f88\u591a\u7684\u51fd\u6570\uff1a\u51fd\u6570\u662f\u57fa\u672c\u7684\u4ee3\u7801\u5757\u3002 Go\u662f\u7f16\u8bd1\u578b\u8bed\u8a00\uff0c\u6240\u4ee5\u51fd\u6570\u7f16\u5199\u7684\u987a\u5e8f\u662f\u65e0\u5173\u7d27\u8981\u7684\uff1b\u9274\u4e8e\u53ef\u8bfb\u6027\u7684\u9700\u6c42\uff0c\u6700\u597d\u628a main() \u51fd\u6570\u5199\u5728\u6587\u4ef6\u7684\u524d\u9762\uff0c\u5176\u4ed6\u51fd\u6570\u6309\u7167\u4e00\u5b9a\u903b\u8f91\u987a\u5e8f\u8fdb\u884c\u7f16\u5199\uff08\u4f8b\u5982\u51fd\u6570\u88ab\u8c03\u7528\u7684\u987a\u5e8f\uff09\u3002 \u7f16\u5199\u591a\u4e2a\u51fd\u6570\u7684\u4e3b\u8981\u76ee\u7684\u662f\u5c06\u4e00\u4e2a\u9700\u8981\u5f88\u591a\u884c\u4ee3\u7801\u7684\u590d\u6742\u95ee\u9898\u5206\u89e3\u4e3a\u4e00\u7cfb\u5217\u7b80\u5355\u7684\u4efb\u52a1\uff08\u90a3\u5c31\u662f\u51fd\u6570\uff09\u6765\u89e3\u51b3\u3002\u800c\u4e14\uff0c\u540c\u4e00\u4e2a\u4efb\u52a1\uff08\u51fd\u6570\uff09\u53ef\u4ee5\u88ab\u8c03\u7528\u591a\u6b21\uff0c\u6709\u52a9\u4e8e\u4ee3\u7801\u91cd\u7528\u3002 \uff08\u4e8b\u5b9e\u4e0a\uff0c\u597d\u7684\u7a0b\u5e8f\u662f\u975e\u5e38\u6ce8\u610f DRY \u539f\u5219\u7684\uff0c\u5373\u4e0d\u8981\u91cd\u590d\u4f60\u81ea\u5df1 (Don't Repeat Yourself)\uff0c\u610f\u601d\u662f\u6267\u884c\u7279\u5b9a\u4efb\u52a1\u7684\u4ee3\u7801\u53ea\u80fd\u5728\u7a0b\u5e8f\u91cc\u9762\u51fa\u73b0\u4e00\u6b21\u3002\uff09 \u5f53\u51fd\u6570\u6267\u884c\u5230\u4ee3\u7801\u5757\u6700\u540e\u4e00\u884c\uff08 } \u4e4b\u524d\uff09\u6216\u8005 return \u8bed\u53e5\u7684\u65f6\u5019\u4f1a\u9000\u51fa\uff0c\u5176\u4e2d return \u8bed\u53e5\u53ef\u4ee5\u5e26\u6709\u96f6\u4e2a\u6216\u591a\u4e2a\u53c2\u6570\uff1b\u8fd9\u4e9b\u53c2\u6570\u5c06\u4f5c\u4e3a\u8fd4\u56de\u503c\uff08\u53c2\u8003 \u7b2c 6.2 \u8282 \uff09\u4f9b\u8c03\u7528\u8005\u4f7f\u7528\u3002\u7b80\u5355\u7684 return \u8bed\u53e5\u4e5f\u53ef\u4ee5\u7528\u6765\u7ed3\u675f for \u6b7b\u5faa\u73af\uff0c\u6216\u8005\u7ed3\u675f\u4e00\u4e2a\u534f\u7a0b (goroutine)\u3002 Go \u91cc\u9762\u6709\u4e09\u79cd\u7c7b\u578b\u7684\u51fd\u6570\uff1a \u666e\u901a\u7684\u5e26\u6709\u540d\u5b57\u7684\u51fd\u6570 \u533f\u540d\u51fd\u6570\u6216\u8005lambda\u51fd\u6570\uff08\u53c2\u8003 \u7b2c 6.8 \u8282 \uff09 \u65b9\u6cd5\uff08Methods\uff0c\u53c2\u8003 \u7b2c 10.6 \u8282 \uff09 \u9664\u4e86 main() \u3001 init() \u51fd\u6570\u5916\uff0c\u5176\u5b83\u6240\u6709\u7c7b\u578b\u7684\u51fd\u6570\u90fd\u53ef\u4ee5\u6709\u53c2\u6570\u4e0e\u8fd4\u56de\u503c\u3002\u51fd\u6570\u53c2\u6570\u3001\u8fd4\u56de\u503c\u4ee5\u53ca\u5b83\u4eec\u7684\u7c7b\u578b\u88ab\u7edf\u79f0\u4e3a\u51fd\u6570\u7b7e\u540d\u3002 \u4f5c\u4e3a\u63d0\u9192\uff0c\u63d0\u524d\u4ecb\u7ecd\u4e00\u4e2a\u8bed\u6cd5\uff1a \u8fd9\u6837\u662f\u4e0d\u6b63\u786e\u7684 Go \u4ee3\u7801\uff1a func g () { } \u5b83\u5fc5\u987b\u662f\u8fd9\u6837\u7684\uff1a func g () { } \u51fd\u6570\u88ab\u8c03\u7528\u7684\u57fa\u672c\u683c\u5f0f\u5982\u4e0b\uff1a pack1 . Function ( arg1 , arg2 , \u2026 , argn ) Function \u662f pack1 \u5305\u91cc\u9762\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u62ec\u53f7\u91cc\u7684\u662f\u88ab\u8c03\u7528\u51fd\u6570\u7684\u5b9e\u53c2 (argument)\uff1a\u8fd9\u4e9b\u503c\u88ab\u4f20\u9012\u7ed9\u88ab\u8c03\u7528\u51fd\u6570\u7684*\u5f62\u53c2*\uff08parameter\uff0c\u53c2\u8003 \u7b2c 6.2 \u8282 \uff09\u3002\u51fd\u6570\u88ab\u8c03\u7528\u7684\u65f6\u5019\uff0c\u8fd9\u4e9b\u5b9e\u53c2\u5c06\u88ab\u590d\u5236\uff08\u7b80\u5355\u800c\u8a00\uff09\u7136\u540e\u4f20\u9012\u7ed9\u88ab\u8c03\u7528\u51fd\u6570\u3002\u51fd\u6570\u4e00\u822c\u662f\u5728\u5176\u4ed6\u51fd\u6570\u91cc\u9762\u88ab\u8c03\u7528\u7684\uff0c\u8fd9\u4e2a\u5176\u4ed6\u51fd\u6570\u88ab\u79f0\u4e3a\u8c03\u7528\u51fd\u6570 (calling function)\u3002\u51fd\u6570\u80fd\u591a\u6b21\u8c03\u7528\u5176\u4ed6\u51fd\u6570\uff0c\u8fd9\u4e9b\u88ab\u8c03\u7528\u51fd\u6570\u6309\u987a\u5e8f\uff08\u7b80\u5355\u800c\u8a00\uff09\u6267\u884c\uff0c\u7406\u8bba\u4e0a\uff0c\u51fd\u6570\u8c03\u7528\u5176\u4ed6\u51fd\u6570\u7684\u6b21\u6570\u662f\u65e0\u7a77\u7684\uff08\u76f4\u5230\u51fd\u6570\u8c03\u7528\u6808\u88ab\u8017\u5c3d\uff09\u3002 \u4e00\u4e2a\u7b80\u5355\u7684\u51fd\u6570\u8c03\u7528\u5176\u4ed6\u51fd\u6570\u7684\u4f8b\u5b50\uff1a \u793a\u4f8b 6.1 greeting.go package main func main () { println ( \"In main before calling greeting\" ) greeting () println ( \"In main after calling greeting\" ) } func greeting () { println ( \"In greeting: Hi!!!!!\" ) } \u4ee3\u7801\u8f93\u51fa\uff1a In main before calling greeting In greeting: Hi!!!!! In main after calling greeting \u51fd\u6570\u53ef\u4ee5\u5c06\u5176\u4ed6\u51fd\u6570\u8c03\u7528\u4f5c\u4e3a\u5b83\u7684\u53c2\u6570\uff0c\u53ea\u8981\u8fd9\u4e2a\u88ab\u8c03\u7528\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e2a\u6570\u3001\u8fd4\u56de\u503c\u7c7b\u578b\u548c\u8fd4\u56de\u503c\u7684\u987a\u5e8f\u4e0e\u8c03\u7528\u51fd\u6570\u6240\u9700\u6c42\u7684\u5b9e\u53c2\u662f\u4e00\u81f4\u7684\uff0c\u4f8b\u5982\uff1a \u5047\u8bbe f1 \u9700\u8981 3 \u4e2a\u53c2\u6570 f1(a, b, c int) \uff0c\u540c\u65f6 f2 \u8fd4\u56de 3 \u4e2a\u53c2\u6570 f2(a, b int) (int, int, int) \uff0c\u5c31\u53ef\u4ee5\u8fd9\u6837\u8c03\u7528 f1 \uff1a f1(f2(a, b)) \u3002 \u51fd\u6570\u91cd\u8f7d (function overloading) \u6307\u7684\u662f\u53ef\u4ee5\u7f16\u5199\u591a\u4e2a\u540c\u540d\u51fd\u6570\uff0c\u53ea\u8981\u5b83\u4eec\u62e5\u6709\u4e0d\u540c\u7684\u5f62\u53c2/\u6216\u8005\u4e0d\u540c\u7684\u8fd4\u56de\u503c\uff0c\u5728 Go \u91cc\u9762\u51fd\u6570\u91cd\u8f7d\u662f\u4e0d\u88ab\u5141\u8bb8\u7684\u3002\u8fd9\u5c06\u5bfc\u81f4\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\uff1a funcName redeclared in this book, previous declaration at lineno Go \u8bed\u8a00\u4e0d\u652f\u6301\u8fd9\u9879\u7279\u6027\u7684\u4e3b\u8981\u539f\u56e0\u662f\u51fd\u6570\u91cd\u8f7d\u9700\u8981\u8fdb\u884c\u591a\u4f59\u7684\u7c7b\u578b\u5339\u914d\u5f71\u54cd\u6027\u80fd\uff1b\u6ca1\u6709\u91cd\u8f7d\u610f\u5473\u7740\u53ea\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u51fd\u6570\u8c03\u5ea6\u3002\u6240\u4ee5\u4f60\u9700\u8981\u7ed9\u4e0d\u540c\u7684\u51fd\u6570\u4f7f\u7528\u4e0d\u540c\u7684\u540d\u5b57\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u6839\u636e\u51fd\u6570\u7684\u7279\u5f81\u5bf9\u51fd\u6570\u8fdb\u884c\u547d\u540d\uff08\u53c2\u8003 \u7b2c 11.12.5 \u8282 \uff09\u3002 \u5982\u679c\u9700\u8981\u7533\u660e\u4e00\u4e2a\u5728\u5916\u90e8\u5b9a\u4e49\u7684\u51fd\u6570\uff0c\u4f60\u53ea\u9700\u8981\u7ed9\u51fa\u51fd\u6570\u540d\u4e0e\u51fd\u6570\u7b7e\u540d\uff0c\u4e0d\u9700\u8981\u7ed9\u51fa\u51fd\u6570\u4f53\uff1a func flushICache ( begin , end uintptr ) // implemented externally \u51fd\u6570\u4e5f\u53ef\u4ee5\u4ee5\u7533\u660e\u7684\u65b9\u5f0f\u88ab\u4f7f\u7528\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u51fd\u6570\u7c7b\u578b \uff0c\u5c31\u50cf\uff1a type binOp func ( int , int ) int \u5728\u8fd9\u91cc\uff0c\u4e0d\u9700\u8981\u51fd\u6570\u4f53 {} \u3002 \u51fd\u6570\u662f\u4e00\u7b49\u503c (first-class value)\uff1a\u5b83\u4eec\u53ef\u4ee5\u8d4b\u503c\u7ed9\u53d8\u91cf\uff0c\u5c31\u50cf add := binOp \u4e00\u6837\u3002 \u8fd9\u4e2a\u53d8\u91cf\u77e5\u9053\u81ea\u5df1\u6307\u5411\u7684\u51fd\u6570\u7684\u7b7e\u540d\uff0c\u6240\u4ee5\u7ed9\u5b83\u8d4b\u4e00\u4e2a\u5177\u6709\u4e0d\u540c\u7b7e\u540d\u7684\u51fd\u6570\u503c\u662f\u4e0d\u53ef\u80fd\u7684\u3002 \u51fd\u6570\u503c (functions value) \u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u6bd4\u8f83\uff1a\u5982\u679c\u5b83\u4eec\u5f15\u7528\u7684\u662f\u76f8\u540c\u7684\u51fd\u6570\u6216\u8005\u90fd\u662f nil \u7684\u8bdd\uff0c\u5219\u8ba4\u4e3a\u5b83\u4eec\u662f\u76f8\u540c\u7684\u51fd\u6570\u3002\u51fd\u6570\u4e0d\u80fd\u5728\u5176\u5b83\u51fd\u6570\u91cc\u9762\u58f0\u660e\uff08\u4e0d\u80fd\u5d4c\u5957\uff09\uff0c\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u533f\u540d\u51fd\u6570\uff08\u53c2\u8003 \u7b2c 6.8 \u8282 \uff09\u6765\u7834\u9664\u8fd9\u4e2a\u9650\u5236\u3002 \u76ee\u524d Go \u6ca1\u6709\u6cdb\u578b (generic) \u7684\u6982\u5ff5\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b83\u4e0d\u652f\u6301\u90a3\u79cd\u652f\u6301\u591a\u79cd\u7c7b\u578b\u7684\u51fd\u6570\u3002\u4e0d\u8fc7\u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u53ef\u4ee5\u901a\u8fc7\u63a5\u53e3 (interface)\uff0c\u7279\u522b\u662f\u7a7a\u63a5\u53e3\u4e0e\u7c7b\u578b\u9009\u62e9\uff08type switch\uff0c\u53c2\u8003 \u7b2c 11.12 \u8282 \uff09\u4e0e/\u6216\u8005\u901a\u8fc7\u4f7f\u7528\u53cd\u5c04\uff08reflection\uff0c\u53c2\u8003 \u7b2c 6.8 \u8282 \uff09\u6765\u5b9e\u73b0\u76f8\u4f3c\u7684\u529f\u80fd\u3002\u4f7f\u7528\u8fd9\u4e9b\u6280\u672f\u5c06\u5bfc\u81f4\u4ee3\u7801\u66f4\u4e3a\u590d\u6742\u3001\u6027\u80fd\u66f4\u4e3a\u4f4e\u4e0b\uff0c\u6240\u4ee5\u5728\u975e\u5e38\u6ce8\u610f\u6027\u80fd\u7684\u7684\u573a\u5408\uff0c\u6700\u597d\u662f\u4e3a\u6bcf\u4e00\u4e2a\u7c7b\u578b\u5355\u72ec\u521b\u5efa\u4e00\u4e2a\u51fd\u6570\uff0c\u800c\u4e14\u4ee3\u7801\u53ef\u8bfb\u6027\u66f4\u5f3a\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u51fd\u6570 (function) \u4e0b\u4e00\u8282\uff1a \u51fd\u6570\u53c2\u6570\u4e0e\u8fd4\u56de\u503c","title":"6.1 \u4ecb\u7ecd"},{"location":"06.1/#61","text":"\u6bcf\u4e00\u4e2a\u7a0b\u5e8f\u90fd\u5305\u542b\u5f88\u591a\u7684\u51fd\u6570\uff1a\u51fd\u6570\u662f\u57fa\u672c\u7684\u4ee3\u7801\u5757\u3002 Go\u662f\u7f16\u8bd1\u578b\u8bed\u8a00\uff0c\u6240\u4ee5\u51fd\u6570\u7f16\u5199\u7684\u987a\u5e8f\u662f\u65e0\u5173\u7d27\u8981\u7684\uff1b\u9274\u4e8e\u53ef\u8bfb\u6027\u7684\u9700\u6c42\uff0c\u6700\u597d\u628a main() \u51fd\u6570\u5199\u5728\u6587\u4ef6\u7684\u524d\u9762\uff0c\u5176\u4ed6\u51fd\u6570\u6309\u7167\u4e00\u5b9a\u903b\u8f91\u987a\u5e8f\u8fdb\u884c\u7f16\u5199\uff08\u4f8b\u5982\u51fd\u6570\u88ab\u8c03\u7528\u7684\u987a\u5e8f\uff09\u3002 \u7f16\u5199\u591a\u4e2a\u51fd\u6570\u7684\u4e3b\u8981\u76ee\u7684\u662f\u5c06\u4e00\u4e2a\u9700\u8981\u5f88\u591a\u884c\u4ee3\u7801\u7684\u590d\u6742\u95ee\u9898\u5206\u89e3\u4e3a\u4e00\u7cfb\u5217\u7b80\u5355\u7684\u4efb\u52a1\uff08\u90a3\u5c31\u662f\u51fd\u6570\uff09\u6765\u89e3\u51b3\u3002\u800c\u4e14\uff0c\u540c\u4e00\u4e2a\u4efb\u52a1\uff08\u51fd\u6570\uff09\u53ef\u4ee5\u88ab\u8c03\u7528\u591a\u6b21\uff0c\u6709\u52a9\u4e8e\u4ee3\u7801\u91cd\u7528\u3002 \uff08\u4e8b\u5b9e\u4e0a\uff0c\u597d\u7684\u7a0b\u5e8f\u662f\u975e\u5e38\u6ce8\u610f DRY \u539f\u5219\u7684\uff0c\u5373\u4e0d\u8981\u91cd\u590d\u4f60\u81ea\u5df1 (Don't Repeat Yourself)\uff0c\u610f\u601d\u662f\u6267\u884c\u7279\u5b9a\u4efb\u52a1\u7684\u4ee3\u7801\u53ea\u80fd\u5728\u7a0b\u5e8f\u91cc\u9762\u51fa\u73b0\u4e00\u6b21\u3002\uff09 \u5f53\u51fd\u6570\u6267\u884c\u5230\u4ee3\u7801\u5757\u6700\u540e\u4e00\u884c\uff08 } \u4e4b\u524d\uff09\u6216\u8005 return \u8bed\u53e5\u7684\u65f6\u5019\u4f1a\u9000\u51fa\uff0c\u5176\u4e2d return \u8bed\u53e5\u53ef\u4ee5\u5e26\u6709\u96f6\u4e2a\u6216\u591a\u4e2a\u53c2\u6570\uff1b\u8fd9\u4e9b\u53c2\u6570\u5c06\u4f5c\u4e3a\u8fd4\u56de\u503c\uff08\u53c2\u8003 \u7b2c 6.2 \u8282 \uff09\u4f9b\u8c03\u7528\u8005\u4f7f\u7528\u3002\u7b80\u5355\u7684 return \u8bed\u53e5\u4e5f\u53ef\u4ee5\u7528\u6765\u7ed3\u675f for \u6b7b\u5faa\u73af\uff0c\u6216\u8005\u7ed3\u675f\u4e00\u4e2a\u534f\u7a0b (goroutine)\u3002 Go \u91cc\u9762\u6709\u4e09\u79cd\u7c7b\u578b\u7684\u51fd\u6570\uff1a \u666e\u901a\u7684\u5e26\u6709\u540d\u5b57\u7684\u51fd\u6570 \u533f\u540d\u51fd\u6570\u6216\u8005lambda\u51fd\u6570\uff08\u53c2\u8003 \u7b2c 6.8 \u8282 \uff09 \u65b9\u6cd5\uff08Methods\uff0c\u53c2\u8003 \u7b2c 10.6 \u8282 \uff09 \u9664\u4e86 main() \u3001 init() \u51fd\u6570\u5916\uff0c\u5176\u5b83\u6240\u6709\u7c7b\u578b\u7684\u51fd\u6570\u90fd\u53ef\u4ee5\u6709\u53c2\u6570\u4e0e\u8fd4\u56de\u503c\u3002\u51fd\u6570\u53c2\u6570\u3001\u8fd4\u56de\u503c\u4ee5\u53ca\u5b83\u4eec\u7684\u7c7b\u578b\u88ab\u7edf\u79f0\u4e3a\u51fd\u6570\u7b7e\u540d\u3002 \u4f5c\u4e3a\u63d0\u9192\uff0c\u63d0\u524d\u4ecb\u7ecd\u4e00\u4e2a\u8bed\u6cd5\uff1a \u8fd9\u6837\u662f\u4e0d\u6b63\u786e\u7684 Go \u4ee3\u7801\uff1a func g () { } \u5b83\u5fc5\u987b\u662f\u8fd9\u6837\u7684\uff1a func g () { } \u51fd\u6570\u88ab\u8c03\u7528\u7684\u57fa\u672c\u683c\u5f0f\u5982\u4e0b\uff1a pack1 . Function ( arg1 , arg2 , \u2026 , argn ) Function \u662f pack1 \u5305\u91cc\u9762\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u62ec\u53f7\u91cc\u7684\u662f\u88ab\u8c03\u7528\u51fd\u6570\u7684\u5b9e\u53c2 (argument)\uff1a\u8fd9\u4e9b\u503c\u88ab\u4f20\u9012\u7ed9\u88ab\u8c03\u7528\u51fd\u6570\u7684*\u5f62\u53c2*\uff08parameter\uff0c\u53c2\u8003 \u7b2c 6.2 \u8282 \uff09\u3002\u51fd\u6570\u88ab\u8c03\u7528\u7684\u65f6\u5019\uff0c\u8fd9\u4e9b\u5b9e\u53c2\u5c06\u88ab\u590d\u5236\uff08\u7b80\u5355\u800c\u8a00\uff09\u7136\u540e\u4f20\u9012\u7ed9\u88ab\u8c03\u7528\u51fd\u6570\u3002\u51fd\u6570\u4e00\u822c\u662f\u5728\u5176\u4ed6\u51fd\u6570\u91cc\u9762\u88ab\u8c03\u7528\u7684\uff0c\u8fd9\u4e2a\u5176\u4ed6\u51fd\u6570\u88ab\u79f0\u4e3a\u8c03\u7528\u51fd\u6570 (calling function)\u3002\u51fd\u6570\u80fd\u591a\u6b21\u8c03\u7528\u5176\u4ed6\u51fd\u6570\uff0c\u8fd9\u4e9b\u88ab\u8c03\u7528\u51fd\u6570\u6309\u987a\u5e8f\uff08\u7b80\u5355\u800c\u8a00\uff09\u6267\u884c\uff0c\u7406\u8bba\u4e0a\uff0c\u51fd\u6570\u8c03\u7528\u5176\u4ed6\u51fd\u6570\u7684\u6b21\u6570\u662f\u65e0\u7a77\u7684\uff08\u76f4\u5230\u51fd\u6570\u8c03\u7528\u6808\u88ab\u8017\u5c3d\uff09\u3002 \u4e00\u4e2a\u7b80\u5355\u7684\u51fd\u6570\u8c03\u7528\u5176\u4ed6\u51fd\u6570\u7684\u4f8b\u5b50\uff1a \u793a\u4f8b 6.1 greeting.go package main func main () { println ( \"In main before calling greeting\" ) greeting () println ( \"In main after calling greeting\" ) } func greeting () { println ( \"In greeting: Hi!!!!!\" ) } \u4ee3\u7801\u8f93\u51fa\uff1a In main before calling greeting In greeting: Hi!!!!! In main after calling greeting \u51fd\u6570\u53ef\u4ee5\u5c06\u5176\u4ed6\u51fd\u6570\u8c03\u7528\u4f5c\u4e3a\u5b83\u7684\u53c2\u6570\uff0c\u53ea\u8981\u8fd9\u4e2a\u88ab\u8c03\u7528\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e2a\u6570\u3001\u8fd4\u56de\u503c\u7c7b\u578b\u548c\u8fd4\u56de\u503c\u7684\u987a\u5e8f\u4e0e\u8c03\u7528\u51fd\u6570\u6240\u9700\u6c42\u7684\u5b9e\u53c2\u662f\u4e00\u81f4\u7684\uff0c\u4f8b\u5982\uff1a \u5047\u8bbe f1 \u9700\u8981 3 \u4e2a\u53c2\u6570 f1(a, b, c int) \uff0c\u540c\u65f6 f2 \u8fd4\u56de 3 \u4e2a\u53c2\u6570 f2(a, b int) (int, int, int) \uff0c\u5c31\u53ef\u4ee5\u8fd9\u6837\u8c03\u7528 f1 \uff1a f1(f2(a, b)) \u3002 \u51fd\u6570\u91cd\u8f7d (function overloading) \u6307\u7684\u662f\u53ef\u4ee5\u7f16\u5199\u591a\u4e2a\u540c\u540d\u51fd\u6570\uff0c\u53ea\u8981\u5b83\u4eec\u62e5\u6709\u4e0d\u540c\u7684\u5f62\u53c2/\u6216\u8005\u4e0d\u540c\u7684\u8fd4\u56de\u503c\uff0c\u5728 Go \u91cc\u9762\u51fd\u6570\u91cd\u8f7d\u662f\u4e0d\u88ab\u5141\u8bb8\u7684\u3002\u8fd9\u5c06\u5bfc\u81f4\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\uff1a funcName redeclared in this book, previous declaration at lineno Go \u8bed\u8a00\u4e0d\u652f\u6301\u8fd9\u9879\u7279\u6027\u7684\u4e3b\u8981\u539f\u56e0\u662f\u51fd\u6570\u91cd\u8f7d\u9700\u8981\u8fdb\u884c\u591a\u4f59\u7684\u7c7b\u578b\u5339\u914d\u5f71\u54cd\u6027\u80fd\uff1b\u6ca1\u6709\u91cd\u8f7d\u610f\u5473\u7740\u53ea\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u51fd\u6570\u8c03\u5ea6\u3002\u6240\u4ee5\u4f60\u9700\u8981\u7ed9\u4e0d\u540c\u7684\u51fd\u6570\u4f7f\u7528\u4e0d\u540c\u7684\u540d\u5b57\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u6839\u636e\u51fd\u6570\u7684\u7279\u5f81\u5bf9\u51fd\u6570\u8fdb\u884c\u547d\u540d\uff08\u53c2\u8003 \u7b2c 11.12.5 \u8282 \uff09\u3002 \u5982\u679c\u9700\u8981\u7533\u660e\u4e00\u4e2a\u5728\u5916\u90e8\u5b9a\u4e49\u7684\u51fd\u6570\uff0c\u4f60\u53ea\u9700\u8981\u7ed9\u51fa\u51fd\u6570\u540d\u4e0e\u51fd\u6570\u7b7e\u540d\uff0c\u4e0d\u9700\u8981\u7ed9\u51fa\u51fd\u6570\u4f53\uff1a func flushICache ( begin , end uintptr ) // implemented externally \u51fd\u6570\u4e5f\u53ef\u4ee5\u4ee5\u7533\u660e\u7684\u65b9\u5f0f\u88ab\u4f7f\u7528\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u51fd\u6570\u7c7b\u578b \uff0c\u5c31\u50cf\uff1a type binOp func ( int , int ) int \u5728\u8fd9\u91cc\uff0c\u4e0d\u9700\u8981\u51fd\u6570\u4f53 {} \u3002 \u51fd\u6570\u662f\u4e00\u7b49\u503c (first-class value)\uff1a\u5b83\u4eec\u53ef\u4ee5\u8d4b\u503c\u7ed9\u53d8\u91cf\uff0c\u5c31\u50cf add := binOp \u4e00\u6837\u3002 \u8fd9\u4e2a\u53d8\u91cf\u77e5\u9053\u81ea\u5df1\u6307\u5411\u7684\u51fd\u6570\u7684\u7b7e\u540d\uff0c\u6240\u4ee5\u7ed9\u5b83\u8d4b\u4e00\u4e2a\u5177\u6709\u4e0d\u540c\u7b7e\u540d\u7684\u51fd\u6570\u503c\u662f\u4e0d\u53ef\u80fd\u7684\u3002 \u51fd\u6570\u503c (functions value) \u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u6bd4\u8f83\uff1a\u5982\u679c\u5b83\u4eec\u5f15\u7528\u7684\u662f\u76f8\u540c\u7684\u51fd\u6570\u6216\u8005\u90fd\u662f nil \u7684\u8bdd\uff0c\u5219\u8ba4\u4e3a\u5b83\u4eec\u662f\u76f8\u540c\u7684\u51fd\u6570\u3002\u51fd\u6570\u4e0d\u80fd\u5728\u5176\u5b83\u51fd\u6570\u91cc\u9762\u58f0\u660e\uff08\u4e0d\u80fd\u5d4c\u5957\uff09\uff0c\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u533f\u540d\u51fd\u6570\uff08\u53c2\u8003 \u7b2c 6.8 \u8282 \uff09\u6765\u7834\u9664\u8fd9\u4e2a\u9650\u5236\u3002 \u76ee\u524d Go \u6ca1\u6709\u6cdb\u578b (generic) \u7684\u6982\u5ff5\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b83\u4e0d\u652f\u6301\u90a3\u79cd\u652f\u6301\u591a\u79cd\u7c7b\u578b\u7684\u51fd\u6570\u3002\u4e0d\u8fc7\u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u53ef\u4ee5\u901a\u8fc7\u63a5\u53e3 (interface)\uff0c\u7279\u522b\u662f\u7a7a\u63a5\u53e3\u4e0e\u7c7b\u578b\u9009\u62e9\uff08type switch\uff0c\u53c2\u8003 \u7b2c 11.12 \u8282 \uff09\u4e0e/\u6216\u8005\u901a\u8fc7\u4f7f\u7528\u53cd\u5c04\uff08reflection\uff0c\u53c2\u8003 \u7b2c 6.8 \u8282 \uff09\u6765\u5b9e\u73b0\u76f8\u4f3c\u7684\u529f\u80fd\u3002\u4f7f\u7528\u8fd9\u4e9b\u6280\u672f\u5c06\u5bfc\u81f4\u4ee3\u7801\u66f4\u4e3a\u590d\u6742\u3001\u6027\u80fd\u66f4\u4e3a\u4f4e\u4e0b\uff0c\u6240\u4ee5\u5728\u975e\u5e38\u6ce8\u610f\u6027\u80fd\u7684\u7684\u573a\u5408\uff0c\u6700\u597d\u662f\u4e3a\u6bcf\u4e00\u4e2a\u7c7b\u578b\u5355\u72ec\u521b\u5efa\u4e00\u4e2a\u51fd\u6570\uff0c\u800c\u4e14\u4ee3\u7801\u53ef\u8bfb\u6027\u66f4\u5f3a\u3002","title":"6.1 \u4ecb\u7ecd"},{"location":"06.1/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u51fd\u6570 (function) \u4e0b\u4e00\u8282\uff1a \u51fd\u6570\u53c2\u6570\u4e0e\u8fd4\u56de\u503c","title":"\u94fe\u63a5"},{"location":"06.10/","text":"6.10 \u4f7f\u7528\u95ed\u5305\u8c03\u8bd5 \u00b6 \u5f53\u60a8\u5728\u5206\u6790\u548c\u8c03\u8bd5\u590d\u6742\u7684\u7a0b\u5e8f\u65f6\uff0c\u65e0\u6570\u4e2a\u51fd\u6570\u5728\u4e0d\u540c\u7684\u4ee3\u7801\u6587\u4ef6\u4e2d\u76f8\u4e92\u8c03\u7528\uff0c\u5982\u679c\u8fd9\u65f6\u5019\u80fd\u591f\u51c6\u786e\u5730\u77e5\u9053\u54ea\u4e2a\u6587\u4ef6\u4e2d\u7684\u5177\u4f53\u54ea\u4e2a\u51fd\u6570\u6b63\u5728\u6267\u884c\uff0c\u5bf9\u4e8e\u8c03\u8bd5\u662f\u5341\u5206\u6709\u5e2e\u52a9\u7684\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 runtime \u6216 log \u5305\u4e2d\u7684\u7279\u6b8a\u51fd\u6570\u6765\u5b9e\u73b0\u8fd9\u6837\u7684\u529f\u80fd\u3002\u5305 runtime \u4e2d\u7684\u51fd\u6570 Caller() \u63d0\u4f9b\u4e86\u76f8\u5e94\u7684\u4fe1\u606f\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728\u9700\u8981\u7684\u65f6\u5019\u5b9e\u73b0\u4e00\u4e2a where() \u95ed\u5305\u51fd\u6570\u6765\u6253\u5370\u51fd\u6570\u6267\u884c\u7684\u4f4d\u7f6e\uff1a where := func () { _ , file , line , _ := runtime . Caller ( 1 ) log . Printf ( \"%s:%d\" , file , line ) } where () // some code where () // some more code where () \u60a8\u4e5f\u53ef\u4ee5\u8bbe\u7f6e log \u5305\u4e2d\u7684 flag \u53c2\u6570\u6765\u5b9e\u73b0\uff1a log . SetFlags ( log . Llongfile ) log . Print ( \"\" ) \u6216\u4f7f\u7528\u4e00\u4e2a\u66f4\u52a0\u7b80\u77ed\u7248\u672c\u7684 where() \u51fd\u6570\uff1a var where = log . Print func func1 () { where () ... some code where () ... some code where () } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5e94\u7528\u95ed\u5305\uff1a\u5c06\u51fd\u6570\u4f5c\u4e3a\u8fd4\u56de\u503c \u4e0b\u4e00\u8282\uff1a \u8ba1\u7b97\u51fd\u6570\u6267\u884c\u65f6\u95f4","title":"6.10 \u4f7f\u7528\u95ed\u5305\u8c03\u8bd5"},{"location":"06.10/#610","text":"\u5f53\u60a8\u5728\u5206\u6790\u548c\u8c03\u8bd5\u590d\u6742\u7684\u7a0b\u5e8f\u65f6\uff0c\u65e0\u6570\u4e2a\u51fd\u6570\u5728\u4e0d\u540c\u7684\u4ee3\u7801\u6587\u4ef6\u4e2d\u76f8\u4e92\u8c03\u7528\uff0c\u5982\u679c\u8fd9\u65f6\u5019\u80fd\u591f\u51c6\u786e\u5730\u77e5\u9053\u54ea\u4e2a\u6587\u4ef6\u4e2d\u7684\u5177\u4f53\u54ea\u4e2a\u51fd\u6570\u6b63\u5728\u6267\u884c\uff0c\u5bf9\u4e8e\u8c03\u8bd5\u662f\u5341\u5206\u6709\u5e2e\u52a9\u7684\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 runtime \u6216 log \u5305\u4e2d\u7684\u7279\u6b8a\u51fd\u6570\u6765\u5b9e\u73b0\u8fd9\u6837\u7684\u529f\u80fd\u3002\u5305 runtime \u4e2d\u7684\u51fd\u6570 Caller() \u63d0\u4f9b\u4e86\u76f8\u5e94\u7684\u4fe1\u606f\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728\u9700\u8981\u7684\u65f6\u5019\u5b9e\u73b0\u4e00\u4e2a where() \u95ed\u5305\u51fd\u6570\u6765\u6253\u5370\u51fd\u6570\u6267\u884c\u7684\u4f4d\u7f6e\uff1a where := func () { _ , file , line , _ := runtime . Caller ( 1 ) log . Printf ( \"%s:%d\" , file , line ) } where () // some code where () // some more code where () \u60a8\u4e5f\u53ef\u4ee5\u8bbe\u7f6e log \u5305\u4e2d\u7684 flag \u53c2\u6570\u6765\u5b9e\u73b0\uff1a log . SetFlags ( log . Llongfile ) log . Print ( \"\" ) \u6216\u4f7f\u7528\u4e00\u4e2a\u66f4\u52a0\u7b80\u77ed\u7248\u672c\u7684 where() \u51fd\u6570\uff1a var where = log . Print func func1 () { where () ... some code where () ... some code where () }","title":"6.10 \u4f7f\u7528\u95ed\u5305\u8c03\u8bd5"},{"location":"06.10/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5e94\u7528\u95ed\u5305\uff1a\u5c06\u51fd\u6570\u4f5c\u4e3a\u8fd4\u56de\u503c \u4e0b\u4e00\u8282\uff1a \u8ba1\u7b97\u51fd\u6570\u6267\u884c\u65f6\u95f4","title":"\u94fe\u63a5"},{"location":"06.11/","text":"6.11 \u8ba1\u7b97\u51fd\u6570\u6267\u884c\u65f6\u95f4 \u00b6 \u6709\u65f6\u5019\uff0c\u80fd\u591f\u77e5\u9053\u4e00\u4e2a\u8ba1\u7b97\u6267\u884c\u6d88\u8017\u7684\u65f6\u95f4\u662f\u975e\u5e38\u6709\u610f\u4e49\u7684\uff0c\u5c24\u5176\u662f\u5728\u5bf9\u6bd4\u548c\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u3002\u6700\u7b80\u5355\u7684\u4e00\u4e2a\u529e\u6cd5\u5c31\u662f\u5728\u8ba1\u7b97\u5f00\u59cb\u4e4b\u524d\u8bbe\u7f6e\u4e00\u4e2a\u8d77\u59cb\u65f6\u95f4\uff0c\u518d\u8bb0\u5f55\u8ba1\u7b97\u7ed3\u675f\u65f6\u7684\u7ed3\u675f\u65f6\u95f4\uff0c\u6700\u540e\u8ba1\u7b97\u5b83\u4eec\u7684\u5dee\u503c\uff0c\u5c31\u662f\u8fd9\u4e2a\u8ba1\u7b97\u6240\u6d88\u8017\u7684\u65f6\u95f4\u3002\u60f3\u8981\u5b9e\u73b0\u8fd9\u6837\u7684\u505a\u6cd5\uff0c\u53ef\u4ee5\u4f7f\u7528 time \u5305\u4e2d\u7684 Now() \u548c Sub() \u51fd\u6570\uff1a start := time . Now () longCalculation () end := time . Now () delta := end . Sub ( start ) fmt . Printf ( \"longCalculation took this amount of time: %s\\n\" , delta ) \u60a8\u53ef\u4ee5\u67e5\u770b\u793a\u4f8b 6.20 fibonacci.go \u4f5c\u4e3a\u5b9e\u4f8b\u5b66\u4e60\u3002 \u5982\u679c\u60a8\u5bf9\u4e00\u6bb5\u4ee3\u7801\u8fdb\u884c\u4e86\u6240\u8c13\u7684\u4f18\u5316\uff0c\u8bf7\u52a1\u5fc5\u5bf9\u5b83\u4eec\u4e4b\u95f4\u7684\u6548\u7387\u8fdb\u884c\u5bf9\u6bd4\u518d\u505a\u51fa\u6700\u540e\u7684\u5224\u65ad\u3002\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u4f1a\u5b66\u4e60\u5982\u4f55\u8fdb\u884c\u6709\u4ef7\u503c\u7684\u4f18\u5316\u64cd\u4f5c\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f7f\u7528\u95ed\u5305\u8c03\u8bd5 \u4e0b\u4e00\u8282\uff1a \u901a\u8fc7\u5185\u5b58\u7f13\u5b58\u6765\u63d0\u5347\u6027\u80fd","title":"6.11 \u8ba1\u7b97\u51fd\u6570\u6267\u884c\u65f6\u95f4"},{"location":"06.11/#611","text":"\u6709\u65f6\u5019\uff0c\u80fd\u591f\u77e5\u9053\u4e00\u4e2a\u8ba1\u7b97\u6267\u884c\u6d88\u8017\u7684\u65f6\u95f4\u662f\u975e\u5e38\u6709\u610f\u4e49\u7684\uff0c\u5c24\u5176\u662f\u5728\u5bf9\u6bd4\u548c\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u3002\u6700\u7b80\u5355\u7684\u4e00\u4e2a\u529e\u6cd5\u5c31\u662f\u5728\u8ba1\u7b97\u5f00\u59cb\u4e4b\u524d\u8bbe\u7f6e\u4e00\u4e2a\u8d77\u59cb\u65f6\u95f4\uff0c\u518d\u8bb0\u5f55\u8ba1\u7b97\u7ed3\u675f\u65f6\u7684\u7ed3\u675f\u65f6\u95f4\uff0c\u6700\u540e\u8ba1\u7b97\u5b83\u4eec\u7684\u5dee\u503c\uff0c\u5c31\u662f\u8fd9\u4e2a\u8ba1\u7b97\u6240\u6d88\u8017\u7684\u65f6\u95f4\u3002\u60f3\u8981\u5b9e\u73b0\u8fd9\u6837\u7684\u505a\u6cd5\uff0c\u53ef\u4ee5\u4f7f\u7528 time \u5305\u4e2d\u7684 Now() \u548c Sub() \u51fd\u6570\uff1a start := time . Now () longCalculation () end := time . Now () delta := end . Sub ( start ) fmt . Printf ( \"longCalculation took this amount of time: %s\\n\" , delta ) \u60a8\u53ef\u4ee5\u67e5\u770b\u793a\u4f8b 6.20 fibonacci.go \u4f5c\u4e3a\u5b9e\u4f8b\u5b66\u4e60\u3002 \u5982\u679c\u60a8\u5bf9\u4e00\u6bb5\u4ee3\u7801\u8fdb\u884c\u4e86\u6240\u8c13\u7684\u4f18\u5316\uff0c\u8bf7\u52a1\u5fc5\u5bf9\u5b83\u4eec\u4e4b\u95f4\u7684\u6548\u7387\u8fdb\u884c\u5bf9\u6bd4\u518d\u505a\u51fa\u6700\u540e\u7684\u5224\u65ad\u3002\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u4f1a\u5b66\u4e60\u5982\u4f55\u8fdb\u884c\u6709\u4ef7\u503c\u7684\u4f18\u5316\u64cd\u4f5c\u3002","title":"6.11 \u8ba1\u7b97\u51fd\u6570\u6267\u884c\u65f6\u95f4"},{"location":"06.11/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f7f\u7528\u95ed\u5305\u8c03\u8bd5 \u4e0b\u4e00\u8282\uff1a \u901a\u8fc7\u5185\u5b58\u7f13\u5b58\u6765\u63d0\u5347\u6027\u80fd","title":"\u94fe\u63a5"},{"location":"06.12/","text":"6.12 \u901a\u8fc7\u5185\u5b58\u7f13\u5b58\u6765\u63d0\u5347\u6027\u80fd \u00b6 \u5f53\u5728\u8fdb\u884c\u5927\u91cf\u7684\u8ba1\u7b97\u65f6\uff0c\u63d0\u5347\u6027\u80fd\u6700\u76f4\u63a5\u6709\u6548\u7684\u4e00\u79cd\u65b9\u5f0f\u5c31\u662f\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002\u901a\u8fc7\u5728\u5185\u5b58\u4e2d\u7f13\u5b58\u548c\u91cd\u590d\u5229\u7528\u76f8\u540c\u8ba1\u7b97\u7684\u7ed3\u679c\uff0c\u79f0\u4e4b\u4e3a\u5185\u5b58\u7f13\u5b58\u3002\u6700\u660e\u663e\u7684\u4f8b\u5b50\u5c31\u662f\u751f\u6210\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7a0b\u5e8f\uff08\u8be6\u89c1\u7b2c 6.6 \u548c 6.11 \u8282\uff09\uff1a \u8981\u8ba1\u7b97\u6570\u5217\u4e2d\u7b2c n \u4e2a\u6570\u5b57\uff0c\u9700\u8981\u5148\u5f97\u5230\u4e4b\u524d\u4e24\u4e2a\u6570\u7684\u503c\uff0c\u4f46\u5f88\u660e\u663e\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u524d\u4e24\u4e2a\u6570\u7684\u503c\u90fd\u662f\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u7684\u3002\u5373\u6bcf\u4e2a\u66f4\u540e\u9762\u7684\u6570\u90fd\u662f\u57fa\u4e8e\u4e4b\u524d\u8ba1\u7b97\u7ed3\u679c\u7684\u91cd\u590d\u8ba1\u7b97\uff0c\u6b63\u5982\u793a\u4f8b 6.11 fibonnaci.go \u6240\u5c55\u793a\u7684\u90a3\u6837\u3002 \u800c\u6211\u4eec\u8981\u505a\u5c31\u662f\u5c06\u7b2c n \u4e2a\u6570\u7684\u503c\u5b58\u5728\u6570\u7ec4\u4e2d\u7d22\u5f15\u4e3a n \u7684\u4f4d\u7f6e\uff08\u8be6\u89c1 \u7b2c 7 \u7ae0 \uff09\uff0c\u7136\u540e\u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u662f\u5426\u5df2\u7ecf\u8ba1\u7b97\u8fc7\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5219\u518d\u8fdb\u884c\u8ba1\u7b97\u3002 \u7a0b\u5e8f Listing 6.17 - fibonacci_memoization.go \u5c31\u662f\u4f9d\u7167\u8fd9\u4e2a\u539f\u5219\u5b9e\u73b0\u7684\uff0c\u4e0b\u9762\u662f\u8ba1\u7b97\u5230\u7b2c 40 \u4f4d\u6570\u5b57\u7684\u6027\u80fd\u5bf9\u6bd4\uff1a \u666e\u901a\u5199\u6cd5\uff1a4.730270 \u79d2 \u5185\u5b58\u7f13\u5b58\uff1a0.001000 \u79d2 \u5185\u5b58\u7f13\u5b58\u7684\u4f18\u52bf\u663e\u800c\u6613\u89c1\uff0c\u800c\u4e14\u60a8\u8fd8\u53ef\u4ee5\u5c06\u5b83\u5e94\u7528\u5230\u5176\u5b83\u7c7b\u578b\u7684\u8ba1\u7b97\u4e2d\uff0c\u4f8b\u5982\u4f7f\u7528 map \uff08\u8be6\u89c1 \u7b2c 7 \u7ae0 \uff09\u800c\u4e0d\u662f\u6570\u7ec4\u6216\u5207\u7247\uff08Listing 6.21 - fibonacci_memoization.go \uff09\uff1a package main import ( \"fmt\" \"time\" ) const LIM = 41 var fibs [ LIM ] uint64 func main () { var result uint64 = 0 start := time . Now () for i := 0 ; i < LIM ; i ++ { result = fibonacci ( i ) fmt . Printf ( \"fibonacci(%d) is: %d\\n\" , i , result ) } end := time . Now () delta := end . Sub ( start ) fmt . Printf ( \"longCalculation took this amount of time: %s\\n\" , delta ) } func fibonacci ( n int ) ( res uint64 ) { // memoization: check if fibonacci(n) is already known in array: if fibs [ n ] != 0 { res = fibs [ n ] return } if n <= 1 { res = 1 } else { res = fibonacci ( n - 1 ) + fibonacci ( n - 2 ) } fibs [ n ] = res return } \u5185\u5b58\u7f13\u5b58\u7684\u6280\u672f\u5728\u4f7f\u7528\u8ba1\u7b97\u6210\u672c\u76f8\u5bf9\u6602\u8d35\u7684\u51fd\u6570\u65f6\u975e\u5e38\u6709\u7528\uff08\u4e0d\u4ec5\u9650\u4e8e\u4f8b\u5b50\u4e2d\u7684\u9012\u5f52\uff09\uff0c\u8b6c\u5982\u5927\u91cf\u8fdb\u884c\u76f8\u540c\u53c2\u6570\u7684\u8fd0\u7b97\u3002\u8fd9\u79cd\u6280\u672f\u8fd8\u53ef\u4ee5\u5e94\u7528\u4e8e\u7eaf\u51fd\u6570\u4e2d\uff0c\u5373\u76f8\u540c\u8f93\u5165\u5fc5\u5b9a\u83b7\u5f97\u76f8\u540c\u8f93\u51fa\u7684\u51fd\u6570\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u8ba1\u7b97\u51fd\u6570\u6267\u884c\u65f6\u95f4 \u4e0b\u4e00\u7ae0\uff1a \u6570\u7ec4\u4e0e\u5207\u7247","title":"6.12 \u901a\u8fc7\u5185\u5b58\u7f13\u5b58\u6765\u63d0\u5347\u6027\u80fd"},{"location":"06.12/#612","text":"\u5f53\u5728\u8fdb\u884c\u5927\u91cf\u7684\u8ba1\u7b97\u65f6\uff0c\u63d0\u5347\u6027\u80fd\u6700\u76f4\u63a5\u6709\u6548\u7684\u4e00\u79cd\u65b9\u5f0f\u5c31\u662f\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002\u901a\u8fc7\u5728\u5185\u5b58\u4e2d\u7f13\u5b58\u548c\u91cd\u590d\u5229\u7528\u76f8\u540c\u8ba1\u7b97\u7684\u7ed3\u679c\uff0c\u79f0\u4e4b\u4e3a\u5185\u5b58\u7f13\u5b58\u3002\u6700\u660e\u663e\u7684\u4f8b\u5b50\u5c31\u662f\u751f\u6210\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7a0b\u5e8f\uff08\u8be6\u89c1\u7b2c 6.6 \u548c 6.11 \u8282\uff09\uff1a \u8981\u8ba1\u7b97\u6570\u5217\u4e2d\u7b2c n \u4e2a\u6570\u5b57\uff0c\u9700\u8981\u5148\u5f97\u5230\u4e4b\u524d\u4e24\u4e2a\u6570\u7684\u503c\uff0c\u4f46\u5f88\u660e\u663e\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u524d\u4e24\u4e2a\u6570\u7684\u503c\u90fd\u662f\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u7684\u3002\u5373\u6bcf\u4e2a\u66f4\u540e\u9762\u7684\u6570\u90fd\u662f\u57fa\u4e8e\u4e4b\u524d\u8ba1\u7b97\u7ed3\u679c\u7684\u91cd\u590d\u8ba1\u7b97\uff0c\u6b63\u5982\u793a\u4f8b 6.11 fibonnaci.go \u6240\u5c55\u793a\u7684\u90a3\u6837\u3002 \u800c\u6211\u4eec\u8981\u505a\u5c31\u662f\u5c06\u7b2c n \u4e2a\u6570\u7684\u503c\u5b58\u5728\u6570\u7ec4\u4e2d\u7d22\u5f15\u4e3a n \u7684\u4f4d\u7f6e\uff08\u8be6\u89c1 \u7b2c 7 \u7ae0 \uff09\uff0c\u7136\u540e\u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u662f\u5426\u5df2\u7ecf\u8ba1\u7b97\u8fc7\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5219\u518d\u8fdb\u884c\u8ba1\u7b97\u3002 \u7a0b\u5e8f Listing 6.17 - fibonacci_memoization.go \u5c31\u662f\u4f9d\u7167\u8fd9\u4e2a\u539f\u5219\u5b9e\u73b0\u7684\uff0c\u4e0b\u9762\u662f\u8ba1\u7b97\u5230\u7b2c 40 \u4f4d\u6570\u5b57\u7684\u6027\u80fd\u5bf9\u6bd4\uff1a \u666e\u901a\u5199\u6cd5\uff1a4.730270 \u79d2 \u5185\u5b58\u7f13\u5b58\uff1a0.001000 \u79d2 \u5185\u5b58\u7f13\u5b58\u7684\u4f18\u52bf\u663e\u800c\u6613\u89c1\uff0c\u800c\u4e14\u60a8\u8fd8\u53ef\u4ee5\u5c06\u5b83\u5e94\u7528\u5230\u5176\u5b83\u7c7b\u578b\u7684\u8ba1\u7b97\u4e2d\uff0c\u4f8b\u5982\u4f7f\u7528 map \uff08\u8be6\u89c1 \u7b2c 7 \u7ae0 \uff09\u800c\u4e0d\u662f\u6570\u7ec4\u6216\u5207\u7247\uff08Listing 6.21 - fibonacci_memoization.go \uff09\uff1a package main import ( \"fmt\" \"time\" ) const LIM = 41 var fibs [ LIM ] uint64 func main () { var result uint64 = 0 start := time . Now () for i := 0 ; i < LIM ; i ++ { result = fibonacci ( i ) fmt . Printf ( \"fibonacci(%d) is: %d\\n\" , i , result ) } end := time . Now () delta := end . Sub ( start ) fmt . Printf ( \"longCalculation took this amount of time: %s\\n\" , delta ) } func fibonacci ( n int ) ( res uint64 ) { // memoization: check if fibonacci(n) is already known in array: if fibs [ n ] != 0 { res = fibs [ n ] return } if n <= 1 { res = 1 } else { res = fibonacci ( n - 1 ) + fibonacci ( n - 2 ) } fibs [ n ] = res return } \u5185\u5b58\u7f13\u5b58\u7684\u6280\u672f\u5728\u4f7f\u7528\u8ba1\u7b97\u6210\u672c\u76f8\u5bf9\u6602\u8d35\u7684\u51fd\u6570\u65f6\u975e\u5e38\u6709\u7528\uff08\u4e0d\u4ec5\u9650\u4e8e\u4f8b\u5b50\u4e2d\u7684\u9012\u5f52\uff09\uff0c\u8b6c\u5982\u5927\u91cf\u8fdb\u884c\u76f8\u540c\u53c2\u6570\u7684\u8fd0\u7b97\u3002\u8fd9\u79cd\u6280\u672f\u8fd8\u53ef\u4ee5\u5e94\u7528\u4e8e\u7eaf\u51fd\u6570\u4e2d\uff0c\u5373\u76f8\u540c\u8f93\u5165\u5fc5\u5b9a\u83b7\u5f97\u76f8\u540c\u8f93\u51fa\u7684\u51fd\u6570\u3002","title":"6.12 \u901a\u8fc7\u5185\u5b58\u7f13\u5b58\u6765\u63d0\u5347\u6027\u80fd"},{"location":"06.12/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u8ba1\u7b97\u51fd\u6570\u6267\u884c\u65f6\u95f4 \u4e0b\u4e00\u7ae0\uff1a \u6570\u7ec4\u4e0e\u5207\u7247","title":"\u94fe\u63a5"},{"location":"06.2/","text":"6.2 \u51fd\u6570\u53c2\u6570\u4e0e\u8fd4\u56de\u503c \u00b6 \u51fd\u6570\u80fd\u591f\u63a5\u6536\u53c2\u6570\u4f9b\u81ea\u5df1\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u8fd4\u56de\u96f6\u4e2a\u6216\u591a\u4e2a\u503c\uff08\u6211\u4eec\u901a\u5e38\u628a\u8fd4\u56de\u591a\u4e2a\u503c\u79f0\u4e3a\u8fd4\u56de\u4e00\u7ec4\u503c\uff09\u3002\u76f8\u6bd4\u4e0e C\u3001C++\u3001Java \u548c C#\uff0c\u591a\u503c\u8fd4\u56de\u662f Go \u7684\u4e00\u5927\u7279\u6027\uff0c\u4e3a\u6211\u4eec\u5224\u65ad\u4e00\u4e2a\u51fd\u6570\u662f\u5426\u6b63\u5e38\u6267\u884c\uff08\u53c2\u8003 \u7b2c 5.2 \u8282 \uff09\u63d0\u4f9b\u4e86\u65b9\u4fbf\u3002 \u6211\u4eec\u901a\u8fc7 return \u5173\u952e\u5b57\u8fd4\u56de\u4e00\u7ec4\u503c\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4efb\u4f55\u4e00\u4e2a\u6709\u8fd4\u56de\u503c\uff08\u5355\u4e2a\u6216\u591a\u4e2a\uff09\u7684\u51fd\u6570\u90fd\u5fc5\u987b\u4ee5 return \u6216 panic \uff08\u53c2\u8003 \u7b2c 13 \u7ae0 \uff09\u7ed3\u5c3e\u3002 \u5728\u51fd\u6570\u5757\u91cc\u9762\uff0c return \u4e4b\u540e\u7684\u8bed\u53e5\u90fd\u4e0d\u4f1a\u6267\u884c\u3002\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u9700\u8981\u8fd4\u56de\u503c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u51fd\u6570\u91cc\u9762\u7684\u6bcf\u4e00\u4e2a\u4ee3\u7801\u5206\u652f (code-path) \u90fd\u8981\u6709 return \u8bed\u53e5\u3002 \u95ee\u9898 6.1\uff1a\u4e0b\u9762\u7684\u51fd\u6570\u5c06\u4e0d\u4f1a\u88ab\u7f16\u8bd1\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\u5927\u5bb6\u53ef\u4ee5\u8bd5\u7740\u7ea0\u6b63\u8fc7\u6765\u3002 func ( st * Stack ) Pop () int { v := 0 for ix := len ( st ) - 1 ; ix >= 0 ; ix -- { if v = st [ ix ]; v != 0 { st [ ix ] = 0 return v } } } \u51fd\u6570\u5b9a\u4e49\u65f6\uff0c\u5b83\u7684\u5f62\u53c2\u4e00\u822c\u662f\u6709\u540d\u5b57\u7684\uff0c\u4e0d\u8fc7\u6211\u4eec\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u6ca1\u6709\u5f62\u53c2\u540d\u7684\u51fd\u6570\uff0c\u53ea\u6709\u76f8\u5e94\u7684\u5f62\u53c2\u7c7b\u578b\uff0c\u5c31\u50cf\u8fd9\u6837\uff1a func f(int, int, float64) \u3002 \u6ca1\u6709\u53c2\u6570\u7684\u51fd\u6570\u901a\u5e38\u88ab\u79f0\u4e3a niladic \u51fd\u6570 (niladic function)\uff0c\u5c31\u50cf main.main() \u3002 6.2.1 \u6309\u503c\u4f20\u9012 (call by value) \u6309\u5f15\u7528\u4f20\u9012 (call by reference) \u00b6 Go \u9ed8\u8ba4\u4f7f\u7528\u6309\u503c\u4f20\u9012\u6765\u4f20\u9012\u53c2\u6570\uff0c\u4e5f\u5c31\u662f\u4f20\u9012\u53c2\u6570\u7684\u526f\u672c\u3002\u51fd\u6570\u63a5\u6536\u53c2\u6570\u526f\u672c\u4e4b\u540e\uff0c\u5728\u4f7f\u7528\u53d8\u91cf\u7684\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u5bf9\u526f\u672c\u7684\u503c\u8fdb\u884c\u66f4\u6539\uff0c\u4f46\u4e0d\u4f1a\u5f71\u54cd\u5230\u539f\u6765\u7684\u53d8\u91cf\uff0c\u6bd4\u5982 Function(arg1) \u3002 \u5982\u679c\u4f60\u5e0c\u671b\u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u53c2\u6570\u7684\u503c\uff0c\u800c\u4e0d\u662f\u5bf9\u53c2\u6570\u7684\u526f\u672c\u8fdb\u884c\u64cd\u4f5c\uff0c\u4f60\u9700\u8981\u5c06\u53c2\u6570\u7684\u5730\u5740\uff08\u53d8\u91cf\u540d\u524d\u9762\u6dfb\u52a0 & \u7b26\u53f7\uff0c\u6bd4\u5982 &variable \uff09\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u8fd9\u5c31\u662f\u6309\u5f15\u7528\u4f20\u9012\uff0c\u6bd4\u5982 Function(&arg1) \uff0c\u6b64\u65f6\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u662f\u4e00\u4e2a\u6307\u9488\u3002\u5982\u679c\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u9488\u7684\u503c\uff08\u4e00\u4e2a\u5730\u5740\uff09\u4f1a\u88ab\u590d\u5236\uff0c\u4f46\u6307\u9488\u7684\u503c\u6240\u6307\u5411\u7684\u5730\u5740\u4e0a\u7684\u503c\u4e0d\u4f1a\u88ab\u590d\u5236\uff1b\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u6307\u9488\u7684\u503c\u6765\u4fee\u6539\u8fd9\u4e2a\u503c\u6240\u6307\u5411\u7684\u5730\u5740\u4e0a\u7684\u503c\u3002\uff08 \u8bd1\u8005\u6ce8\uff1a\u6307\u9488\u4e5f\u662f\u53d8\u91cf\u7c7b\u578b\uff0c\u6709\u81ea\u5df1\u7684\u5730\u5740\u548c\u503c\uff0c\u901a\u5e38\u6307\u9488\u7684\u503c\u6307\u5411\u4e00\u4e2a\u53d8\u91cf\u7684\u5730\u5740\u3002\u6240\u4ee5\uff0c\u6309\u5f15\u7528\u4f20\u9012\u4e5f\u662f\u6309\u503c\u4f20\u9012\u3002 \uff09 \u51e0\u4e4e\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u4f20\u9012\u6307\u9488\uff08\u4e00\u4e2a32\u4f4d\u6216\u800564\u4f4d\u7684\u503c\uff09\u7684\u6d88\u8017\u90fd\u6bd4\u4f20\u9012\u526f\u672c\u6765\u5f97\u5c11\u3002 \u5728\u51fd\u6570\u8c03\u7528\u65f6\uff0c\u50cf\u5207\u7247 (slice)\u3001\u5b57\u5178 (map)\u3001\u63a5\u53e3 (interface)\u3001\u901a\u9053 (channel) \u8fd9\u6837\u7684\u5f15\u7528\u7c7b\u578b\u90fd\u662f\u9ed8\u8ba4\u4f7f\u7528\u5f15\u7528\u4f20\u9012\uff08\u5373\u4f7f\u6ca1\u6709\u663e\u5f0f\u7684\u6307\u51fa\u6307\u9488\uff09\u3002 \u6709\u4e9b\u51fd\u6570\u53ea\u662f\u5b8c\u6210\u4e00\u4e2a\u4efb\u52a1\uff0c\u5e76\u6ca1\u6709\u8fd4\u56de\u503c\u3002\u6211\u4eec\u4ec5\u4ec5\u662f\u5229\u7528\u4e86\u8fd9\u79cd\u51fd\u6570\u7684\u526f\u4f5c\u7528 (side-effect)\uff0c\u5c31\u50cf\u8f93\u51fa\u6587\u672c\u5230\u7ec8\u7aef\uff0c\u53d1\u9001\u4e00\u4e2a\u90ae\u4ef6\u6216\u8005\u662f\u8bb0\u5f55\u4e00\u4e2a\u9519\u8bef\u7b49\u3002 \u4f46\u662f\u7edd\u5927\u90e8\u5206\u7684\u51fd\u6570\u8fd8\u662f\u5e26\u6709\u8fd4\u56de\u503c\u7684\u3002 \u5982\u4e0b\uff0csimple_function.go \u91cc\u7684 MultiPly3Nums \u51fd\u6570\u5e26\u6709\u4e09\u4e2a\u5f62\u53c2\uff0c\u5206\u522b\u662f a \u3001 b \u3001 c \uff0c\u8fd8\u6709\u4e00\u4e2a int \u7c7b\u578b\u7684\u8fd4\u56de\u503c\uff08\u88ab\u6ce8\u91ca\u7684\u4ee3\u7801\u5177\u6709\u548c\u672a\u6ce8\u91ca\u90e8\u5206\u540c\u6837\u7684\u529f\u80fd\uff0c\u53ea\u662f\u591a\u5f15\u5165\u4e86\u4e00\u4e2a\u672c\u5730\u53d8\u91cf\uff09\uff1a \u793a\u4f8b 6.2 simple_function.go package main import \"fmt\" func main () { fmt . Printf ( \"Multiply 2 * 5 * 6 = %d\\n\" , MultiPly3Nums ( 2 , 5 , 6 )) // var i1 int = MultiPly3Nums(2, 5, 6) // fmt.Printf(\"MultiPly 2 * 5 * 6 = %d\\n\", i1) } func MultiPly3Nums ( a int , b int , c int ) int { // var product int = a * b * c // return product return a * b * c } \u8f93\u51fa\u663e\u793a\uff1a Multiply 2 * 5 * 6 = 60 \u5982\u679c\u4e00\u4e2a\u51fd\u6570\u9700\u8981\u8fd4\u56de\u56db\u5230\u4e94\u4e2a\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u5207\u7247\u7ed9\u51fd\u6570\uff08\u5982\u679c\u8fd4\u56de\u503c\u5177\u6709\u76f8\u540c\u7c7b\u578b\uff09\u6216\u8005\u662f\u4f20\u9012\u4e00\u4e2a\u7ed3\u6784\u4f53\uff08\u5982\u679c\u8fd4\u56de\u503c\u5177\u6709\u4e0d\u540c\u7684\u7c7b\u578b\uff09\u3002\u56e0\u4e3a\u4f20\u9012\u4e00\u4e2a\u6307\u9488\u5141\u8bb8\u76f4\u63a5\u4fee\u6539\u53d8\u91cf\u7684\u503c\uff0c\u6d88\u8017\u4e5f\u66f4\u5c11\u3002 \u95ee\u9898 6.2\uff1a \u5982\u4e0b\u7684\u4e24\u4e2a\u51fd\u6570\u8c03\u7528\u6709\u4ec0\u4e48\u4e0d\u540c\uff1a (A) func DoSomething(a *A) { b = a } (B) func DoSomething(a A) { b = &a } 6.2.2 \u547d\u540d\u7684\u8fd4\u56de\u503c (named return variables) \u00b6 \u5982\u4e0b multiple_return.go \u91cc\u7684\u51fd\u6570\u5e26\u6709\u4e00\u4e2a int \u53c2\u6570\uff0c\u8fd4\u56de\u4e24\u4e2a int \u503c\uff1b\u5176\u4e2d\u4e00\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u5728\u51fd\u6570\u8c03\u7528\u65f6\u5c31\u5df2\u7ecf\u88ab\u8d4b\u4e88\u4e86\u4e00\u4e2a\u521d\u59cb\u96f6\u503c\u3002 getX2AndX3 \u4e0e getX2AndX3_2 \u4e24\u4e2a\u51fd\u6570\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u975e\u547d\u540d\u8fd4\u56de\u503c\u4e0e\u547d\u540d\u8fd4\u56de\u503c\u7684\u7279\u6027\u3002\u5f53\u9700\u8981\u8fd4\u56de\u591a\u4e2a\u975e\u547d\u540d\u8fd4\u56de\u503c\u65f6\uff0c\u9700\u8981\u4f7f\u7528 () \u628a\u5b83\u4eec\u62ec\u8d77\u6765\uff0c\u6bd4\u5982 (int, int) \u3002 \u547d\u540d\u8fd4\u56de\u503c\u4f5c\u4e3a\u7ed3\u679c\u5f62\u53c2 (result parameters) \u88ab\u521d\u59cb\u5316\u4e3a\u76f8\u5e94\u7c7b\u578b\u7684\u96f6\u503c\uff0c\u5f53\u9700\u8981\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e00\u6761\u7b80\u5355\u7684\u4e0d\u5e26\u53c2\u6570\u7684 return \u8bed\u53e5\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5373\u4f7f\u53ea\u6709\u4e00\u4e2a\u547d\u540d\u8fd4\u56de\u503c\uff0c\u4e5f\u9700\u8981\u4f7f\u7528 () \u62ec\u8d77\u6765\uff08\u53c2\u8003 \u7b2c 6.6 \u8282 \u7684 fibonacci.go \u51fd\u6570\uff09\u3002 \u793a\u4f8b 6.3 multiple_return.go package main import \"fmt\" var num int = 10 var numx2 , numx3 int func main () { numx2 , numx3 = getX2AndX3 ( num ) PrintValues () numx2 , numx3 = getX2AndX3_2 ( num ) PrintValues () } func PrintValues () { fmt . Printf ( \"num = %d, 2x num = %d, 3x num = %d\\n\" , num , numx2 , numx3 ) } func getX2AndX3 ( input int ) ( int , int ) { return 2 * input , 3 * input } func getX2AndX3_2 ( input int ) ( x2 int , x3 int ) { x2 = 2 * input x3 = 3 * input // return x2, x3 return } \u8f93\u51fa\u7ed3\u679c\uff1a num = 10, 2x num = 20, 3x num = 30 num = 10, 2x num = 20, 3x num = 30 \u63d0\u793a\uff1a \u867d\u7136 return \u6216 return var \u90fd\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f return var = expression \uff08\u8868\u8fbe\u5f0f\uff09 \u4f1a\u5f15\u53d1\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\uff1a syntax error: unexpected =, expecting semicolon or newline or } \u3002 \u5373\u4f7f\u51fd\u6570\u4f7f\u7528\u4e86\u547d\u540d\u8fd4\u56de\u503c\uff0c\u4f60\u4f9d\u65e7\u53ef\u4ee5\u65e0\u89c6\u5b83\u800c\u8fd4\u56de\u660e\u786e\u7684\u503c\u3002 \u4efb\u4f55\u4e00\u4e2a\u975e\u547d\u540d\u8fd4\u56de\u503c\uff08\u4f7f\u7528\u975e\u547d\u540d\u8fd4\u56de\u503c\u662f\u5f88\u7cdf\u7684\u7f16\u7a0b\u4e60\u60ef\uff09\u5728 return \u8bed\u53e5\u91cc\u9762\u90fd\u8981\u660e\u786e\u6307\u51fa\u5305\u542b\u8fd4\u56de\u503c\u7684\u53d8\u91cf\u6216\u662f\u4e00\u4e2a\u53ef\u8ba1\u7b97\u7684\u503c\uff08\u5c31\u50cf\u4e0a\u9762\u8b66\u544a\u6240\u6307\u51fa\u7684\u90a3\u6837\uff09\u3002 \u5c3d\u91cf\u4f7f\u7528\u547d\u540d\u8fd4\u56de\u503c\uff1a\u4f1a\u4f7f\u4ee3\u7801\u66f4\u6e05\u6670\u3001\u66f4\u7b80\u77ed\uff0c\u540c\u65f6\u66f4\u52a0\u5bb9\u6613\u8bfb\u61c2\u3002 \u7ec3\u4e60 6.1 mult_returnval.go \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u63a5\u6536\u4e24\u4e2a\u6574\u6570\uff0c\u7136\u540e\u8fd4\u56de\u5b83\u4eec\u7684\u548c\u3001\u79ef\u4e0e\u5dee\u3002\u7f16\u5199\u4e24\u4e2a\u7248\u672c\uff0c\u4e00\u4e2a\u662f\u975e\u547d\u540d\u8fd4\u56de\u503c\uff0c\u4e00\u4e2a\u662f\u547d\u540d\u8fd4\u56de\u503c\u3002 \u7ec3\u4e60 6.2 error_returnval.go \u7f16\u5199\u4e00\u4e2a\u540d\u5b57\u4e3a MySqrt() \u7684\u51fd\u6570\uff0c\u8ba1\u7b97\u4e00\u4e2a float64 \u7c7b\u578b\u6d6e\u70b9\u6570\u7684\u5e73\u65b9\u6839\uff0c\u5982\u679c\u53c2\u6570\u662f\u4e00\u4e2a\u8d1f\u6570\u7684\u8bdd\u5c06\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u3002\u7f16\u5199\u4e24\u4e2a\u7248\u672c\uff0c\u4e00\u4e2a\u662f\u975e\u547d\u540d\u8fd4\u56de\u503c\uff0c\u4e00\u4e2a\u662f\u547d\u540d\u8fd4\u56de\u503c\u3002 6.2.3 \u7a7a\u767d\u7b26 (blank identifier) \u00b6 \u7a7a\u767d\u7b26\u7528\u6765\u5339\u914d\u4e00\u4e9b\u4e0d\u9700\u8981\u7684\u503c\uff0c\u7136\u540e\u4e22\u5f03\u6389\uff0c\u4e0b\u9762\u7684 blank_identifier.go \u5c31\u662f\u5f88\u597d\u7684\u4f8b\u5b50\u3002 ThreeValues \u662f\u62e5\u6709\u4e09\u4e2a\u8fd4\u56de\u503c\u7684\u4e0d\u9700\u8981\u4efb\u4f55\u53c2\u6570\u7684\u51fd\u6570\uff0c\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u7b2c\u4e00\u4e2a\u4e0e\u7b2c\u4e09\u4e2a\u8fd4\u56de\u503c\u8d4b\u7ed9\u4e86 i1 \u4e0e f1 \u3002\u7b2c\u4e8c\u4e2a\u8fd4\u56de\u503c\u8d4b\u7ed9\u4e86\u7a7a\u767d\u7b26 _ \uff0c\u7136\u540e\u81ea\u52a8\u4e22\u5f03\u6389\u3002 \u793a\u4f8b 6.4 blank_identifier.go package main import \"fmt\" func main () { var i1 int var f1 float32 i1 , _ , f1 = ThreeValues () fmt . Printf ( \"The int: %d, the float: %f \\n\" , i1 , f1 ) } func ThreeValues () ( int , int , float32 ) { return 5 , 6 , 7.5 } \u8f93\u51fa\u7ed3\u679c\uff1a The int: 5, the float: 7.500000 \u53e6\u5916\u4e00\u4e2a\u793a\u4f8b\uff0c\u51fd\u6570\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff0c\u6bd4\u8f83\u5b83\u4eec\u7684\u5927\u5c0f\uff0c\u7136\u540e\u6309\u5c0f-\u5927\u7684\u987a\u5e8f\u8fd4\u56de\u8fd9\u4e24\u4e2a\u6570\uff0c\u793a\u4f8b\u4ee3\u7801\u4e3a minmax.go\u3002 \u793a\u4f8b 6.5 minmax.go package main import \"fmt\" func main () { var min , max int min , max = MinMax ( 78 , 65 ) fmt . Printf ( \"Minmium is: %d, Maximum is: %d\\n\" , min , max ) } func MinMax ( a int , b int ) ( min int , max int ) { if a < b { min = a max = b } else { // a = b or a < b min = b max = a } return } \u8f93\u51fa\u7ed3\u679c\uff1a Minimum is: 65, Maximum is 78 6.2.4 \u6539\u53d8\u5916\u90e8\u53d8\u91cf (outside variable) \u00b6 \u4f20\u9012\u6307\u9488\u7ed9\u51fd\u6570\u4e0d\u4f46\u53ef\u4ee5\u8282\u7701\u5185\u5b58\uff08\u56e0\u4e3a\u6ca1\u6709\u590d\u5236\u53d8\u91cf\u7684\u503c\uff09\uff0c\u800c\u4e14\u8d4b\u4e88\u4e86\u51fd\u6570\u76f4\u63a5\u4fee\u6539\u5916\u90e8\u53d8\u91cf\u7684\u80fd\u529b\uff0c\u6240\u4ee5\u88ab\u4fee\u6539\u7684\u53d8\u91cf\u4e0d\u518d\u9700\u8981\u4f7f\u7528 return \u8fd4\u56de\u3002\u5982\u4e0b\u7684\u4f8b\u5b50\uff0c reply \u662f\u4e00\u4e2a\u6307\u5411 int \u53d8\u91cf\u7684\u6307\u9488\uff0c\u901a\u8fc7\u8fd9\u4e2a\u6307\u9488\uff0c\u6211\u4eec\u5728\u51fd\u6570\u5185\u4fee\u6539\u4e86\u8fd9\u4e2a int \u53d8\u91cf\u7684\u6570\u503c\u3002 \u793a\u4f8b 6.6 side_effect.go package main import ( \"fmt\" ) // this function changes reply: func Multiply ( a , b int , reply * int ) { * reply = a * b } func main () { n := 0 reply := & n Multiply ( 10 , 5 , reply ) fmt . Println ( \"Multiply:\" , * reply ) // Multiply: 50 } \u8fd9\u4ec5\u4ec5\u662f\u4e2a\u6307\u5bfc\u6027\u7684\u4f8b\u5b50\uff0c\u5f53\u9700\u8981\u5728\u51fd\u6570\u5185\u6539\u53d8\u4e00\u4e2a\u5360\u7528\u5185\u5b58\u6bd4\u8f83\u5927\u7684\u53d8\u91cf\u65f6\uff0c\u6027\u80fd\u4f18\u52bf\u5c31\u66f4\u52a0\u660e\u663e\u4e86\u3002\u7136\u800c\uff0c\u5982\u679c\u4e0d\u5c0f\u5fc3\u4f7f\u7528\u7684\u8bdd\uff0c\u4f20\u9012\u4e00\u4e2a\u6307\u9488\u5f88\u5bb9\u6613\u5f15\u53d1\u4e00\u4e9b\u4e0d\u786e\u5b9a\u7684\u4e8b\uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u8981\u5341\u5206\u5c0f\u5fc3\u90a3\u4e9b\u53ef\u4ee5\u6539\u53d8\u5916\u90e8\u53d8\u91cf\u7684\u51fd\u6570\uff0c\u5728\u5fc5\u8981\u65f6\uff0c\u9700\u8981\u6dfb\u52a0\u6ce8\u91ca\u4ee5\u4fbf\u5176\u4ed6\u4eba\u80fd\u591f\u66f4\u52a0\u6e05\u695a\u7684\u77e5\u9053\u51fd\u6570\u91cc\u9762\u5230\u5e95\u53d1\u751f\u4e86\u4ec0\u4e48\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u51fd\u6570\u4ecb\u7ecd \u4e0b\u4e00\u8282\uff1a \u4f20\u9012\u53d8\u957f\u53c2\u6570","title":"6.2 \u51fd\u6570\u53c2\u6570\u4e0e\u8fd4\u56de\u503c"},{"location":"06.2/#62","text":"\u51fd\u6570\u80fd\u591f\u63a5\u6536\u53c2\u6570\u4f9b\u81ea\u5df1\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u8fd4\u56de\u96f6\u4e2a\u6216\u591a\u4e2a\u503c\uff08\u6211\u4eec\u901a\u5e38\u628a\u8fd4\u56de\u591a\u4e2a\u503c\u79f0\u4e3a\u8fd4\u56de\u4e00\u7ec4\u503c\uff09\u3002\u76f8\u6bd4\u4e0e C\u3001C++\u3001Java \u548c C#\uff0c\u591a\u503c\u8fd4\u56de\u662f Go \u7684\u4e00\u5927\u7279\u6027\uff0c\u4e3a\u6211\u4eec\u5224\u65ad\u4e00\u4e2a\u51fd\u6570\u662f\u5426\u6b63\u5e38\u6267\u884c\uff08\u53c2\u8003 \u7b2c 5.2 \u8282 \uff09\u63d0\u4f9b\u4e86\u65b9\u4fbf\u3002 \u6211\u4eec\u901a\u8fc7 return \u5173\u952e\u5b57\u8fd4\u56de\u4e00\u7ec4\u503c\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4efb\u4f55\u4e00\u4e2a\u6709\u8fd4\u56de\u503c\uff08\u5355\u4e2a\u6216\u591a\u4e2a\uff09\u7684\u51fd\u6570\u90fd\u5fc5\u987b\u4ee5 return \u6216 panic \uff08\u53c2\u8003 \u7b2c 13 \u7ae0 \uff09\u7ed3\u5c3e\u3002 \u5728\u51fd\u6570\u5757\u91cc\u9762\uff0c return \u4e4b\u540e\u7684\u8bed\u53e5\u90fd\u4e0d\u4f1a\u6267\u884c\u3002\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u9700\u8981\u8fd4\u56de\u503c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u51fd\u6570\u91cc\u9762\u7684\u6bcf\u4e00\u4e2a\u4ee3\u7801\u5206\u652f (code-path) \u90fd\u8981\u6709 return \u8bed\u53e5\u3002 \u95ee\u9898 6.1\uff1a\u4e0b\u9762\u7684\u51fd\u6570\u5c06\u4e0d\u4f1a\u88ab\u7f16\u8bd1\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\u5927\u5bb6\u53ef\u4ee5\u8bd5\u7740\u7ea0\u6b63\u8fc7\u6765\u3002 func ( st * Stack ) Pop () int { v := 0 for ix := len ( st ) - 1 ; ix >= 0 ; ix -- { if v = st [ ix ]; v != 0 { st [ ix ] = 0 return v } } } \u51fd\u6570\u5b9a\u4e49\u65f6\uff0c\u5b83\u7684\u5f62\u53c2\u4e00\u822c\u662f\u6709\u540d\u5b57\u7684\uff0c\u4e0d\u8fc7\u6211\u4eec\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u6ca1\u6709\u5f62\u53c2\u540d\u7684\u51fd\u6570\uff0c\u53ea\u6709\u76f8\u5e94\u7684\u5f62\u53c2\u7c7b\u578b\uff0c\u5c31\u50cf\u8fd9\u6837\uff1a func f(int, int, float64) \u3002 \u6ca1\u6709\u53c2\u6570\u7684\u51fd\u6570\u901a\u5e38\u88ab\u79f0\u4e3a niladic \u51fd\u6570 (niladic function)\uff0c\u5c31\u50cf main.main() \u3002","title":"6.2 \u51fd\u6570\u53c2\u6570\u4e0e\u8fd4\u56de\u503c"},{"location":"06.2/#621-call-by-value-call-by-reference","text":"Go \u9ed8\u8ba4\u4f7f\u7528\u6309\u503c\u4f20\u9012\u6765\u4f20\u9012\u53c2\u6570\uff0c\u4e5f\u5c31\u662f\u4f20\u9012\u53c2\u6570\u7684\u526f\u672c\u3002\u51fd\u6570\u63a5\u6536\u53c2\u6570\u526f\u672c\u4e4b\u540e\uff0c\u5728\u4f7f\u7528\u53d8\u91cf\u7684\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u5bf9\u526f\u672c\u7684\u503c\u8fdb\u884c\u66f4\u6539\uff0c\u4f46\u4e0d\u4f1a\u5f71\u54cd\u5230\u539f\u6765\u7684\u53d8\u91cf\uff0c\u6bd4\u5982 Function(arg1) \u3002 \u5982\u679c\u4f60\u5e0c\u671b\u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u53c2\u6570\u7684\u503c\uff0c\u800c\u4e0d\u662f\u5bf9\u53c2\u6570\u7684\u526f\u672c\u8fdb\u884c\u64cd\u4f5c\uff0c\u4f60\u9700\u8981\u5c06\u53c2\u6570\u7684\u5730\u5740\uff08\u53d8\u91cf\u540d\u524d\u9762\u6dfb\u52a0 & \u7b26\u53f7\uff0c\u6bd4\u5982 &variable \uff09\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u8fd9\u5c31\u662f\u6309\u5f15\u7528\u4f20\u9012\uff0c\u6bd4\u5982 Function(&arg1) \uff0c\u6b64\u65f6\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u662f\u4e00\u4e2a\u6307\u9488\u3002\u5982\u679c\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u9488\u7684\u503c\uff08\u4e00\u4e2a\u5730\u5740\uff09\u4f1a\u88ab\u590d\u5236\uff0c\u4f46\u6307\u9488\u7684\u503c\u6240\u6307\u5411\u7684\u5730\u5740\u4e0a\u7684\u503c\u4e0d\u4f1a\u88ab\u590d\u5236\uff1b\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u6307\u9488\u7684\u503c\u6765\u4fee\u6539\u8fd9\u4e2a\u503c\u6240\u6307\u5411\u7684\u5730\u5740\u4e0a\u7684\u503c\u3002\uff08 \u8bd1\u8005\u6ce8\uff1a\u6307\u9488\u4e5f\u662f\u53d8\u91cf\u7c7b\u578b\uff0c\u6709\u81ea\u5df1\u7684\u5730\u5740\u548c\u503c\uff0c\u901a\u5e38\u6307\u9488\u7684\u503c\u6307\u5411\u4e00\u4e2a\u53d8\u91cf\u7684\u5730\u5740\u3002\u6240\u4ee5\uff0c\u6309\u5f15\u7528\u4f20\u9012\u4e5f\u662f\u6309\u503c\u4f20\u9012\u3002 \uff09 \u51e0\u4e4e\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u4f20\u9012\u6307\u9488\uff08\u4e00\u4e2a32\u4f4d\u6216\u800564\u4f4d\u7684\u503c\uff09\u7684\u6d88\u8017\u90fd\u6bd4\u4f20\u9012\u526f\u672c\u6765\u5f97\u5c11\u3002 \u5728\u51fd\u6570\u8c03\u7528\u65f6\uff0c\u50cf\u5207\u7247 (slice)\u3001\u5b57\u5178 (map)\u3001\u63a5\u53e3 (interface)\u3001\u901a\u9053 (channel) \u8fd9\u6837\u7684\u5f15\u7528\u7c7b\u578b\u90fd\u662f\u9ed8\u8ba4\u4f7f\u7528\u5f15\u7528\u4f20\u9012\uff08\u5373\u4f7f\u6ca1\u6709\u663e\u5f0f\u7684\u6307\u51fa\u6307\u9488\uff09\u3002 \u6709\u4e9b\u51fd\u6570\u53ea\u662f\u5b8c\u6210\u4e00\u4e2a\u4efb\u52a1\uff0c\u5e76\u6ca1\u6709\u8fd4\u56de\u503c\u3002\u6211\u4eec\u4ec5\u4ec5\u662f\u5229\u7528\u4e86\u8fd9\u79cd\u51fd\u6570\u7684\u526f\u4f5c\u7528 (side-effect)\uff0c\u5c31\u50cf\u8f93\u51fa\u6587\u672c\u5230\u7ec8\u7aef\uff0c\u53d1\u9001\u4e00\u4e2a\u90ae\u4ef6\u6216\u8005\u662f\u8bb0\u5f55\u4e00\u4e2a\u9519\u8bef\u7b49\u3002 \u4f46\u662f\u7edd\u5927\u90e8\u5206\u7684\u51fd\u6570\u8fd8\u662f\u5e26\u6709\u8fd4\u56de\u503c\u7684\u3002 \u5982\u4e0b\uff0csimple_function.go \u91cc\u7684 MultiPly3Nums \u51fd\u6570\u5e26\u6709\u4e09\u4e2a\u5f62\u53c2\uff0c\u5206\u522b\u662f a \u3001 b \u3001 c \uff0c\u8fd8\u6709\u4e00\u4e2a int \u7c7b\u578b\u7684\u8fd4\u56de\u503c\uff08\u88ab\u6ce8\u91ca\u7684\u4ee3\u7801\u5177\u6709\u548c\u672a\u6ce8\u91ca\u90e8\u5206\u540c\u6837\u7684\u529f\u80fd\uff0c\u53ea\u662f\u591a\u5f15\u5165\u4e86\u4e00\u4e2a\u672c\u5730\u53d8\u91cf\uff09\uff1a \u793a\u4f8b 6.2 simple_function.go package main import \"fmt\" func main () { fmt . Printf ( \"Multiply 2 * 5 * 6 = %d\\n\" , MultiPly3Nums ( 2 , 5 , 6 )) // var i1 int = MultiPly3Nums(2, 5, 6) // fmt.Printf(\"MultiPly 2 * 5 * 6 = %d\\n\", i1) } func MultiPly3Nums ( a int , b int , c int ) int { // var product int = a * b * c // return product return a * b * c } \u8f93\u51fa\u663e\u793a\uff1a Multiply 2 * 5 * 6 = 60 \u5982\u679c\u4e00\u4e2a\u51fd\u6570\u9700\u8981\u8fd4\u56de\u56db\u5230\u4e94\u4e2a\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u5207\u7247\u7ed9\u51fd\u6570\uff08\u5982\u679c\u8fd4\u56de\u503c\u5177\u6709\u76f8\u540c\u7c7b\u578b\uff09\u6216\u8005\u662f\u4f20\u9012\u4e00\u4e2a\u7ed3\u6784\u4f53\uff08\u5982\u679c\u8fd4\u56de\u503c\u5177\u6709\u4e0d\u540c\u7684\u7c7b\u578b\uff09\u3002\u56e0\u4e3a\u4f20\u9012\u4e00\u4e2a\u6307\u9488\u5141\u8bb8\u76f4\u63a5\u4fee\u6539\u53d8\u91cf\u7684\u503c\uff0c\u6d88\u8017\u4e5f\u66f4\u5c11\u3002 \u95ee\u9898 6.2\uff1a \u5982\u4e0b\u7684\u4e24\u4e2a\u51fd\u6570\u8c03\u7528\u6709\u4ec0\u4e48\u4e0d\u540c\uff1a (A) func DoSomething(a *A) { b = a } (B) func DoSomething(a A) { b = &a }","title":"6.2.1 \u6309\u503c\u4f20\u9012 (call by value) \u6309\u5f15\u7528\u4f20\u9012 (call by reference)"},{"location":"06.2/#622-named-return-variables","text":"\u5982\u4e0b multiple_return.go \u91cc\u7684\u51fd\u6570\u5e26\u6709\u4e00\u4e2a int \u53c2\u6570\uff0c\u8fd4\u56de\u4e24\u4e2a int \u503c\uff1b\u5176\u4e2d\u4e00\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u5728\u51fd\u6570\u8c03\u7528\u65f6\u5c31\u5df2\u7ecf\u88ab\u8d4b\u4e88\u4e86\u4e00\u4e2a\u521d\u59cb\u96f6\u503c\u3002 getX2AndX3 \u4e0e getX2AndX3_2 \u4e24\u4e2a\u51fd\u6570\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u975e\u547d\u540d\u8fd4\u56de\u503c\u4e0e\u547d\u540d\u8fd4\u56de\u503c\u7684\u7279\u6027\u3002\u5f53\u9700\u8981\u8fd4\u56de\u591a\u4e2a\u975e\u547d\u540d\u8fd4\u56de\u503c\u65f6\uff0c\u9700\u8981\u4f7f\u7528 () \u628a\u5b83\u4eec\u62ec\u8d77\u6765\uff0c\u6bd4\u5982 (int, int) \u3002 \u547d\u540d\u8fd4\u56de\u503c\u4f5c\u4e3a\u7ed3\u679c\u5f62\u53c2 (result parameters) \u88ab\u521d\u59cb\u5316\u4e3a\u76f8\u5e94\u7c7b\u578b\u7684\u96f6\u503c\uff0c\u5f53\u9700\u8981\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e00\u6761\u7b80\u5355\u7684\u4e0d\u5e26\u53c2\u6570\u7684 return \u8bed\u53e5\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5373\u4f7f\u53ea\u6709\u4e00\u4e2a\u547d\u540d\u8fd4\u56de\u503c\uff0c\u4e5f\u9700\u8981\u4f7f\u7528 () \u62ec\u8d77\u6765\uff08\u53c2\u8003 \u7b2c 6.6 \u8282 \u7684 fibonacci.go \u51fd\u6570\uff09\u3002 \u793a\u4f8b 6.3 multiple_return.go package main import \"fmt\" var num int = 10 var numx2 , numx3 int func main () { numx2 , numx3 = getX2AndX3 ( num ) PrintValues () numx2 , numx3 = getX2AndX3_2 ( num ) PrintValues () } func PrintValues () { fmt . Printf ( \"num = %d, 2x num = %d, 3x num = %d\\n\" , num , numx2 , numx3 ) } func getX2AndX3 ( input int ) ( int , int ) { return 2 * input , 3 * input } func getX2AndX3_2 ( input int ) ( x2 int , x3 int ) { x2 = 2 * input x3 = 3 * input // return x2, x3 return } \u8f93\u51fa\u7ed3\u679c\uff1a num = 10, 2x num = 20, 3x num = 30 num = 10, 2x num = 20, 3x num = 30 \u63d0\u793a\uff1a \u867d\u7136 return \u6216 return var \u90fd\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f return var = expression \uff08\u8868\u8fbe\u5f0f\uff09 \u4f1a\u5f15\u53d1\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\uff1a syntax error: unexpected =, expecting semicolon or newline or } \u3002 \u5373\u4f7f\u51fd\u6570\u4f7f\u7528\u4e86\u547d\u540d\u8fd4\u56de\u503c\uff0c\u4f60\u4f9d\u65e7\u53ef\u4ee5\u65e0\u89c6\u5b83\u800c\u8fd4\u56de\u660e\u786e\u7684\u503c\u3002 \u4efb\u4f55\u4e00\u4e2a\u975e\u547d\u540d\u8fd4\u56de\u503c\uff08\u4f7f\u7528\u975e\u547d\u540d\u8fd4\u56de\u503c\u662f\u5f88\u7cdf\u7684\u7f16\u7a0b\u4e60\u60ef\uff09\u5728 return \u8bed\u53e5\u91cc\u9762\u90fd\u8981\u660e\u786e\u6307\u51fa\u5305\u542b\u8fd4\u56de\u503c\u7684\u53d8\u91cf\u6216\u662f\u4e00\u4e2a\u53ef\u8ba1\u7b97\u7684\u503c\uff08\u5c31\u50cf\u4e0a\u9762\u8b66\u544a\u6240\u6307\u51fa\u7684\u90a3\u6837\uff09\u3002 \u5c3d\u91cf\u4f7f\u7528\u547d\u540d\u8fd4\u56de\u503c\uff1a\u4f1a\u4f7f\u4ee3\u7801\u66f4\u6e05\u6670\u3001\u66f4\u7b80\u77ed\uff0c\u540c\u65f6\u66f4\u52a0\u5bb9\u6613\u8bfb\u61c2\u3002 \u7ec3\u4e60 6.1 mult_returnval.go \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u63a5\u6536\u4e24\u4e2a\u6574\u6570\uff0c\u7136\u540e\u8fd4\u56de\u5b83\u4eec\u7684\u548c\u3001\u79ef\u4e0e\u5dee\u3002\u7f16\u5199\u4e24\u4e2a\u7248\u672c\uff0c\u4e00\u4e2a\u662f\u975e\u547d\u540d\u8fd4\u56de\u503c\uff0c\u4e00\u4e2a\u662f\u547d\u540d\u8fd4\u56de\u503c\u3002 \u7ec3\u4e60 6.2 error_returnval.go \u7f16\u5199\u4e00\u4e2a\u540d\u5b57\u4e3a MySqrt() \u7684\u51fd\u6570\uff0c\u8ba1\u7b97\u4e00\u4e2a float64 \u7c7b\u578b\u6d6e\u70b9\u6570\u7684\u5e73\u65b9\u6839\uff0c\u5982\u679c\u53c2\u6570\u662f\u4e00\u4e2a\u8d1f\u6570\u7684\u8bdd\u5c06\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u3002\u7f16\u5199\u4e24\u4e2a\u7248\u672c\uff0c\u4e00\u4e2a\u662f\u975e\u547d\u540d\u8fd4\u56de\u503c\uff0c\u4e00\u4e2a\u662f\u547d\u540d\u8fd4\u56de\u503c\u3002","title":"6.2.2 \u547d\u540d\u7684\u8fd4\u56de\u503c (named return variables)"},{"location":"06.2/#623-blank-identifier","text":"\u7a7a\u767d\u7b26\u7528\u6765\u5339\u914d\u4e00\u4e9b\u4e0d\u9700\u8981\u7684\u503c\uff0c\u7136\u540e\u4e22\u5f03\u6389\uff0c\u4e0b\u9762\u7684 blank_identifier.go \u5c31\u662f\u5f88\u597d\u7684\u4f8b\u5b50\u3002 ThreeValues \u662f\u62e5\u6709\u4e09\u4e2a\u8fd4\u56de\u503c\u7684\u4e0d\u9700\u8981\u4efb\u4f55\u53c2\u6570\u7684\u51fd\u6570\uff0c\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u7b2c\u4e00\u4e2a\u4e0e\u7b2c\u4e09\u4e2a\u8fd4\u56de\u503c\u8d4b\u7ed9\u4e86 i1 \u4e0e f1 \u3002\u7b2c\u4e8c\u4e2a\u8fd4\u56de\u503c\u8d4b\u7ed9\u4e86\u7a7a\u767d\u7b26 _ \uff0c\u7136\u540e\u81ea\u52a8\u4e22\u5f03\u6389\u3002 \u793a\u4f8b 6.4 blank_identifier.go package main import \"fmt\" func main () { var i1 int var f1 float32 i1 , _ , f1 = ThreeValues () fmt . Printf ( \"The int: %d, the float: %f \\n\" , i1 , f1 ) } func ThreeValues () ( int , int , float32 ) { return 5 , 6 , 7.5 } \u8f93\u51fa\u7ed3\u679c\uff1a The int: 5, the float: 7.500000 \u53e6\u5916\u4e00\u4e2a\u793a\u4f8b\uff0c\u51fd\u6570\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff0c\u6bd4\u8f83\u5b83\u4eec\u7684\u5927\u5c0f\uff0c\u7136\u540e\u6309\u5c0f-\u5927\u7684\u987a\u5e8f\u8fd4\u56de\u8fd9\u4e24\u4e2a\u6570\uff0c\u793a\u4f8b\u4ee3\u7801\u4e3a minmax.go\u3002 \u793a\u4f8b 6.5 minmax.go package main import \"fmt\" func main () { var min , max int min , max = MinMax ( 78 , 65 ) fmt . Printf ( \"Minmium is: %d, Maximum is: %d\\n\" , min , max ) } func MinMax ( a int , b int ) ( min int , max int ) { if a < b { min = a max = b } else { // a = b or a < b min = b max = a } return } \u8f93\u51fa\u7ed3\u679c\uff1a Minimum is: 65, Maximum is 78","title":"6.2.3 \u7a7a\u767d\u7b26 (blank identifier)"},{"location":"06.2/#624-outside-variable","text":"\u4f20\u9012\u6307\u9488\u7ed9\u51fd\u6570\u4e0d\u4f46\u53ef\u4ee5\u8282\u7701\u5185\u5b58\uff08\u56e0\u4e3a\u6ca1\u6709\u590d\u5236\u53d8\u91cf\u7684\u503c\uff09\uff0c\u800c\u4e14\u8d4b\u4e88\u4e86\u51fd\u6570\u76f4\u63a5\u4fee\u6539\u5916\u90e8\u53d8\u91cf\u7684\u80fd\u529b\uff0c\u6240\u4ee5\u88ab\u4fee\u6539\u7684\u53d8\u91cf\u4e0d\u518d\u9700\u8981\u4f7f\u7528 return \u8fd4\u56de\u3002\u5982\u4e0b\u7684\u4f8b\u5b50\uff0c reply \u662f\u4e00\u4e2a\u6307\u5411 int \u53d8\u91cf\u7684\u6307\u9488\uff0c\u901a\u8fc7\u8fd9\u4e2a\u6307\u9488\uff0c\u6211\u4eec\u5728\u51fd\u6570\u5185\u4fee\u6539\u4e86\u8fd9\u4e2a int \u53d8\u91cf\u7684\u6570\u503c\u3002 \u793a\u4f8b 6.6 side_effect.go package main import ( \"fmt\" ) // this function changes reply: func Multiply ( a , b int , reply * int ) { * reply = a * b } func main () { n := 0 reply := & n Multiply ( 10 , 5 , reply ) fmt . Println ( \"Multiply:\" , * reply ) // Multiply: 50 } \u8fd9\u4ec5\u4ec5\u662f\u4e2a\u6307\u5bfc\u6027\u7684\u4f8b\u5b50\uff0c\u5f53\u9700\u8981\u5728\u51fd\u6570\u5185\u6539\u53d8\u4e00\u4e2a\u5360\u7528\u5185\u5b58\u6bd4\u8f83\u5927\u7684\u53d8\u91cf\u65f6\uff0c\u6027\u80fd\u4f18\u52bf\u5c31\u66f4\u52a0\u660e\u663e\u4e86\u3002\u7136\u800c\uff0c\u5982\u679c\u4e0d\u5c0f\u5fc3\u4f7f\u7528\u7684\u8bdd\uff0c\u4f20\u9012\u4e00\u4e2a\u6307\u9488\u5f88\u5bb9\u6613\u5f15\u53d1\u4e00\u4e9b\u4e0d\u786e\u5b9a\u7684\u4e8b\uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u8981\u5341\u5206\u5c0f\u5fc3\u90a3\u4e9b\u53ef\u4ee5\u6539\u53d8\u5916\u90e8\u53d8\u91cf\u7684\u51fd\u6570\uff0c\u5728\u5fc5\u8981\u65f6\uff0c\u9700\u8981\u6dfb\u52a0\u6ce8\u91ca\u4ee5\u4fbf\u5176\u4ed6\u4eba\u80fd\u591f\u66f4\u52a0\u6e05\u695a\u7684\u77e5\u9053\u51fd\u6570\u91cc\u9762\u5230\u5e95\u53d1\u751f\u4e86\u4ec0\u4e48\u3002","title":"6.2.4 \u6539\u53d8\u5916\u90e8\u53d8\u91cf (outside variable)"},{"location":"06.2/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u51fd\u6570\u4ecb\u7ecd \u4e0b\u4e00\u8282\uff1a \u4f20\u9012\u53d8\u957f\u53c2\u6570","title":"\u94fe\u63a5"},{"location":"06.3/","text":"6.3 \u4f20\u9012\u53d8\u957f\u53c2\u6570 \u00b6 \u5982\u679c\u51fd\u6570\u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u662f\u91c7\u7528 ...type \u7684\u5f62\u5f0f\uff0c\u90a3\u4e48\u8fd9\u4e2a\u51fd\u6570\u5c31\u53ef\u4ee5\u5904\u7406\u4e00\u4e2a\u53d8\u957f\u7684\u53c2\u6570\uff0c\u8fd9\u4e2a\u957f\u5ea6\u53ef\u4ee5\u4e3a 0\uff0c\u8fd9\u6837\u7684\u51fd\u6570\u79f0\u4e3a\u53d8\u53c2\u51fd\u6570\u3002 func myFunc ( a , b , arg ... int ) {} \u8fd9\u4e2a\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u5207\u7247 (slice) \u7684\u53c2\u6570\uff08\u8be6\u89c1 \u7b2c 7 \u7ae0 \uff09\uff0c\u8be5\u53c2\u6570\u53ef\u4ee5\u901a\u8fc7 \u7b2c 5.4.4 \u8282 \u4e2d\u63d0\u5230\u7684 for \u5faa\u73af\u7ed3\u6784\u8fed\u4ee3\u3002 \u793a\u4f8b\u51fd\u6570\u548c\u8c03\u7528\uff1a func Greeting ( prefix string , who ... string ) Greeting ( \"hello:\" , \"Joe\" , \"Anna\" , \"Eileen\" ) \u5728 Greeting() \u51fd\u6570\u4e2d\uff0c\u53d8\u91cf who \u7684\u503c\u4e3a []string{\"Joe\", \"Anna\", \"Eileen\"} \u3002 \u5982\u679c\u53c2\u6570\u88ab\u5b58\u50a8\u5728\u4e00\u4e2a slice \u7c7b\u578b\u7684\u53d8\u91cf slice \u4e2d\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7 slice... \u7684\u5f62\u5f0f\u6765\u4f20\u9012\u53c2\u6570\uff0c\u8c03\u7528\u53d8\u53c2\u51fd\u6570\u3002 \u793a\u4f8b 6.7 varnumpar.go package main import \"fmt\" func main () { x := min ( 1 , 3 , 2 , 0 ) fmt . Printf ( \"The minimum is: %d\\n\" , x ) slice := [] int { 7 , 9 , 3 , 5 , 1 } x = min ( slice ... ) fmt . Printf ( \"The minimum in the slice is: %d\" , x ) } func min ( s ... int ) int { if len ( s ) == 0 { return 0 } min := s [ 0 ] for _ , v := range s { if v < min { min = v } } return min } \u8f93\u51fa\uff1a The minimum is: 0 The minimum in the slice is: 1 \u7ec3\u4e60 6.3 varargs.go \u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u53d8\u957f\u53c2\u6570\u5e76\u5bf9\u6bcf\u4e2a\u5143\u7d20\u8fdb\u884c\u6362\u884c\u6253\u5370\u3002 \u4e00\u4e2a\u63a5\u53d7\u53d8\u957f\u53c2\u6570\u7684\u51fd\u6570\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u53c2\u6570\u4f5c\u4e3a\u5176\u5b83\u51fd\u6570\u7684\u53c2\u6570\u8fdb\u884c\u4f20\u9012\uff1a func F1 ( s ... string ) { F2 ( s ... ) F3 ( s ) } func F2 ( s ... string ) { } func F3 ( s [] string ) { } \u53d8\u957f\u53c2\u6570\u53ef\u4ee5\u4f5c\u4e3a\u5bf9\u5e94\u7c7b\u578b\u7684 slice \u8fdb\u884c\u4e8c\u6b21\u4f20\u9012\u3002 \u4f46\u662f\u5982\u679c\u53d8\u957f\u53c2\u6570\u7684\u7c7b\u578b\u5e76\u4e0d\u662f\u90fd\u76f8\u540c\u7684\u5462\uff1f\u4f7f\u7528 5 \u4e2a\u53c2\u6570\u6765\u8fdb\u884c\u4f20\u9012\u5e76\u4e0d\u662f\u5f88\u660e\u667a\u7684\u9009\u62e9\uff0c\u6709 2 \u79cd\u65b9\u6848\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1a \u4f7f\u7528\u7ed3\u6784\uff08\u8be6\u89c1 \u7b2c 10 \u7ae0 \uff09\uff1a \u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u7c7b\u578b\uff0c\u5047\u8bbe\u5b83\u53eb Options \uff0c\u7528\u4ee5\u5b58\u50a8\u6240\u6709\u53ef\u80fd\u7684\u53c2\u6570\uff1a type Options struct { par1 type1 , par2 type2 , ... } \u51fd\u6570 F1() \u53ef\u4ee5\u4f7f\u7528\u6b63\u5e38\u7684\u53c2\u6570 a \u548c b \uff0c\u4ee5\u53ca\u4e00\u4e2a\u6ca1\u6709\u4efb\u4f55\u521d\u59cb\u5316\u7684 Options \u7ed3\u6784\uff1a F1(a, b, Options {}) \u3002\u5982\u679c\u9700\u8981\u5bf9\u9009\u9879\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 F1(a, b, Options {par1:val1, par2:val2}) \u3002 \u4f7f\u7528\u7a7a\u63a5\u53e3\uff1a \u5982\u679c\u4e00\u4e2a\u53d8\u957f\u53c2\u6570\u7684\u7c7b\u578b\u6ca1\u6709\u88ab\u6307\u5b9a\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u9ed8\u8ba4\u7684\u7a7a\u63a5\u53e3 interface{} \uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u63a5\u53d7\u4efb\u4f55\u7c7b\u578b\u7684\u53c2\u6570\uff08\u8be6\u89c1 \u7b2c 11.9 \u8282 \uff09\u3002\u8be5\u65b9\u6848\u4e0d\u4ec5\u53ef\u4ee5\u7528\u4e8e\u957f\u5ea6\u672a\u77e5\u7684\u53c2\u6570\uff0c\u8fd8\u53ef\u4ee5\u7528\u4e8e\u4efb\u4f55\u4e0d\u786e\u5b9a\u7c7b\u578b\u7684\u53c2\u6570\u3002\u4e00\u822c\u800c\u8a00\u6211\u4eec\u4f1a\u4f7f\u7528\u4e00\u4e2a for-range \u5faa\u73af\u4ee5\u53ca switch \u7ed3\u6784\u5bf9\u6bcf\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u8fdb\u884c\u5224\u65ad\uff1a func typecheck (..,.., values \u2026 interface {}) { for _ , value := range values { switch v := value .( type ) { case int : \u2026 case float : \u2026 case string : \u2026 case bool : \u2026 default : \u2026 } } } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u51fd\u6570\u53c2\u6570\u4e0e\u8fd4\u56de\u503c \u4e0b\u4e00\u8282\uff1a defer \u548c\u8ffd\u8e2a","title":"6.3 \u4f20\u9012\u53d8\u957f\u53c2\u6570"},{"location":"06.3/#63","text":"\u5982\u679c\u51fd\u6570\u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u662f\u91c7\u7528 ...type \u7684\u5f62\u5f0f\uff0c\u90a3\u4e48\u8fd9\u4e2a\u51fd\u6570\u5c31\u53ef\u4ee5\u5904\u7406\u4e00\u4e2a\u53d8\u957f\u7684\u53c2\u6570\uff0c\u8fd9\u4e2a\u957f\u5ea6\u53ef\u4ee5\u4e3a 0\uff0c\u8fd9\u6837\u7684\u51fd\u6570\u79f0\u4e3a\u53d8\u53c2\u51fd\u6570\u3002 func myFunc ( a , b , arg ... int ) {} \u8fd9\u4e2a\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u5207\u7247 (slice) \u7684\u53c2\u6570\uff08\u8be6\u89c1 \u7b2c 7 \u7ae0 \uff09\uff0c\u8be5\u53c2\u6570\u53ef\u4ee5\u901a\u8fc7 \u7b2c 5.4.4 \u8282 \u4e2d\u63d0\u5230\u7684 for \u5faa\u73af\u7ed3\u6784\u8fed\u4ee3\u3002 \u793a\u4f8b\u51fd\u6570\u548c\u8c03\u7528\uff1a func Greeting ( prefix string , who ... string ) Greeting ( \"hello:\" , \"Joe\" , \"Anna\" , \"Eileen\" ) \u5728 Greeting() \u51fd\u6570\u4e2d\uff0c\u53d8\u91cf who \u7684\u503c\u4e3a []string{\"Joe\", \"Anna\", \"Eileen\"} \u3002 \u5982\u679c\u53c2\u6570\u88ab\u5b58\u50a8\u5728\u4e00\u4e2a slice \u7c7b\u578b\u7684\u53d8\u91cf slice \u4e2d\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7 slice... \u7684\u5f62\u5f0f\u6765\u4f20\u9012\u53c2\u6570\uff0c\u8c03\u7528\u53d8\u53c2\u51fd\u6570\u3002 \u793a\u4f8b 6.7 varnumpar.go package main import \"fmt\" func main () { x := min ( 1 , 3 , 2 , 0 ) fmt . Printf ( \"The minimum is: %d\\n\" , x ) slice := [] int { 7 , 9 , 3 , 5 , 1 } x = min ( slice ... ) fmt . Printf ( \"The minimum in the slice is: %d\" , x ) } func min ( s ... int ) int { if len ( s ) == 0 { return 0 } min := s [ 0 ] for _ , v := range s { if v < min { min = v } } return min } \u8f93\u51fa\uff1a The minimum is: 0 The minimum in the slice is: 1 \u7ec3\u4e60 6.3 varargs.go \u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u53d8\u957f\u53c2\u6570\u5e76\u5bf9\u6bcf\u4e2a\u5143\u7d20\u8fdb\u884c\u6362\u884c\u6253\u5370\u3002 \u4e00\u4e2a\u63a5\u53d7\u53d8\u957f\u53c2\u6570\u7684\u51fd\u6570\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u53c2\u6570\u4f5c\u4e3a\u5176\u5b83\u51fd\u6570\u7684\u53c2\u6570\u8fdb\u884c\u4f20\u9012\uff1a func F1 ( s ... string ) { F2 ( s ... ) F3 ( s ) } func F2 ( s ... string ) { } func F3 ( s [] string ) { } \u53d8\u957f\u53c2\u6570\u53ef\u4ee5\u4f5c\u4e3a\u5bf9\u5e94\u7c7b\u578b\u7684 slice \u8fdb\u884c\u4e8c\u6b21\u4f20\u9012\u3002 \u4f46\u662f\u5982\u679c\u53d8\u957f\u53c2\u6570\u7684\u7c7b\u578b\u5e76\u4e0d\u662f\u90fd\u76f8\u540c\u7684\u5462\uff1f\u4f7f\u7528 5 \u4e2a\u53c2\u6570\u6765\u8fdb\u884c\u4f20\u9012\u5e76\u4e0d\u662f\u5f88\u660e\u667a\u7684\u9009\u62e9\uff0c\u6709 2 \u79cd\u65b9\u6848\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1a \u4f7f\u7528\u7ed3\u6784\uff08\u8be6\u89c1 \u7b2c 10 \u7ae0 \uff09\uff1a \u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u7c7b\u578b\uff0c\u5047\u8bbe\u5b83\u53eb Options \uff0c\u7528\u4ee5\u5b58\u50a8\u6240\u6709\u53ef\u80fd\u7684\u53c2\u6570\uff1a type Options struct { par1 type1 , par2 type2 , ... } \u51fd\u6570 F1() \u53ef\u4ee5\u4f7f\u7528\u6b63\u5e38\u7684\u53c2\u6570 a \u548c b \uff0c\u4ee5\u53ca\u4e00\u4e2a\u6ca1\u6709\u4efb\u4f55\u521d\u59cb\u5316\u7684 Options \u7ed3\u6784\uff1a F1(a, b, Options {}) \u3002\u5982\u679c\u9700\u8981\u5bf9\u9009\u9879\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 F1(a, b, Options {par1:val1, par2:val2}) \u3002 \u4f7f\u7528\u7a7a\u63a5\u53e3\uff1a \u5982\u679c\u4e00\u4e2a\u53d8\u957f\u53c2\u6570\u7684\u7c7b\u578b\u6ca1\u6709\u88ab\u6307\u5b9a\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u9ed8\u8ba4\u7684\u7a7a\u63a5\u53e3 interface{} \uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u63a5\u53d7\u4efb\u4f55\u7c7b\u578b\u7684\u53c2\u6570\uff08\u8be6\u89c1 \u7b2c 11.9 \u8282 \uff09\u3002\u8be5\u65b9\u6848\u4e0d\u4ec5\u53ef\u4ee5\u7528\u4e8e\u957f\u5ea6\u672a\u77e5\u7684\u53c2\u6570\uff0c\u8fd8\u53ef\u4ee5\u7528\u4e8e\u4efb\u4f55\u4e0d\u786e\u5b9a\u7c7b\u578b\u7684\u53c2\u6570\u3002\u4e00\u822c\u800c\u8a00\u6211\u4eec\u4f1a\u4f7f\u7528\u4e00\u4e2a for-range \u5faa\u73af\u4ee5\u53ca switch \u7ed3\u6784\u5bf9\u6bcf\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u8fdb\u884c\u5224\u65ad\uff1a func typecheck (..,.., values \u2026 interface {}) { for _ , value := range values { switch v := value .( type ) { case int : \u2026 case float : \u2026 case string : \u2026 case bool : \u2026 default : \u2026 } } }","title":"6.3 \u4f20\u9012\u53d8\u957f\u53c2\u6570"},{"location":"06.3/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u51fd\u6570\u53c2\u6570\u4e0e\u8fd4\u56de\u503c \u4e0b\u4e00\u8282\uff1a defer \u548c\u8ffd\u8e2a","title":"\u94fe\u63a5"},{"location":"06.4/","text":"6.4 defer \u548c\u8ffd\u8e2a \u00b6 \u5173\u952e\u5b57 defer \u5141\u8bb8\u6211\u4eec\u63a8\u8fdf\u5230\u51fd\u6570\u8fd4\u56de\u4e4b\u524d\uff08\u6216\u4efb\u610f\u4f4d\u7f6e\u6267\u884c return \u8bed\u53e5\u4e4b\u540e\uff09\u4e00\u523b\u624d\u6267\u884c\u67d0\u4e2a\u8bed\u53e5\u6216\u51fd\u6570\uff08\u4e3a\u4ec0\u4e48\u8981\u5728\u8fd4\u56de\u4e4b\u540e\u624d\u6267\u884c\u8fd9\u4e9b\u8bed\u53e5\uff1f\u56e0\u4e3a return \u8bed\u53e5\u540c\u6837\u53ef\u4ee5\u5305\u542b\u4e00\u4e9b\u64cd\u4f5c\uff0c\u800c\u4e0d\u662f\u5355\u7eaf\u5730\u8fd4\u56de\u67d0\u4e2a\u503c\uff09\u3002 \u5173\u952e\u5b57 defer \u7684\u7528\u6cd5\u7c7b\u4f3c\u4e8e\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8bed\u8a00 Java \u548c C# \u7684 finally \u8bed\u53e5\u5757\uff0c\u5b83\u4e00\u822c\u7528\u4e8e\u91ca\u653e\u67d0\u4e9b\u5df2\u5206\u914d\u7684\u8d44\u6e90\u3002 \u793a\u4f8b 6.8 defer.go \uff1a package main import \"fmt\" func main () { function1 () } func function1 () { fmt . Printf ( \"In function1 at the top\\n\" ) defer function2 () fmt . Printf ( \"In function1 at the bottom!\\n\" ) } func function2 () { fmt . Printf ( \"Function2: Deferred until the end of the calling function!\" ) } \u8f93\u51fa\uff1a In Function1 at the top In Function1 at the bottom! Function2: Deferred until the end of the calling function! \u8bf7\u5c06 defer \u5173\u952e\u5b57\u53bb\u6389\u5e76\u5bf9\u6bd4\u8f93\u51fa\u7ed3\u679c\u3002 \u4f7f\u7528 defer \u7684\u8bed\u53e5\u540c\u6837\u53ef\u4ee5\u63a5\u53d7\u53c2\u6570\uff0c\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u5c31\u4f1a\u5728\u6267\u884c defer \u8bed\u53e5\u65f6\u6253\u5370 0 \uff1a func a () { i := 0 defer fmt . Println ( i ) i ++ return } \u5f53\u6709\u591a\u4e2a defer \u884c\u4e3a\u88ab\u6ce8\u518c\u65f6\uff0c\u5b83\u4eec\u4f1a\u4ee5\u9006\u5e8f\u6267\u884c\uff08\u7c7b\u4f3c\u6808\uff0c\u5373\u540e\u8fdb\u5148\u51fa\uff09\uff1a func f () { for i := 0 ; i < 5 ; i ++ { defer fmt . Printf ( \"%d \" , i ) } } \u4e0a\u9762\u7684\u4ee3\u7801\u5c06\u4f1a\u8f93\u51fa\uff1a 4 3 2 1 0 \u3002 \u5173\u952e\u5b57 defer \u5141\u8bb8\u6211\u4eec\u8fdb\u884c\u4e00\u4e9b\u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\u7684\u6536\u5c3e\u5de5\u4f5c\uff0c\u4f8b\u5982\uff1a \u5173\u95ed\u6587\u4ef6\u6d41 \uff08\u8be6\u89c1 \u7b2c 12.2 \u8282 \uff09 // open a file defer file . Close () \u89e3\u9501\u4e00\u4e2a\u52a0\u9501\u7684\u8d44\u6e90 \uff08\u8be6\u89c1 \u7b2c 9.3 \u8282 \uff09 mu . Lock () defer mu . Unlock () \u6253\u5370\u6700\u7ec8\u62a5\u544a printHeader () defer printFooter () \u5173\u95ed\u6570\u636e\u5e93\u94fe\u63a5 // open a database connection defer disconnectFromDB () \u5408\u7406\u4f7f\u7528 defer \u8bed\u53e5\u80fd\u591f\u4f7f\u5f97\u4ee3\u7801\u66f4\u52a0\u7b80\u6d01\u3002 \u4ee5\u4e0b\u4ee3\u7801\u6a21\u62df\u4e86\u4e0a\u9762\u63cf\u8ff0\u7684\u7b2c 4 \u79cd\u60c5\u51b5\uff1a package main import \"fmt\" func main () { doDBOperations () } func connectToDB () { fmt . Println ( \"ok, connected to db\" ) } func disconnectFromDB () { fmt . Println ( \"ok, disconnected from db\" ) } func doDBOperations () { connectToDB () fmt . Println ( \"Defering the database disconnect.\" ) defer disconnectFromDB () //function called here with defer fmt . Println ( \"Doing some DB operations ...\" ) fmt . Println ( \"Oops! some crash or network error ...\" ) fmt . Println ( \"Returning from function here!\" ) return //terminate the program // deferred function executed here just before actually returning, even if // there is a return or abnormal termination before } \u8f93\u51fa\uff1a ok, connected to db Defering the database disconnect. Doing some DB operations ... Oops! some crash or network error ... Returning from function here! ok, disconnected from db \u4f7f\u7528 defer \u8bed\u53e5\u5b9e\u73b0\u4ee3\u7801\u8ffd\u8e2a \u4e00\u4e2a\u57fa\u7840\u4f46\u5341\u5206\u5b9e\u7528\u7684\u5b9e\u73b0\u4ee3\u7801\u6267\u884c\u8ffd\u8e2a\u7684\u65b9\u6848\u5c31\u662f\u5728\u8fdb\u5165\u548c\u79bb\u5f00\u67d0\u4e2a\u51fd\u6570\u6253\u5370\u76f8\u5173\u7684\u6d88\u606f\uff0c\u5373\u53ef\u4ee5\u63d0\u70bc\u4e3a\u4e0b\u9762\u4e24\u4e2a\u51fd\u6570\uff1a func trace ( s string ) { fmt . Println ( \"entering:\" , s ) } func untrace ( s string ) { fmt . Println ( \"leaving:\" , s ) } \u4ee5\u4e0b\u4ee3\u7801\u5c55\u793a\u4e86\u4f55\u65f6\u8c03\u7528\u8fd9\u4e24\u4e2a\u51fd\u6570\uff1a \u793a\u4f8b 6.10 defer_tracing.go : package main import \"fmt\" func trace ( s string ) { fmt . Println ( \"entering:\" , s ) } func untrace ( s string ) { fmt . Println ( \"leaving:\" , s ) } func a () { trace ( \"a\" ) defer untrace ( \"a\" ) fmt . Println ( \"in a\" ) } func b () { trace ( \"b\" ) defer untrace ( \"b\" ) fmt . Println ( \"in b\" ) a () } func main () { b () } \u8f93\u51fa\uff1a entering: b in b entering: a in a leaving: a leaving: b \u4e0a\u9762\u7684\u4ee3\u7801\u8fd8\u53ef\u4ee5\u4fee\u6539\u4e3a\u66f4\u52a0\u7b80\u4fbf\u7684\u7248\u672c\uff08\u793a\u4f8b 6.11 defer_tracing2.go \uff09\uff1a package main import \"fmt\" func trace ( s string ) string { fmt . Println ( \"entering:\" , s ) return s } func un ( s string ) { fmt . Println ( \"leaving:\" , s ) } func a () { defer un ( trace ( \"a\" )) fmt . Println ( \"in a\" ) } func b () { defer un ( trace ( \"b\" )) fmt . Println ( \"in b\" ) a () } func main () { b () } \u4f7f\u7528 defer \u8bed\u53e5\u6765\u8bb0\u5f55\u51fd\u6570\u7684\u53c2\u6570\u4e0e\u8fd4\u56de\u503c \u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u53e6\u4e00\u79cd\u5728\u8c03\u8bd5\u65f6\u4f7f\u7528 defer \u8bed\u53e5\u7684\u624b\u6cd5\uff08\u793a\u4f8b 6.12 defer_logvalues.go \uff09\uff1a package main import ( \"io\" \"log\" ) func func1 ( s string ) ( n int , err error ) { defer func () { log . Printf ( \"func1(%q) = %d, %v\" , s , n , err ) }() return 7 , io . EOF } func main () { func1 ( \"Go\" ) } \u8f93\u51fa\uff1a Output: 2011/10/04 10:46:11 func1(\"Go\") = 7, EOF \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f20\u9012\u53d8\u957f\u53c2\u6570 \u4e0b\u4e00\u8282\uff1a \u5185\u7f6e\u51fd\u6570","title":"6.4 defer \u548c\u8ffd\u8e2a"},{"location":"06.4/#64-defer","text":"\u5173\u952e\u5b57 defer \u5141\u8bb8\u6211\u4eec\u63a8\u8fdf\u5230\u51fd\u6570\u8fd4\u56de\u4e4b\u524d\uff08\u6216\u4efb\u610f\u4f4d\u7f6e\u6267\u884c return \u8bed\u53e5\u4e4b\u540e\uff09\u4e00\u523b\u624d\u6267\u884c\u67d0\u4e2a\u8bed\u53e5\u6216\u51fd\u6570\uff08\u4e3a\u4ec0\u4e48\u8981\u5728\u8fd4\u56de\u4e4b\u540e\u624d\u6267\u884c\u8fd9\u4e9b\u8bed\u53e5\uff1f\u56e0\u4e3a return \u8bed\u53e5\u540c\u6837\u53ef\u4ee5\u5305\u542b\u4e00\u4e9b\u64cd\u4f5c\uff0c\u800c\u4e0d\u662f\u5355\u7eaf\u5730\u8fd4\u56de\u67d0\u4e2a\u503c\uff09\u3002 \u5173\u952e\u5b57 defer \u7684\u7528\u6cd5\u7c7b\u4f3c\u4e8e\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8bed\u8a00 Java \u548c C# \u7684 finally \u8bed\u53e5\u5757\uff0c\u5b83\u4e00\u822c\u7528\u4e8e\u91ca\u653e\u67d0\u4e9b\u5df2\u5206\u914d\u7684\u8d44\u6e90\u3002 \u793a\u4f8b 6.8 defer.go \uff1a package main import \"fmt\" func main () { function1 () } func function1 () { fmt . Printf ( \"In function1 at the top\\n\" ) defer function2 () fmt . Printf ( \"In function1 at the bottom!\\n\" ) } func function2 () { fmt . Printf ( \"Function2: Deferred until the end of the calling function!\" ) } \u8f93\u51fa\uff1a In Function1 at the top In Function1 at the bottom! Function2: Deferred until the end of the calling function! \u8bf7\u5c06 defer \u5173\u952e\u5b57\u53bb\u6389\u5e76\u5bf9\u6bd4\u8f93\u51fa\u7ed3\u679c\u3002 \u4f7f\u7528 defer \u7684\u8bed\u53e5\u540c\u6837\u53ef\u4ee5\u63a5\u53d7\u53c2\u6570\uff0c\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u5c31\u4f1a\u5728\u6267\u884c defer \u8bed\u53e5\u65f6\u6253\u5370 0 \uff1a func a () { i := 0 defer fmt . Println ( i ) i ++ return } \u5f53\u6709\u591a\u4e2a defer \u884c\u4e3a\u88ab\u6ce8\u518c\u65f6\uff0c\u5b83\u4eec\u4f1a\u4ee5\u9006\u5e8f\u6267\u884c\uff08\u7c7b\u4f3c\u6808\uff0c\u5373\u540e\u8fdb\u5148\u51fa\uff09\uff1a func f () { for i := 0 ; i < 5 ; i ++ { defer fmt . Printf ( \"%d \" , i ) } } \u4e0a\u9762\u7684\u4ee3\u7801\u5c06\u4f1a\u8f93\u51fa\uff1a 4 3 2 1 0 \u3002 \u5173\u952e\u5b57 defer \u5141\u8bb8\u6211\u4eec\u8fdb\u884c\u4e00\u4e9b\u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\u7684\u6536\u5c3e\u5de5\u4f5c\uff0c\u4f8b\u5982\uff1a \u5173\u95ed\u6587\u4ef6\u6d41 \uff08\u8be6\u89c1 \u7b2c 12.2 \u8282 \uff09 // open a file defer file . Close () \u89e3\u9501\u4e00\u4e2a\u52a0\u9501\u7684\u8d44\u6e90 \uff08\u8be6\u89c1 \u7b2c 9.3 \u8282 \uff09 mu . Lock () defer mu . Unlock () \u6253\u5370\u6700\u7ec8\u62a5\u544a printHeader () defer printFooter () \u5173\u95ed\u6570\u636e\u5e93\u94fe\u63a5 // open a database connection defer disconnectFromDB () \u5408\u7406\u4f7f\u7528 defer \u8bed\u53e5\u80fd\u591f\u4f7f\u5f97\u4ee3\u7801\u66f4\u52a0\u7b80\u6d01\u3002 \u4ee5\u4e0b\u4ee3\u7801\u6a21\u62df\u4e86\u4e0a\u9762\u63cf\u8ff0\u7684\u7b2c 4 \u79cd\u60c5\u51b5\uff1a package main import \"fmt\" func main () { doDBOperations () } func connectToDB () { fmt . Println ( \"ok, connected to db\" ) } func disconnectFromDB () { fmt . Println ( \"ok, disconnected from db\" ) } func doDBOperations () { connectToDB () fmt . Println ( \"Defering the database disconnect.\" ) defer disconnectFromDB () //function called here with defer fmt . Println ( \"Doing some DB operations ...\" ) fmt . Println ( \"Oops! some crash or network error ...\" ) fmt . Println ( \"Returning from function here!\" ) return //terminate the program // deferred function executed here just before actually returning, even if // there is a return or abnormal termination before } \u8f93\u51fa\uff1a ok, connected to db Defering the database disconnect. Doing some DB operations ... Oops! some crash or network error ... Returning from function here! ok, disconnected from db \u4f7f\u7528 defer \u8bed\u53e5\u5b9e\u73b0\u4ee3\u7801\u8ffd\u8e2a \u4e00\u4e2a\u57fa\u7840\u4f46\u5341\u5206\u5b9e\u7528\u7684\u5b9e\u73b0\u4ee3\u7801\u6267\u884c\u8ffd\u8e2a\u7684\u65b9\u6848\u5c31\u662f\u5728\u8fdb\u5165\u548c\u79bb\u5f00\u67d0\u4e2a\u51fd\u6570\u6253\u5370\u76f8\u5173\u7684\u6d88\u606f\uff0c\u5373\u53ef\u4ee5\u63d0\u70bc\u4e3a\u4e0b\u9762\u4e24\u4e2a\u51fd\u6570\uff1a func trace ( s string ) { fmt . Println ( \"entering:\" , s ) } func untrace ( s string ) { fmt . Println ( \"leaving:\" , s ) } \u4ee5\u4e0b\u4ee3\u7801\u5c55\u793a\u4e86\u4f55\u65f6\u8c03\u7528\u8fd9\u4e24\u4e2a\u51fd\u6570\uff1a \u793a\u4f8b 6.10 defer_tracing.go : package main import \"fmt\" func trace ( s string ) { fmt . Println ( \"entering:\" , s ) } func untrace ( s string ) { fmt . Println ( \"leaving:\" , s ) } func a () { trace ( \"a\" ) defer untrace ( \"a\" ) fmt . Println ( \"in a\" ) } func b () { trace ( \"b\" ) defer untrace ( \"b\" ) fmt . Println ( \"in b\" ) a () } func main () { b () } \u8f93\u51fa\uff1a entering: b in b entering: a in a leaving: a leaving: b \u4e0a\u9762\u7684\u4ee3\u7801\u8fd8\u53ef\u4ee5\u4fee\u6539\u4e3a\u66f4\u52a0\u7b80\u4fbf\u7684\u7248\u672c\uff08\u793a\u4f8b 6.11 defer_tracing2.go \uff09\uff1a package main import \"fmt\" func trace ( s string ) string { fmt . Println ( \"entering:\" , s ) return s } func un ( s string ) { fmt . Println ( \"leaving:\" , s ) } func a () { defer un ( trace ( \"a\" )) fmt . Println ( \"in a\" ) } func b () { defer un ( trace ( \"b\" )) fmt . Println ( \"in b\" ) a () } func main () { b () } \u4f7f\u7528 defer \u8bed\u53e5\u6765\u8bb0\u5f55\u51fd\u6570\u7684\u53c2\u6570\u4e0e\u8fd4\u56de\u503c \u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u53e6\u4e00\u79cd\u5728\u8c03\u8bd5\u65f6\u4f7f\u7528 defer \u8bed\u53e5\u7684\u624b\u6cd5\uff08\u793a\u4f8b 6.12 defer_logvalues.go \uff09\uff1a package main import ( \"io\" \"log\" ) func func1 ( s string ) ( n int , err error ) { defer func () { log . Printf ( \"func1(%q) = %d, %v\" , s , n , err ) }() return 7 , io . EOF } func main () { func1 ( \"Go\" ) } \u8f93\u51fa\uff1a Output: 2011/10/04 10:46:11 func1(\"Go\") = 7, EOF","title":"6.4 defer \u548c\u8ffd\u8e2a"},{"location":"06.4/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f20\u9012\u53d8\u957f\u53c2\u6570 \u4e0b\u4e00\u8282\uff1a \u5185\u7f6e\u51fd\u6570","title":"\u94fe\u63a5"},{"location":"06.5/","text":"6.5 \u5185\u7f6e\u51fd\u6570 \u00b6 Go \u8bed\u8a00\u62e5\u6709\u4e00\u4e9b\u4e0d\u9700\u8981\u8fdb\u884c\u5bfc\u5165\u64cd\u4f5c\u5c31\u53ef\u4ee5\u4f7f\u7528\u7684\u5185\u7f6e\u51fd\u6570\u3002\u5b83\u4eec\u6709\u65f6\u53ef\u4ee5\u9488\u5bf9\u4e0d\u540c\u7684\u7c7b\u578b\u8fdb\u884c\u64cd\u4f5c\uff0c\u4f8b\u5982\uff1a len() \u3001 cap() \u548c append() \uff0c\u6216\u5fc5\u987b\u7528\u4e8e\u7cfb\u7edf\u7ea7\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\uff1a panic() \u3002\u56e0\u6b64\uff0c\u5b83\u4eec\u9700\u8981\u76f4\u63a5\u83b7\u5f97\u7f16\u8bd1\u5668\u7684\u652f\u6301\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5217\u8868\uff0c\u6211\u4eec\u4f1a\u5728\u540e\u9762\u7684\u7ae0\u8282\u4e2d\u5bf9\u5b83\u4eec\u8fdb\u884c\u9010\u4e2a\u6df1\u5165\u7684\u8bb2\u89e3\u3002 \u540d\u79f0 \u8bf4\u660e close() \u7528\u4e8e\u7ba1\u9053\u901a\u4fe1 len() \u3001 cap() len() \u7528\u4e8e\u8fd4\u56de\u67d0\u4e2a\u7c7b\u578b\u7684\u957f\u5ea6\u6216\u6570\u91cf\uff08\u5b57\u7b26\u4e32\u3001\u6570\u7ec4\u3001\u5207\u7247\u3001 map \u548c\u7ba1\u9053\uff09\uff1b cap() \u662f\u5bb9\u91cf\u7684\u610f\u601d\uff0c\u7528\u4e8e\u8fd4\u56de\u67d0\u4e2a\u7c7b\u578b\u7684\u6700\u5927\u5bb9\u91cf\uff08\u53ea\u80fd\u7528\u4e8e\u6570\u7ec4\u3001\u5207\u7247\u548c\u7ba1\u9053\uff0c\u4e0d\u80fd\u7528\u4e8e map \uff09 new() \u3001 make() new() \u548c make() \u5747\u662f\u7528\u4e8e\u5206\u914d\u5185\u5b58\uff1a new() \u7528\u4e8e\u503c\u7c7b\u578b\u548c\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u578b\uff0c\u5982\u81ea\u5b9a\u4e49\u7ed3\u6784\uff0c make \u7528\u4e8e\u5185\u7f6e\u5f15\u7528\u7c7b\u578b\uff08\u5207\u7247\u3001 map \u548c\u7ba1\u9053\uff09\u3002\u5b83\u4eec\u7684\u7528\u6cd5\u5c31\u50cf\u662f\u51fd\u6570\uff0c\u4f46\u662f\u5c06\u7c7b\u578b\u4f5c\u4e3a\u53c2\u6570\uff1a new(type) \u3001 make(type) \u3002 new(T) \u5206\u914d\u7c7b\u578b T \u7684\u96f6\u503c\u5e76\u8fd4\u56de\u5176\u5730\u5740\uff0c\u4e5f\u5c31\u662f\u6307\u5411\u7c7b\u578b T \u7684\u6307\u9488\uff08\u8be6\u89c1 \u7b2c 10.1 \u8282 \uff09\u3002\u5b83\u4e5f\u53ef\u4ee5\u88ab\u7528\u4e8e\u57fa\u672c\u7c7b\u578b\uff1a v := new(int) \u3002 make(T) \u8fd4\u56de\u7c7b\u578b T \u7684\u521d\u59cb\u5316\u4e4b\u540e\u7684\u503c\uff0c\u56e0\u6b64\u5b83\u6bd4 new() \u8fdb\u884c\u66f4\u591a\u7684\u5de5\u4f5c\uff08\u8be6\u89c1 \u7b2c 7.2.\u00be \u8282 \u3001 \u7b2c 8.1.1 \u8282 \u548c \u7b2c 14.2.1 \u8282 \uff09\u3002 new() \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u4e0d\u8981\u5fd8\u8bb0\u5b83\u7684\u62ec\u53f7 \u3002 copy() \u3001 append() \u7528\u4e8e\u590d\u5236\u548c\u8fde\u63a5\u5207\u7247 panic() \u3001 recover() \u4e24\u8005\u5747\u7528\u4e8e\u9519\u8bef\u5904\u7406\u673a\u5236 print() \u3001 println() \u5e95\u5c42\u6253\u5370\u51fd\u6570\uff08\u8be6\u89c1 \u7b2c 4.2 \u8282 \uff09\uff0c\u5728\u90e8\u7f72\u73af\u5883\u4e2d\u5efa\u8bae\u4f7f\u7528 fmt \u5305 complex() \u3001 real () \u3001 imag() \u7528\u4e8e\u521b\u5efa\u548c\u64cd\u4f5c\u590d\u6570\uff08\u8be6\u89c1 \u7b2c 4.5.2.2 \u8282 \uff09 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a defer \u548c\u8ffd\u8e2a \u4e0b\u4e00\u8282\uff1a \u9012\u5f52\u51fd\u6570","title":"6.5 \u5185\u7f6e\u51fd\u6570"},{"location":"06.5/#65","text":"Go \u8bed\u8a00\u62e5\u6709\u4e00\u4e9b\u4e0d\u9700\u8981\u8fdb\u884c\u5bfc\u5165\u64cd\u4f5c\u5c31\u53ef\u4ee5\u4f7f\u7528\u7684\u5185\u7f6e\u51fd\u6570\u3002\u5b83\u4eec\u6709\u65f6\u53ef\u4ee5\u9488\u5bf9\u4e0d\u540c\u7684\u7c7b\u578b\u8fdb\u884c\u64cd\u4f5c\uff0c\u4f8b\u5982\uff1a len() \u3001 cap() \u548c append() \uff0c\u6216\u5fc5\u987b\u7528\u4e8e\u7cfb\u7edf\u7ea7\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\uff1a panic() \u3002\u56e0\u6b64\uff0c\u5b83\u4eec\u9700\u8981\u76f4\u63a5\u83b7\u5f97\u7f16\u8bd1\u5668\u7684\u652f\u6301\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5217\u8868\uff0c\u6211\u4eec\u4f1a\u5728\u540e\u9762\u7684\u7ae0\u8282\u4e2d\u5bf9\u5b83\u4eec\u8fdb\u884c\u9010\u4e2a\u6df1\u5165\u7684\u8bb2\u89e3\u3002 \u540d\u79f0 \u8bf4\u660e close() \u7528\u4e8e\u7ba1\u9053\u901a\u4fe1 len() \u3001 cap() len() \u7528\u4e8e\u8fd4\u56de\u67d0\u4e2a\u7c7b\u578b\u7684\u957f\u5ea6\u6216\u6570\u91cf\uff08\u5b57\u7b26\u4e32\u3001\u6570\u7ec4\u3001\u5207\u7247\u3001 map \u548c\u7ba1\u9053\uff09\uff1b cap() \u662f\u5bb9\u91cf\u7684\u610f\u601d\uff0c\u7528\u4e8e\u8fd4\u56de\u67d0\u4e2a\u7c7b\u578b\u7684\u6700\u5927\u5bb9\u91cf\uff08\u53ea\u80fd\u7528\u4e8e\u6570\u7ec4\u3001\u5207\u7247\u548c\u7ba1\u9053\uff0c\u4e0d\u80fd\u7528\u4e8e map \uff09 new() \u3001 make() new() \u548c make() \u5747\u662f\u7528\u4e8e\u5206\u914d\u5185\u5b58\uff1a new() \u7528\u4e8e\u503c\u7c7b\u578b\u548c\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u578b\uff0c\u5982\u81ea\u5b9a\u4e49\u7ed3\u6784\uff0c make \u7528\u4e8e\u5185\u7f6e\u5f15\u7528\u7c7b\u578b\uff08\u5207\u7247\u3001 map \u548c\u7ba1\u9053\uff09\u3002\u5b83\u4eec\u7684\u7528\u6cd5\u5c31\u50cf\u662f\u51fd\u6570\uff0c\u4f46\u662f\u5c06\u7c7b\u578b\u4f5c\u4e3a\u53c2\u6570\uff1a new(type) \u3001 make(type) \u3002 new(T) \u5206\u914d\u7c7b\u578b T \u7684\u96f6\u503c\u5e76\u8fd4\u56de\u5176\u5730\u5740\uff0c\u4e5f\u5c31\u662f\u6307\u5411\u7c7b\u578b T \u7684\u6307\u9488\uff08\u8be6\u89c1 \u7b2c 10.1 \u8282 \uff09\u3002\u5b83\u4e5f\u53ef\u4ee5\u88ab\u7528\u4e8e\u57fa\u672c\u7c7b\u578b\uff1a v := new(int) \u3002 make(T) \u8fd4\u56de\u7c7b\u578b T \u7684\u521d\u59cb\u5316\u4e4b\u540e\u7684\u503c\uff0c\u56e0\u6b64\u5b83\u6bd4 new() \u8fdb\u884c\u66f4\u591a\u7684\u5de5\u4f5c\uff08\u8be6\u89c1 \u7b2c 7.2.\u00be \u8282 \u3001 \u7b2c 8.1.1 \u8282 \u548c \u7b2c 14.2.1 \u8282 \uff09\u3002 new() \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u4e0d\u8981\u5fd8\u8bb0\u5b83\u7684\u62ec\u53f7 \u3002 copy() \u3001 append() \u7528\u4e8e\u590d\u5236\u548c\u8fde\u63a5\u5207\u7247 panic() \u3001 recover() \u4e24\u8005\u5747\u7528\u4e8e\u9519\u8bef\u5904\u7406\u673a\u5236 print() \u3001 println() \u5e95\u5c42\u6253\u5370\u51fd\u6570\uff08\u8be6\u89c1 \u7b2c 4.2 \u8282 \uff09\uff0c\u5728\u90e8\u7f72\u73af\u5883\u4e2d\u5efa\u8bae\u4f7f\u7528 fmt \u5305 complex() \u3001 real () \u3001 imag() \u7528\u4e8e\u521b\u5efa\u548c\u64cd\u4f5c\u590d\u6570\uff08\u8be6\u89c1 \u7b2c 4.5.2.2 \u8282 \uff09","title":"6.5 \u5185\u7f6e\u51fd\u6570"},{"location":"06.5/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a defer \u548c\u8ffd\u8e2a \u4e0b\u4e00\u8282\uff1a \u9012\u5f52\u51fd\u6570","title":"\u94fe\u63a5"},{"location":"06.6/","text":"6.6 \u9012\u5f52\u51fd\u6570 \u00b6 \u5f53\u4e00\u4e2a\u51fd\u6570\u5728\u5176\u51fd\u6570\u4f53\u5185\u8c03\u7528\u81ea\u8eab\uff0c\u5219\u79f0\u4e4b\u4e3a\u9012\u5f52\u3002\u6700\u7ecf\u5178\u7684\u4f8b\u5b50\u4fbf\u662f\u8ba1\u7b97\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u5373\u524d\u4e24\u4e2a\u6570\u4e3a 1\uff0c\u4ece\u7b2c\u4e09\u4e2a\u6570\u5f00\u59cb\u6bcf\u4e2a\u6570\u5747\u4e3a\u524d\u4e24\u4e2a\u6570\u4e4b\u548c\u3002 \u6570\u5217\u5982\u4e0b\u6240\u793a\uff1a 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, \u2026 \u4e0b\u9762\u7684\u7a0b\u5e8f\u53ef\u7528\u4e8e\u751f\u6210\u8be5\u6570\u5217\uff08\u793a\u4f8b 6.13 fibonacci.go \uff09\uff1a package main import \"fmt\" func main () { result := 0 for i := 0 ; i <= 10 ; i ++ { result = fibonacci ( i ) fmt . Printf ( \"fibonacci(%d) is: %d\\n\" , i , result ) } } func fibonacci ( n int ) ( res int ) { if n <= 1 { res = 1 } else { res = fibonacci ( n - 1 ) + fibonacci ( n - 2 ) } return } \u8f93\u51fa\uff1a fibonacci(0) is: 1 fibonacci(1) is: 1 fibonacci(2) is: 2 fibonacci(3) is: 3 fibonacci(4) is: 5 fibonacci(5) is: 8 fibonacci(6) is: 13 fibonacci(7) is: 21 fibonacci(8) is: 34 fibonacci(9) is: 55 fibonacci(10) is: 89 \u8bb8\u591a\u95ee\u9898\u90fd\u53ef\u4ee5\u4f7f\u7528\u4f18\u96c5\u7684\u9012\u5f52\u6765\u89e3\u51b3\uff0c\u6bd4\u5982\u8bf4\u8457\u540d\u7684\u5feb\u901f\u6392\u5e8f\u7b97\u6cd5\u3002 \u5728\u4f7f\u7528\u9012\u5f52\u51fd\u6570\u65f6\u7ecf\u5e38\u4f1a\u9047\u5230\u7684\u4e00\u4e2a\u91cd\u8981\u95ee\u9898\u5c31\u662f\u6808\u6ea2\u51fa\uff1a\u4e00\u822c\u51fa\u73b0\u5728\u5927\u91cf\u7684\u9012\u5f52\u8c03\u7528\u5bfc\u81f4\u7684\u7a0b\u5e8f\u6808\u5185\u5b58\u5206\u914d\u8017\u5c3d\u3002\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u540d\u4e3a \u61d2\u60f0\u6c42\u503c \u7684\u6280\u672f\u89e3\u51b3\uff0c\u5728 Go \u8bed\u8a00\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7ba1\u9053 (channel) \u548c goroutine\uff08\u8be6\u89c1 \u7b2c 14.8 \u8282 \uff09\u6765\u5b9e\u73b0\u3002 \u7ec3\u4e60 14.12 \u4e5f\u4f1a\u901a\u8fc7\u8fd9\u4e2a\u65b9\u6848\u6765\u4f18\u5316\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u751f\u6210\u95ee\u9898\u3002 Go \u8bed\u8a00\u4e2d\u4e5f\u53ef\u4ee5\u4f7f\u7528\u76f8\u4e92\u8c03\u7528\u7684\u9012\u5f52\u51fd\u6570\uff1a\u591a\u4e2a\u51fd\u6570\u4e4b\u95f4\u76f8\u4e92\u8c03\u7528\u5f62\u6210\u95ed\u73af\u3002\u56e0\u4e3a Go \u8bed\u8a00\u7f16\u8bd1\u5668\u7684\u7279\u6b8a\u6027\uff0c\u8fd9\u4e9b\u51fd\u6570\u7684\u58f0\u660e\u987a\u5e8f\u53ef\u4ee5\u662f\u4efb\u610f\u7684\u3002\u4e0b\u9762\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u5c55\u793a\u4e86\u51fd\u6570 odd() \u548c even() \u4e4b\u95f4\u7684\u76f8\u4e92\u8c03\u7528\uff08\u793a\u4f8b 6.14 mut_recurs.go \uff09\uff1a package main import ( \"fmt\" ) func main () { fmt . Printf ( \"%d is even: is %t\\n\" , 16 , even ( 16 )) // 16 is even: is true fmt . Printf ( \"%d is odd: is %t\\n\" , 17 , odd ( 17 )) // 17 is odd: is true fmt . Printf ( \"%d is odd: is %t\\n\" , 18 , odd ( 18 )) // 18 is odd: is false } func even ( nr int ) bool { if nr == 0 { return true } return odd ( RevSign ( nr ) - 1 ) } func odd ( nr int ) bool { if nr == 0 { return false } return even ( RevSign ( nr ) - 1 ) } func RevSign ( nr int ) int { if nr < 0 { return - nr } return nr } \u7ec3\u4e60\u9898 \u00b6 \u7ec3\u4e60 6.4 fibonacci2.go \u91cd\u5199\u672c\u8282\u4e2d\u751f\u6210\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7a0b\u5e8f\u5e76\u8fd4\u56de\u4e24\u4e2a\u547d\u540d\u8fd4\u56de\u503c\uff08\u8be6\u89c1 \u7b2c 6.2 \u8282 \uff09\uff0c\u5373\u6570\u5217\u4e2d\u7684\u4f4d\u7f6e\u548c\u5bf9\u5e94\u7684\u503c\uff0c\u4f8b\u5982 5 \u4e0e 4\uff0c89 \u4e0e 10\u3002 \u7ec3\u4e60 6.5 10to1_recursive.go \u4f7f\u7528\u9012\u5f52\u51fd\u6570\u4ece 10 \u6253\u5370\u5230 1\u3002 \u7ec3\u4e60 6.6 factorial.go \u5b9e\u73b0\u4e00\u4e2a\u8f93\u51fa\u524d 30 \u4e2a\u6574\u6570\u7684\u9636\u4e58\u7684\u7a0b\u5e8f\u3002 n \u7684\u9636\u4e58\u5b9a\u4e49\u4e3a\uff1a n! = n * (n-1)!, 0! = 1 \uff0c\u56e0\u6b64\u5b83\u975e\u5e38\u9002\u5408\u4f7f\u7528\u9012\u5f52\u51fd\u6570\u6765\u5b9e\u73b0\u3002 \u7136\u540e\uff0c\u4f7f\u7528\u547d\u540d\u8fd4\u56de\u503c\u6765\u5b9e\u73b0\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u7b2c\u4e8c\u4e2a\u7248\u672c\u3002 \u7279\u522b\u6ce8\u610f\u7684\u662f\uff0c\u4f7f\u7528 int \u7c7b\u578b\u6700\u591a\u53ea\u80fd\u8ba1\u7b97\u5230 12 \u7684\u9636\u4e58\uff0c\u56e0\u4e3a\u4e00\u822c\u60c5\u51b5\u4e0b int \u7c7b\u578b\u7684\u5927\u5c0f\u4e3a 32 \u4f4d\uff0c\u7ee7\u7eed\u8ba1\u7b97\u4f1a\u5bfc\u81f4\u6ea2\u51fa\u9519\u8bef\u3002\u90a3\u4e48\uff0c\u5982\u4f55\u624d\u80fd\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462\uff1f \u6700\u597d\u7684\u89e3\u51b3\u65b9\u6848\u5c31\u662f\u4f7f\u7528 big \u5305\uff08\u8be6\u89c1 \u7b2c 9.4 \u8282 \uff09\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5185\u7f6e\u51fd\u6570 \u4e0b\u4e00\u8282\uff1a \u5c06\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570","title":"6.6 \u9012\u5f52\u51fd\u6570"},{"location":"06.6/#66","text":"\u5f53\u4e00\u4e2a\u51fd\u6570\u5728\u5176\u51fd\u6570\u4f53\u5185\u8c03\u7528\u81ea\u8eab\uff0c\u5219\u79f0\u4e4b\u4e3a\u9012\u5f52\u3002\u6700\u7ecf\u5178\u7684\u4f8b\u5b50\u4fbf\u662f\u8ba1\u7b97\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u5373\u524d\u4e24\u4e2a\u6570\u4e3a 1\uff0c\u4ece\u7b2c\u4e09\u4e2a\u6570\u5f00\u59cb\u6bcf\u4e2a\u6570\u5747\u4e3a\u524d\u4e24\u4e2a\u6570\u4e4b\u548c\u3002 \u6570\u5217\u5982\u4e0b\u6240\u793a\uff1a 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, \u2026 \u4e0b\u9762\u7684\u7a0b\u5e8f\u53ef\u7528\u4e8e\u751f\u6210\u8be5\u6570\u5217\uff08\u793a\u4f8b 6.13 fibonacci.go \uff09\uff1a package main import \"fmt\" func main () { result := 0 for i := 0 ; i <= 10 ; i ++ { result = fibonacci ( i ) fmt . Printf ( \"fibonacci(%d) is: %d\\n\" , i , result ) } } func fibonacci ( n int ) ( res int ) { if n <= 1 { res = 1 } else { res = fibonacci ( n - 1 ) + fibonacci ( n - 2 ) } return } \u8f93\u51fa\uff1a fibonacci(0) is: 1 fibonacci(1) is: 1 fibonacci(2) is: 2 fibonacci(3) is: 3 fibonacci(4) is: 5 fibonacci(5) is: 8 fibonacci(6) is: 13 fibonacci(7) is: 21 fibonacci(8) is: 34 fibonacci(9) is: 55 fibonacci(10) is: 89 \u8bb8\u591a\u95ee\u9898\u90fd\u53ef\u4ee5\u4f7f\u7528\u4f18\u96c5\u7684\u9012\u5f52\u6765\u89e3\u51b3\uff0c\u6bd4\u5982\u8bf4\u8457\u540d\u7684\u5feb\u901f\u6392\u5e8f\u7b97\u6cd5\u3002 \u5728\u4f7f\u7528\u9012\u5f52\u51fd\u6570\u65f6\u7ecf\u5e38\u4f1a\u9047\u5230\u7684\u4e00\u4e2a\u91cd\u8981\u95ee\u9898\u5c31\u662f\u6808\u6ea2\u51fa\uff1a\u4e00\u822c\u51fa\u73b0\u5728\u5927\u91cf\u7684\u9012\u5f52\u8c03\u7528\u5bfc\u81f4\u7684\u7a0b\u5e8f\u6808\u5185\u5b58\u5206\u914d\u8017\u5c3d\u3002\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u540d\u4e3a \u61d2\u60f0\u6c42\u503c \u7684\u6280\u672f\u89e3\u51b3\uff0c\u5728 Go \u8bed\u8a00\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7ba1\u9053 (channel) \u548c goroutine\uff08\u8be6\u89c1 \u7b2c 14.8 \u8282 \uff09\u6765\u5b9e\u73b0\u3002 \u7ec3\u4e60 14.12 \u4e5f\u4f1a\u901a\u8fc7\u8fd9\u4e2a\u65b9\u6848\u6765\u4f18\u5316\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u751f\u6210\u95ee\u9898\u3002 Go \u8bed\u8a00\u4e2d\u4e5f\u53ef\u4ee5\u4f7f\u7528\u76f8\u4e92\u8c03\u7528\u7684\u9012\u5f52\u51fd\u6570\uff1a\u591a\u4e2a\u51fd\u6570\u4e4b\u95f4\u76f8\u4e92\u8c03\u7528\u5f62\u6210\u95ed\u73af\u3002\u56e0\u4e3a Go \u8bed\u8a00\u7f16\u8bd1\u5668\u7684\u7279\u6b8a\u6027\uff0c\u8fd9\u4e9b\u51fd\u6570\u7684\u58f0\u660e\u987a\u5e8f\u53ef\u4ee5\u662f\u4efb\u610f\u7684\u3002\u4e0b\u9762\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u5c55\u793a\u4e86\u51fd\u6570 odd() \u548c even() \u4e4b\u95f4\u7684\u76f8\u4e92\u8c03\u7528\uff08\u793a\u4f8b 6.14 mut_recurs.go \uff09\uff1a package main import ( \"fmt\" ) func main () { fmt . Printf ( \"%d is even: is %t\\n\" , 16 , even ( 16 )) // 16 is even: is true fmt . Printf ( \"%d is odd: is %t\\n\" , 17 , odd ( 17 )) // 17 is odd: is true fmt . Printf ( \"%d is odd: is %t\\n\" , 18 , odd ( 18 )) // 18 is odd: is false } func even ( nr int ) bool { if nr == 0 { return true } return odd ( RevSign ( nr ) - 1 ) } func odd ( nr int ) bool { if nr == 0 { return false } return even ( RevSign ( nr ) - 1 ) } func RevSign ( nr int ) int { if nr < 0 { return - nr } return nr }","title":"6.6 \u9012\u5f52\u51fd\u6570"},{"location":"06.6/#_1","text":"\u7ec3\u4e60 6.4 fibonacci2.go \u91cd\u5199\u672c\u8282\u4e2d\u751f\u6210\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7a0b\u5e8f\u5e76\u8fd4\u56de\u4e24\u4e2a\u547d\u540d\u8fd4\u56de\u503c\uff08\u8be6\u89c1 \u7b2c 6.2 \u8282 \uff09\uff0c\u5373\u6570\u5217\u4e2d\u7684\u4f4d\u7f6e\u548c\u5bf9\u5e94\u7684\u503c\uff0c\u4f8b\u5982 5 \u4e0e 4\uff0c89 \u4e0e 10\u3002 \u7ec3\u4e60 6.5 10to1_recursive.go \u4f7f\u7528\u9012\u5f52\u51fd\u6570\u4ece 10 \u6253\u5370\u5230 1\u3002 \u7ec3\u4e60 6.6 factorial.go \u5b9e\u73b0\u4e00\u4e2a\u8f93\u51fa\u524d 30 \u4e2a\u6574\u6570\u7684\u9636\u4e58\u7684\u7a0b\u5e8f\u3002 n \u7684\u9636\u4e58\u5b9a\u4e49\u4e3a\uff1a n! = n * (n-1)!, 0! = 1 \uff0c\u56e0\u6b64\u5b83\u975e\u5e38\u9002\u5408\u4f7f\u7528\u9012\u5f52\u51fd\u6570\u6765\u5b9e\u73b0\u3002 \u7136\u540e\uff0c\u4f7f\u7528\u547d\u540d\u8fd4\u56de\u503c\u6765\u5b9e\u73b0\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u7b2c\u4e8c\u4e2a\u7248\u672c\u3002 \u7279\u522b\u6ce8\u610f\u7684\u662f\uff0c\u4f7f\u7528 int \u7c7b\u578b\u6700\u591a\u53ea\u80fd\u8ba1\u7b97\u5230 12 \u7684\u9636\u4e58\uff0c\u56e0\u4e3a\u4e00\u822c\u60c5\u51b5\u4e0b int \u7c7b\u578b\u7684\u5927\u5c0f\u4e3a 32 \u4f4d\uff0c\u7ee7\u7eed\u8ba1\u7b97\u4f1a\u5bfc\u81f4\u6ea2\u51fa\u9519\u8bef\u3002\u90a3\u4e48\uff0c\u5982\u4f55\u624d\u80fd\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462\uff1f \u6700\u597d\u7684\u89e3\u51b3\u65b9\u6848\u5c31\u662f\u4f7f\u7528 big \u5305\uff08\u8be6\u89c1 \u7b2c 9.4 \u8282 \uff09\u3002","title":"\u7ec3\u4e60\u9898"},{"location":"06.6/#_2","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5185\u7f6e\u51fd\u6570 \u4e0b\u4e00\u8282\uff1a \u5c06\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570","title":"\u94fe\u63a5"},{"location":"06.7/","text":"6.7 \u5c06\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570 \u00b6 \u51fd\u6570\u53ef\u4ee5\u4f5c\u4e3a\u5176\u5b83\u51fd\u6570\u7684\u53c2\u6570\u8fdb\u884c\u4f20\u9012\uff0c\u7136\u540e\u5728\u5176\u5b83\u51fd\u6570\u5185\u8c03\u7528\u6267\u884c\uff0c\u4e00\u822c\u79f0\u4e4b\u4e3a\u56de\u8c03\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u5c06\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u7684\u7b80\u5355\u4f8b\u5b50\uff08 function_parameter.go \uff09\uff1a package main import ( \"fmt\" ) func main () { callback ( 1 , Add ) } func Add ( a , b int ) { fmt . Printf ( \"The sum of %d and %d is: %d\\n\" , a , b , a + b ) } func callback ( y int , f func ( int , int )) { f ( y , 2 ) // this becomes Add(1, 2) } \u8f93\u51fa\uff1a The sum of 1 and 2 is: 3 \u5c06\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u7684\u6700\u597d\u7684\u4f8b\u5b50\u662f\u51fd\u6570 strings.IndexFunc() \uff1a \u8be5\u51fd\u6570\u7684\u7b7e\u540d\u662f func IndexFunc(s string, f func(c rune) bool) int \uff0c\u5b83\u7684\u8fd4\u56de\u503c\u662f\u5b57\u7b26\u4e32 s \u4e2d\u7b2c\u4e00\u4e2a\u4f7f\u51fd\u6570 f(c) \u8fd4\u56de true \u7684 Unicode \u5b57\u7b26\u7684\u7d22\u5f15\u503c\u3002\u5982\u679c\u627e\u4e0d\u5230\uff0c\u5219\u8fd4\u56de -1\u3002 \u4f8b\u5982 strings.IndexFunc(line, unicode.IsSpace) \u5c31\u4f1a\u8fd4\u56de line \u4e2d\u7b2c\u4e00\u4e2a\u7a7a\u767d\u5b57\u7b26\u7684\u7d22\u5f15\u503c\u3002\u5f53\u7136\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4e66\u5199\u81ea\u5df1\u7684\u51fd\u6570\uff1a func IsAscii ( c int ) bool { if c > 255 { return false } return true } \u5728 \u7b2c 14.10.1 \u8282 \u4e2d\uff0c\u6211\u4eec\u5c06\u4f1a\u6839\u636e\u4e00\u4e2a\u5ba2\u6237\u7aef/\u670d\u52a1\u7aef\u7a0b\u5e8f\u4f5c\u4e3a\u793a\u4f8b\u5bf9\u8fd9\u4e2a\u7528\u6cd5\u8fdb\u884c\u6df1\u5165\u8ba8\u8bba\u3002 type binOp func ( a , b int ) int func run ( op binOp , req * Request ) { \u2026 } \u7ec3\u4e60 6.7 strings_map.go \u5305 strings \u4e2d\u7684 Map() \u51fd\u6570\u548c strings.IndexFunc() \u4e00\u6837\u90fd\u662f\u975e\u5e38\u597d\u7684\u4f7f\u7528\u4f8b\u5b50\u3002\u8bf7\u5b66\u4e60\u5b83\u7684\u6e90\u4ee3\u7801\u5e76\u57fa\u4e8e\u8be5\u51fd\u6570\u4e66\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8981\u6c42\u5c06\u6307\u5b9a\u6587\u672c\u5185\u7684\u6240\u6709\u975e ASCII \u5b57\u7b26\u66ff\u6362\u6210\u95ee\u53f7 '?' \u6216\u7a7a\u683c ' ' \u3002\u60a8\u9700\u8981\u600e\u4e48\u505a\u624d\u80fd\u5220\u9664\u8fd9\u4e9b\u5b57\u7b26\u5462\uff1f \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u9012\u5f52\u51fd\u6570 \u4e0b\u4e00\u8282\uff1a \u95ed\u5305","title":"6.7 \u5c06\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570"},{"location":"06.7/#67","text":"\u51fd\u6570\u53ef\u4ee5\u4f5c\u4e3a\u5176\u5b83\u51fd\u6570\u7684\u53c2\u6570\u8fdb\u884c\u4f20\u9012\uff0c\u7136\u540e\u5728\u5176\u5b83\u51fd\u6570\u5185\u8c03\u7528\u6267\u884c\uff0c\u4e00\u822c\u79f0\u4e4b\u4e3a\u56de\u8c03\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u5c06\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u7684\u7b80\u5355\u4f8b\u5b50\uff08 function_parameter.go \uff09\uff1a package main import ( \"fmt\" ) func main () { callback ( 1 , Add ) } func Add ( a , b int ) { fmt . Printf ( \"The sum of %d and %d is: %d\\n\" , a , b , a + b ) } func callback ( y int , f func ( int , int )) { f ( y , 2 ) // this becomes Add(1, 2) } \u8f93\u51fa\uff1a The sum of 1 and 2 is: 3 \u5c06\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u7684\u6700\u597d\u7684\u4f8b\u5b50\u662f\u51fd\u6570 strings.IndexFunc() \uff1a \u8be5\u51fd\u6570\u7684\u7b7e\u540d\u662f func IndexFunc(s string, f func(c rune) bool) int \uff0c\u5b83\u7684\u8fd4\u56de\u503c\u662f\u5b57\u7b26\u4e32 s \u4e2d\u7b2c\u4e00\u4e2a\u4f7f\u51fd\u6570 f(c) \u8fd4\u56de true \u7684 Unicode \u5b57\u7b26\u7684\u7d22\u5f15\u503c\u3002\u5982\u679c\u627e\u4e0d\u5230\uff0c\u5219\u8fd4\u56de -1\u3002 \u4f8b\u5982 strings.IndexFunc(line, unicode.IsSpace) \u5c31\u4f1a\u8fd4\u56de line \u4e2d\u7b2c\u4e00\u4e2a\u7a7a\u767d\u5b57\u7b26\u7684\u7d22\u5f15\u503c\u3002\u5f53\u7136\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4e66\u5199\u81ea\u5df1\u7684\u51fd\u6570\uff1a func IsAscii ( c int ) bool { if c > 255 { return false } return true } \u5728 \u7b2c 14.10.1 \u8282 \u4e2d\uff0c\u6211\u4eec\u5c06\u4f1a\u6839\u636e\u4e00\u4e2a\u5ba2\u6237\u7aef/\u670d\u52a1\u7aef\u7a0b\u5e8f\u4f5c\u4e3a\u793a\u4f8b\u5bf9\u8fd9\u4e2a\u7528\u6cd5\u8fdb\u884c\u6df1\u5165\u8ba8\u8bba\u3002 type binOp func ( a , b int ) int func run ( op binOp , req * Request ) { \u2026 } \u7ec3\u4e60 6.7 strings_map.go \u5305 strings \u4e2d\u7684 Map() \u51fd\u6570\u548c strings.IndexFunc() \u4e00\u6837\u90fd\u662f\u975e\u5e38\u597d\u7684\u4f7f\u7528\u4f8b\u5b50\u3002\u8bf7\u5b66\u4e60\u5b83\u7684\u6e90\u4ee3\u7801\u5e76\u57fa\u4e8e\u8be5\u51fd\u6570\u4e66\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8981\u6c42\u5c06\u6307\u5b9a\u6587\u672c\u5185\u7684\u6240\u6709\u975e ASCII \u5b57\u7b26\u66ff\u6362\u6210\u95ee\u53f7 '?' \u6216\u7a7a\u683c ' ' \u3002\u60a8\u9700\u8981\u600e\u4e48\u505a\u624d\u80fd\u5220\u9664\u8fd9\u4e9b\u5b57\u7b26\u5462\uff1f","title":"6.7 \u5c06\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570"},{"location":"06.7/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u9012\u5f52\u51fd\u6570 \u4e0b\u4e00\u8282\uff1a \u95ed\u5305","title":"\u94fe\u63a5"},{"location":"06.8/","text":"6.8 \u95ed\u5305 \u00b6 \u5f53\u6211\u4eec\u4e0d\u5e0c\u671b\u7ed9\u51fd\u6570\u8d77\u540d\u5b57\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u4f7f\u7528\u533f\u540d\u51fd\u6570\uff0c\u4f8b\u5982\uff1a func(x, y int) int { return x + y } \u3002 \u8fd9\u6837\u7684\u4e00\u4e2a\u51fd\u6570\u4e0d\u80fd\u591f\u72ec\u7acb\u5b58\u5728\uff08\u7f16\u8bd1\u5668\u4f1a\u8fd4\u56de\u9519\u8bef\uff1a non-declaration statement outside function body \uff09\uff0c\u4f46\u53ef\u4ee5\u88ab\u8d4b\u503c\u4e8e\u67d0\u4e2a\u53d8\u91cf\uff0c\u5373\u4fdd\u5b58\u51fd\u6570\u7684\u5730\u5740\u5230\u53d8\u91cf\u4e2d\uff1a fplus := func(x, y int) int { return x + y } \uff0c\u7136\u540e\u901a\u8fc7\u53d8\u91cf\u540d\u5bf9\u51fd\u6570\u8fdb\u884c\u8c03\u7528\uff1a fplus(3,4) \u3002 \u5f53\u7136\uff0c\u60a8\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5bf9\u533f\u540d\u51fd\u6570\u8fdb\u884c\u8c03\u7528\uff1a func(x, y int) int { return x + y } (3, 4) \u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u8ba1\u7b97\u4ece 1 \u5230 100 \u4e07\u6574\u6570\u7684\u603b\u548c\u7684\u533f\u540d\u51fd\u6570\uff1a func () { sum := 0 for i := 1 ; i <= 1e6 ; i ++ { sum += i } }() \u8868\u793a\u53c2\u6570\u5217\u8868\u7684\u7b2c\u4e00\u5bf9\u62ec\u53f7\u5fc5\u987b\u7d27\u6328\u7740\u5173\u952e\u5b57 func \uff0c\u56e0\u4e3a\u533f\u540d\u51fd\u6570\u6ca1\u6709\u540d\u79f0\u3002\u82b1\u62ec\u53f7 {} \u6db5\u76d6\u7740\u51fd\u6570\u4f53\uff0c\u6700\u540e\u7684\u4e00\u5bf9\u62ec\u53f7\u8868\u793a\u5bf9\u8be5\u533f\u540d\u51fd\u6570\u7684\u8c03\u7528\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u5c55\u793a\u4e86\u5982\u4f55\u5c06\u533f\u540d\u51fd\u6570\u8d4b\u503c\u7ed9\u53d8\u91cf\u5e76\u5bf9\u5176\u8fdb\u884c\u8c03\u7528\uff08 function_literal.go \uff09\uff1a package main import \"fmt\" func main () { f () } func f () { for i := 0 ; i < 4 ; i ++ { g := func ( i int ) { fmt . Printf ( \"%d \" , i ) } g ( i ) fmt . Printf ( \" - g is of type %T and has value %v\\n\" , g , g ) } } \u8f93\u51fa\uff1a 0 - g is of type func(int) and has value 0x681a80 1 - g is of type func(int) and has value 0x681b00 2 - g is of type func(int) and has value 0x681ac0 3 - g is of type func(int) and has value 0x681400 \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u53d8\u91cf g \u4ee3\u8868\u7684\u662f func(int) \uff0c\u53d8\u91cf\u7684\u503c\u662f\u4e00\u4e2a\u5185\u5b58\u5730\u5740\u3002 \u6240\u4ee5\u6211\u4eec\u5b9e\u9645\u4e0a\u62e5\u6709\u7684\u662f\u4e00\u4e2a\u51fd\u6570\u503c\uff1a\u533f\u540d\u51fd\u6570\u53ef\u4ee5\u88ab\u8d4b\u503c\u7ed9\u53d8\u91cf\u5e76\u4f5c\u4e3a\u503c\u4f7f\u7528\u3002 \u7ec3\u4e60 6.8 \u5728 main() \u51fd\u6570\u4e2d\u5199\u4e00\u4e2a\u7528\u4e8e\u6253\u5370 Hello World \u5b57\u7b26\u4e32\u7684\u533f\u540d\u51fd\u6570\u5e76\u8d4b\u503c\u7ed9\u53d8\u91cf fv \uff0c\u7136\u540e\u8c03\u7528\u8be5\u51fd\u6570\u5e76\u6253\u5370\u53d8\u91cf fv \u7684\u7c7b\u578b\u3002 \u533f\u540d\u51fd\u6570\u50cf\u6240\u6709\u51fd\u6570\u4e00\u6837\u53ef\u4ee5\u63a5\u53d7\u6216\u4e0d\u63a5\u53d7\u53c2\u6570\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u5c55\u793a\u4e86\u5982\u4f55\u4f20\u9012\u53c2\u6570\u5230\u533f\u540d\u51fd\u6570\u4e2d\uff1a func ( u string ) { fmt . Println ( u ) \u2026 }( v ) \u8bf7\u5b66\u4e60\u4ee5\u4e0b\u793a\u4f8b\u5e76\u601d\u8003\uff08 return_defer.go \uff09\uff1a\u51fd\u6570 f \u8fd4\u56de\u65f6\uff0c\u53d8\u91cf ret \u7684\u503c\u662f\u4ec0\u4e48\uff1f package main import \"fmt\" func f () ( ret int ) { defer func () { ret ++ }() return 1 } func main () { fmt . Println ( f ()) } \u53d8\u91cf ret \u7684\u503c\u4e3a 2 \uff0c\u56e0\u4e3a ret++ \u662f\u5728\u6267\u884c return 1 \u8bed\u53e5\u540e\u53d1\u751f\u7684\u3002 \u8fd9\u53ef\u7528\u4e8e\u5728\u8fd4\u56de\u8bed\u53e5\u4e4b\u540e\u4fee\u6539\u8fd4\u56de\u7684 error \u65f6\u4f7f\u7528\u3002 defer \u8bed\u53e5\u548c\u533f\u540d\u51fd\u6570 \u5173\u952e\u5b57 defer \uff08\u8be6\u89c1 \u7b2c 6.4 \u8282 \uff09\u7ecf\u5e38\u914d\u5408\u533f\u540d\u51fd\u6570\u4f7f\u7528\uff0c\u5b83\u53ef\u4ee5\u7528\u4e8e\u6539\u53d8\u51fd\u6570\u7684\u547d\u540d\u8fd4\u56de\u503c\u3002 \u533f\u540d\u51fd\u6570\u8fd8\u53ef\u4ee5\u914d\u5408 go \u5173\u952e\u5b57\u6765\u4f5c\u4e3a goroutine \u4f7f\u7528\uff08\u8be6\u89c1 \u7b2c 14 \u7ae0 \u548c \u7b2c 16.9 \u8282 \uff09\u3002 \u533f\u540d\u51fd\u6570\u540c\u6837\u88ab\u79f0\u4e4b\u4e3a\u95ed\u5305\uff08\u51fd\u6570\u5f0f\u8bed\u8a00\u7684\u672f\u8bed\uff09\uff1a\u5b83\u4eec\u88ab\u5141\u8bb8\u8c03\u7528\u5b9a\u4e49\u5728\u5176\u5b83\u73af\u5883\u4e0b\u7684\u53d8\u91cf\u3002\u95ed\u5305\u53ef\u4f7f\u5f97\u67d0\u4e2a\u51fd\u6570\u6355\u6349\u5230\u4e00\u4e9b\u5916\u90e8\u72b6\u6001\uff0c\u4f8b\u5982\uff1a\u51fd\u6570\u88ab\u521b\u5efa\u65f6\u7684\u72b6\u6001\u3002\u53e6\u4e00\u79cd\u8868\u793a\u65b9\u5f0f\u4e3a\uff1a\u4e00\u4e2a\u95ed\u5305\u7ee7\u627f\u4e86\u51fd\u6570\u6240\u58f0\u660e\u65f6\u7684\u4f5c\u7528\u57df\u3002\u8fd9\u79cd\u72b6\u6001\uff08\u4f5c\u7528\u57df\u5185\u7684\u53d8\u91cf\uff09\u90fd\u88ab\u5171\u4eab\u5230\u95ed\u5305\u7684\u73af\u5883\u4e2d\uff0c\u56e0\u6b64\u8fd9\u4e9b\u53d8\u91cf\u53ef\u4ee5\u5728\u95ed\u5305\u4e2d\u88ab\u64cd\u4f5c\uff0c\u76f4\u5230\u88ab\u9500\u6bc1\uff0c\u8be6\u89c1 \u7b2c 6.9 \u8282 \u4e2d\u7684\u793a\u4f8b\u3002\u95ed\u5305\u7ecf\u5e38\u88ab\u7528\u4f5c\u5305\u88c5\u51fd\u6570\uff1a\u5b83\u4eec\u4f1a\u9884\u5148\u5b9a\u4e49\u597d 1 \u4e2a\u6216\u591a\u4e2a\u53c2\u6570\u4ee5\u7528\u4e8e\u5305\u88c5\uff0c\u8be6\u89c1\u4e0b\u4e00\u8282\u4e2d\u7684\u793a\u4f8b\u3002\u53e6\u4e00\u4e2a\u4e0d\u9519\u7684\u5e94\u7528\u5c31\u662f\u4f7f\u7528\u95ed\u5305\u6765\u5b8c\u6210\u66f4\u52a0\u7b80\u6d01\u7684\u9519\u8bef\u68c0\u67e5\uff08\u8be6\u89c1 \u7b2c 16.10.2 \u8282 \uff09\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5c06\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570 \u4e0b\u4e00\u8282\uff1a \u5e94\u7528\u95ed\u5305\uff1a\u5c06\u51fd\u6570\u4f5c\u4e3a\u8fd4\u56de\u503c","title":"6.8 \u95ed\u5305"},{"location":"06.8/#68","text":"\u5f53\u6211\u4eec\u4e0d\u5e0c\u671b\u7ed9\u51fd\u6570\u8d77\u540d\u5b57\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u4f7f\u7528\u533f\u540d\u51fd\u6570\uff0c\u4f8b\u5982\uff1a func(x, y int) int { return x + y } \u3002 \u8fd9\u6837\u7684\u4e00\u4e2a\u51fd\u6570\u4e0d\u80fd\u591f\u72ec\u7acb\u5b58\u5728\uff08\u7f16\u8bd1\u5668\u4f1a\u8fd4\u56de\u9519\u8bef\uff1a non-declaration statement outside function body \uff09\uff0c\u4f46\u53ef\u4ee5\u88ab\u8d4b\u503c\u4e8e\u67d0\u4e2a\u53d8\u91cf\uff0c\u5373\u4fdd\u5b58\u51fd\u6570\u7684\u5730\u5740\u5230\u53d8\u91cf\u4e2d\uff1a fplus := func(x, y int) int { return x + y } \uff0c\u7136\u540e\u901a\u8fc7\u53d8\u91cf\u540d\u5bf9\u51fd\u6570\u8fdb\u884c\u8c03\u7528\uff1a fplus(3,4) \u3002 \u5f53\u7136\uff0c\u60a8\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5bf9\u533f\u540d\u51fd\u6570\u8fdb\u884c\u8c03\u7528\uff1a func(x, y int) int { return x + y } (3, 4) \u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u8ba1\u7b97\u4ece 1 \u5230 100 \u4e07\u6574\u6570\u7684\u603b\u548c\u7684\u533f\u540d\u51fd\u6570\uff1a func () { sum := 0 for i := 1 ; i <= 1e6 ; i ++ { sum += i } }() \u8868\u793a\u53c2\u6570\u5217\u8868\u7684\u7b2c\u4e00\u5bf9\u62ec\u53f7\u5fc5\u987b\u7d27\u6328\u7740\u5173\u952e\u5b57 func \uff0c\u56e0\u4e3a\u533f\u540d\u51fd\u6570\u6ca1\u6709\u540d\u79f0\u3002\u82b1\u62ec\u53f7 {} \u6db5\u76d6\u7740\u51fd\u6570\u4f53\uff0c\u6700\u540e\u7684\u4e00\u5bf9\u62ec\u53f7\u8868\u793a\u5bf9\u8be5\u533f\u540d\u51fd\u6570\u7684\u8c03\u7528\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u5c55\u793a\u4e86\u5982\u4f55\u5c06\u533f\u540d\u51fd\u6570\u8d4b\u503c\u7ed9\u53d8\u91cf\u5e76\u5bf9\u5176\u8fdb\u884c\u8c03\u7528\uff08 function_literal.go \uff09\uff1a package main import \"fmt\" func main () { f () } func f () { for i := 0 ; i < 4 ; i ++ { g := func ( i int ) { fmt . Printf ( \"%d \" , i ) } g ( i ) fmt . Printf ( \" - g is of type %T and has value %v\\n\" , g , g ) } } \u8f93\u51fa\uff1a 0 - g is of type func(int) and has value 0x681a80 1 - g is of type func(int) and has value 0x681b00 2 - g is of type func(int) and has value 0x681ac0 3 - g is of type func(int) and has value 0x681400 \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u53d8\u91cf g \u4ee3\u8868\u7684\u662f func(int) \uff0c\u53d8\u91cf\u7684\u503c\u662f\u4e00\u4e2a\u5185\u5b58\u5730\u5740\u3002 \u6240\u4ee5\u6211\u4eec\u5b9e\u9645\u4e0a\u62e5\u6709\u7684\u662f\u4e00\u4e2a\u51fd\u6570\u503c\uff1a\u533f\u540d\u51fd\u6570\u53ef\u4ee5\u88ab\u8d4b\u503c\u7ed9\u53d8\u91cf\u5e76\u4f5c\u4e3a\u503c\u4f7f\u7528\u3002 \u7ec3\u4e60 6.8 \u5728 main() \u51fd\u6570\u4e2d\u5199\u4e00\u4e2a\u7528\u4e8e\u6253\u5370 Hello World \u5b57\u7b26\u4e32\u7684\u533f\u540d\u51fd\u6570\u5e76\u8d4b\u503c\u7ed9\u53d8\u91cf fv \uff0c\u7136\u540e\u8c03\u7528\u8be5\u51fd\u6570\u5e76\u6253\u5370\u53d8\u91cf fv \u7684\u7c7b\u578b\u3002 \u533f\u540d\u51fd\u6570\u50cf\u6240\u6709\u51fd\u6570\u4e00\u6837\u53ef\u4ee5\u63a5\u53d7\u6216\u4e0d\u63a5\u53d7\u53c2\u6570\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u5c55\u793a\u4e86\u5982\u4f55\u4f20\u9012\u53c2\u6570\u5230\u533f\u540d\u51fd\u6570\u4e2d\uff1a func ( u string ) { fmt . Println ( u ) \u2026 }( v ) \u8bf7\u5b66\u4e60\u4ee5\u4e0b\u793a\u4f8b\u5e76\u601d\u8003\uff08 return_defer.go \uff09\uff1a\u51fd\u6570 f \u8fd4\u56de\u65f6\uff0c\u53d8\u91cf ret \u7684\u503c\u662f\u4ec0\u4e48\uff1f package main import \"fmt\" func f () ( ret int ) { defer func () { ret ++ }() return 1 } func main () { fmt . Println ( f ()) } \u53d8\u91cf ret \u7684\u503c\u4e3a 2 \uff0c\u56e0\u4e3a ret++ \u662f\u5728\u6267\u884c return 1 \u8bed\u53e5\u540e\u53d1\u751f\u7684\u3002 \u8fd9\u53ef\u7528\u4e8e\u5728\u8fd4\u56de\u8bed\u53e5\u4e4b\u540e\u4fee\u6539\u8fd4\u56de\u7684 error \u65f6\u4f7f\u7528\u3002 defer \u8bed\u53e5\u548c\u533f\u540d\u51fd\u6570 \u5173\u952e\u5b57 defer \uff08\u8be6\u89c1 \u7b2c 6.4 \u8282 \uff09\u7ecf\u5e38\u914d\u5408\u533f\u540d\u51fd\u6570\u4f7f\u7528\uff0c\u5b83\u53ef\u4ee5\u7528\u4e8e\u6539\u53d8\u51fd\u6570\u7684\u547d\u540d\u8fd4\u56de\u503c\u3002 \u533f\u540d\u51fd\u6570\u8fd8\u53ef\u4ee5\u914d\u5408 go \u5173\u952e\u5b57\u6765\u4f5c\u4e3a goroutine \u4f7f\u7528\uff08\u8be6\u89c1 \u7b2c 14 \u7ae0 \u548c \u7b2c 16.9 \u8282 \uff09\u3002 \u533f\u540d\u51fd\u6570\u540c\u6837\u88ab\u79f0\u4e4b\u4e3a\u95ed\u5305\uff08\u51fd\u6570\u5f0f\u8bed\u8a00\u7684\u672f\u8bed\uff09\uff1a\u5b83\u4eec\u88ab\u5141\u8bb8\u8c03\u7528\u5b9a\u4e49\u5728\u5176\u5b83\u73af\u5883\u4e0b\u7684\u53d8\u91cf\u3002\u95ed\u5305\u53ef\u4f7f\u5f97\u67d0\u4e2a\u51fd\u6570\u6355\u6349\u5230\u4e00\u4e9b\u5916\u90e8\u72b6\u6001\uff0c\u4f8b\u5982\uff1a\u51fd\u6570\u88ab\u521b\u5efa\u65f6\u7684\u72b6\u6001\u3002\u53e6\u4e00\u79cd\u8868\u793a\u65b9\u5f0f\u4e3a\uff1a\u4e00\u4e2a\u95ed\u5305\u7ee7\u627f\u4e86\u51fd\u6570\u6240\u58f0\u660e\u65f6\u7684\u4f5c\u7528\u57df\u3002\u8fd9\u79cd\u72b6\u6001\uff08\u4f5c\u7528\u57df\u5185\u7684\u53d8\u91cf\uff09\u90fd\u88ab\u5171\u4eab\u5230\u95ed\u5305\u7684\u73af\u5883\u4e2d\uff0c\u56e0\u6b64\u8fd9\u4e9b\u53d8\u91cf\u53ef\u4ee5\u5728\u95ed\u5305\u4e2d\u88ab\u64cd\u4f5c\uff0c\u76f4\u5230\u88ab\u9500\u6bc1\uff0c\u8be6\u89c1 \u7b2c 6.9 \u8282 \u4e2d\u7684\u793a\u4f8b\u3002\u95ed\u5305\u7ecf\u5e38\u88ab\u7528\u4f5c\u5305\u88c5\u51fd\u6570\uff1a\u5b83\u4eec\u4f1a\u9884\u5148\u5b9a\u4e49\u597d 1 \u4e2a\u6216\u591a\u4e2a\u53c2\u6570\u4ee5\u7528\u4e8e\u5305\u88c5\uff0c\u8be6\u89c1\u4e0b\u4e00\u8282\u4e2d\u7684\u793a\u4f8b\u3002\u53e6\u4e00\u4e2a\u4e0d\u9519\u7684\u5e94\u7528\u5c31\u662f\u4f7f\u7528\u95ed\u5305\u6765\u5b8c\u6210\u66f4\u52a0\u7b80\u6d01\u7684\u9519\u8bef\u68c0\u67e5\uff08\u8be6\u89c1 \u7b2c 16.10.2 \u8282 \uff09\u3002","title":"6.8 \u95ed\u5305"},{"location":"06.8/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5c06\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570 \u4e0b\u4e00\u8282\uff1a \u5e94\u7528\u95ed\u5305\uff1a\u5c06\u51fd\u6570\u4f5c\u4e3a\u8fd4\u56de\u503c","title":"\u94fe\u63a5"},{"location":"06.9/","text":"6.9 \u5e94\u7528\u95ed\u5305\uff1a\u5c06\u51fd\u6570\u4f5c\u4e3a\u8fd4\u56de\u503c \u00b6 \u5728\u7a0b\u5e8f function_return.go \u4e2d\u6211\u4eec\u5c06\u4f1a\u770b\u5230\u51fd\u6570 Add2() \u548c Adder() \u5747\u4f1a\u8fd4\u56de\u7b7e\u540d\u4e3a func(b int) int \u7684\u51fd\u6570\uff1a func Add2 () ( func ( b int ) int ) func Adder ( a int ) ( func ( b int ) int ) \u51fd\u6570 Add2() \u4e0d\u63a5\u53d7\u4efb\u4f55\u53c2\u6570\uff0c\u4f46\u51fd\u6570 Adder() \u63a5\u53d7\u4e00\u4e2a int \u7c7b\u578b\u7684\u6574\u6570\u4f5c\u4e3a\u53c2\u6570\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06 Adder() \u8fd4\u56de\u7684\u51fd\u6570\u5b58\u5230\u53d8\u91cf\u4e2d ( function_return.go )\u3002 package main import \"fmt\" func main () { // make an Add2 function, give it a name p2, and call it: p2 := Add2 () fmt . Printf ( \"Call Add2 for 3 gives: %v\\n\" , p2 ( 3 )) // make a special Adder function, a gets value 2: TwoAdder := Adder ( 2 ) fmt . Printf ( \"The result is: %v\\n\" , TwoAdder ( 3 )) } func Add2 () func ( b int ) int { return func ( b int ) int { return b + 2 } } func Adder ( a int ) func ( b int ) int { return func ( b int ) int { return a + b } } \u8f93\u51fa\uff1a Call Add2 for 3 gives: 5 The result is: 5 \u4e0b\u4f8b\u4e3a\u4e00\u4e2a\u7565\u5fae\u4e0d\u540c\u7684\u5b9e\u73b0 ( function_closure.go )\uff1a package main import \"fmt\" func main () { var f = Adder () fmt . Print ( f ( 1 ), \" - \" ) fmt . Print ( f ( 20 ), \" - \" ) fmt . Print ( f ( 300 )) } func Adder () func ( int ) int { var x int return func ( delta int ) int { x += delta return x } } \u51fd\u6570 Adder() \u73b0\u5728\u88ab\u8d4b\u503c\u5230\u53d8\u91cf f \u4e2d\uff08\u7c7b\u578b\u4e3a func(int) int \uff09\u3002 \u8f93\u51fa\uff1a 1 - 21 - 321 \u4e09\u6b21\u8c03\u7528\u51fd\u6570 f \u7684\u8fc7\u7a0b\u4e2d\u51fd\u6570 Adder() \u4e2d\u53d8\u91cf delta \u7684\u503c\u5206\u522b\u4e3a\uff1a1\u300120 \u548c 300\u3002 \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5728\u591a\u6b21\u8c03\u7528\u4e2d\uff0c\u53d8\u91cf x \u7684\u503c\u662f\u88ab\u4fdd\u7559\u7684\uff0c\u5373 0 + 1 = 1 \uff0c\u7136\u540e 1 + 20 = 21 \uff0c\u6700\u540e 21 + 300 = 321 \uff1a\u95ed\u5305\u51fd\u6570\u4fdd\u5b58\u5e76\u79ef\u7d2f\u5176\u4e2d\u7684\u53d8\u91cf\u7684\u503c\uff0c\u4e0d\u7ba1\u5916\u90e8\u51fd\u6570\u9000\u51fa\u4e0e\u5426\uff0c\u5b83\u90fd\u80fd\u591f\u7ee7\u7eed\u64cd\u4f5c\u5916\u90e8\u51fd\u6570\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\u3002 \u8fd9\u4e9b\u5c40\u90e8\u53d8\u91cf\u540c\u6837\u53ef\u4ee5\u662f\u53c2\u6570\uff0c\u4f8b\u5982\u4e4b\u524d\u4f8b\u5b50\u4e2d\u7684 Adder(as int) \u3002 \u8fd9\u4e9b\u4f8b\u5b50\u6e05\u695a\u5730\u5c55\u793a\u4e86\u5982\u4f55\u5728 Go \u8bed\u8a00\u4e2d\u4f7f\u7528\u95ed\u5305\u3002 \u5728\u95ed\u5305\u4e2d\u4f7f\u7528\u5230\u7684\u53d8\u91cf\u53ef\u4ee5\u662f\u5728\u95ed\u5305\u51fd\u6570\u4f53\u5185\u58f0\u660e\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u5728\u5916\u90e8\u51fd\u6570\u58f0\u660e\u7684\uff1a var g int go func ( i int ) { s := 0 for j := 0 ; j < i ; j ++ { s += j } g = s }( 1000 ) // Passes argument 1000 to the function literal. \u8fd9\u6837\u95ed\u5305\u51fd\u6570\u5c31\u80fd\u591f\u88ab\u5e94\u7528\u5230\u6574\u4e2a\u96c6\u5408\u7684\u5143\u7d20\u4e0a\uff0c\u5e76\u4fee\u6539\u5b83\u4eec\u7684\u503c\u3002\u7136\u540e\u8fd9\u4e9b\u53d8\u91cf\u5c31\u53ef\u4ee5\u7528\u4e8e\u8868\u793a\u6216\u8ba1\u7b97\u5168\u5c40\u6216\u5e73\u5747\u503c\u3002 \u7ec3\u4e60 6.9 fibonacci_closure \u4e0d\u4f7f\u7528\u9012\u5f52\u4f46\u4f7f\u7528\u95ed\u5305\u6539\u5199\u7b2c 6.6 \u8282\u4e2d\u7684\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7a0b\u5e8f\u3002 \u7ec3\u4e60 6.10 \u5b66\u4e60\u5e76\u7406\u89e3\u4ee5\u4e0b\u7a0b\u5e8f\u7684\u5de5\u4f5c\u539f\u7406\uff1a \u4e00\u4e2a\u8fd4\u56de\u503c\u4e3a\u53e6\u4e00\u4e2a\u51fd\u6570\u7684\u51fd\u6570\u53ef\u4ee5\u88ab\u79f0\u4e4b\u4e3a\u5de5\u5382\u51fd\u6570\uff0c\u8fd9\u5728\u60a8\u9700\u8981\u521b\u5efa\u4e00\u7cfb\u5217\u76f8\u4f3c\u7684\u51fd\u6570\u7684\u65f6\u5019\u975e\u5e38\u6709\u7528\uff1a\u4e66\u5199\u4e00\u4e2a\u5de5\u5382\u51fd\u6570\u800c\u4e0d\u662f\u9488\u5bf9\u6bcf\u79cd\u60c5\u51b5\u90fd\u4e66\u5199\u4e00\u4e2a\u51fd\u6570\u3002\u4e0b\u9762\u7684\u51fd\u6570\u6f14\u793a\u4e86\u5982\u4f55\u52a8\u6001\u8fd4\u56de\u8ffd\u52a0\u540e\u7f00\u7684\u51fd\u6570\uff1a func MakeAddSuffix ( suffix string ) func ( string ) string { return func ( name string ) string { if ! strings . HasSuffix ( name , suffix ) { return name + suffix } return name } } \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u751f\u6210\u5982\u4e0b\u51fd\u6570\uff1a addBmp := MakeAddSuffix ( \".bmp\" ) addJpeg := MakeAddSuffix ( \".jpeg\" ) \u7136\u540e\u8c03\u7528\u5b83\u4eec\uff1a addBmp ( \"file\" ) // returns: file.bmp addJpeg ( \"file\" ) // returns: file.jpeg \u53ef\u4ee5\u8fd4\u56de\u5176\u5b83\u51fd\u6570\u7684\u51fd\u6570\u548c\u63a5\u53d7\u5176\u5b83\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u7684\u51fd\u6570\u5747\u88ab\u79f0\u4e4b\u4e3a\u9ad8\u9636\u51fd\u6570\uff0c\u662f\u51fd\u6570\u5f0f\u8bed\u8a00\u7684\u7279\u70b9\u3002\u6211\u4eec\u5df2\u7ecf\u5728 \u7b2c 6.7 \u8282 \u4e2d\u5f97\u77e5\u51fd\u6570\u4e5f\u662f\u4e00\u79cd\u503c\uff0c\u56e0\u6b64\u5f88\u663e\u7136 Go \u8bed\u8a00\u5177\u6709\u4e00\u4e9b\u51fd\u6570\u5f0f\u8bed\u8a00\u7684\u7279\u6027\u3002\u95ed\u5305\u5728 Go \u8bed\u8a00\u4e2d\u975e\u5e38\u5e38\u89c1\uff0c\u5e38\u7528\u4e8e goroutine \u548c\u7ba1\u9053\u64cd\u4f5c\uff08\u8be6\u89c1\u7b2c 14.8 - 14.9 \u8282\uff09\u3002\u5728 \u7b2c 11.14 \u8282 \u7684\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u5c06\u4f1a\u770b\u5230 Go \u8bed\u8a00\u4e2d\u7684\u51fd\u6570\u5728\u5904\u7406\u6df7\u5408\u5bf9\u8c61\u65f6\u7684\u5f3a\u5927\u80fd\u529b\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u95ed\u5305 \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528\u95ed\u5305\u8c03\u8bd5","title":"6.9 \u5e94\u7528\u95ed\u5305 \u5c06\u51fd\u6570\u4f5c\u4e3a\u8fd4\u56de\u503c"},{"location":"06.9/#69","text":"\u5728\u7a0b\u5e8f function_return.go \u4e2d\u6211\u4eec\u5c06\u4f1a\u770b\u5230\u51fd\u6570 Add2() \u548c Adder() \u5747\u4f1a\u8fd4\u56de\u7b7e\u540d\u4e3a func(b int) int \u7684\u51fd\u6570\uff1a func Add2 () ( func ( b int ) int ) func Adder ( a int ) ( func ( b int ) int ) \u51fd\u6570 Add2() \u4e0d\u63a5\u53d7\u4efb\u4f55\u53c2\u6570\uff0c\u4f46\u51fd\u6570 Adder() \u63a5\u53d7\u4e00\u4e2a int \u7c7b\u578b\u7684\u6574\u6570\u4f5c\u4e3a\u53c2\u6570\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06 Adder() \u8fd4\u56de\u7684\u51fd\u6570\u5b58\u5230\u53d8\u91cf\u4e2d ( function_return.go )\u3002 package main import \"fmt\" func main () { // make an Add2 function, give it a name p2, and call it: p2 := Add2 () fmt . Printf ( \"Call Add2 for 3 gives: %v\\n\" , p2 ( 3 )) // make a special Adder function, a gets value 2: TwoAdder := Adder ( 2 ) fmt . Printf ( \"The result is: %v\\n\" , TwoAdder ( 3 )) } func Add2 () func ( b int ) int { return func ( b int ) int { return b + 2 } } func Adder ( a int ) func ( b int ) int { return func ( b int ) int { return a + b } } \u8f93\u51fa\uff1a Call Add2 for 3 gives: 5 The result is: 5 \u4e0b\u4f8b\u4e3a\u4e00\u4e2a\u7565\u5fae\u4e0d\u540c\u7684\u5b9e\u73b0 ( function_closure.go )\uff1a package main import \"fmt\" func main () { var f = Adder () fmt . Print ( f ( 1 ), \" - \" ) fmt . Print ( f ( 20 ), \" - \" ) fmt . Print ( f ( 300 )) } func Adder () func ( int ) int { var x int return func ( delta int ) int { x += delta return x } } \u51fd\u6570 Adder() \u73b0\u5728\u88ab\u8d4b\u503c\u5230\u53d8\u91cf f \u4e2d\uff08\u7c7b\u578b\u4e3a func(int) int \uff09\u3002 \u8f93\u51fa\uff1a 1 - 21 - 321 \u4e09\u6b21\u8c03\u7528\u51fd\u6570 f \u7684\u8fc7\u7a0b\u4e2d\u51fd\u6570 Adder() \u4e2d\u53d8\u91cf delta \u7684\u503c\u5206\u522b\u4e3a\uff1a1\u300120 \u548c 300\u3002 \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5728\u591a\u6b21\u8c03\u7528\u4e2d\uff0c\u53d8\u91cf x \u7684\u503c\u662f\u88ab\u4fdd\u7559\u7684\uff0c\u5373 0 + 1 = 1 \uff0c\u7136\u540e 1 + 20 = 21 \uff0c\u6700\u540e 21 + 300 = 321 \uff1a\u95ed\u5305\u51fd\u6570\u4fdd\u5b58\u5e76\u79ef\u7d2f\u5176\u4e2d\u7684\u53d8\u91cf\u7684\u503c\uff0c\u4e0d\u7ba1\u5916\u90e8\u51fd\u6570\u9000\u51fa\u4e0e\u5426\uff0c\u5b83\u90fd\u80fd\u591f\u7ee7\u7eed\u64cd\u4f5c\u5916\u90e8\u51fd\u6570\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\u3002 \u8fd9\u4e9b\u5c40\u90e8\u53d8\u91cf\u540c\u6837\u53ef\u4ee5\u662f\u53c2\u6570\uff0c\u4f8b\u5982\u4e4b\u524d\u4f8b\u5b50\u4e2d\u7684 Adder(as int) \u3002 \u8fd9\u4e9b\u4f8b\u5b50\u6e05\u695a\u5730\u5c55\u793a\u4e86\u5982\u4f55\u5728 Go \u8bed\u8a00\u4e2d\u4f7f\u7528\u95ed\u5305\u3002 \u5728\u95ed\u5305\u4e2d\u4f7f\u7528\u5230\u7684\u53d8\u91cf\u53ef\u4ee5\u662f\u5728\u95ed\u5305\u51fd\u6570\u4f53\u5185\u58f0\u660e\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u5728\u5916\u90e8\u51fd\u6570\u58f0\u660e\u7684\uff1a var g int go func ( i int ) { s := 0 for j := 0 ; j < i ; j ++ { s += j } g = s }( 1000 ) // Passes argument 1000 to the function literal. \u8fd9\u6837\u95ed\u5305\u51fd\u6570\u5c31\u80fd\u591f\u88ab\u5e94\u7528\u5230\u6574\u4e2a\u96c6\u5408\u7684\u5143\u7d20\u4e0a\uff0c\u5e76\u4fee\u6539\u5b83\u4eec\u7684\u503c\u3002\u7136\u540e\u8fd9\u4e9b\u53d8\u91cf\u5c31\u53ef\u4ee5\u7528\u4e8e\u8868\u793a\u6216\u8ba1\u7b97\u5168\u5c40\u6216\u5e73\u5747\u503c\u3002 \u7ec3\u4e60 6.9 fibonacci_closure \u4e0d\u4f7f\u7528\u9012\u5f52\u4f46\u4f7f\u7528\u95ed\u5305\u6539\u5199\u7b2c 6.6 \u8282\u4e2d\u7684\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7a0b\u5e8f\u3002 \u7ec3\u4e60 6.10 \u5b66\u4e60\u5e76\u7406\u89e3\u4ee5\u4e0b\u7a0b\u5e8f\u7684\u5de5\u4f5c\u539f\u7406\uff1a \u4e00\u4e2a\u8fd4\u56de\u503c\u4e3a\u53e6\u4e00\u4e2a\u51fd\u6570\u7684\u51fd\u6570\u53ef\u4ee5\u88ab\u79f0\u4e4b\u4e3a\u5de5\u5382\u51fd\u6570\uff0c\u8fd9\u5728\u60a8\u9700\u8981\u521b\u5efa\u4e00\u7cfb\u5217\u76f8\u4f3c\u7684\u51fd\u6570\u7684\u65f6\u5019\u975e\u5e38\u6709\u7528\uff1a\u4e66\u5199\u4e00\u4e2a\u5de5\u5382\u51fd\u6570\u800c\u4e0d\u662f\u9488\u5bf9\u6bcf\u79cd\u60c5\u51b5\u90fd\u4e66\u5199\u4e00\u4e2a\u51fd\u6570\u3002\u4e0b\u9762\u7684\u51fd\u6570\u6f14\u793a\u4e86\u5982\u4f55\u52a8\u6001\u8fd4\u56de\u8ffd\u52a0\u540e\u7f00\u7684\u51fd\u6570\uff1a func MakeAddSuffix ( suffix string ) func ( string ) string { return func ( name string ) string { if ! strings . HasSuffix ( name , suffix ) { return name + suffix } return name } } \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u751f\u6210\u5982\u4e0b\u51fd\u6570\uff1a addBmp := MakeAddSuffix ( \".bmp\" ) addJpeg := MakeAddSuffix ( \".jpeg\" ) \u7136\u540e\u8c03\u7528\u5b83\u4eec\uff1a addBmp ( \"file\" ) // returns: file.bmp addJpeg ( \"file\" ) // returns: file.jpeg \u53ef\u4ee5\u8fd4\u56de\u5176\u5b83\u51fd\u6570\u7684\u51fd\u6570\u548c\u63a5\u53d7\u5176\u5b83\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u7684\u51fd\u6570\u5747\u88ab\u79f0\u4e4b\u4e3a\u9ad8\u9636\u51fd\u6570\uff0c\u662f\u51fd\u6570\u5f0f\u8bed\u8a00\u7684\u7279\u70b9\u3002\u6211\u4eec\u5df2\u7ecf\u5728 \u7b2c 6.7 \u8282 \u4e2d\u5f97\u77e5\u51fd\u6570\u4e5f\u662f\u4e00\u79cd\u503c\uff0c\u56e0\u6b64\u5f88\u663e\u7136 Go \u8bed\u8a00\u5177\u6709\u4e00\u4e9b\u51fd\u6570\u5f0f\u8bed\u8a00\u7684\u7279\u6027\u3002\u95ed\u5305\u5728 Go \u8bed\u8a00\u4e2d\u975e\u5e38\u5e38\u89c1\uff0c\u5e38\u7528\u4e8e goroutine \u548c\u7ba1\u9053\u64cd\u4f5c\uff08\u8be6\u89c1\u7b2c 14.8 - 14.9 \u8282\uff09\u3002\u5728 \u7b2c 11.14 \u8282 \u7684\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u5c06\u4f1a\u770b\u5230 Go \u8bed\u8a00\u4e2d\u7684\u51fd\u6570\u5728\u5904\u7406\u6df7\u5408\u5bf9\u8c61\u65f6\u7684\u5f3a\u5927\u80fd\u529b\u3002","title":"6.9 \u5e94\u7528\u95ed\u5305\uff1a\u5c06\u51fd\u6570\u4f5c\u4e3a\u8fd4\u56de\u503c"},{"location":"06.9/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u95ed\u5305 \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528\u95ed\u5305\u8c03\u8bd5","title":"\u94fe\u63a5"},{"location":"07.0/","text":"7.0 \u6570\u7ec4\u4e0e\u5207\u7247 \u00b6 \u8fd9\u7ae0\u6211\u4eec\u5f00\u59cb\u5256\u6790 \u96c6\u5408 \uff0c\u5b83\u662f\u53ef\u4ee5\u5305\u542b\u5927\u91cf\u6761\u76ee (item) \u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f8b\u5982\u6570\u7ec4\u3001\u5207\u7247\u548c map \u3002\u4ece\u8fd9\u770b\u5230 Go \u660e\u663e\u53d7\u5230 Python \u7684\u5f71\u54cd\u3002 \u4ee5 [] \u7b26\u53f7\u6807\u8bc6\u7684\u6570\u7ec4\u7c7b\u578b\u51e0\u4e4e\u5728\u6240\u6709\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\u90fd\u662f\u4e00\u4e2a\u57fa\u672c\u4e3b\u529b\u3002Go \u8bed\u8a00\u4e2d\u7684\u6570\u7ec4\u4e5f\u662f\u7c7b\u4f3c\u7684\uff0c\u53ea\u662f\u6709\u4e00\u4e9b\u7279\u70b9\u3002Go \u6ca1\u6709 C \u90a3\u4e48\u7075\u6d3b\uff0c\u4f46\u662f\u62e5\u6709\u5207\u7247 (slice) \u7c7b\u578b\u3002\u8fd9\u662f\u4e00\u79cd\u5efa\u7acb\u5728 Go \u8bed\u8a00\u6570\u7ec4\u7c7b\u578b\u4e4b\u4e0a\u7684\u62bd\u8c61\uff0c\u8981\u60f3\u7406\u89e3\u5207\u7247\u6211\u4eec\u5fc5\u987b\u5148\u7406\u89e3\u6570\u7ec4\u3002\u6570\u7ec4\u6709\u7279\u5b9a\u7684\u7528\u5904\uff0c\u4f46\u662f\u5374\u6709\u4e00\u4e9b\u5446\u677f\uff0c\u6240\u4ee5\u5728 Go \u8bed\u8a00\u7684\u4ee3\u7801\u91cc\u5e76\u4e0d\u662f\u7279\u522b\u5e38\u89c1\u3002\u76f8\u5bf9\u7684\uff0c\u5207\u7247\u786e\u5b9e\u968f\u5904\u53ef\u89c1\u7684\u3002\u5b83\u4eec\u6784\u5efa\u5728\u6570\u7ec4\u4e4b\u4e0a\u5e76\u4e14\u63d0\u4f9b\u66f4\u5f3a\u5927\u7684\u80fd\u529b\u548c\u4fbf\u6377\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u901a\u8fc7\u5185\u5b58\u7f13\u5b58\u6765\u63d0\u5347\u6027\u80fd \u4e0b\u4e00\u8282\uff1a \u58f0\u660e\u548c\u521d\u59cb\u5316","title":"7.0 \u6570\u7ec4\u4e0e\u5207\u7247"},{"location":"07.0/#70","text":"\u8fd9\u7ae0\u6211\u4eec\u5f00\u59cb\u5256\u6790 \u96c6\u5408 \uff0c\u5b83\u662f\u53ef\u4ee5\u5305\u542b\u5927\u91cf\u6761\u76ee (item) \u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f8b\u5982\u6570\u7ec4\u3001\u5207\u7247\u548c map \u3002\u4ece\u8fd9\u770b\u5230 Go \u660e\u663e\u53d7\u5230 Python \u7684\u5f71\u54cd\u3002 \u4ee5 [] \u7b26\u53f7\u6807\u8bc6\u7684\u6570\u7ec4\u7c7b\u578b\u51e0\u4e4e\u5728\u6240\u6709\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\u90fd\u662f\u4e00\u4e2a\u57fa\u672c\u4e3b\u529b\u3002Go \u8bed\u8a00\u4e2d\u7684\u6570\u7ec4\u4e5f\u662f\u7c7b\u4f3c\u7684\uff0c\u53ea\u662f\u6709\u4e00\u4e9b\u7279\u70b9\u3002Go \u6ca1\u6709 C \u90a3\u4e48\u7075\u6d3b\uff0c\u4f46\u662f\u62e5\u6709\u5207\u7247 (slice) \u7c7b\u578b\u3002\u8fd9\u662f\u4e00\u79cd\u5efa\u7acb\u5728 Go \u8bed\u8a00\u6570\u7ec4\u7c7b\u578b\u4e4b\u4e0a\u7684\u62bd\u8c61\uff0c\u8981\u60f3\u7406\u89e3\u5207\u7247\u6211\u4eec\u5fc5\u987b\u5148\u7406\u89e3\u6570\u7ec4\u3002\u6570\u7ec4\u6709\u7279\u5b9a\u7684\u7528\u5904\uff0c\u4f46\u662f\u5374\u6709\u4e00\u4e9b\u5446\u677f\uff0c\u6240\u4ee5\u5728 Go \u8bed\u8a00\u7684\u4ee3\u7801\u91cc\u5e76\u4e0d\u662f\u7279\u522b\u5e38\u89c1\u3002\u76f8\u5bf9\u7684\uff0c\u5207\u7247\u786e\u5b9e\u968f\u5904\u53ef\u89c1\u7684\u3002\u5b83\u4eec\u6784\u5efa\u5728\u6570\u7ec4\u4e4b\u4e0a\u5e76\u4e14\u63d0\u4f9b\u66f4\u5f3a\u5927\u7684\u80fd\u529b\u548c\u4fbf\u6377\u3002","title":"7.0 \u6570\u7ec4\u4e0e\u5207\u7247"},{"location":"07.0/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u901a\u8fc7\u5185\u5b58\u7f13\u5b58\u6765\u63d0\u5347\u6027\u80fd \u4e0b\u4e00\u8282\uff1a \u58f0\u660e\u548c\u521d\u59cb\u5316","title":"\u94fe\u63a5"},{"location":"07.1/","text":"7.1 \u58f0\u660e\u548c\u521d\u59cb\u5316 \u00b6 7.1.1 \u6982\u5ff5 \u00b6 \u6570\u7ec4\u662f\u5177\u6709\u76f8\u540c \u552f\u4e00\u7c7b\u578b \u7684\u4e00\u7ec4\u5df2\u7f16\u53f7\u4e14\u957f\u5ea6\u56fa\u5b9a\u7684\u6570\u636e\u9879\u5e8f\u5217\uff08\u8fd9\u662f\u4e00\u79cd\u540c\u6784\u7684\u6570\u636e\u7ed3\u6784\uff09\uff1b\u8fd9\u79cd\u7c7b\u578b\u53ef\u4ee5\u662f\u4efb\u610f\u7684\u539f\u59cb\u7c7b\u578b\u4f8b\u5982\u6574\u578b\u3001\u5b57\u7b26\u4e32\u6216\u8005\u81ea\u5b9a\u4e49\u7c7b\u578b\u3002\u6570\u7ec4\u957f\u5ea6\u5fc5\u987b\u662f\u4e00\u4e2a\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u5e76\u4e14\u5fc5\u987b\u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u6570\u7ec4\u957f\u5ea6\u4e5f\u662f\u6570\u7ec4\u7c7b\u578b\u7684\u4e00\u90e8\u5206\uff0c\u6240\u4ee5 [5]int \u548c [10]int \u662f\u5c5e\u4e8e\u4e0d\u540c\u7c7b\u578b\u7684\u3002\u6570\u7ec4\u7684\u7f16\u8bd1\u65f6\u503c\u521d\u59cb\u5316\u662f\u6309\u7167\u6570\u7ec4\u987a\u5e8f\u5b8c\u6210\u7684\uff08\u5982\u4e0b\uff09\u3002 \u6ce8\u610f\u4e8b\u9879 \u5982\u679c\u6211\u4eec\u60f3\u8ba9\u6570\u7ec4\u5143\u7d20\u7c7b\u578b\u4e3a\u4efb\u610f\u7c7b\u578b\u7684\u8bdd\u53ef\u4ee5\u4f7f\u7528\u7a7a\u63a5\u53e3\u4f5c\u4e3a\u7c7b\u578b\uff08\u53c2\u8003 \u7b2c 11 \u7ae0 \uff09\u3002\u5f53\u4f7f\u7528\u503c\u65f6\u6211\u4eec\u5fc5\u987b\u5148\u505a\u4e00\u4e2a\u7c7b\u578b\u5224\u65ad\uff08\u53c2\u8003 \u7b2c 11 \u7ae0 \uff09\u3002 \u6570\u7ec4\u5143\u7d20\u53ef\u4ee5\u901a\u8fc7 \u7d22\u5f15 \uff08\u4f4d\u7f6e\uff09\u6765\u8bfb\u53d6\uff08\u6216\u8005\u4fee\u6539\uff09\uff0c\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u7d22\u5f15\u4e3a 0 \uff0c\u7b2c\u4e8c\u4e2a\u7d22\u5f15\u4e3a 1 \uff0c\u4ee5\u6b64\u7c7b\u63a8\uff08\u6570\u7ec4\u4ee5 0 \u5f00\u59cb\u5728\u6240\u6709\u7c7b C \u8bed\u8a00\u4e2d\u662f\u76f8\u4f3c\u7684\uff09\u3002\u5143\u7d20\u7684\u6570\u76ee\uff08\u4e5f\u79f0\u4e3a\u957f\u5ea6\u6216\u8005\u6570\u7ec4\u5927\u5c0f\uff09\u5fc5\u987b\u662f\u56fa\u5b9a\u7684\u5e76\u4e14\u5728\u58f0\u660e\u8be5\u6570\u7ec4\u65f6\u5c31\u7ed9\u51fa\uff08\u7f16\u8bd1\u65f6\u9700\u8981\u77e5\u9053\u6570\u7ec4\u957f\u5ea6\u4ee5\u4fbf\u5206\u914d\u5185\u5b58\uff09\uff1b\u6570\u7ec4\u957f\u5ea6\u6700\u5927\u4e3a 2GB\u3002 \u58f0\u660e\u7684\u683c\u5f0f\u662f\uff1a var identifier [ len ] type \u4f8b\u5982\uff1a var arr1 [ 5 ] int \u5728\u5185\u5b58\u4e2d\u7684\u7ed3\u6784\u662f\uff1a \u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u6574\u578b\u503c\uff0c\u5f53\u58f0\u660e\u6570\u7ec4\u65f6\u6240\u6709\u7684\u5143\u7d20\u90fd\u4f1a\u88ab\u81ea\u52a8\u521d\u59cb\u5316\u4e3a\u9ed8\u8ba4\u503c 0\u3002 arr1 \u7684\u957f\u5ea6\u662f 5\uff0c\u7d22\u5f15\u8303\u56f4\u4ece 0 \u5230 len(arr1)-1 \u3002 \u7b2c\u4e00\u4e2a\u5143\u7d20\u662f arr1[0] \uff0c\u7b2c\u4e09\u4e2a\u5143\u7d20\u662f arr1[2] \uff1b\u603b\u4f53\u6765\u8bf4\u7d22\u5f15 i \u4ee3\u8868\u7684\u5143\u7d20\u662f arr1[i] \uff0c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u662f arr1[len(arr1)-1] \u3002 \u5bf9\u7d22\u5f15\u9879\u4e3a i \u7684\u6570\u7ec4\u5143\u7d20\u8d4b\u503c\u53ef\u4ee5\u8fd9\u4e48\u64cd\u4f5c\uff1a arr[i] = value \uff0c\u6240\u4ee5\u6570\u7ec4\u662f \u53ef\u53d8\u7684 \u3002 \u53ea\u6709\u6709\u6548\u7684\u7d22\u5f15\u53ef\u4ee5\u88ab\u4f7f\u7528\uff0c\u5f53\u4f7f\u7528\u7b49\u4e8e\u6216\u8005\u5927\u4e8e len(arr1) \u7684\u7d22\u5f15\u65f6\uff1a\u5982\u679c\u7f16\u8bd1\u5668\u53ef\u4ee5\u68c0\u6d4b\u5230\uff0c\u4f1a\u7ed9\u51fa\u7d22\u5f15\u8d85\u9650\u7684\u63d0\u793a\u4fe1\u606f\uff1b\u5982\u679c\u68c0\u6d4b\u4e0d\u5230\u7684\u8bdd\u7f16\u8bd1\u4f1a\u901a\u8fc7\u800c\u8fd0\u884c\u65f6\u4f1a panic() :\uff08\u53c2\u8003 \u7b2c 13 \u7ae0 \uff09 runtime error: index out of range \u7531\u4e8e\u7d22\u5f15\u7684\u5b58\u5728\uff0c\u904d\u5386\u6570\u7ec4\u7684\u65b9\u6cd5\u81ea\u7136\u5c31\u662f\u4f7f\u7528 for \u7ed3\u6784\uff1a \u901a\u8fc7 for \u521d\u59cb\u5316\u6570\u7ec4\u9879 \u901a\u8fc7 for \u6253\u5370\u6570\u7ec4\u5143\u7d20 \u901a\u8fc7 for \u4f9d\u6b21\u5904\u7406\u5143\u7d20 \u793a\u4f8b 7.1 for_arrays.go package main import \"fmt\" func main () { var arr1 [ 5 ] int for i := 0 ; i < len ( arr1 ); i ++ { arr1 [ i ] = i * 2 } for i := 0 ; i < len ( arr1 ); i ++ { fmt . Printf ( \"Array at index %d is %d\\n\" , i , arr1 [ i ]) } } \u8f93\u51fa\u7ed3\u679c\uff1a Array at index 0 is 0 Array at index 1 is 2 Array at index 2 is 4 Array at index 3 is 6 Array at index 4 is 8 for \u5faa\u73af\u4e2d\u7684\u6761\u4ef6\u975e\u5e38\u91cd\u8981\uff1a i < len(arr1) \uff0c\u5982\u679c\u5199\u6210 i <= len(arr1) \u7684\u8bdd\u4f1a\u4ea7\u751f\u8d8a\u754c\u9519\u8bef\u3002 IDIOM: for i := 0 ; i < len ( arr1 ); i ++ \uff5b arr1 [ i ] = ... } \u4e5f\u53ef\u4ee5\u4f7f\u7528 for-range \u7684\u751f\u6210\u65b9\u5f0f\uff1a IDIOM: for i , _ := range arr1 { ... } \u5728\u8fd9\u91cc i \u4e5f\u662f\u6570\u7ec4\u7684\u7d22\u5f15\u3002\u5f53\u7136\u8fd9\u4e24\u79cd for \u7ed3\u6784\u5bf9\u4e8e\u5207\u7247\uff08 slices \uff09\uff08\u53c2\u8003 \u7b2c 7 \u7ae0 \uff09\u6765\u8bf4\u4e5f\u540c\u6837\u9002\u7528\u3002 \u95ee\u9898 7.1 \u4e0b\u9762\u4ee3\u7801\u6bb5\u7684\u8f93\u51fa\u662f\u4ec0\u4e48\uff1f a := [ ... ] string { \"a\" , \"b\" , \"c\" , \"d\" } for i := range a { fmt . Println ( \"Array item\" , i , \"is\" , a [ i ]) } Go \u8bed\u8a00\u4e2d\u7684\u6570\u7ec4\u662f\u4e00\u79cd \u503c\u7c7b\u578b \uff08\u4e0d\u50cf C/C++ \u4e2d\u662f\u6307\u5411\u9996\u5143\u7d20\u7684\u6307\u9488\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7 new() \u6765\u521b\u5efa\uff1a var arr1 = new([5]int) \u3002 \u90a3\u4e48\u8fd9\u79cd\u65b9\u5f0f\u548c var arr2 [5]int \u7684\u533a\u522b\u662f\u4ec0\u4e48\u5462\uff1f arr1 \u7684\u7c7b\u578b\u662f *[5]int \uff0c\u800c arr2 \u7684\u7c7b\u578b\u662f [5]int \u3002 \u8fd9\u6837\u7684\u7ed3\u679c\u5c31\u662f\u5f53\u628a\u4e00\u4e2a\u6570\u7ec4\u8d4b\u503c\u7ed9\u53e6\u4e00\u4e2a\u65f6\uff0c\u9700\u8981\u518d\u505a\u4e00\u6b21\u6570\u7ec4\u5185\u5b58\u7684\u62f7\u8d1d\u64cd\u4f5c\u3002\u4f8b\u5982\uff1a arr2 := * arr1 arr2 [ 2 ] = 100 \u8fd9\u6837\u4e24\u4e2a\u6570\u7ec4\u5c31\u6709\u4e86\u4e0d\u540c\u7684\u503c\uff0c\u5728\u8d4b\u503c\u540e\u4fee\u6539 arr2 \u4e0d\u4f1a\u5bf9 arr1 \u751f\u6548\u3002 \u6240\u4ee5\u5728\u51fd\u6570\u4e2d\u6570\u7ec4\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u65f6\uff0c\u5982 func1(arr2) \uff0c\u4f1a\u4ea7\u751f\u4e00\u6b21\u6570\u7ec4\u62f7\u8d1d\uff0c func1() \u65b9\u6cd5\u4e0d\u4f1a\u4fee\u6539\u539f\u59cb\u7684\u6570\u7ec4 arr2 \u3002 \u5982\u679c\u4f60\u60f3\u4fee\u6539\u539f\u6570\u7ec4\uff0c\u90a3\u4e48 arr2 \u5fc5\u987b\u901a\u8fc7 & \u64cd\u4f5c\u7b26\u4ee5\u5f15\u7528\u65b9\u5f0f\u4f20\u8fc7\u6765\uff0c\u4f8b\u5982 func1(&arr2) \uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a \u793a\u4f8b 7.2 pointer_array.go : package main import \"fmt\" func f ( a [ 3 ] int ) { fmt . Println ( a ) } func fp ( a * [ 3 ] int ) { fmt . Println ( a ) } func main () { var ar [ 3 ] int f ( ar ) // passes a copy of ar fp ( & ar ) // passes a pointer to ar } \u8f93\u51fa\u7ed3\u679c\uff1a [0 0 0] &[0 0 0] \u53e6\u4e00\u79cd\u65b9\u6cd5\u5c31\u662f\u751f\u6210\u6570\u7ec4\u5207\u7247\u5e76\u5c06\u5176\u4f20\u9012\u7ed9\u51fd\u6570\uff08\u8be6\u89c1 \u7b2c 7.1.4 \u8282 \uff09\u3002 \u7ec3\u4e60 \u7ec3\u4e607.1\uff1a array_value.go : \u8bc1\u660e\u5f53\u6570\u7ec4\u8d4b\u503c\u65f6\uff0c\u53d1\u751f\u4e86\u6570\u7ec4\u5185\u5b58\u62f7\u8d1d\u3002 \u7ec3\u4e607.2\uff1a for_array.go : \u5199\u4e00\u4e2a\u5faa\u73af\u5e76\u7528\u4e0b\u6807\u7ed9\u6570\u7ec4\u8d4b\u503c\uff08\u4ece 0 \u5230 15\uff09\u5e76\u4e14\u5c06\u6570\u7ec4\u6253\u5370\u5728\u5c4f\u5e55\u4e0a\u3002 \u7ec3\u4e607.3\uff1a fibonacci_array.go : \u5728 \u7b2c 6.6 \u8282 \u6211\u4eec\u770b\u5230\u4e86\u4e00\u4e2a\u9012\u5f52\u8ba1\u7b97 Fibonacci \u6570\u503c\u7684\u65b9\u6cd5\u3002\u4f46\u662f\u901a\u8fc7\u6570\u7ec4\u6211\u4eec\u53ef\u4ee5\u66f4\u5feb\u7684\u8ba1\u7b97\u51fa Fibonacci \u6570\u3002\u5b8c\u6210\u8be5\u65b9\u6cd5\u5e76\u6253\u5370\u51fa\u524d 50 \u4e2a Fibonacci \u6570\u5b57\u3002 7.1.2 \u6570\u7ec4\u5e38\u91cf \u00b6 \u5982\u679c\u6570\u7ec4\u503c\u5df2\u7ecf\u63d0\u524d\u77e5\u9053\u4e86\uff0c\u90a3\u4e48\u53ef\u4ee5\u901a\u8fc7 \u6570\u7ec4\u5e38\u91cf \u7684\u65b9\u6cd5\u6765\u521d\u59cb\u5316\u6570\u7ec4\uff0c\u800c\u4e0d\u7528\u4f9d\u6b21\u4f7f\u7528 []= \u65b9\u6cd5\uff08\u6240\u6709\u7684\u7ec4\u6210\u5143\u7d20\u90fd\u6709\u76f8\u540c\u7684\u5e38\u91cf\u8bed\u6cd5\uff09\u3002 \u793a\u4f8b 7.3 array_literals.go package main import \"fmt\" func main () { // var arrAge = [5]int{18, 20, 15, 22, 16} // var arrLazy = [...]int{5, 6, 7, 8, 22} // var arrLazy = []int{5, 6, 7, 8, 22} //\u6ce8\uff1a\u521d\u59cb\u5316\u5f97\u5230\u7684\u5b9e\u9645\u4e0a\u662f\u5207\u7247slice var arrKeyValue = [ 5 ] string { 3 : \"Chris\" , 4 : \"Ron\" } // var arrKeyValue = []string{3: \"Chris\", 4: \"Ron\"} //\u6ce8\uff1a\u521d\u59cb\u5316\u5f97\u5230\u7684\u5b9e\u9645\u4e0a\u662f\u5207\u7247slice for i := 0 ; i < len ( arrKeyValue ); i ++ { fmt . Printf ( \"Person at %d is %s\\n\" , i , arrKeyValue [ i ]) } } \u7b2c\u4e00\u79cd\u53d8\u5316\uff1a var arrAge = [ 5 ] int { 18 , 20 , 15 , 22 , 16 } \u6ce8\u610f [5]int \u53ef\u4ee5\u4ece\u5de6\u8fb9\u8d77\u5f00\u59cb\u5ffd\u7565\uff1a [10]int {1, 2, 3} :\u8fd9\u662f\u4e00\u4e2a\u6709 10 \u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u9664\u4e86\u524d\u4e09\u4e2a\u5143\u7d20\u5916\u5176\u4ed6\u5143\u7d20\u90fd\u4e3a 0 \u3002 \u7b2c\u4e8c\u79cd\u53d8\u5316\uff1a var arrLazy = [ ... ] int { 5 , 6 , 7 , 8 , 22 } ... \u540c\u6837\u53ef\u4ee5\u5ffd\u7565\uff0c\u4ece\u6280\u672f\u4e0a\u8bf4\u5b83\u4eec\u5176\u5b9e\u53d8\u6210\u4e86\u5207\u7247\u3002 \u7b2c\u4e09\u79cd\u53d8\u5316\uff1a key: value \u8bed\u6cd5 var arrKeyValue = [ 5 ] string { 3 : \"Chris\" , 4 : \"Ron\" } \u53ea\u6709\u7d22\u5f15 3 \u548c 4 \u88ab\u8d4b\u4e88\u5b9e\u9645\u7684\u503c\uff0c\u5176\u4ed6\u5143\u7d20\u90fd\u88ab\u8bbe\u7f6e\u4e3a\u7a7a\u7684\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a Person at 0 is Person at 1 is Person at 2 is Person at 3 is Chris Person at 4 is Ron \u5728\u8fd9\u91cc\u6570\u7ec4\u957f\u5ea6\u540c\u6837\u53ef\u4ee5\u5199\u6210 ... \u3002 \u4f60\u53ef\u4ee5\u53d6\u4efb\u610f\u6570\u7ec4\u5e38\u91cf\u7684\u5730\u5740\u6765\u4f5c\u4e3a\u6307\u5411\u65b0\u5b9e\u4f8b\u7684\u6307\u9488\u3002 \u793a\u4f8b 7.4 pointer_array2.go package main import \"fmt\" func fp ( a * [ 3 ] int ) { fmt . Println ( a ) } func main () { for i := 0 ; i < 3 ; i ++ { fp ( & [ 3 ] int { i , i * i , i * i * i }) } } \u8f93\u51fa\u7ed3\u679c\uff1a &[0 0 0] &[1 1 1] &[2 4 8] \u51e0\u4f55\u70b9\uff08\u6216\u8005\u6570\u5b66\u5411\u91cf\uff09\u662f\u4e00\u4e2a\u4f7f\u7528\u6570\u7ec4\u7684\u7ecf\u5178\u4f8b\u5b50\u3002\u4e3a\u4e86\u7b80\u5316\u4ee3\u7801\u901a\u5e38\u4f7f\u7528\u4e00\u4e2a\u522b\u540d\uff1a type Vector3D [ 3 ] float32 var vec Vector3D 7.1.3 \u591a\u7ef4\u6570\u7ec4 \u00b6 \u6570\u7ec4\u901a\u5e38\u662f\u4e00\u7ef4\u7684\uff0c\u4f46\u662f\u53ef\u4ee5\u7528\u6765\u7ec4\u88c5\u6210\u591a\u7ef4\u6570\u7ec4\uff0c\u4f8b\u5982\uff1a [3][5]int \uff0c [2][2][2]float64 \u3002 \u5185\u90e8\u6570\u7ec4\u603b\u662f\u957f\u5ea6\u76f8\u540c\u7684\u3002Go \u8bed\u8a00\u7684\u591a\u7ef4\u6570\u7ec4\u662f\u77e9\u5f62\u5f0f\u7684\uff08\u552f\u4e00\u7684\u4f8b\u5916\u662f\u5207\u7247\u7684\u6570\u7ec4\uff0c\u53c2\u89c1 \u7b2c 7.2.5 \u8282 \u3002 \u793a\u4f8b 7.5 multidim_array.go package main const ( WIDTH = 1920 HEIGHT = 1080 ) type pixel int var screen [ WIDTH ][ HEIGHT ] pixel func main () { for y := 0 ; y < HEIGHT ; y ++ { for x := 0 ; x < WIDTH ; x ++ { screen [ x ][ y ] = 0 } } } 7.1.4 \u5c06\u6570\u7ec4\u4f20\u9012\u7ed9\u51fd\u6570 \u00b6 \u628a\u4e00\u4e2a\u5927\u6570\u7ec4\u4f20\u9012\u7ed9\u51fd\u6570\u4f1a\u6d88\u8017\u5f88\u591a\u5185\u5b58\u3002\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff1a \u4f20\u9012\u6570\u7ec4\u7684\u6307\u9488 \u4f7f\u7528\u6570\u7ec4\u7684\u5207\u7247 \u63a5\u4e0b\u6765\u7684\u4f8b\u5b50\u9610\u660e\u4e86\u7b2c\u4e00\u79cd\u65b9\u6cd5\uff1a \u793a\u4f8b 7.6 array_sum.go package main import \"fmt\" func main () { array := [ 3 ] float64 { 7.0 , 8.5 , 9.1 } x := Sum ( & array ) // Note the explicit address-of operator // to pass a pointer to the array fmt . Printf ( \"The sum of the array is: %f\" , x ) } func Sum ( a * [ 3 ] float64 ) ( sum float64 ) { for _ , v := range a { // derefencing *a to get back to the array is not necessary! sum += v } return } \u8f93\u51fa\u7ed3\u679c\uff1a The sum of the array is: 24.600000 \u4f46\u8fd9\u5728 Go \u4e2d\u5e76\u4e0d\u5e38\u7528\uff0c\u901a\u5e38\u4f7f\u7528\u5207\u7247\uff08\u53c2\u8003 \u7b2c 7.2 \u8282 \uff09\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6570\u7ec4\u4e0e\u5207\u7247 \u4e0b\u4e00\u8282\uff1a \u5207\u7247","title":"7.1 \u58f0\u660e\u548c\u521d\u59cb\u5316"},{"location":"07.1/#71","text":"","title":"7.1 \u58f0\u660e\u548c\u521d\u59cb\u5316"},{"location":"07.1/#711","text":"\u6570\u7ec4\u662f\u5177\u6709\u76f8\u540c \u552f\u4e00\u7c7b\u578b \u7684\u4e00\u7ec4\u5df2\u7f16\u53f7\u4e14\u957f\u5ea6\u56fa\u5b9a\u7684\u6570\u636e\u9879\u5e8f\u5217\uff08\u8fd9\u662f\u4e00\u79cd\u540c\u6784\u7684\u6570\u636e\u7ed3\u6784\uff09\uff1b\u8fd9\u79cd\u7c7b\u578b\u53ef\u4ee5\u662f\u4efb\u610f\u7684\u539f\u59cb\u7c7b\u578b\u4f8b\u5982\u6574\u578b\u3001\u5b57\u7b26\u4e32\u6216\u8005\u81ea\u5b9a\u4e49\u7c7b\u578b\u3002\u6570\u7ec4\u957f\u5ea6\u5fc5\u987b\u662f\u4e00\u4e2a\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u5e76\u4e14\u5fc5\u987b\u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u6570\u7ec4\u957f\u5ea6\u4e5f\u662f\u6570\u7ec4\u7c7b\u578b\u7684\u4e00\u90e8\u5206\uff0c\u6240\u4ee5 [5]int \u548c [10]int \u662f\u5c5e\u4e8e\u4e0d\u540c\u7c7b\u578b\u7684\u3002\u6570\u7ec4\u7684\u7f16\u8bd1\u65f6\u503c\u521d\u59cb\u5316\u662f\u6309\u7167\u6570\u7ec4\u987a\u5e8f\u5b8c\u6210\u7684\uff08\u5982\u4e0b\uff09\u3002 \u6ce8\u610f\u4e8b\u9879 \u5982\u679c\u6211\u4eec\u60f3\u8ba9\u6570\u7ec4\u5143\u7d20\u7c7b\u578b\u4e3a\u4efb\u610f\u7c7b\u578b\u7684\u8bdd\u53ef\u4ee5\u4f7f\u7528\u7a7a\u63a5\u53e3\u4f5c\u4e3a\u7c7b\u578b\uff08\u53c2\u8003 \u7b2c 11 \u7ae0 \uff09\u3002\u5f53\u4f7f\u7528\u503c\u65f6\u6211\u4eec\u5fc5\u987b\u5148\u505a\u4e00\u4e2a\u7c7b\u578b\u5224\u65ad\uff08\u53c2\u8003 \u7b2c 11 \u7ae0 \uff09\u3002 \u6570\u7ec4\u5143\u7d20\u53ef\u4ee5\u901a\u8fc7 \u7d22\u5f15 \uff08\u4f4d\u7f6e\uff09\u6765\u8bfb\u53d6\uff08\u6216\u8005\u4fee\u6539\uff09\uff0c\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u7d22\u5f15\u4e3a 0 \uff0c\u7b2c\u4e8c\u4e2a\u7d22\u5f15\u4e3a 1 \uff0c\u4ee5\u6b64\u7c7b\u63a8\uff08\u6570\u7ec4\u4ee5 0 \u5f00\u59cb\u5728\u6240\u6709\u7c7b C \u8bed\u8a00\u4e2d\u662f\u76f8\u4f3c\u7684\uff09\u3002\u5143\u7d20\u7684\u6570\u76ee\uff08\u4e5f\u79f0\u4e3a\u957f\u5ea6\u6216\u8005\u6570\u7ec4\u5927\u5c0f\uff09\u5fc5\u987b\u662f\u56fa\u5b9a\u7684\u5e76\u4e14\u5728\u58f0\u660e\u8be5\u6570\u7ec4\u65f6\u5c31\u7ed9\u51fa\uff08\u7f16\u8bd1\u65f6\u9700\u8981\u77e5\u9053\u6570\u7ec4\u957f\u5ea6\u4ee5\u4fbf\u5206\u914d\u5185\u5b58\uff09\uff1b\u6570\u7ec4\u957f\u5ea6\u6700\u5927\u4e3a 2GB\u3002 \u58f0\u660e\u7684\u683c\u5f0f\u662f\uff1a var identifier [ len ] type \u4f8b\u5982\uff1a var arr1 [ 5 ] int \u5728\u5185\u5b58\u4e2d\u7684\u7ed3\u6784\u662f\uff1a \u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u6574\u578b\u503c\uff0c\u5f53\u58f0\u660e\u6570\u7ec4\u65f6\u6240\u6709\u7684\u5143\u7d20\u90fd\u4f1a\u88ab\u81ea\u52a8\u521d\u59cb\u5316\u4e3a\u9ed8\u8ba4\u503c 0\u3002 arr1 \u7684\u957f\u5ea6\u662f 5\uff0c\u7d22\u5f15\u8303\u56f4\u4ece 0 \u5230 len(arr1)-1 \u3002 \u7b2c\u4e00\u4e2a\u5143\u7d20\u662f arr1[0] \uff0c\u7b2c\u4e09\u4e2a\u5143\u7d20\u662f arr1[2] \uff1b\u603b\u4f53\u6765\u8bf4\u7d22\u5f15 i \u4ee3\u8868\u7684\u5143\u7d20\u662f arr1[i] \uff0c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u662f arr1[len(arr1)-1] \u3002 \u5bf9\u7d22\u5f15\u9879\u4e3a i \u7684\u6570\u7ec4\u5143\u7d20\u8d4b\u503c\u53ef\u4ee5\u8fd9\u4e48\u64cd\u4f5c\uff1a arr[i] = value \uff0c\u6240\u4ee5\u6570\u7ec4\u662f \u53ef\u53d8\u7684 \u3002 \u53ea\u6709\u6709\u6548\u7684\u7d22\u5f15\u53ef\u4ee5\u88ab\u4f7f\u7528\uff0c\u5f53\u4f7f\u7528\u7b49\u4e8e\u6216\u8005\u5927\u4e8e len(arr1) \u7684\u7d22\u5f15\u65f6\uff1a\u5982\u679c\u7f16\u8bd1\u5668\u53ef\u4ee5\u68c0\u6d4b\u5230\uff0c\u4f1a\u7ed9\u51fa\u7d22\u5f15\u8d85\u9650\u7684\u63d0\u793a\u4fe1\u606f\uff1b\u5982\u679c\u68c0\u6d4b\u4e0d\u5230\u7684\u8bdd\u7f16\u8bd1\u4f1a\u901a\u8fc7\u800c\u8fd0\u884c\u65f6\u4f1a panic() :\uff08\u53c2\u8003 \u7b2c 13 \u7ae0 \uff09 runtime error: index out of range \u7531\u4e8e\u7d22\u5f15\u7684\u5b58\u5728\uff0c\u904d\u5386\u6570\u7ec4\u7684\u65b9\u6cd5\u81ea\u7136\u5c31\u662f\u4f7f\u7528 for \u7ed3\u6784\uff1a \u901a\u8fc7 for \u521d\u59cb\u5316\u6570\u7ec4\u9879 \u901a\u8fc7 for \u6253\u5370\u6570\u7ec4\u5143\u7d20 \u901a\u8fc7 for \u4f9d\u6b21\u5904\u7406\u5143\u7d20 \u793a\u4f8b 7.1 for_arrays.go package main import \"fmt\" func main () { var arr1 [ 5 ] int for i := 0 ; i < len ( arr1 ); i ++ { arr1 [ i ] = i * 2 } for i := 0 ; i < len ( arr1 ); i ++ { fmt . Printf ( \"Array at index %d is %d\\n\" , i , arr1 [ i ]) } } \u8f93\u51fa\u7ed3\u679c\uff1a Array at index 0 is 0 Array at index 1 is 2 Array at index 2 is 4 Array at index 3 is 6 Array at index 4 is 8 for \u5faa\u73af\u4e2d\u7684\u6761\u4ef6\u975e\u5e38\u91cd\u8981\uff1a i < len(arr1) \uff0c\u5982\u679c\u5199\u6210 i <= len(arr1) \u7684\u8bdd\u4f1a\u4ea7\u751f\u8d8a\u754c\u9519\u8bef\u3002 IDIOM: for i := 0 ; i < len ( arr1 ); i ++ \uff5b arr1 [ i ] = ... } \u4e5f\u53ef\u4ee5\u4f7f\u7528 for-range \u7684\u751f\u6210\u65b9\u5f0f\uff1a IDIOM: for i , _ := range arr1 { ... } \u5728\u8fd9\u91cc i \u4e5f\u662f\u6570\u7ec4\u7684\u7d22\u5f15\u3002\u5f53\u7136\u8fd9\u4e24\u79cd for \u7ed3\u6784\u5bf9\u4e8e\u5207\u7247\uff08 slices \uff09\uff08\u53c2\u8003 \u7b2c 7 \u7ae0 \uff09\u6765\u8bf4\u4e5f\u540c\u6837\u9002\u7528\u3002 \u95ee\u9898 7.1 \u4e0b\u9762\u4ee3\u7801\u6bb5\u7684\u8f93\u51fa\u662f\u4ec0\u4e48\uff1f a := [ ... ] string { \"a\" , \"b\" , \"c\" , \"d\" } for i := range a { fmt . Println ( \"Array item\" , i , \"is\" , a [ i ]) } Go \u8bed\u8a00\u4e2d\u7684\u6570\u7ec4\u662f\u4e00\u79cd \u503c\u7c7b\u578b \uff08\u4e0d\u50cf C/C++ \u4e2d\u662f\u6307\u5411\u9996\u5143\u7d20\u7684\u6307\u9488\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7 new() \u6765\u521b\u5efa\uff1a var arr1 = new([5]int) \u3002 \u90a3\u4e48\u8fd9\u79cd\u65b9\u5f0f\u548c var arr2 [5]int \u7684\u533a\u522b\u662f\u4ec0\u4e48\u5462\uff1f arr1 \u7684\u7c7b\u578b\u662f *[5]int \uff0c\u800c arr2 \u7684\u7c7b\u578b\u662f [5]int \u3002 \u8fd9\u6837\u7684\u7ed3\u679c\u5c31\u662f\u5f53\u628a\u4e00\u4e2a\u6570\u7ec4\u8d4b\u503c\u7ed9\u53e6\u4e00\u4e2a\u65f6\uff0c\u9700\u8981\u518d\u505a\u4e00\u6b21\u6570\u7ec4\u5185\u5b58\u7684\u62f7\u8d1d\u64cd\u4f5c\u3002\u4f8b\u5982\uff1a arr2 := * arr1 arr2 [ 2 ] = 100 \u8fd9\u6837\u4e24\u4e2a\u6570\u7ec4\u5c31\u6709\u4e86\u4e0d\u540c\u7684\u503c\uff0c\u5728\u8d4b\u503c\u540e\u4fee\u6539 arr2 \u4e0d\u4f1a\u5bf9 arr1 \u751f\u6548\u3002 \u6240\u4ee5\u5728\u51fd\u6570\u4e2d\u6570\u7ec4\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u65f6\uff0c\u5982 func1(arr2) \uff0c\u4f1a\u4ea7\u751f\u4e00\u6b21\u6570\u7ec4\u62f7\u8d1d\uff0c func1() \u65b9\u6cd5\u4e0d\u4f1a\u4fee\u6539\u539f\u59cb\u7684\u6570\u7ec4 arr2 \u3002 \u5982\u679c\u4f60\u60f3\u4fee\u6539\u539f\u6570\u7ec4\uff0c\u90a3\u4e48 arr2 \u5fc5\u987b\u901a\u8fc7 & \u64cd\u4f5c\u7b26\u4ee5\u5f15\u7528\u65b9\u5f0f\u4f20\u8fc7\u6765\uff0c\u4f8b\u5982 func1(&arr2) \uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a \u793a\u4f8b 7.2 pointer_array.go : package main import \"fmt\" func f ( a [ 3 ] int ) { fmt . Println ( a ) } func fp ( a * [ 3 ] int ) { fmt . Println ( a ) } func main () { var ar [ 3 ] int f ( ar ) // passes a copy of ar fp ( & ar ) // passes a pointer to ar } \u8f93\u51fa\u7ed3\u679c\uff1a [0 0 0] &[0 0 0] \u53e6\u4e00\u79cd\u65b9\u6cd5\u5c31\u662f\u751f\u6210\u6570\u7ec4\u5207\u7247\u5e76\u5c06\u5176\u4f20\u9012\u7ed9\u51fd\u6570\uff08\u8be6\u89c1 \u7b2c 7.1.4 \u8282 \uff09\u3002 \u7ec3\u4e60 \u7ec3\u4e607.1\uff1a array_value.go : \u8bc1\u660e\u5f53\u6570\u7ec4\u8d4b\u503c\u65f6\uff0c\u53d1\u751f\u4e86\u6570\u7ec4\u5185\u5b58\u62f7\u8d1d\u3002 \u7ec3\u4e607.2\uff1a for_array.go : \u5199\u4e00\u4e2a\u5faa\u73af\u5e76\u7528\u4e0b\u6807\u7ed9\u6570\u7ec4\u8d4b\u503c\uff08\u4ece 0 \u5230 15\uff09\u5e76\u4e14\u5c06\u6570\u7ec4\u6253\u5370\u5728\u5c4f\u5e55\u4e0a\u3002 \u7ec3\u4e607.3\uff1a fibonacci_array.go : \u5728 \u7b2c 6.6 \u8282 \u6211\u4eec\u770b\u5230\u4e86\u4e00\u4e2a\u9012\u5f52\u8ba1\u7b97 Fibonacci \u6570\u503c\u7684\u65b9\u6cd5\u3002\u4f46\u662f\u901a\u8fc7\u6570\u7ec4\u6211\u4eec\u53ef\u4ee5\u66f4\u5feb\u7684\u8ba1\u7b97\u51fa Fibonacci \u6570\u3002\u5b8c\u6210\u8be5\u65b9\u6cd5\u5e76\u6253\u5370\u51fa\u524d 50 \u4e2a Fibonacci \u6570\u5b57\u3002","title":"7.1.1 \u6982\u5ff5"},{"location":"07.1/#712","text":"\u5982\u679c\u6570\u7ec4\u503c\u5df2\u7ecf\u63d0\u524d\u77e5\u9053\u4e86\uff0c\u90a3\u4e48\u53ef\u4ee5\u901a\u8fc7 \u6570\u7ec4\u5e38\u91cf \u7684\u65b9\u6cd5\u6765\u521d\u59cb\u5316\u6570\u7ec4\uff0c\u800c\u4e0d\u7528\u4f9d\u6b21\u4f7f\u7528 []= \u65b9\u6cd5\uff08\u6240\u6709\u7684\u7ec4\u6210\u5143\u7d20\u90fd\u6709\u76f8\u540c\u7684\u5e38\u91cf\u8bed\u6cd5\uff09\u3002 \u793a\u4f8b 7.3 array_literals.go package main import \"fmt\" func main () { // var arrAge = [5]int{18, 20, 15, 22, 16} // var arrLazy = [...]int{5, 6, 7, 8, 22} // var arrLazy = []int{5, 6, 7, 8, 22} //\u6ce8\uff1a\u521d\u59cb\u5316\u5f97\u5230\u7684\u5b9e\u9645\u4e0a\u662f\u5207\u7247slice var arrKeyValue = [ 5 ] string { 3 : \"Chris\" , 4 : \"Ron\" } // var arrKeyValue = []string{3: \"Chris\", 4: \"Ron\"} //\u6ce8\uff1a\u521d\u59cb\u5316\u5f97\u5230\u7684\u5b9e\u9645\u4e0a\u662f\u5207\u7247slice for i := 0 ; i < len ( arrKeyValue ); i ++ { fmt . Printf ( \"Person at %d is %s\\n\" , i , arrKeyValue [ i ]) } } \u7b2c\u4e00\u79cd\u53d8\u5316\uff1a var arrAge = [ 5 ] int { 18 , 20 , 15 , 22 , 16 } \u6ce8\u610f [5]int \u53ef\u4ee5\u4ece\u5de6\u8fb9\u8d77\u5f00\u59cb\u5ffd\u7565\uff1a [10]int {1, 2, 3} :\u8fd9\u662f\u4e00\u4e2a\u6709 10 \u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u9664\u4e86\u524d\u4e09\u4e2a\u5143\u7d20\u5916\u5176\u4ed6\u5143\u7d20\u90fd\u4e3a 0 \u3002 \u7b2c\u4e8c\u79cd\u53d8\u5316\uff1a var arrLazy = [ ... ] int { 5 , 6 , 7 , 8 , 22 } ... \u540c\u6837\u53ef\u4ee5\u5ffd\u7565\uff0c\u4ece\u6280\u672f\u4e0a\u8bf4\u5b83\u4eec\u5176\u5b9e\u53d8\u6210\u4e86\u5207\u7247\u3002 \u7b2c\u4e09\u79cd\u53d8\u5316\uff1a key: value \u8bed\u6cd5 var arrKeyValue = [ 5 ] string { 3 : \"Chris\" , 4 : \"Ron\" } \u53ea\u6709\u7d22\u5f15 3 \u548c 4 \u88ab\u8d4b\u4e88\u5b9e\u9645\u7684\u503c\uff0c\u5176\u4ed6\u5143\u7d20\u90fd\u88ab\u8bbe\u7f6e\u4e3a\u7a7a\u7684\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a Person at 0 is Person at 1 is Person at 2 is Person at 3 is Chris Person at 4 is Ron \u5728\u8fd9\u91cc\u6570\u7ec4\u957f\u5ea6\u540c\u6837\u53ef\u4ee5\u5199\u6210 ... \u3002 \u4f60\u53ef\u4ee5\u53d6\u4efb\u610f\u6570\u7ec4\u5e38\u91cf\u7684\u5730\u5740\u6765\u4f5c\u4e3a\u6307\u5411\u65b0\u5b9e\u4f8b\u7684\u6307\u9488\u3002 \u793a\u4f8b 7.4 pointer_array2.go package main import \"fmt\" func fp ( a * [ 3 ] int ) { fmt . Println ( a ) } func main () { for i := 0 ; i < 3 ; i ++ { fp ( & [ 3 ] int { i , i * i , i * i * i }) } } \u8f93\u51fa\u7ed3\u679c\uff1a &[0 0 0] &[1 1 1] &[2 4 8] \u51e0\u4f55\u70b9\uff08\u6216\u8005\u6570\u5b66\u5411\u91cf\uff09\u662f\u4e00\u4e2a\u4f7f\u7528\u6570\u7ec4\u7684\u7ecf\u5178\u4f8b\u5b50\u3002\u4e3a\u4e86\u7b80\u5316\u4ee3\u7801\u901a\u5e38\u4f7f\u7528\u4e00\u4e2a\u522b\u540d\uff1a type Vector3D [ 3 ] float32 var vec Vector3D","title":"7.1.2 \u6570\u7ec4\u5e38\u91cf"},{"location":"07.1/#713","text":"\u6570\u7ec4\u901a\u5e38\u662f\u4e00\u7ef4\u7684\uff0c\u4f46\u662f\u53ef\u4ee5\u7528\u6765\u7ec4\u88c5\u6210\u591a\u7ef4\u6570\u7ec4\uff0c\u4f8b\u5982\uff1a [3][5]int \uff0c [2][2][2]float64 \u3002 \u5185\u90e8\u6570\u7ec4\u603b\u662f\u957f\u5ea6\u76f8\u540c\u7684\u3002Go \u8bed\u8a00\u7684\u591a\u7ef4\u6570\u7ec4\u662f\u77e9\u5f62\u5f0f\u7684\uff08\u552f\u4e00\u7684\u4f8b\u5916\u662f\u5207\u7247\u7684\u6570\u7ec4\uff0c\u53c2\u89c1 \u7b2c 7.2.5 \u8282 \u3002 \u793a\u4f8b 7.5 multidim_array.go package main const ( WIDTH = 1920 HEIGHT = 1080 ) type pixel int var screen [ WIDTH ][ HEIGHT ] pixel func main () { for y := 0 ; y < HEIGHT ; y ++ { for x := 0 ; x < WIDTH ; x ++ { screen [ x ][ y ] = 0 } } }","title":"7.1.3 \u591a\u7ef4\u6570\u7ec4"},{"location":"07.1/#714","text":"\u628a\u4e00\u4e2a\u5927\u6570\u7ec4\u4f20\u9012\u7ed9\u51fd\u6570\u4f1a\u6d88\u8017\u5f88\u591a\u5185\u5b58\u3002\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff1a \u4f20\u9012\u6570\u7ec4\u7684\u6307\u9488 \u4f7f\u7528\u6570\u7ec4\u7684\u5207\u7247 \u63a5\u4e0b\u6765\u7684\u4f8b\u5b50\u9610\u660e\u4e86\u7b2c\u4e00\u79cd\u65b9\u6cd5\uff1a \u793a\u4f8b 7.6 array_sum.go package main import \"fmt\" func main () { array := [ 3 ] float64 { 7.0 , 8.5 , 9.1 } x := Sum ( & array ) // Note the explicit address-of operator // to pass a pointer to the array fmt . Printf ( \"The sum of the array is: %f\" , x ) } func Sum ( a * [ 3 ] float64 ) ( sum float64 ) { for _ , v := range a { // derefencing *a to get back to the array is not necessary! sum += v } return } \u8f93\u51fa\u7ed3\u679c\uff1a The sum of the array is: 24.600000 \u4f46\u8fd9\u5728 Go \u4e2d\u5e76\u4e0d\u5e38\u7528\uff0c\u901a\u5e38\u4f7f\u7528\u5207\u7247\uff08\u53c2\u8003 \u7b2c 7.2 \u8282 \uff09\u3002","title":"7.1.4 \u5c06\u6570\u7ec4\u4f20\u9012\u7ed9\u51fd\u6570"},{"location":"07.1/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6570\u7ec4\u4e0e\u5207\u7247 \u4e0b\u4e00\u8282\uff1a \u5207\u7247","title":"\u94fe\u63a5"},{"location":"07.2/","text":"7.2 \u5207\u7247 \u00b6 7.2.1 \u6982\u5ff5 \u00b6 \u5207\u7247 (slice) \u662f\u5bf9\u6570\u7ec4\u4e00\u4e2a\u8fde\u7eed\u7247\u6bb5\u7684\u5f15\u7528\uff08\u8be5\u6570\u7ec4\u6211\u4eec\u79f0\u4e4b\u4e3a\u76f8\u5173\u6570\u7ec4\uff0c\u901a\u5e38\u662f\u533f\u540d\u7684\uff09\uff0c\u6240\u4ee5\u5207\u7247\u662f\u4e00\u4e2a\u5f15\u7528\u7c7b\u578b\uff08\u56e0\u6b64\u66f4\u7c7b\u4f3c\u4e8e C/C++ \u4e2d\u7684\u6570\u7ec4\u7c7b\u578b\uff0c\u6216\u8005 Python \u4e2d\u7684 list \u7c7b\u578b\uff09\u3002\u8fd9\u4e2a\u7247\u6bb5\u53ef\u4ee5\u662f\u6574\u4e2a\u6570\u7ec4\uff0c\u6216\u8005\u662f\u7531\u8d77\u59cb\u548c\u7ec8\u6b62\u7d22\u5f15\u6807\u8bc6\u7684\u4e00\u4e9b\u9879\u7684\u5b50\u96c6\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7ec8\u6b62\u7d22\u5f15\u6807\u8bc6\u7684\u9879\u4e0d\u5305\u62ec\u5728\u5207\u7247\u5185\u3002\u5207\u7247\u63d0\u4f9b\u4e86\u4e00\u4e2a\u76f8\u5173\u6570\u7ec4\u7684\u52a8\u6001\u7a97\u53e3\u3002 \u5207\u7247\u662f\u53ef\u7d22\u5f15\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u7531 len() \u51fd\u6570\u83b7\u53d6\u957f\u5ea6\u3002 \u7ed9\u5b9a\u9879\u7684\u5207\u7247\u7d22\u5f15\u53ef\u80fd\u6bd4\u76f8\u5173\u6570\u7ec4\u7684\u76f8\u540c\u5143\u7d20\u7684\u7d22\u5f15\u5c0f\u3002\u548c\u6570\u7ec4\u4e0d\u540c\u7684\u662f\uff0c\u5207\u7247\u7684\u957f\u5ea6\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u4fee\u6539\uff0c\u6700\u5c0f\u4e3a 0\uff0c \u6700\u5927\u4e3a\u76f8\u5173\u6570\u7ec4\u7684\u957f\u5ea6\uff1a\u5207\u7247\u662f\u4e00\u4e2a \u957f\u5ea6\u53ef\u53d8\u7684\u6570\u7ec4 \u3002 \u5207\u7247\u63d0\u4f9b\u4e86\u8ba1\u7b97\u5bb9\u91cf\u7684\u51fd\u6570 cap() \u53ef\u4ee5\u6d4b\u91cf\u5207\u7247\u6700\u957f\u53ef\u4ee5\u8fbe\u5230\u591a\u5c11\uff1a\u5b83\u7b49\u4e8e\u5207\u7247\u7684\u957f\u5ea6 + \u6570\u7ec4\u9664\u5207\u7247\u4e4b\u5916\u7684\u957f\u5ea6\u3002\u5982\u679c s \u662f\u4e00\u4e2a\u5207\u7247\uff0c cap(s) \u5c31\u662f\u4ece s[0] \u5230\u6570\u7ec4\u672b\u5c3e\u7684\u6570\u7ec4\u957f\u5ea6\u3002\u5207\u7247\u7684\u957f\u5ea6\u6c38\u8fdc\u4e0d\u4f1a\u8d85\u8fc7\u5b83\u7684\u5bb9\u91cf\uff0c\u6240\u4ee5\u5bf9\u4e8e\u5207\u7247 s \u6765\u8bf4\u8be5\u4e0d\u7b49\u5f0f\u6c38\u8fdc\u6210\u7acb\uff1a 0 <= len(s) <= cap(s) \u3002 \u591a\u4e2a\u5207\u7247\u5982\u679c\u8868\u793a\u540c\u4e00\u4e2a\u6570\u7ec4\u7684\u7247\u6bb5\uff0c\u5b83\u4eec\u53ef\u4ee5\u5171\u4eab\u6570\u636e\uff1b\u56e0\u6b64\u4e00\u4e2a\u5207\u7247\u548c\u76f8\u5173\u6570\u7ec4\u7684\u5176\u4ed6\u5207\u7247\u662f\u5171\u4eab\u5b58\u50a8\u7684\uff0c\u76f8\u53cd\uff0c\u4e0d\u540c\u7684\u6570\u7ec4\u603b\u662f\u4ee3\u8868\u4e0d\u540c\u7684\u5b58\u50a8\u3002\u6570\u7ec4\u5b9e\u9645\u4e0a\u662f\u5207\u7247\u7684\u6784\u5efa\u5757\u3002 \u4f18\u70b9 \u56e0\u4e3a\u5207\u7247\u662f\u5f15\u7528\uff0c\u6240\u4ee5\u5b83\u4eec\u4e0d\u9700\u8981\u4f7f\u7528\u989d\u5916\u7684\u5185\u5b58\u5e76\u4e14\u6bd4\u4f7f\u7528\u6570\u7ec4\u66f4\u6709\u6548\u7387\uff0c\u6240\u4ee5\u5728 Go \u4ee3\u7801\u4e2d\u5207\u7247\u6bd4\u6570\u7ec4\u66f4\u5e38\u7528\u3002 \u58f0\u660e\u5207\u7247\u7684\u683c\u5f0f\u662f\uff1a var identifier []type \uff08\u4e0d\u9700\u8981\u8bf4\u660e\u957f\u5ea6\uff09\u3002 \u4e00\u4e2a\u5207\u7247\u5728\u672a\u521d\u59cb\u5316\u4e4b\u524d\u9ed8\u8ba4\u4e3a nil \uff0c\u957f\u5ea6\u4e3a 0\u3002 \u5207\u7247\u7684\u521d\u59cb\u5316\u683c\u5f0f\u662f\uff1a var slice1 []type = arr1[start:end] \u3002 \u8fd9\u8868\u793a slice1 \u662f\u7531\u6570\u7ec4 arr1 \u4ece start \u7d22\u5f15\u5230 end-1 \u7d22\u5f15\u4e4b\u95f4\u7684\u5143\u7d20\u6784\u6210\u7684\u5b50\u96c6\uff08\u5207\u5206\u6570\u7ec4\uff0c start:end \u88ab\u79f0\u4e3a\u5207\u7247\u8868\u8fbe\u5f0f\uff09\u3002\u6240\u4ee5 slice1[0] \u5c31\u7b49\u4e8e arr1[start] \u3002\u8fd9\u53ef\u4ee5\u5728 arr1 \u88ab\u586b\u5145\u524d\u5c31\u5b9a\u4e49\u597d\u3002 \u5982\u679c\u67d0\u4e2a\u4eba\u5199\uff1a var slice1 []type = arr1[:] \u90a3\u4e48 slice1 \u5c31\u7b49\u4e8e\u5b8c\u6574\u7684 arr1 \u6570\u7ec4\uff08\u6240\u4ee5\u8fd9\u79cd\u8868\u793a\u65b9\u5f0f\u662f arr1[0:len(arr1)] \u7684\u4e00\u79cd\u7f29\u5199\uff09\u3002\u53e6\u5916\u4e00\u79cd\u8868\u8ff0\u65b9\u5f0f\u662f\uff1a slice1 = &arr1 \u3002 arr1[2:] \u548c arr1[2:len(arr1)] \u76f8\u540c\uff0c\u90fd\u5305\u542b\u4e86\u6570\u7ec4\u4ece\u7b2c\u4e09\u4e2a\u5230\u6700\u540e\u7684\u6240\u6709\u5143\u7d20\u3002 arr1[:3] \u548c arr1[0:3] \u76f8\u540c\uff0c\u5305\u542b\u4e86\u4ece\u7b2c\u4e00\u4e2a\u5230\u7b2c\u4e09\u4e2a\u5143\u7d20\uff08\u4e0d\u5305\u62ec\u7b2c\u56db\u4e2a\uff09\u3002 \u5982\u679c\u4f60\u60f3\u53bb\u6389 slice1 \u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u53ea\u8981 slice1 = slice1[:len(slice1)-1] \u3002 \u4e00\u4e2a\u7531\u6570\u5b57 1\u30012\u30013 \u7ec4\u6210\u7684\u5207\u7247\u53ef\u4ee5\u8fd9\u4e48\u751f\u6210\uff1a s := [3]int{1,2,3}[:] \uff08\u6ce8\uff1a\u5e94\u5148\u7528 s := [3]int{1, 2, 3} \u751f\u6210\u6570\u7ec4, \u518d\u4f7f\u7528 s[:] \u8f6c\u6210\u5207\u7247\uff09\u751a\u81f3\u66f4\u7b80\u5355\u7684 s := []int{1,2,3} \u3002 s2 := s[:] \u662f\u7528\u5207\u7247\u7ec4\u6210\u7684\u5207\u7247\uff0c\u62e5\u6709\u76f8\u540c\u7684\u5143\u7d20\uff0c\u4f46\u662f\u4ecd\u7136\u6307\u5411\u76f8\u540c\u7684\u76f8\u5173\u6570\u7ec4\u3002 \u4e00\u4e2a\u5207\u7247 s \u53ef\u4ee5\u8fd9\u6837\u6269\u5c55\u5230\u5b83\u7684\u5927\u5c0f\u4e0a\u9650\uff1a s = s[:cap(s)] \uff0c\u5982\u679c\u518d\u6269\u5927\u7684\u8bdd\u5c31\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6\u9519\u8bef\uff08\u53c2\u89c1\u7b2c 7.7 \u8282\uff09\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5207\u7247\uff08\u5305\u62ec string \uff09\uff0c\u4ee5\u4e0b\u72b6\u6001\u603b\u662f\u6210\u7acb\u7684\uff1a s == s[:i] + s[i:] // i\u662f\u4e00\u4e2a\u6574\u6570\u4e14: 0 <= i <= len(s) len(s) <= cap(s) \u5207\u7247\u4e5f\u53ef\u4ee5\u7528\u7c7b\u4f3c\u6570\u7ec4\u7684\u65b9\u5f0f\u521d\u59cb\u5316\uff1a var x = []int{2, 3, 5, 7, 11} \u3002\u8fd9\u6837\u5c31\u521b\u5efa\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3a 5 \u7684\u6570\u7ec4\u5e76\u4e14\u521b\u5efa\u4e86\u4e00\u4e2a\u76f8\u5173\u5207\u7247\u3002 \u5207\u7247\u5728\u5185\u5b58\u4e2d\u7684\u7ec4\u7ec7\u65b9\u5f0f\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u6709 3 \u4e2a\u57df\u7684\u7ed3\u6784\u4f53\uff1a\u6307\u5411\u76f8\u5173\u6570\u7ec4\u7684\u6307\u9488\uff0c\u5207\u7247\u957f\u5ea6\u4ee5\u53ca\u5207\u7247\u5bb9\u91cf\u3002\u4e0b\u56fe\u7ed9\u51fa\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3a 2\uff0c\u5bb9\u91cf\u4e3a 4 \u7684\u5207\u7247 y \u3002 y[0] = 3 \u4e14 y[1] = 5 \u3002 \u5207\u7247 y[0:4] \u7531 \u5143\u7d20 3 \uff0c 5 \uff0c 7 \u548c 11 \u7ec4\u6210\u3002 \u793a\u4f8b 7.7 array_slices.go package main import \"fmt\" func main () { var arr1 [ 6 ] int var slice1 [] int = arr1 [ 2 : 5 ] // item at index 5 not included! // load the array with integers: 0,1,2,3,4,5 for i := 0 ; i < len ( arr1 ); i ++ { arr1 [ i ] = i } // print the slice for i := 0 ; i < len ( slice1 ); i ++ { fmt . Printf ( \"Slice at %d is %d\\n\" , i , slice1 [ i ]) } fmt . Printf ( \"The length of arr1 is %d\\n\" , len ( arr1 )) fmt . Printf ( \"The length of slice1 is %d\\n\" , len ( slice1 )) fmt . Printf ( \"The capacity of slice1 is %d\\n\" , cap ( slice1 )) // grow the slice slice1 = slice1 [ 0 : 4 ] for i := 0 ; i < len ( slice1 ); i ++ { fmt . Printf ( \"Slice at %d is %d\\n\" , i , slice1 [ i ]) } fmt . Printf ( \"The length of slice1 is %d\\n\" , len ( slice1 )) fmt . Printf ( \"The capacity of slice1 is %d\\n\" , cap ( slice1 )) // grow the slice beyond capacity //slice1 = slice1[0:7 ] // panic: runtime error: slice bound out of range } \u8f93\u51fa\uff1a Slice at 0 is 2 Slice at 1 is 3 Slice at 2 is 4 The length of arr1 is 6 The length of slice1 is 3 The capacity of slice1 is 4 Slice at 0 is 2 Slice at 1 is 3 Slice at 2 is 4 Slice at 3 is 5 The length of slice1 is 4 The capacity of slice1 is 4 \u5982\u679c s2 \u662f\u4e00\u4e2a\u5207\u7247\uff0c\u4f60\u53ef\u4ee5\u5c06 s2 \u5411\u540e\u79fb\u52a8\u4e00\u4f4d s2 = s2[1:] \uff0c\u4f46\u662f\u672b\u5c3e\u6ca1\u6709\u79fb\u52a8\u3002\u5207\u7247\u53ea\u80fd\u5411\u540e\u79fb\u52a8\uff0c s2 = s2[-1:] \u4f1a\u5bfc\u81f4\u7f16\u8bd1\u9519\u8bef\u3002\u5207\u7247\u4e0d\u80fd\u88ab\u91cd\u65b0\u5206\u7247\u4ee5\u83b7\u53d6\u6570\u7ec4\u7684\u524d\u4e00\u4e2a\u5143\u7d20\u3002 \u6ce8\u610f \u7edd\u5bf9\u4e0d\u8981\u7528\u6307\u9488\u6307\u5411\u5207\u7247\u3002\u5207\u7247\u672c\u8eab\u5df2\u7ecf\u662f\u4e00\u4e2a\u5f15\u7528\u7c7b\u578b\uff0c\u6240\u4ee5\u5b83\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u6307\u9488\uff01\uff01 \u95ee\u9898 7.2\uff1a \u7ed9\u5b9a\u5207\u7247 b:= []byte{'g', 'o', 'l', 'a', 'n', 'g'} \uff0c\u90a3\u4e48 b[1:4] \u3001 b[:2] \u3001 b[2:] \u548c b[:] \u5206\u522b\u662f\u4ec0\u4e48\uff1f 7.2.2 \u5c06\u5207\u7247\u4f20\u9012\u7ed9\u51fd\u6570 \u00b6 \u5982\u679c\u4f60\u6709\u4e00\u4e2a\u51fd\u6570\u9700\u8981\u5bf9\u6570\u7ec4\u505a\u64cd\u4f5c\uff0c\u4f60\u53ef\u80fd\u603b\u662f\u9700\u8981\u628a\u53c2\u6570\u58f0\u660e\u4e3a\u5207\u7247\u3002\u5f53\u4f60\u8c03\u7528\u8be5\u51fd\u6570\u65f6\uff0c\u628a\u6570\u7ec4\u5206\u7247\uff0c\u521b\u5efa\u4e3a\u4e00\u4e2a\u5207\u7247\u5f15\u7528\u5e76\u4f20\u9012\u7ed9\u8be5\u51fd\u6570\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u8ba1\u7b97\u6570\u7ec4\u5143\u7d20\u548c\u7684\u65b9\u6cd5: func sum ( a [] int ) int { s := 0 for i := 0 ; i < len ( a ); i ++ { s += a [ i ] } return s } func main () { var arr = [ 5 ] int { 0 , 1 , 2 , 3 , 4 } sum ( arr [:]) } 7.2.3 \u7528 make() \u521b\u5efa\u4e00\u4e2a\u5207\u7247 \u00b6 \u5f53\u76f8\u5173\u6570\u7ec4\u8fd8\u6ca1\u6709\u5b9a\u4e49\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 make() \u51fd\u6570\u6765\u521b\u5efa\u4e00\u4e2a\u5207\u7247\uff0c\u540c\u65f6\u521b\u5efa\u597d\u76f8\u5173\u6570\u7ec4\uff1a var slice1 []type = make([]type, len) \u3002 \u4e5f\u53ef\u4ee5\u7b80\u5199\u4e3a slice1 := make([]type, len) \uff0c\u8fd9\u91cc len \u662f\u6570\u7ec4\u7684\u957f\u5ea6\u5e76\u4e14\u4e5f\u662f slice \u7684\u521d\u59cb\u957f\u5ea6\u3002 \u6240\u4ee5\u5b9a\u4e49 s2 := make([]int, 10) \uff0c\u90a3\u4e48 cap(s2) == len(s2) == 10 \u3002 make() \u63a5\u53d7 2 \u4e2a\u53c2\u6570\uff1a\u5143\u7d20\u7684\u7c7b\u578b\u4ee5\u53ca\u5207\u7247\u7684\u5143\u7d20\u4e2a\u6570\u3002 \u5982\u679c\u4f60\u60f3\u521b\u5efa\u4e00\u4e2a slice1 \uff0c\u5b83\u4e0d\u5360\u7528\u6574\u4e2a\u6570\u7ec4\uff0c\u800c\u53ea\u662f\u5360\u7528\u4ee5 len \u4e3a\u4e2a\u6570\u4e2a\u9879\uff0c\u90a3\u4e48\u53ea\u8981\uff1a slice1 := make([]type, len, cap) \u3002 make() \u7684\u4f7f\u7528\u65b9\u5f0f\u662f\uff1a func make([]T, len, cap) \uff0c\u5176\u4e2d cap \u662f\u53ef\u9009\u53c2\u6570\u3002 \u6240\u4ee5\u4e0b\u9762\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u751f\u6210\u76f8\u540c\u7684\u5207\u7247: make ([] int , 50 , 100 ) new ([ 100 ] int )[ 0 : 50 ] \u4e0b\u56fe\u63cf\u8ff0\u4e86\u4f7f\u7528 make() \u65b9\u6cd5\u751f\u6210\u7684\u5207\u7247\u7684\u5185\u5b58\u7ed3\u6784\uff1a \u793a\u4f8b 7.8 make_slice.go package main import \"fmt\" func main () { var slice1 [] int = make ([] int , 10 ) // load the array/slice: for i := 0 ; i < len ( slice1 ); i ++ { slice1 [ i ] = 5 * i } // print the slice: for i := 0 ; i < len ( slice1 ); i ++ { fmt . Printf ( \"Slice at %d is %d\\n\" , i , slice1 [ i ]) } fmt . Printf ( \"\\nThe length of slice1 is %d\\n\" , len ( slice1 )) fmt . Printf ( \"The capacity of slice1 is %d\\n\" , cap ( slice1 )) } \u8f93\u51fa\uff1a Slice at 0 is 0 Slice at 1 is 5 Slice at 2 is 10 Slice at 3 is 15 Slice at 4 is 20 Slice at 5 is 25 Slice at 6 is 30 Slice at 7 is 35 Slice at 8 is 40 Slice at 9 is 45 The length of slice1 is 10 The capacity of slice1 is 10 \u56e0\u4e3a\u5b57\u7b26\u4e32\u662f\u7eaf\u7cb9\u4e0d\u53ef\u53d8\u7684\u5b57\u8282\u6570\u7ec4\uff0c\u5b83\u4eec\u4e5f\u53ef\u4ee5\u88ab\u5207\u5206\u6210\u5207\u7247\u3002 \u7ec3\u4e60 7.4\uff1a fibonacci_funcarray.go : \u4e3a\u7ec3\u4e60 7.3 \u5199\u4e00\u4e2a\u65b0\u7684\u7248\u672c\uff0c\u4e3b\u51fd\u6570\u8c03\u7528\u4e00\u4e2a\u4f7f\u7528\u5e8f\u5217\u4e2a\u6570\u4f5c\u4e3a\u53c2\u6570\u7684\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5927\u5c0f\u4e3a\u5e8f\u5217\u4e2a\u6570\u7684 Fibonacci \u5207\u7247\u3002 7.2.4 new() \u548c make() \u7684\u533a\u522b \u00b6 \u770b\u8d77\u6765\u4e8c\u8005\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\uff0c\u90fd\u5728\u5806\u4e0a\u5206\u914d\u5185\u5b58\uff0c\u4f46\u662f\u5b83\u4eec\u7684\u884c\u4e3a\u4e0d\u540c\uff0c\u9002\u7528\u4e8e\u4e0d\u540c\u7684\u7c7b\u578b\u3002 new(T) \u4e3a\u6bcf\u4e2a\u65b0\u7684\u7c7b\u578b T \u5206\u914d\u4e00\u7247\u5185\u5b58\uff0c\u521d\u59cb\u5316\u4e3a 0 \u5e76\u4e14\u8fd4\u56de\u7c7b\u578b\u4e3a *T \u7684\u5185\u5b58\u5730\u5740\uff1a\u8fd9\u79cd\u65b9\u6cd5 \u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u7c7b\u578b\u4e3a T \uff0c\u503c\u4e3a 0 \u7684\u5730\u5740\u7684\u6307\u9488 \uff0c\u5b83\u9002\u7528\u4e8e\u503c\u7c7b\u578b\u5982\u6570\u7ec4\u548c\u7ed3\u6784\u4f53\uff08\u53c2\u89c1 \u7b2c 10 \u7ae0 \uff09\uff1b\u5b83\u76f8\u5f53\u4e8e &T{} \u3002 make(T) \u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\u4e3a T \u7684\u521d\u59cb\u503c \uff0c\u5b83\u53ea\u9002\u7528\u4e8e 3 \u79cd\u5185\u5efa\u7684\u5f15\u7528\u7c7b\u578b\uff1a\u5207\u7247\u3001 map \u548c channel \uff08\u53c2\u89c1 \u7b2c 8 \u7ae0 \u548c \u7b2c 13 \u7ae0 \uff09\u3002 \u6362\u8a00\u4e4b\uff0c new() \u51fd\u6570\u5206\u914d\u5185\u5b58\uff0c make() \u51fd\u6570\u521d\u59cb\u5316\uff1b\u4e0b\u56fe\u7ed9\u51fa\u4e86\u533a\u522b\uff1a \u5728\u56fe 7.3 \u7684\u7b2c\u4e00\u5e45\u56fe\u4e2d\uff1a var p * [] int = new ([] int ) // *p == nil; with len and cap 0 p := new ([] int ) \u5728\u7b2c\u4e8c\u5e45\u56fe\u4e2d\uff0c p := make([]int, 0) \uff0c\u5207\u7247 \u5df2\u7ecf\u88ab\u521d\u59cb\u5316\uff0c\u4f46\u662f\u6307\u5411\u4e00\u4e2a\u7a7a\u7684\u6570\u7ec4\u3002 \u4ee5\u4e0a\u4e24\u79cd\u65b9\u5f0f\u5b9e\u7528\u6027\u90fd\u4e0d\u9ad8\u3002\u4e0b\u9762\u7684\u65b9\u6cd5\uff1a var v [] int = make ([] int , 10 , 50 ) \u6216\u8005 v := make ([] int , 10 , 50 ) \u8fd9\u6837\u5206\u914d\u4e00\u4e2a\u6709 50 \u4e2a int \u503c\u7684\u6570\u7ec4\uff0c\u5e76\u4e14\u521b\u5efa\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3a 10\uff0c\u5bb9\u91cf\u4e3a 50 \u7684\u5207\u7247 v \uff0c\u8be5\u5207\u7247\u6307\u5411\u6570\u7ec4\u7684\u524d 10 \u4e2a\u5143\u7d20\u3002 \u95ee\u9898 7.3 \u7ed9\u5b9a s := make([]byte, 5) \uff0c len(s) \u548c cap(s) \u5206\u522b\u662f\u591a\u5c11\uff1f s = s[2:4] \uff0c len(s) \u548c cap(s) \u53c8\u5206\u522b\u662f\u591a\u5c11\uff1f \u95ee\u9898 7.4 \u5047\u8bbe s1 := []byte{'p', 'o', 'e', 'm'} \u4e14 s2 := s1[2:] \uff0c s2 \u7684\u503c\u662f\u591a\u5c11\uff1f\u5982\u679c\u6211\u4eec\u6267\u884c s2[1] = 't' \uff0c s1 \u548c s2 \u73b0\u5728\u7684\u503c\u53c8\u5206\u522b\u662f\u591a\u5c11\uff1f \u8bd1\u8005\u6ce8\uff1a\u5982\u4f55\u7406\u89e3 new\u3001make\u3001slice\u3001map\u3001channel \u7684\u5173\u7cfb 1.slice\u3001map \u4ee5\u53ca channel \u90fd\u662f golang \u5185\u5efa\u7684\u4e00\u79cd\u5f15\u7528\u7c7b\u578b\uff0c\u4e09\u8005\u5728\u5185\u5b58\u4e2d\u5b58\u5728\u591a\u4e2a\u7ec4\u6210\u90e8\u5206\uff0c \u9700\u8981\u5bf9\u5185\u5b58\u7ec4\u6210\u90e8\u5206\u521d\u59cb\u5316\u540e\u624d\u80fd\u4f7f\u7528\uff0c\u800c make \u5c31\u662f\u5bf9\u4e09\u8005\u8fdb\u884c\u521d\u59cb\u5316\u7684\u4e00\u79cd\u64cd\u4f5c\u65b9\u5f0f 2. new \u83b7\u53d6\u7684\u662f\u5b58\u50a8\u6307\u5b9a\u53d8\u91cf\u5185\u5b58\u5730\u5740\u7684\u4e00\u4e2a\u53d8\u91cf\uff0c\u5bf9\u4e8e\u53d8\u91cf\u5185\u90e8\u7ed3\u6784\u5e76\u4e0d\u4f1a\u6267\u884c\u76f8\u5e94\u7684\u521d\u59cb\u5316\u64cd\u4f5c\uff0c \u6240\u4ee5 slice\u3001map\u3001channel \u9700\u8981 make \u8fdb\u884c\u521d\u59cb\u5316\u5e76\u83b7\u53d6\u5bf9\u5e94\u7684\u5185\u5b58\u5730\u5740\uff0c\u800c\u975e new \u7b80\u5355\u7684\u83b7\u53d6\u5185\u5b58\u5730\u5740 7.2.5 \u591a\u7ef4\u5207\u7247 \u00b6 \u548c\u6570\u7ec4\u4e00\u6837\uff0c\u5207\u7247\u901a\u5e38\u4e5f\u662f\u4e00\u7ef4\u7684\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u7531\u4e00\u7ef4\u7ec4\u5408\u6210\u9ad8\u7ef4\u3002\u901a\u8fc7\u5206\u7247\u7684\u5206\u7247\uff08\u6216\u8005\u5207\u7247\u7684\u6570\u7ec4\uff09\uff0c\u957f\u5ea6\u53ef\u4ee5\u4efb\u610f\u52a8\u6001\u53d8\u5316\uff0c\u6240\u4ee5 Go \u8bed\u8a00\u7684\u591a\u7ef4\u5207\u7247\u53ef\u4ee5\u4efb\u610f\u5207\u5206\u3002\u800c\u4e14\uff0c\u5185\u5c42\u7684\u5207\u7247\u5fc5\u987b\u5355\u72ec\u5206\u914d\uff08\u901a\u8fc7 make() \u51fd\u6570\uff09\u3002 7.2.6 bytes \u5305 \u00b6 \u7c7b\u578b []byte \u7684\u5207\u7247\u5341\u5206\u5e38\u89c1\uff0cGo \u8bed\u8a00\u6709\u4e00\u4e2a bytes \u5305\u4e13\u95e8\u7528\u6765\u63d0\u4f9b\u8fd9\u79cd\u7c7b\u578b\u7684\u64cd\u4f5c\u65b9\u6cd5\u3002 bytes \u5305\u548c\u5b57\u7b26\u4e32\u5305\u5341\u5206\u7c7b\u4f3c\uff08\u53c2\u89c1 \u7b2c 4.7 \u8282 \uff09\u3002\u800c\u4e14\u5b83\u8fd8\u5305\u542b\u4e00\u4e2a\u5341\u5206\u6709\u7528\u7684\u7c7b\u578b Buffer : import \"bytes\" type Buffer struct { ... } \u8fd9\u662f\u4e00\u4e2a\u957f\u5ea6\u53ef\u53d8\u7684 bytes \u7684 buffer\uff0c\u63d0\u4f9b Read() \u548c Write() \u65b9\u6cd5\uff0c\u56e0\u4e3a\u8bfb\u5199\u957f\u5ea6\u672a\u77e5\u7684 bytes \u6700\u597d\u4f7f\u7528 buffer \u3002 Buffer \u53ef\u4ee5\u8fd9\u6837\u5b9a\u4e49\uff1a var buffer bytes.Buffer \u3002 \u6216\u8005\u4f7f\u7528 new() \u83b7\u5f97\u4e00\u4e2a\u6307\u9488\uff1a var r *bytes.Buffer = new(bytes.Buffer) \u3002 \u6216\u8005\u901a\u8fc7\u51fd\u6570\uff1a func NewBuffer(buf []byte) *Buffer \uff0c\u521b\u5efa\u4e00\u4e2a Buffer \u5bf9\u8c61\u5e76\u4e14\u7528 buf \u521d\u59cb\u5316\u597d\uff1b NewBuffer \u6700\u597d\u7528\u5728\u4ece buf \u8bfb\u53d6\u7684\u65f6\u5019\u4f7f\u7528\u3002 \u901a\u8fc7 buffer \u4e32\u8054\u5b57\u7b26\u4e32 \u7c7b\u4f3c\u4e8e Java \u7684 StringBuilder \u7c7b\u3002 \u5728\u4e0b\u9762\u7684\u4ee3\u7801\u6bb5\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a buffer \uff0c\u901a\u8fc7 buffer.WriteString(s) \u65b9\u6cd5\u5c06\u5b57\u7b26\u4e32 s \u8ffd\u52a0\u5230\u540e\u9762\uff0c\u6700\u540e\u518d\u901a\u8fc7 buffer.String() \u65b9\u6cd5\u8f6c\u6362\u4e3a string \uff1a var buffer bytes . Buffer for { if s , ok := getNextString (); ok { //method getNextString() not shown here buffer . WriteString ( s ) } else { break } } fmt . Print ( buffer . String (), \"\\n\" ) \u8fd9\u79cd\u5b9e\u73b0\u65b9\u5f0f\u6bd4\u4f7f\u7528 += \u8981\u66f4\u8282\u7701\u5185\u5b58\u548c CPU\uff0c\u5c24\u5176\u662f\u8981\u4e32\u8054\u7684\u5b57\u7b26\u4e32\u6570\u76ee\u7279\u522b\u591a\u7684\u65f6\u5019\u3002 \u7ec3\u4e60 7.5 \u7ed9\u5b9a\u5207\u7247 sl \uff0c\u5c06\u4e00\u4e2a []byte \u6570\u7ec4\u8ffd\u52a0\u5230 sl \u540e\u9762\u3002\u5199\u4e00\u4e2a\u51fd\u6570 Append(slice, data []byte) []byte \uff0c\u8be5\u51fd\u6570\u5728 sl \u4e0d\u80fd\u5b58\u50a8\u66f4\u591a\u6570\u636e\u7684\u65f6\u5019\u81ea\u52a8\u6269\u5bb9\u3002 \u7ec3\u4e60 7.6 \u628a\u4e00\u4e2a\u7f13\u5b58 buf \u5206\u7247\u6210\u4e24\u4e2a\u5207\u7247\uff1a\u7b2c\u4e00\u4e2a\u662f\u524d n \u4e2a bytes\uff0c\u540e\u4e00\u4e2a\u662f\u5269\u4f59\u7684\uff0c\u7528\u4e00\u884c\u4ee3\u7801\u5b9e\u73b0\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u58f0\u660e\u548c\u521d\u59cb\u5316 \u4e0b\u4e00\u8282\uff1a For-range \u7ed3\u6784","title":"7.2 \u5207\u7247"},{"location":"07.2/#72","text":"","title":"7.2 \u5207\u7247"},{"location":"07.2/#721","text":"\u5207\u7247 (slice) \u662f\u5bf9\u6570\u7ec4\u4e00\u4e2a\u8fde\u7eed\u7247\u6bb5\u7684\u5f15\u7528\uff08\u8be5\u6570\u7ec4\u6211\u4eec\u79f0\u4e4b\u4e3a\u76f8\u5173\u6570\u7ec4\uff0c\u901a\u5e38\u662f\u533f\u540d\u7684\uff09\uff0c\u6240\u4ee5\u5207\u7247\u662f\u4e00\u4e2a\u5f15\u7528\u7c7b\u578b\uff08\u56e0\u6b64\u66f4\u7c7b\u4f3c\u4e8e C/C++ \u4e2d\u7684\u6570\u7ec4\u7c7b\u578b\uff0c\u6216\u8005 Python \u4e2d\u7684 list \u7c7b\u578b\uff09\u3002\u8fd9\u4e2a\u7247\u6bb5\u53ef\u4ee5\u662f\u6574\u4e2a\u6570\u7ec4\uff0c\u6216\u8005\u662f\u7531\u8d77\u59cb\u548c\u7ec8\u6b62\u7d22\u5f15\u6807\u8bc6\u7684\u4e00\u4e9b\u9879\u7684\u5b50\u96c6\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7ec8\u6b62\u7d22\u5f15\u6807\u8bc6\u7684\u9879\u4e0d\u5305\u62ec\u5728\u5207\u7247\u5185\u3002\u5207\u7247\u63d0\u4f9b\u4e86\u4e00\u4e2a\u76f8\u5173\u6570\u7ec4\u7684\u52a8\u6001\u7a97\u53e3\u3002 \u5207\u7247\u662f\u53ef\u7d22\u5f15\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u7531 len() \u51fd\u6570\u83b7\u53d6\u957f\u5ea6\u3002 \u7ed9\u5b9a\u9879\u7684\u5207\u7247\u7d22\u5f15\u53ef\u80fd\u6bd4\u76f8\u5173\u6570\u7ec4\u7684\u76f8\u540c\u5143\u7d20\u7684\u7d22\u5f15\u5c0f\u3002\u548c\u6570\u7ec4\u4e0d\u540c\u7684\u662f\uff0c\u5207\u7247\u7684\u957f\u5ea6\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u4fee\u6539\uff0c\u6700\u5c0f\u4e3a 0\uff0c \u6700\u5927\u4e3a\u76f8\u5173\u6570\u7ec4\u7684\u957f\u5ea6\uff1a\u5207\u7247\u662f\u4e00\u4e2a \u957f\u5ea6\u53ef\u53d8\u7684\u6570\u7ec4 \u3002 \u5207\u7247\u63d0\u4f9b\u4e86\u8ba1\u7b97\u5bb9\u91cf\u7684\u51fd\u6570 cap() \u53ef\u4ee5\u6d4b\u91cf\u5207\u7247\u6700\u957f\u53ef\u4ee5\u8fbe\u5230\u591a\u5c11\uff1a\u5b83\u7b49\u4e8e\u5207\u7247\u7684\u957f\u5ea6 + \u6570\u7ec4\u9664\u5207\u7247\u4e4b\u5916\u7684\u957f\u5ea6\u3002\u5982\u679c s \u662f\u4e00\u4e2a\u5207\u7247\uff0c cap(s) \u5c31\u662f\u4ece s[0] \u5230\u6570\u7ec4\u672b\u5c3e\u7684\u6570\u7ec4\u957f\u5ea6\u3002\u5207\u7247\u7684\u957f\u5ea6\u6c38\u8fdc\u4e0d\u4f1a\u8d85\u8fc7\u5b83\u7684\u5bb9\u91cf\uff0c\u6240\u4ee5\u5bf9\u4e8e\u5207\u7247 s \u6765\u8bf4\u8be5\u4e0d\u7b49\u5f0f\u6c38\u8fdc\u6210\u7acb\uff1a 0 <= len(s) <= cap(s) \u3002 \u591a\u4e2a\u5207\u7247\u5982\u679c\u8868\u793a\u540c\u4e00\u4e2a\u6570\u7ec4\u7684\u7247\u6bb5\uff0c\u5b83\u4eec\u53ef\u4ee5\u5171\u4eab\u6570\u636e\uff1b\u56e0\u6b64\u4e00\u4e2a\u5207\u7247\u548c\u76f8\u5173\u6570\u7ec4\u7684\u5176\u4ed6\u5207\u7247\u662f\u5171\u4eab\u5b58\u50a8\u7684\uff0c\u76f8\u53cd\uff0c\u4e0d\u540c\u7684\u6570\u7ec4\u603b\u662f\u4ee3\u8868\u4e0d\u540c\u7684\u5b58\u50a8\u3002\u6570\u7ec4\u5b9e\u9645\u4e0a\u662f\u5207\u7247\u7684\u6784\u5efa\u5757\u3002 \u4f18\u70b9 \u56e0\u4e3a\u5207\u7247\u662f\u5f15\u7528\uff0c\u6240\u4ee5\u5b83\u4eec\u4e0d\u9700\u8981\u4f7f\u7528\u989d\u5916\u7684\u5185\u5b58\u5e76\u4e14\u6bd4\u4f7f\u7528\u6570\u7ec4\u66f4\u6709\u6548\u7387\uff0c\u6240\u4ee5\u5728 Go \u4ee3\u7801\u4e2d\u5207\u7247\u6bd4\u6570\u7ec4\u66f4\u5e38\u7528\u3002 \u58f0\u660e\u5207\u7247\u7684\u683c\u5f0f\u662f\uff1a var identifier []type \uff08\u4e0d\u9700\u8981\u8bf4\u660e\u957f\u5ea6\uff09\u3002 \u4e00\u4e2a\u5207\u7247\u5728\u672a\u521d\u59cb\u5316\u4e4b\u524d\u9ed8\u8ba4\u4e3a nil \uff0c\u957f\u5ea6\u4e3a 0\u3002 \u5207\u7247\u7684\u521d\u59cb\u5316\u683c\u5f0f\u662f\uff1a var slice1 []type = arr1[start:end] \u3002 \u8fd9\u8868\u793a slice1 \u662f\u7531\u6570\u7ec4 arr1 \u4ece start \u7d22\u5f15\u5230 end-1 \u7d22\u5f15\u4e4b\u95f4\u7684\u5143\u7d20\u6784\u6210\u7684\u5b50\u96c6\uff08\u5207\u5206\u6570\u7ec4\uff0c start:end \u88ab\u79f0\u4e3a\u5207\u7247\u8868\u8fbe\u5f0f\uff09\u3002\u6240\u4ee5 slice1[0] \u5c31\u7b49\u4e8e arr1[start] \u3002\u8fd9\u53ef\u4ee5\u5728 arr1 \u88ab\u586b\u5145\u524d\u5c31\u5b9a\u4e49\u597d\u3002 \u5982\u679c\u67d0\u4e2a\u4eba\u5199\uff1a var slice1 []type = arr1[:] \u90a3\u4e48 slice1 \u5c31\u7b49\u4e8e\u5b8c\u6574\u7684 arr1 \u6570\u7ec4\uff08\u6240\u4ee5\u8fd9\u79cd\u8868\u793a\u65b9\u5f0f\u662f arr1[0:len(arr1)] \u7684\u4e00\u79cd\u7f29\u5199\uff09\u3002\u53e6\u5916\u4e00\u79cd\u8868\u8ff0\u65b9\u5f0f\u662f\uff1a slice1 = &arr1 \u3002 arr1[2:] \u548c arr1[2:len(arr1)] \u76f8\u540c\uff0c\u90fd\u5305\u542b\u4e86\u6570\u7ec4\u4ece\u7b2c\u4e09\u4e2a\u5230\u6700\u540e\u7684\u6240\u6709\u5143\u7d20\u3002 arr1[:3] \u548c arr1[0:3] \u76f8\u540c\uff0c\u5305\u542b\u4e86\u4ece\u7b2c\u4e00\u4e2a\u5230\u7b2c\u4e09\u4e2a\u5143\u7d20\uff08\u4e0d\u5305\u62ec\u7b2c\u56db\u4e2a\uff09\u3002 \u5982\u679c\u4f60\u60f3\u53bb\u6389 slice1 \u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u53ea\u8981 slice1 = slice1[:len(slice1)-1] \u3002 \u4e00\u4e2a\u7531\u6570\u5b57 1\u30012\u30013 \u7ec4\u6210\u7684\u5207\u7247\u53ef\u4ee5\u8fd9\u4e48\u751f\u6210\uff1a s := [3]int{1,2,3}[:] \uff08\u6ce8\uff1a\u5e94\u5148\u7528 s := [3]int{1, 2, 3} \u751f\u6210\u6570\u7ec4, \u518d\u4f7f\u7528 s[:] \u8f6c\u6210\u5207\u7247\uff09\u751a\u81f3\u66f4\u7b80\u5355\u7684 s := []int{1,2,3} \u3002 s2 := s[:] \u662f\u7528\u5207\u7247\u7ec4\u6210\u7684\u5207\u7247\uff0c\u62e5\u6709\u76f8\u540c\u7684\u5143\u7d20\uff0c\u4f46\u662f\u4ecd\u7136\u6307\u5411\u76f8\u540c\u7684\u76f8\u5173\u6570\u7ec4\u3002 \u4e00\u4e2a\u5207\u7247 s \u53ef\u4ee5\u8fd9\u6837\u6269\u5c55\u5230\u5b83\u7684\u5927\u5c0f\u4e0a\u9650\uff1a s = s[:cap(s)] \uff0c\u5982\u679c\u518d\u6269\u5927\u7684\u8bdd\u5c31\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6\u9519\u8bef\uff08\u53c2\u89c1\u7b2c 7.7 \u8282\uff09\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5207\u7247\uff08\u5305\u62ec string \uff09\uff0c\u4ee5\u4e0b\u72b6\u6001\u603b\u662f\u6210\u7acb\u7684\uff1a s == s[:i] + s[i:] // i\u662f\u4e00\u4e2a\u6574\u6570\u4e14: 0 <= i <= len(s) len(s) <= cap(s) \u5207\u7247\u4e5f\u53ef\u4ee5\u7528\u7c7b\u4f3c\u6570\u7ec4\u7684\u65b9\u5f0f\u521d\u59cb\u5316\uff1a var x = []int{2, 3, 5, 7, 11} \u3002\u8fd9\u6837\u5c31\u521b\u5efa\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3a 5 \u7684\u6570\u7ec4\u5e76\u4e14\u521b\u5efa\u4e86\u4e00\u4e2a\u76f8\u5173\u5207\u7247\u3002 \u5207\u7247\u5728\u5185\u5b58\u4e2d\u7684\u7ec4\u7ec7\u65b9\u5f0f\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u6709 3 \u4e2a\u57df\u7684\u7ed3\u6784\u4f53\uff1a\u6307\u5411\u76f8\u5173\u6570\u7ec4\u7684\u6307\u9488\uff0c\u5207\u7247\u957f\u5ea6\u4ee5\u53ca\u5207\u7247\u5bb9\u91cf\u3002\u4e0b\u56fe\u7ed9\u51fa\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3a 2\uff0c\u5bb9\u91cf\u4e3a 4 \u7684\u5207\u7247 y \u3002 y[0] = 3 \u4e14 y[1] = 5 \u3002 \u5207\u7247 y[0:4] \u7531 \u5143\u7d20 3 \uff0c 5 \uff0c 7 \u548c 11 \u7ec4\u6210\u3002 \u793a\u4f8b 7.7 array_slices.go package main import \"fmt\" func main () { var arr1 [ 6 ] int var slice1 [] int = arr1 [ 2 : 5 ] // item at index 5 not included! // load the array with integers: 0,1,2,3,4,5 for i := 0 ; i < len ( arr1 ); i ++ { arr1 [ i ] = i } // print the slice for i := 0 ; i < len ( slice1 ); i ++ { fmt . Printf ( \"Slice at %d is %d\\n\" , i , slice1 [ i ]) } fmt . Printf ( \"The length of arr1 is %d\\n\" , len ( arr1 )) fmt . Printf ( \"The length of slice1 is %d\\n\" , len ( slice1 )) fmt . Printf ( \"The capacity of slice1 is %d\\n\" , cap ( slice1 )) // grow the slice slice1 = slice1 [ 0 : 4 ] for i := 0 ; i < len ( slice1 ); i ++ { fmt . Printf ( \"Slice at %d is %d\\n\" , i , slice1 [ i ]) } fmt . Printf ( \"The length of slice1 is %d\\n\" , len ( slice1 )) fmt . Printf ( \"The capacity of slice1 is %d\\n\" , cap ( slice1 )) // grow the slice beyond capacity //slice1 = slice1[0:7 ] // panic: runtime error: slice bound out of range } \u8f93\u51fa\uff1a Slice at 0 is 2 Slice at 1 is 3 Slice at 2 is 4 The length of arr1 is 6 The length of slice1 is 3 The capacity of slice1 is 4 Slice at 0 is 2 Slice at 1 is 3 Slice at 2 is 4 Slice at 3 is 5 The length of slice1 is 4 The capacity of slice1 is 4 \u5982\u679c s2 \u662f\u4e00\u4e2a\u5207\u7247\uff0c\u4f60\u53ef\u4ee5\u5c06 s2 \u5411\u540e\u79fb\u52a8\u4e00\u4f4d s2 = s2[1:] \uff0c\u4f46\u662f\u672b\u5c3e\u6ca1\u6709\u79fb\u52a8\u3002\u5207\u7247\u53ea\u80fd\u5411\u540e\u79fb\u52a8\uff0c s2 = s2[-1:] \u4f1a\u5bfc\u81f4\u7f16\u8bd1\u9519\u8bef\u3002\u5207\u7247\u4e0d\u80fd\u88ab\u91cd\u65b0\u5206\u7247\u4ee5\u83b7\u53d6\u6570\u7ec4\u7684\u524d\u4e00\u4e2a\u5143\u7d20\u3002 \u6ce8\u610f \u7edd\u5bf9\u4e0d\u8981\u7528\u6307\u9488\u6307\u5411\u5207\u7247\u3002\u5207\u7247\u672c\u8eab\u5df2\u7ecf\u662f\u4e00\u4e2a\u5f15\u7528\u7c7b\u578b\uff0c\u6240\u4ee5\u5b83\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u6307\u9488\uff01\uff01 \u95ee\u9898 7.2\uff1a \u7ed9\u5b9a\u5207\u7247 b:= []byte{'g', 'o', 'l', 'a', 'n', 'g'} \uff0c\u90a3\u4e48 b[1:4] \u3001 b[:2] \u3001 b[2:] \u548c b[:] \u5206\u522b\u662f\u4ec0\u4e48\uff1f","title":"7.2.1 \u6982\u5ff5"},{"location":"07.2/#722","text":"\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u51fd\u6570\u9700\u8981\u5bf9\u6570\u7ec4\u505a\u64cd\u4f5c\uff0c\u4f60\u53ef\u80fd\u603b\u662f\u9700\u8981\u628a\u53c2\u6570\u58f0\u660e\u4e3a\u5207\u7247\u3002\u5f53\u4f60\u8c03\u7528\u8be5\u51fd\u6570\u65f6\uff0c\u628a\u6570\u7ec4\u5206\u7247\uff0c\u521b\u5efa\u4e3a\u4e00\u4e2a\u5207\u7247\u5f15\u7528\u5e76\u4f20\u9012\u7ed9\u8be5\u51fd\u6570\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u8ba1\u7b97\u6570\u7ec4\u5143\u7d20\u548c\u7684\u65b9\u6cd5: func sum ( a [] int ) int { s := 0 for i := 0 ; i < len ( a ); i ++ { s += a [ i ] } return s } func main () { var arr = [ 5 ] int { 0 , 1 , 2 , 3 , 4 } sum ( arr [:]) }","title":"7.2.2 \u5c06\u5207\u7247\u4f20\u9012\u7ed9\u51fd\u6570"},{"location":"07.2/#723-make","text":"\u5f53\u76f8\u5173\u6570\u7ec4\u8fd8\u6ca1\u6709\u5b9a\u4e49\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 make() \u51fd\u6570\u6765\u521b\u5efa\u4e00\u4e2a\u5207\u7247\uff0c\u540c\u65f6\u521b\u5efa\u597d\u76f8\u5173\u6570\u7ec4\uff1a var slice1 []type = make([]type, len) \u3002 \u4e5f\u53ef\u4ee5\u7b80\u5199\u4e3a slice1 := make([]type, len) \uff0c\u8fd9\u91cc len \u662f\u6570\u7ec4\u7684\u957f\u5ea6\u5e76\u4e14\u4e5f\u662f slice \u7684\u521d\u59cb\u957f\u5ea6\u3002 \u6240\u4ee5\u5b9a\u4e49 s2 := make([]int, 10) \uff0c\u90a3\u4e48 cap(s2) == len(s2) == 10 \u3002 make() \u63a5\u53d7 2 \u4e2a\u53c2\u6570\uff1a\u5143\u7d20\u7684\u7c7b\u578b\u4ee5\u53ca\u5207\u7247\u7684\u5143\u7d20\u4e2a\u6570\u3002 \u5982\u679c\u4f60\u60f3\u521b\u5efa\u4e00\u4e2a slice1 \uff0c\u5b83\u4e0d\u5360\u7528\u6574\u4e2a\u6570\u7ec4\uff0c\u800c\u53ea\u662f\u5360\u7528\u4ee5 len \u4e3a\u4e2a\u6570\u4e2a\u9879\uff0c\u90a3\u4e48\u53ea\u8981\uff1a slice1 := make([]type, len, cap) \u3002 make() \u7684\u4f7f\u7528\u65b9\u5f0f\u662f\uff1a func make([]T, len, cap) \uff0c\u5176\u4e2d cap \u662f\u53ef\u9009\u53c2\u6570\u3002 \u6240\u4ee5\u4e0b\u9762\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u751f\u6210\u76f8\u540c\u7684\u5207\u7247: make ([] int , 50 , 100 ) new ([ 100 ] int )[ 0 : 50 ] \u4e0b\u56fe\u63cf\u8ff0\u4e86\u4f7f\u7528 make() \u65b9\u6cd5\u751f\u6210\u7684\u5207\u7247\u7684\u5185\u5b58\u7ed3\u6784\uff1a \u793a\u4f8b 7.8 make_slice.go package main import \"fmt\" func main () { var slice1 [] int = make ([] int , 10 ) // load the array/slice: for i := 0 ; i < len ( slice1 ); i ++ { slice1 [ i ] = 5 * i } // print the slice: for i := 0 ; i < len ( slice1 ); i ++ { fmt . Printf ( \"Slice at %d is %d\\n\" , i , slice1 [ i ]) } fmt . Printf ( \"\\nThe length of slice1 is %d\\n\" , len ( slice1 )) fmt . Printf ( \"The capacity of slice1 is %d\\n\" , cap ( slice1 )) } \u8f93\u51fa\uff1a Slice at 0 is 0 Slice at 1 is 5 Slice at 2 is 10 Slice at 3 is 15 Slice at 4 is 20 Slice at 5 is 25 Slice at 6 is 30 Slice at 7 is 35 Slice at 8 is 40 Slice at 9 is 45 The length of slice1 is 10 The capacity of slice1 is 10 \u56e0\u4e3a\u5b57\u7b26\u4e32\u662f\u7eaf\u7cb9\u4e0d\u53ef\u53d8\u7684\u5b57\u8282\u6570\u7ec4\uff0c\u5b83\u4eec\u4e5f\u53ef\u4ee5\u88ab\u5207\u5206\u6210\u5207\u7247\u3002 \u7ec3\u4e60 7.4\uff1a fibonacci_funcarray.go : \u4e3a\u7ec3\u4e60 7.3 \u5199\u4e00\u4e2a\u65b0\u7684\u7248\u672c\uff0c\u4e3b\u51fd\u6570\u8c03\u7528\u4e00\u4e2a\u4f7f\u7528\u5e8f\u5217\u4e2a\u6570\u4f5c\u4e3a\u53c2\u6570\u7684\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5927\u5c0f\u4e3a\u5e8f\u5217\u4e2a\u6570\u7684 Fibonacci \u5207\u7247\u3002","title":"7.2.3 \u7528 make() \u521b\u5efa\u4e00\u4e2a\u5207\u7247"},{"location":"07.2/#724-new-make","text":"\u770b\u8d77\u6765\u4e8c\u8005\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\uff0c\u90fd\u5728\u5806\u4e0a\u5206\u914d\u5185\u5b58\uff0c\u4f46\u662f\u5b83\u4eec\u7684\u884c\u4e3a\u4e0d\u540c\uff0c\u9002\u7528\u4e8e\u4e0d\u540c\u7684\u7c7b\u578b\u3002 new(T) \u4e3a\u6bcf\u4e2a\u65b0\u7684\u7c7b\u578b T \u5206\u914d\u4e00\u7247\u5185\u5b58\uff0c\u521d\u59cb\u5316\u4e3a 0 \u5e76\u4e14\u8fd4\u56de\u7c7b\u578b\u4e3a *T \u7684\u5185\u5b58\u5730\u5740\uff1a\u8fd9\u79cd\u65b9\u6cd5 \u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u7c7b\u578b\u4e3a T \uff0c\u503c\u4e3a 0 \u7684\u5730\u5740\u7684\u6307\u9488 \uff0c\u5b83\u9002\u7528\u4e8e\u503c\u7c7b\u578b\u5982\u6570\u7ec4\u548c\u7ed3\u6784\u4f53\uff08\u53c2\u89c1 \u7b2c 10 \u7ae0 \uff09\uff1b\u5b83\u76f8\u5f53\u4e8e &T{} \u3002 make(T) \u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\u4e3a T \u7684\u521d\u59cb\u503c \uff0c\u5b83\u53ea\u9002\u7528\u4e8e 3 \u79cd\u5185\u5efa\u7684\u5f15\u7528\u7c7b\u578b\uff1a\u5207\u7247\u3001 map \u548c channel \uff08\u53c2\u89c1 \u7b2c 8 \u7ae0 \u548c \u7b2c 13 \u7ae0 \uff09\u3002 \u6362\u8a00\u4e4b\uff0c new() \u51fd\u6570\u5206\u914d\u5185\u5b58\uff0c make() \u51fd\u6570\u521d\u59cb\u5316\uff1b\u4e0b\u56fe\u7ed9\u51fa\u4e86\u533a\u522b\uff1a \u5728\u56fe 7.3 \u7684\u7b2c\u4e00\u5e45\u56fe\u4e2d\uff1a var p * [] int = new ([] int ) // *p == nil; with len and cap 0 p := new ([] int ) \u5728\u7b2c\u4e8c\u5e45\u56fe\u4e2d\uff0c p := make([]int, 0) \uff0c\u5207\u7247 \u5df2\u7ecf\u88ab\u521d\u59cb\u5316\uff0c\u4f46\u662f\u6307\u5411\u4e00\u4e2a\u7a7a\u7684\u6570\u7ec4\u3002 \u4ee5\u4e0a\u4e24\u79cd\u65b9\u5f0f\u5b9e\u7528\u6027\u90fd\u4e0d\u9ad8\u3002\u4e0b\u9762\u7684\u65b9\u6cd5\uff1a var v [] int = make ([] int , 10 , 50 ) \u6216\u8005 v := make ([] int , 10 , 50 ) \u8fd9\u6837\u5206\u914d\u4e00\u4e2a\u6709 50 \u4e2a int \u503c\u7684\u6570\u7ec4\uff0c\u5e76\u4e14\u521b\u5efa\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3a 10\uff0c\u5bb9\u91cf\u4e3a 50 \u7684\u5207\u7247 v \uff0c\u8be5\u5207\u7247\u6307\u5411\u6570\u7ec4\u7684\u524d 10 \u4e2a\u5143\u7d20\u3002 \u95ee\u9898 7.3 \u7ed9\u5b9a s := make([]byte, 5) \uff0c len(s) \u548c cap(s) \u5206\u522b\u662f\u591a\u5c11\uff1f s = s[2:4] \uff0c len(s) \u548c cap(s) \u53c8\u5206\u522b\u662f\u591a\u5c11\uff1f \u95ee\u9898 7.4 \u5047\u8bbe s1 := []byte{'p', 'o', 'e', 'm'} \u4e14 s2 := s1[2:] \uff0c s2 \u7684\u503c\u662f\u591a\u5c11\uff1f\u5982\u679c\u6211\u4eec\u6267\u884c s2[1] = 't' \uff0c s1 \u548c s2 \u73b0\u5728\u7684\u503c\u53c8\u5206\u522b\u662f\u591a\u5c11\uff1f \u8bd1\u8005\u6ce8\uff1a\u5982\u4f55\u7406\u89e3 new\u3001make\u3001slice\u3001map\u3001channel \u7684\u5173\u7cfb 1.slice\u3001map \u4ee5\u53ca channel \u90fd\u662f golang \u5185\u5efa\u7684\u4e00\u79cd\u5f15\u7528\u7c7b\u578b\uff0c\u4e09\u8005\u5728\u5185\u5b58\u4e2d\u5b58\u5728\u591a\u4e2a\u7ec4\u6210\u90e8\u5206\uff0c \u9700\u8981\u5bf9\u5185\u5b58\u7ec4\u6210\u90e8\u5206\u521d\u59cb\u5316\u540e\u624d\u80fd\u4f7f\u7528\uff0c\u800c make \u5c31\u662f\u5bf9\u4e09\u8005\u8fdb\u884c\u521d\u59cb\u5316\u7684\u4e00\u79cd\u64cd\u4f5c\u65b9\u5f0f 2. new \u83b7\u53d6\u7684\u662f\u5b58\u50a8\u6307\u5b9a\u53d8\u91cf\u5185\u5b58\u5730\u5740\u7684\u4e00\u4e2a\u53d8\u91cf\uff0c\u5bf9\u4e8e\u53d8\u91cf\u5185\u90e8\u7ed3\u6784\u5e76\u4e0d\u4f1a\u6267\u884c\u76f8\u5e94\u7684\u521d\u59cb\u5316\u64cd\u4f5c\uff0c \u6240\u4ee5 slice\u3001map\u3001channel \u9700\u8981 make \u8fdb\u884c\u521d\u59cb\u5316\u5e76\u83b7\u53d6\u5bf9\u5e94\u7684\u5185\u5b58\u5730\u5740\uff0c\u800c\u975e new \u7b80\u5355\u7684\u83b7\u53d6\u5185\u5b58\u5730\u5740","title":"7.2.4 new() \u548c make() \u7684\u533a\u522b"},{"location":"07.2/#725","text":"\u548c\u6570\u7ec4\u4e00\u6837\uff0c\u5207\u7247\u901a\u5e38\u4e5f\u662f\u4e00\u7ef4\u7684\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u7531\u4e00\u7ef4\u7ec4\u5408\u6210\u9ad8\u7ef4\u3002\u901a\u8fc7\u5206\u7247\u7684\u5206\u7247\uff08\u6216\u8005\u5207\u7247\u7684\u6570\u7ec4\uff09\uff0c\u957f\u5ea6\u53ef\u4ee5\u4efb\u610f\u52a8\u6001\u53d8\u5316\uff0c\u6240\u4ee5 Go \u8bed\u8a00\u7684\u591a\u7ef4\u5207\u7247\u53ef\u4ee5\u4efb\u610f\u5207\u5206\u3002\u800c\u4e14\uff0c\u5185\u5c42\u7684\u5207\u7247\u5fc5\u987b\u5355\u72ec\u5206\u914d\uff08\u901a\u8fc7 make() \u51fd\u6570\uff09\u3002","title":"7.2.5 \u591a\u7ef4\u5207\u7247"},{"location":"07.2/#726-bytes","text":"\u7c7b\u578b []byte \u7684\u5207\u7247\u5341\u5206\u5e38\u89c1\uff0cGo \u8bed\u8a00\u6709\u4e00\u4e2a bytes \u5305\u4e13\u95e8\u7528\u6765\u63d0\u4f9b\u8fd9\u79cd\u7c7b\u578b\u7684\u64cd\u4f5c\u65b9\u6cd5\u3002 bytes \u5305\u548c\u5b57\u7b26\u4e32\u5305\u5341\u5206\u7c7b\u4f3c\uff08\u53c2\u89c1 \u7b2c 4.7 \u8282 \uff09\u3002\u800c\u4e14\u5b83\u8fd8\u5305\u542b\u4e00\u4e2a\u5341\u5206\u6709\u7528\u7684\u7c7b\u578b Buffer : import \"bytes\" type Buffer struct { ... } \u8fd9\u662f\u4e00\u4e2a\u957f\u5ea6\u53ef\u53d8\u7684 bytes \u7684 buffer\uff0c\u63d0\u4f9b Read() \u548c Write() \u65b9\u6cd5\uff0c\u56e0\u4e3a\u8bfb\u5199\u957f\u5ea6\u672a\u77e5\u7684 bytes \u6700\u597d\u4f7f\u7528 buffer \u3002 Buffer \u53ef\u4ee5\u8fd9\u6837\u5b9a\u4e49\uff1a var buffer bytes.Buffer \u3002 \u6216\u8005\u4f7f\u7528 new() \u83b7\u5f97\u4e00\u4e2a\u6307\u9488\uff1a var r *bytes.Buffer = new(bytes.Buffer) \u3002 \u6216\u8005\u901a\u8fc7\u51fd\u6570\uff1a func NewBuffer(buf []byte) *Buffer \uff0c\u521b\u5efa\u4e00\u4e2a Buffer \u5bf9\u8c61\u5e76\u4e14\u7528 buf \u521d\u59cb\u5316\u597d\uff1b NewBuffer \u6700\u597d\u7528\u5728\u4ece buf \u8bfb\u53d6\u7684\u65f6\u5019\u4f7f\u7528\u3002 \u901a\u8fc7 buffer \u4e32\u8054\u5b57\u7b26\u4e32 \u7c7b\u4f3c\u4e8e Java \u7684 StringBuilder \u7c7b\u3002 \u5728\u4e0b\u9762\u7684\u4ee3\u7801\u6bb5\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a buffer \uff0c\u901a\u8fc7 buffer.WriteString(s) \u65b9\u6cd5\u5c06\u5b57\u7b26\u4e32 s \u8ffd\u52a0\u5230\u540e\u9762\uff0c\u6700\u540e\u518d\u901a\u8fc7 buffer.String() \u65b9\u6cd5\u8f6c\u6362\u4e3a string \uff1a var buffer bytes . Buffer for { if s , ok := getNextString (); ok { //method getNextString() not shown here buffer . WriteString ( s ) } else { break } } fmt . Print ( buffer . String (), \"\\n\" ) \u8fd9\u79cd\u5b9e\u73b0\u65b9\u5f0f\u6bd4\u4f7f\u7528 += \u8981\u66f4\u8282\u7701\u5185\u5b58\u548c CPU\uff0c\u5c24\u5176\u662f\u8981\u4e32\u8054\u7684\u5b57\u7b26\u4e32\u6570\u76ee\u7279\u522b\u591a\u7684\u65f6\u5019\u3002 \u7ec3\u4e60 7.5 \u7ed9\u5b9a\u5207\u7247 sl \uff0c\u5c06\u4e00\u4e2a []byte \u6570\u7ec4\u8ffd\u52a0\u5230 sl \u540e\u9762\u3002\u5199\u4e00\u4e2a\u51fd\u6570 Append(slice, data []byte) []byte \uff0c\u8be5\u51fd\u6570\u5728 sl \u4e0d\u80fd\u5b58\u50a8\u66f4\u591a\u6570\u636e\u7684\u65f6\u5019\u81ea\u52a8\u6269\u5bb9\u3002 \u7ec3\u4e60 7.6 \u628a\u4e00\u4e2a\u7f13\u5b58 buf \u5206\u7247\u6210\u4e24\u4e2a\u5207\u7247\uff1a\u7b2c\u4e00\u4e2a\u662f\u524d n \u4e2a bytes\uff0c\u540e\u4e00\u4e2a\u662f\u5269\u4f59\u7684\uff0c\u7528\u4e00\u884c\u4ee3\u7801\u5b9e\u73b0\u3002","title":"7.2.6 bytes \u5305"},{"location":"07.2/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u58f0\u660e\u548c\u521d\u59cb\u5316 \u4e0b\u4e00\u8282\uff1a For-range \u7ed3\u6784","title":"\u94fe\u63a5"},{"location":"07.3/","text":"7.3 For-range \u7ed3\u6784 \u00b6 \u8fd9\u79cd\u6784\u5efa\u65b9\u6cd5\u53ef\u4ee5\u5e94\u7528\u4e8e\u6570\u7ec4\u548c\u5207\u7247: for ix , value := range slice1 { ... } \u7b2c\u4e00\u4e2a\u8fd4\u56de\u503c ix \u662f\u6570\u7ec4\u6216\u8005\u5207\u7247\u7684\u7d22\u5f15\uff0c\u7b2c\u4e8c\u4e2a\u662f\u5728\u8be5\u7d22\u5f15\u4f4d\u7f6e\u7684\u503c\uff1b\u4ed6\u4eec\u90fd\u662f\u4ec5\u5728 for \u5faa\u73af\u5185\u90e8\u53ef\u89c1\u7684\u5c40\u90e8\u53d8\u91cf\u3002 value \u53ea\u662f slice1 \u67d0\u4e2a\u7d22\u5f15\u4f4d\u7f6e\u7684\u503c\u7684\u4e00\u4e2a\u62f7\u8d1d\uff0c\u4e0d\u80fd\u7528\u6765\u4fee\u6539 slice1 \u8be5\u7d22\u5f15\u4f4d\u7f6e\u7684\u503c\u3002 \u793a\u4f8b 7.9 slices_forrange.go package main import \"fmt\" func main () { var slice1 [] int = make ([] int , 4 ) slice1 [ 0 ] = 1 slice1 [ 1 ] = 2 slice1 [ 2 ] = 3 slice1 [ 3 ] = 4 for ix , value := range slice1 { fmt . Printf ( \"Slice at %d is: %d\\n\" , ix , value ) } } \u793a\u4f8b 7.10 slices_forrange2.go package main import \"fmt\" func main () { seasons := [] string { \"Spring\" , \"Summer\" , \"Autumn\" , \"Winter\" } for ix , season := range seasons { fmt . Printf ( \"Season %d is: %s\\n\" , ix , season ) } var season string for _ , season = range seasons { fmt . Printf ( \"%s\\n\" , season ) } } slices_forrange2.go \u7ed9\u51fa\u4e86\u4e00\u4e2a\u5173\u4e8e\u5b57\u7b26\u4e32\u7684\u4f8b\u5b50\uff0c _ \u53ef\u4ee5\u7528\u4e8e\u5ffd\u7565\u7d22\u5f15\u3002 \u5982\u679c\u4f60\u53ea\u9700\u8981\u7d22\u5f15\uff0c\u4f60\u53ef\u4ee5\u5ffd\u7565\u7b2c\u4e8c\u4e2a\u53d8\u91cf\uff0c\u4f8b\u5982\uff1a for ix := range seasons { fmt . Printf ( \"%d\" , ix ) } // Output: 0 1 2 3 \u5982\u679c\u4f60\u9700\u8981\u4fee\u6539 seasons[ix] \u7684\u503c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u7248\u672c\u3002 \u591a\u7ef4\u5207\u7247\u4e0b\u7684 for-range\uff1a \u901a\u8fc7\u8ba1\u7b97\u884c\u6570\u548c\u77e9\u9635\u503c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u5199\u51fa\u5982\uff08\u53c2\u8003 \u7b2c 7.1.3 \u8282 \uff09\u7684 for \u5faa\u73af\u6765\uff0c\u4f8b\u5982\uff08\u53c2\u8003 \u7b2c 7.5 \u8282 \u7684\u4f8b\u5b50 multidim_array.go \uff09\uff1a for row := range screen { for column := range screen [ row ] { screen [ row ][ column ] = 1 } } \u95ee\u9898 7.5 \u5047\u8bbe\u6211\u4eec\u6709\u5982\u4e0b\u6570\u7ec4\uff1a items := [...]int{10, 20, 30, 40, 50} a) \u5982\u679c\u6211\u4eec\u5199\u4e86\u5982\u4e0b\u7684 for \u5faa\u73af\uff0c\u90a3\u4e48\u6267\u884c\u5b8c for \u5faa\u73af\u540e\u7684 items \u7684\u503c\u662f\u591a\u5c11\uff1f\u5982\u679c\u4f60\u4e0d\u786e\u5b9a\u7684\u8bdd\u53ef\u4ee5\u6d4b\u8bd5\u4e00\u4e0b:) for _ , item := range items { item *= 2 } b) \u5982\u679c a) \u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\uff0c\u5199\u4e00\u4e2a for \u5faa\u73af\u8ba9\u503c\u53ef\u4ee5\u53d8\u6210\u81ea\u8eab\u7684\u4e24\u500d\u3002 \u95ee\u9898 7.6 \u901a\u8fc7\u4f7f\u7528\u7701\u7565\u53f7\u64cd\u4f5c\u7b26 ... \u6765\u5b9e\u73b0\u7d2f\u52a0\u65b9\u6cd5\u3002 \u7ec3\u4e60 7.7 sum_array.go a) \u5199\u4e00\u4e2a Sum() \u51fd\u6570\uff0c\u4f20\u5165\u53c2\u6570\u4e3a\u4e00\u4e2a float32 \u6570\u7ec4\u6210\u7684\u6570\u7ec4 arrF \uff0c\u8fd4\u56de\u8be5\u6570\u7ec4\u7684\u6240\u6709\u6570\u5b57\u548c\u3002 \u5982\u679c\u628a\u6570\u7ec4\u4fee\u6539\u4e3a\u5207\u7247\u7684\u8bdd\u4ee3\u7801\u8981\u505a\u600e\u6837\u7684\u4fee\u6539\uff1f\u5982\u679c\u7528\u5207\u7247\u5f62\u5f0f\u65b9\u6cd5\u5b9e\u73b0\u4e0d\u540c\u957f\u5ea6\u6570\u7ec4\u7684\u7684\u548c\u5462\uff1f b) \u5199\u4e00\u4e2a SumAndAverage() \u65b9\u6cd5\uff0c\u8fd4\u56de\u4e24\u4e2a int \u548c float32 \u7c7b\u578b\u7684\u672a\u547d\u540d\u53d8\u91cf\u7684\u548c\u4e0e\u5e73\u5747\u503c\u3002 \u7ec3\u4e60 7.8 min_max.go \u5199\u4e00\u4e2a minSlice() \u65b9\u6cd5\uff0c\u4f20\u5165\u4e00\u4e2a int \u7684\u5207\u7247\u5e76\u4e14\u8fd4\u56de\u6700\u5c0f\u503c\uff0c\u518d\u5199\u4e00\u4e2a maxSlice() \u65b9\u6cd5\u8fd4\u56de\u6700\u5927\u503c\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5207\u7247 \u4e0b\u4e00\u8282\uff1a \u5207\u7247\u91cd\u7ec4 (reslice)","title":"7.3 For-range \u7ed3\u6784"},{"location":"07.3/#73-for-range","text":"\u8fd9\u79cd\u6784\u5efa\u65b9\u6cd5\u53ef\u4ee5\u5e94\u7528\u4e8e\u6570\u7ec4\u548c\u5207\u7247: for ix , value := range slice1 { ... } \u7b2c\u4e00\u4e2a\u8fd4\u56de\u503c ix \u662f\u6570\u7ec4\u6216\u8005\u5207\u7247\u7684\u7d22\u5f15\uff0c\u7b2c\u4e8c\u4e2a\u662f\u5728\u8be5\u7d22\u5f15\u4f4d\u7f6e\u7684\u503c\uff1b\u4ed6\u4eec\u90fd\u662f\u4ec5\u5728 for \u5faa\u73af\u5185\u90e8\u53ef\u89c1\u7684\u5c40\u90e8\u53d8\u91cf\u3002 value \u53ea\u662f slice1 \u67d0\u4e2a\u7d22\u5f15\u4f4d\u7f6e\u7684\u503c\u7684\u4e00\u4e2a\u62f7\u8d1d\uff0c\u4e0d\u80fd\u7528\u6765\u4fee\u6539 slice1 \u8be5\u7d22\u5f15\u4f4d\u7f6e\u7684\u503c\u3002 \u793a\u4f8b 7.9 slices_forrange.go package main import \"fmt\" func main () { var slice1 [] int = make ([] int , 4 ) slice1 [ 0 ] = 1 slice1 [ 1 ] = 2 slice1 [ 2 ] = 3 slice1 [ 3 ] = 4 for ix , value := range slice1 { fmt . Printf ( \"Slice at %d is: %d\\n\" , ix , value ) } } \u793a\u4f8b 7.10 slices_forrange2.go package main import \"fmt\" func main () { seasons := [] string { \"Spring\" , \"Summer\" , \"Autumn\" , \"Winter\" } for ix , season := range seasons { fmt . Printf ( \"Season %d is: %s\\n\" , ix , season ) } var season string for _ , season = range seasons { fmt . Printf ( \"%s\\n\" , season ) } } slices_forrange2.go \u7ed9\u51fa\u4e86\u4e00\u4e2a\u5173\u4e8e\u5b57\u7b26\u4e32\u7684\u4f8b\u5b50\uff0c _ \u53ef\u4ee5\u7528\u4e8e\u5ffd\u7565\u7d22\u5f15\u3002 \u5982\u679c\u4f60\u53ea\u9700\u8981\u7d22\u5f15\uff0c\u4f60\u53ef\u4ee5\u5ffd\u7565\u7b2c\u4e8c\u4e2a\u53d8\u91cf\uff0c\u4f8b\u5982\uff1a for ix := range seasons { fmt . Printf ( \"%d\" , ix ) } // Output: 0 1 2 3 \u5982\u679c\u4f60\u9700\u8981\u4fee\u6539 seasons[ix] \u7684\u503c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u7248\u672c\u3002 \u591a\u7ef4\u5207\u7247\u4e0b\u7684 for-range\uff1a \u901a\u8fc7\u8ba1\u7b97\u884c\u6570\u548c\u77e9\u9635\u503c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u5199\u51fa\u5982\uff08\u53c2\u8003 \u7b2c 7.1.3 \u8282 \uff09\u7684 for \u5faa\u73af\u6765\uff0c\u4f8b\u5982\uff08\u53c2\u8003 \u7b2c 7.5 \u8282 \u7684\u4f8b\u5b50 multidim_array.go \uff09\uff1a for row := range screen { for column := range screen [ row ] { screen [ row ][ column ] = 1 } } \u95ee\u9898 7.5 \u5047\u8bbe\u6211\u4eec\u6709\u5982\u4e0b\u6570\u7ec4\uff1a items := [...]int{10, 20, 30, 40, 50} a) \u5982\u679c\u6211\u4eec\u5199\u4e86\u5982\u4e0b\u7684 for \u5faa\u73af\uff0c\u90a3\u4e48\u6267\u884c\u5b8c for \u5faa\u73af\u540e\u7684 items \u7684\u503c\u662f\u591a\u5c11\uff1f\u5982\u679c\u4f60\u4e0d\u786e\u5b9a\u7684\u8bdd\u53ef\u4ee5\u6d4b\u8bd5\u4e00\u4e0b:) for _ , item := range items { item *= 2 } b) \u5982\u679c a) \u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\uff0c\u5199\u4e00\u4e2a for \u5faa\u73af\u8ba9\u503c\u53ef\u4ee5\u53d8\u6210\u81ea\u8eab\u7684\u4e24\u500d\u3002 \u95ee\u9898 7.6 \u901a\u8fc7\u4f7f\u7528\u7701\u7565\u53f7\u64cd\u4f5c\u7b26 ... \u6765\u5b9e\u73b0\u7d2f\u52a0\u65b9\u6cd5\u3002 \u7ec3\u4e60 7.7 sum_array.go a) \u5199\u4e00\u4e2a Sum() \u51fd\u6570\uff0c\u4f20\u5165\u53c2\u6570\u4e3a\u4e00\u4e2a float32 \u6570\u7ec4\u6210\u7684\u6570\u7ec4 arrF \uff0c\u8fd4\u56de\u8be5\u6570\u7ec4\u7684\u6240\u6709\u6570\u5b57\u548c\u3002 \u5982\u679c\u628a\u6570\u7ec4\u4fee\u6539\u4e3a\u5207\u7247\u7684\u8bdd\u4ee3\u7801\u8981\u505a\u600e\u6837\u7684\u4fee\u6539\uff1f\u5982\u679c\u7528\u5207\u7247\u5f62\u5f0f\u65b9\u6cd5\u5b9e\u73b0\u4e0d\u540c\u957f\u5ea6\u6570\u7ec4\u7684\u7684\u548c\u5462\uff1f b) \u5199\u4e00\u4e2a SumAndAverage() \u65b9\u6cd5\uff0c\u8fd4\u56de\u4e24\u4e2a int \u548c float32 \u7c7b\u578b\u7684\u672a\u547d\u540d\u53d8\u91cf\u7684\u548c\u4e0e\u5e73\u5747\u503c\u3002 \u7ec3\u4e60 7.8 min_max.go \u5199\u4e00\u4e2a minSlice() \u65b9\u6cd5\uff0c\u4f20\u5165\u4e00\u4e2a int \u7684\u5207\u7247\u5e76\u4e14\u8fd4\u56de\u6700\u5c0f\u503c\uff0c\u518d\u5199\u4e00\u4e2a maxSlice() \u65b9\u6cd5\u8fd4\u56de\u6700\u5927\u503c\u3002","title":"7.3 For-range \u7ed3\u6784"},{"location":"07.3/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5207\u7247 \u4e0b\u4e00\u8282\uff1a \u5207\u7247\u91cd\u7ec4 (reslice)","title":"\u94fe\u63a5"},{"location":"07.4/","text":"7.4 \u5207\u7247\u91cd\u7ec4 (reslice) \u00b6 \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u5207\u7247\u521b\u5efa\u7684\u65f6\u5019\u901a\u5e38\u6bd4\u76f8\u5173\u6570\u7ec4\u5c0f\uff0c\u4f8b\u5982\uff1a slice1 := make ([] type , start_length , capacity ) \u5176\u4e2d start_length \u4f5c\u4e3a\u5207\u7247\u521d\u59cb\u957f\u5ea6\u800c capacity \u4f5c\u4e3a\u76f8\u5173\u6570\u7ec4\u7684\u957f\u5ea6\u3002 \u8fd9\u4e48\u505a\u7684\u597d\u5904\u662f\u6211\u4eec\u7684\u5207\u7247\u5728\u8fbe\u5230\u5bb9\u91cf\u4e0a\u9650\u540e\u53ef\u4ee5\u6269\u5bb9\u3002\u6539\u53d8\u5207\u7247\u957f\u5ea6\u7684\u8fc7\u7a0b\u79f0\u4e4b\u4e3a\u5207\u7247\u91cd\u7ec4 reslicing \uff0c\u505a\u6cd5\u5982\u4e0b\uff1a slice1 = slice1[0:end] \uff0c\u5176\u4e2d end \u662f\u65b0\u7684\u672b\u5c3e\u7d22\u5f15\uff08\u5373\u957f\u5ea6\uff09\u3002 \u5c06\u5207\u7247\u6269\u5c55 1 \u4f4d\u53ef\u4ee5\u8fd9\u4e48\u505a\uff1a sl = sl [ 0 : len ( sl ) + 1 ] \u5207\u7247\u53ef\u4ee5\u53cd\u590d\u6269\u5c55\u76f4\u5230\u5360\u636e\u6574\u4e2a\u76f8\u5173\u6570\u7ec4\u3002 \u793a\u4f8b 7.11 reslicing.go package main import \"fmt\" func main () { slice1 := make ([] int , 0 , 10 ) // load the slice, cap(slice1) is 10: for i := 0 ; i < cap ( slice1 ); i ++ { slice1 = slice1 [ 0 : i + 1 ] slice1 [ i ] = i fmt . Printf ( \"The length of slice is %d\\n\" , len ( slice1 )) } // print the slice: for i := 0 ; i < len ( slice1 ); i ++ { fmt . Printf ( \"Slice at %d is %d\\n\" , i , slice1 [ i ]) } } \u8f93\u51fa\u7ed3\u679c\uff1a The length of slice is 1 The length of slice is 2 The length of slice is 3 The length of slice is 4 The length of slice is 5 The length of slice is 6 The length of slice is 7 The length of slice is 8 The length of slice is 9 The length of slice is 10 Slice at 0 is 0 Slice at 1 is 1 Slice at 2 is 2 Slice at 3 is 3 Slice at 4 is 4 Slice at 5 is 5 Slice at 6 is 6 Slice at 7 is 7 Slice at 8 is 8 Slice at 9 is 9 \u53e6\u4e00\u4e2a\u4f8b\u5b50\uff1a var ar = [ 10 ] int { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } var a = ar [ 5 : 7 ] // reference to subarray {5,6} - len(a) is 2 and cap(a) is 5 \u5c06 a \u91cd\u65b0\u5206\u7247\uff1a a = a [ 0 : 4 ] // ref of subarray {5,6,7,8} - len(a) is now 4 but cap(a) is still 5 \u95ee\u9898 7.7 1) \u5982\u679c a \u662f\u4e00\u4e2a\u5207\u7247\uff0c\u90a3\u4e48 a[n:n] \u7684\u957f\u5ea6\u662f\u591a\u5c11\uff1f 2) a[n:n+1] \u7684\u957f\u5ea6\u53c8\u662f\u591a\u5c11\uff1f \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a For-range \u7ed3\u6784 \u4e0b\u4e00\u8282\uff1a \u5207\u7247\u7684\u590d\u5236\u4e0e\u8ffd\u52a0","title":"7.4 \u5207\u7247\u91cd\u7ec4\uff08reslice\uff09"},{"location":"07.4/#74-reslice","text":"\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u5207\u7247\u521b\u5efa\u7684\u65f6\u5019\u901a\u5e38\u6bd4\u76f8\u5173\u6570\u7ec4\u5c0f\uff0c\u4f8b\u5982\uff1a slice1 := make ([] type , start_length , capacity ) \u5176\u4e2d start_length \u4f5c\u4e3a\u5207\u7247\u521d\u59cb\u957f\u5ea6\u800c capacity \u4f5c\u4e3a\u76f8\u5173\u6570\u7ec4\u7684\u957f\u5ea6\u3002 \u8fd9\u4e48\u505a\u7684\u597d\u5904\u662f\u6211\u4eec\u7684\u5207\u7247\u5728\u8fbe\u5230\u5bb9\u91cf\u4e0a\u9650\u540e\u53ef\u4ee5\u6269\u5bb9\u3002\u6539\u53d8\u5207\u7247\u957f\u5ea6\u7684\u8fc7\u7a0b\u79f0\u4e4b\u4e3a\u5207\u7247\u91cd\u7ec4 reslicing \uff0c\u505a\u6cd5\u5982\u4e0b\uff1a slice1 = slice1[0:end] \uff0c\u5176\u4e2d end \u662f\u65b0\u7684\u672b\u5c3e\u7d22\u5f15\uff08\u5373\u957f\u5ea6\uff09\u3002 \u5c06\u5207\u7247\u6269\u5c55 1 \u4f4d\u53ef\u4ee5\u8fd9\u4e48\u505a\uff1a sl = sl [ 0 : len ( sl ) + 1 ] \u5207\u7247\u53ef\u4ee5\u53cd\u590d\u6269\u5c55\u76f4\u5230\u5360\u636e\u6574\u4e2a\u76f8\u5173\u6570\u7ec4\u3002 \u793a\u4f8b 7.11 reslicing.go package main import \"fmt\" func main () { slice1 := make ([] int , 0 , 10 ) // load the slice, cap(slice1) is 10: for i := 0 ; i < cap ( slice1 ); i ++ { slice1 = slice1 [ 0 : i + 1 ] slice1 [ i ] = i fmt . Printf ( \"The length of slice is %d\\n\" , len ( slice1 )) } // print the slice: for i := 0 ; i < len ( slice1 ); i ++ { fmt . Printf ( \"Slice at %d is %d\\n\" , i , slice1 [ i ]) } } \u8f93\u51fa\u7ed3\u679c\uff1a The length of slice is 1 The length of slice is 2 The length of slice is 3 The length of slice is 4 The length of slice is 5 The length of slice is 6 The length of slice is 7 The length of slice is 8 The length of slice is 9 The length of slice is 10 Slice at 0 is 0 Slice at 1 is 1 Slice at 2 is 2 Slice at 3 is 3 Slice at 4 is 4 Slice at 5 is 5 Slice at 6 is 6 Slice at 7 is 7 Slice at 8 is 8 Slice at 9 is 9 \u53e6\u4e00\u4e2a\u4f8b\u5b50\uff1a var ar = [ 10 ] int { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } var a = ar [ 5 : 7 ] // reference to subarray {5,6} - len(a) is 2 and cap(a) is 5 \u5c06 a \u91cd\u65b0\u5206\u7247\uff1a a = a [ 0 : 4 ] // ref of subarray {5,6,7,8} - len(a) is now 4 but cap(a) is still 5 \u95ee\u9898 7.7 1) \u5982\u679c a \u662f\u4e00\u4e2a\u5207\u7247\uff0c\u90a3\u4e48 a[n:n] \u7684\u957f\u5ea6\u662f\u591a\u5c11\uff1f 2) a[n:n+1] \u7684\u957f\u5ea6\u53c8\u662f\u591a\u5c11\uff1f","title":"7.4 \u5207\u7247\u91cd\u7ec4 (reslice)"},{"location":"07.4/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a For-range \u7ed3\u6784 \u4e0b\u4e00\u8282\uff1a \u5207\u7247\u7684\u590d\u5236\u4e0e\u8ffd\u52a0","title":"\u94fe\u63a5"},{"location":"07.5/","text":"7.5 \u5207\u7247\u7684\u590d\u5236\u4e0e\u8ffd\u52a0 \u00b6 \u5982\u679c\u60f3\u589e\u52a0\u5207\u7247\u7684\u5bb9\u91cf\uff0c\u6211\u4eec\u5fc5\u987b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u66f4\u5927\u7684\u5207\u7247\u5e76\u628a\u539f\u5206\u7247\u7684\u5185\u5bb9\u90fd\u62f7\u8d1d\u8fc7\u6765\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u63cf\u8ff0\u4e86\u4ece\u62f7\u8d1d\u5207\u7247\u7684 copy \u51fd\u6570\u548c\u5411\u5207\u7247\u8ffd\u52a0\u65b0\u5143\u7d20\u7684 append() \u51fd\u6570\u3002 \u793a\u4f8b 7.12 copy_append_slice.go package main import \"fmt\" func main () { slFrom := [] int { 1 , 2 , 3 } slTo := make ([] int , 10 ) n := copy ( slTo , slFrom ) fmt . Println ( slTo ) fmt . Printf ( \"Copied %d elements\\n\" , n ) // n == 3 sl3 := [] int { 1 , 2 , 3 } sl3 = append ( sl3 , 4 , 5 , 6 ) fmt . Println ( sl3 ) } func append(s[]T, x ...T) []T \u5176\u4e2d append() \u65b9\u6cd5\u5c06 0 \u4e2a\u6216\u591a\u4e2a\u5177\u6709\u76f8\u540c\u7c7b\u578b s \u7684\u5143\u7d20\u8ffd\u52a0\u5230\u5207\u7247\u540e\u9762\u5e76\u4e14\u8fd4\u56de\u65b0\u7684\u5207\u7247\uff1b\u8ffd\u52a0\u7684\u5143\u7d20\u5fc5\u987b\u548c\u539f\u5207\u7247\u7684\u5143\u7d20\u662f\u540c\u7c7b\u578b\u3002\u5982\u679c s \u7684\u5bb9\u91cf\u4e0d\u8db3\u4ee5\u5b58\u50a8\u65b0\u589e\u5143\u7d20\uff0c append() \u4f1a\u5206\u914d\u65b0\u7684\u5207\u7247\u6765\u4fdd\u8bc1\u5df2\u6709\u5207\u7247\u5143\u7d20\u548c\u65b0\u589e\u5143\u7d20\u7684\u5b58\u50a8\u3002\u56e0\u6b64\uff0c\u8fd4\u56de\u7684\u5207\u7247\u53ef\u80fd\u5df2\u7ecf\u6307\u5411\u4e00\u4e2a\u4e0d\u540c\u7684\u76f8\u5173\u6570\u7ec4\u4e86\u3002 append() \u65b9\u6cd5\u603b\u662f\u8fd4\u56de\u6210\u529f\uff0c\u9664\u975e\u7cfb\u7edf\u5185\u5b58\u8017\u5c3d\u4e86\u3002 \u5982\u679c\u4f60\u60f3\u5c06\u5207\u7247 y \u8ffd\u52a0\u5230\u5207\u7247 x \u540e\u9762\uff0c\u53ea\u8981\u5c06\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6269\u5c55\u6210\u4e00\u4e2a\u5217\u8868\u5373\u53ef\uff1a x = append(x, y...) \u3002 \u6ce8\u610f \uff1a append() \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u5f88\u597d\u7528\uff0c\u4f46\u662f\u5982\u679c\u4f60\u60f3\u5b8c\u5168\u638c\u63a7\u6574\u4e2a\u8ffd\u52a0\u8fc7\u7a0b\uff0c\u4f60\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u8fd9\u6837\u7684 AppendByte() \u65b9\u6cd5\uff1a func AppendByte ( slice [] byte , data ... byte ) [] byte { m := len ( slice ) n := m + len ( data ) if n > cap ( slice ) { // if necessary, reallocate // allocate double what's needed, for future growth. newSlice := make ([] byte , ( n + 1 ) * 2 ) copy ( newSlice , slice ) slice = newSlice } slice = slice [ 0 : n ] copy ( slice [ m : n ], data ) return slice } func copy(dst, src []T) int \u65b9\u6cd5\u5c06\u7c7b\u578b\u4e3a T \u7684\u5207\u7247\u4ece\u6e90\u5730\u5740 src \u62f7\u8d1d\u5230\u76ee\u6807\u5730\u5740 dst \uff0c\u8986\u76d6 dst \u7684\u76f8\u5173\u5143\u7d20\uff0c\u5e76\u4e14\u8fd4\u56de\u62f7\u8d1d\u7684\u5143\u7d20\u4e2a\u6570\u3002\u6e90\u5730\u5740\u548c\u76ee\u6807\u5730\u5740\u53ef\u80fd\u4f1a\u6709\u91cd\u53e0\u3002\u62f7\u8d1d\u4e2a\u6570\u662f src \u548c dst \u7684\u957f\u5ea6\u6700\u5c0f\u503c\u3002\u5982\u679c src \u662f\u5b57\u7b26\u4e32\u90a3\u4e48\u5143\u7d20\u7c7b\u578b\u5c31\u662f byte \u3002\u5982\u679c\u4f60\u8fd8\u60f3\u7ee7\u7eed\u4f7f\u7528 src \uff0c\u5728\u62f7\u8d1d\u7ed3\u675f\u540e\u6267\u884c src = dst \u3002 \u7ec3\u4e60 7.9 magnify_slice.go \u7ed9\u5b9a\u4e00\u4e2a\u5207\u7247 s []int \u548c\u4e00\u4e2a int \u7c7b\u578b\u7684\u56e0\u5b50 factor \uff0c\u6269\u5c55 s \u4f7f\u5176\u957f\u5ea6\u4e3a len(s) * factor \u3002 **\u7ec3\u4e60 7.10 ** filter_slice.go \u7528\u987a\u5e8f\u51fd\u6570\u8fc7\u6ee4\u5bb9\u5668\uff1a s \u662f\u524d 10 \u4e2a\u6574\u578b\u7684\u5207\u7247\u3002\u6784\u9020\u4e00\u4e2a\u51fd\u6570 Filter \uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f s \uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a fn func(int) bool \uff0c\u8fd4\u56de\u6ee1\u8db3\u51fd\u6570 fn \u7684\u5143\u7d20\u5207\u7247\u3002\u901a\u8fc7 fn \u6d4b\u8bd5\u65b9\u6cd5\u6d4b\u8bd5\u5f53\u6574\u578b\u503c\u662f\u5076\u6570\u65f6\u7684\u60c5\u51b5\u3002 \u7ec3\u4e60 7.11 insert_slice.go \u5199\u4e00\u4e2a\u51fd\u6570 InsertStringSlice() \u5c06\u5207\u7247\u63d2\u5165\u5230\u53e6\u4e00\u4e2a\u5207\u7247\u7684\u6307\u5b9a\u4f4d\u7f6e\u3002 \u7ec3\u4e60 7.12 remove_slice.go \u5199\u4e00\u4e2a\u51fd\u6570 RemoveStringSlice() \u5c06\u4ece start \u5230 end \u7d22\u5f15\u7684\u5143\u7d20\u4ece\u5207\u7247\u4e2d\u79fb\u9664\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5207\u7247\u91cd\u7ec4 (reslice) \u4e0b\u4e00\u8282\uff1a \u5b57\u7b26\u4e32\u3001\u6570\u7ec4\u548c\u5207\u7247\u7684\u5e94\u7528","title":"7.5 \u5207\u7247\u7684\u590d\u5236\u4e0e\u8ffd\u52a0"},{"location":"07.5/#75","text":"\u5982\u679c\u60f3\u589e\u52a0\u5207\u7247\u7684\u5bb9\u91cf\uff0c\u6211\u4eec\u5fc5\u987b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u66f4\u5927\u7684\u5207\u7247\u5e76\u628a\u539f\u5206\u7247\u7684\u5185\u5bb9\u90fd\u62f7\u8d1d\u8fc7\u6765\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u63cf\u8ff0\u4e86\u4ece\u62f7\u8d1d\u5207\u7247\u7684 copy \u51fd\u6570\u548c\u5411\u5207\u7247\u8ffd\u52a0\u65b0\u5143\u7d20\u7684 append() \u51fd\u6570\u3002 \u793a\u4f8b 7.12 copy_append_slice.go package main import \"fmt\" func main () { slFrom := [] int { 1 , 2 , 3 } slTo := make ([] int , 10 ) n := copy ( slTo , slFrom ) fmt . Println ( slTo ) fmt . Printf ( \"Copied %d elements\\n\" , n ) // n == 3 sl3 := [] int { 1 , 2 , 3 } sl3 = append ( sl3 , 4 , 5 , 6 ) fmt . Println ( sl3 ) } func append(s[]T, x ...T) []T \u5176\u4e2d append() \u65b9\u6cd5\u5c06 0 \u4e2a\u6216\u591a\u4e2a\u5177\u6709\u76f8\u540c\u7c7b\u578b s \u7684\u5143\u7d20\u8ffd\u52a0\u5230\u5207\u7247\u540e\u9762\u5e76\u4e14\u8fd4\u56de\u65b0\u7684\u5207\u7247\uff1b\u8ffd\u52a0\u7684\u5143\u7d20\u5fc5\u987b\u548c\u539f\u5207\u7247\u7684\u5143\u7d20\u662f\u540c\u7c7b\u578b\u3002\u5982\u679c s \u7684\u5bb9\u91cf\u4e0d\u8db3\u4ee5\u5b58\u50a8\u65b0\u589e\u5143\u7d20\uff0c append() \u4f1a\u5206\u914d\u65b0\u7684\u5207\u7247\u6765\u4fdd\u8bc1\u5df2\u6709\u5207\u7247\u5143\u7d20\u548c\u65b0\u589e\u5143\u7d20\u7684\u5b58\u50a8\u3002\u56e0\u6b64\uff0c\u8fd4\u56de\u7684\u5207\u7247\u53ef\u80fd\u5df2\u7ecf\u6307\u5411\u4e00\u4e2a\u4e0d\u540c\u7684\u76f8\u5173\u6570\u7ec4\u4e86\u3002 append() \u65b9\u6cd5\u603b\u662f\u8fd4\u56de\u6210\u529f\uff0c\u9664\u975e\u7cfb\u7edf\u5185\u5b58\u8017\u5c3d\u4e86\u3002 \u5982\u679c\u4f60\u60f3\u5c06\u5207\u7247 y \u8ffd\u52a0\u5230\u5207\u7247 x \u540e\u9762\uff0c\u53ea\u8981\u5c06\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6269\u5c55\u6210\u4e00\u4e2a\u5217\u8868\u5373\u53ef\uff1a x = append(x, y...) \u3002 \u6ce8\u610f \uff1a append() \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u5f88\u597d\u7528\uff0c\u4f46\u662f\u5982\u679c\u4f60\u60f3\u5b8c\u5168\u638c\u63a7\u6574\u4e2a\u8ffd\u52a0\u8fc7\u7a0b\uff0c\u4f60\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u8fd9\u6837\u7684 AppendByte() \u65b9\u6cd5\uff1a func AppendByte ( slice [] byte , data ... byte ) [] byte { m := len ( slice ) n := m + len ( data ) if n > cap ( slice ) { // if necessary, reallocate // allocate double what's needed, for future growth. newSlice := make ([] byte , ( n + 1 ) * 2 ) copy ( newSlice , slice ) slice = newSlice } slice = slice [ 0 : n ] copy ( slice [ m : n ], data ) return slice } func copy(dst, src []T) int \u65b9\u6cd5\u5c06\u7c7b\u578b\u4e3a T \u7684\u5207\u7247\u4ece\u6e90\u5730\u5740 src \u62f7\u8d1d\u5230\u76ee\u6807\u5730\u5740 dst \uff0c\u8986\u76d6 dst \u7684\u76f8\u5173\u5143\u7d20\uff0c\u5e76\u4e14\u8fd4\u56de\u62f7\u8d1d\u7684\u5143\u7d20\u4e2a\u6570\u3002\u6e90\u5730\u5740\u548c\u76ee\u6807\u5730\u5740\u53ef\u80fd\u4f1a\u6709\u91cd\u53e0\u3002\u62f7\u8d1d\u4e2a\u6570\u662f src \u548c dst \u7684\u957f\u5ea6\u6700\u5c0f\u503c\u3002\u5982\u679c src \u662f\u5b57\u7b26\u4e32\u90a3\u4e48\u5143\u7d20\u7c7b\u578b\u5c31\u662f byte \u3002\u5982\u679c\u4f60\u8fd8\u60f3\u7ee7\u7eed\u4f7f\u7528 src \uff0c\u5728\u62f7\u8d1d\u7ed3\u675f\u540e\u6267\u884c src = dst \u3002 \u7ec3\u4e60 7.9 magnify_slice.go \u7ed9\u5b9a\u4e00\u4e2a\u5207\u7247 s []int \u548c\u4e00\u4e2a int \u7c7b\u578b\u7684\u56e0\u5b50 factor \uff0c\u6269\u5c55 s \u4f7f\u5176\u957f\u5ea6\u4e3a len(s) * factor \u3002 **\u7ec3\u4e60 7.10 ** filter_slice.go \u7528\u987a\u5e8f\u51fd\u6570\u8fc7\u6ee4\u5bb9\u5668\uff1a s \u662f\u524d 10 \u4e2a\u6574\u578b\u7684\u5207\u7247\u3002\u6784\u9020\u4e00\u4e2a\u51fd\u6570 Filter \uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f s \uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a fn func(int) bool \uff0c\u8fd4\u56de\u6ee1\u8db3\u51fd\u6570 fn \u7684\u5143\u7d20\u5207\u7247\u3002\u901a\u8fc7 fn \u6d4b\u8bd5\u65b9\u6cd5\u6d4b\u8bd5\u5f53\u6574\u578b\u503c\u662f\u5076\u6570\u65f6\u7684\u60c5\u51b5\u3002 \u7ec3\u4e60 7.11 insert_slice.go \u5199\u4e00\u4e2a\u51fd\u6570 InsertStringSlice() \u5c06\u5207\u7247\u63d2\u5165\u5230\u53e6\u4e00\u4e2a\u5207\u7247\u7684\u6307\u5b9a\u4f4d\u7f6e\u3002 \u7ec3\u4e60 7.12 remove_slice.go \u5199\u4e00\u4e2a\u51fd\u6570 RemoveStringSlice() \u5c06\u4ece start \u5230 end \u7d22\u5f15\u7684\u5143\u7d20\u4ece\u5207\u7247\u4e2d\u79fb\u9664\u3002","title":"7.5 \u5207\u7247\u7684\u590d\u5236\u4e0e\u8ffd\u52a0"},{"location":"07.5/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5207\u7247\u91cd\u7ec4 (reslice) \u4e0b\u4e00\u8282\uff1a \u5b57\u7b26\u4e32\u3001\u6570\u7ec4\u548c\u5207\u7247\u7684\u5e94\u7528","title":"\u94fe\u63a5"},{"location":"07.6/","text":"7.6 \u5b57\u7b26\u4e32\u3001\u6570\u7ec4\u548c\u5207\u7247\u7684\u5e94\u7528 \u00b6 7.6.1 \u4ece\u5b57\u7b26\u4e32\u751f\u6210\u5b57\u8282\u5207\u7247 \u00b6 \u5047\u8bbe s \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u5b57\u8282\u6570\u7ec4\uff09\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 c := []byte(s) \u6765\u83b7\u53d6\u4e00\u4e2a\u5b57\u8282\u7684\u5207\u7247 c \u3002\u53e6\u5916\uff0c\u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7 copy() \u51fd\u6570\u6765\u8fbe\u5230\u76f8\u540c\u7684\u76ee\u7684\uff1a copy(dst []byte, src string) \u3002 \u540c\u6837\u7684\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 for-range \u6765\u83b7\u5f97\u6bcf\u4e2a\u5143\u7d20\uff08Listing 7.13 \u2014 for_string.go \uff09\uff1a package main import \"fmt\" func main () { s := \"\\u00ff\\u754c\" for i , c := range s { fmt . Printf ( \"%d:%c \" , i , c ) } } \u8f93\u51fa\uff1a 0:\u00ff 2:\u754c \u6211\u4eec\u77e5\u9053\uff0cUnicode \u5b57\u7b26\u4f1a\u5360\u7528 2 \u4e2a\u5b57\u8282\uff0c\u6709\u4e9b\u751a\u81f3\u9700\u8981 3 \u4e2a\u6216\u8005 4 \u4e2a\u5b57\u8282\u6765\u8fdb\u884c\u8868\u793a\u3002\u5982\u679c\u53d1\u73b0\u9519\u8bef\u7684 UTF8 \u5b57\u7b26\uff0c\u5219\u8be5\u5b57\u7b26\u4f1a\u88ab\u8bbe\u7f6e\u4e3a U+FFFD \u5e76\u4e14\u7d22\u5f15\u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u5b57\u8282\u3002\u548c\u5b57\u7b26\u4e32\u8f6c\u6362\u4e00\u6837\uff0c\u60a8\u540c\u6837\u53ef\u4ee5\u4f7f\u7528 c := []int32(s) \u8bed\u6cd5\uff0c\u8fd9\u6837\u5207\u7247\u4e2d\u7684\u6bcf\u4e2a int \u90fd\u4f1a\u5305\u542b\u5bf9\u5e94\u7684 Unicode \u4ee3\u7801\uff0c\u56e0\u4e3a\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u6b21\u5b57\u7b26\u90fd\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u6574\u6570\u3002\u7c7b\u4f3c\u7684\uff0c\u60a8\u4e5f\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5143\u7d20\u7c7b\u578b\u4e3a rune \u7684\u5207\u7247\uff1a r := []rune(s) \u3002 \u53ef\u4ee5\u901a\u8fc7\u4ee3\u7801 len([]int32(s)) \u6765\u83b7\u5f97\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u6570\u91cf\uff0c\u4f46\u4f7f\u7528 utf8.RuneCountInString(s) \u6548\u7387\u4f1a\u66f4\u9ad8\u4e00\u70b9\u3002(\u53c2\u8003 count_characters.go ) \u60a8\u8fd8\u53ef\u4ee5\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u8ffd\u52a0\u5230\u67d0\u4e00\u4e2a\u5b57\u8282\u5207\u7247\u7684\u5c3e\u90e8\uff1a var b [] byte var s string b = append ( b , s ... ) 7.6.2 \u83b7\u53d6\u5b57\u7b26\u4e32\u7684\u67d0\u4e00\u90e8\u5206 \u00b6 \u4f7f\u7528 substr := str[start:end] \u53ef\u4ee5\u4ece\u5b57\u7b26\u4e32 str \u83b7\u53d6\u5230\u4ece\u7d22\u5f15 start \u5f00\u59cb\u5230 end-1 \u4f4d\u7f6e\u7684\u5b50\u5b57\u7b26\u4e32\u3002\u540c\u6837\u7684\uff0c str[start:] \u5219\u8868\u793a\u83b7\u53d6\u4ece start \u5f00\u59cb\u5230 len(str)-1 \u4f4d\u7f6e\u7684\u5b50\u5b57\u7b26\u4e32\u3002\u800c str[:end] \u8868\u793a\u83b7\u53d6\u4ece 0 \u5f00\u59cb\u5230 end-1 \u7684\u5b50\u5b57\u7b26\u4e32\u3002 7.6.3 \u5b57\u7b26\u4e32\u548c\u5207\u7247\u7684\u5185\u5b58\u7ed3\u6784 \u00b6 \u5728\u5185\u5b58\u4e2d\uff0c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u53cc\u5b57\u7ed3\u6784\uff0c\u5373\u4e00\u4e2a\u6307\u5411\u5b9e\u9645\u6570\u636e\u7684\u6307\u9488\u548c\u8bb0\u5f55\u5b57\u7b26\u4e32\u957f\u5ea6\u7684\u6574\u6570\uff08\u89c1\u56fe 7.4\uff09\u3002\u56e0\u4e3a\u6307\u9488\u5bf9\u7528\u6237\u6765\u8bf4\u662f\u5b8c\u5168\u4e0d\u53ef\u89c1\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f9d\u65e7\u628a\u5b57\u7b26\u4e32\u770b\u505a\u662f\u4e00\u4e2a\u503c\u7c7b\u578b\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\u3002 \u5b57\u7b26\u4e32 string s = \"hello\" \u548c\u5b50\u5b57\u7b26\u4e32 t = s[2:3] \u5728\u5185\u5b58\u4e2d\u7684\u7ed3\u6784\u53ef\u4ee5\u7528\u4e0b\u56fe\u8868\u793a\uff1a 7.6.4 \u4fee\u6539\u5b57\u7b26\u4e32\u4e2d\u7684\u67d0\u4e2a\u5b57\u7b26 \u00b6 Go \u8bed\u8a00\u4e2d\u7684\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4 str[index] \u8fd9\u6837\u7684\u8868\u8fbe\u5f0f\u662f\u4e0d\u53ef\u4ee5\u88ab\u653e\u5728\u7b49\u53f7\u5de6\u4fa7\u7684\u3002\u5982\u679c\u5c1d\u8bd5\u8fd0\u884c str[i] = 'D' \u4f1a\u5f97\u5230\u9519\u8bef\uff1a cannot assign to str[i] \u3002 \u56e0\u6b64\uff0c\u60a8\u5fc5\u987b\u5148\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5b57\u8282\u6570\u7ec4\uff0c\u7136\u540e\u518d\u901a\u8fc7\u4fee\u6539\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u503c\u6765\u8fbe\u5230\u4fee\u6539\u5b57\u7b26\u4e32\u7684\u76ee\u7684\uff0c\u6700\u540e\u5c06\u5b57\u8282\u6570\u7ec4\u8f6c\u6362\u56de\u5b57\u7b26\u4e32\u683c\u5f0f\u3002 \u4f8b\u5982\uff0c\u5c06\u5b57\u7b26\u4e32 \"hello\" \u8f6c\u6362\u4e3a \"cello\" \uff1a s := \"hello\" c := [] byte ( s ) c [ 0 ] = 'c' s2 := string ( c ) // s2 == \"cello\" \u6240\u4ee5\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u64cd\u4f5c\u5207\u7247\u6765\u5b8c\u6210\u5bf9\u5b57\u7b26\u4e32\u7684\u64cd\u4f5c\u3002 7.6.5 \u5b57\u8282\u6570\u7ec4\u5bf9\u6bd4\u51fd\u6570 \u00b6 \u4e0b\u9762\u7684 Compare() \u51fd\u6570\u4f1a\u8fd4\u56de\u4e24\u4e2a\u5b57\u8282\u6570\u7ec4\u5b57\u5178\u987a\u5e8f\u7684\u6574\u6570\u5bf9\u6bd4\u7ed3\u679c\uff0c\u5373 0 if a == b, -1 if a < b, 1 if a > b \u3002 func Compare ( a , b [] byte ) int { for i := 0 ; i < len ( a ) && i < len ( b ); i ++ { switch { case a [ i ] > b [ i ]: return 1 case a [ i ] < b [ i ]: return - 1 } } // \u6570\u7ec4\u7684\u957f\u5ea6\u53ef\u80fd\u4e0d\u540c switch { case len ( a ) < len ( b ): return - 1 case len ( a ) > len ( b ): return 1 } return 0 // \u6570\u7ec4\u76f8\u7b49 } 7.6.6 \u641c\u7d22\u53ca\u6392\u5e8f\u5207\u7247\u548c\u6570\u7ec4 \u00b6 \u6807\u51c6\u5e93\u63d0\u4f9b\u4e86 sort \u5305\u6765\u5b9e\u73b0\u5e38\u89c1\u7684\u641c\u7d22\u548c\u6392\u5e8f\u64cd\u4f5c\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 sort \u5305\u4e2d\u7684\u51fd\u6570 func Ints(a []int) \u6765\u5b9e\u73b0\u5bf9 int \u7c7b\u578b\u7684\u5207\u7247\u6392\u5e8f\u3002\u4f8b\u5982 sort.Ints(arri) \uff0c\u5176\u4e2d\u53d8\u91cf arri \u5c31\u662f\u9700\u8981\u88ab\u5347\u5e8f\u6392\u5e8f\u7684\u6570\u7ec4\u6216\u5207\u7247\u3002\u4e3a\u4e86\u68c0\u67e5\u67d0\u4e2a\u6570\u7ec4\u662f\u5426\u5df2\u7ecf\u88ab\u6392\u5e8f\uff0c\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570 IntsAreSorted(a []int) bool \u6765\u68c0\u67e5\uff0c\u5982\u679c\u8fd4\u56de true \u5219\u8868\u793a\u5df2\u7ecf\u88ab\u6392\u5e8f\u3002 \u7c7b\u4f3c\u7684\uff0c\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570 func Float64s(a []float64) \u6765\u6392\u5e8f float64 \u7684\u5143\u7d20\uff0c\u6216\u4f7f\u7528\u51fd\u6570 func Strings(a []string) \u6392\u5e8f\u5b57\u7b26\u4e32\u5143\u7d20\u3002 \u60f3\u8981\u5728\u6570\u7ec4\u6216\u5207\u7247\u4e2d\u641c\u7d22\u4e00\u4e2a\u5143\u7d20\uff0c\u8be5\u6570\u7ec4\u6216\u5207\u7247\u5fc5\u987b\u5148\u88ab\u6392\u5e8f\uff08\u56e0\u4e3a\u6807\u51c6\u5e93\u7684\u641c\u7d22\u7b97\u6cd5\u4f7f\u7528\u7684\u662f\u4e8c\u5206\u6cd5\uff09\u3002\u7136\u540e\uff0c\u60a8\u5c31\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570 func SearchInts(a []int, n int) int \u8fdb\u884c\u641c\u7d22\uff0c\u5e76\u8fd4\u56de\u5bf9\u5e94\u7ed3\u679c\u7684\u7d22\u5f15\u503c\u3002 \u5f53\u7136\uff0c\u8fd8\u53ef\u4ee5\u641c\u7d22 float64 \u548c\u5b57\u7b26\u4e32\uff1a func SearchFloat64s ( a [] float64 , x float64 ) int func SearchStrings ( a [] string , x string ) int \u60a8\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b \u5b98\u65b9\u6587\u6863 \u6765\u83b7\u53d6\u66f4\u8be6\u7ec6\u7684\u4fe1\u606f\u3002 \u8fd9\u5c31\u662f\u5982\u4f55\u4f7f\u7528 sort \u5305\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u4f1a\u5728 \u7b2c 11.7 \u8282 \u5bf9\u5b83\u7684\u7ec6\u8282\u8fdb\u884c\u6df1\u5165\uff0c\u5e76\u5b9e\u73b0\u4e00\u4e2a\u5c5e\u4e8e\u6211\u4eec\u81ea\u5df1\u7684\u7248\u672c\u3002 7.6.7 append() \u51fd\u6570\u5e38\u89c1\u64cd\u4f5c \u00b6 \u6211\u4eec\u5728 \u7b2c 7.5 \u8282 \u63d0\u5230\u7684 append() \u975e\u5e38\u6709\u7528\uff0c\u5b83\u80fd\u591f\u7528\u4e8e\u5404\u79cd\u65b9\u9762\u7684\u64cd\u4f5c\uff1a \u5c06\u5207\u7247 b \u7684\u5143\u7d20\u8ffd\u52a0\u5230\u5207\u7247 a \u4e4b\u540e\uff1a a = append(a, b...) \u590d\u5236\u5207\u7247 a \u7684\u5143\u7d20\u5230\u65b0\u7684\u5207\u7247 b \u4e0a\uff1a b = make ([] T , len ( a )) copy ( b , a ) \u5220\u9664\u4f4d\u4e8e\u7d22\u5f15 i \u7684\u5143\u7d20\uff1a a = append(a[:i], a[i+1:]...) \u5207\u9664\u5207\u7247 a \u4e2d\u4ece\u7d22\u5f15 i \u81f3 j \u4f4d\u7f6e\u7684\u5143\u7d20\uff1a a = append(a[:i], a[j:]...) \u4e3a\u5207\u7247 a \u6269\u5c55 j \u4e2a\u5143\u7d20\u957f\u5ea6\uff1a a = append(a, make([]T, j)...) \u5728\u7d22\u5f15 i \u7684\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20 x \uff1a a = append(a[:i], append([]T{x}, a[i:]...)...) \u5728\u7d22\u5f15 i \u7684\u4f4d\u7f6e\u63d2\u5165\u957f\u5ea6\u4e3a j \u7684\u65b0\u5207\u7247\uff1a a = append(a[:i], append(make([]T, j), a[i:]...)...) \u5728\u7d22\u5f15 i \u7684\u4f4d\u7f6e\u63d2\u5165\u5207\u7247 b \u7684\u6240\u6709\u5143\u7d20\uff1a a = append(a[:i], append(b, a[i:]...)...) \u53d6\u51fa\u4f4d\u4e8e\u5207\u7247 a \u6700\u672b\u5c3e\u7684\u5143\u7d20 x \uff1a x, a = a[len(a)-1], a[:len(a)-1] \u5c06\u5143\u7d20 x \u8ffd\u52a0\u5230\u5207\u7247 a \uff1a a = append(a, x) \u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5207\u7247\u548c append() \u64cd\u4f5c\u6765\u8868\u793a\u4efb\u610f\u53ef\u53d8\u957f\u5ea6\u7684\u5e8f\u5217\u3002 \u4ece\u6570\u5b66\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u5207\u7247\u76f8\u5f53\u4e8e\u5411\u91cf\uff0c\u5982\u679c\u9700\u8981\u7684\u8bdd\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u5411\u91cf\u4f5c\u4e3a\u5207\u7247\u7684\u522b\u540d\u6765\u8fdb\u884c\u64cd\u4f5c\u3002 \u5982\u679c\u60a8\u9700\u8981\u66f4\u52a0\u5b8c\u6574\u7684\u65b9\u6848\uff0c\u53ef\u4ee5\u5b66\u4e60\u4e00\u4e0b Eleanor McHugh \u7f16\u5199\u7684\u51e0\u4e2a\u5305\uff1a slices \u3001 chain \u548c lists \u3002 7.6.8 \u5207\u7247\u548c\u5783\u573e\u56de\u6536 \u00b6 \u5207\u7247\u7684\u5e95\u5c42\u6307\u5411\u4e00\u4e2a\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u7684\u5b9e\u9645\u5bb9\u91cf\u53ef\u80fd\u8981\u5927\u4e8e\u5207\u7247\u6240\u5b9a\u4e49\u7684\u5bb9\u91cf\u3002\u53ea\u6709\u5728\u6ca1\u6709\u4efb\u4f55\u5207\u7247\u6307\u5411\u7684\u65f6\u5019\uff0c\u5e95\u5c42\u7684\u6570\u7ec4\u5185\u5b58\u624d\u4f1a\u88ab\u91ca\u653e\uff0c\u8fd9\u79cd\u7279\u6027\u6709\u65f6\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5360\u7528\u591a\u4f59\u7684\u5185\u5b58\u3002 \u793a\u4f8b \u51fd\u6570 FindDigits() \u5c06\u4e00\u4e2a\u6587\u4ef6\u52a0\u8f7d\u5230\u5185\u5b58\uff0c\u7136\u540e\u641c\u7d22\u5176\u4e2d\u6240\u6709\u7684\u6570\u5b57\u5e76\u8fd4\u56de\u4e00\u4e2a\u5207\u7247\u3002 var digitRegexp = regexp . MustCompile ( \"[0-9]+\" ) func FindDigits ( filename string ) [] byte { b , _ := ioutil . ReadFile ( filename ) return digitRegexp . Find ( b ) } \u8fd9\u6bb5\u4ee3\u7801\u53ef\u4ee5\u987a\u5229\u8fd0\u884c\uff0c\u4f46\u8fd4\u56de\u7684 []byte \u6307\u5411\u7684\u5e95\u5c42\u662f\u6574\u4e2a\u6587\u4ef6\u7684\u6570\u636e\u3002\u53ea\u8981\u8be5\u8fd4\u56de\u7684\u5207\u7247\u4e0d\u88ab\u91ca\u653e\uff0c\u5783\u573e\u56de\u6536\u5668\u5c31\u4e0d\u80fd\u91ca\u653e\u6574\u4e2a\u6587\u4ef6\u6240\u5360\u7528\u7684\u5185\u5b58\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e00\u70b9\u70b9\u6709\u7528\u7684\u6570\u636e\u5374\u5360\u7528\u4e86\u6574\u4e2a\u6587\u4ef6\u7684\u5185\u5b58\u3002 \u60f3\u8981\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7\u62f7\u8d1d\u6211\u4eec\u9700\u8981\u7684\u90e8\u5206\u5230\u4e00\u4e2a\u65b0\u7684\u5207\u7247\u4e2d\uff1a func FindDigits ( filename string ) [] byte { b , _ := ioutil . ReadFile ( filename ) b = digitRegexp . Find ( b ) c := make ([] byte , len ( b )) copy ( c , b ) return c } \u4e8b\u5b9e\u4e0a\uff0c\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\u53ea\u80fd\u627e\u5230\u7b2c\u4e00\u4e2a\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6570\u5b57\u4e32\u3002\u8981\u60f3\u627e\u5230\u6240\u6709\u7684\u6570\u5b57\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff1a func FindFileDigits ( filename string ) [] byte { fileBytes , _ := ioutil . ReadFile ( filename ) b := digitRegexp . FindAll ( fileBytes , len ( fileBytes )) c := make ([] byte , 0 ) for _ , bytes := range b { c = append ( c , bytes ... ) } return c } \u7ec3\u4e60 7.12 split_string.go \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8981\u6c42\u5176\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u539f\u59cb\u5b57\u7b26\u4e32 str \u548c\u5206\u5272\u7d22\u5f15 i \uff0c\u7136\u540e\u8fd4\u56de\u4e24\u4e2a\u5206\u5272\u540e\u7684\u5b57\u7b26\u4e32\u3002 \u7ec3\u4e60 7.13 string_split2.go \u5047\u8bbe\u6709\u5b57\u7b26\u4e32 str \uff0c\u90a3\u4e48 str[len(str)/2:] + str[:len(str)/2] \u7684\u7ed3\u679c\u662f\u4ec0\u4e48\uff1f \u7ec3\u4e60 7.14 string_reverse.go \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8981\u6c42\u80fd\u591f\u53cd\u8f6c\u5b57\u7b26\u4e32\uff0c\u5373\u5c06 \"Google\" \u8f6c\u6362\u6210 \"elgooG\" \uff08\u63d0\u793a\uff1a\u4f7f\u7528 []byte \u7c7b\u578b\u7684\u5207\u7247\uff09\u3002 \u5982\u679c\u60a8\u4f7f\u7528\u4e24\u4e2a\u5207\u7247\u6765\u5b9e\u73b0\u53cd\u8f6c\uff0c\u8bf7\u518d\u5c1d\u8bd5\u4f7f\u7528\u4e00\u4e2a\u5207\u7247\uff08\u63d0\u793a\uff1a\u4f7f\u7528\u4ea4\u6362\u6cd5\uff09\u3002 \u5982\u679c\u60a8\u60f3\u8981\u53cd\u8f6c Unicode \u7f16\u7801\u7684\u5b57\u7b26\u4e32\uff0c\u8bf7\u4f7f\u7528 []int32 \u7c7b\u578b\u7684\u5207\u7247\u3002 \u7ec3\u4e60 7.15 Q29_uniq.go \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8981\u6c42\u80fd\u591f\u904d\u5386\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\uff0c\u5e76\u5c06\u5f53\u524d\u5b57\u7b26\u548c\u524d\u4e00\u4e2a\u5b57\u7b26\u4e0d\u76f8\u540c\u7684\u5b57\u7b26\u62f7\u8d1d\u81f3\u53e6\u4e00\u4e2a\u6570\u7ec4\u3002 \u7ec3\u4e60 7.16 bubblesort.go \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u4f7f\u7528\u5192\u6ce1\u6392\u5e8f\u7684\u65b9\u6cd5\u6392\u5e8f\u4e00\u4e2a\u5305\u542b\u6574\u6570\u7684\u5207\u7247\uff08\u7b97\u6cd5\u7684\u5b9a\u4e49\u53ef\u53c2\u8003 \u7ef4\u57fa\u767e\u79d1 \uff09\u3002 \u7ec3\u4e60 7.17 map_function.go \u5728\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u4e00\u4e2a map-function \u662f\u6307\u80fd\u591f\u63a5\u53d7\u4e00\u4e2a\u51fd\u6570\u539f\u578b\u548c\u4e00\u4e2a\u5217\u8868\uff0c\u5e76\u4f7f\u7528\u5217\u8868\u4e2d\u7684\u503c\u4f9d\u6b21\u6267\u884c\u51fd\u6570\u539f\u578b\uff0c\u516c\u5f0f\u4e3a\uff1a map ( F(), (e1,e2, . . . ,en) ) = ( F(e1), F(e2), ... F(en) ) \u3002 \u7f16\u5199\u4e00\u4e2a\u51fd\u6570 mapFunc \u8981\u6c42\u63a5\u53d7\u4ee5\u4e0b 2 \u4e2a\u53c2\u6570\uff1a \u4e00\u4e2a\u5c06\u6574\u6570\u4e58\u4ee5 10 \u7684\u51fd\u6570 \u4e00\u4e2a\u6574\u6570\u5217\u8868 \u6700\u540e\u8fd4\u56de\u4fdd\u5b58\u8fd0\u884c\u7ed3\u679c\u7684\u6574\u6570\u5217\u8868\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5207\u7247\u7684\u590d\u5236\u4e0e\u8ffd\u52a0 \u4e0b\u4e00\u7ae0\uff1a Map","title":"7.6 \u5b57\u7b26\u4e32\u3001\u6570\u7ec4\u548c\u5207\u7247\u7684\u5e94\u7528"},{"location":"07.6/#76","text":"","title":"7.6 \u5b57\u7b26\u4e32\u3001\u6570\u7ec4\u548c\u5207\u7247\u7684\u5e94\u7528"},{"location":"07.6/#761","text":"\u5047\u8bbe s \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u5b57\u8282\u6570\u7ec4\uff09\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 c := []byte(s) \u6765\u83b7\u53d6\u4e00\u4e2a\u5b57\u8282\u7684\u5207\u7247 c \u3002\u53e6\u5916\uff0c\u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7 copy() \u51fd\u6570\u6765\u8fbe\u5230\u76f8\u540c\u7684\u76ee\u7684\uff1a copy(dst []byte, src string) \u3002 \u540c\u6837\u7684\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 for-range \u6765\u83b7\u5f97\u6bcf\u4e2a\u5143\u7d20\uff08Listing 7.13 \u2014 for_string.go \uff09\uff1a package main import \"fmt\" func main () { s := \"\\u00ff\\u754c\" for i , c := range s { fmt . Printf ( \"%d:%c \" , i , c ) } } \u8f93\u51fa\uff1a 0:\u00ff 2:\u754c \u6211\u4eec\u77e5\u9053\uff0cUnicode \u5b57\u7b26\u4f1a\u5360\u7528 2 \u4e2a\u5b57\u8282\uff0c\u6709\u4e9b\u751a\u81f3\u9700\u8981 3 \u4e2a\u6216\u8005 4 \u4e2a\u5b57\u8282\u6765\u8fdb\u884c\u8868\u793a\u3002\u5982\u679c\u53d1\u73b0\u9519\u8bef\u7684 UTF8 \u5b57\u7b26\uff0c\u5219\u8be5\u5b57\u7b26\u4f1a\u88ab\u8bbe\u7f6e\u4e3a U+FFFD \u5e76\u4e14\u7d22\u5f15\u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u5b57\u8282\u3002\u548c\u5b57\u7b26\u4e32\u8f6c\u6362\u4e00\u6837\uff0c\u60a8\u540c\u6837\u53ef\u4ee5\u4f7f\u7528 c := []int32(s) \u8bed\u6cd5\uff0c\u8fd9\u6837\u5207\u7247\u4e2d\u7684\u6bcf\u4e2a int \u90fd\u4f1a\u5305\u542b\u5bf9\u5e94\u7684 Unicode \u4ee3\u7801\uff0c\u56e0\u4e3a\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u6b21\u5b57\u7b26\u90fd\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u6574\u6570\u3002\u7c7b\u4f3c\u7684\uff0c\u60a8\u4e5f\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5143\u7d20\u7c7b\u578b\u4e3a rune \u7684\u5207\u7247\uff1a r := []rune(s) \u3002 \u53ef\u4ee5\u901a\u8fc7\u4ee3\u7801 len([]int32(s)) \u6765\u83b7\u5f97\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u6570\u91cf\uff0c\u4f46\u4f7f\u7528 utf8.RuneCountInString(s) \u6548\u7387\u4f1a\u66f4\u9ad8\u4e00\u70b9\u3002(\u53c2\u8003 count_characters.go ) \u60a8\u8fd8\u53ef\u4ee5\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u8ffd\u52a0\u5230\u67d0\u4e00\u4e2a\u5b57\u8282\u5207\u7247\u7684\u5c3e\u90e8\uff1a var b [] byte var s string b = append ( b , s ... )","title":"7.6.1 \u4ece\u5b57\u7b26\u4e32\u751f\u6210\u5b57\u8282\u5207\u7247"},{"location":"07.6/#762","text":"\u4f7f\u7528 substr := str[start:end] \u53ef\u4ee5\u4ece\u5b57\u7b26\u4e32 str \u83b7\u53d6\u5230\u4ece\u7d22\u5f15 start \u5f00\u59cb\u5230 end-1 \u4f4d\u7f6e\u7684\u5b50\u5b57\u7b26\u4e32\u3002\u540c\u6837\u7684\uff0c str[start:] \u5219\u8868\u793a\u83b7\u53d6\u4ece start \u5f00\u59cb\u5230 len(str)-1 \u4f4d\u7f6e\u7684\u5b50\u5b57\u7b26\u4e32\u3002\u800c str[:end] \u8868\u793a\u83b7\u53d6\u4ece 0 \u5f00\u59cb\u5230 end-1 \u7684\u5b50\u5b57\u7b26\u4e32\u3002","title":"7.6.2 \u83b7\u53d6\u5b57\u7b26\u4e32\u7684\u67d0\u4e00\u90e8\u5206"},{"location":"07.6/#763","text":"\u5728\u5185\u5b58\u4e2d\uff0c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u53cc\u5b57\u7ed3\u6784\uff0c\u5373\u4e00\u4e2a\u6307\u5411\u5b9e\u9645\u6570\u636e\u7684\u6307\u9488\u548c\u8bb0\u5f55\u5b57\u7b26\u4e32\u957f\u5ea6\u7684\u6574\u6570\uff08\u89c1\u56fe 7.4\uff09\u3002\u56e0\u4e3a\u6307\u9488\u5bf9\u7528\u6237\u6765\u8bf4\u662f\u5b8c\u5168\u4e0d\u53ef\u89c1\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f9d\u65e7\u628a\u5b57\u7b26\u4e32\u770b\u505a\u662f\u4e00\u4e2a\u503c\u7c7b\u578b\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\u3002 \u5b57\u7b26\u4e32 string s = \"hello\" \u548c\u5b50\u5b57\u7b26\u4e32 t = s[2:3] \u5728\u5185\u5b58\u4e2d\u7684\u7ed3\u6784\u53ef\u4ee5\u7528\u4e0b\u56fe\u8868\u793a\uff1a","title":"7.6.3 \u5b57\u7b26\u4e32\u548c\u5207\u7247\u7684\u5185\u5b58\u7ed3\u6784"},{"location":"07.6/#764","text":"Go \u8bed\u8a00\u4e2d\u7684\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4 str[index] \u8fd9\u6837\u7684\u8868\u8fbe\u5f0f\u662f\u4e0d\u53ef\u4ee5\u88ab\u653e\u5728\u7b49\u53f7\u5de6\u4fa7\u7684\u3002\u5982\u679c\u5c1d\u8bd5\u8fd0\u884c str[i] = 'D' \u4f1a\u5f97\u5230\u9519\u8bef\uff1a cannot assign to str[i] \u3002 \u56e0\u6b64\uff0c\u60a8\u5fc5\u987b\u5148\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5b57\u8282\u6570\u7ec4\uff0c\u7136\u540e\u518d\u901a\u8fc7\u4fee\u6539\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u503c\u6765\u8fbe\u5230\u4fee\u6539\u5b57\u7b26\u4e32\u7684\u76ee\u7684\uff0c\u6700\u540e\u5c06\u5b57\u8282\u6570\u7ec4\u8f6c\u6362\u56de\u5b57\u7b26\u4e32\u683c\u5f0f\u3002 \u4f8b\u5982\uff0c\u5c06\u5b57\u7b26\u4e32 \"hello\" \u8f6c\u6362\u4e3a \"cello\" \uff1a s := \"hello\" c := [] byte ( s ) c [ 0 ] = 'c' s2 := string ( c ) // s2 == \"cello\" \u6240\u4ee5\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u64cd\u4f5c\u5207\u7247\u6765\u5b8c\u6210\u5bf9\u5b57\u7b26\u4e32\u7684\u64cd\u4f5c\u3002","title":"7.6.4 \u4fee\u6539\u5b57\u7b26\u4e32\u4e2d\u7684\u67d0\u4e2a\u5b57\u7b26"},{"location":"07.6/#765","text":"\u4e0b\u9762\u7684 Compare() \u51fd\u6570\u4f1a\u8fd4\u56de\u4e24\u4e2a\u5b57\u8282\u6570\u7ec4\u5b57\u5178\u987a\u5e8f\u7684\u6574\u6570\u5bf9\u6bd4\u7ed3\u679c\uff0c\u5373 0 if a == b, -1 if a < b, 1 if a > b \u3002 func Compare ( a , b [] byte ) int { for i := 0 ; i < len ( a ) && i < len ( b ); i ++ { switch { case a [ i ] > b [ i ]: return 1 case a [ i ] < b [ i ]: return - 1 } } // \u6570\u7ec4\u7684\u957f\u5ea6\u53ef\u80fd\u4e0d\u540c switch { case len ( a ) < len ( b ): return - 1 case len ( a ) > len ( b ): return 1 } return 0 // \u6570\u7ec4\u76f8\u7b49 }","title":"7.6.5 \u5b57\u8282\u6570\u7ec4\u5bf9\u6bd4\u51fd\u6570"},{"location":"07.6/#766","text":"\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86 sort \u5305\u6765\u5b9e\u73b0\u5e38\u89c1\u7684\u641c\u7d22\u548c\u6392\u5e8f\u64cd\u4f5c\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 sort \u5305\u4e2d\u7684\u51fd\u6570 func Ints(a []int) \u6765\u5b9e\u73b0\u5bf9 int \u7c7b\u578b\u7684\u5207\u7247\u6392\u5e8f\u3002\u4f8b\u5982 sort.Ints(arri) \uff0c\u5176\u4e2d\u53d8\u91cf arri \u5c31\u662f\u9700\u8981\u88ab\u5347\u5e8f\u6392\u5e8f\u7684\u6570\u7ec4\u6216\u5207\u7247\u3002\u4e3a\u4e86\u68c0\u67e5\u67d0\u4e2a\u6570\u7ec4\u662f\u5426\u5df2\u7ecf\u88ab\u6392\u5e8f\uff0c\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570 IntsAreSorted(a []int) bool \u6765\u68c0\u67e5\uff0c\u5982\u679c\u8fd4\u56de true \u5219\u8868\u793a\u5df2\u7ecf\u88ab\u6392\u5e8f\u3002 \u7c7b\u4f3c\u7684\uff0c\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570 func Float64s(a []float64) \u6765\u6392\u5e8f float64 \u7684\u5143\u7d20\uff0c\u6216\u4f7f\u7528\u51fd\u6570 func Strings(a []string) \u6392\u5e8f\u5b57\u7b26\u4e32\u5143\u7d20\u3002 \u60f3\u8981\u5728\u6570\u7ec4\u6216\u5207\u7247\u4e2d\u641c\u7d22\u4e00\u4e2a\u5143\u7d20\uff0c\u8be5\u6570\u7ec4\u6216\u5207\u7247\u5fc5\u987b\u5148\u88ab\u6392\u5e8f\uff08\u56e0\u4e3a\u6807\u51c6\u5e93\u7684\u641c\u7d22\u7b97\u6cd5\u4f7f\u7528\u7684\u662f\u4e8c\u5206\u6cd5\uff09\u3002\u7136\u540e\uff0c\u60a8\u5c31\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570 func SearchInts(a []int, n int) int \u8fdb\u884c\u641c\u7d22\uff0c\u5e76\u8fd4\u56de\u5bf9\u5e94\u7ed3\u679c\u7684\u7d22\u5f15\u503c\u3002 \u5f53\u7136\uff0c\u8fd8\u53ef\u4ee5\u641c\u7d22 float64 \u548c\u5b57\u7b26\u4e32\uff1a func SearchFloat64s ( a [] float64 , x float64 ) int func SearchStrings ( a [] string , x string ) int \u60a8\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b \u5b98\u65b9\u6587\u6863 \u6765\u83b7\u53d6\u66f4\u8be6\u7ec6\u7684\u4fe1\u606f\u3002 \u8fd9\u5c31\u662f\u5982\u4f55\u4f7f\u7528 sort \u5305\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u4f1a\u5728 \u7b2c 11.7 \u8282 \u5bf9\u5b83\u7684\u7ec6\u8282\u8fdb\u884c\u6df1\u5165\uff0c\u5e76\u5b9e\u73b0\u4e00\u4e2a\u5c5e\u4e8e\u6211\u4eec\u81ea\u5df1\u7684\u7248\u672c\u3002","title":"7.6.6 \u641c\u7d22\u53ca\u6392\u5e8f\u5207\u7247\u548c\u6570\u7ec4"},{"location":"07.6/#767-append","text":"\u6211\u4eec\u5728 \u7b2c 7.5 \u8282 \u63d0\u5230\u7684 append() \u975e\u5e38\u6709\u7528\uff0c\u5b83\u80fd\u591f\u7528\u4e8e\u5404\u79cd\u65b9\u9762\u7684\u64cd\u4f5c\uff1a \u5c06\u5207\u7247 b \u7684\u5143\u7d20\u8ffd\u52a0\u5230\u5207\u7247 a \u4e4b\u540e\uff1a a = append(a, b...) \u590d\u5236\u5207\u7247 a \u7684\u5143\u7d20\u5230\u65b0\u7684\u5207\u7247 b \u4e0a\uff1a b = make ([] T , len ( a )) copy ( b , a ) \u5220\u9664\u4f4d\u4e8e\u7d22\u5f15 i \u7684\u5143\u7d20\uff1a a = append(a[:i], a[i+1:]...) \u5207\u9664\u5207\u7247 a \u4e2d\u4ece\u7d22\u5f15 i \u81f3 j \u4f4d\u7f6e\u7684\u5143\u7d20\uff1a a = append(a[:i], a[j:]...) \u4e3a\u5207\u7247 a \u6269\u5c55 j \u4e2a\u5143\u7d20\u957f\u5ea6\uff1a a = append(a, make([]T, j)...) \u5728\u7d22\u5f15 i \u7684\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20 x \uff1a a = append(a[:i], append([]T{x}, a[i:]...)...) \u5728\u7d22\u5f15 i \u7684\u4f4d\u7f6e\u63d2\u5165\u957f\u5ea6\u4e3a j \u7684\u65b0\u5207\u7247\uff1a a = append(a[:i], append(make([]T, j), a[i:]...)...) \u5728\u7d22\u5f15 i \u7684\u4f4d\u7f6e\u63d2\u5165\u5207\u7247 b \u7684\u6240\u6709\u5143\u7d20\uff1a a = append(a[:i], append(b, a[i:]...)...) \u53d6\u51fa\u4f4d\u4e8e\u5207\u7247 a \u6700\u672b\u5c3e\u7684\u5143\u7d20 x \uff1a x, a = a[len(a)-1], a[:len(a)-1] \u5c06\u5143\u7d20 x \u8ffd\u52a0\u5230\u5207\u7247 a \uff1a a = append(a, x) \u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5207\u7247\u548c append() \u64cd\u4f5c\u6765\u8868\u793a\u4efb\u610f\u53ef\u53d8\u957f\u5ea6\u7684\u5e8f\u5217\u3002 \u4ece\u6570\u5b66\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u5207\u7247\u76f8\u5f53\u4e8e\u5411\u91cf\uff0c\u5982\u679c\u9700\u8981\u7684\u8bdd\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u5411\u91cf\u4f5c\u4e3a\u5207\u7247\u7684\u522b\u540d\u6765\u8fdb\u884c\u64cd\u4f5c\u3002 \u5982\u679c\u60a8\u9700\u8981\u66f4\u52a0\u5b8c\u6574\u7684\u65b9\u6848\uff0c\u53ef\u4ee5\u5b66\u4e60\u4e00\u4e0b Eleanor McHugh \u7f16\u5199\u7684\u51e0\u4e2a\u5305\uff1a slices \u3001 chain \u548c lists \u3002","title":"7.6.7 append() \u51fd\u6570\u5e38\u89c1\u64cd\u4f5c"},{"location":"07.6/#768","text":"\u5207\u7247\u7684\u5e95\u5c42\u6307\u5411\u4e00\u4e2a\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u7684\u5b9e\u9645\u5bb9\u91cf\u53ef\u80fd\u8981\u5927\u4e8e\u5207\u7247\u6240\u5b9a\u4e49\u7684\u5bb9\u91cf\u3002\u53ea\u6709\u5728\u6ca1\u6709\u4efb\u4f55\u5207\u7247\u6307\u5411\u7684\u65f6\u5019\uff0c\u5e95\u5c42\u7684\u6570\u7ec4\u5185\u5b58\u624d\u4f1a\u88ab\u91ca\u653e\uff0c\u8fd9\u79cd\u7279\u6027\u6709\u65f6\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5360\u7528\u591a\u4f59\u7684\u5185\u5b58\u3002 \u793a\u4f8b \u51fd\u6570 FindDigits() \u5c06\u4e00\u4e2a\u6587\u4ef6\u52a0\u8f7d\u5230\u5185\u5b58\uff0c\u7136\u540e\u641c\u7d22\u5176\u4e2d\u6240\u6709\u7684\u6570\u5b57\u5e76\u8fd4\u56de\u4e00\u4e2a\u5207\u7247\u3002 var digitRegexp = regexp . MustCompile ( \"[0-9]+\" ) func FindDigits ( filename string ) [] byte { b , _ := ioutil . ReadFile ( filename ) return digitRegexp . Find ( b ) } \u8fd9\u6bb5\u4ee3\u7801\u53ef\u4ee5\u987a\u5229\u8fd0\u884c\uff0c\u4f46\u8fd4\u56de\u7684 []byte \u6307\u5411\u7684\u5e95\u5c42\u662f\u6574\u4e2a\u6587\u4ef6\u7684\u6570\u636e\u3002\u53ea\u8981\u8be5\u8fd4\u56de\u7684\u5207\u7247\u4e0d\u88ab\u91ca\u653e\uff0c\u5783\u573e\u56de\u6536\u5668\u5c31\u4e0d\u80fd\u91ca\u653e\u6574\u4e2a\u6587\u4ef6\u6240\u5360\u7528\u7684\u5185\u5b58\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e00\u70b9\u70b9\u6709\u7528\u7684\u6570\u636e\u5374\u5360\u7528\u4e86\u6574\u4e2a\u6587\u4ef6\u7684\u5185\u5b58\u3002 \u60f3\u8981\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7\u62f7\u8d1d\u6211\u4eec\u9700\u8981\u7684\u90e8\u5206\u5230\u4e00\u4e2a\u65b0\u7684\u5207\u7247\u4e2d\uff1a func FindDigits ( filename string ) [] byte { b , _ := ioutil . ReadFile ( filename ) b = digitRegexp . Find ( b ) c := make ([] byte , len ( b )) copy ( c , b ) return c } \u4e8b\u5b9e\u4e0a\uff0c\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\u53ea\u80fd\u627e\u5230\u7b2c\u4e00\u4e2a\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6570\u5b57\u4e32\u3002\u8981\u60f3\u627e\u5230\u6240\u6709\u7684\u6570\u5b57\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff1a func FindFileDigits ( filename string ) [] byte { fileBytes , _ := ioutil . ReadFile ( filename ) b := digitRegexp . FindAll ( fileBytes , len ( fileBytes )) c := make ([] byte , 0 ) for _ , bytes := range b { c = append ( c , bytes ... ) } return c } \u7ec3\u4e60 7.12 split_string.go \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8981\u6c42\u5176\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u539f\u59cb\u5b57\u7b26\u4e32 str \u548c\u5206\u5272\u7d22\u5f15 i \uff0c\u7136\u540e\u8fd4\u56de\u4e24\u4e2a\u5206\u5272\u540e\u7684\u5b57\u7b26\u4e32\u3002 \u7ec3\u4e60 7.13 string_split2.go \u5047\u8bbe\u6709\u5b57\u7b26\u4e32 str \uff0c\u90a3\u4e48 str[len(str)/2:] + str[:len(str)/2] \u7684\u7ed3\u679c\u662f\u4ec0\u4e48\uff1f \u7ec3\u4e60 7.14 string_reverse.go \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8981\u6c42\u80fd\u591f\u53cd\u8f6c\u5b57\u7b26\u4e32\uff0c\u5373\u5c06 \"Google\" \u8f6c\u6362\u6210 \"elgooG\" \uff08\u63d0\u793a\uff1a\u4f7f\u7528 []byte \u7c7b\u578b\u7684\u5207\u7247\uff09\u3002 \u5982\u679c\u60a8\u4f7f\u7528\u4e24\u4e2a\u5207\u7247\u6765\u5b9e\u73b0\u53cd\u8f6c\uff0c\u8bf7\u518d\u5c1d\u8bd5\u4f7f\u7528\u4e00\u4e2a\u5207\u7247\uff08\u63d0\u793a\uff1a\u4f7f\u7528\u4ea4\u6362\u6cd5\uff09\u3002 \u5982\u679c\u60a8\u60f3\u8981\u53cd\u8f6c Unicode \u7f16\u7801\u7684\u5b57\u7b26\u4e32\uff0c\u8bf7\u4f7f\u7528 []int32 \u7c7b\u578b\u7684\u5207\u7247\u3002 \u7ec3\u4e60 7.15 Q29_uniq.go \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8981\u6c42\u80fd\u591f\u904d\u5386\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\uff0c\u5e76\u5c06\u5f53\u524d\u5b57\u7b26\u548c\u524d\u4e00\u4e2a\u5b57\u7b26\u4e0d\u76f8\u540c\u7684\u5b57\u7b26\u62f7\u8d1d\u81f3\u53e6\u4e00\u4e2a\u6570\u7ec4\u3002 \u7ec3\u4e60 7.16 bubblesort.go \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u4f7f\u7528\u5192\u6ce1\u6392\u5e8f\u7684\u65b9\u6cd5\u6392\u5e8f\u4e00\u4e2a\u5305\u542b\u6574\u6570\u7684\u5207\u7247\uff08\u7b97\u6cd5\u7684\u5b9a\u4e49\u53ef\u53c2\u8003 \u7ef4\u57fa\u767e\u79d1 \uff09\u3002 \u7ec3\u4e60 7.17 map_function.go \u5728\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u4e00\u4e2a map-function \u662f\u6307\u80fd\u591f\u63a5\u53d7\u4e00\u4e2a\u51fd\u6570\u539f\u578b\u548c\u4e00\u4e2a\u5217\u8868\uff0c\u5e76\u4f7f\u7528\u5217\u8868\u4e2d\u7684\u503c\u4f9d\u6b21\u6267\u884c\u51fd\u6570\u539f\u578b\uff0c\u516c\u5f0f\u4e3a\uff1a map ( F(), (e1,e2, . . . ,en) ) = ( F(e1), F(e2), ... F(en) ) \u3002 \u7f16\u5199\u4e00\u4e2a\u51fd\u6570 mapFunc \u8981\u6c42\u63a5\u53d7\u4ee5\u4e0b 2 \u4e2a\u53c2\u6570\uff1a \u4e00\u4e2a\u5c06\u6574\u6570\u4e58\u4ee5 10 \u7684\u51fd\u6570 \u4e00\u4e2a\u6574\u6570\u5217\u8868 \u6700\u540e\u8fd4\u56de\u4fdd\u5b58\u8fd0\u884c\u7ed3\u679c\u7684\u6574\u6570\u5217\u8868\u3002","title":"7.6.8 \u5207\u7247\u548c\u5783\u573e\u56de\u6536"},{"location":"07.6/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5207\u7247\u7684\u590d\u5236\u4e0e\u8ffd\u52a0 \u4e0b\u4e00\u7ae0\uff1a Map","title":"\u94fe\u63a5"},{"location":"08.0/","text":"8.0 Map \u00b6 map \u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6570\u636e\u7ed3\u6784\uff1a\u4e00\u79cd\u5143\u7d20\u5bf9 (pair) \u7684\u65e0\u5e8f\u96c6\u5408\uff0cpair \u7684\u4e00\u4e2a\u5143\u7d20\u662f key\uff0c\u5bf9\u5e94\u7684\u53e6\u4e00\u4e2a\u5143\u7d20\u662f value\uff0c\u6240\u4ee5\u8fd9\u4e2a\u7ed3\u6784\u4e5f\u79f0\u4e3a\u5173\u8054\u6570\u7ec4\u6216\u5b57\u5178\u3002\u8fd9\u662f\u4e00\u79cd\u5feb\u901f\u5bfb\u627e\u503c\u7684\u7406\u60f3\u7ed3\u6784\uff1a\u7ed9\u5b9a key\uff0c\u5bf9\u5e94\u7684 value \u53ef\u4ee5\u8fc5\u901f\u5b9a\u4f4d\u3002 map \u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u5728\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d\u4e5f\u79f0\u4e3a\u5b57\u5178 (Python) \u3001hash \u548c HashTable \u7b49\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5b57\u7b26\u4e32\u3001\u6570\u7ec4\u548c\u5207\u7247\u7684\u5e94\u7528 \u4e0b\u4e00\u8282\uff1a \u58f0\u660e\u3001\u521d\u59cb\u5316\u548c make","title":"8.0 Map"},{"location":"08.0/#80-map","text":"map \u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6570\u636e\u7ed3\u6784\uff1a\u4e00\u79cd\u5143\u7d20\u5bf9 (pair) \u7684\u65e0\u5e8f\u96c6\u5408\uff0cpair \u7684\u4e00\u4e2a\u5143\u7d20\u662f key\uff0c\u5bf9\u5e94\u7684\u53e6\u4e00\u4e2a\u5143\u7d20\u662f value\uff0c\u6240\u4ee5\u8fd9\u4e2a\u7ed3\u6784\u4e5f\u79f0\u4e3a\u5173\u8054\u6570\u7ec4\u6216\u5b57\u5178\u3002\u8fd9\u662f\u4e00\u79cd\u5feb\u901f\u5bfb\u627e\u503c\u7684\u7406\u60f3\u7ed3\u6784\uff1a\u7ed9\u5b9a key\uff0c\u5bf9\u5e94\u7684 value \u53ef\u4ee5\u8fc5\u901f\u5b9a\u4f4d\u3002 map \u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u5728\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d\u4e5f\u79f0\u4e3a\u5b57\u5178 (Python) \u3001hash \u548c HashTable \u7b49\u3002","title":"8.0 Map"},{"location":"08.0/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5b57\u7b26\u4e32\u3001\u6570\u7ec4\u548c\u5207\u7247\u7684\u5e94\u7528 \u4e0b\u4e00\u8282\uff1a \u58f0\u660e\u3001\u521d\u59cb\u5316\u548c make","title":"\u94fe\u63a5"},{"location":"08.1/","text":"8.1 \u58f0\u660e\u3001\u521d\u59cb\u5316\u548c make \u00b6 8.1.1 \u6982\u5ff5 \u00b6 map \u662f\u5f15\u7528\u7c7b\u578b\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u58f0\u660e\uff1a var map1 map [ keytype ] valuetype var map1 map [ string ] int \uff08 [keytype] \u548c valuetype \u4e4b\u95f4\u5141\u8bb8\u6709\u7a7a\u683c\uff0c\u4f46\u662f gofmt \u79fb\u9664\u4e86\u7a7a\u683c\uff09 \u5728\u58f0\u660e\u7684\u65f6\u5019\u4e0d\u9700\u8981\u77e5\u9053 map \u7684\u957f\u5ea6\uff0c map \u662f\u53ef\u4ee5\u52a8\u6001\u589e\u957f\u7684\u3002 \u672a\u521d\u59cb\u5316\u7684 map \u7684\u503c\u662f nil \u3002 key \u53ef\u4ee5\u662f\u4efb\u610f\u53ef\u4ee5\u7528 == \u6216\u8005 != \u64cd\u4f5c\u7b26\u6bd4\u8f83\u7684\u7c7b\u578b\uff0c\u6bd4\u5982 string \u3001 int \u3001 float32(64) \u3002\u6240\u4ee5\u6570\u7ec4\u3001\u5207\u7247\u548c\u7ed3\u6784\u4f53\u4e0d\u80fd\u4f5c\u4e3a key (\u8bd1\u8005\u6ce8\uff1a\u542b\u6709\u6570\u7ec4\u5207\u7247\u7684\u7ed3\u6784\u4f53\u4e0d\u80fd\u4f5c\u4e3a key\uff0c\u53ea\u5305\u542b\u5185\u5efa\u7c7b\u578b\u7684 struct \u662f\u53ef\u4ee5\u4f5c\u4e3a key \u7684\uff09\uff0c\u4f46\u662f\u6307\u9488\u548c\u63a5\u53e3\u7c7b\u578b\u53ef\u4ee5\u3002\u5982\u679c\u8981\u7528\u7ed3\u6784\u4f53\u4f5c\u4e3a key \u53ef\u4ee5\u63d0\u4f9b Key() \u548c Hash() \u65b9\u6cd5\uff0c\u8fd9\u6837\u53ef\u4ee5\u901a\u8fc7\u7ed3\u6784\u4f53\u7684\u57df\u8ba1\u7b97\u51fa\u552f\u4e00\u7684\u6570\u5b57\u6216\u8005\u5b57\u7b26\u4e32\u7684 key\u3002 value \u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\u7684\uff1b\u901a\u8fc7\u4f7f\u7528\u7a7a\u63a5\u53e3\u7c7b\u578b\uff08\u8be6\u89c1 \u7b2c 11.9 \u8282 \uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u5b58\u50a8\u4efb\u610f\u503c\uff0c\u4f46\u662f\u4f7f\u7528\u8fd9\u79cd\u7c7b\u578b\u4f5c\u4e3a\u503c\u65f6\u9700\u8981\u5148\u505a\u4e00\u6b21\u7c7b\u578b\u65ad\u8a00\uff08\u8be6\u89c1 \u7b2c 11.3 \u8282 \uff09\u3002 map \u4f20\u9012\u7ed9\u51fd\u6570\u7684\u4ee3\u4ef7\u5f88\u5c0f\uff1a\u5728 32 \u4f4d\u673a\u5668\u4e0a\u5360 4 \u4e2a\u5b57\u8282\uff0c64 \u4f4d\u673a\u5668\u4e0a\u5360 8 \u4e2a\u5b57\u8282\uff0c\u65e0\u8bba\u5b9e\u9645\u4e0a\u5b58\u50a8\u4e86\u591a\u5c11\u6570\u636e\u3002\u901a\u8fc7 key \u5728 map \u4e2d\u5bfb\u627e\u503c\u662f\u5f88\u5feb\u7684\uff0c\u6bd4\u7ebf\u6027\u67e5\u627e\u5feb\u5f97\u591a\uff0c\u4f46\u662f\u4ecd\u7136\u6bd4\u4ece\u6570\u7ec4\u548c\u5207\u7247\u7684\u7d22\u5f15\u4e2d\u76f4\u63a5\u8bfb\u53d6\u8981\u6162 100 \u500d\uff1b\u6240\u4ee5\u5982\u679c\u4f60\u5f88\u5728\u4e4e\u6027\u80fd\u7684\u8bdd\u8fd8\u662f\u5efa\u8bae\u7528\u5207\u7247\u6765\u89e3\u51b3\u95ee\u9898\u3002 map \u4e5f\u53ef\u4ee5\u7528\u51fd\u6570\u4f5c\u4e3a\u81ea\u5df1\u7684\u503c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u6765\u505a\u5206\u652f\u7ed3\u6784\uff08\u8be6\u89c1 \u7b2c 5 \u7ae0 \uff09\uff1akey \u7528\u6765\u9009\u62e9\u8981\u6267\u884c\u7684\u51fd\u6570\u3002 \u5982\u679c key1 \u662f map1 \u7684 key\uff0c\u90a3\u4e48 map1[key1] \u5c31\u662f\u5bf9\u5e94 key1 \u7684\u503c\uff0c\u5c31\u5982\u540c\u6570\u7ec4\u7d22\u5f15\u7b26\u53f7\u4e00\u6837\uff08\u6570\u7ec4\u53ef\u4ee5\u89c6\u4e3a\u4e00\u79cd\u7b80\u5355\u5f62\u5f0f\u7684 map \uff0ckey \u662f\u4ece 0 \u5f00\u59cb\u7684\u6574\u6570\uff09\u3002 key1 \u5bf9\u5e94\u7684\u503c\u53ef\u4ee5\u901a\u8fc7\u8d4b\u503c\u7b26\u53f7\u6765\u8bbe\u7f6e\u4e3a val1\uff1a map1[key1] = val1 \u3002 \u4ee4 v := map1[key1] \u53ef\u4ee5\u5c06 key1 \u5bf9\u5e94\u7684\u503c\u8d4b\u503c\u7ed9 v \uff1b\u5982\u679c map \u4e2d\u6ca1\u6709 key1 \u5b58\u5728\uff0c\u90a3\u4e48 v \u5c06\u88ab\u8d4b\u503c\u4e3a map1 \u7684\u503c\u7c7b\u578b\u7684\u7a7a\u503c\u3002 \u5e38\u7528\u7684 len(map1) \u65b9\u6cd5\u53ef\u4ee5\u83b7\u5f97 map \u4e2d\u7684 pair \u6570\u76ee\uff0c\u8fd9\u4e2a\u6570\u76ee\u662f\u53ef\u4ee5\u4f38\u7f29\u7684\uff0c\u56e0\u4e3a map-pairs \u5728\u8fd0\u884c\u65f6\u53ef\u4ee5\u52a8\u6001\u6dfb\u52a0\u548c\u5220\u9664\u3002 \u793a\u4f8b 8.1 make_maps.go package main import \"fmt\" func main () { var mapLit map [ string ] int //var mapCreated map[string]float32 var mapAssigned map [ string ] int mapLit = map [ string ] int { \"one\" : 1 , \"two\" : 2 } mapCreated := make ( map [ string ] float32 ) mapAssigned = mapLit mapCreated [ \"key1\" ] = 4.5 mapCreated [ \"key2\" ] = 3.14159 mapAssigned [ \"two\" ] = 3 fmt . Printf ( \"Map literal at \\\"one\\\" is: %d\\n\" , mapLit [ \"one\" ]) fmt . Printf ( \"Map created at \\\"key2\\\" is: %f\\n\" , mapCreated [ \"key2\" ]) fmt . Printf ( \"Map assigned at \\\"two\\\" is: %d\\n\" , mapLit [ \"two\" ]) fmt . Printf ( \"Map literal at \\\"ten\\\" is: %d\\n\" , mapLit [ \"ten\" ]) } \u8f93\u51fa\u7ed3\u679c\uff1a Map literal at \"one\" is: 1 Map created at \"key2\" is: 3.141590 Map assigned at \"two\" is: 3 Mpa literal at \"ten\" is: 0 mapLit \u8bf4\u660e\u4e86 map literals \u7684\u4f7f\u7528\u65b9\u6cd5\uff1a map \u53ef\u4ee5\u7528 {key1: val1, key2: val2} \u7684\u63cf\u8ff0\u65b9\u6cd5\u6765\u521d\u59cb\u5316\uff0c\u5c31\u50cf\u6570\u7ec4\u548c\u7ed3\u6784\u4f53\u4e00\u6837\u3002 map \u662f \u5f15\u7528\u7c7b\u578b \u7684\uff1a \u5185\u5b58\u7528 make() \u65b9\u6cd5\u6765\u5206\u914d\u3002 map \u7684\u521d\u59cb\u5316\uff1a var map1 = make(map[keytype]valuetype) \u3002 \u6216\u8005\u7b80\u5199\u4e3a\uff1a map1 := make(map[keytype]valuetype) \u3002 \u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 mapCreated \u5c31\u662f\u7528\u8fd9\u79cd\u65b9\u5f0f\u521b\u5efa\u7684\uff1a mapCreated := make(map[string]float32) \u3002 \u76f8\u5f53\u4e8e\uff1a mapCreated := map[string]float32{} \u3002 mapAssigned \u4e5f\u662f mapLit \u7684\u5f15\u7528\uff0c\u5bf9 mapAssigned \u7684\u4fee\u6539\u4e5f\u4f1a\u5f71\u54cd\u5230 mapLit \u7684\u503c\u3002 \u4e0d\u8981\u4f7f\u7528 new() \uff0c\u6c38\u8fdc\u7528 make() \u6765\u6784\u9020 map \u6ce8\u610f \u5982\u679c\u4f60\u9519\u8bef\u5730\u4f7f\u7528 new() \u5206\u914d\u4e86\u4e00\u4e2a\u5f15\u7528\u5bf9\u8c61\uff0c\u4f60\u4f1a\u83b7\u5f97\u4e00\u4e2a\u7a7a\u5f15\u7528\u7684\u6307\u9488\uff0c\u76f8\u5f53\u4e8e\u58f0\u660e\u4e86\u4e00\u4e2a\u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\u5e76\u4e14\u53d6\u4e86\u5b83\u7684\u5730\u5740\uff1a mapCreated := new ( map [ string ] float32 ) \u63a5\u4e0b\u6765\u5f53\u6211\u4eec\u8c03\u7528\uff1a mapCreated[\"key1\"] = 4.5 \u7684\u65f6\u5019\uff0c\u7f16\u8bd1\u5668\u4f1a\u62a5\u9519\uff1a invalid operation: mapCreated[\"key1\"] (index of type *map[string]float32). \u4e3a\u4e86\u8bf4\u660e\u503c\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\u7684\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e86\u4e00\u4e2a\u4f7f\u7528 func() int \u4f5c\u4e3a\u503c\u7684 map \uff1a \u793a\u4f8b 8.2 map_func.go package main import \"fmt\" func main () { mf := map [ int ] func () int { 1 : func () int { return 10 }, 2 : func () int { return 20 }, 5 : func () int { return 50 }, } fmt . Println ( mf ) } \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a map[1:0x10903be0 5:0x10903ba0 2:0x10903bc0] : \u6574\u578b\u90fd\u88ab\u6620\u5c04\u5230\u51fd\u6570\u5730\u5740\u3002 8.1.2 map \u5bb9\u91cf \u00b6 \u548c\u6570\u7ec4\u4e0d\u540c\uff0c map \u53ef\u4ee5\u6839\u636e\u65b0\u589e\u7684 key-value \u5bf9\u52a8\u6001\u7684\u4f38\u7f29\uff0c\u56e0\u6b64\u5b83\u4e0d\u5b58\u5728\u56fa\u5b9a\u957f\u5ea6\u6216\u8005\u6700\u5927\u9650\u5236\u3002\u4f46\u662f\u4f60\u4e5f\u53ef\u4ee5\u9009\u62e9\u6807\u660e map \u7684\u521d\u59cb\u5bb9\u91cf capacity \uff0c\u5c31\u50cf\u8fd9\u6837\uff1a make(map[keytype]valuetype, cap) \u3002\u4f8b\u5982\uff1a map2 := make ( map [ string ] float32 , 100 ) \u5f53 map \u589e\u957f\u5230\u5bb9\u91cf\u4e0a\u9650\u7684\u65f6\u5019\uff0c\u5982\u679c\u518d\u589e\u52a0\u65b0\u7684 key-value \u5bf9\uff0c map \u7684\u5927\u5c0f\u4f1a\u81ea\u52a8\u52a0 1\u3002\u6240\u4ee5\u51fa\u4e8e\u6027\u80fd\u7684\u8003\u8651\uff0c\u5bf9\u4e8e\u5927\u7684 map \u6216\u8005\u4f1a\u5feb\u901f\u6269\u5f20\u7684 map \uff0c\u5373\u4f7f\u53ea\u662f\u5927\u6982\u77e5\u9053\u5bb9\u91cf\uff0c\u4e5f\u6700\u597d\u5148\u6807\u660e\u3002 \u8fd9\u91cc\u6709\u4e00\u4e2a map \u7684\u5177\u4f53\u4f8b\u5b50\uff0c\u5373\u5c06\u97f3\u9636\u548c\u5bf9\u5e94\u7684\u97f3\u9891\u6620\u5c04\u8d77\u6765\uff1a noteFrequency := map [ string ] float32 { \"C0\" : 16.35 , \"D0\" : 18.35 , \"E0\" : 20.60 , \"F0\" : 21.83 , \"G0\" : 24.50 , \"A0\" : 27.50 , \"B0\" : 30.87 , \"A4\" : 440 } 8.1.3 \u7528\u5207\u7247\u4f5c\u4e3a map \u7684\u503c \u00b6 \u65e2\u7136\u4e00\u4e2a key \u53ea\u80fd\u5bf9\u5e94\u4e00\u4e2a value\uff0c\u800c value \u53c8\u662f\u4e00\u4e2a\u539f\u59cb\u7c7b\u578b\uff0c\u90a3\u4e48\u5982\u679c\u4e00\u4e2a key \u8981\u5bf9\u5e94\u591a\u4e2a\u503c\u600e\u4e48\u529e\uff1f\u4f8b\u5982\uff0c\u5f53\u6211\u4eec\u8981\u5904\u7406 Unix \u673a\u5668\u4e0a\u7684\u6240\u6709\u8fdb\u7a0b\uff0c\u4ee5\u7236\u8fdb\u7a0b\uff08pid \u4e3a\u6574\u578b\uff09\u4f5c\u4e3a key\uff0c\u6240\u6709\u7684\u5b50\u8fdb\u7a0b\uff08\u4ee5\u6240\u6709\u5b50\u8fdb\u7a0b\u7684 pid \u7ec4\u6210\u7684\u5207\u7247\uff09\u4f5c\u4e3a value\u3002\u901a\u8fc7\u5c06 value \u5b9a\u4e49\u4e3a []int \u7c7b\u578b\u6216\u8005\u5176\u4ed6\u7c7b\u578b\u7684\u5207\u7247\uff0c\u5c31\u53ef\u4ee5\u4f18\u96c5\u5730\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u8fd9\u91cc\u6709\u4e00\u4e9b\u5b9a\u4e49\u8fd9\u79cd map \u7684\u4f8b\u5b50\uff1a mp1 := make ( map [ int ][] int ) mp2 := make ( map [ int ] * [] int ) \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Map \u4e0b\u4e00\u8282\uff1a \u6d4b\u8bd5\u952e\u503c\u5bf9\u662f\u5426\u5b58\u5728\u53ca\u5220\u9664\u5143\u7d20","title":"8.1 \u58f0\u660e\u3001\u521d\u59cb\u5316\u548c make"},{"location":"08.1/#81-make","text":"","title":"8.1 \u58f0\u660e\u3001\u521d\u59cb\u5316\u548c make"},{"location":"08.1/#811","text":"map \u662f\u5f15\u7528\u7c7b\u578b\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u58f0\u660e\uff1a var map1 map [ keytype ] valuetype var map1 map [ string ] int \uff08 [keytype] \u548c valuetype \u4e4b\u95f4\u5141\u8bb8\u6709\u7a7a\u683c\uff0c\u4f46\u662f gofmt \u79fb\u9664\u4e86\u7a7a\u683c\uff09 \u5728\u58f0\u660e\u7684\u65f6\u5019\u4e0d\u9700\u8981\u77e5\u9053 map \u7684\u957f\u5ea6\uff0c map \u662f\u53ef\u4ee5\u52a8\u6001\u589e\u957f\u7684\u3002 \u672a\u521d\u59cb\u5316\u7684 map \u7684\u503c\u662f nil \u3002 key \u53ef\u4ee5\u662f\u4efb\u610f\u53ef\u4ee5\u7528 == \u6216\u8005 != \u64cd\u4f5c\u7b26\u6bd4\u8f83\u7684\u7c7b\u578b\uff0c\u6bd4\u5982 string \u3001 int \u3001 float32(64) \u3002\u6240\u4ee5\u6570\u7ec4\u3001\u5207\u7247\u548c\u7ed3\u6784\u4f53\u4e0d\u80fd\u4f5c\u4e3a key (\u8bd1\u8005\u6ce8\uff1a\u542b\u6709\u6570\u7ec4\u5207\u7247\u7684\u7ed3\u6784\u4f53\u4e0d\u80fd\u4f5c\u4e3a key\uff0c\u53ea\u5305\u542b\u5185\u5efa\u7c7b\u578b\u7684 struct \u662f\u53ef\u4ee5\u4f5c\u4e3a key \u7684\uff09\uff0c\u4f46\u662f\u6307\u9488\u548c\u63a5\u53e3\u7c7b\u578b\u53ef\u4ee5\u3002\u5982\u679c\u8981\u7528\u7ed3\u6784\u4f53\u4f5c\u4e3a key \u53ef\u4ee5\u63d0\u4f9b Key() \u548c Hash() \u65b9\u6cd5\uff0c\u8fd9\u6837\u53ef\u4ee5\u901a\u8fc7\u7ed3\u6784\u4f53\u7684\u57df\u8ba1\u7b97\u51fa\u552f\u4e00\u7684\u6570\u5b57\u6216\u8005\u5b57\u7b26\u4e32\u7684 key\u3002 value \u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\u7684\uff1b\u901a\u8fc7\u4f7f\u7528\u7a7a\u63a5\u53e3\u7c7b\u578b\uff08\u8be6\u89c1 \u7b2c 11.9 \u8282 \uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u5b58\u50a8\u4efb\u610f\u503c\uff0c\u4f46\u662f\u4f7f\u7528\u8fd9\u79cd\u7c7b\u578b\u4f5c\u4e3a\u503c\u65f6\u9700\u8981\u5148\u505a\u4e00\u6b21\u7c7b\u578b\u65ad\u8a00\uff08\u8be6\u89c1 \u7b2c 11.3 \u8282 \uff09\u3002 map \u4f20\u9012\u7ed9\u51fd\u6570\u7684\u4ee3\u4ef7\u5f88\u5c0f\uff1a\u5728 32 \u4f4d\u673a\u5668\u4e0a\u5360 4 \u4e2a\u5b57\u8282\uff0c64 \u4f4d\u673a\u5668\u4e0a\u5360 8 \u4e2a\u5b57\u8282\uff0c\u65e0\u8bba\u5b9e\u9645\u4e0a\u5b58\u50a8\u4e86\u591a\u5c11\u6570\u636e\u3002\u901a\u8fc7 key \u5728 map \u4e2d\u5bfb\u627e\u503c\u662f\u5f88\u5feb\u7684\uff0c\u6bd4\u7ebf\u6027\u67e5\u627e\u5feb\u5f97\u591a\uff0c\u4f46\u662f\u4ecd\u7136\u6bd4\u4ece\u6570\u7ec4\u548c\u5207\u7247\u7684\u7d22\u5f15\u4e2d\u76f4\u63a5\u8bfb\u53d6\u8981\u6162 100 \u500d\uff1b\u6240\u4ee5\u5982\u679c\u4f60\u5f88\u5728\u4e4e\u6027\u80fd\u7684\u8bdd\u8fd8\u662f\u5efa\u8bae\u7528\u5207\u7247\u6765\u89e3\u51b3\u95ee\u9898\u3002 map \u4e5f\u53ef\u4ee5\u7528\u51fd\u6570\u4f5c\u4e3a\u81ea\u5df1\u7684\u503c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u6765\u505a\u5206\u652f\u7ed3\u6784\uff08\u8be6\u89c1 \u7b2c 5 \u7ae0 \uff09\uff1akey \u7528\u6765\u9009\u62e9\u8981\u6267\u884c\u7684\u51fd\u6570\u3002 \u5982\u679c key1 \u662f map1 \u7684 key\uff0c\u90a3\u4e48 map1[key1] \u5c31\u662f\u5bf9\u5e94 key1 \u7684\u503c\uff0c\u5c31\u5982\u540c\u6570\u7ec4\u7d22\u5f15\u7b26\u53f7\u4e00\u6837\uff08\u6570\u7ec4\u53ef\u4ee5\u89c6\u4e3a\u4e00\u79cd\u7b80\u5355\u5f62\u5f0f\u7684 map \uff0ckey \u662f\u4ece 0 \u5f00\u59cb\u7684\u6574\u6570\uff09\u3002 key1 \u5bf9\u5e94\u7684\u503c\u53ef\u4ee5\u901a\u8fc7\u8d4b\u503c\u7b26\u53f7\u6765\u8bbe\u7f6e\u4e3a val1\uff1a map1[key1] = val1 \u3002 \u4ee4 v := map1[key1] \u53ef\u4ee5\u5c06 key1 \u5bf9\u5e94\u7684\u503c\u8d4b\u503c\u7ed9 v \uff1b\u5982\u679c map \u4e2d\u6ca1\u6709 key1 \u5b58\u5728\uff0c\u90a3\u4e48 v \u5c06\u88ab\u8d4b\u503c\u4e3a map1 \u7684\u503c\u7c7b\u578b\u7684\u7a7a\u503c\u3002 \u5e38\u7528\u7684 len(map1) \u65b9\u6cd5\u53ef\u4ee5\u83b7\u5f97 map \u4e2d\u7684 pair \u6570\u76ee\uff0c\u8fd9\u4e2a\u6570\u76ee\u662f\u53ef\u4ee5\u4f38\u7f29\u7684\uff0c\u56e0\u4e3a map-pairs \u5728\u8fd0\u884c\u65f6\u53ef\u4ee5\u52a8\u6001\u6dfb\u52a0\u548c\u5220\u9664\u3002 \u793a\u4f8b 8.1 make_maps.go package main import \"fmt\" func main () { var mapLit map [ string ] int //var mapCreated map[string]float32 var mapAssigned map [ string ] int mapLit = map [ string ] int { \"one\" : 1 , \"two\" : 2 } mapCreated := make ( map [ string ] float32 ) mapAssigned = mapLit mapCreated [ \"key1\" ] = 4.5 mapCreated [ \"key2\" ] = 3.14159 mapAssigned [ \"two\" ] = 3 fmt . Printf ( \"Map literal at \\\"one\\\" is: %d\\n\" , mapLit [ \"one\" ]) fmt . Printf ( \"Map created at \\\"key2\\\" is: %f\\n\" , mapCreated [ \"key2\" ]) fmt . Printf ( \"Map assigned at \\\"two\\\" is: %d\\n\" , mapLit [ \"two\" ]) fmt . Printf ( \"Map literal at \\\"ten\\\" is: %d\\n\" , mapLit [ \"ten\" ]) } \u8f93\u51fa\u7ed3\u679c\uff1a Map literal at \"one\" is: 1 Map created at \"key2\" is: 3.141590 Map assigned at \"two\" is: 3 Mpa literal at \"ten\" is: 0 mapLit \u8bf4\u660e\u4e86 map literals \u7684\u4f7f\u7528\u65b9\u6cd5\uff1a map \u53ef\u4ee5\u7528 {key1: val1, key2: val2} \u7684\u63cf\u8ff0\u65b9\u6cd5\u6765\u521d\u59cb\u5316\uff0c\u5c31\u50cf\u6570\u7ec4\u548c\u7ed3\u6784\u4f53\u4e00\u6837\u3002 map \u662f \u5f15\u7528\u7c7b\u578b \u7684\uff1a \u5185\u5b58\u7528 make() \u65b9\u6cd5\u6765\u5206\u914d\u3002 map \u7684\u521d\u59cb\u5316\uff1a var map1 = make(map[keytype]valuetype) \u3002 \u6216\u8005\u7b80\u5199\u4e3a\uff1a map1 := make(map[keytype]valuetype) \u3002 \u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 mapCreated \u5c31\u662f\u7528\u8fd9\u79cd\u65b9\u5f0f\u521b\u5efa\u7684\uff1a mapCreated := make(map[string]float32) \u3002 \u76f8\u5f53\u4e8e\uff1a mapCreated := map[string]float32{} \u3002 mapAssigned \u4e5f\u662f mapLit \u7684\u5f15\u7528\uff0c\u5bf9 mapAssigned \u7684\u4fee\u6539\u4e5f\u4f1a\u5f71\u54cd\u5230 mapLit \u7684\u503c\u3002 \u4e0d\u8981\u4f7f\u7528 new() \uff0c\u6c38\u8fdc\u7528 make() \u6765\u6784\u9020 map \u6ce8\u610f \u5982\u679c\u4f60\u9519\u8bef\u5730\u4f7f\u7528 new() \u5206\u914d\u4e86\u4e00\u4e2a\u5f15\u7528\u5bf9\u8c61\uff0c\u4f60\u4f1a\u83b7\u5f97\u4e00\u4e2a\u7a7a\u5f15\u7528\u7684\u6307\u9488\uff0c\u76f8\u5f53\u4e8e\u58f0\u660e\u4e86\u4e00\u4e2a\u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\u5e76\u4e14\u53d6\u4e86\u5b83\u7684\u5730\u5740\uff1a mapCreated := new ( map [ string ] float32 ) \u63a5\u4e0b\u6765\u5f53\u6211\u4eec\u8c03\u7528\uff1a mapCreated[\"key1\"] = 4.5 \u7684\u65f6\u5019\uff0c\u7f16\u8bd1\u5668\u4f1a\u62a5\u9519\uff1a invalid operation: mapCreated[\"key1\"] (index of type *map[string]float32). \u4e3a\u4e86\u8bf4\u660e\u503c\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\u7684\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e86\u4e00\u4e2a\u4f7f\u7528 func() int \u4f5c\u4e3a\u503c\u7684 map \uff1a \u793a\u4f8b 8.2 map_func.go package main import \"fmt\" func main () { mf := map [ int ] func () int { 1 : func () int { return 10 }, 2 : func () int { return 20 }, 5 : func () int { return 50 }, } fmt . Println ( mf ) } \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a map[1:0x10903be0 5:0x10903ba0 2:0x10903bc0] : \u6574\u578b\u90fd\u88ab\u6620\u5c04\u5230\u51fd\u6570\u5730\u5740\u3002","title":"8.1.1 \u6982\u5ff5"},{"location":"08.1/#812-map","text":"\u548c\u6570\u7ec4\u4e0d\u540c\uff0c map \u53ef\u4ee5\u6839\u636e\u65b0\u589e\u7684 key-value \u5bf9\u52a8\u6001\u7684\u4f38\u7f29\uff0c\u56e0\u6b64\u5b83\u4e0d\u5b58\u5728\u56fa\u5b9a\u957f\u5ea6\u6216\u8005\u6700\u5927\u9650\u5236\u3002\u4f46\u662f\u4f60\u4e5f\u53ef\u4ee5\u9009\u62e9\u6807\u660e map \u7684\u521d\u59cb\u5bb9\u91cf capacity \uff0c\u5c31\u50cf\u8fd9\u6837\uff1a make(map[keytype]valuetype, cap) \u3002\u4f8b\u5982\uff1a map2 := make ( map [ string ] float32 , 100 ) \u5f53 map \u589e\u957f\u5230\u5bb9\u91cf\u4e0a\u9650\u7684\u65f6\u5019\uff0c\u5982\u679c\u518d\u589e\u52a0\u65b0\u7684 key-value \u5bf9\uff0c map \u7684\u5927\u5c0f\u4f1a\u81ea\u52a8\u52a0 1\u3002\u6240\u4ee5\u51fa\u4e8e\u6027\u80fd\u7684\u8003\u8651\uff0c\u5bf9\u4e8e\u5927\u7684 map \u6216\u8005\u4f1a\u5feb\u901f\u6269\u5f20\u7684 map \uff0c\u5373\u4f7f\u53ea\u662f\u5927\u6982\u77e5\u9053\u5bb9\u91cf\uff0c\u4e5f\u6700\u597d\u5148\u6807\u660e\u3002 \u8fd9\u91cc\u6709\u4e00\u4e2a map \u7684\u5177\u4f53\u4f8b\u5b50\uff0c\u5373\u5c06\u97f3\u9636\u548c\u5bf9\u5e94\u7684\u97f3\u9891\u6620\u5c04\u8d77\u6765\uff1a noteFrequency := map [ string ] float32 { \"C0\" : 16.35 , \"D0\" : 18.35 , \"E0\" : 20.60 , \"F0\" : 21.83 , \"G0\" : 24.50 , \"A0\" : 27.50 , \"B0\" : 30.87 , \"A4\" : 440 }","title":"8.1.2 map \u5bb9\u91cf"},{"location":"08.1/#813-map","text":"\u65e2\u7136\u4e00\u4e2a key \u53ea\u80fd\u5bf9\u5e94\u4e00\u4e2a value\uff0c\u800c value \u53c8\u662f\u4e00\u4e2a\u539f\u59cb\u7c7b\u578b\uff0c\u90a3\u4e48\u5982\u679c\u4e00\u4e2a key \u8981\u5bf9\u5e94\u591a\u4e2a\u503c\u600e\u4e48\u529e\uff1f\u4f8b\u5982\uff0c\u5f53\u6211\u4eec\u8981\u5904\u7406 Unix \u673a\u5668\u4e0a\u7684\u6240\u6709\u8fdb\u7a0b\uff0c\u4ee5\u7236\u8fdb\u7a0b\uff08pid \u4e3a\u6574\u578b\uff09\u4f5c\u4e3a key\uff0c\u6240\u6709\u7684\u5b50\u8fdb\u7a0b\uff08\u4ee5\u6240\u6709\u5b50\u8fdb\u7a0b\u7684 pid \u7ec4\u6210\u7684\u5207\u7247\uff09\u4f5c\u4e3a value\u3002\u901a\u8fc7\u5c06 value \u5b9a\u4e49\u4e3a []int \u7c7b\u578b\u6216\u8005\u5176\u4ed6\u7c7b\u578b\u7684\u5207\u7247\uff0c\u5c31\u53ef\u4ee5\u4f18\u96c5\u5730\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u8fd9\u91cc\u6709\u4e00\u4e9b\u5b9a\u4e49\u8fd9\u79cd map \u7684\u4f8b\u5b50\uff1a mp1 := make ( map [ int ][] int ) mp2 := make ( map [ int ] * [] int )","title":"8.1.3 \u7528\u5207\u7247\u4f5c\u4e3a map \u7684\u503c"},{"location":"08.1/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Map \u4e0b\u4e00\u8282\uff1a \u6d4b\u8bd5\u952e\u503c\u5bf9\u662f\u5426\u5b58\u5728\u53ca\u5220\u9664\u5143\u7d20","title":"\u94fe\u63a5"},{"location":"08.2/","text":"8.2 \u6d4b\u8bd5\u952e\u503c\u5bf9\u662f\u5426\u5b58\u5728\u53ca\u5220\u9664\u5143\u7d20 \u00b6 \u6d4b\u8bd5 map1 \u4e2d\u662f\u5426\u5b58\u5728 key1 \uff1a \u5728\u4f8b\u5b50 8.1 \u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u89c1\u8fc7\u53ef\u4ee5\u4f7f\u7528 val1 = map1[key1] \u7684\u65b9\u6cd5\u83b7\u53d6 key1 \u5bf9\u5e94\u7684\u503c val1 \u3002\u5982\u679c map \u4e2d\u4e0d\u5b58\u5728 key1 \uff0c val1 \u5c31\u662f\u4e00\u4e2a\u503c\u7c7b\u578b\u7684\u7a7a\u503c\u3002 \u8fd9\u5c31\u4f1a\u7ed9\u6211\u4eec\u5e26\u6765\u56f0\u60d1\u4e86\uff1a\u73b0\u5728\u6211\u4eec\u6ca1\u6cd5\u533a\u5206\u5230\u5e95\u662f key1 \u4e0d\u5b58\u5728\u8fd8\u662f\u5b83\u5bf9\u5e94\u7684 value \u5c31\u662f\u7a7a\u503c\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u7528\uff1a val1, isPresent = map1[key1] isPresent \u8fd4\u56de\u4e00\u4e2a bool \u503c\uff1a\u5982\u679c key1 \u5b58\u5728\u4e8e map1 \uff0c val1 \u5c31\u662f key1 \u5bf9\u5e94\u7684 value \u503c\uff0c\u5e76\u4e14 isPresent \u4e3a true \uff1b\u5982\u679c key1 \u4e0d\u5b58\u5728\uff0c val1 \u5c31\u662f\u4e00\u4e2a\u7a7a\u503c\uff0c\u5e76\u4e14 isPresent \u4f1a\u8fd4\u56de false \u3002 \u5982\u679c\u4f60\u53ea\u662f\u60f3\u5224\u65ad\u67d0\u4e2a key \u662f\u5426\u5b58\u5728\u800c\u4e0d\u5173\u5fc3\u5b83\u5bf9\u5e94\u7684\u503c\u5230\u5e95\u662f\u591a\u5c11\uff0c\u4f60\u53ef\u4ee5\u8fd9\u4e48\u505a\uff1a _ , ok := map1 [ key1 ] // \u5982\u679ckey1\u5b58\u5728\u5219ok == true\uff0c\u5426\u5219ok\u4e3afalse \u6216\u8005\u548c if \u6df7\u5408\u4f7f\u7528\uff1a if _ , ok := map1 [ key1 ]; ok { // ... } \u4ece map1 \u4e2d\u5220\u9664 key1 \uff1a \u76f4\u63a5 delete(map1, key1) \u5c31\u53ef\u4ee5\u3002 \u5982\u679c key1 \u4e0d\u5b58\u5728\uff0c\u8be5\u64cd\u4f5c\u4e0d\u4f1a\u4ea7\u751f\u9519\u8bef\u3002 \u793a\u4f8b 8.4 map_testelement.go package main import \"fmt\" func main () { var value int var isPresent bool map1 := make ( map [ string ] int ) map1 [ \"New Delhi\" ] = 55 map1 [ \"Beijing\" ] = 20 map1 [ \"Washington\" ] = 25 value , isPresent = map1 [ \"Beijing\" ] if isPresent { fmt . Printf ( \"The value of \\\"Beijing\\\" in map1 is: %d\\n\" , value ) } else { fmt . Printf ( \"map1 does not contain Beijing\" ) } value , isPresent = map1 [ \"Paris\" ] fmt . Printf ( \"Is \\\"Paris\\\" in map1 ?: %t\\n\" , isPresent ) fmt . Printf ( \"Value is: %d\\n\" , value ) // delete an item: delete ( map1 , \"Washington\" ) value , isPresent = map1 [ \"Washington\" ] if isPresent { fmt . Printf ( \"The value of \\\"Washington\\\" in map1 is: %d\\n\" , value ) } else { fmt . Println ( \"map1 does not contain Washington\" ) } } \u8f93\u51fa\u7ed3\u679c\uff1a The value of \"Beijing\" in map1 is: 20 Is \"Paris\" in map1 ?: false Value is: 0 map1 does not contain Washington \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u58f0\u660e\u3001\u521d\u59cb\u5316\u548c make \u4e0b\u4e00\u8282\uff1a for-range \u7684\u914d\u5957\u7528\u6cd5","title":"8.2 \u6d4b\u8bd5\u952e\u503c\u5bf9\u662f\u5426\u5b58\u5728\u53ca\u5220\u9664\u5143\u7d20"},{"location":"08.2/#82","text":"\u6d4b\u8bd5 map1 \u4e2d\u662f\u5426\u5b58\u5728 key1 \uff1a \u5728\u4f8b\u5b50 8.1 \u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u89c1\u8fc7\u53ef\u4ee5\u4f7f\u7528 val1 = map1[key1] \u7684\u65b9\u6cd5\u83b7\u53d6 key1 \u5bf9\u5e94\u7684\u503c val1 \u3002\u5982\u679c map \u4e2d\u4e0d\u5b58\u5728 key1 \uff0c val1 \u5c31\u662f\u4e00\u4e2a\u503c\u7c7b\u578b\u7684\u7a7a\u503c\u3002 \u8fd9\u5c31\u4f1a\u7ed9\u6211\u4eec\u5e26\u6765\u56f0\u60d1\u4e86\uff1a\u73b0\u5728\u6211\u4eec\u6ca1\u6cd5\u533a\u5206\u5230\u5e95\u662f key1 \u4e0d\u5b58\u5728\u8fd8\u662f\u5b83\u5bf9\u5e94\u7684 value \u5c31\u662f\u7a7a\u503c\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u7528\uff1a val1, isPresent = map1[key1] isPresent \u8fd4\u56de\u4e00\u4e2a bool \u503c\uff1a\u5982\u679c key1 \u5b58\u5728\u4e8e map1 \uff0c val1 \u5c31\u662f key1 \u5bf9\u5e94\u7684 value \u503c\uff0c\u5e76\u4e14 isPresent \u4e3a true \uff1b\u5982\u679c key1 \u4e0d\u5b58\u5728\uff0c val1 \u5c31\u662f\u4e00\u4e2a\u7a7a\u503c\uff0c\u5e76\u4e14 isPresent \u4f1a\u8fd4\u56de false \u3002 \u5982\u679c\u4f60\u53ea\u662f\u60f3\u5224\u65ad\u67d0\u4e2a key \u662f\u5426\u5b58\u5728\u800c\u4e0d\u5173\u5fc3\u5b83\u5bf9\u5e94\u7684\u503c\u5230\u5e95\u662f\u591a\u5c11\uff0c\u4f60\u53ef\u4ee5\u8fd9\u4e48\u505a\uff1a _ , ok := map1 [ key1 ] // \u5982\u679ckey1\u5b58\u5728\u5219ok == true\uff0c\u5426\u5219ok\u4e3afalse \u6216\u8005\u548c if \u6df7\u5408\u4f7f\u7528\uff1a if _ , ok := map1 [ key1 ]; ok { // ... } \u4ece map1 \u4e2d\u5220\u9664 key1 \uff1a \u76f4\u63a5 delete(map1, key1) \u5c31\u53ef\u4ee5\u3002 \u5982\u679c key1 \u4e0d\u5b58\u5728\uff0c\u8be5\u64cd\u4f5c\u4e0d\u4f1a\u4ea7\u751f\u9519\u8bef\u3002 \u793a\u4f8b 8.4 map_testelement.go package main import \"fmt\" func main () { var value int var isPresent bool map1 := make ( map [ string ] int ) map1 [ \"New Delhi\" ] = 55 map1 [ \"Beijing\" ] = 20 map1 [ \"Washington\" ] = 25 value , isPresent = map1 [ \"Beijing\" ] if isPresent { fmt . Printf ( \"The value of \\\"Beijing\\\" in map1 is: %d\\n\" , value ) } else { fmt . Printf ( \"map1 does not contain Beijing\" ) } value , isPresent = map1 [ \"Paris\" ] fmt . Printf ( \"Is \\\"Paris\\\" in map1 ?: %t\\n\" , isPresent ) fmt . Printf ( \"Value is: %d\\n\" , value ) // delete an item: delete ( map1 , \"Washington\" ) value , isPresent = map1 [ \"Washington\" ] if isPresent { fmt . Printf ( \"The value of \\\"Washington\\\" in map1 is: %d\\n\" , value ) } else { fmt . Println ( \"map1 does not contain Washington\" ) } } \u8f93\u51fa\u7ed3\u679c\uff1a The value of \"Beijing\" in map1 is: 20 Is \"Paris\" in map1 ?: false Value is: 0 map1 does not contain Washington","title":"8.2 \u6d4b\u8bd5\u952e\u503c\u5bf9\u662f\u5426\u5b58\u5728\u53ca\u5220\u9664\u5143\u7d20"},{"location":"08.2/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u58f0\u660e\u3001\u521d\u59cb\u5316\u548c make \u4e0b\u4e00\u8282\uff1a for-range \u7684\u914d\u5957\u7528\u6cd5","title":"\u94fe\u63a5"},{"location":"08.3/","text":"8.3 for-range \u7684\u914d\u5957\u7528\u6cd5 \u00b6 \u53ef\u4ee5\u4f7f\u7528 for \u5faa\u73af\u8bfb\u53d6 map \uff1a for key , value := range map1 { ... } \u7b2c\u4e00\u4e2a\u8fd4\u56de\u503c key \u662f map \u4e2d\u7684 key \u503c\uff0c\u7b2c\u4e8c\u4e2a\u8fd4\u56de\u503c\u5219\u662f\u8be5 key \u5bf9\u5e94\u7684 value \u503c\uff1b\u8fd9\u4e24\u4e2a\u90fd\u662f\u4ec5 for \u5faa\u73af\u5185\u90e8\u53ef\u89c1\u7684\u5c40\u90e8\u53d8\u91cf\u3002\u5176\u4e2d\u7b2c\u4e00\u4e2a\u8fd4\u56de\u503c key \u503c\u662f\u4e00\u4e2a\u53ef\u9009\u5143\u7d20\u3002\u5982\u679c\u4f60\u53ea\u5173\u5fc3\u503c\uff0c\u53ef\u4ee5\u8fd9\u4e48\u4f7f\u7528\uff1a for _ , value := range map1 { ... } \u5982\u679c\u53ea\u60f3\u83b7\u53d6 key \uff0c\u4f60\u53ef\u4ee5\u8fd9\u4e48\u4f7f\u7528\uff1a for key := range map1 { fmt . Printf ( \"key is: %d\\n\" , key ) } \u793a\u4f8b 8.5 maps_forrange.go \uff1a package main import \"fmt\" func main () { map1 := make ( map [ int ] float32 ) map1 [ 1 ] = 1.0 map1 [ 2 ] = 2.0 map1 [ 3 ] = 3.0 map1 [ 4 ] = 4.0 for key , value := range map1 { fmt . Printf ( \"key is: %d - value is: %f\\n\" , key , value ) } } \u8f93\u51fa\u7ed3\u679c\uff1a key is: 3 - value is: 3.000000 key is: 1 - value is: 1.000000 key is: 4 - value is: 4.000000 key is: 2 - value is: 2.000000 \u6ce8\u610f map \u4e0d\u662f\u6309\u7167 key \u7684\u987a\u5e8f\u6392\u5217\u7684\uff0c\u4e5f\u4e0d\u662f\u6309\u7167 value \u7684\u5e8f\u6392\u5217\u7684\u3002 \u8bd1\u8005\u6ce8\uff1amap \u7684\u672c\u8d28\u662f\u6563\u5217\u8868\uff0c\u800c map \u7684\u589e\u957f\u6269\u5bb9\u4f1a\u5bfc\u81f4\u91cd\u65b0\u8fdb\u884c\u6563\u5217\uff0c\u8fd9\u5c31\u53ef\u80fd\u4f7f map \u7684\u904d\u5386\u7ed3\u679c\u5728\u6269\u5bb9\u524d\u540e\u53d8\u5f97\u4e0d\u53ef\u9760\uff0cGo \u8bbe\u8ba1\u8005\u4e3a\u4e86\u8ba9\u5927\u5bb6\u4e0d\u4f9d\u8d56\u904d\u5386\u7684\u987a\u5e8f\uff0c\u6bcf\u6b21\u904d\u5386\u7684\u8d77\u70b9--\u5373\u8d77\u59cb bucket \u7684\u4f4d\u7f6e\u4e0d\u4e00\u6837\uff0c\u5373\u4e0d\u8ba9\u904d\u5386\u90fd\u4ece\u67d0\u4e2a\u56fa\u5b9a\u7684 bucket0 \u5f00\u59cb\uff0c\u6240\u4ee5\u5373\u4f7f\u672a\u6269\u5bb9\u65f6\u6211\u4eec\u904d\u5386\u51fa\u6765\u7684 map \u4e5f\u603b\u662f\u65e0\u5e8f\u7684\u3002 \u95ee\u9898 8.1\uff1a \u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u7684\u8f93\u51fa\u662f\u4ec0\u4e48\uff1f capitals := map [ string ] string { \"France\" : \"Paris\" , \"Italy\" : \"Rome\" , \"Japan\" : \"Tokyo\" } for key := range capitals { fmt . Println ( \"Map item: Capital of\" , key , \"is\" , capitals [ key ]) } \u7ec3\u4e60 8.1 map_days.go \u521b\u5efa\u4e00\u4e2a map \u6765\u4fdd\u5b58\u6bcf\u5468 7 \u5929\u7684\u540d\u5b57\uff0c\u5c06\u5b83\u4eec\u6253\u5370\u51fa\u6765\u5e76\u4e14\u6d4b\u8bd5\u662f\u5426\u5b58\u5728 \"Tuesday\" \u548c \"Hollyday\" \u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6d4b\u8bd5\u952e\u503c\u5bf9\u662f\u5426\u5b58\u5728\u53ca\u5220\u9664\u5143\u7d20 \u4e0b\u4e00\u8282\uff1a map \u7c7b\u578b\u7684\u5207\u7247","title":"8.3 for-range \u7684\u914d\u5957\u7528\u6cd5"},{"location":"08.3/#83-for-range","text":"\u53ef\u4ee5\u4f7f\u7528 for \u5faa\u73af\u8bfb\u53d6 map \uff1a for key , value := range map1 { ... } \u7b2c\u4e00\u4e2a\u8fd4\u56de\u503c key \u662f map \u4e2d\u7684 key \u503c\uff0c\u7b2c\u4e8c\u4e2a\u8fd4\u56de\u503c\u5219\u662f\u8be5 key \u5bf9\u5e94\u7684 value \u503c\uff1b\u8fd9\u4e24\u4e2a\u90fd\u662f\u4ec5 for \u5faa\u73af\u5185\u90e8\u53ef\u89c1\u7684\u5c40\u90e8\u53d8\u91cf\u3002\u5176\u4e2d\u7b2c\u4e00\u4e2a\u8fd4\u56de\u503c key \u503c\u662f\u4e00\u4e2a\u53ef\u9009\u5143\u7d20\u3002\u5982\u679c\u4f60\u53ea\u5173\u5fc3\u503c\uff0c\u53ef\u4ee5\u8fd9\u4e48\u4f7f\u7528\uff1a for _ , value := range map1 { ... } \u5982\u679c\u53ea\u60f3\u83b7\u53d6 key \uff0c\u4f60\u53ef\u4ee5\u8fd9\u4e48\u4f7f\u7528\uff1a for key := range map1 { fmt . Printf ( \"key is: %d\\n\" , key ) } \u793a\u4f8b 8.5 maps_forrange.go \uff1a package main import \"fmt\" func main () { map1 := make ( map [ int ] float32 ) map1 [ 1 ] = 1.0 map1 [ 2 ] = 2.0 map1 [ 3 ] = 3.0 map1 [ 4 ] = 4.0 for key , value := range map1 { fmt . Printf ( \"key is: %d - value is: %f\\n\" , key , value ) } } \u8f93\u51fa\u7ed3\u679c\uff1a key is: 3 - value is: 3.000000 key is: 1 - value is: 1.000000 key is: 4 - value is: 4.000000 key is: 2 - value is: 2.000000 \u6ce8\u610f map \u4e0d\u662f\u6309\u7167 key \u7684\u987a\u5e8f\u6392\u5217\u7684\uff0c\u4e5f\u4e0d\u662f\u6309\u7167 value \u7684\u5e8f\u6392\u5217\u7684\u3002 \u8bd1\u8005\u6ce8\uff1amap \u7684\u672c\u8d28\u662f\u6563\u5217\u8868\uff0c\u800c map \u7684\u589e\u957f\u6269\u5bb9\u4f1a\u5bfc\u81f4\u91cd\u65b0\u8fdb\u884c\u6563\u5217\uff0c\u8fd9\u5c31\u53ef\u80fd\u4f7f map \u7684\u904d\u5386\u7ed3\u679c\u5728\u6269\u5bb9\u524d\u540e\u53d8\u5f97\u4e0d\u53ef\u9760\uff0cGo \u8bbe\u8ba1\u8005\u4e3a\u4e86\u8ba9\u5927\u5bb6\u4e0d\u4f9d\u8d56\u904d\u5386\u7684\u987a\u5e8f\uff0c\u6bcf\u6b21\u904d\u5386\u7684\u8d77\u70b9--\u5373\u8d77\u59cb bucket \u7684\u4f4d\u7f6e\u4e0d\u4e00\u6837\uff0c\u5373\u4e0d\u8ba9\u904d\u5386\u90fd\u4ece\u67d0\u4e2a\u56fa\u5b9a\u7684 bucket0 \u5f00\u59cb\uff0c\u6240\u4ee5\u5373\u4f7f\u672a\u6269\u5bb9\u65f6\u6211\u4eec\u904d\u5386\u51fa\u6765\u7684 map \u4e5f\u603b\u662f\u65e0\u5e8f\u7684\u3002 \u95ee\u9898 8.1\uff1a \u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u7684\u8f93\u51fa\u662f\u4ec0\u4e48\uff1f capitals := map [ string ] string { \"France\" : \"Paris\" , \"Italy\" : \"Rome\" , \"Japan\" : \"Tokyo\" } for key := range capitals { fmt . Println ( \"Map item: Capital of\" , key , \"is\" , capitals [ key ]) } \u7ec3\u4e60 8.1 map_days.go \u521b\u5efa\u4e00\u4e2a map \u6765\u4fdd\u5b58\u6bcf\u5468 7 \u5929\u7684\u540d\u5b57\uff0c\u5c06\u5b83\u4eec\u6253\u5370\u51fa\u6765\u5e76\u4e14\u6d4b\u8bd5\u662f\u5426\u5b58\u5728 \"Tuesday\" \u548c \"Hollyday\" \u3002","title":"8.3 for-range \u7684\u914d\u5957\u7528\u6cd5"},{"location":"08.3/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6d4b\u8bd5\u952e\u503c\u5bf9\u662f\u5426\u5b58\u5728\u53ca\u5220\u9664\u5143\u7d20 \u4e0b\u4e00\u8282\uff1a map \u7c7b\u578b\u7684\u5207\u7247","title":"\u94fe\u63a5"},{"location":"08.4/","text":"8.4 map \u7c7b\u578b\u7684\u5207\u7247 \u00b6 \u5047\u8bbe\u6211\u4eec\u60f3\u83b7\u53d6\u4e00\u4e2a map \u7c7b\u578b\u7684\u5207\u7247\uff0c\u6211\u4eec\u5fc5\u987b\u4f7f\u7528\u4e24\u6b21 make() \u51fd\u6570\uff0c\u7b2c\u4e00\u6b21\u5206\u914d\u5207\u7247\uff0c\u7b2c\u4e8c\u6b21\u5206\u914d\u5207\u7247\u4e2d\u6bcf\u4e2a map \u5143\u7d20\uff08\u53c2\u89c1\u4e0b\u9762\u7684\u4f8b\u5b50 8.4\uff09\u3002 \u793a\u4f8b 8.4 maps_forrange2.go \uff1a package main import \"fmt\" func main () { // Version A: items := make ([] map [ int ] int , 5 ) for i := range items { items [ i ] = make ( map [ int ] int , 1 ) items [ i ][ 1 ] = 2 } fmt . Printf ( \"Version A: Value of items: %v\\n\" , items ) // Version B: NOT GOOD! items2 := make ([] map [ int ] int , 5 ) for _ , item := range items2 { item = make ( map [ int ] int , 1 ) // item is only a copy of the slice element. item [ 1 ] = 2 // This 'item' will be lost on the next iteration. } fmt . Printf ( \"Version B: Value of items: %v\\n\" , items2 ) } \u8f93\u51fa\u7ed3\u679c\uff1a Version A: Value of items: [map[1:2] map[1:2] map[1:2] map[1:2] map[1:2]] Version B: Value of items: [map[] map[] map[] map[] map[]] \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e94\u5f53\u50cf A \u7248\u672c\u90a3\u6837\u901a\u8fc7\u7d22\u5f15\u4f7f\u7528\u5207\u7247\u7684 map \u5143\u7d20\u3002\u5728 B \u7248\u672c\u4e2d\u83b7\u5f97\u7684\u9879\u53ea\u662f map \u503c\u7684\u4e00\u4e2a\u62f7\u8d1d\u800c\u5df2\uff0c\u6240\u4ee5\u771f\u6b63\u7684 map \u5143\u7d20\u6ca1\u6709\u5f97\u5230\u521d\u59cb\u5316\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a for-range \u7684\u914d\u5957\u7528\u6cd5 \u4e0b\u4e00\u8282\uff1a map \u7684\u6392\u5e8f","title":"8.4 map \u7c7b\u578b\u7684\u5207\u7247"},{"location":"08.4/#84-map","text":"\u5047\u8bbe\u6211\u4eec\u60f3\u83b7\u53d6\u4e00\u4e2a map \u7c7b\u578b\u7684\u5207\u7247\uff0c\u6211\u4eec\u5fc5\u987b\u4f7f\u7528\u4e24\u6b21 make() \u51fd\u6570\uff0c\u7b2c\u4e00\u6b21\u5206\u914d\u5207\u7247\uff0c\u7b2c\u4e8c\u6b21\u5206\u914d\u5207\u7247\u4e2d\u6bcf\u4e2a map \u5143\u7d20\uff08\u53c2\u89c1\u4e0b\u9762\u7684\u4f8b\u5b50 8.4\uff09\u3002 \u793a\u4f8b 8.4 maps_forrange2.go \uff1a package main import \"fmt\" func main () { // Version A: items := make ([] map [ int ] int , 5 ) for i := range items { items [ i ] = make ( map [ int ] int , 1 ) items [ i ][ 1 ] = 2 } fmt . Printf ( \"Version A: Value of items: %v\\n\" , items ) // Version B: NOT GOOD! items2 := make ([] map [ int ] int , 5 ) for _ , item := range items2 { item = make ( map [ int ] int , 1 ) // item is only a copy of the slice element. item [ 1 ] = 2 // This 'item' will be lost on the next iteration. } fmt . Printf ( \"Version B: Value of items: %v\\n\" , items2 ) } \u8f93\u51fa\u7ed3\u679c\uff1a Version A: Value of items: [map[1:2] map[1:2] map[1:2] map[1:2] map[1:2]] Version B: Value of items: [map[] map[] map[] map[] map[]] \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e94\u5f53\u50cf A \u7248\u672c\u90a3\u6837\u901a\u8fc7\u7d22\u5f15\u4f7f\u7528\u5207\u7247\u7684 map \u5143\u7d20\u3002\u5728 B \u7248\u672c\u4e2d\u83b7\u5f97\u7684\u9879\u53ea\u662f map \u503c\u7684\u4e00\u4e2a\u62f7\u8d1d\u800c\u5df2\uff0c\u6240\u4ee5\u771f\u6b63\u7684 map \u5143\u7d20\u6ca1\u6709\u5f97\u5230\u521d\u59cb\u5316\u3002","title":"8.4 map \u7c7b\u578b\u7684\u5207\u7247"},{"location":"08.4/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a for-range \u7684\u914d\u5957\u7528\u6cd5 \u4e0b\u4e00\u8282\uff1a map \u7684\u6392\u5e8f","title":"\u94fe\u63a5"},{"location":"08.5/","text":"8.5 map \u7684\u6392\u5e8f \u00b6 map \u9ed8\u8ba4\u662f\u65e0\u5e8f\u7684\uff0c\u4e0d\u7ba1\u662f\u6309\u7167 key \u8fd8\u662f\u6309\u7167 value \u9ed8\u8ba4\u90fd\u4e0d\u6392\u5e8f\uff08\u8be6\u89c1\u7b2c 8.3 \u8282\uff09\u3002 \u5982\u679c\u4f60\u60f3\u4e3a map \u6392\u5e8f\uff0c\u9700\u8981\u5c06 key\uff08\u6216\u8005 value\uff09\u62f7\u8d1d\u5230\u4e00\u4e2a\u5207\u7247\uff0c\u518d\u5bf9\u5207\u7247\u6392\u5e8f\uff08\u4f7f\u7528 sort \u5305\uff0c\u8be6\u89c1 \u7b2c 7.6.6 \u8282 \uff09\uff0c\u7136\u540e\u53ef\u4ee5\u4f7f\u7528\u5207\u7247\u7684 for-range \u65b9\u6cd5\u6253\u5370\u51fa\u6240\u6709\u7684 key \u548c value\u3002 \u4e0b\u9762\u6709\u4e00\u4e2a\u793a\u4f8b\uff1a \u793a\u4f8b 8.6 sort_map.go \uff1a // the telephone alphabet: package main import ( \"fmt\" \"sort\" ) var ( barVal = map [ string ] int { \"alpha\" : 34 , \"bravo\" : 56 , \"charlie\" : 23 , \"delta\" : 87 , \"echo\" : 56 , \"foxtrot\" : 12 , \"golf\" : 34 , \"hotel\" : 16 , \"indio\" : 87 , \"juliet\" : 65 , \"kili\" : 43 , \"lima\" : 98 } ) func main () { fmt . Println ( \"unsorted:\" ) for k , v := range barVal { fmt . Printf ( \"Key: %v, Value: %v / \" , k , v ) } keys := make ([] string , len ( barVal )) i := 0 for k , _ := range barVal { keys [ i ] = k i ++ } sort . Strings ( keys ) fmt . Println () fmt . Println ( \"sorted:\" ) for _ , k := range keys { fmt . Printf ( \"Key: %v, Value: %v / \" , k , barVal [ k ]) } } \u8f93\u51fa\u7ed3\u679c\uff1a unsorted: Key: bravo, Value: 56 / Key: echo, Value: 56 / Key: indio, Value: 87 / Key: juliet, Value: 65 / Key: alpha, Value: 34 / Key: charlie, Value: 23 / Key: delta, Value: 87 / Key: foxtrot, Value: 12 / Key: golf, Value: 34 / Key: hotel, Value: 16 / Key: kili, Value: 43 / Key: lima, Value: 98 / sorted: Key: alpha, Value: 34 / Key: bravo, Value: 56 / Key: charlie, Value: 23 / Key: delta, Value: 87 / Key: echo, Value: 56 / Key: foxtrot, Value: 12 / Key: golf, Value: 34 / Key: hotel, Value: 16 / Key: indio, Value: 87 / Key: juliet, Value: 65 / Key: kili, Value: 43 / Key: lima, Value: 98 / \u4f46\u662f\u5982\u679c\u4f60\u60f3\u8981\u4e00\u4e2a\u6392\u5e8f\u7684\u5217\u8868\uff0c\u90a3\u4e48\u6700\u597d\u4f7f\u7528\u7ed3\u6784\u4f53\u5207\u7247\uff0c\u8fd9\u6837\u4f1a\u66f4\u6709\u6548\uff1a type name struct { key string value int } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a map \u7c7b\u578b\u7684\u5207\u7247 \u4e0b\u4e00\u8282\uff1a \u5c06 map \u7684\u952e\u503c\u5bf9\u8c03","title":"8.5 map \u7684\u6392\u5e8f"},{"location":"08.5/#85-map","text":"map \u9ed8\u8ba4\u662f\u65e0\u5e8f\u7684\uff0c\u4e0d\u7ba1\u662f\u6309\u7167 key \u8fd8\u662f\u6309\u7167 value \u9ed8\u8ba4\u90fd\u4e0d\u6392\u5e8f\uff08\u8be6\u89c1\u7b2c 8.3 \u8282\uff09\u3002 \u5982\u679c\u4f60\u60f3\u4e3a map \u6392\u5e8f\uff0c\u9700\u8981\u5c06 key\uff08\u6216\u8005 value\uff09\u62f7\u8d1d\u5230\u4e00\u4e2a\u5207\u7247\uff0c\u518d\u5bf9\u5207\u7247\u6392\u5e8f\uff08\u4f7f\u7528 sort \u5305\uff0c\u8be6\u89c1 \u7b2c 7.6.6 \u8282 \uff09\uff0c\u7136\u540e\u53ef\u4ee5\u4f7f\u7528\u5207\u7247\u7684 for-range \u65b9\u6cd5\u6253\u5370\u51fa\u6240\u6709\u7684 key \u548c value\u3002 \u4e0b\u9762\u6709\u4e00\u4e2a\u793a\u4f8b\uff1a \u793a\u4f8b 8.6 sort_map.go \uff1a // the telephone alphabet: package main import ( \"fmt\" \"sort\" ) var ( barVal = map [ string ] int { \"alpha\" : 34 , \"bravo\" : 56 , \"charlie\" : 23 , \"delta\" : 87 , \"echo\" : 56 , \"foxtrot\" : 12 , \"golf\" : 34 , \"hotel\" : 16 , \"indio\" : 87 , \"juliet\" : 65 , \"kili\" : 43 , \"lima\" : 98 } ) func main () { fmt . Println ( \"unsorted:\" ) for k , v := range barVal { fmt . Printf ( \"Key: %v, Value: %v / \" , k , v ) } keys := make ([] string , len ( barVal )) i := 0 for k , _ := range barVal { keys [ i ] = k i ++ } sort . Strings ( keys ) fmt . Println () fmt . Println ( \"sorted:\" ) for _ , k := range keys { fmt . Printf ( \"Key: %v, Value: %v / \" , k , barVal [ k ]) } } \u8f93\u51fa\u7ed3\u679c\uff1a unsorted: Key: bravo, Value: 56 / Key: echo, Value: 56 / Key: indio, Value: 87 / Key: juliet, Value: 65 / Key: alpha, Value: 34 / Key: charlie, Value: 23 / Key: delta, Value: 87 / Key: foxtrot, Value: 12 / Key: golf, Value: 34 / Key: hotel, Value: 16 / Key: kili, Value: 43 / Key: lima, Value: 98 / sorted: Key: alpha, Value: 34 / Key: bravo, Value: 56 / Key: charlie, Value: 23 / Key: delta, Value: 87 / Key: echo, Value: 56 / Key: foxtrot, Value: 12 / Key: golf, Value: 34 / Key: hotel, Value: 16 / Key: indio, Value: 87 / Key: juliet, Value: 65 / Key: kili, Value: 43 / Key: lima, Value: 98 / \u4f46\u662f\u5982\u679c\u4f60\u60f3\u8981\u4e00\u4e2a\u6392\u5e8f\u7684\u5217\u8868\uff0c\u90a3\u4e48\u6700\u597d\u4f7f\u7528\u7ed3\u6784\u4f53\u5207\u7247\uff0c\u8fd9\u6837\u4f1a\u66f4\u6709\u6548\uff1a type name struct { key string value int }","title":"8.5 map \u7684\u6392\u5e8f"},{"location":"08.5/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a map \u7c7b\u578b\u7684\u5207\u7247 \u4e0b\u4e00\u8282\uff1a \u5c06 map \u7684\u952e\u503c\u5bf9\u8c03","title":"\u94fe\u63a5"},{"location":"08.6/","text":"8.6 \u5c06 map \u7684\u952e\u503c\u5bf9\u8c03 \u00b6 \u8fd9\u91cc\u5bf9\u8c03\u662f\u6307\u8c03\u6362 key \u548c value\u3002\u5982\u679c map \u7684\u503c\u7c7b\u578b\u53ef\u4ee5\u4f5c\u4e3a key \u4e14\u6240\u6709\u7684 value \u662f\u552f\u4e00\u7684\uff0c\u90a3\u4e48\u901a\u8fc7\u4e0b\u9762\u7684\u65b9\u6cd5\u53ef\u4ee5\u7b80\u5355\u7684\u505a\u5230\u952e\u503c\u5bf9\u8c03\u3002 \u793a\u4f8b 8.7 invert_map.go \uff1a package main import ( \"fmt\" ) var ( barVal = map [ string ] int { \"alpha\" : 34 , \"bravo\" : 56 , \"charlie\" : 23 , \"delta\" : 87 , \"echo\" : 56 , \"foxtrot\" : 12 , \"golf\" : 34 , \"hotel\" : 16 , \"indio\" : 87 , \"juliet\" : 65 , \"kili\" : 43 , \"lima\" : 98 } ) func main () { invMap := make ( map [ int ] string , len ( barVal )) for k , v := range barVal { invMap [ v ] = k } fmt . Println ( \"inverted:\" ) for k , v := range invMap { fmt . Printf ( \"Key: %v, Value: %v / \" , k , v ) } } \u8f93\u51fa\u7ed3\u679c\uff1a inverted: Key: 34, Value: golf / Key: 23, Value: charlie / Key: 16, Value: hotel / Key: 87, Value: delta / Key: 98, Value: lima / Key: 12, Value: foxtrot / Key: 43, Value: kili / Key: 56, Value: bravo / Key: 65, Value: juliet / \u5982\u679c\u539f\u59cb value \u503c\u4e0d\u552f\u4e00\u90a3\u8fd9\u4e48\u505a\u80af\u5b9a\u4f1a\u51fa\u95ee\u9898\uff1b\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u62a5\u9519\uff0c\u4f46\u662f\u5f53\u9047\u5230\u4e0d\u552f\u4e00\u7684 key \u65f6\u5e94\u5f53\u76f4\u63a5\u505c\u6b62\u5bf9\u8c03\uff0c\u4e14\u6b64\u65f6\u5bf9\u8c03\u540e\u7684 map \u5f88\u53ef\u80fd\u6ca1\u6709\u5305\u542b\u539f map \u7684\u6240\u6709\u952e\u503c\u5bf9\uff01\u4e00\u79cd\u89e3\u51b3\u65b9\u6cd5\u5c31\u662f\u4ed4\u7ec6\u68c0\u67e5\u552f\u4e00\u6027\u5e76\u4e14\u4f7f\u7528\u591a\u503c map \uff0c\u6bd4\u5982\u4f7f\u7528 map[int][]string \u7c7b\u578b\u3002 \u7ec3\u4e60 8.2 map_drinks.go \u6784\u9020\u4e00\u4e2a\u5c06\u82f1\u6587\u996e\u6599\u540d\u6620\u5c04\u4e3a\u6cd5\u8bed\uff08\u6216\u8005\u4efb\u610f\u4f60\u7684\u6bcd\u8bed\uff09\u7684\u96c6\u5408\uff1b\u5148\u6253\u5370\u6240\u6709\u7684\u996e\u6599\uff0c\u7136\u540e\u6253\u5370\u539f\u540d\u548c\u7ffb\u8bd1\u540e\u7684\u540d\u5b57\u3002\u63a5\u4e0b\u6765\u6309\u7167\u82f1\u6587\u540d\u6392\u5e8f\u540e\u518d\u6253\u5370\u51fa\u6765\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a map \u7684\u6392\u5e8f \u4e0b\u4e00\u7ae0\uff1a \u5305 (package)","title":"8.6 \u5c06 map \u7684\u952e\u503c\u5bf9\u8c03"},{"location":"08.6/#86-map","text":"\u8fd9\u91cc\u5bf9\u8c03\u662f\u6307\u8c03\u6362 key \u548c value\u3002\u5982\u679c map \u7684\u503c\u7c7b\u578b\u53ef\u4ee5\u4f5c\u4e3a key \u4e14\u6240\u6709\u7684 value \u662f\u552f\u4e00\u7684\uff0c\u90a3\u4e48\u901a\u8fc7\u4e0b\u9762\u7684\u65b9\u6cd5\u53ef\u4ee5\u7b80\u5355\u7684\u505a\u5230\u952e\u503c\u5bf9\u8c03\u3002 \u793a\u4f8b 8.7 invert_map.go \uff1a package main import ( \"fmt\" ) var ( barVal = map [ string ] int { \"alpha\" : 34 , \"bravo\" : 56 , \"charlie\" : 23 , \"delta\" : 87 , \"echo\" : 56 , \"foxtrot\" : 12 , \"golf\" : 34 , \"hotel\" : 16 , \"indio\" : 87 , \"juliet\" : 65 , \"kili\" : 43 , \"lima\" : 98 } ) func main () { invMap := make ( map [ int ] string , len ( barVal )) for k , v := range barVal { invMap [ v ] = k } fmt . Println ( \"inverted:\" ) for k , v := range invMap { fmt . Printf ( \"Key: %v, Value: %v / \" , k , v ) } } \u8f93\u51fa\u7ed3\u679c\uff1a inverted: Key: 34, Value: golf / Key: 23, Value: charlie / Key: 16, Value: hotel / Key: 87, Value: delta / Key: 98, Value: lima / Key: 12, Value: foxtrot / Key: 43, Value: kili / Key: 56, Value: bravo / Key: 65, Value: juliet / \u5982\u679c\u539f\u59cb value \u503c\u4e0d\u552f\u4e00\u90a3\u8fd9\u4e48\u505a\u80af\u5b9a\u4f1a\u51fa\u95ee\u9898\uff1b\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u62a5\u9519\uff0c\u4f46\u662f\u5f53\u9047\u5230\u4e0d\u552f\u4e00\u7684 key \u65f6\u5e94\u5f53\u76f4\u63a5\u505c\u6b62\u5bf9\u8c03\uff0c\u4e14\u6b64\u65f6\u5bf9\u8c03\u540e\u7684 map \u5f88\u53ef\u80fd\u6ca1\u6709\u5305\u542b\u539f map \u7684\u6240\u6709\u952e\u503c\u5bf9\uff01\u4e00\u79cd\u89e3\u51b3\u65b9\u6cd5\u5c31\u662f\u4ed4\u7ec6\u68c0\u67e5\u552f\u4e00\u6027\u5e76\u4e14\u4f7f\u7528\u591a\u503c map \uff0c\u6bd4\u5982\u4f7f\u7528 map[int][]string \u7c7b\u578b\u3002 \u7ec3\u4e60 8.2 map_drinks.go \u6784\u9020\u4e00\u4e2a\u5c06\u82f1\u6587\u996e\u6599\u540d\u6620\u5c04\u4e3a\u6cd5\u8bed\uff08\u6216\u8005\u4efb\u610f\u4f60\u7684\u6bcd\u8bed\uff09\u7684\u96c6\u5408\uff1b\u5148\u6253\u5370\u6240\u6709\u7684\u996e\u6599\uff0c\u7136\u540e\u6253\u5370\u539f\u540d\u548c\u7ffb\u8bd1\u540e\u7684\u540d\u5b57\u3002\u63a5\u4e0b\u6765\u6309\u7167\u82f1\u6587\u540d\u6392\u5e8f\u540e\u518d\u6253\u5370\u51fa\u6765\u3002","title":"8.6 \u5c06 map \u7684\u952e\u503c\u5bf9\u8c03"},{"location":"08.6/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a map \u7684\u6392\u5e8f \u4e0b\u4e00\u7ae0\uff1a \u5305 (package)","title":"\u94fe\u63a5"},{"location":"09.0/","text":"9.0 \u5305 (package) \u00b6 \u672c\u7ae0\u4e3b\u8981\u9488\u5bf9 Go \u8bed\u8a00\u7684\u5305\u5c55\u5f00\u8bb2\u89e3\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5c06 map \u7684\u952e\u503c\u5bf9\u8c03 \u4e0b\u4e00\u8282\uff1a \u6807\u51c6\u5e93\u6982\u8ff0","title":"9.0 \u5305 (package)"},{"location":"09.0/#90-package","text":"\u672c\u7ae0\u4e3b\u8981\u9488\u5bf9 Go \u8bed\u8a00\u7684\u5305\u5c55\u5f00\u8bb2\u89e3\u3002","title":"9.0 \u5305 (package)"},{"location":"09.0/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5c06 map \u7684\u952e\u503c\u5bf9\u8c03 \u4e0b\u4e00\u8282\uff1a \u6807\u51c6\u5e93\u6982\u8ff0","title":"\u94fe\u63a5"},{"location":"09.1/","text":"9.1 \u6807\u51c6\u5e93\u6982\u8ff0 \u00b6 \u50cf fmt \u3001 os \u7b49\u8fd9\u6837\u5177\u6709\u5e38\u7528\u529f\u80fd\u7684\u5185\u7f6e\u5305\u5728 Go \u8bed\u8a00\u4e2d\u6709 150 \u4e2a\u4ee5\u4e0a\uff0c\u5b83\u4eec\u88ab\u79f0\u4e3a\u6807\u51c6\u5e93\uff0c\u5927\u90e8\u5206(\u4e00\u4e9b\u5e95\u5c42\u7684\u9664\u5916)\u5185\u7f6e\u4e8e Go \u672c\u8eab\u3002\u5b8c\u6574\u5217\u8868\u53ef\u4ee5\u5728 Go Walker \u67e5\u770b\u3002 \u5728\u8d2f\u7a7f\u672c\u4e66\u7684\u4f8b\u5b50\u548c\u7ec3\u4e60\u4e2d\uff0c\u6211\u4eec\u90fd\u662f\u7528\u6807\u51c6\u5e93\u7684\u5305\u3002\u53ef\u4ee5\u901a\u8fc7\u67e5\u9605\u7b2c 350 \u9875\u5305\u4e2d\u7684\u5185\u5bb9\u5feb\u901f\u627e\u5230\u76f8\u5173\u7684\u5305\u7684\u5b9e\u4f8b\u3002\u8fd9\u91cc\u6211\u4eec\u53ea\u662f\u6309\u529f\u80fd\u8fdb\u884c\u5206\u7ec4\u6765\u4ecb\u7ecd\u8fd9\u4e9b\u5305\u7684\u7b80\u5355\u7528\u9014\uff0c\u6211\u4eec\u4e0d\u4f1a\u6df1\u5165\u8ba8\u8bba\u4ed6\u4eec\u7684\u5185\u90e8\u7ed3\u6784\u3002 unsafe : \u5305\u542b\u4e86\u4e00\u4e9b\u6253\u7834 Go \u8bed\u8a00\u201c\u7c7b\u578b\u5b89\u5168\u201d\u7684\u547d\u4ee4\uff0c\u4e00\u822c\u7684\u7a0b\u5e8f\u4e2d\u4e0d\u4f1a\u88ab\u4f7f\u7528\uff0c\u53ef\u7528\u5728 C/C++ \u7a0b\u5e8f\u7684\u8c03\u7528\u4e2d\u3002 syscall - os - os/exec : os : \u63d0\u4f9b\u7ed9\u6211\u4eec\u4e00\u4e2a\u5e73\u53f0\u65e0\u5173\u6027\u7684\u64cd\u4f5c\u7cfb\u7edf\u529f\u80fd\u63a5\u53e3\uff0c\u91c7\u7528\u7c7b Unix \u8bbe\u8ba1\uff0c\u9690\u85cf\u4e86\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u95f4\u7684\u5dee\u5f02\uff0c\u8ba9\u4e0d\u540c\u7684\u6587\u4ef6\u7cfb\u7edf\u548c\u64cd\u4f5c\u7cfb\u7edf\u5bf9\u8c61\u8868\u73b0\u4e00\u81f4\u3002 os/exec : \u63d0\u4f9b\u6211\u4eec\u8fd0\u884c\u5916\u90e8\u64cd\u4f5c\u7cfb\u7edf\u547d\u4ee4\u548c\u7a0b\u5e8f\u7684\u65b9\u5f0f\u3002 syscall : \u5e95\u5c42\u7684\u5916\u90e8\u5305\uff0c\u63d0\u4f9b\u4e86\u64cd\u4f5c\u7cfb\u7edf\u5e95\u5c42\u8c03\u7528\u7684\u57fa\u672c\u63a5\u53e3\u3002 \u901a\u8fc7\u4e00\u4e2a Go \u7a0b\u5e8f\u8ba9Linux\u91cd\u542f\u6765\u4f53\u73b0\u5b83\u7684\u80fd\u529b\u3002 \u793a\u4f8b 9.1 reboot.go \uff1a package main import ( \"syscall\" ) const LINUX_REBOOT_MAGIC1 uintptr = 0xfee1dead const LINUX_REBOOT_MAGIC2 uintptr = 672274793 const LINUX_REBOOT_CMD_RESTART uintptr = 0x1234567 func main () { syscall . Syscall ( syscall . SYS_REBOOT , LINUX_REBOOT_MAGIC1 , LINUX_REBOOT_MAGIC2 , LINUX_REBOOT_CMD_RESTART ) } archive/tar \u548c /zip-compress \uff1a\u538b\u7f29\uff08\u89e3\u538b\u7f29\uff09\u6587\u4ef6\u529f\u80fd\u3002 fmt - io - bufio - path/filepath - flag : fmt : \u63d0\u4f9b\u4e86\u683c\u5f0f\u5316\u8f93\u5165\u8f93\u51fa\u529f\u80fd\u3002 io : \u63d0\u4f9b\u4e86\u57fa\u672c\u8f93\u5165\u8f93\u51fa\u529f\u80fd\uff0c\u5927\u591a\u6570\u662f\u56f4\u7ed5\u7cfb\u7edf\u529f\u80fd\u7684\u5c01\u88c5\u3002 bufio : \u7f13\u51b2\u8f93\u5165\u8f93\u51fa\u529f\u80fd\u7684\u5c01\u88c5\u3002 path/filepath : \u7528\u6765\u64cd\u4f5c\u5728\u5f53\u524d\u7cfb\u7edf\u4e2d\u7684\u76ee\u6807\u6587\u4ef6\u540d\u8def\u5f84\u3002 flag : \u5bf9\u547d\u4ee4\u884c\u53c2\u6570\u7684\u64cd\u4f5c\u3002\u3000\u3000 strings - strconv - unicode - regexp - bytes : strings : \u63d0\u4f9b\u5bf9\u5b57\u7b26\u4e32\u7684\u64cd\u4f5c\u3002 strconv : \u63d0\u4f9b\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u57fa\u7840\u7c7b\u578b\u7684\u529f\u80fd\u3002 unicode : \u4e3a unicode \u578b\u7684\u5b57\u7b26\u4e32\u63d0\u4f9b\u7279\u6b8a\u7684\u529f\u80fd\u3002 regexp : \u6b63\u5219\u8868\u8fbe\u5f0f\u529f\u80fd\u3002 bytes : \u63d0\u4f9b\u5bf9\u5b57\u7b26\u578b\u5206\u7247\u7684\u64cd\u4f5c\u3002 index/suffixarray : \u5b50\u5b57\u7b26\u4e32\u5feb\u901f\u67e5\u8be2\u3002 math - math/cmath - math/big - math/rand - sort : math : \u57fa\u672c\u7684\u6570\u5b66\u51fd\u6570\u3002 math/cmath : \u5bf9\u590d\u6570\u7684\u64cd\u4f5c\u3002 math/rand : \u4f2a\u968f\u673a\u6570\u751f\u6210\u3002 sort : \u4e3a\u6570\u7ec4\u6392\u5e8f\u548c\u81ea\u5b9a\u4e49\u96c6\u5408\u3002 math/big : \u5927\u6570\u7684\u5b9e\u73b0\u548c\u8ba1\u7b97\u3002 \u3000\u3000 container - /list-ring-heap : \u5b9e\u73b0\u5bf9\u96c6\u5408\u7684\u64cd\u4f5c\u3002 list : \u53cc\u94fe\u8868\u3002 ring : \u73af\u5f62\u94fe\u8868\u3002 \u4e0b\u9762\u4ee3\u7801\u6f14\u793a\u4e86\u5982\u4f55\u904d\u5386\u4e00\u4e2a\u94fe\u8868(\u5f53 l \u662f *List )\uff1a for e := l . Front (); e != nil ; e = e . Next () { //do something with e.Value } time - log : time : \u65e5\u671f\u548c\u65f6\u95f4\u7684\u57fa\u672c\u64cd\u4f5c\u3002 log : \u8bb0\u5f55\u7a0b\u5e8f\u8fd0\u884c\u65f6\u4ea7\u751f\u7684\u65e5\u5fd7\uff0c\u6211\u4eec\u5c06\u5728\u540e\u9762\u7684\u7ae0\u8282\u4f7f\u7528\u5b83\u3002 encoding/json - encoding/xml - text/template : encoding/json : \u8bfb\u53d6\u5e76\u89e3\u7801\u548c\u5199\u5165\u5e76\u7f16\u7801 JSON \u6570\u636e\u3002 encoding/xml : \u7b80\u5355\u7684 XML1.0 \u89e3\u6790\u5668\uff0c\u6709\u5173 JSON \u548c XML \u7684\u5b9e\u4f8b\u8bf7\u67e5\u9605\u7b2c 12.9 / 10 \u7ae0\u8282\u3002 text/template :\u751f\u6210\u50cf HTML \u4e00\u6837\u7684\u6570\u636e\u4e0e\u6587\u672c\u6df7\u5408\u7684\u6570\u636e\u9a71\u52a8\u6a21\u677f\uff08\u53c2\u89c1 \u7b2c 15.7 \u8282 \uff09\u3002 net - net/http - html :\uff08\u53c2\u89c1 \u7b2c 15 \u7ae0 \uff09 net : \u7f51\u7edc\u6570\u636e\u7684\u57fa\u672c\u64cd\u4f5c\u3002 http : \u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u6269\u5c55\u7684 HTTP \u670d\u52a1\u5668\u548c\u57fa\u7840\u5ba2\u6237\u7aef\uff0c\u89e3\u6790 HTTP \u8bf7\u6c42\u548c\u56de\u590d\u3002 html : HTML5 \u89e3\u6790\u5668\u3002 runtime : Go \u7a0b\u5e8f\u8fd0\u884c\u65f6\u7684\u4ea4\u4e92\u64cd\u4f5c\uff0c\u4f8b\u5982\u5783\u573e\u56de\u6536\u548c\u534f\u7a0b\u521b\u5efa\u3002 reflect : \u5b9e\u73b0\u901a\u8fc7\u7a0b\u5e8f\u8fd0\u884c\u65f6\u53cd\u5c04\uff0c\u8ba9\u7a0b\u5e8f\u64cd\u4f5c\u4efb\u610f\u7c7b\u578b\u7684\u53d8\u91cf\u3002 exp \u5305\u4e2d\u6709\u8bb8\u591a\u5c06\u88ab\u7f16\u8bd1\u4e3a\u65b0\u5305\u7684\u5b9e\u9a8c\u6027\u7684\u5305\u3002\u5728\u4e0b\u6b21\u7a33\u5b9a\u7248\u672c\u53d1\u5e03\u7684\u65f6\u5019\uff0c\u5b83\u4eec\u5c06\u6210\u4e3a\u72ec\u7acb\u7684\u5305\u3002\u5982\u679c\u524d\u4e00\u4e2a\u7248\u672c\u5df2\u7ecf\u5b58\u5728\u4e86\uff0c\u5b83\u4eec\u5c06\u88ab\u4f5c\u4e3a\u8fc7\u65f6\u7684\u5305\u88ab\u56de\u6536\u3002\u7136\u800c Go1.0 \u53d1\u5e03\u7684\u65f6\u5019\u5e76\u6ca1\u6709\u5305\u542b\u8fc7\u65f6\u6216\u8005\u5b9e\u9a8c\u6027\u7684\u5305\u3002 \u7ec3\u4e60 9.1 Q20_linked_list.go \u4f7f\u7528 container/list \u5305\u5b9e\u73b0\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff0c\u5c06 101 \u3001 102 \u548c 103 \u653e\u5165\u5176\u4e2d\u5e76\u6253\u5370\u51fa\u6765\u3002 \u7ec3\u4e60 9.2 size_int.go \u901a\u8fc7\u4f7f\u7528 unsafe \u5305\u4e2d\u7684\u65b9\u6cd5\u6765\u6d4b\u8bd5\u4f60\u7535\u8111\u4e0a\u4e00\u4e2a\u6574\u578b\u53d8\u91cf\u5360\u7528\u591a\u5c11\u4e2a\u5b57\u8282\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5305 (package) \u4e0b\u4e00\u8282\uff1a regexp \u5305","title":"9.1 \u6807\u51c6\u5e93\u6982\u8ff0"},{"location":"09.1/#91","text":"\u50cf fmt \u3001 os \u7b49\u8fd9\u6837\u5177\u6709\u5e38\u7528\u529f\u80fd\u7684\u5185\u7f6e\u5305\u5728 Go \u8bed\u8a00\u4e2d\u6709 150 \u4e2a\u4ee5\u4e0a\uff0c\u5b83\u4eec\u88ab\u79f0\u4e3a\u6807\u51c6\u5e93\uff0c\u5927\u90e8\u5206(\u4e00\u4e9b\u5e95\u5c42\u7684\u9664\u5916)\u5185\u7f6e\u4e8e Go \u672c\u8eab\u3002\u5b8c\u6574\u5217\u8868\u53ef\u4ee5\u5728 Go Walker \u67e5\u770b\u3002 \u5728\u8d2f\u7a7f\u672c\u4e66\u7684\u4f8b\u5b50\u548c\u7ec3\u4e60\u4e2d\uff0c\u6211\u4eec\u90fd\u662f\u7528\u6807\u51c6\u5e93\u7684\u5305\u3002\u53ef\u4ee5\u901a\u8fc7\u67e5\u9605\u7b2c 350 \u9875\u5305\u4e2d\u7684\u5185\u5bb9\u5feb\u901f\u627e\u5230\u76f8\u5173\u7684\u5305\u7684\u5b9e\u4f8b\u3002\u8fd9\u91cc\u6211\u4eec\u53ea\u662f\u6309\u529f\u80fd\u8fdb\u884c\u5206\u7ec4\u6765\u4ecb\u7ecd\u8fd9\u4e9b\u5305\u7684\u7b80\u5355\u7528\u9014\uff0c\u6211\u4eec\u4e0d\u4f1a\u6df1\u5165\u8ba8\u8bba\u4ed6\u4eec\u7684\u5185\u90e8\u7ed3\u6784\u3002 unsafe : \u5305\u542b\u4e86\u4e00\u4e9b\u6253\u7834 Go \u8bed\u8a00\u201c\u7c7b\u578b\u5b89\u5168\u201d\u7684\u547d\u4ee4\uff0c\u4e00\u822c\u7684\u7a0b\u5e8f\u4e2d\u4e0d\u4f1a\u88ab\u4f7f\u7528\uff0c\u53ef\u7528\u5728 C/C++ \u7a0b\u5e8f\u7684\u8c03\u7528\u4e2d\u3002 syscall - os - os/exec : os : \u63d0\u4f9b\u7ed9\u6211\u4eec\u4e00\u4e2a\u5e73\u53f0\u65e0\u5173\u6027\u7684\u64cd\u4f5c\u7cfb\u7edf\u529f\u80fd\u63a5\u53e3\uff0c\u91c7\u7528\u7c7b Unix \u8bbe\u8ba1\uff0c\u9690\u85cf\u4e86\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u95f4\u7684\u5dee\u5f02\uff0c\u8ba9\u4e0d\u540c\u7684\u6587\u4ef6\u7cfb\u7edf\u548c\u64cd\u4f5c\u7cfb\u7edf\u5bf9\u8c61\u8868\u73b0\u4e00\u81f4\u3002 os/exec : \u63d0\u4f9b\u6211\u4eec\u8fd0\u884c\u5916\u90e8\u64cd\u4f5c\u7cfb\u7edf\u547d\u4ee4\u548c\u7a0b\u5e8f\u7684\u65b9\u5f0f\u3002 syscall : \u5e95\u5c42\u7684\u5916\u90e8\u5305\uff0c\u63d0\u4f9b\u4e86\u64cd\u4f5c\u7cfb\u7edf\u5e95\u5c42\u8c03\u7528\u7684\u57fa\u672c\u63a5\u53e3\u3002 \u901a\u8fc7\u4e00\u4e2a Go \u7a0b\u5e8f\u8ba9Linux\u91cd\u542f\u6765\u4f53\u73b0\u5b83\u7684\u80fd\u529b\u3002 \u793a\u4f8b 9.1 reboot.go \uff1a package main import ( \"syscall\" ) const LINUX_REBOOT_MAGIC1 uintptr = 0xfee1dead const LINUX_REBOOT_MAGIC2 uintptr = 672274793 const LINUX_REBOOT_CMD_RESTART uintptr = 0x1234567 func main () { syscall . Syscall ( syscall . SYS_REBOOT , LINUX_REBOOT_MAGIC1 , LINUX_REBOOT_MAGIC2 , LINUX_REBOOT_CMD_RESTART ) } archive/tar \u548c /zip-compress \uff1a\u538b\u7f29\uff08\u89e3\u538b\u7f29\uff09\u6587\u4ef6\u529f\u80fd\u3002 fmt - io - bufio - path/filepath - flag : fmt : \u63d0\u4f9b\u4e86\u683c\u5f0f\u5316\u8f93\u5165\u8f93\u51fa\u529f\u80fd\u3002 io : \u63d0\u4f9b\u4e86\u57fa\u672c\u8f93\u5165\u8f93\u51fa\u529f\u80fd\uff0c\u5927\u591a\u6570\u662f\u56f4\u7ed5\u7cfb\u7edf\u529f\u80fd\u7684\u5c01\u88c5\u3002 bufio : \u7f13\u51b2\u8f93\u5165\u8f93\u51fa\u529f\u80fd\u7684\u5c01\u88c5\u3002 path/filepath : \u7528\u6765\u64cd\u4f5c\u5728\u5f53\u524d\u7cfb\u7edf\u4e2d\u7684\u76ee\u6807\u6587\u4ef6\u540d\u8def\u5f84\u3002 flag : \u5bf9\u547d\u4ee4\u884c\u53c2\u6570\u7684\u64cd\u4f5c\u3002\u3000\u3000 strings - strconv - unicode - regexp - bytes : strings : \u63d0\u4f9b\u5bf9\u5b57\u7b26\u4e32\u7684\u64cd\u4f5c\u3002 strconv : \u63d0\u4f9b\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u57fa\u7840\u7c7b\u578b\u7684\u529f\u80fd\u3002 unicode : \u4e3a unicode \u578b\u7684\u5b57\u7b26\u4e32\u63d0\u4f9b\u7279\u6b8a\u7684\u529f\u80fd\u3002 regexp : \u6b63\u5219\u8868\u8fbe\u5f0f\u529f\u80fd\u3002 bytes : \u63d0\u4f9b\u5bf9\u5b57\u7b26\u578b\u5206\u7247\u7684\u64cd\u4f5c\u3002 index/suffixarray : \u5b50\u5b57\u7b26\u4e32\u5feb\u901f\u67e5\u8be2\u3002 math - math/cmath - math/big - math/rand - sort : math : \u57fa\u672c\u7684\u6570\u5b66\u51fd\u6570\u3002 math/cmath : \u5bf9\u590d\u6570\u7684\u64cd\u4f5c\u3002 math/rand : \u4f2a\u968f\u673a\u6570\u751f\u6210\u3002 sort : \u4e3a\u6570\u7ec4\u6392\u5e8f\u548c\u81ea\u5b9a\u4e49\u96c6\u5408\u3002 math/big : \u5927\u6570\u7684\u5b9e\u73b0\u548c\u8ba1\u7b97\u3002 \u3000\u3000 container - /list-ring-heap : \u5b9e\u73b0\u5bf9\u96c6\u5408\u7684\u64cd\u4f5c\u3002 list : \u53cc\u94fe\u8868\u3002 ring : \u73af\u5f62\u94fe\u8868\u3002 \u4e0b\u9762\u4ee3\u7801\u6f14\u793a\u4e86\u5982\u4f55\u904d\u5386\u4e00\u4e2a\u94fe\u8868(\u5f53 l \u662f *List )\uff1a for e := l . Front (); e != nil ; e = e . Next () { //do something with e.Value } time - log : time : \u65e5\u671f\u548c\u65f6\u95f4\u7684\u57fa\u672c\u64cd\u4f5c\u3002 log : \u8bb0\u5f55\u7a0b\u5e8f\u8fd0\u884c\u65f6\u4ea7\u751f\u7684\u65e5\u5fd7\uff0c\u6211\u4eec\u5c06\u5728\u540e\u9762\u7684\u7ae0\u8282\u4f7f\u7528\u5b83\u3002 encoding/json - encoding/xml - text/template : encoding/json : \u8bfb\u53d6\u5e76\u89e3\u7801\u548c\u5199\u5165\u5e76\u7f16\u7801 JSON \u6570\u636e\u3002 encoding/xml : \u7b80\u5355\u7684 XML1.0 \u89e3\u6790\u5668\uff0c\u6709\u5173 JSON \u548c XML \u7684\u5b9e\u4f8b\u8bf7\u67e5\u9605\u7b2c 12.9 / 10 \u7ae0\u8282\u3002 text/template :\u751f\u6210\u50cf HTML \u4e00\u6837\u7684\u6570\u636e\u4e0e\u6587\u672c\u6df7\u5408\u7684\u6570\u636e\u9a71\u52a8\u6a21\u677f\uff08\u53c2\u89c1 \u7b2c 15.7 \u8282 \uff09\u3002 net - net/http - html :\uff08\u53c2\u89c1 \u7b2c 15 \u7ae0 \uff09 net : \u7f51\u7edc\u6570\u636e\u7684\u57fa\u672c\u64cd\u4f5c\u3002 http : \u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u6269\u5c55\u7684 HTTP \u670d\u52a1\u5668\u548c\u57fa\u7840\u5ba2\u6237\u7aef\uff0c\u89e3\u6790 HTTP \u8bf7\u6c42\u548c\u56de\u590d\u3002 html : HTML5 \u89e3\u6790\u5668\u3002 runtime : Go \u7a0b\u5e8f\u8fd0\u884c\u65f6\u7684\u4ea4\u4e92\u64cd\u4f5c\uff0c\u4f8b\u5982\u5783\u573e\u56de\u6536\u548c\u534f\u7a0b\u521b\u5efa\u3002 reflect : \u5b9e\u73b0\u901a\u8fc7\u7a0b\u5e8f\u8fd0\u884c\u65f6\u53cd\u5c04\uff0c\u8ba9\u7a0b\u5e8f\u64cd\u4f5c\u4efb\u610f\u7c7b\u578b\u7684\u53d8\u91cf\u3002 exp \u5305\u4e2d\u6709\u8bb8\u591a\u5c06\u88ab\u7f16\u8bd1\u4e3a\u65b0\u5305\u7684\u5b9e\u9a8c\u6027\u7684\u5305\u3002\u5728\u4e0b\u6b21\u7a33\u5b9a\u7248\u672c\u53d1\u5e03\u7684\u65f6\u5019\uff0c\u5b83\u4eec\u5c06\u6210\u4e3a\u72ec\u7acb\u7684\u5305\u3002\u5982\u679c\u524d\u4e00\u4e2a\u7248\u672c\u5df2\u7ecf\u5b58\u5728\u4e86\uff0c\u5b83\u4eec\u5c06\u88ab\u4f5c\u4e3a\u8fc7\u65f6\u7684\u5305\u88ab\u56de\u6536\u3002\u7136\u800c Go1.0 \u53d1\u5e03\u7684\u65f6\u5019\u5e76\u6ca1\u6709\u5305\u542b\u8fc7\u65f6\u6216\u8005\u5b9e\u9a8c\u6027\u7684\u5305\u3002 \u7ec3\u4e60 9.1 Q20_linked_list.go \u4f7f\u7528 container/list \u5305\u5b9e\u73b0\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff0c\u5c06 101 \u3001 102 \u548c 103 \u653e\u5165\u5176\u4e2d\u5e76\u6253\u5370\u51fa\u6765\u3002 \u7ec3\u4e60 9.2 size_int.go \u901a\u8fc7\u4f7f\u7528 unsafe \u5305\u4e2d\u7684\u65b9\u6cd5\u6765\u6d4b\u8bd5\u4f60\u7535\u8111\u4e0a\u4e00\u4e2a\u6574\u578b\u53d8\u91cf\u5360\u7528\u591a\u5c11\u4e2a\u5b57\u8282\u3002","title":"9.1 \u6807\u51c6\u5e93\u6982\u8ff0"},{"location":"09.1/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5305 (package) \u4e0b\u4e00\u8282\uff1a regexp \u5305","title":"\u94fe\u63a5"},{"location":"09.10/","text":"9.10 Go \u7684\u5916\u90e8\u5305\u548c\u9879\u76ee \u00b6 \u73b0\u5728\u6211\u4eec\u77e5\u9053\u5982\u4f55\u4f7f\u7528 Go \u4ee5\u53ca\u5b83\u7684\u6807\u51c6\u5e93\u4e86\uff0c\u4f46\u662f Go \u7684\u751f\u6001\u8981\u6bd4\u8fd9\u5927\u7684\u591a\u3002\u5f53\u7740\u624b\u81ea\u5df1\u7684 Go \u9879\u76ee\u65f6\uff0c\u6700\u597d\u5148\u67e5\u627e\u4e0b\u662f\u5426\u6709\u4e9b\u5b58\u5728\u7684\u7b2c\u4e09\u65b9\u7684\u5305\u6216\u8005\u9879\u76ee\u80fd\u4e0d\u80fd\u4f7f\u7528\u3002\u5927\u591a\u6570\u53ef\u4ee5\u901a\u8fc7 go install \u6765\u8fdb\u884c\u5b89\u88c5\u3002 Go Walker \u652f\u6301\u6839\u636e\u5305\u540d\u5728\u6d77\u91cf\u6570\u636e\u4e2d\u67e5\u8be2\u3002 \u76ee\u524d\u5df2\u7ecf\u6709\u8bb8\u591a\u975e\u5e38\u597d\u7684\u5916\u90e8\u5e93\uff0c\u5982\uff1a MySQL(GoMySQL), PostgreSQL(go-pgsql), MongoDB (mgo, gomongo), CouchDB (couch-go), ODBC (godbcl), Redis (redis.go) and SQLite3 (gosqlite) database drivers SDL bindings Google's Protocal Buffers(goprotobuf) XML-RPC(go-xmlrpc) Twitter(twitterstream) OAuth libraries(GoAuth) \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u901a\u8fc7 git \u6253\u5305\u548c\u5b89\u88c5 \u4e0b\u4e00\u8282\uff1a \u5728 Go \u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5916\u90e8\u5e93","title":"9.10 Go \u7684\u5916\u90e8\u5305\u548c\u9879\u76ee"},{"location":"09.10/#910-go","text":"\u73b0\u5728\u6211\u4eec\u77e5\u9053\u5982\u4f55\u4f7f\u7528 Go \u4ee5\u53ca\u5b83\u7684\u6807\u51c6\u5e93\u4e86\uff0c\u4f46\u662f Go \u7684\u751f\u6001\u8981\u6bd4\u8fd9\u5927\u7684\u591a\u3002\u5f53\u7740\u624b\u81ea\u5df1\u7684 Go \u9879\u76ee\u65f6\uff0c\u6700\u597d\u5148\u67e5\u627e\u4e0b\u662f\u5426\u6709\u4e9b\u5b58\u5728\u7684\u7b2c\u4e09\u65b9\u7684\u5305\u6216\u8005\u9879\u76ee\u80fd\u4e0d\u80fd\u4f7f\u7528\u3002\u5927\u591a\u6570\u53ef\u4ee5\u901a\u8fc7 go install \u6765\u8fdb\u884c\u5b89\u88c5\u3002 Go Walker \u652f\u6301\u6839\u636e\u5305\u540d\u5728\u6d77\u91cf\u6570\u636e\u4e2d\u67e5\u8be2\u3002 \u76ee\u524d\u5df2\u7ecf\u6709\u8bb8\u591a\u975e\u5e38\u597d\u7684\u5916\u90e8\u5e93\uff0c\u5982\uff1a MySQL(GoMySQL), PostgreSQL(go-pgsql), MongoDB (mgo, gomongo), CouchDB (couch-go), ODBC (godbcl), Redis (redis.go) and SQLite3 (gosqlite) database drivers SDL bindings Google's Protocal Buffers(goprotobuf) XML-RPC(go-xmlrpc) Twitter(twitterstream) OAuth libraries(GoAuth)","title":"9.10 Go \u7684\u5916\u90e8\u5305\u548c\u9879\u76ee"},{"location":"09.10/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u901a\u8fc7 git \u6253\u5305\u548c\u5b89\u88c5 \u4e0b\u4e00\u8282\uff1a \u5728 Go \u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5916\u90e8\u5e93","title":"\u94fe\u63a5"},{"location":"09.11/","text":"9.11 \u5728 Go \u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5916\u90e8\u5e93 \u00b6 \uff08\u672c\u8282\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a Web \u5e94\u7528\u548c\u5b83\u7684 Google App Engine \u7248\u672c\uff0c\u5728\u7b2c 19 \u548c 21 \u7ae0\u5206\u522b\u8bf4\u660e\uff0c\u5f53\u4f60\u9605\u8bfb\u5230\u8fd9\u4e9b\u7ae0\u8282\u65f6\u53ef\u4ee5\u518d\u56de\u5230\u8fd9\u4e2a\u4f8b\u5b50\u3002) \u5f53\u5f00\u59cb\u4e00\u4e2a\u65b0\u9879\u76ee\u6216\u589e\u52a0\u65b0\u7684\u529f\u80fd\u5230\u73b0\u6709\u7684\u9879\u76ee\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5df2\u7ecf\u5b58\u5728\u7684\u5e93\u6765\u8282\u7701\u5f00\u53d1\u65f6\u95f4\u3002\u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4f60\u5fc5\u987b\u7406\u89e3\u5e93\u7684 API\uff08\u5e94\u7528\u7f16\u7a0b\u63a5\u53e3\uff09\uff0c\u90a3\u5c31\u662f\uff1a\u5e93\u4e2d\u6709\u54ea\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u8c03\u7528\uff0c\u5982\u4f55\u8c03\u7528\u3002\u4f60\u53ef\u80fd\u6ca1\u6709\u8fd9\u4e2a\u5e93\u7684\u6e90\u4ee3\u7801\uff0c\u4f46\u4f5c\u8005\u80af\u5b9a\u6709\u8bb0\u8f7d\u7684 API \u4ee5\u53ca\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528\u5b83\u3002 \u4f5c\u4e3a\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u8c37\u6b4c\u7684 API \u7684 urlshortener \u7f16\u5199\u4e00\u4e2a\u5c0f\u7a0b\u5e8f\uff1a\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e0b\u5728 http://goo.gl/ \u8f93\u5165\u4e00\u4e2a\u50cf \" http://www.destandaard.be \" \u8fd9\u6837\u7684 URL\uff0c\u4f60\u4f1a\u770b\u5230\u4e00\u4e2a\u50cf \" http://goo.gl/O9SUO \" \u8fd9\u6837\u66f4\u77ed\u7684 URL \u8fd4\u56de\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728 Twitter \u4e4b\u7c7b\u7684\u670d\u52a1\u4e2d\u8fd9\u662f\u975e\u5e38\u5bb9\u6613\u5d4c\u5165\u7684\u3002\u8c37\u6b4c urlshortener \u670d\u52a1\u7684\u6587\u6863\u53ef\u4ee5\u5728 \" http://code.google.com/apis/urlshortener/ \" \u627e\u5230\u3002( \u7b2c 19 \u7ae0 \uff0c\u6211\u4eec\u5c06\u5f00\u53d1\u81ea\u5df1\u7248\u672c\u7684 urlshortener)\u3002 \u8c37\u6b4c\u5c06\u8fd9\u9879\u6280\u672f\u63d0\u4f9b\u7ed9\u5176\u4ed6\u5f00\u53d1\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6211\u4eec\u81ea\u5df1\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u8c03\u7528 API \uff08\u91ca\u653e\u5230\u6307\u5b9a\u7684\u9650\u5236\uff09\u3002\u4ed6\u4eec\u4e5f\u751f\u6210\u4e86\u4e00\u4e2a Go \u8bed\u8a00\u5ba2\u6237\u7aef\u5e93\u4f7f\u8c03\u7528\u53d8\u5f97\u66f4\u5bb9\u6613\u3002 \u5907\u6ce8\uff1a\u8c37\u6b4c\u8ba9\u901a\u8fc7\u4f7f\u7528 Google API Go \u5ba2\u6237\u7aef\u670d\u52a1\u7684\u5f00\u53d1\u8005\u751f\u6d3b\u53d8\u5f97\u66f4\u7b80\u5355\uff0cGo \u5ba2\u6237\u7aef\u7a0b\u5e8f\u81ea\u52a8\u751f\u6210\u4e8e Google \u5e93\u7684 JSON \u63cf\u8ff0\u3002\u66f4\u591a\u8be6\u60c5\u5728 \u9879\u76ee\u9875\u9762 \u67e5\u770b\u3002 \u4e0b\u8f7d\u5e76\u5b89\u88c5 Go \u5ba2\u6237\u7aef\u5e93: \u5c06\u901a\u8fc7 go install \u5b9e\u73b0\u3002\u4f46\u662f\u9996\u5148\u8981\u9a8c\u8bc1\u73af\u5883\u53d8\u91cf\u4e2d\u662f\u5426\u542b\u6709 GOPATH \u53d8\u91cf\uff0c\u56e0\u4e3a\u5916\u90e8\u6e90\u7801\u5c06\u88ab\u4e0b\u8f7d\u5230 $GOPATH/src \u76ee\u5f55\u4e0b\u5e76\u88ab\u5b89\u88c5\u5230 $GOPATH/PKG/\"machine_arch\"/ \u76ee\u5f55\u4e0b\u3002 \u6211\u4eec\u5c06\u901a\u8fc7\u5728\u7ec8\u7aef\u8c03\u7528\u4ee5\u4e0b\u547d\u4ee4\u6765\u5b89\u88c5 API: go install google.golang.org/api/urlshortener/v1 go install \u5c06\u4e0b\u8f7d\u6e90\u7801\uff0c\u7f16\u8bd1\u5e76\u5b89\u88c5\u5305 \u4f7f\u7528 urlshortener \u670d\u52a1\u7684 web \u7a0b\u5e8f: \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5bfc\u5165\u5e76\u8d4b\u4e88\u522b\u540d\u6765\u4f7f\u7528\u5df2\u5b89\u88c5\u7684\u5305\uff1a import \"google.golang.org/api/urlshortener/v1\" \u73b0\u5728\u6211\u4eec\u5199\u4e00\u4e2a Web \u5e94\u7528\uff08\u53c2\u89c1 \u7b2c 15 \u7ae0 4-8 \u8282 \uff09\u901a\u8fc7\u8868\u5355\u5b9e\u73b0\u77ed\u5730\u5740\u548c\u957f\u5730\u5740\u7684\u76f8\u4e92\u8f6c\u6362\u3002\u6211\u4eec\u5c06\u4f7f\u7528 template \u5305\u5e76\u5199\u4e09\u4e2a\u5904\u7406\u51fd\u6570\uff1a root() \u51fd\u6570\u901a\u8fc7\u6267\u884c\u8868\u5355\u6a21\u677f\u6765\u5c55\u793a\u8868\u5355\uff0c short() \u51fd\u6570\u5c06\u957f\u5730\u5740\u8f6c\u6362\u4e3a\u77ed\u5730\u5740\uff0c long() \u51fd\u6570\u9006\u5411\u8f6c\u6362\u3002 \u8981\u8c03\u7528 urlshortener \u63a5\u53e3\u5fc5\u987b\u5148\u901a\u8fc7 http \u5305\u4e2d\u7684\u9ed8\u8ba4\u5ba2\u6237\u7aef\u521b\u5efa\u4e00\u4e2a\u670d\u52a1\u5b9e\u4f8b urlshortenerSvc \uff1a urlshortenerSvc , _ := urlshortener . New ( http . DefaultClient ) \u6211\u4eec\u901a\u8fc7\u8c03\u7528\u670d\u52a1\u4e2d\u7684 Url.Insert \u4e2d\u7684 Do \u65b9\u6cd5\u4f20\u5165\u5305\u542b\u957f\u5730\u5740\u7684 Url \u6570\u636e\u7ed3\u6784\u4ece\u800c\u83b7\u53d6\u77ed\u5730\u5740\uff1a url , _ := urlshortenerSvc . Url . Insert ( & urlshortener . Url { LongUrl : longUrl }). Do () \u8fd4\u56de url \u7684 Id \u4fbf\u662f\u6211\u4eec\u9700\u8981\u7684\u77ed\u5730\u5740\u3002 \u6211\u4eec\u901a\u8fc7\u8c03\u7528\u670d\u52a1\u4e2d\u7684 Url.Get \u4e2d\u7684 Do \u65b9\u6cd5\u4f20\u5165\u5305\u542b\u77ed\u5730\u5740\u7684 Url \u6570\u636e\u7ed3\u6784\u4ece\u800c\u83b7\u53d6\u957f\u5730\u5740\uff1a url , error := urlshortenerSvc . Url . Get ( shwortUrl ). Do () \u8fd4\u56de\u7684\u957f\u5730\u5740\u4fbf\u662f\u8f6c\u6362\u524d\u7684\u539f\u59cb\u5730\u5740\u3002 \u793a\u4f8b 9.9 urlshortener.go package main import ( \"fmt\" \"net/http\" \"text/template\" \"google.golang.org/api/urlshortener/v1\" ) func main () { http . HandleFunc ( \"/\" , root ) http . HandleFunc ( \"/short\" , short ) http . HandleFunc ( \"/long\" , long ) http . ListenAndServe ( \"localhost:8080\" , nil ) } // the template used to show the forms and the results web page to the user var rootHtmlTmpl = template . Must ( template . New ( \"rootHtml\" ). Parse ( ` <html><body> <h1>URL SHORTENER</h1> {{if .}}{{.}}<br /><br />{{end}} <form action=\"/short\" type=\"POST\"> Shorten this: <input type=\"text\" name=\"longUrl\" /> <input type=\"submit\" value=\"Give me the short URL\" /> </form> <br /> <form action=\"/long\" type=\"POST\"> Expand this: http://goo.gl/<input type=\"text\" name=\"shortUrl\" /> <input type=\"submit\" value=\"Give me the long URL\" /> </form> </body></html> ` )) func root ( w http . ResponseWriter , r * http . Request ) { rootHtmlTmpl . Execute ( w , nil ) } func short ( w http . ResponseWriter , r * http . Request ) { longUrl := r . FormValue ( \"longUrl\" ) urlshortenerSvc , _ := urlshortener . New ( http . DefaultClient ) url , _ := urlshortenerSvc . Url . Insert ( & urlshortener . Url { LongUrl : longUrl ,}). Do () rootHtmlTmpl . Execute ( w , fmt . Sprintf ( \"Shortened version of %s is : %s\" , longUrl , url . Id )) } func long ( w http . ResponseWriter , r * http . Request ) { shortUrl := \"http://goo.gl/\" + r . FormValue ( \"shortUrl\" ) urlshortenerSvc , _ := urlshortener . New ( http . DefaultClient ) url , err := urlshortenerSvc . Url . Get ( shortUrl ). Do () if err != nil { fmt . Println ( \"error: %v\" , err ) return } rootHtmlTmpl . Execute ( w , fmt . Sprintf ( \"Longer version of %s is : %s\" , shortUrl , url . LongUrl )) } \u6267\u884c\u8fd9\u6bb5\u4ee3\u7801\uff1a go run urlshortener.go \u901a\u8fc7\u6d4f\u89c8 http://localhost:8080/ \u7684\u9875\u9762\u6765\u6d4b\u8bd5\u3002 \u4e3a\u4e86\u4ee3\u7801\u7684\u7b80\u6d01\u6211\u4eec\u5e76\u6ca1\u6709\u68c0\u6d4b\u8fd4\u56de\u7684\u9519\u8bef\u72b6\u6001\uff0c\u4f46\u662f\u5728\u771f\u5b9e\u7684\u751f\u4ea7\u73af\u5883\u7684\u5e94\u7528\u4e2d\u4e00\u5b9a\u8981\u505a\u68c0\u6d4b\u3002 \u5c06\u5e94\u7528\u653e\u5165 Google App Engine\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u4e4b\u524d\u7684\u4ee3\u7801\u4e2d\u4f5c\u51fa\u5982\u4e0b\u6539\u53d8\uff1a package main -> package urlshort func main() -> func init() \u521b\u5efa\u4e00\u4e2a\u548c\u5305\u540c\u540d\u7684\u76ee\u5f55 urlshort \uff0c\u5e76\u5c06\u4ee5\u4e0b\u4e24\u4e2a\u5b89\u88c5\u76ee\u5f55\u590d\u5236\u5230\u8fd9\u4e2a\u76ee\u5f55\uff1a google.golang.org/api/urlshortener google.golang.org/api/googleapi \u6b64\u5916\u8fd8\u8981\u914d\u7f6e\u4e0b\u914d\u7f6e\u6587\u4ef6 app.yaml \uff0c\u5185\u5bb9\u5982\u4e0b\uff1a application : urlshort version : 0-1-test runtime : go api_version : 3 handlers : - url : /.* script : _go_app \u73b0\u5728\u4f60\u53ef\u4ee5\u5230\u4f60\u7684\u9879\u76ee\u76ee\u5f55\u5e76\u5728\u7ec8\u7aef\u8fd0\u884c\uff1a dev_appserver.py urlshort \u5728\u6d4f\u89c8\u5668\u6253\u5f00\u4f60\u7684 Web\u5e94\u7528\uff1a http://localhost:8080 \u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Go \u7684\u5916\u90e8\u5305\u548c\u9879\u76ee \u4e0b\u4e00\u7ae0\uff1a \u7ed3\u6784 (struct) \u4e0e\u65b9\u6cd5 (method)","title":"9.11 \u5728 Go \u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5916\u90e8\u5e93"},{"location":"09.11/#911-go","text":"\uff08\u672c\u8282\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a Web \u5e94\u7528\u548c\u5b83\u7684 Google App Engine \u7248\u672c\uff0c\u5728\u7b2c 19 \u548c 21 \u7ae0\u5206\u522b\u8bf4\u660e\uff0c\u5f53\u4f60\u9605\u8bfb\u5230\u8fd9\u4e9b\u7ae0\u8282\u65f6\u53ef\u4ee5\u518d\u56de\u5230\u8fd9\u4e2a\u4f8b\u5b50\u3002) \u5f53\u5f00\u59cb\u4e00\u4e2a\u65b0\u9879\u76ee\u6216\u589e\u52a0\u65b0\u7684\u529f\u80fd\u5230\u73b0\u6709\u7684\u9879\u76ee\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5df2\u7ecf\u5b58\u5728\u7684\u5e93\u6765\u8282\u7701\u5f00\u53d1\u65f6\u95f4\u3002\u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4f60\u5fc5\u987b\u7406\u89e3\u5e93\u7684 API\uff08\u5e94\u7528\u7f16\u7a0b\u63a5\u53e3\uff09\uff0c\u90a3\u5c31\u662f\uff1a\u5e93\u4e2d\u6709\u54ea\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u8c03\u7528\uff0c\u5982\u4f55\u8c03\u7528\u3002\u4f60\u53ef\u80fd\u6ca1\u6709\u8fd9\u4e2a\u5e93\u7684\u6e90\u4ee3\u7801\uff0c\u4f46\u4f5c\u8005\u80af\u5b9a\u6709\u8bb0\u8f7d\u7684 API \u4ee5\u53ca\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528\u5b83\u3002 \u4f5c\u4e3a\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u8c37\u6b4c\u7684 API \u7684 urlshortener \u7f16\u5199\u4e00\u4e2a\u5c0f\u7a0b\u5e8f\uff1a\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e0b\u5728 http://goo.gl/ \u8f93\u5165\u4e00\u4e2a\u50cf \" http://www.destandaard.be \" \u8fd9\u6837\u7684 URL\uff0c\u4f60\u4f1a\u770b\u5230\u4e00\u4e2a\u50cf \" http://goo.gl/O9SUO \" \u8fd9\u6837\u66f4\u77ed\u7684 URL \u8fd4\u56de\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728 Twitter \u4e4b\u7c7b\u7684\u670d\u52a1\u4e2d\u8fd9\u662f\u975e\u5e38\u5bb9\u6613\u5d4c\u5165\u7684\u3002\u8c37\u6b4c urlshortener \u670d\u52a1\u7684\u6587\u6863\u53ef\u4ee5\u5728 \" http://code.google.com/apis/urlshortener/ \" \u627e\u5230\u3002( \u7b2c 19 \u7ae0 \uff0c\u6211\u4eec\u5c06\u5f00\u53d1\u81ea\u5df1\u7248\u672c\u7684 urlshortener)\u3002 \u8c37\u6b4c\u5c06\u8fd9\u9879\u6280\u672f\u63d0\u4f9b\u7ed9\u5176\u4ed6\u5f00\u53d1\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6211\u4eec\u81ea\u5df1\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u8c03\u7528 API \uff08\u91ca\u653e\u5230\u6307\u5b9a\u7684\u9650\u5236\uff09\u3002\u4ed6\u4eec\u4e5f\u751f\u6210\u4e86\u4e00\u4e2a Go \u8bed\u8a00\u5ba2\u6237\u7aef\u5e93\u4f7f\u8c03\u7528\u53d8\u5f97\u66f4\u5bb9\u6613\u3002 \u5907\u6ce8\uff1a\u8c37\u6b4c\u8ba9\u901a\u8fc7\u4f7f\u7528 Google API Go \u5ba2\u6237\u7aef\u670d\u52a1\u7684\u5f00\u53d1\u8005\u751f\u6d3b\u53d8\u5f97\u66f4\u7b80\u5355\uff0cGo \u5ba2\u6237\u7aef\u7a0b\u5e8f\u81ea\u52a8\u751f\u6210\u4e8e Google \u5e93\u7684 JSON \u63cf\u8ff0\u3002\u66f4\u591a\u8be6\u60c5\u5728 \u9879\u76ee\u9875\u9762 \u67e5\u770b\u3002 \u4e0b\u8f7d\u5e76\u5b89\u88c5 Go \u5ba2\u6237\u7aef\u5e93: \u5c06\u901a\u8fc7 go install \u5b9e\u73b0\u3002\u4f46\u662f\u9996\u5148\u8981\u9a8c\u8bc1\u73af\u5883\u53d8\u91cf\u4e2d\u662f\u5426\u542b\u6709 GOPATH \u53d8\u91cf\uff0c\u56e0\u4e3a\u5916\u90e8\u6e90\u7801\u5c06\u88ab\u4e0b\u8f7d\u5230 $GOPATH/src \u76ee\u5f55\u4e0b\u5e76\u88ab\u5b89\u88c5\u5230 $GOPATH/PKG/\"machine_arch\"/ \u76ee\u5f55\u4e0b\u3002 \u6211\u4eec\u5c06\u901a\u8fc7\u5728\u7ec8\u7aef\u8c03\u7528\u4ee5\u4e0b\u547d\u4ee4\u6765\u5b89\u88c5 API: go install google.golang.org/api/urlshortener/v1 go install \u5c06\u4e0b\u8f7d\u6e90\u7801\uff0c\u7f16\u8bd1\u5e76\u5b89\u88c5\u5305 \u4f7f\u7528 urlshortener \u670d\u52a1\u7684 web \u7a0b\u5e8f: \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5bfc\u5165\u5e76\u8d4b\u4e88\u522b\u540d\u6765\u4f7f\u7528\u5df2\u5b89\u88c5\u7684\u5305\uff1a import \"google.golang.org/api/urlshortener/v1\" \u73b0\u5728\u6211\u4eec\u5199\u4e00\u4e2a Web \u5e94\u7528\uff08\u53c2\u89c1 \u7b2c 15 \u7ae0 4-8 \u8282 \uff09\u901a\u8fc7\u8868\u5355\u5b9e\u73b0\u77ed\u5730\u5740\u548c\u957f\u5730\u5740\u7684\u76f8\u4e92\u8f6c\u6362\u3002\u6211\u4eec\u5c06\u4f7f\u7528 template \u5305\u5e76\u5199\u4e09\u4e2a\u5904\u7406\u51fd\u6570\uff1a root() \u51fd\u6570\u901a\u8fc7\u6267\u884c\u8868\u5355\u6a21\u677f\u6765\u5c55\u793a\u8868\u5355\uff0c short() \u51fd\u6570\u5c06\u957f\u5730\u5740\u8f6c\u6362\u4e3a\u77ed\u5730\u5740\uff0c long() \u51fd\u6570\u9006\u5411\u8f6c\u6362\u3002 \u8981\u8c03\u7528 urlshortener \u63a5\u53e3\u5fc5\u987b\u5148\u901a\u8fc7 http \u5305\u4e2d\u7684\u9ed8\u8ba4\u5ba2\u6237\u7aef\u521b\u5efa\u4e00\u4e2a\u670d\u52a1\u5b9e\u4f8b urlshortenerSvc \uff1a urlshortenerSvc , _ := urlshortener . New ( http . DefaultClient ) \u6211\u4eec\u901a\u8fc7\u8c03\u7528\u670d\u52a1\u4e2d\u7684 Url.Insert \u4e2d\u7684 Do \u65b9\u6cd5\u4f20\u5165\u5305\u542b\u957f\u5730\u5740\u7684 Url \u6570\u636e\u7ed3\u6784\u4ece\u800c\u83b7\u53d6\u77ed\u5730\u5740\uff1a url , _ := urlshortenerSvc . Url . Insert ( & urlshortener . Url { LongUrl : longUrl }). Do () \u8fd4\u56de url \u7684 Id \u4fbf\u662f\u6211\u4eec\u9700\u8981\u7684\u77ed\u5730\u5740\u3002 \u6211\u4eec\u901a\u8fc7\u8c03\u7528\u670d\u52a1\u4e2d\u7684 Url.Get \u4e2d\u7684 Do \u65b9\u6cd5\u4f20\u5165\u5305\u542b\u77ed\u5730\u5740\u7684 Url \u6570\u636e\u7ed3\u6784\u4ece\u800c\u83b7\u53d6\u957f\u5730\u5740\uff1a url , error := urlshortenerSvc . Url . Get ( shwortUrl ). Do () \u8fd4\u56de\u7684\u957f\u5730\u5740\u4fbf\u662f\u8f6c\u6362\u524d\u7684\u539f\u59cb\u5730\u5740\u3002 \u793a\u4f8b 9.9 urlshortener.go package main import ( \"fmt\" \"net/http\" \"text/template\" \"google.golang.org/api/urlshortener/v1\" ) func main () { http . HandleFunc ( \"/\" , root ) http . HandleFunc ( \"/short\" , short ) http . HandleFunc ( \"/long\" , long ) http . ListenAndServe ( \"localhost:8080\" , nil ) } // the template used to show the forms and the results web page to the user var rootHtmlTmpl = template . Must ( template . New ( \"rootHtml\" ). Parse ( ` <html><body> <h1>URL SHORTENER</h1> {{if .}}{{.}}<br /><br />{{end}} <form action=\"/short\" type=\"POST\"> Shorten this: <input type=\"text\" name=\"longUrl\" /> <input type=\"submit\" value=\"Give me the short URL\" /> </form> <br /> <form action=\"/long\" type=\"POST\"> Expand this: http://goo.gl/<input type=\"text\" name=\"shortUrl\" /> <input type=\"submit\" value=\"Give me the long URL\" /> </form> </body></html> ` )) func root ( w http . ResponseWriter , r * http . Request ) { rootHtmlTmpl . Execute ( w , nil ) } func short ( w http . ResponseWriter , r * http . Request ) { longUrl := r . FormValue ( \"longUrl\" ) urlshortenerSvc , _ := urlshortener . New ( http . DefaultClient ) url , _ := urlshortenerSvc . Url . Insert ( & urlshortener . Url { LongUrl : longUrl ,}). Do () rootHtmlTmpl . Execute ( w , fmt . Sprintf ( \"Shortened version of %s is : %s\" , longUrl , url . Id )) } func long ( w http . ResponseWriter , r * http . Request ) { shortUrl := \"http://goo.gl/\" + r . FormValue ( \"shortUrl\" ) urlshortenerSvc , _ := urlshortener . New ( http . DefaultClient ) url , err := urlshortenerSvc . Url . Get ( shortUrl ). Do () if err != nil { fmt . Println ( \"error: %v\" , err ) return } rootHtmlTmpl . Execute ( w , fmt . Sprintf ( \"Longer version of %s is : %s\" , shortUrl , url . LongUrl )) } \u6267\u884c\u8fd9\u6bb5\u4ee3\u7801\uff1a go run urlshortener.go \u901a\u8fc7\u6d4f\u89c8 http://localhost:8080/ \u7684\u9875\u9762\u6765\u6d4b\u8bd5\u3002 \u4e3a\u4e86\u4ee3\u7801\u7684\u7b80\u6d01\u6211\u4eec\u5e76\u6ca1\u6709\u68c0\u6d4b\u8fd4\u56de\u7684\u9519\u8bef\u72b6\u6001\uff0c\u4f46\u662f\u5728\u771f\u5b9e\u7684\u751f\u4ea7\u73af\u5883\u7684\u5e94\u7528\u4e2d\u4e00\u5b9a\u8981\u505a\u68c0\u6d4b\u3002 \u5c06\u5e94\u7528\u653e\u5165 Google App Engine\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u4e4b\u524d\u7684\u4ee3\u7801\u4e2d\u4f5c\u51fa\u5982\u4e0b\u6539\u53d8\uff1a package main -> package urlshort func main() -> func init() \u521b\u5efa\u4e00\u4e2a\u548c\u5305\u540c\u540d\u7684\u76ee\u5f55 urlshort \uff0c\u5e76\u5c06\u4ee5\u4e0b\u4e24\u4e2a\u5b89\u88c5\u76ee\u5f55\u590d\u5236\u5230\u8fd9\u4e2a\u76ee\u5f55\uff1a google.golang.org/api/urlshortener google.golang.org/api/googleapi \u6b64\u5916\u8fd8\u8981\u914d\u7f6e\u4e0b\u914d\u7f6e\u6587\u4ef6 app.yaml \uff0c\u5185\u5bb9\u5982\u4e0b\uff1a application : urlshort version : 0-1-test runtime : go api_version : 3 handlers : - url : /.* script : _go_app \u73b0\u5728\u4f60\u53ef\u4ee5\u5230\u4f60\u7684\u9879\u76ee\u76ee\u5f55\u5e76\u5728\u7ec8\u7aef\u8fd0\u884c\uff1a dev_appserver.py urlshort \u5728\u6d4f\u89c8\u5668\u6253\u5f00\u4f60\u7684 Web\u5e94\u7528\uff1a http://localhost:8080 \u3002","title":"9.11 \u5728 Go \u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5916\u90e8\u5e93"},{"location":"09.11/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Go \u7684\u5916\u90e8\u5305\u548c\u9879\u76ee \u4e0b\u4e00\u7ae0\uff1a \u7ed3\u6784 (struct) \u4e0e\u65b9\u6cd5 (method)","title":"\u94fe\u63a5"},{"location":"09.2/","text":"9.2 regexp \u5305 \u00b6 \u6b63\u5219\u8868\u8fbe\u5f0f\u8bed\u6cd5\u548c\u4f7f\u7528\u7684\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u8003 \u7ef4\u57fa\u767e\u79d1 \u3002 \u5728\u4e0b\u9762\u7684\u7a0b\u5e8f\u91cc\uff0c\u6211\u4eec\u5c06\u5728\u5b57\u7b26\u4e32\u4e2d\u5bf9\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f (pattern) \u8fdb\u884c\u5339\u914d\u3002 \u5982\u679c\u662f\u7b80\u5355\u6a21\u5f0f\uff0c\u4f7f\u7528 Match() \u65b9\u6cd5\u4fbf\u53ef\uff1a ok , _ := regexp . Match ( pat , [] byte ( searchIn )) \u53d8\u91cf ok \u5c06\u8fd4\u56de true \u6216\u8005 false \uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528 MatchString() \uff1a ok , _ := regexp . MatchString ( pat , searchIn ) \u66f4\u591a\u65b9\u6cd5\u4e2d\uff0c\u5fc5\u987b\u5148\u5c06\u6b63\u5219\u6a21\u5f0f\u901a\u8fc7 Compile() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a Regexp \u5bf9\u8c61\u3002\u7136\u540e\u6211\u4eec\u5c06\u638c\u63e1\u4e00\u4e9b\u5339\u914d\uff0c\u67e5\u627e\uff0c\u66ff\u6362\u76f8\u5173\u7684\u529f\u80fd\u3002 \u793a\u4f8b 9.2 pattern.go \uff1a package main import ( \"fmt\" \"regexp\" \"strconv\" ) func main () { //\u76ee\u6807\u5b57\u7b26\u4e32 searchIn := \"John: 2578.34 William: 4567.23 Steve: 5632.18\" pat := \"[0-9]+.[0-9]+\" //\u6b63\u5219 f := func ( s string ) string { v , _ := strconv . ParseFloat ( s , 32 ) return strconv . FormatFloat ( v * 2 , 'f' , 2 , 32 ) } if ok , _ := regexp . Match ( pat , [] byte ( searchIn )); ok { fmt . Println ( \"Match Found!\" ) } re , _ := regexp . Compile ( pat ) //\u5c06\u5339\u914d\u5230\u7684\u90e8\u5206\u66ff\u6362\u4e3a\"##.#\" str := re . ReplaceAllString ( searchIn , \"##.#\" ) fmt . Println ( str ) //\u53c2\u6570\u4e3a\u51fd\u6570\u65f6 str2 := re . ReplaceAllStringFunc ( searchIn , f ) fmt . Println ( str2 ) } \u8f93\u51fa\u7ed3\u679c\uff1a Match Found! John: ##.# William: ##.# Steve: ##.# John: 5156.68 William: 9134.46 Steve: 11264.36 Compile() \u51fd\u6570\u4e5f\u53ef\u80fd\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\uff0c\u6211\u4eec\u5728\u4f7f\u7528\u65f6\u5ffd\u7565\u5bf9\u9519\u8bef\u7684\u5224\u65ad\u662f\u56e0\u4e3a\u6211\u4eec\u786e\u4fe1\u81ea\u5df1\u6b63\u5219\u8868\u8fbe\u5f0f\u662f\u6709\u6548\u7684\u3002\u5f53\u7528\u6237\u8f93\u5165\u6216\u4ece\u6570\u636e\u4e2d\u83b7\u53d6\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u65f6\u5019\uff0c\u6211\u4eec\u6709\u5fc5\u8981\u53bb\u68c0\u9a8c\u5b83\u7684\u6b63\u786e\u6027\u3002\u53e6\u5916\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528 MustCompile() \u65b9\u6cd5\uff0c\u5b83\u53ef\u4ee5\u50cf Compile() \u65b9\u6cd5\u4e00\u6837\u68c0\u9a8c\u6b63\u5219\u7684\u6709\u6548\u6027\uff0c\u4f46\u662f\u5f53\u6b63\u5219\u4e0d\u5408\u6cd5\u65f6\u7a0b\u5e8f\u5c06 panic() \uff08\u8be6\u60c5\u67e5\u770b \u7b2c 13.2 \u8282 \uff09\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6807\u51c6\u5e93\u6982\u8ff0 \u4e0b\u4e00\u8282\uff1a \u9501\u548c sync \u5305","title":"9.2 regexp \u5305"},{"location":"09.2/#92-regexp","text":"\u6b63\u5219\u8868\u8fbe\u5f0f\u8bed\u6cd5\u548c\u4f7f\u7528\u7684\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u8003 \u7ef4\u57fa\u767e\u79d1 \u3002 \u5728\u4e0b\u9762\u7684\u7a0b\u5e8f\u91cc\uff0c\u6211\u4eec\u5c06\u5728\u5b57\u7b26\u4e32\u4e2d\u5bf9\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f (pattern) \u8fdb\u884c\u5339\u914d\u3002 \u5982\u679c\u662f\u7b80\u5355\u6a21\u5f0f\uff0c\u4f7f\u7528 Match() \u65b9\u6cd5\u4fbf\u53ef\uff1a ok , _ := regexp . Match ( pat , [] byte ( searchIn )) \u53d8\u91cf ok \u5c06\u8fd4\u56de true \u6216\u8005 false \uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528 MatchString() \uff1a ok , _ := regexp . MatchString ( pat , searchIn ) \u66f4\u591a\u65b9\u6cd5\u4e2d\uff0c\u5fc5\u987b\u5148\u5c06\u6b63\u5219\u6a21\u5f0f\u901a\u8fc7 Compile() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a Regexp \u5bf9\u8c61\u3002\u7136\u540e\u6211\u4eec\u5c06\u638c\u63e1\u4e00\u4e9b\u5339\u914d\uff0c\u67e5\u627e\uff0c\u66ff\u6362\u76f8\u5173\u7684\u529f\u80fd\u3002 \u793a\u4f8b 9.2 pattern.go \uff1a package main import ( \"fmt\" \"regexp\" \"strconv\" ) func main () { //\u76ee\u6807\u5b57\u7b26\u4e32 searchIn := \"John: 2578.34 William: 4567.23 Steve: 5632.18\" pat := \"[0-9]+.[0-9]+\" //\u6b63\u5219 f := func ( s string ) string { v , _ := strconv . ParseFloat ( s , 32 ) return strconv . FormatFloat ( v * 2 , 'f' , 2 , 32 ) } if ok , _ := regexp . Match ( pat , [] byte ( searchIn )); ok { fmt . Println ( \"Match Found!\" ) } re , _ := regexp . Compile ( pat ) //\u5c06\u5339\u914d\u5230\u7684\u90e8\u5206\u66ff\u6362\u4e3a\"##.#\" str := re . ReplaceAllString ( searchIn , \"##.#\" ) fmt . Println ( str ) //\u53c2\u6570\u4e3a\u51fd\u6570\u65f6 str2 := re . ReplaceAllStringFunc ( searchIn , f ) fmt . Println ( str2 ) } \u8f93\u51fa\u7ed3\u679c\uff1a Match Found! John: ##.# William: ##.# Steve: ##.# John: 5156.68 William: 9134.46 Steve: 11264.36 Compile() \u51fd\u6570\u4e5f\u53ef\u80fd\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\uff0c\u6211\u4eec\u5728\u4f7f\u7528\u65f6\u5ffd\u7565\u5bf9\u9519\u8bef\u7684\u5224\u65ad\u662f\u56e0\u4e3a\u6211\u4eec\u786e\u4fe1\u81ea\u5df1\u6b63\u5219\u8868\u8fbe\u5f0f\u662f\u6709\u6548\u7684\u3002\u5f53\u7528\u6237\u8f93\u5165\u6216\u4ece\u6570\u636e\u4e2d\u83b7\u53d6\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u65f6\u5019\uff0c\u6211\u4eec\u6709\u5fc5\u8981\u53bb\u68c0\u9a8c\u5b83\u7684\u6b63\u786e\u6027\u3002\u53e6\u5916\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528 MustCompile() \u65b9\u6cd5\uff0c\u5b83\u53ef\u4ee5\u50cf Compile() \u65b9\u6cd5\u4e00\u6837\u68c0\u9a8c\u6b63\u5219\u7684\u6709\u6548\u6027\uff0c\u4f46\u662f\u5f53\u6b63\u5219\u4e0d\u5408\u6cd5\u65f6\u7a0b\u5e8f\u5c06 panic() \uff08\u8be6\u60c5\u67e5\u770b \u7b2c 13.2 \u8282 \uff09\u3002","title":"9.2 regexp \u5305"},{"location":"09.2/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6807\u51c6\u5e93\u6982\u8ff0 \u4e0b\u4e00\u8282\uff1a \u9501\u548c sync \u5305","title":"\u94fe\u63a5"},{"location":"09.3/","text":"9.3 \u9501\u548c sync \u5305 \u00b6 \u5728\u4e00\u4e9b\u590d\u6742\u7684\u7a0b\u5e8f\u4e2d\uff0c\u901a\u5e38\u901a\u8fc7\u4e0d\u540c\u7ebf\u7a0b\u6267\u884c\u4e0d\u540c\u5e94\u7528\u6765\u5b9e\u73b0\u7a0b\u5e8f\u7684\u5e76\u53d1\u3002\u5f53\u4e0d\u540c\u7ebf\u7a0b\u8981\u4f7f\u7528\u540c\u4e00\u4e2a\u53d8\u91cf\u65f6\uff0c\u7ecf\u5e38\u4f1a\u51fa\u73b0\u4e00\u4e2a\u95ee\u9898\uff1a\u65e0\u6cd5\u9884\u77e5\u53d8\u91cf\u88ab\u4e0d\u540c\u7ebf\u7a0b\u4fee\u6539\u7684\u987a\u5e8f\uff01\uff08\u8fd9\u901a\u5e38\u88ab\u79f0\u4e3a\u8d44\u6e90\u7ade\u4e89\uff0c\u6307\u4e0d\u540c\u7ebf\u7a0b\u5bf9\u540c\u4e00\u53d8\u91cf\u4f7f\u7528\u7684\u7ade\u4e89\uff09\u663e\u7136\u8fd9\u65e0\u6cd5\u8ba9\u4eba\u5bb9\u5fcd\uff0c\u90a3\u6211\u4eec\u8be5\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462\uff1f \u7ecf\u5178\u7684\u505a\u6cd5\u662f\u4e00\u6b21\u53ea\u80fd\u8ba9\u4e00\u4e2a\u7ebf\u7a0b\u5bf9\u5171\u4eab\u53d8\u91cf\u8fdb\u884c\u64cd\u4f5c\u3002\u5f53\u53d8\u91cf\u88ab\u4e00\u4e2a\u7ebf\u7a0b\u6539\u53d8\u65f6\uff08\u4e34\u754c\u533a\uff09\uff0c\u6211\u4eec\u4e3a\u5b83\u4e0a\u9501\uff0c\u76f4\u5230\u8fd9\u4e2a\u7ebf\u7a0b\u6267\u884c\u5b8c\u6210\u5e76\u89e3\u9501\u540e\uff0c\u5176\u4ed6\u7ebf\u7a0b\u624d\u80fd\u8bbf\u95ee\u5b83\u3002 \u7279\u522b\u662f\u6211\u4eec\u4e4b\u524d\u7ae0\u8282\u5b66\u4e60\u7684 map \u7c7b\u578b\u662f\u4e0d\u5b58\u5728\u9501\u7684\u673a\u5236\u6765\u5b9e\u73b0\u8fd9\u79cd\u6548\u679c\uff08\u51fa\u4e8e\u5bf9\u6027\u80fd\u7684\u8003\u8651\uff09\uff0c\u6240\u4ee5 map \u7c7b\u578b\u662f\u975e\u7ebf\u7a0b\u5b89\u5168\u7684\u3002\u5f53\u5e76\u884c\u8bbf\u95ee\u4e00\u4e2a\u5171\u4eab\u7684 map \u7c7b\u578b\u7684\u6570\u636e\uff0c map \u6570\u636e\u5c06\u4f1a\u51fa\u9519\u3002 \u5728 Go \u8bed\u8a00\u4e2d\u8fd9\u79cd\u9501\u7684\u673a\u5236\u662f\u901a\u8fc7 sync \u5305\u4e2d Mutex \u6765\u5b9e\u73b0\u7684\u3002sync \u6765\u6e90\u4e8e \"synchronized\" \u4e00\u8bcd\uff0c\u8fd9\u610f\u5473\u7740\u7ebf\u7a0b\u5c06\u6709\u5e8f\u7684\u5bf9\u540c\u4e00\u53d8\u91cf\u8fdb\u884c\u8bbf\u95ee\u3002 sync.Mutex \u662f\u4e00\u4e2a\u4e92\u65a5\u9501\uff0c\u5b83\u7684\u4f5c\u7528\u662f\u5b88\u62a4\u5728\u4e34\u754c\u533a\u5165\u53e3\u6765\u786e\u4fdd\u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u6709\u4e00\u4e2a\u7ebf\u7a0b\u8fdb\u5165\u4e34\u754c\u533a\u3002 \u5047\u8bbe info \u662f\u4e00\u4e2a\u9700\u8981\u4e0a\u9501\u7684\u653e\u5728\u5171\u4eab\u5185\u5b58\u4e2d\u7684\u53d8\u91cf\u3002\u901a\u8fc7\u5305\u542b Mutex \u6765\u5b9e\u73b0\u7684\u4e00\u4e2a\u5178\u578b\u4f8b\u5b50\u5982\u4e0b\uff1a import \"sync\" type Info struct { mu sync . Mutex // ... other fields, e.g.: Str string } \u5982\u679c\u4e00\u4e2a\u51fd\u6570\u60f3\u8981\u6539\u53d8\u8fd9\u4e2a\u53d8\u91cf\u53ef\u4ee5\u8fd9\u6837\u5199: func Update ( info * Info ) { info . mu . Lock () // critical section: info . Str = // new value // end critical section info . mu . Unlock () } \u8fd8\u6709\u4e00\u4e2a\u5f88\u6709\u7528\u7684\u4f8b\u5b50\u662f\u901a\u8fc7 Mutex \u6765\u5b9e\u73b0\u4e00\u4e2a\u53ef\u4ee5\u4e0a\u9501\u7684\u5171\u4eab\u7f13\u51b2\u5668: type SyncedBuffer struct { lock sync . Mutex buffer bytes . Buffer } \u5728 sync \u5305\u4e2d\u8fd8\u6709\u4e00\u4e2a RWMutex \u9501\uff1a\u5b83\u80fd\u901a\u8fc7 RLock() \u6765\u5141\u8bb8\u540c\u4e00\u65f6\u95f4\u591a\u4e2a\u7ebf\u7a0b\u5bf9\u53d8\u91cf\u8fdb\u884c\u8bfb\u64cd\u4f5c\uff0c\u4f46\u662f\u53ea\u80fd\u4e00\u4e2a\u7ebf\u7a0b\u8fdb\u884c\u5199\u64cd\u4f5c\u3002\u5982\u679c\u4f7f\u7528 Lock() \u5c06\u548c\u666e\u901a\u7684 Mutex \u4f5c\u7528\u76f8\u540c\u3002\u5305\u4e2d\u8fd8\u6709\u4e00\u4e2a\u65b9\u4fbf\u7684 Once \u7c7b\u578b\u53d8\u91cf\u7684\u65b9\u6cd5 once.Do(call) \uff0c\u8fd9\u4e2a\u65b9\u6cd5\u786e\u4fdd\u88ab\u8c03\u7528\u51fd\u6570\u53ea\u80fd\u88ab\u8c03\u7528\u4e00\u6b21\u3002 \u76f8\u5bf9\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7\u4f7f\u7528 sync \u5305\u53ef\u4ee5\u89e3\u51b3\u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u4e00\u4e2a\u7ebf\u7a0b\u8bbf\u95ee\u53d8\u91cf\u6216 map \u7c7b\u578b\u6570\u636e\u7684\u95ee\u9898\u3002\u5982\u679c\u8fd9\u79cd\u65b9\u5f0f\u5bfc\u81f4\u7a0b\u5e8f\u660e\u663e\u53d8\u6162\u6216\u8005\u5f15\u8d77\u5176\u4ed6\u95ee\u9898\uff0c\u6211\u4eec\u8981\u91cd\u65b0\u601d\u8003\u6765\u901a\u8fc7 goroutines \u548c channels \u6765\u89e3\u51b3\u95ee\u9898\uff0c\u8fd9\u662f\u5728 Go \u8bed\u8a00\u4e2d\u6240\u63d0\u5021\u7528\u6765\u5b9e\u73b0\u5e76\u53d1\u7684\u6280\u672f\u3002\u6211\u4eec\u5c06\u5728 \u7b2c 14 \u7ae0 \u5bf9\u5176\u6df1\u5165\u4e86\u89e3\uff0c\u5e76\u5728 \u7b2c 14.7 \u8282 \u4e2d\u5bf9\u8fd9\u4e24\u79cd\u65b9\u5f0f\u8fdb\u884c\u6bd4\u8f83\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a regexp \u5305 \u4e0b\u4e00\u8282\uff1a \u7cbe\u5bc6\u8ba1\u7b97\u548c big \u5305","title":"9.3 \u9501\u548c sync \u5305"},{"location":"09.3/#93-sync","text":"\u5728\u4e00\u4e9b\u590d\u6742\u7684\u7a0b\u5e8f\u4e2d\uff0c\u901a\u5e38\u901a\u8fc7\u4e0d\u540c\u7ebf\u7a0b\u6267\u884c\u4e0d\u540c\u5e94\u7528\u6765\u5b9e\u73b0\u7a0b\u5e8f\u7684\u5e76\u53d1\u3002\u5f53\u4e0d\u540c\u7ebf\u7a0b\u8981\u4f7f\u7528\u540c\u4e00\u4e2a\u53d8\u91cf\u65f6\uff0c\u7ecf\u5e38\u4f1a\u51fa\u73b0\u4e00\u4e2a\u95ee\u9898\uff1a\u65e0\u6cd5\u9884\u77e5\u53d8\u91cf\u88ab\u4e0d\u540c\u7ebf\u7a0b\u4fee\u6539\u7684\u987a\u5e8f\uff01\uff08\u8fd9\u901a\u5e38\u88ab\u79f0\u4e3a\u8d44\u6e90\u7ade\u4e89\uff0c\u6307\u4e0d\u540c\u7ebf\u7a0b\u5bf9\u540c\u4e00\u53d8\u91cf\u4f7f\u7528\u7684\u7ade\u4e89\uff09\u663e\u7136\u8fd9\u65e0\u6cd5\u8ba9\u4eba\u5bb9\u5fcd\uff0c\u90a3\u6211\u4eec\u8be5\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462\uff1f \u7ecf\u5178\u7684\u505a\u6cd5\u662f\u4e00\u6b21\u53ea\u80fd\u8ba9\u4e00\u4e2a\u7ebf\u7a0b\u5bf9\u5171\u4eab\u53d8\u91cf\u8fdb\u884c\u64cd\u4f5c\u3002\u5f53\u53d8\u91cf\u88ab\u4e00\u4e2a\u7ebf\u7a0b\u6539\u53d8\u65f6\uff08\u4e34\u754c\u533a\uff09\uff0c\u6211\u4eec\u4e3a\u5b83\u4e0a\u9501\uff0c\u76f4\u5230\u8fd9\u4e2a\u7ebf\u7a0b\u6267\u884c\u5b8c\u6210\u5e76\u89e3\u9501\u540e\uff0c\u5176\u4ed6\u7ebf\u7a0b\u624d\u80fd\u8bbf\u95ee\u5b83\u3002 \u7279\u522b\u662f\u6211\u4eec\u4e4b\u524d\u7ae0\u8282\u5b66\u4e60\u7684 map \u7c7b\u578b\u662f\u4e0d\u5b58\u5728\u9501\u7684\u673a\u5236\u6765\u5b9e\u73b0\u8fd9\u79cd\u6548\u679c\uff08\u51fa\u4e8e\u5bf9\u6027\u80fd\u7684\u8003\u8651\uff09\uff0c\u6240\u4ee5 map \u7c7b\u578b\u662f\u975e\u7ebf\u7a0b\u5b89\u5168\u7684\u3002\u5f53\u5e76\u884c\u8bbf\u95ee\u4e00\u4e2a\u5171\u4eab\u7684 map \u7c7b\u578b\u7684\u6570\u636e\uff0c map \u6570\u636e\u5c06\u4f1a\u51fa\u9519\u3002 \u5728 Go \u8bed\u8a00\u4e2d\u8fd9\u79cd\u9501\u7684\u673a\u5236\u662f\u901a\u8fc7 sync \u5305\u4e2d Mutex \u6765\u5b9e\u73b0\u7684\u3002sync \u6765\u6e90\u4e8e \"synchronized\" \u4e00\u8bcd\uff0c\u8fd9\u610f\u5473\u7740\u7ebf\u7a0b\u5c06\u6709\u5e8f\u7684\u5bf9\u540c\u4e00\u53d8\u91cf\u8fdb\u884c\u8bbf\u95ee\u3002 sync.Mutex \u662f\u4e00\u4e2a\u4e92\u65a5\u9501\uff0c\u5b83\u7684\u4f5c\u7528\u662f\u5b88\u62a4\u5728\u4e34\u754c\u533a\u5165\u53e3\u6765\u786e\u4fdd\u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u6709\u4e00\u4e2a\u7ebf\u7a0b\u8fdb\u5165\u4e34\u754c\u533a\u3002 \u5047\u8bbe info \u662f\u4e00\u4e2a\u9700\u8981\u4e0a\u9501\u7684\u653e\u5728\u5171\u4eab\u5185\u5b58\u4e2d\u7684\u53d8\u91cf\u3002\u901a\u8fc7\u5305\u542b Mutex \u6765\u5b9e\u73b0\u7684\u4e00\u4e2a\u5178\u578b\u4f8b\u5b50\u5982\u4e0b\uff1a import \"sync\" type Info struct { mu sync . Mutex // ... other fields, e.g.: Str string } \u5982\u679c\u4e00\u4e2a\u51fd\u6570\u60f3\u8981\u6539\u53d8\u8fd9\u4e2a\u53d8\u91cf\u53ef\u4ee5\u8fd9\u6837\u5199: func Update ( info * Info ) { info . mu . Lock () // critical section: info . Str = // new value // end critical section info . mu . Unlock () } \u8fd8\u6709\u4e00\u4e2a\u5f88\u6709\u7528\u7684\u4f8b\u5b50\u662f\u901a\u8fc7 Mutex \u6765\u5b9e\u73b0\u4e00\u4e2a\u53ef\u4ee5\u4e0a\u9501\u7684\u5171\u4eab\u7f13\u51b2\u5668: type SyncedBuffer struct { lock sync . Mutex buffer bytes . Buffer } \u5728 sync \u5305\u4e2d\u8fd8\u6709\u4e00\u4e2a RWMutex \u9501\uff1a\u5b83\u80fd\u901a\u8fc7 RLock() \u6765\u5141\u8bb8\u540c\u4e00\u65f6\u95f4\u591a\u4e2a\u7ebf\u7a0b\u5bf9\u53d8\u91cf\u8fdb\u884c\u8bfb\u64cd\u4f5c\uff0c\u4f46\u662f\u53ea\u80fd\u4e00\u4e2a\u7ebf\u7a0b\u8fdb\u884c\u5199\u64cd\u4f5c\u3002\u5982\u679c\u4f7f\u7528 Lock() \u5c06\u548c\u666e\u901a\u7684 Mutex \u4f5c\u7528\u76f8\u540c\u3002\u5305\u4e2d\u8fd8\u6709\u4e00\u4e2a\u65b9\u4fbf\u7684 Once \u7c7b\u578b\u53d8\u91cf\u7684\u65b9\u6cd5 once.Do(call) \uff0c\u8fd9\u4e2a\u65b9\u6cd5\u786e\u4fdd\u88ab\u8c03\u7528\u51fd\u6570\u53ea\u80fd\u88ab\u8c03\u7528\u4e00\u6b21\u3002 \u76f8\u5bf9\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7\u4f7f\u7528 sync \u5305\u53ef\u4ee5\u89e3\u51b3\u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u4e00\u4e2a\u7ebf\u7a0b\u8bbf\u95ee\u53d8\u91cf\u6216 map \u7c7b\u578b\u6570\u636e\u7684\u95ee\u9898\u3002\u5982\u679c\u8fd9\u79cd\u65b9\u5f0f\u5bfc\u81f4\u7a0b\u5e8f\u660e\u663e\u53d8\u6162\u6216\u8005\u5f15\u8d77\u5176\u4ed6\u95ee\u9898\uff0c\u6211\u4eec\u8981\u91cd\u65b0\u601d\u8003\u6765\u901a\u8fc7 goroutines \u548c channels \u6765\u89e3\u51b3\u95ee\u9898\uff0c\u8fd9\u662f\u5728 Go \u8bed\u8a00\u4e2d\u6240\u63d0\u5021\u7528\u6765\u5b9e\u73b0\u5e76\u53d1\u7684\u6280\u672f\u3002\u6211\u4eec\u5c06\u5728 \u7b2c 14 \u7ae0 \u5bf9\u5176\u6df1\u5165\u4e86\u89e3\uff0c\u5e76\u5728 \u7b2c 14.7 \u8282 \u4e2d\u5bf9\u8fd9\u4e24\u79cd\u65b9\u5f0f\u8fdb\u884c\u6bd4\u8f83\u3002","title":"9.3 \u9501\u548c sync \u5305"},{"location":"09.3/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a regexp \u5305 \u4e0b\u4e00\u8282\uff1a \u7cbe\u5bc6\u8ba1\u7b97\u548c big \u5305","title":"\u94fe\u63a5"},{"location":"09.4/","text":"9.4 \u7cbe\u5bc6\u8ba1\u7b97\u548c big \u5305 \u00b6 \u6211\u4eec\u77e5\u9053\u6709\u4e9b\u65f6\u5019\u901a\u8fc7\u7f16\u7a0b\u7684\u65b9\u5f0f\u53bb\u8fdb\u884c\u8ba1\u7b97\u662f\u4e0d\u7cbe\u786e\u7684\u3002\u5982\u679c\u4f60\u4f7f\u7528 Go \u8bed\u8a00\u4e2d\u7684 float64 \u7c7b\u578b\u8fdb\u884c\u6d6e\u70b9\u8fd0\u7b97\uff0c\u8fd4\u56de\u7ed3\u679c\u5c06\u7cbe\u786e\u5230 15 \u4f4d\uff0c\u8db3\u4ee5\u6ee1\u8db3\u5927\u591a\u6570\u7684\u4efb\u52a1\u3002\u5f53\u5bf9\u8d85\u51fa int64 \u6216\u8005 uint64 \u7c7b\u578b\u8fd9\u6837\u7684\u5927\u6570\u8fdb\u884c\u8ba1\u7b97\u65f6\uff0c\u5982\u679c\u5bf9\u7cbe\u5ea6\u6ca1\u6709\u8981\u6c42\uff0c float32 \u6216\u8005 float64 \u53ef\u4ee5\u80dc\u4efb\uff0c\u4f46\u5982\u679c\u5bf9\u7cbe\u5ea6\u6709\u4e25\u683c\u8981\u6c42\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4e0d\u80fd\u4f7f\u7528\u6d6e\u70b9\u6570\uff0c\u5728\u5185\u5b58\u4e2d\u5b83\u4eec\u53ea\u80fd\u88ab\u8fd1\u4f3c\u7684\u8868\u793a\u3002 \u5bf9\u4e8e\u6574\u6570\u7684\u9ad8\u7cbe\u5ea6\u8ba1\u7b97 Go \u8bed\u8a00\u4e2d\u63d0\u4f9b\u4e86 big \u5305\uff0c\u88ab\u5305\u542b\u5728 math \u5305\u4e0b\uff1a\u6709\u7528\u6765\u8868\u793a\u5927\u6574\u6570\u7684 big.Int \u548c\u8868\u793a\u5927\u6709\u7406\u6570\u7684 big.Rat \u7c7b\u578b\uff08\u53ef\u4ee5\u8868\u793a\u4e3a \u2156 \u6216 3.1416 \u8fd9\u6837\u7684\u5206\u6570\uff0c\u800c\u4e0d\u662f\u65e0\u7406\u6570\u6216 \u03c0\uff09\u3002\u8fd9\u4e9b\u7c7b\u578b\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u4f4d\u7c7b\u578b\u7684\u6570\u5b57\uff0c\u53ea\u8981\u5185\u5b58\u8db3\u591f\u5927\u3002\u7f3a\u70b9\u662f\u66f4\u5927\u7684\u5185\u5b58\u548c\u5904\u7406\u5f00\u9500\u4f7f\u5b83\u4eec\u4f7f\u7528\u8d77\u6765\u8981\u6bd4\u5185\u7f6e\u7684\u6570\u5b57\u7c7b\u578b\u6162\u5f88\u591a\u3002 \u5927\u7684\u6574\u578b\u6570\u5b57\u662f\u901a\u8fc7 big.NewInt(n) \u6765\u6784\u9020\u7684\uff0c\u5176\u4e2d n \u4e3a int64 \u7c7b\u578b\u6574\u6570\u3002\u800c\u5927\u6709\u7406\u6570\u662f\u901a\u8fc7 big.NewRat(n, d) \u65b9\u6cd5\u6784\u9020\u3002 n \uff08\u5206\u5b50\uff09\u548c d \uff08\u5206\u6bcd\uff09\u90fd\u662f int64 \u578b\u6574\u6570\u3002\u56e0\u4e3a Go \u8bed\u8a00\u4e0d\u652f\u6301\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff0c\u6240\u4ee5\u6240\u6709\u5927\u6570\u5b57\u7c7b\u578b\u90fd\u6709\u50cf\u662f Add() \u548c Mul() \u8fd9\u6837\u7684\u65b9\u6cd5\u3002\u5b83\u4eec\u4f5c\u7528\u4e8e\u4f5c\u4e3a receiver \u7684\u6574\u6570\u548c\u6709\u7406\u6570\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u5b83\u4eec\u4fee\u6539 receiver \u5e76\u4ee5 receiver \u4f5c\u4e3a\u8fd4\u56de\u7ed3\u679c\u3002\u56e0\u4e3a\u6ca1\u6709\u5fc5\u8981\u521b\u5efa big.Int \u7c7b\u578b\u7684\u4e34\u65f6\u53d8\u91cf\u6765\u5b58\u653e\u4e2d\u95f4\u7ed3\u679c\uff0c\u6240\u4ee5\u8fd0\u7b97\u53ef\u4ee5\u88ab\u94fe\u5f0f\u5730\u8c03\u7528\uff0c\u5e76\u8282\u7701\u5185\u5b58\u3002 \u793a\u4f8b 9.2 big.go \uff1a // big.go package main import ( \"fmt\" \"math\" \"math/big\" ) func main () { // Here are some calculations with bigInts: im := big . NewInt ( math . MaxInt64 ) in := im io := big . NewInt ( 1956 ) ip := big . NewInt ( 1 ) ip . Mul ( im , in ). Add ( ip , im ). Div ( ip , io ) fmt . Printf ( \"Big Int: %v\\n\" , ip ) // Here are some calculations with bigInts: rm := big . NewRat ( math . MaxInt64 , 1956 ) rn := big . NewRat ( - 1956 , math . MaxInt64 ) ro := big . NewRat ( 19 , 56 ) rp := big . NewRat ( 1111 , 2222 ) rq := big . NewRat ( 1 , 1 ) rq . Mul ( rm , rn ). Add ( rq , ro ). Mul ( rq , rp ) fmt . Printf ( \"Big Rat: %v\\n\" , rq ) } /* Output: Big Int: 43492122561469640008497075573153004 Big Rat: -37/112 */ \u8f93\u51fa\u7ed3\u679c\uff1a Big Int: 43492122561469640008497075573153004 Big Rat: -37/112 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u9501\u548c sync \u5305 \u4e0b\u4e00\u8282\uff1a \u81ea\u5b9a\u4e49\u5305\u548c\u53ef\u89c1\u6027","title":"9.4 \u7cbe\u5bc6\u8ba1\u7b97\u548c big \u5305"},{"location":"09.4/#94-big","text":"\u6211\u4eec\u77e5\u9053\u6709\u4e9b\u65f6\u5019\u901a\u8fc7\u7f16\u7a0b\u7684\u65b9\u5f0f\u53bb\u8fdb\u884c\u8ba1\u7b97\u662f\u4e0d\u7cbe\u786e\u7684\u3002\u5982\u679c\u4f60\u4f7f\u7528 Go \u8bed\u8a00\u4e2d\u7684 float64 \u7c7b\u578b\u8fdb\u884c\u6d6e\u70b9\u8fd0\u7b97\uff0c\u8fd4\u56de\u7ed3\u679c\u5c06\u7cbe\u786e\u5230 15 \u4f4d\uff0c\u8db3\u4ee5\u6ee1\u8db3\u5927\u591a\u6570\u7684\u4efb\u52a1\u3002\u5f53\u5bf9\u8d85\u51fa int64 \u6216\u8005 uint64 \u7c7b\u578b\u8fd9\u6837\u7684\u5927\u6570\u8fdb\u884c\u8ba1\u7b97\u65f6\uff0c\u5982\u679c\u5bf9\u7cbe\u5ea6\u6ca1\u6709\u8981\u6c42\uff0c float32 \u6216\u8005 float64 \u53ef\u4ee5\u80dc\u4efb\uff0c\u4f46\u5982\u679c\u5bf9\u7cbe\u5ea6\u6709\u4e25\u683c\u8981\u6c42\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4e0d\u80fd\u4f7f\u7528\u6d6e\u70b9\u6570\uff0c\u5728\u5185\u5b58\u4e2d\u5b83\u4eec\u53ea\u80fd\u88ab\u8fd1\u4f3c\u7684\u8868\u793a\u3002 \u5bf9\u4e8e\u6574\u6570\u7684\u9ad8\u7cbe\u5ea6\u8ba1\u7b97 Go \u8bed\u8a00\u4e2d\u63d0\u4f9b\u4e86 big \u5305\uff0c\u88ab\u5305\u542b\u5728 math \u5305\u4e0b\uff1a\u6709\u7528\u6765\u8868\u793a\u5927\u6574\u6570\u7684 big.Int \u548c\u8868\u793a\u5927\u6709\u7406\u6570\u7684 big.Rat \u7c7b\u578b\uff08\u53ef\u4ee5\u8868\u793a\u4e3a \u2156 \u6216 3.1416 \u8fd9\u6837\u7684\u5206\u6570\uff0c\u800c\u4e0d\u662f\u65e0\u7406\u6570\u6216 \u03c0\uff09\u3002\u8fd9\u4e9b\u7c7b\u578b\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u4f4d\u7c7b\u578b\u7684\u6570\u5b57\uff0c\u53ea\u8981\u5185\u5b58\u8db3\u591f\u5927\u3002\u7f3a\u70b9\u662f\u66f4\u5927\u7684\u5185\u5b58\u548c\u5904\u7406\u5f00\u9500\u4f7f\u5b83\u4eec\u4f7f\u7528\u8d77\u6765\u8981\u6bd4\u5185\u7f6e\u7684\u6570\u5b57\u7c7b\u578b\u6162\u5f88\u591a\u3002 \u5927\u7684\u6574\u578b\u6570\u5b57\u662f\u901a\u8fc7 big.NewInt(n) \u6765\u6784\u9020\u7684\uff0c\u5176\u4e2d n \u4e3a int64 \u7c7b\u578b\u6574\u6570\u3002\u800c\u5927\u6709\u7406\u6570\u662f\u901a\u8fc7 big.NewRat(n, d) \u65b9\u6cd5\u6784\u9020\u3002 n \uff08\u5206\u5b50\uff09\u548c d \uff08\u5206\u6bcd\uff09\u90fd\u662f int64 \u578b\u6574\u6570\u3002\u56e0\u4e3a Go \u8bed\u8a00\u4e0d\u652f\u6301\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff0c\u6240\u4ee5\u6240\u6709\u5927\u6570\u5b57\u7c7b\u578b\u90fd\u6709\u50cf\u662f Add() \u548c Mul() \u8fd9\u6837\u7684\u65b9\u6cd5\u3002\u5b83\u4eec\u4f5c\u7528\u4e8e\u4f5c\u4e3a receiver \u7684\u6574\u6570\u548c\u6709\u7406\u6570\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u5b83\u4eec\u4fee\u6539 receiver \u5e76\u4ee5 receiver \u4f5c\u4e3a\u8fd4\u56de\u7ed3\u679c\u3002\u56e0\u4e3a\u6ca1\u6709\u5fc5\u8981\u521b\u5efa big.Int \u7c7b\u578b\u7684\u4e34\u65f6\u53d8\u91cf\u6765\u5b58\u653e\u4e2d\u95f4\u7ed3\u679c\uff0c\u6240\u4ee5\u8fd0\u7b97\u53ef\u4ee5\u88ab\u94fe\u5f0f\u5730\u8c03\u7528\uff0c\u5e76\u8282\u7701\u5185\u5b58\u3002 \u793a\u4f8b 9.2 big.go \uff1a // big.go package main import ( \"fmt\" \"math\" \"math/big\" ) func main () { // Here are some calculations with bigInts: im := big . NewInt ( math . MaxInt64 ) in := im io := big . NewInt ( 1956 ) ip := big . NewInt ( 1 ) ip . Mul ( im , in ). Add ( ip , im ). Div ( ip , io ) fmt . Printf ( \"Big Int: %v\\n\" , ip ) // Here are some calculations with bigInts: rm := big . NewRat ( math . MaxInt64 , 1956 ) rn := big . NewRat ( - 1956 , math . MaxInt64 ) ro := big . NewRat ( 19 , 56 ) rp := big . NewRat ( 1111 , 2222 ) rq := big . NewRat ( 1 , 1 ) rq . Mul ( rm , rn ). Add ( rq , ro ). Mul ( rq , rp ) fmt . Printf ( \"Big Rat: %v\\n\" , rq ) } /* Output: Big Int: 43492122561469640008497075573153004 Big Rat: -37/112 */ \u8f93\u51fa\u7ed3\u679c\uff1a Big Int: 43492122561469640008497075573153004 Big Rat: -37/112","title":"9.4 \u7cbe\u5bc6\u8ba1\u7b97\u548c big \u5305"},{"location":"09.4/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u9501\u548c sync \u5305 \u4e0b\u4e00\u8282\uff1a \u81ea\u5b9a\u4e49\u5305\u548c\u53ef\u89c1\u6027","title":"\u94fe\u63a5"},{"location":"09.5/","text":"9.5 \u81ea\u5b9a\u4e49\u5305\u548c\u53ef\u89c1\u6027 \u00b6 \u5305\u662f Go \u8bed\u8a00\u4e2d\u4ee3\u7801\u7ec4\u7ec7\u548c\u4ee3\u7801\u7f16\u8bd1\u7684\u4e3b\u8981\u65b9\u5f0f\u3002\u5173\u4e8e\u5b83\u4eec\u7684\u5f88\u591a\u57fa\u672c\u4fe1\u606f\u5df2\u7ecf\u5728 4.2 \u7ae0\u8282\u4e2d\u7ed9\u51fa\uff0c\u6700\u5f15\u4eba\u6ce8\u76ee\u7684\u4fbf\u662f\u53ef\u89c1\u6027\u3002\u73b0\u5728\u6211\u4eec\u6765\u770b\u770b\u5177\u4f53\u5982\u4f55\u6765\u4f7f\u7528\u81ea\u5df1\u5199\u7684\u5305\u3002\u5728\u4e0b\u4e00\u8282\uff0c\u6211\u4eec\u5c06\u56de\u987e\u4e00\u4e9b\u6807\u51c6\u5e93\u4e2d\u7684\u5305\uff0c\u81ea\u5b9a\u4e49\u7684\u5305\u548c\u6807\u51c6\u5e93\u4ee5\u5916\u7684\u5305\u3002 \u5f53\u5199\u81ea\u5df1\u5305\u7684\u65f6\u5019\uff0c\u8981\u4f7f\u7528\u77ed\u5c0f\u7684\u4e0d\u542b\u6709 _ \uff08\u4e0b\u5212\u7ebf\uff09\u7684\u5c0f\u5199\u5355\u8bcd\u6765\u4e3a\u6587\u4ef6\u547d\u540d\u3002\u8fd9\u91cc\u6709\u4e2a\u7b80\u5355\u4f8b\u5b50\u6765\u8bf4\u660e\u5305\u662f\u5982\u4f55\u76f8\u4e92\u8c03\u7528\u4ee5\u53ca\u53ef\u89c1\u6027\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002 \u5f53\u524d\u76ee\u5f55\u4e0b\uff08examples/chapter_9/book/\uff09\u6709\u4e00\u4e2a\u540d\u4e3a package_mytest.go \u7684\u7a0b\u5e8f, \u5b83\u4f7f\u7528\u4e86\u81ea\u5b9a\u4e49\u5305 pack1 \u4e2d pack1.go \u7684\u4ee3\u7801\u3002\u8fd9\u6bb5\u7a0b\u5e8f\uff08\u8fde\u540c\u7f16\u8bd1\u94fe\u63a5\u751f\u6210\u7684 pack1.a\uff09\u5b58\u653e\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u4e00\u4e2a\u540d\u4e3a pack1 \u7684\u6587\u4ef6\u5939\u4e0b\u3002\u6240\u4ee5\u94fe\u63a5\u5668\u5c06\u5305\u7684\u5bf9\u8c61\u548c\u4e3b\u7a0b\u5e8f\u5bf9\u8c61\u94fe\u63a5\u5728\u4e00\u8d77\u3002 \u793a\u4f8b 9.4 pack1.go \uff1a package pack1 var Pack1Int int = 42 var pack1Float = 3.14 func ReturnStr () string { return \"Hello main!\" } \u5b83\u5305\u542b\u4e86\u4e00\u4e2a\u6574\u578b\u53d8\u91cf Pack1Int \u548c\u4e00\u4e2a\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u51fd\u6570 ReturnStr \u3002\u8fd9\u6bb5\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u4e0d\u505a\u4efb\u4f55\u7684\u4e8b\u60c5\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709\u4e00\u4e2a main \u51fd\u6570\u3002 \u5728\u4e3b\u7a0b\u5e8f package_mytest.go \u4e2d\u8fd9\u4e2a\u5305\u901a\u8fc7\u58f0\u660e\u7684\u65b9\u5f0f\u88ab\u5bfc\u5165, \u53ea\u5230\u5305\u7684\u76ee\u5f55\u4e00\u5c42\u3002 import \"./pack1\" import \u7684\u4e00\u822c\u683c\u5f0f\u5982\u4e0b: import \"\u5305\u7684\u8def\u5f84\u6216 URL \u5730\u5740\" \u4f8b\u5982\uff1a import \"github.com/org1/pack1\u201d \u8def\u5f84\u662f\u6307\u5f53\u524d\u76ee\u5f55\u7684\u76f8\u5bf9\u8def\u5f84\u3002 \u793a\u4f8b 9.5 package_mytest.go \uff1a package main import ( \"fmt\" \"./pack1\" ) func main () { var test1 string test1 = pack1 . ReturnStr () fmt . Printf ( \"ReturnStr from package1: %s\\n\" , test1 ) fmt . Printf ( \"Integer from package1: %d\\n\" , pack1 . Pack1Int ) // fmt.Printf(\"Float from package1: %f\\n\", pack1.pack1Float) } \u8f93\u51fa\u7ed3\u679c\uff1a ReturnStr from package1: Hello main! Integer from package1: 42 \u5982\u679c\u5305 pack1 \u548c\u6211\u4eec\u7684\u7a0b\u5e8f\u5728\u540c\u4e00\u8def\u5f84\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 \"import ./pack1\" \u8fd9\u6837\u7684\u65b9\u5f0f\u6765\u5f15\u5165\uff0c\u4f46\u8fd9\u4e0d\u88ab\u89c6\u4e3a\u4e00\u4e2a\u597d\u7684\u65b9\u6cd5\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u8bd5\u56fe\u8bbf\u95ee\u4e00\u4e2a\u672a\u5f15\u7528\u7684\u53d8\u91cf\u6216\u8005\u51fd\u6570\uff0c\u751a\u81f3\u6ca1\u6709\u7f16\u8bd1\u3002\u5c06\u4f1a\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\uff1a fmt . Printf ( \"Float from package1: %f\\n\" , pack1 . pack1Float ) \u9519\u8bef\uff1a cannot refer to unexported name pack1.pack1Float \u4e3b\u7a0b\u5e8f\u5229\u7528\u7684\u5305\u5fc5\u987b\u5728\u4e3b\u7a0b\u5e8f\u7f16\u5199\u4e4b\u524d\u88ab\u7f16\u8bd1\u3002\u4e3b\u7a0b\u5e8f\u4e2d\u6bcf\u4e2a pack1 \u9879\u76ee\u90fd\u8981\u901a\u8fc7\u5305\u540d\u6765\u4f7f\u7528\uff1a pack1.Item \u3002\u5177\u4f53\u4f7f\u7528\u65b9\u6cd5\u8bf7\u53c2\u89c1\u793a\u4f8b 4.6 \u548c 4.7\u3002 \u56e0\u6b64\uff0c\u6309\u7167\u60ef\u4f8b\uff0c\u5b50\u76ee\u5f55\u548c\u5305\u4e4b\u95f4\u6709\u7740\u5bc6\u5207\u7684\u8054\u7cfb\uff1a\u4e3a\u4e86\u533a\u5206\uff0c\u4e0d\u540c\u5305\u5b58\u653e\u5728\u4e0d\u540c\u7684\u76ee\u5f55\u4e0b\uff0c\u6bcf\u4e2a\u5305\uff08\u6240\u6709\u5c5e\u4e8e\u8fd9\u4e2a\u5305\u4e2d\u7684 go \u6587\u4ef6\uff09\u90fd\u5b58\u653e\u5728\u548c\u5305\u540d\u76f8\u540c\u7684\u5b50\u76ee\u5f55\u4e0b\uff1a Import with . : import . \"./pack1\" \u5f53\u4f7f\u7528 . \u4f5c\u4e3a\u5305\u7684\u522b\u540d\u65f6\uff0c\u4f60\u53ef\u4ee5\u4e0d\u901a\u8fc7\u5305\u540d\u6765\u4f7f\u7528\u5176\u4e2d\u7684\u9879\u76ee\u3002\u4f8b\u5982\uff1a test := ReturnStr() \u3002 \u5728\u5f53\u524d\u7684\u547d\u540d\u7a7a\u95f4\u5bfc\u5165 pack1 \u5305\uff0c\u4e00\u822c\u662f\u4e3a\u4e86\u5177\u6709\u66f4\u597d\u7684\u6d4b\u8bd5\u6548\u679c\u3002 Import with _ : import _ \"./pack1/pack1\" pack1 \u5305\u53ea\u5bfc\u5165\u5176\u526f\u4f5c\u7528\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u6267\u884c\u5b83\u7684 init() \u51fd\u6570\u5e76\u521d\u59cb\u5316\u5176\u4e2d\u7684\u5168\u5c40\u53d8\u91cf\u3002 \u5bfc\u5165\u5916\u90e8\u5b89\u88c5\u5305: \u5982\u679c\u4f60\u8981\u5728\u4f60\u7684\u5e94\u7528\u4e2d\u4f7f\u7528\u4e00\u4e2a\u6216\u591a\u4e2a\u5916\u90e8\u5305\uff0c\u9996\u5148\u4f60\u5fc5\u987b\u4f7f\u7528 go install \uff08\u53c2\u89c1 \u7b2c 9.7 \u8282 \uff09\u5728\u4f60\u7684\u672c\u5730\u673a\u5668\u4e0a\u5b89\u88c5\u5b83\u4eec\u3002 \u5047\u8bbe\u4f60\u60f3\u4f7f\u7528 http://codesite.ext/author/goExample/goex \u8fd9\u79cd\u6258\u7ba1\u5728 Google Code\u3001GitHub \u548c Launchpad \u7b49\u4ee3\u7801\u7f51\u7ad9\u4e0a\u7684\u5305\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u5b89\u88c5\uff1a go install codesite.ext/author/goExample/goex \u5c06\u4e00\u4e2a\u540d\u4e3a codesite.ext/author/goExample/goex \u7684 map \u5b89\u88c5\u5728 $GOROOT/src/ \u76ee\u5f55\u4e0b\u3002 \u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\uff0c\u4e00\u6b21\u6027\u5b89\u88c5\uff0c\u5e76\u5bfc\u5165\u5230\u4f60\u7684\u4ee3\u7801\u4e2d\uff1a import goex \"codesite.ext/author/goExample/goex\" \u56e0\u6b64\u8be5\u5305\u7684 URL \u5c06\u7528\u4f5c\u5bfc\u5165\u8def\u5f84\u3002 \u5728 http://golang.org/cmd/goinstall/ \u7684 go install \u6587\u6863\u4e2d\u5217\u51fa\u4e86\u4e00\u4e9b\u5e7f\u6cdb\u88ab\u4f7f\u7528\u7684\u6258\u7ba1\u5728\u7f51\u7edc\u4ee3\u7801\u4ed3\u5e93\u7684\u5305\u7684\u5bfc\u5165\u8def\u5f84 \u5305\u7684\u521d\u59cb\u5316: \u7a0b\u5e8f\u7684\u6267\u884c\u5f00\u59cb\u4e8e\u5bfc\u5165\u5305\uff0c\u521d\u59cb\u5316 main \u5305\u7136\u540e\u8c03\u7528 main() \u51fd\u6570\u3002 \u4e00\u4e2a\u6ca1\u6709\u5bfc\u5165\u7684\u5305\u5c06\u901a\u8fc7\u5206\u914d\u521d\u59cb\u503c\u7ed9\u6240\u6709\u7684\u5305\u7ea7\u53d8\u91cf\u548c\u8c03\u7528\u6e90\u7801\u4e2d\u5b9a\u4e49\u7684\u5305\u7ea7 init() \u51fd\u6570\u6765\u521d\u59cb\u5316\u3002\u4e00\u4e2a\u5305\u53ef\u80fd\u6709\u591a\u4e2a init() \u51fd\u6570\u751a\u81f3\u5728\u4e00\u4e2a\u6e90\u7801\u6587\u4ef6\u4e2d\u3002\u5b83\u4eec\u7684\u6267\u884c\u662f\u65e0\u5e8f\u7684\u3002\u8fd9\u662f\u6700\u597d\u7684\u4f8b\u5b50\u6765\u6d4b\u5b9a\u5305\u7684\u503c\u662f\u5426\u53ea\u4f9d\u8d56\u4e8e\u76f8\u540c\u5305\u4e0b\u7684\u5176\u4ed6\u503c\u6216\u8005\u51fd\u6570\u3002 init() \u51fd\u6570\u662f\u4e0d\u80fd\u88ab\u8c03\u7528\u7684\u3002 \u5bfc\u5165\u7684\u5305\u5728\u5305\u81ea\u8eab\u521d\u59cb\u5316\u524d\u88ab\u521d\u59cb\u5316\uff0c\u800c\u4e00\u4e2a\u5305\u5728\u7a0b\u5e8f\u6267\u884c\u4e2d\u53ea\u80fd\u521d\u59cb\u5316\u4e00\u6b21\u3002 \u7f16\u8bd1\u5e76\u5b89\u88c5\u4e00\u4e2a\u5305\uff08\u53c2\u89c1 \u7b2c 9.7 \u8282 \uff09\uff1a \u5728 Linux/OS X \u4e0b\u53ef\u4ee5\u7528\u7c7b\u4f3c \u7b2c 3.9 \u8282 \u7684 Makefile \u811a\u672c\u505a\u5230\u8fd9\u4e00\u70b9\uff1a include $(GOROOT)/src/Make.inc TARG=pack1 GOFILES=\\ pack1.go\\ pack1b.go\\ include $(GOROOT)/src/Make.pkg \u901a\u8fc7 chmod 777 ./Makefile \u786e\u4fdd\u5b83\u7684\u53ef\u6267\u884c\u6027\u3002 \u4e0a\u9762\u811a\u672c\u5185\u7684 include \u8bed\u53e5\u5f15\u5165\u4e86\u76f8\u5e94\u7684\u529f\u80fd\uff0c\u5c06\u81ea\u52a8\u68c0\u6d4b\u673a\u5668\u7684\u67b6\u6784\u5e76\u8c03\u7528\u6b63\u786e\u7684\u7f16\u8bd1\u5668\u548c\u94fe\u63a5\u5668\u3002 \u7136\u540e\u7ec8\u7aef\u6267\u884c make \u6216 gomake \u5de5\u5177\uff1a\u4ed6\u4eec\u90fd\u4f1a\u751f\u6210\u4e00\u4e2a\u5305\u542b\u9759\u6001\u5e93 pack1.a \u7684 _obj \u76ee\u5f55\u3002 go install\uff08\u53c2\u89c1 \u7b2c 9.7 \u8282 \uff0c\u4ece Go1 \u7684\u9996\u9009\u65b9\u5f0f\uff09\u540c\u6837\u590d\u5236 pack1.a \u5230\u672c\u5730\u7684 $GOROOT/pkg \u7684\u76ee\u5f55\u4e2d\u4e00\u4e2a\u4ee5\u64cd\u4f5c\u7cfb\u7edf\u4e3a\u540d\u7684\u5b50\u76ee\u5f55\u4e0b\u3002\u50cf import \"pack1\" \u4ee3\u66ff import \"path to pack1\" \uff0c\u8fd9\u6837\u53ea\u901a\u8fc7\u540d\u5b57\u5c31\u53ef\u4ee5\u5c06\u5305\u5728\u7a0b\u5e8f\u4e2d\u5bfc\u5165\u3002 \u5f53 \u7b2c 13 \u7ae0 \u6211\u4eec\u9047\u5230\u4f7f\u7528\u6d4b\u8bd5\u5de5\u5177\u8fdb\u884c\u6d4b\u8bd5\u7684\u65f6\u5019\u6211\u4eec\u5c06\u91cd\u65b0\u56de\u5230\u81ea\u5df1\u7684\u5305\u7684\u5236\u4f5c\u548c\u7f16\u8bd1\u8fd9\u4e2a\u8bdd\u9898\u3002 \u95ee\u9898 9.1 a\uff09\u4e00\u4e2a\u5305\u80fd\u5206\u6210\u591a\u4e2a\u6e90\u6587\u4ef6\u4e48\uff1f b\uff09\u4e00\u4e2a\u6e90\u6587\u4ef6\u662f\u5426\u80fd\u5305\u542b\u591a\u4e2a\u5305\uff1f \u7ec3\u4e60 9.3 main_greetings.go \u521b\u5efa\u4e00\u4e2a\u7a0b\u5e8f main_greetings.go \u80fd\u591f\u548c\u7528\u6237\u8bf4 \"Good Day\" \u6216\u8005 \"Good Night\" \u3002\u4e0d\u540c\u7684\u95ee\u5019\u5e94\u8be5\u653e\u5230\u5355\u72ec\u7684 greetings \u5305\u4e2d\u3002 \u5728\u540c\u4e00\u4e2a\u5305\u4e2d\u521b\u5efa\u4e00\u4e2a IsAM \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\u7528\u6765\u5224\u65ad\u5f53\u524d\u65f6\u95f4\u662f AM \u8fd8\u662f PM\uff0c\u540c\u6837\u521b\u5efa IsAfternoon \u548c IsEvening \u51fd\u6570\u3002 \u4f7f\u7528 main_greetings \u4f5c\u51fa\u5408\u9002\u7684\u95ee\u5019\uff08\u63d0\u793a\uff1a\u4f7f\u7528 time \u5305\uff09\u3002 \u7ec3\u4e60 9.4 \u521b\u5efa\u4e00\u4e2a\u7a0b\u5e8f main_oddven.go \u5224\u65ad\u524d 100 \u4e2a\u6574\u6570\u662f\u4e0d\u662f\u5076\u6570\uff0c\u5c06\u5224\u65ad\u6240\u7528\u7684\u51fd\u6570\u7f16\u5199\u5728 even \u5305\u91cc\u3002 \u7ec3\u4e60 9.5 \u4f7f\u7528 \u7b2c 6.6 \u8282 \u7684\u6590\u6ce2\u90a3\u5951\u7a0b\u5e8f\uff1a 1\uff09\u5c06\u6590\u6ce2\u90a3\u5951\u529f\u80fd\u653e\u5165\u81ea\u5df1\u7684 fibo \u5305\u4e2d\u5e76\u901a\u8fc7\u4e3b\u7a0b\u5e8f\u8c03\u7528\u5b83\uff0c\u5b58\u50a8\u6700\u540e\u8f93\u5165\u7684\u503c\u5728\u51fd\u6570\u7684\u5168\u5c40\u53d8\u91cf\u3002 2\uff09\u6269\u5c55 fibo \u5305\u5c06\u901a\u8fc7\u8c03\u7528\u6590\u6ce2\u90a3\u5951\u7684\u65f6\u5019\uff0c\u64cd\u4f5c\u4e5f\u4f5c\u4e3a\u4e00\u4e2a\u53c2\u6570\u3002\u5b9e\u9a8c \"+\" \u548c \"*\" main_fibo.go / fibonacci.go \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7cbe\u5bc6\u8ba1\u7b97\u548c big \u5305 \u4e0b\u4e00\u8282\uff1a \u4e3a\u81ea\u5b9a\u4e49\u5305\u4f7f\u7528 godoc","title":"9.5 \u81ea\u5b9a\u4e49\u5305\u548c\u53ef\u89c1\u6027"},{"location":"09.5/#95","text":"\u5305\u662f Go \u8bed\u8a00\u4e2d\u4ee3\u7801\u7ec4\u7ec7\u548c\u4ee3\u7801\u7f16\u8bd1\u7684\u4e3b\u8981\u65b9\u5f0f\u3002\u5173\u4e8e\u5b83\u4eec\u7684\u5f88\u591a\u57fa\u672c\u4fe1\u606f\u5df2\u7ecf\u5728 4.2 \u7ae0\u8282\u4e2d\u7ed9\u51fa\uff0c\u6700\u5f15\u4eba\u6ce8\u76ee\u7684\u4fbf\u662f\u53ef\u89c1\u6027\u3002\u73b0\u5728\u6211\u4eec\u6765\u770b\u770b\u5177\u4f53\u5982\u4f55\u6765\u4f7f\u7528\u81ea\u5df1\u5199\u7684\u5305\u3002\u5728\u4e0b\u4e00\u8282\uff0c\u6211\u4eec\u5c06\u56de\u987e\u4e00\u4e9b\u6807\u51c6\u5e93\u4e2d\u7684\u5305\uff0c\u81ea\u5b9a\u4e49\u7684\u5305\u548c\u6807\u51c6\u5e93\u4ee5\u5916\u7684\u5305\u3002 \u5f53\u5199\u81ea\u5df1\u5305\u7684\u65f6\u5019\uff0c\u8981\u4f7f\u7528\u77ed\u5c0f\u7684\u4e0d\u542b\u6709 _ \uff08\u4e0b\u5212\u7ebf\uff09\u7684\u5c0f\u5199\u5355\u8bcd\u6765\u4e3a\u6587\u4ef6\u547d\u540d\u3002\u8fd9\u91cc\u6709\u4e2a\u7b80\u5355\u4f8b\u5b50\u6765\u8bf4\u660e\u5305\u662f\u5982\u4f55\u76f8\u4e92\u8c03\u7528\u4ee5\u53ca\u53ef\u89c1\u6027\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002 \u5f53\u524d\u76ee\u5f55\u4e0b\uff08examples/chapter_9/book/\uff09\u6709\u4e00\u4e2a\u540d\u4e3a package_mytest.go \u7684\u7a0b\u5e8f, \u5b83\u4f7f\u7528\u4e86\u81ea\u5b9a\u4e49\u5305 pack1 \u4e2d pack1.go \u7684\u4ee3\u7801\u3002\u8fd9\u6bb5\u7a0b\u5e8f\uff08\u8fde\u540c\u7f16\u8bd1\u94fe\u63a5\u751f\u6210\u7684 pack1.a\uff09\u5b58\u653e\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u4e00\u4e2a\u540d\u4e3a pack1 \u7684\u6587\u4ef6\u5939\u4e0b\u3002\u6240\u4ee5\u94fe\u63a5\u5668\u5c06\u5305\u7684\u5bf9\u8c61\u548c\u4e3b\u7a0b\u5e8f\u5bf9\u8c61\u94fe\u63a5\u5728\u4e00\u8d77\u3002 \u793a\u4f8b 9.4 pack1.go \uff1a package pack1 var Pack1Int int = 42 var pack1Float = 3.14 func ReturnStr () string { return \"Hello main!\" } \u5b83\u5305\u542b\u4e86\u4e00\u4e2a\u6574\u578b\u53d8\u91cf Pack1Int \u548c\u4e00\u4e2a\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u51fd\u6570 ReturnStr \u3002\u8fd9\u6bb5\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u4e0d\u505a\u4efb\u4f55\u7684\u4e8b\u60c5\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709\u4e00\u4e2a main \u51fd\u6570\u3002 \u5728\u4e3b\u7a0b\u5e8f package_mytest.go \u4e2d\u8fd9\u4e2a\u5305\u901a\u8fc7\u58f0\u660e\u7684\u65b9\u5f0f\u88ab\u5bfc\u5165, \u53ea\u5230\u5305\u7684\u76ee\u5f55\u4e00\u5c42\u3002 import \"./pack1\" import \u7684\u4e00\u822c\u683c\u5f0f\u5982\u4e0b: import \"\u5305\u7684\u8def\u5f84\u6216 URL \u5730\u5740\" \u4f8b\u5982\uff1a import \"github.com/org1/pack1\u201d \u8def\u5f84\u662f\u6307\u5f53\u524d\u76ee\u5f55\u7684\u76f8\u5bf9\u8def\u5f84\u3002 \u793a\u4f8b 9.5 package_mytest.go \uff1a package main import ( \"fmt\" \"./pack1\" ) func main () { var test1 string test1 = pack1 . ReturnStr () fmt . Printf ( \"ReturnStr from package1: %s\\n\" , test1 ) fmt . Printf ( \"Integer from package1: %d\\n\" , pack1 . Pack1Int ) // fmt.Printf(\"Float from package1: %f\\n\", pack1.pack1Float) } \u8f93\u51fa\u7ed3\u679c\uff1a ReturnStr from package1: Hello main! Integer from package1: 42 \u5982\u679c\u5305 pack1 \u548c\u6211\u4eec\u7684\u7a0b\u5e8f\u5728\u540c\u4e00\u8def\u5f84\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 \"import ./pack1\" \u8fd9\u6837\u7684\u65b9\u5f0f\u6765\u5f15\u5165\uff0c\u4f46\u8fd9\u4e0d\u88ab\u89c6\u4e3a\u4e00\u4e2a\u597d\u7684\u65b9\u6cd5\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u8bd5\u56fe\u8bbf\u95ee\u4e00\u4e2a\u672a\u5f15\u7528\u7684\u53d8\u91cf\u6216\u8005\u51fd\u6570\uff0c\u751a\u81f3\u6ca1\u6709\u7f16\u8bd1\u3002\u5c06\u4f1a\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\uff1a fmt . Printf ( \"Float from package1: %f\\n\" , pack1 . pack1Float ) \u9519\u8bef\uff1a cannot refer to unexported name pack1.pack1Float \u4e3b\u7a0b\u5e8f\u5229\u7528\u7684\u5305\u5fc5\u987b\u5728\u4e3b\u7a0b\u5e8f\u7f16\u5199\u4e4b\u524d\u88ab\u7f16\u8bd1\u3002\u4e3b\u7a0b\u5e8f\u4e2d\u6bcf\u4e2a pack1 \u9879\u76ee\u90fd\u8981\u901a\u8fc7\u5305\u540d\u6765\u4f7f\u7528\uff1a pack1.Item \u3002\u5177\u4f53\u4f7f\u7528\u65b9\u6cd5\u8bf7\u53c2\u89c1\u793a\u4f8b 4.6 \u548c 4.7\u3002 \u56e0\u6b64\uff0c\u6309\u7167\u60ef\u4f8b\uff0c\u5b50\u76ee\u5f55\u548c\u5305\u4e4b\u95f4\u6709\u7740\u5bc6\u5207\u7684\u8054\u7cfb\uff1a\u4e3a\u4e86\u533a\u5206\uff0c\u4e0d\u540c\u5305\u5b58\u653e\u5728\u4e0d\u540c\u7684\u76ee\u5f55\u4e0b\uff0c\u6bcf\u4e2a\u5305\uff08\u6240\u6709\u5c5e\u4e8e\u8fd9\u4e2a\u5305\u4e2d\u7684 go \u6587\u4ef6\uff09\u90fd\u5b58\u653e\u5728\u548c\u5305\u540d\u76f8\u540c\u7684\u5b50\u76ee\u5f55\u4e0b\uff1a Import with . : import . \"./pack1\" \u5f53\u4f7f\u7528 . \u4f5c\u4e3a\u5305\u7684\u522b\u540d\u65f6\uff0c\u4f60\u53ef\u4ee5\u4e0d\u901a\u8fc7\u5305\u540d\u6765\u4f7f\u7528\u5176\u4e2d\u7684\u9879\u76ee\u3002\u4f8b\u5982\uff1a test := ReturnStr() \u3002 \u5728\u5f53\u524d\u7684\u547d\u540d\u7a7a\u95f4\u5bfc\u5165 pack1 \u5305\uff0c\u4e00\u822c\u662f\u4e3a\u4e86\u5177\u6709\u66f4\u597d\u7684\u6d4b\u8bd5\u6548\u679c\u3002 Import with _ : import _ \"./pack1/pack1\" pack1 \u5305\u53ea\u5bfc\u5165\u5176\u526f\u4f5c\u7528\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u6267\u884c\u5b83\u7684 init() \u51fd\u6570\u5e76\u521d\u59cb\u5316\u5176\u4e2d\u7684\u5168\u5c40\u53d8\u91cf\u3002 \u5bfc\u5165\u5916\u90e8\u5b89\u88c5\u5305: \u5982\u679c\u4f60\u8981\u5728\u4f60\u7684\u5e94\u7528\u4e2d\u4f7f\u7528\u4e00\u4e2a\u6216\u591a\u4e2a\u5916\u90e8\u5305\uff0c\u9996\u5148\u4f60\u5fc5\u987b\u4f7f\u7528 go install \uff08\u53c2\u89c1 \u7b2c 9.7 \u8282 \uff09\u5728\u4f60\u7684\u672c\u5730\u673a\u5668\u4e0a\u5b89\u88c5\u5b83\u4eec\u3002 \u5047\u8bbe\u4f60\u60f3\u4f7f\u7528 http://codesite.ext/author/goExample/goex \u8fd9\u79cd\u6258\u7ba1\u5728 Google Code\u3001GitHub \u548c Launchpad \u7b49\u4ee3\u7801\u7f51\u7ad9\u4e0a\u7684\u5305\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u5b89\u88c5\uff1a go install codesite.ext/author/goExample/goex \u5c06\u4e00\u4e2a\u540d\u4e3a codesite.ext/author/goExample/goex \u7684 map \u5b89\u88c5\u5728 $GOROOT/src/ \u76ee\u5f55\u4e0b\u3002 \u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\uff0c\u4e00\u6b21\u6027\u5b89\u88c5\uff0c\u5e76\u5bfc\u5165\u5230\u4f60\u7684\u4ee3\u7801\u4e2d\uff1a import goex \"codesite.ext/author/goExample/goex\" \u56e0\u6b64\u8be5\u5305\u7684 URL \u5c06\u7528\u4f5c\u5bfc\u5165\u8def\u5f84\u3002 \u5728 http://golang.org/cmd/goinstall/ \u7684 go install \u6587\u6863\u4e2d\u5217\u51fa\u4e86\u4e00\u4e9b\u5e7f\u6cdb\u88ab\u4f7f\u7528\u7684\u6258\u7ba1\u5728\u7f51\u7edc\u4ee3\u7801\u4ed3\u5e93\u7684\u5305\u7684\u5bfc\u5165\u8def\u5f84 \u5305\u7684\u521d\u59cb\u5316: \u7a0b\u5e8f\u7684\u6267\u884c\u5f00\u59cb\u4e8e\u5bfc\u5165\u5305\uff0c\u521d\u59cb\u5316 main \u5305\u7136\u540e\u8c03\u7528 main() \u51fd\u6570\u3002 \u4e00\u4e2a\u6ca1\u6709\u5bfc\u5165\u7684\u5305\u5c06\u901a\u8fc7\u5206\u914d\u521d\u59cb\u503c\u7ed9\u6240\u6709\u7684\u5305\u7ea7\u53d8\u91cf\u548c\u8c03\u7528\u6e90\u7801\u4e2d\u5b9a\u4e49\u7684\u5305\u7ea7 init() \u51fd\u6570\u6765\u521d\u59cb\u5316\u3002\u4e00\u4e2a\u5305\u53ef\u80fd\u6709\u591a\u4e2a init() \u51fd\u6570\u751a\u81f3\u5728\u4e00\u4e2a\u6e90\u7801\u6587\u4ef6\u4e2d\u3002\u5b83\u4eec\u7684\u6267\u884c\u662f\u65e0\u5e8f\u7684\u3002\u8fd9\u662f\u6700\u597d\u7684\u4f8b\u5b50\u6765\u6d4b\u5b9a\u5305\u7684\u503c\u662f\u5426\u53ea\u4f9d\u8d56\u4e8e\u76f8\u540c\u5305\u4e0b\u7684\u5176\u4ed6\u503c\u6216\u8005\u51fd\u6570\u3002 init() \u51fd\u6570\u662f\u4e0d\u80fd\u88ab\u8c03\u7528\u7684\u3002 \u5bfc\u5165\u7684\u5305\u5728\u5305\u81ea\u8eab\u521d\u59cb\u5316\u524d\u88ab\u521d\u59cb\u5316\uff0c\u800c\u4e00\u4e2a\u5305\u5728\u7a0b\u5e8f\u6267\u884c\u4e2d\u53ea\u80fd\u521d\u59cb\u5316\u4e00\u6b21\u3002 \u7f16\u8bd1\u5e76\u5b89\u88c5\u4e00\u4e2a\u5305\uff08\u53c2\u89c1 \u7b2c 9.7 \u8282 \uff09\uff1a \u5728 Linux/OS X \u4e0b\u53ef\u4ee5\u7528\u7c7b\u4f3c \u7b2c 3.9 \u8282 \u7684 Makefile \u811a\u672c\u505a\u5230\u8fd9\u4e00\u70b9\uff1a include $(GOROOT)/src/Make.inc TARG=pack1 GOFILES=\\ pack1.go\\ pack1b.go\\ include $(GOROOT)/src/Make.pkg \u901a\u8fc7 chmod 777 ./Makefile \u786e\u4fdd\u5b83\u7684\u53ef\u6267\u884c\u6027\u3002 \u4e0a\u9762\u811a\u672c\u5185\u7684 include \u8bed\u53e5\u5f15\u5165\u4e86\u76f8\u5e94\u7684\u529f\u80fd\uff0c\u5c06\u81ea\u52a8\u68c0\u6d4b\u673a\u5668\u7684\u67b6\u6784\u5e76\u8c03\u7528\u6b63\u786e\u7684\u7f16\u8bd1\u5668\u548c\u94fe\u63a5\u5668\u3002 \u7136\u540e\u7ec8\u7aef\u6267\u884c make \u6216 gomake \u5de5\u5177\uff1a\u4ed6\u4eec\u90fd\u4f1a\u751f\u6210\u4e00\u4e2a\u5305\u542b\u9759\u6001\u5e93 pack1.a \u7684 _obj \u76ee\u5f55\u3002 go install\uff08\u53c2\u89c1 \u7b2c 9.7 \u8282 \uff0c\u4ece Go1 \u7684\u9996\u9009\u65b9\u5f0f\uff09\u540c\u6837\u590d\u5236 pack1.a \u5230\u672c\u5730\u7684 $GOROOT/pkg \u7684\u76ee\u5f55\u4e2d\u4e00\u4e2a\u4ee5\u64cd\u4f5c\u7cfb\u7edf\u4e3a\u540d\u7684\u5b50\u76ee\u5f55\u4e0b\u3002\u50cf import \"pack1\" \u4ee3\u66ff import \"path to pack1\" \uff0c\u8fd9\u6837\u53ea\u901a\u8fc7\u540d\u5b57\u5c31\u53ef\u4ee5\u5c06\u5305\u5728\u7a0b\u5e8f\u4e2d\u5bfc\u5165\u3002 \u5f53 \u7b2c 13 \u7ae0 \u6211\u4eec\u9047\u5230\u4f7f\u7528\u6d4b\u8bd5\u5de5\u5177\u8fdb\u884c\u6d4b\u8bd5\u7684\u65f6\u5019\u6211\u4eec\u5c06\u91cd\u65b0\u56de\u5230\u81ea\u5df1\u7684\u5305\u7684\u5236\u4f5c\u548c\u7f16\u8bd1\u8fd9\u4e2a\u8bdd\u9898\u3002 \u95ee\u9898 9.1 a\uff09\u4e00\u4e2a\u5305\u80fd\u5206\u6210\u591a\u4e2a\u6e90\u6587\u4ef6\u4e48\uff1f b\uff09\u4e00\u4e2a\u6e90\u6587\u4ef6\u662f\u5426\u80fd\u5305\u542b\u591a\u4e2a\u5305\uff1f \u7ec3\u4e60 9.3 main_greetings.go \u521b\u5efa\u4e00\u4e2a\u7a0b\u5e8f main_greetings.go \u80fd\u591f\u548c\u7528\u6237\u8bf4 \"Good Day\" \u6216\u8005 \"Good Night\" \u3002\u4e0d\u540c\u7684\u95ee\u5019\u5e94\u8be5\u653e\u5230\u5355\u72ec\u7684 greetings \u5305\u4e2d\u3002 \u5728\u540c\u4e00\u4e2a\u5305\u4e2d\u521b\u5efa\u4e00\u4e2a IsAM \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\u7528\u6765\u5224\u65ad\u5f53\u524d\u65f6\u95f4\u662f AM \u8fd8\u662f PM\uff0c\u540c\u6837\u521b\u5efa IsAfternoon \u548c IsEvening \u51fd\u6570\u3002 \u4f7f\u7528 main_greetings \u4f5c\u51fa\u5408\u9002\u7684\u95ee\u5019\uff08\u63d0\u793a\uff1a\u4f7f\u7528 time \u5305\uff09\u3002 \u7ec3\u4e60 9.4 \u521b\u5efa\u4e00\u4e2a\u7a0b\u5e8f main_oddven.go \u5224\u65ad\u524d 100 \u4e2a\u6574\u6570\u662f\u4e0d\u662f\u5076\u6570\uff0c\u5c06\u5224\u65ad\u6240\u7528\u7684\u51fd\u6570\u7f16\u5199\u5728 even \u5305\u91cc\u3002 \u7ec3\u4e60 9.5 \u4f7f\u7528 \u7b2c 6.6 \u8282 \u7684\u6590\u6ce2\u90a3\u5951\u7a0b\u5e8f\uff1a 1\uff09\u5c06\u6590\u6ce2\u90a3\u5951\u529f\u80fd\u653e\u5165\u81ea\u5df1\u7684 fibo \u5305\u4e2d\u5e76\u901a\u8fc7\u4e3b\u7a0b\u5e8f\u8c03\u7528\u5b83\uff0c\u5b58\u50a8\u6700\u540e\u8f93\u5165\u7684\u503c\u5728\u51fd\u6570\u7684\u5168\u5c40\u53d8\u91cf\u3002 2\uff09\u6269\u5c55 fibo \u5305\u5c06\u901a\u8fc7\u8c03\u7528\u6590\u6ce2\u90a3\u5951\u7684\u65f6\u5019\uff0c\u64cd\u4f5c\u4e5f\u4f5c\u4e3a\u4e00\u4e2a\u53c2\u6570\u3002\u5b9e\u9a8c \"+\" \u548c \"*\" main_fibo.go / fibonacci.go","title":"9.5 \u81ea\u5b9a\u4e49\u5305\u548c\u53ef\u89c1\u6027"},{"location":"09.5/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7cbe\u5bc6\u8ba1\u7b97\u548c big \u5305 \u4e0b\u4e00\u8282\uff1a \u4e3a\u81ea\u5b9a\u4e49\u5305\u4f7f\u7528 godoc","title":"\u94fe\u63a5"},{"location":"09.6/","text":"9.6 \u4e3a\u81ea\u5b9a\u4e49\u5305\u4f7f\u7528 godoc \u00b6 godoc \u5de5\u5177\uff08 \u7b2c 3.6 \u8282 \uff09\u5728\u663e\u793a\u81ea\u5b9a\u4e49\u5305\u4e2d\u7684\u6ce8\u91ca\u4e5f\u6709\u5f88\u597d\u7684\u6548\u679c\uff1a\u6ce8\u91ca\u5fc5\u987b\u4ee5 // \u5f00\u59cb\u5e76\u65e0\u7a7a\u884c\u653e\u5728\u58f0\u660e\uff08\u5305\uff0c\u7c7b\u578b\uff0c\u51fd\u6570\uff09\u524d\u3002godoc \u4f1a\u4e3a\u6bcf\u4e2a\u6587\u4ef6\u751f\u6210\u4e00\u7cfb\u5217\u7684\u7f51\u9875\u3002 \u4f8b\u5982\uff1a \u5728 doc_examples \u76ee\u5f55\u4e0b\u6211\u4eec\u6709 \u7b2c 11.7 \u8282 \u4e2d\u7684\u7528\u6765\u6392\u5e8f\u7684 go \u6587\u4ef6\uff0c\u6587\u4ef6\u4e2d\u6709\u4e00\u4e9b\u6ce8\u91ca\uff08\u6587\u4ef6\u9700\u8981\u672a\u7f16\u8bd1\uff09 \u547d\u4ee4\u884c\u4e0b\u8fdb\u5165\u76ee\u5f55\u4e0b\u5e76\u8f93\u5165\u547d\u4ee4\uff1a godoc -http=:6060 -goroot=\".\" \uff08 . \u662f\u6307\u5f53\u524d\u76ee\u5f55\uff0c -goroot \u53c2\u6570\u53ef\u4ee5\u662f /path/to/my/package1 \u8fd9\u6837\u7684\u5f62\u5f0f\u6307\u51fa package1 \u5728\u4f60\u6e90\u7801\u4e2d\u7684\u4f4d\u7f6e\u6216\u63a5\u53d7\u7528\u5192\u53f7\u5f62\u5f0f\u5206\u9694\u7684\u8def\u5f84\uff0c\u65e0\u6839\u76ee\u5f55\u7684\u8def\u5f84\u4e3a\u76f8\u5bf9\u4e8e\u5f53\u524d\u76ee\u5f55\u7684\u76f8\u5bf9\u8def\u5f84\uff09 \u5728\u6d4f\u89c8\u5668\u6253\u5f00\u5730\u5740\uff1a http://localhost:6060 \u7136\u540e\u4f60\u4f1a\u770b\u5230\u672c\u5730\u7684 godoc \u9875\u9762\uff08\u8be6\u89c1 \u7b2c 3.6 \u8282 \uff09\u4ece\u5de6\u5230\u53f3\u4e00\u6b21\u663e\u793a\u51fa\u76ee\u5f55\u4e2d\u7684\u5305\uff1a doc_example: doc_example | Packages | Commands | Specification \u4e0b\u9762\u662f\u94fe\u63a5\u5230\u6e90\u7801\u548c\u6240\u6709\u5bf9\u8c61\u65f6\u6709\u5e8f\u6982\u8ff0\uff08\u6240\u4ee5\u662f\u5f88\u597d\u7684\u6d4f\u89c8\u548c\u67e5\u627e\u6e90\u4ee3\u7801\u7684\u65b9\u5f0f\uff09\uff0c\u8fde\u540c\u6587\u4ef6/\u6ce8\u91ca\uff1a sort \u5305 func Float64sAreSorted type IntArray func IntsAreSortedfunc IsSortedfunc Sort func ( IntArray ) Len func SortFloat64s func ( IntArray ) Less func SortInts func ( IntArray ) Swap func SortStrings type Interface func StringsAreSorted type StringArray type Float64Array func ( StringArray ) Len func ( Float64Array ) Len func ( StringArray ) Less func ( Float64Array ) Less func ( StringArray ) Swap func ( Float64Array ) Swap // Other packages import \"doc_example\" \u4f7f\u7528\u901a\u7528\u7684\u63a5\u53e3\u6392\u5e8f: func Float64sAreSorted[Top] func Float64sAreSorted(a []float64) bool func IntsAreSorted[Top] func IntsAreSorted(a []int) bool func IsSorted[Top] func IsSorted(data Interface) bool Test if data is sorted func Sort[Top] func Sort(data Interface) General sort function func SortInts[Top] func SortInts(a []int) Convenience wrappers for common cases: type IntArray[Top] Convenience types for common cases: IntArray type IntArray []int \u5982\u679c\u4f60\u5728\u4e00\u4e2a\u56e2\u961f\u4e2d\u5de5\u4f5c\uff0c\u5e76\u4e14\u6e90\u4ee3\u7801\u6811\u88ab\u5b58\u50a8\u5728\u7f51\u7edc\u786c\u76d8\u4e0a\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528 godoc \u7ed9\u6240\u6709\u56e2\u961f\u6210\u5458\u8fde\u7eed\u6587\u6863\u7684\u652f\u6301\u3002\u901a\u8fc7\u8bbe\u7f6e sync_minutes=n \uff0c\u4f60\u751a\u81f3\u53ef\u4ee5\u8ba9\u5b83\u6bcf n \u5206\u949f\u81ea\u52a8\u66f4\u65b0\u60a8\u7684\u6587\u6863\uff01 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u81ea\u5b9a\u4e49\u5305\u548c\u53ef\u89c1\u6027 \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528 go install \u5b89\u88c5\u81ea\u5b9a\u4e49\u5305","title":"9.6 \u4e3a\u81ea\u5b9a\u4e49\u5305\u4f7f\u7528 godoc"},{"location":"09.6/#96-godoc","text":"godoc \u5de5\u5177\uff08 \u7b2c 3.6 \u8282 \uff09\u5728\u663e\u793a\u81ea\u5b9a\u4e49\u5305\u4e2d\u7684\u6ce8\u91ca\u4e5f\u6709\u5f88\u597d\u7684\u6548\u679c\uff1a\u6ce8\u91ca\u5fc5\u987b\u4ee5 // \u5f00\u59cb\u5e76\u65e0\u7a7a\u884c\u653e\u5728\u58f0\u660e\uff08\u5305\uff0c\u7c7b\u578b\uff0c\u51fd\u6570\uff09\u524d\u3002godoc \u4f1a\u4e3a\u6bcf\u4e2a\u6587\u4ef6\u751f\u6210\u4e00\u7cfb\u5217\u7684\u7f51\u9875\u3002 \u4f8b\u5982\uff1a \u5728 doc_examples \u76ee\u5f55\u4e0b\u6211\u4eec\u6709 \u7b2c 11.7 \u8282 \u4e2d\u7684\u7528\u6765\u6392\u5e8f\u7684 go \u6587\u4ef6\uff0c\u6587\u4ef6\u4e2d\u6709\u4e00\u4e9b\u6ce8\u91ca\uff08\u6587\u4ef6\u9700\u8981\u672a\u7f16\u8bd1\uff09 \u547d\u4ee4\u884c\u4e0b\u8fdb\u5165\u76ee\u5f55\u4e0b\u5e76\u8f93\u5165\u547d\u4ee4\uff1a godoc -http=:6060 -goroot=\".\" \uff08 . \u662f\u6307\u5f53\u524d\u76ee\u5f55\uff0c -goroot \u53c2\u6570\u53ef\u4ee5\u662f /path/to/my/package1 \u8fd9\u6837\u7684\u5f62\u5f0f\u6307\u51fa package1 \u5728\u4f60\u6e90\u7801\u4e2d\u7684\u4f4d\u7f6e\u6216\u63a5\u53d7\u7528\u5192\u53f7\u5f62\u5f0f\u5206\u9694\u7684\u8def\u5f84\uff0c\u65e0\u6839\u76ee\u5f55\u7684\u8def\u5f84\u4e3a\u76f8\u5bf9\u4e8e\u5f53\u524d\u76ee\u5f55\u7684\u76f8\u5bf9\u8def\u5f84\uff09 \u5728\u6d4f\u89c8\u5668\u6253\u5f00\u5730\u5740\uff1a http://localhost:6060 \u7136\u540e\u4f60\u4f1a\u770b\u5230\u672c\u5730\u7684 godoc \u9875\u9762\uff08\u8be6\u89c1 \u7b2c 3.6 \u8282 \uff09\u4ece\u5de6\u5230\u53f3\u4e00\u6b21\u663e\u793a\u51fa\u76ee\u5f55\u4e2d\u7684\u5305\uff1a doc_example: doc_example | Packages | Commands | Specification \u4e0b\u9762\u662f\u94fe\u63a5\u5230\u6e90\u7801\u548c\u6240\u6709\u5bf9\u8c61\u65f6\u6709\u5e8f\u6982\u8ff0\uff08\u6240\u4ee5\u662f\u5f88\u597d\u7684\u6d4f\u89c8\u548c\u67e5\u627e\u6e90\u4ee3\u7801\u7684\u65b9\u5f0f\uff09\uff0c\u8fde\u540c\u6587\u4ef6/\u6ce8\u91ca\uff1a sort \u5305 func Float64sAreSorted type IntArray func IntsAreSortedfunc IsSortedfunc Sort func ( IntArray ) Len func SortFloat64s func ( IntArray ) Less func SortInts func ( IntArray ) Swap func SortStrings type Interface func StringsAreSorted type StringArray type Float64Array func ( StringArray ) Len func ( Float64Array ) Len func ( StringArray ) Less func ( Float64Array ) Less func ( StringArray ) Swap func ( Float64Array ) Swap // Other packages import \"doc_example\" \u4f7f\u7528\u901a\u7528\u7684\u63a5\u53e3\u6392\u5e8f: func Float64sAreSorted[Top] func Float64sAreSorted(a []float64) bool func IntsAreSorted[Top] func IntsAreSorted(a []int) bool func IsSorted[Top] func IsSorted(data Interface) bool Test if data is sorted func Sort[Top] func Sort(data Interface) General sort function func SortInts[Top] func SortInts(a []int) Convenience wrappers for common cases: type IntArray[Top] Convenience types for common cases: IntArray type IntArray []int \u5982\u679c\u4f60\u5728\u4e00\u4e2a\u56e2\u961f\u4e2d\u5de5\u4f5c\uff0c\u5e76\u4e14\u6e90\u4ee3\u7801\u6811\u88ab\u5b58\u50a8\u5728\u7f51\u7edc\u786c\u76d8\u4e0a\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528 godoc \u7ed9\u6240\u6709\u56e2\u961f\u6210\u5458\u8fde\u7eed\u6587\u6863\u7684\u652f\u6301\u3002\u901a\u8fc7\u8bbe\u7f6e sync_minutes=n \uff0c\u4f60\u751a\u81f3\u53ef\u4ee5\u8ba9\u5b83\u6bcf n \u5206\u949f\u81ea\u52a8\u66f4\u65b0\u60a8\u7684\u6587\u6863\uff01","title":"9.6 \u4e3a\u81ea\u5b9a\u4e49\u5305\u4f7f\u7528 godoc"},{"location":"09.6/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u81ea\u5b9a\u4e49\u5305\u548c\u53ef\u89c1\u6027 \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528 go install \u5b89\u88c5\u81ea\u5b9a\u4e49\u5305","title":"\u94fe\u63a5"},{"location":"09.7/","text":"9.7 \u4f7f\u7528 go install \u5b89\u88c5\u81ea\u5b9a\u4e49\u5305 \u00b6 go install \u662f Go \u4e2d\u81ea\u52a8\u5305\u5b89\u88c5\u5de5\u5177\uff1a\u5982\u9700\u8981\u5c06\u5305\u5b89\u88c5\u5230\u672c\u5730\u5b83\u4f1a\u4ece\u8fdc\u7aef\u4ed3\u5e93\u4e0b\u8f7d\u5305\uff1a\u68c0\u51fa\u3001\u7f16\u8bd1\u548c\u5b89\u88c5\u4e00\u6c14\u5475\u6210\u3002 \u5728\u5305\u5b89\u88c5\u524d\u7684\u5148\u51b3\u6761\u4ef6\u662f\u8981\u81ea\u52a8\u5904\u7406\u5305\u81ea\u8eab\u4f9d\u8d56\u5173\u7cfb\u7684\u5b89\u88c5\u3002\u88ab\u4f9d\u8d56\u7684\u5305\u4e5f\u4f1a\u5b89\u88c5\u5230\u5b50\u76ee\u5f55\u4e0b\uff0c\u4f46\u662f\u6ca1\u6709\u6587\u6863\u548c\u793a\u4f8b\uff1a\u53ef\u4ee5\u5230\u7f51\u4e0a\u6d4f\u89c8\u3002 go install \u4f7f\u7528\u4e86 GOPATH \u53d8\u91cf\uff08\u8be6\u89c1 \u7b2c 2.2 \u8282 \uff09\u3002 \u8fdc\u7aef\u5305\uff08\u8be6\u89c1 \u7b2c 9.5 \u8282 \uff09\uff1a \u5047\u8bbe\u6211\u4eec\u8981\u5b89\u88c5\u4e00\u4e2a\u6709\u8da3\u7684\u5305 tideland \uff08\u5b83\u5305\u542b\u4e86\u8bb8\u591a\u5e2e\u52a9\u793a\u4f8b\uff0c\u53c2\u89c1 \u9879\u76ee\u4e3b\u9875 \uff09\u3002 \u56e0\u4e3a\u6211\u4eec\u9700\u8981\u521b\u5efa\u76ee\u5f55\u5728 Go \u5b89\u88c5\u76ee\u5f55\u4e0b\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4f7f\u7528 root \u6216\u8005 su \u7684\u8eab\u4efd\u6267\u884c\u547d\u4ee4\u3002 \u786e\u4fdd Go \u73af\u5883\u53d8\u91cf\u5df2\u7ecf\u8bbe\u7f6e\u5728 root \u7528\u6237\u4e0b\u7684 ./bashrc \u6587\u4ef6\u4e2d\u3002 \u4f7f\u7528\u547d\u4ee4\u5b89\u88c5\uff1a go install tideland-cgl.googlecode.com/hg \u3002 \u53ef\u6267\u884c\u6587\u4ef6 hg.a \u5c06\u88ab\u653e\u5230 $GOROOT/pkg/linux_amd64/tideland-cgl.googlecode.com \u76ee\u5f55\u4e0b\uff0c\u6e90\u7801\u6587\u4ef6\u88ab\u653e\u7f6e\u5728 $GOROOT/src/tideland-cgl.googlecode.com/hg \u76ee\u5f55\u4e0b\uff0c\u540c\u6837\u6709\u4e2a hg.a \u653e\u7f6e\u5728 _obj \u7684\u5b50\u76ee\u5f55\u4e0b\u3002 \u73b0\u5728\u5c31\u53ef\u4ee5\u5728 go \u4ee3\u7801\u4e2d\u4f7f\u7528\u8fd9\u4e2a\u5305\u4e2d\u7684\u529f\u80fd\u4e86\uff0c\u4f8b\u5982\u4f7f\u7528\u5305\u540d cgl \u5bfc\u5165\uff1a import cgl \"tideland-cgl.googlecode.com/hg\" \u4ece Go1 \u8d77 go install \u5b89\u88c5 Google Code \u7684\u5bfc\u5165\u8def\u5f84\u5f62\u5f0f\u662f\uff1a \"code.google.com/p/tideland-cgl\" \u5347\u7ea7\u5230\u65b0\u7684\u7248\u672c\uff1a \u66f4\u65b0\u5230\u65b0\u7248\u672c\u7684 Go \u4e4b\u540e\u672c\u5730\u5b89\u88c5\u5305\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u5c06\u5168\u88ab\u5220\u9664\u3002\u5982\u679c\u4f60\u60f3\u66f4\u65b0\uff0c\u91cd\u7f16\u8bd1\u3001\u91cd\u5b89\u88c5\u6240\u6709\u7684 go \u5b89\u88c5\u5305\u53ef\u4ee5\u4f7f\u7528\uff1a go install -a \u3002 go \u7684\u7248\u672c\u53d1\u5e03\u7684\u5f88\u9891\u7e41\uff0c\u6240\u4ee5\u9700\u8981\u6ce8\u610f\u53d1\u5e03\u7248\u672c\u548c\u5305\u7684\u517c\u5bb9\u6027\u3002go1 \u4e4b\u540e\u90fd\u662f\u81ea\u5df1\u7f16\u8bd1\u81ea\u5df1\u4e86\u3002 go install \u540c\u6837\u53ef\u4ee5\u4f7f\u7528 go install \u7f16\u8bd1\u94fe\u63a5\u5e76\u5b89\u88c5\u672c\u5730\u81ea\u5df1\u7684\u5305\uff08\u8be6\u89c1 \u7b2c 9.8.2 \u8282 \uff09\u3002 \u66f4\u591a\u4fe1\u606f\u53ef\u4ee5\u5728 \u5b98\u65b9\u7f51\u7ad9 \u627e\u5230\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4e3a\u81ea\u5b9a\u4e49\u5305\u4f7f\u7528 godoc \u4e0b\u4e00\u8282\uff1a \u81ea\u5b9a\u4e49\u5305\u7684\u76ee\u5f55\u7ed3\u6784\u3001go install \u548c go test","title":"9.7 \u4f7f\u7528 go install \u5b89\u88c5\u81ea\u5b9a\u4e49\u5305"},{"location":"09.7/#97-go-install","text":"go install \u662f Go \u4e2d\u81ea\u52a8\u5305\u5b89\u88c5\u5de5\u5177\uff1a\u5982\u9700\u8981\u5c06\u5305\u5b89\u88c5\u5230\u672c\u5730\u5b83\u4f1a\u4ece\u8fdc\u7aef\u4ed3\u5e93\u4e0b\u8f7d\u5305\uff1a\u68c0\u51fa\u3001\u7f16\u8bd1\u548c\u5b89\u88c5\u4e00\u6c14\u5475\u6210\u3002 \u5728\u5305\u5b89\u88c5\u524d\u7684\u5148\u51b3\u6761\u4ef6\u662f\u8981\u81ea\u52a8\u5904\u7406\u5305\u81ea\u8eab\u4f9d\u8d56\u5173\u7cfb\u7684\u5b89\u88c5\u3002\u88ab\u4f9d\u8d56\u7684\u5305\u4e5f\u4f1a\u5b89\u88c5\u5230\u5b50\u76ee\u5f55\u4e0b\uff0c\u4f46\u662f\u6ca1\u6709\u6587\u6863\u548c\u793a\u4f8b\uff1a\u53ef\u4ee5\u5230\u7f51\u4e0a\u6d4f\u89c8\u3002 go install \u4f7f\u7528\u4e86 GOPATH \u53d8\u91cf\uff08\u8be6\u89c1 \u7b2c 2.2 \u8282 \uff09\u3002 \u8fdc\u7aef\u5305\uff08\u8be6\u89c1 \u7b2c 9.5 \u8282 \uff09\uff1a \u5047\u8bbe\u6211\u4eec\u8981\u5b89\u88c5\u4e00\u4e2a\u6709\u8da3\u7684\u5305 tideland \uff08\u5b83\u5305\u542b\u4e86\u8bb8\u591a\u5e2e\u52a9\u793a\u4f8b\uff0c\u53c2\u89c1 \u9879\u76ee\u4e3b\u9875 \uff09\u3002 \u56e0\u4e3a\u6211\u4eec\u9700\u8981\u521b\u5efa\u76ee\u5f55\u5728 Go \u5b89\u88c5\u76ee\u5f55\u4e0b\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4f7f\u7528 root \u6216\u8005 su \u7684\u8eab\u4efd\u6267\u884c\u547d\u4ee4\u3002 \u786e\u4fdd Go \u73af\u5883\u53d8\u91cf\u5df2\u7ecf\u8bbe\u7f6e\u5728 root \u7528\u6237\u4e0b\u7684 ./bashrc \u6587\u4ef6\u4e2d\u3002 \u4f7f\u7528\u547d\u4ee4\u5b89\u88c5\uff1a go install tideland-cgl.googlecode.com/hg \u3002 \u53ef\u6267\u884c\u6587\u4ef6 hg.a \u5c06\u88ab\u653e\u5230 $GOROOT/pkg/linux_amd64/tideland-cgl.googlecode.com \u76ee\u5f55\u4e0b\uff0c\u6e90\u7801\u6587\u4ef6\u88ab\u653e\u7f6e\u5728 $GOROOT/src/tideland-cgl.googlecode.com/hg \u76ee\u5f55\u4e0b\uff0c\u540c\u6837\u6709\u4e2a hg.a \u653e\u7f6e\u5728 _obj \u7684\u5b50\u76ee\u5f55\u4e0b\u3002 \u73b0\u5728\u5c31\u53ef\u4ee5\u5728 go \u4ee3\u7801\u4e2d\u4f7f\u7528\u8fd9\u4e2a\u5305\u4e2d\u7684\u529f\u80fd\u4e86\uff0c\u4f8b\u5982\u4f7f\u7528\u5305\u540d cgl \u5bfc\u5165\uff1a import cgl \"tideland-cgl.googlecode.com/hg\" \u4ece Go1 \u8d77 go install \u5b89\u88c5 Google Code \u7684\u5bfc\u5165\u8def\u5f84\u5f62\u5f0f\u662f\uff1a \"code.google.com/p/tideland-cgl\" \u5347\u7ea7\u5230\u65b0\u7684\u7248\u672c\uff1a \u66f4\u65b0\u5230\u65b0\u7248\u672c\u7684 Go \u4e4b\u540e\u672c\u5730\u5b89\u88c5\u5305\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u5c06\u5168\u88ab\u5220\u9664\u3002\u5982\u679c\u4f60\u60f3\u66f4\u65b0\uff0c\u91cd\u7f16\u8bd1\u3001\u91cd\u5b89\u88c5\u6240\u6709\u7684 go \u5b89\u88c5\u5305\u53ef\u4ee5\u4f7f\u7528\uff1a go install -a \u3002 go \u7684\u7248\u672c\u53d1\u5e03\u7684\u5f88\u9891\u7e41\uff0c\u6240\u4ee5\u9700\u8981\u6ce8\u610f\u53d1\u5e03\u7248\u672c\u548c\u5305\u7684\u517c\u5bb9\u6027\u3002go1 \u4e4b\u540e\u90fd\u662f\u81ea\u5df1\u7f16\u8bd1\u81ea\u5df1\u4e86\u3002 go install \u540c\u6837\u53ef\u4ee5\u4f7f\u7528 go install \u7f16\u8bd1\u94fe\u63a5\u5e76\u5b89\u88c5\u672c\u5730\u81ea\u5df1\u7684\u5305\uff08\u8be6\u89c1 \u7b2c 9.8.2 \u8282 \uff09\u3002 \u66f4\u591a\u4fe1\u606f\u53ef\u4ee5\u5728 \u5b98\u65b9\u7f51\u7ad9 \u627e\u5230\u3002","title":"9.7 \u4f7f\u7528 go install \u5b89\u88c5\u81ea\u5b9a\u4e49\u5305"},{"location":"09.7/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4e3a\u81ea\u5b9a\u4e49\u5305\u4f7f\u7528 godoc \u4e0b\u4e00\u8282\uff1a \u81ea\u5b9a\u4e49\u5305\u7684\u76ee\u5f55\u7ed3\u6784\u3001go install \u548c go test","title":"\u94fe\u63a5"},{"location":"09.8/","text":"9.8 \u81ea\u5b9a\u4e49\u5305\u7684\u76ee\u5f55\u7ed3\u6784\u3001go install \u548c go test \u00b6 \u4e3a\u4e86\u793a\u8303\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u540d\u4e3a uc \u7684\u7b80\u5355\u5305\uff0c\u5b83\u542b\u6709\u4e00\u4e2a UpperCase \u51fd\u6570\u5c06\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5927\u5199\u3002\u5f53\u7136\u8fd9\u5e76\u4e0d\u503c\u5f97\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5305\uff0c\u540c\u6837\u7684\u529f\u80fd\u5df2\u88ab\u5305\u542b\u5728 strings \u5305\u91cc\uff0c\u4f46\u662f\u540c\u6837\u7684\u6280\u5de7\u4e5f\u53ef\u4ee5\u5e94\u7528\u5728\u66f4\u590d\u6742\u7684\u5305\u4e2d\u3002 9.8.1 \u81ea\u5b9a\u4e49\u5305\u7684\u76ee\u5f55\u7ed3\u6784 \u00b6 \u4e0b\u9762\u7684\u7ed3\u6784\u7ed9\u4e86\u4f60\u4e00\u4e2a\u597d\u7684\u793a\u8303\uff08 uc \u4ee3\u8868\u901a\u7528\u5305\u540d, \u540d\u5b57\u4e3a\u7c97\u4f53\u7684\u4ee3\u8868\u76ee\u5f55\uff0c\u659c\u4f53\u4ee3\u8868\u53ef\u6267\u884c\u6587\u4ef6\uff09: /home/user/goprograms ucmain.go (uc \u5305\u4e3b\u7a0b\u5e8f) Makefile (ucmain \u7684 makefile) ucmain src/uc (\u5305\u542b uc \u5305\u7684 go \u6e90\u7801) uc.go uc_test.go Makefile (\u5305\u7684 makefile) uc.a _obj uc.a _test uc.a bin (\u5305\u542b\u6700\u7ec8\u7684\u6267\u884c\u6587\u4ef6) ucmain pkg/linux_amd64 uc.a (\u5305\u7684\u76ee\u6807\u6587\u4ef6) \u5c06\u4f60\u7684\u9879\u76ee\u653e\u5728 goprograms \u76ee\u5f55\u4e0b(\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u73af\u5883\u53d8\u91cf GOPATH \uff0c\u8be6\u89c1\u7b2c 2.2 / 3 \u7ae0\u8282\uff1a\u5728 .profile \u548c .bashrc \u6587\u4ef6\u4e2d\u6dfb\u52a0 export GOPATH=/home/user/goprograms )\uff0c\u800c\u4f60\u7684\u9879\u76ee\u5c06\u4f5c\u4e3a src \u7684\u5b50\u76ee\u5f55\u3002 uc \u5305\u4e2d\u7684\u529f\u80fd\u5728 uc.go \u4e2d\u5b9e\u73b0\u3002 \u793a\u4f8b 9.6 uc.go \uff1a package uc import \"strings\" func UpperCase ( str string ) string { return strings . ToUpper ( str ) } \u5305\u901a\u5e38\u9644\u5e26\u4e00\u4e2a\u6216\u591a\u4e2a\u6d4b\u8bd5\u6587\u4ef6\uff0c\u5728\u8fd9\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a uc_test.go \u6587\u4ef6\uff0c\u5982 \u7b2c 9.8 \u8282 \u6240\u8ff0\u3002 \u793a\u4f8b 9.7 test.go package uc import \"testing\" type ucTest struct { in , out string } var ucTests = [] ucTest { ucTest { \"abc\" , \"ABC\" }, ucTest { \"cvo-az\" , \"CVO-AZ\" }, ucTest { \"Antwerp\" , \"ANTWERP\" }, } func TestUC ( t * testing . T ) { for _ , ut := range ucTests { uc := UpperCase ( ut . in ) if uc != ut . out { t . Errorf ( \"UpperCase(%s) = %s, must be %s\" , ut . in , uc , ut . out ) } } } \u901a\u8fc7\u6307\u4ee4\u7f16\u8bd1\u5e76\u5b89\u88c5\u5305\u5230\u672c\u5730\uff1a go install uc , \u8fd9\u4f1a\u5c06 uc.a \u590d\u5236\u5230 pkg/linux_amd64 \u4e0b\u9762\u3002 \u53e6\u5916\uff0c\u4f7f\u7528 make \uff0c\u901a\u8fc7\u4ee5\u4e0b\u5185\u5bb9\u521b\u5efa\u4e00\u4e2a\u5305\u7684 Makefile \u5728 src/uc \u76ee\u5f55\u4e0b: include $(GOROOT)/src/Make.inc TARG=uc GOFILES=\\ uc.go\\ include $(GOROOT)/src/Make.pkg \u5728\u8be5\u76ee\u5f55\u4e0b\u7684\u547d\u4ee4\u884c\u8c03\u7528: gomake \u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a _obj \u76ee\u5f55\u5e76\u5c06\u5305\u7f16\u8bd1\u751f\u6210\u7684\u5b58\u6863 uc.a \u653e\u5728\u8be5\u76ee\u5f55\u4e0b\u3002 \u8fd9\u4e2a\u5305\u53ef\u4ee5\u901a\u8fc7 go test \u6d4b\u8bd5\u3002 \u521b\u5efa\u4e00\u4e2a uc.a \u7684\u6d4b\u8bd5\u6587\u4ef6\u5728\u76ee\u5f55\u4e0b\uff0c\u8f93\u51fa\u4e3a PASS \u65f6\u6d4b\u8bd5\u901a\u8fc7\u3002 \u5728 \u7b2c 13.8 \u8282 \u6211\u4eec\u5c06\u7ed9\u51fa\u53e6\u5916\u4e00\u4e2a\u6d4b\u8bd5\u4f8b\u5b50\u5e76\u8fdb\u884c\u6df1\u5165\u7814\u7a76\u3002 \u5907\u6ce8\uff1a\u6709\u53ef\u80fd\u4f60\u5f53\u524d\u7684\u7528\u6237\u4e0d\u5177\u6709\u8db3\u591f\u7684\u8d44\u683c\u4f7f\u7528 go install\uff08\u6ca1\u6709\u6743\u9650\uff09\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u9009\u62e9 root \u7528\u6237 su\u3002\u786e\u4fdd Go \u73af\u5883\u53d8\u91cf\u548c Go \u6e90\u7801\u8def\u5f84\u4e5f\u8bbe\u7f6e\u7ed9 su\uff0c\u540c\u6837\u4e5f\u9002\u7528\u4f60\u7684\u666e\u901a\u7528\u6237\uff08\u8be6\u89c1 \u7b2c 2.3 \u8282 \uff09\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u521b\u5efa\u4e3b\u7a0b\u5e8f ucmain.go: \u793a\u4f8b 9.8 ucmain.go \uff1a package main import ( \"./src/uc\" \"fmt\" ) func main () { str1 := \"USING package uc!\" fmt . Println ( uc . UpperCase ( str1 )) } \u7136\u540e\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e0b\u8f93\u5165 go install \u3002 \u53e6\u5916\u590d\u5236 uc.a \u5230 /home/user/goprograms \u76ee\u5f55\u5e76\u521b\u5efa\u4e00\u4e2a Makefile \u5e76\u5199\u5165\u6587\u672c\uff1a include $(GOROOT)/src/Make.inc TARG=ucmain GOFILES=\\ ucmain.go\\ include $(GOROOT)/src/Make.cmd \u6267\u884c gomake \u7f16\u8bd1 ucmain.go \u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6 ucmain \u8fd0\u884c ./ucmain \u663e\u793a: USING PACKAGE UC! \u3002 9.8.2 \u672c\u5730\u5b89\u88c5\u5305 \u00b6 \u672c\u5730\u5305\u5728\u7528\u6237\u76ee\u5f55\u4e0b\uff0c\u4f7f\u7528\u7ed9\u51fa\u7684\u76ee\u5f55\u7ed3\u6784\uff0c\u4ee5\u4e0b\u547d\u4ee4\u7528\u6765\u4ece\u6e90\u7801\u5b89\u88c5\u672c\u5730\u5305\uff1a go install /home/user/goprograms/src/uc # \u7f16\u8bd1\u5b89\u88c5 uc cd /home/user/goprograms/uc go install ./uc # \u7f16\u8bd1\u5b89\u88c5 uc\uff08\u548c\u4e4b\u524d\u7684\u6307\u4ee4\u4e00\u6837\uff09 cd .. go install . # \u7f16\u8bd1\u5b89\u88c5 ucmain \u5b89\u88c5\u5230 $GOPATH \u4e0b\uff1a \u5982\u679c\u6211\u4eec\u60f3\u5b89\u88c5\u7684\u5305\u5728\u7cfb\u7edf\u4e0a\u7684\u5176\u4ed6 Go \u7a0b\u5e8f\u4e2d\u88ab\u4f7f\u7528\uff0c\u5b83\u4e00\u5b9a\u8981\u5b89\u88c5\u5230 $GOPATH \u4e0b\u3002 \u8fd9\u6837\u505a\uff0c\u5728 .profile \u548c .bashrc \u4e2d\u8bbe\u7f6e export GOPATH=/home/user/goprograms \u3002 \u7136\u540e\u6267\u884c go install uc \u5c06\u4f1a\u590d\u5236\u5305\u5b58\u6863\u5230 $GOPATH/pkg/LINUX_AMD64/uc \u3002 \u73b0\u5728\uff0cuc \u5305\u53ef\u4ee5\u901a\u8fc7 import \"uc\" \u5728\u4efb\u4f55 Go \u7a0b\u5e8f\u4e2d\u88ab\u5f15\u7528\u3002 9.8.3 \u4f9d\u8d56\u7cfb\u7edf\u7684\u4ee3\u7801 \u00b6 \u5728\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u8fd0\u884c\u7684\u7a0b\u5e8f\u4ee5\u4e0d\u540c\u7684\u4ee3\u7801\u5b9e\u73b0\u662f\u975e\u5e38\u5c11\u89c1\u7684\uff1a\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u8bed\u8a00\u548c\u6807\u51c6\u5e93\u89e3\u51b3\u4e86\u5927\u90e8\u5206\u7684\u53ef\u79fb\u690d\u6027\u95ee\u9898\u3002 \u4f60\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u7406\u7531\u53bb\u5199\u5e73\u53f0\u7279\u5b9a\u7684\u4ee3\u7801\uff0c\u4f8b\u5982\u6c47\u7f16\u8bed\u8a00\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6309\u7167\u4e0b\u9762\u7684\u7ea6\u5b9a\u662f\u5408\u7406\u7684\uff1a prog1.go prog1_linux.go prog1_darwin.go prog1_windows.go prog1.go \u5b9a\u4e49\u4e86\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u901a\u7528\u7684\u63a5\u53e3\uff0c\u5e76\u5c06\u7cfb\u7edf\u7279\u5b9a\u7684\u4ee3\u7801\u5199\u5230 prog1_os.go \u4e2d\u3002 \u5bf9\u4e8e Go \u5de5\u5177\u4f60\u53ef\u4ee5\u6307\u5b9a prog1_$GOOS.go \u6216 prog1_$GOARCH.go \u6216\u5728\u5e73\u53f0 Makefile \u4e2d\uff1a prog1_$(GOOS).go\\ \u6216 prog1_$(GOARCH).go\\ \u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f7f\u7528 go install \u5b89\u88c5\u81ea\u5b9a\u4e49\u5305 \u4e0b\u4e00\u8282\uff1a \u901a\u8fc7 Git \u6253\u5305\u548c\u5b89\u88c5","title":"9.8 \u81ea\u5b9a\u4e49\u5305\u7684\u76ee\u5f55\u7ed3\u6784\u3001go install \u548c go test"},{"location":"09.8/#98-go-install-go-test","text":"\u4e3a\u4e86\u793a\u8303\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u540d\u4e3a uc \u7684\u7b80\u5355\u5305\uff0c\u5b83\u542b\u6709\u4e00\u4e2a UpperCase \u51fd\u6570\u5c06\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5927\u5199\u3002\u5f53\u7136\u8fd9\u5e76\u4e0d\u503c\u5f97\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5305\uff0c\u540c\u6837\u7684\u529f\u80fd\u5df2\u88ab\u5305\u542b\u5728 strings \u5305\u91cc\uff0c\u4f46\u662f\u540c\u6837\u7684\u6280\u5de7\u4e5f\u53ef\u4ee5\u5e94\u7528\u5728\u66f4\u590d\u6742\u7684\u5305\u4e2d\u3002","title":"9.8 \u81ea\u5b9a\u4e49\u5305\u7684\u76ee\u5f55\u7ed3\u6784\u3001go install \u548c go test"},{"location":"09.8/#981","text":"\u4e0b\u9762\u7684\u7ed3\u6784\u7ed9\u4e86\u4f60\u4e00\u4e2a\u597d\u7684\u793a\u8303\uff08 uc \u4ee3\u8868\u901a\u7528\u5305\u540d, \u540d\u5b57\u4e3a\u7c97\u4f53\u7684\u4ee3\u8868\u76ee\u5f55\uff0c\u659c\u4f53\u4ee3\u8868\u53ef\u6267\u884c\u6587\u4ef6\uff09: /home/user/goprograms ucmain.go (uc \u5305\u4e3b\u7a0b\u5e8f) Makefile (ucmain \u7684 makefile) ucmain src/uc (\u5305\u542b uc \u5305\u7684 go \u6e90\u7801) uc.go uc_test.go Makefile (\u5305\u7684 makefile) uc.a _obj uc.a _test uc.a bin (\u5305\u542b\u6700\u7ec8\u7684\u6267\u884c\u6587\u4ef6) ucmain pkg/linux_amd64 uc.a (\u5305\u7684\u76ee\u6807\u6587\u4ef6) \u5c06\u4f60\u7684\u9879\u76ee\u653e\u5728 goprograms \u76ee\u5f55\u4e0b(\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u73af\u5883\u53d8\u91cf GOPATH \uff0c\u8be6\u89c1\u7b2c 2.2 / 3 \u7ae0\u8282\uff1a\u5728 .profile \u548c .bashrc \u6587\u4ef6\u4e2d\u6dfb\u52a0 export GOPATH=/home/user/goprograms )\uff0c\u800c\u4f60\u7684\u9879\u76ee\u5c06\u4f5c\u4e3a src \u7684\u5b50\u76ee\u5f55\u3002 uc \u5305\u4e2d\u7684\u529f\u80fd\u5728 uc.go \u4e2d\u5b9e\u73b0\u3002 \u793a\u4f8b 9.6 uc.go \uff1a package uc import \"strings\" func UpperCase ( str string ) string { return strings . ToUpper ( str ) } \u5305\u901a\u5e38\u9644\u5e26\u4e00\u4e2a\u6216\u591a\u4e2a\u6d4b\u8bd5\u6587\u4ef6\uff0c\u5728\u8fd9\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a uc_test.go \u6587\u4ef6\uff0c\u5982 \u7b2c 9.8 \u8282 \u6240\u8ff0\u3002 \u793a\u4f8b 9.7 test.go package uc import \"testing\" type ucTest struct { in , out string } var ucTests = [] ucTest { ucTest { \"abc\" , \"ABC\" }, ucTest { \"cvo-az\" , \"CVO-AZ\" }, ucTest { \"Antwerp\" , \"ANTWERP\" }, } func TestUC ( t * testing . T ) { for _ , ut := range ucTests { uc := UpperCase ( ut . in ) if uc != ut . out { t . Errorf ( \"UpperCase(%s) = %s, must be %s\" , ut . in , uc , ut . out ) } } } \u901a\u8fc7\u6307\u4ee4\u7f16\u8bd1\u5e76\u5b89\u88c5\u5305\u5230\u672c\u5730\uff1a go install uc , \u8fd9\u4f1a\u5c06 uc.a \u590d\u5236\u5230 pkg/linux_amd64 \u4e0b\u9762\u3002 \u53e6\u5916\uff0c\u4f7f\u7528 make \uff0c\u901a\u8fc7\u4ee5\u4e0b\u5185\u5bb9\u521b\u5efa\u4e00\u4e2a\u5305\u7684 Makefile \u5728 src/uc \u76ee\u5f55\u4e0b: include $(GOROOT)/src/Make.inc TARG=uc GOFILES=\\ uc.go\\ include $(GOROOT)/src/Make.pkg \u5728\u8be5\u76ee\u5f55\u4e0b\u7684\u547d\u4ee4\u884c\u8c03\u7528: gomake \u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a _obj \u76ee\u5f55\u5e76\u5c06\u5305\u7f16\u8bd1\u751f\u6210\u7684\u5b58\u6863 uc.a \u653e\u5728\u8be5\u76ee\u5f55\u4e0b\u3002 \u8fd9\u4e2a\u5305\u53ef\u4ee5\u901a\u8fc7 go test \u6d4b\u8bd5\u3002 \u521b\u5efa\u4e00\u4e2a uc.a \u7684\u6d4b\u8bd5\u6587\u4ef6\u5728\u76ee\u5f55\u4e0b\uff0c\u8f93\u51fa\u4e3a PASS \u65f6\u6d4b\u8bd5\u901a\u8fc7\u3002 \u5728 \u7b2c 13.8 \u8282 \u6211\u4eec\u5c06\u7ed9\u51fa\u53e6\u5916\u4e00\u4e2a\u6d4b\u8bd5\u4f8b\u5b50\u5e76\u8fdb\u884c\u6df1\u5165\u7814\u7a76\u3002 \u5907\u6ce8\uff1a\u6709\u53ef\u80fd\u4f60\u5f53\u524d\u7684\u7528\u6237\u4e0d\u5177\u6709\u8db3\u591f\u7684\u8d44\u683c\u4f7f\u7528 go install\uff08\u6ca1\u6709\u6743\u9650\uff09\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u9009\u62e9 root \u7528\u6237 su\u3002\u786e\u4fdd Go \u73af\u5883\u53d8\u91cf\u548c Go \u6e90\u7801\u8def\u5f84\u4e5f\u8bbe\u7f6e\u7ed9 su\uff0c\u540c\u6837\u4e5f\u9002\u7528\u4f60\u7684\u666e\u901a\u7528\u6237\uff08\u8be6\u89c1 \u7b2c 2.3 \u8282 \uff09\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u521b\u5efa\u4e3b\u7a0b\u5e8f ucmain.go: \u793a\u4f8b 9.8 ucmain.go \uff1a package main import ( \"./src/uc\" \"fmt\" ) func main () { str1 := \"USING package uc!\" fmt . Println ( uc . UpperCase ( str1 )) } \u7136\u540e\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e0b\u8f93\u5165 go install \u3002 \u53e6\u5916\u590d\u5236 uc.a \u5230 /home/user/goprograms \u76ee\u5f55\u5e76\u521b\u5efa\u4e00\u4e2a Makefile \u5e76\u5199\u5165\u6587\u672c\uff1a include $(GOROOT)/src/Make.inc TARG=ucmain GOFILES=\\ ucmain.go\\ include $(GOROOT)/src/Make.cmd \u6267\u884c gomake \u7f16\u8bd1 ucmain.go \u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6 ucmain \u8fd0\u884c ./ucmain \u663e\u793a: USING PACKAGE UC! \u3002","title":"9.8.1 \u81ea\u5b9a\u4e49\u5305\u7684\u76ee\u5f55\u7ed3\u6784"},{"location":"09.8/#982","text":"\u672c\u5730\u5305\u5728\u7528\u6237\u76ee\u5f55\u4e0b\uff0c\u4f7f\u7528\u7ed9\u51fa\u7684\u76ee\u5f55\u7ed3\u6784\uff0c\u4ee5\u4e0b\u547d\u4ee4\u7528\u6765\u4ece\u6e90\u7801\u5b89\u88c5\u672c\u5730\u5305\uff1a go install /home/user/goprograms/src/uc # \u7f16\u8bd1\u5b89\u88c5 uc cd /home/user/goprograms/uc go install ./uc # \u7f16\u8bd1\u5b89\u88c5 uc\uff08\u548c\u4e4b\u524d\u7684\u6307\u4ee4\u4e00\u6837\uff09 cd .. go install . # \u7f16\u8bd1\u5b89\u88c5 ucmain \u5b89\u88c5\u5230 $GOPATH \u4e0b\uff1a \u5982\u679c\u6211\u4eec\u60f3\u5b89\u88c5\u7684\u5305\u5728\u7cfb\u7edf\u4e0a\u7684\u5176\u4ed6 Go \u7a0b\u5e8f\u4e2d\u88ab\u4f7f\u7528\uff0c\u5b83\u4e00\u5b9a\u8981\u5b89\u88c5\u5230 $GOPATH \u4e0b\u3002 \u8fd9\u6837\u505a\uff0c\u5728 .profile \u548c .bashrc \u4e2d\u8bbe\u7f6e export GOPATH=/home/user/goprograms \u3002 \u7136\u540e\u6267\u884c go install uc \u5c06\u4f1a\u590d\u5236\u5305\u5b58\u6863\u5230 $GOPATH/pkg/LINUX_AMD64/uc \u3002 \u73b0\u5728\uff0cuc \u5305\u53ef\u4ee5\u901a\u8fc7 import \"uc\" \u5728\u4efb\u4f55 Go \u7a0b\u5e8f\u4e2d\u88ab\u5f15\u7528\u3002","title":"9.8.2 \u672c\u5730\u5b89\u88c5\u5305"},{"location":"09.8/#983","text":"\u5728\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u8fd0\u884c\u7684\u7a0b\u5e8f\u4ee5\u4e0d\u540c\u7684\u4ee3\u7801\u5b9e\u73b0\u662f\u975e\u5e38\u5c11\u89c1\u7684\uff1a\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u8bed\u8a00\u548c\u6807\u51c6\u5e93\u89e3\u51b3\u4e86\u5927\u90e8\u5206\u7684\u53ef\u79fb\u690d\u6027\u95ee\u9898\u3002 \u4f60\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u7406\u7531\u53bb\u5199\u5e73\u53f0\u7279\u5b9a\u7684\u4ee3\u7801\uff0c\u4f8b\u5982\u6c47\u7f16\u8bed\u8a00\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6309\u7167\u4e0b\u9762\u7684\u7ea6\u5b9a\u662f\u5408\u7406\u7684\uff1a prog1.go prog1_linux.go prog1_darwin.go prog1_windows.go prog1.go \u5b9a\u4e49\u4e86\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u901a\u7528\u7684\u63a5\u53e3\uff0c\u5e76\u5c06\u7cfb\u7edf\u7279\u5b9a\u7684\u4ee3\u7801\u5199\u5230 prog1_os.go \u4e2d\u3002 \u5bf9\u4e8e Go \u5de5\u5177\u4f60\u53ef\u4ee5\u6307\u5b9a prog1_$GOOS.go \u6216 prog1_$GOARCH.go \u6216\u5728\u5e73\u53f0 Makefile \u4e2d\uff1a prog1_$(GOOS).go\\ \u6216 prog1_$(GOARCH).go\\ \u3002","title":"9.8.3 \u4f9d\u8d56\u7cfb\u7edf\u7684\u4ee3\u7801"},{"location":"09.8/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f7f\u7528 go install \u5b89\u88c5\u81ea\u5b9a\u4e49\u5305 \u4e0b\u4e00\u8282\uff1a \u901a\u8fc7 Git \u6253\u5305\u548c\u5b89\u88c5","title":"\u94fe\u63a5"},{"location":"09.9/","text":"9.9 \u901a\u8fc7 Git \u6253\u5305\u548c\u5b89\u88c5 \u00b6 9.9.1 \u5b89\u88c5\u5230 GitHub \u00b6 \u4ee5\u4e0a\u7684\u65b9\u5f0f\u5bf9\u4e8e\u672c\u5730\u5305\u6765\u8bf4\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u6211\u4eec\u5982\u4f55\u6253\u5305\u4ee3\u7801\u5230\u5f00\u53d1\u8005\u5708\u5b50\u5462\uff1f\u90a3\u4e48\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u4e91\u7aef\u7684\u6e90\u7801\u7684\u7248\u672c\u63a7\u5236\u7cfb\u7edf\uff0c\u6bd4\u5982\u8457\u540d\u7684 Git\u3002 \u5728 Linux \u548c OS X \u7684\u673a\u5668\u4e0a Git \u662f\u9ed8\u8ba4\u5b89\u88c5\u7684\uff0c\u5728 Windows \u4e0a\u4f60\u5fc5\u987b\u5148\u81ea\u884c\u5b89\u88c5\uff0c\u53c2\u89c1 GitHub \u5e2e\u52a9\u9875\u9762 \u3002 \u8fd9\u91cc\u5c06\u901a\u8fc7\u4e3a \u7b2c 9.8 \u8282 \u4e2d\u7684 uc \u5305\u521b\u5efa\u4e00\u4e2a git \u4ed3\u5e93\u4f5c\u4e3a\u6f14\u793a \u8fdb\u5165\u5230 uc \u5305\u76ee\u5f55\u4e0b\u5e76\u521b\u5efa\u4e00\u4e2a Git \u4ed3\u5e93\u5728\u91cc\u9762: git init \u3002 \u4fe1\u606f\u63d0\u793a: Initialized empty git repository in $PWD/uc \u3002 \u6bcf\u4e00\u4e2a Git \u9879\u76ee\u90fd\u9700\u8981\u4e00\u4e2a\u5bf9\u5305\u8fdb\u884c\u63cf\u8ff0\u7684 README.md \u6587\u4ef6\uff0c\u6240\u4ee5\u9700\u8981\u6253\u5f00\u4f60\u7684\u6587\u672c\u7f16\u8f91\u5668\uff08gedit\u3001notepad \u6216 LiteIde\uff09\u5e76\u6dfb\u52a0\u4e00\u4e9b\u8bf4\u660e\u8fdb\u53bb\u3002 \u6dfb\u52a0\u6240\u6709\u6587\u4ef6\u5230\u4ed3\u5e93\uff1a git add README.md uc.go uc_test.go Makefile \u3002 \u6807\u8bb0\u4e3a\u7b2c\u4e00\u4e2a\u7248\u672c\uff1a git commit -m \"initial rivision\" \u3002 \u73b0\u5728\u5fc5\u987b\u767b\u5f55 GitHub \u7f51\u7ad9 \u3002 \u5982\u679c\u60a8\u8fd8\u6ca1\u6709\u8d26\u53f7\uff0c\u53ef\u4ee5\u53bb\u6ce8\u518c\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\u7684\u514d\u8d39\u5e10\u53f7\u3002\u8f93\u5165\u6b63\u786e\u7684\u5e10\u53f7\u5bc6\u7801\u548c\u6709\u6548\u7684\u90ae\u7bb1\u5730\u5740\u5e76\u8fdb\u4e00\u6b65\u521b\u5efa\u7528\u6237\u3002\u7136\u540e\u4f60\u5c06\u83b7\u5f97\u4e00\u4e2a Git \u547d\u4ee4\u7684\u5217\u8868\u3002\u672c\u5730\u4ed3\u5e93\u7684\u64cd\u4f5c\u547d\u4ee4\u5df2\u7ecf\u5b8c\u6210\u3002\u4e00\u4e2a\u4f18\u79c0\u7684\u7cfb\u7edf\u5728\u4f60\u9047\u5230\u4efb\u4f55\u95ee\u9898\u7684\u65f6\u5019\u5c06 \u5f15\u5bfc\u4f60 \u3002 \u5728\u4e91\u7aef\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 uc \u4ed3\u5e93;\u53d1\u5e03\u7684\u6307\u4ee4\u4e3a\uff08 NNNN \u66ff\u4ee3\u7528\u6237\u540d\uff09: git remote add origin git@github.com:NNNN/uc.git git push -u origin master \u64cd\u4f5c\u5b8c\u6210\u540e\u68c0\u67e5 GitHub \u4e0a\u7684\u5305\u9875\u9762: http://github.com/NNNN/uc \u3002 9.9.2 \u4ece GitHub \u5b89\u88c5 \u00b6 \u5982\u679c\u6709\u4eba\u60f3\u5b89\u88c5\u60a8\u7684\u8fdc\u7aef\u9879\u76ee\u5230\u672c\u5730\u673a\u5668\uff0c\u6253\u5f00\u7ec8\u7aef\u5e76\u6267\u884c\uff08 NNNN \u662f\u4f60\u5728 GitHub \u4e0a\u7684\u7528\u6237\u540d\uff09\uff1a go get github.com/NNNN/uc \u3002 \u8fd9\u6837\u73b0\u5728\u8fd9\u53f0\u673a\u5668\u4e0a\u7684\u5176\u4ed6 Go \u5e94\u7528\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5bfc\u5165\u8def\u5f84\uff1a \"github.com/NNNN/uc\" \u4ee3\u66ff \"./uc/uc\" \u6765\u4f7f\u7528\u3002 \u4e5f\u53ef\u4ee5\u5c06\u5176\u7f29\u5199\u4e3a\uff1a import uc \"github.com/NNNN/uc\" \u3002 \u7136\u540e\u4fee\u6539 Makefile: \u5c06 TARG=uc \u66ff\u6362\u4e3a TARG=github.com/NNNN/uc \u3002 Gomake\uff08\u548c go install\uff09\u5c06\u901a\u8fc7 $GOPATH \u4e0b\u7684\u672c\u5730\u7248\u672c\u8fdb\u884c\u5de5\u4f5c\u3002 \u7f51\u7ad9\u548c\u7248\u672c\u63a7\u5236\u7cfb\u7edf\u7684\u5176\u4ed6\u7684\u9009\u62e9(\u62ec\u53f7\u4e2d\u4e3a\u7f51\u7ad9\u6240\u4f7f\u7528\u7684\u7248\u672c\u63a7\u5236\u7cfb\u7edf)\uff1a BitBucket(hg/Git) GitHub(Git) Google Code(hg/Git/svn) Launchpad(bzr) \u7248\u672c\u63a7\u5236\u7cfb\u7edf\u53ef\u4ee5\u9009\u62e9\u4f60\u719f\u6089\u7684\u6216\u8005\u672c\u5730\u4f7f\u7528\u7684\u4ee3\u7801\u7248\u672c\u63a7\u5236\u3002Go \u6838\u5fc3\u4ee3\u7801\u7684\u4ed3\u5e93\u662f\u4f7f\u7528 Mercurial(hg) \u6765\u63a7\u5236\u7684\uff0c\u6240\u4ee5\u5b83\u662f\u4e00\u4e2a\u6700\u53ef\u80fd\u4fdd\u8bc1\u4f60\u53ef\u4ee5\u5f97\u5230\u5f00\u53d1\u8005\u9879\u76ee\u4e2d\u6700\u597d\u7684\u8f6f\u4ef6\u3002Git \u4e5f\u5f88\u51fa\u540d\uff0c\u540c\u6837\u4e5f\u9002\u7528\u3002\u5982\u679c\u4f60\u4ece\u672a\u4f7f\u7528\u8fc7\u7248\u672c\u63a7\u5236\uff0c\u8fd9\u4e9b\u7f51\u7ad9\u6709\u4e00\u4e9b\u5f88\u597d\u7684\u5e2e\u52a9\u5e76\u4e14\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u8c37\u6b4c\u641c\u7d22 \"{name} tutorial\"\uff08name\u4e3a\u4f60\u60f3\u8981\u4f7f\u7528\u7684\u7248\u672c\u63a7\u5236\u7cfb\u7edf\uff09\u5f97\u5230\u8bb8\u591a\u5f88\u597d\u7684\u6559\u7a0b\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u81ea\u5b9a\u4e49\u5305\u7684\u76ee\u5f55\u7ed3\u6784\u3001go install \u548c go test \u4e0b\u4e00\u8282\uff1a Go \u7684\u5916\u90e8\u5305\u548c\u9879\u76ee","title":"9.9 \u901a\u8fc7 Git \u6253\u5305\u548c\u5b89\u88c5"},{"location":"09.9/#99-git","text":"","title":"9.9 \u901a\u8fc7 Git \u6253\u5305\u548c\u5b89\u88c5"},{"location":"09.9/#991-github","text":"\u4ee5\u4e0a\u7684\u65b9\u5f0f\u5bf9\u4e8e\u672c\u5730\u5305\u6765\u8bf4\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u6211\u4eec\u5982\u4f55\u6253\u5305\u4ee3\u7801\u5230\u5f00\u53d1\u8005\u5708\u5b50\u5462\uff1f\u90a3\u4e48\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u4e91\u7aef\u7684\u6e90\u7801\u7684\u7248\u672c\u63a7\u5236\u7cfb\u7edf\uff0c\u6bd4\u5982\u8457\u540d\u7684 Git\u3002 \u5728 Linux \u548c OS X \u7684\u673a\u5668\u4e0a Git \u662f\u9ed8\u8ba4\u5b89\u88c5\u7684\uff0c\u5728 Windows \u4e0a\u4f60\u5fc5\u987b\u5148\u81ea\u884c\u5b89\u88c5\uff0c\u53c2\u89c1 GitHub \u5e2e\u52a9\u9875\u9762 \u3002 \u8fd9\u91cc\u5c06\u901a\u8fc7\u4e3a \u7b2c 9.8 \u8282 \u4e2d\u7684 uc \u5305\u521b\u5efa\u4e00\u4e2a git \u4ed3\u5e93\u4f5c\u4e3a\u6f14\u793a \u8fdb\u5165\u5230 uc \u5305\u76ee\u5f55\u4e0b\u5e76\u521b\u5efa\u4e00\u4e2a Git \u4ed3\u5e93\u5728\u91cc\u9762: git init \u3002 \u4fe1\u606f\u63d0\u793a: Initialized empty git repository in $PWD/uc \u3002 \u6bcf\u4e00\u4e2a Git \u9879\u76ee\u90fd\u9700\u8981\u4e00\u4e2a\u5bf9\u5305\u8fdb\u884c\u63cf\u8ff0\u7684 README.md \u6587\u4ef6\uff0c\u6240\u4ee5\u9700\u8981\u6253\u5f00\u4f60\u7684\u6587\u672c\u7f16\u8f91\u5668\uff08gedit\u3001notepad \u6216 LiteIde\uff09\u5e76\u6dfb\u52a0\u4e00\u4e9b\u8bf4\u660e\u8fdb\u53bb\u3002 \u6dfb\u52a0\u6240\u6709\u6587\u4ef6\u5230\u4ed3\u5e93\uff1a git add README.md uc.go uc_test.go Makefile \u3002 \u6807\u8bb0\u4e3a\u7b2c\u4e00\u4e2a\u7248\u672c\uff1a git commit -m \"initial rivision\" \u3002 \u73b0\u5728\u5fc5\u987b\u767b\u5f55 GitHub \u7f51\u7ad9 \u3002 \u5982\u679c\u60a8\u8fd8\u6ca1\u6709\u8d26\u53f7\uff0c\u53ef\u4ee5\u53bb\u6ce8\u518c\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\u7684\u514d\u8d39\u5e10\u53f7\u3002\u8f93\u5165\u6b63\u786e\u7684\u5e10\u53f7\u5bc6\u7801\u548c\u6709\u6548\u7684\u90ae\u7bb1\u5730\u5740\u5e76\u8fdb\u4e00\u6b65\u521b\u5efa\u7528\u6237\u3002\u7136\u540e\u4f60\u5c06\u83b7\u5f97\u4e00\u4e2a Git \u547d\u4ee4\u7684\u5217\u8868\u3002\u672c\u5730\u4ed3\u5e93\u7684\u64cd\u4f5c\u547d\u4ee4\u5df2\u7ecf\u5b8c\u6210\u3002\u4e00\u4e2a\u4f18\u79c0\u7684\u7cfb\u7edf\u5728\u4f60\u9047\u5230\u4efb\u4f55\u95ee\u9898\u7684\u65f6\u5019\u5c06 \u5f15\u5bfc\u4f60 \u3002 \u5728\u4e91\u7aef\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 uc \u4ed3\u5e93;\u53d1\u5e03\u7684\u6307\u4ee4\u4e3a\uff08 NNNN \u66ff\u4ee3\u7528\u6237\u540d\uff09: git remote add origin git@github.com:NNNN/uc.git git push -u origin master \u64cd\u4f5c\u5b8c\u6210\u540e\u68c0\u67e5 GitHub \u4e0a\u7684\u5305\u9875\u9762: http://github.com/NNNN/uc \u3002","title":"9.9.1 \u5b89\u88c5\u5230 GitHub"},{"location":"09.9/#992-github","text":"\u5982\u679c\u6709\u4eba\u60f3\u5b89\u88c5\u60a8\u7684\u8fdc\u7aef\u9879\u76ee\u5230\u672c\u5730\u673a\u5668\uff0c\u6253\u5f00\u7ec8\u7aef\u5e76\u6267\u884c\uff08 NNNN \u662f\u4f60\u5728 GitHub \u4e0a\u7684\u7528\u6237\u540d\uff09\uff1a go get github.com/NNNN/uc \u3002 \u8fd9\u6837\u73b0\u5728\u8fd9\u53f0\u673a\u5668\u4e0a\u7684\u5176\u4ed6 Go \u5e94\u7528\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5bfc\u5165\u8def\u5f84\uff1a \"github.com/NNNN/uc\" \u4ee3\u66ff \"./uc/uc\" \u6765\u4f7f\u7528\u3002 \u4e5f\u53ef\u4ee5\u5c06\u5176\u7f29\u5199\u4e3a\uff1a import uc \"github.com/NNNN/uc\" \u3002 \u7136\u540e\u4fee\u6539 Makefile: \u5c06 TARG=uc \u66ff\u6362\u4e3a TARG=github.com/NNNN/uc \u3002 Gomake\uff08\u548c go install\uff09\u5c06\u901a\u8fc7 $GOPATH \u4e0b\u7684\u672c\u5730\u7248\u672c\u8fdb\u884c\u5de5\u4f5c\u3002 \u7f51\u7ad9\u548c\u7248\u672c\u63a7\u5236\u7cfb\u7edf\u7684\u5176\u4ed6\u7684\u9009\u62e9(\u62ec\u53f7\u4e2d\u4e3a\u7f51\u7ad9\u6240\u4f7f\u7528\u7684\u7248\u672c\u63a7\u5236\u7cfb\u7edf)\uff1a BitBucket(hg/Git) GitHub(Git) Google Code(hg/Git/svn) Launchpad(bzr) \u7248\u672c\u63a7\u5236\u7cfb\u7edf\u53ef\u4ee5\u9009\u62e9\u4f60\u719f\u6089\u7684\u6216\u8005\u672c\u5730\u4f7f\u7528\u7684\u4ee3\u7801\u7248\u672c\u63a7\u5236\u3002Go \u6838\u5fc3\u4ee3\u7801\u7684\u4ed3\u5e93\u662f\u4f7f\u7528 Mercurial(hg) \u6765\u63a7\u5236\u7684\uff0c\u6240\u4ee5\u5b83\u662f\u4e00\u4e2a\u6700\u53ef\u80fd\u4fdd\u8bc1\u4f60\u53ef\u4ee5\u5f97\u5230\u5f00\u53d1\u8005\u9879\u76ee\u4e2d\u6700\u597d\u7684\u8f6f\u4ef6\u3002Git \u4e5f\u5f88\u51fa\u540d\uff0c\u540c\u6837\u4e5f\u9002\u7528\u3002\u5982\u679c\u4f60\u4ece\u672a\u4f7f\u7528\u8fc7\u7248\u672c\u63a7\u5236\uff0c\u8fd9\u4e9b\u7f51\u7ad9\u6709\u4e00\u4e9b\u5f88\u597d\u7684\u5e2e\u52a9\u5e76\u4e14\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u8c37\u6b4c\u641c\u7d22 \"{name} tutorial\"\uff08name\u4e3a\u4f60\u60f3\u8981\u4f7f\u7528\u7684\u7248\u672c\u63a7\u5236\u7cfb\u7edf\uff09\u5f97\u5230\u8bb8\u591a\u5f88\u597d\u7684\u6559\u7a0b\u3002","title":"9.9.2 \u4ece GitHub \u5b89\u88c5"},{"location":"09.9/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u81ea\u5b9a\u4e49\u5305\u7684\u76ee\u5f55\u7ed3\u6784\u3001go install \u548c go test \u4e0b\u4e00\u8282\uff1a Go \u7684\u5916\u90e8\u5305\u548c\u9879\u76ee","title":"\u94fe\u63a5"},{"location":"10.0/","text":"10.0 \u7ed3\u6784 (struct) \u4e0e\u65b9\u6cd5 (method) \u00b6 Go \u901a\u8fc7\u7c7b\u578b\u522b\u540d (alias types) \u548c\u7ed3\u6784\u4f53\u7684\u5f62\u5f0f\u652f\u6301\u7528\u6237\u81ea\u5b9a\u4e49\u7c7b\u578b\uff0c\u6216\u8005\u53eb\u5b9a\u5236\u7c7b\u578b\u3002\u4e00\u4e2a\u5e26\u5c5e\u6027\u7684\u7ed3\u6784\u4f53\u8bd5\u56fe\u8868\u793a\u4e00\u4e2a\u73b0\u5b9e\u4e16\u754c\u4e2d\u7684\u5b9e\u4f53\u3002\u7ed3\u6784\u4f53\u662f\u590d\u5408\u7c7b\u578b (composite types)\uff0c\u5f53\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u578b\uff0c\u5b83\u7531\u4e00\u7cfb\u5217\u5c5e\u6027\u7ec4\u6210\uff0c\u6bcf\u4e2a\u5c5e\u6027\u90fd\u6709\u81ea\u5df1\u7684\u7c7b\u578b\u548c\u503c\u7684\u65f6\u5019\uff0c\u5c31\u5e94\u8be5\u4f7f\u7528\u7ed3\u6784\u4f53\uff0c\u5b83\u628a\u6570\u636e\u805a\u96c6\u5728\u4e00\u8d77\u3002\u7136\u540e\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e9b\u6570\u636e\uff0c\u5c31\u597d\u50cf\u5b83\u662f\u4e00\u4e2a\u72ec\u7acb\u5b9e\u4f53\u7684\u4e00\u90e8\u5206\u3002\u7ed3\u6784\u4f53\u4e5f\u662f\u503c\u7c7b\u578b\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7 new \u51fd\u6570\u6765\u521b\u5efa\u3002 \u7ec4\u6210\u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u90a3\u4e9b\u6570\u636e\u79f0\u4e3a \u5b57\u6bb5 (fields) \u3002\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u6709\u4e00\u4e2a\u7c7b\u578b\u548c\u4e00\u4e2a\u540d\u5b57\uff1b\u5728\u4e00\u4e2a\u7ed3\u6784\u4f53\u4e2d\uff0c\u5b57\u6bb5\u540d\u5b57\u5fc5\u987b\u662f\u552f\u4e00\u7684\u3002 \u7ed3\u6784\u4f53\u7684\u6982\u5ff5\u5728\u8f6f\u4ef6\u5de5\u7a0b\u4e0a\u65e7\u7684\u672f\u8bed\u53eb ADT\uff08\u62bd\u8c61\u6570\u636e\u7c7b\u578b\uff1aAbstract Data Type\uff09\uff0c\u5728\u4e00\u4e9b\u8001\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\u53eb \u8bb0\u5f55 (Record) \uff0c\u6bd4\u5982 Cobol\uff0c\u5728 C \u5bb6\u65cf\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\u5b83\u4e5f\u5b58\u5728\uff0c\u5e76\u4e14\u540d\u5b57\u4e5f\u662f struct \uff0c\u5728\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u8ddf\u4e00\u4e2a\u65e0\u65b9\u6cd5\u7684\u8f7b\u91cf\u7ea7\u7c7b\u4e00\u6837\u3002\u4e0d\u8fc7\u56e0\u4e3a Go \u8bed\u8a00\u4e2d\u6ca1\u6709\u7c7b\u7684\u6982\u5ff5\uff0c\u56e0\u6b64\u5728 Go \u4e2d\u7ed3\u6784\u4f53\u6709\u7740\u66f4\u4e3a\u91cd\u8981\u7684\u5730\u4f4d\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5728 Go \u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5916\u90e8\u5e93 \u4e0b\u4e00\u8282\uff1a \u7ed3\u6784\u4f53\u5b9a\u4e49","title":"10.0 \u7ed3\u6784 (struct) \u4e0e\u65b9\u6cd5 (method)"},{"location":"10.0/#100-struct-method","text":"Go \u901a\u8fc7\u7c7b\u578b\u522b\u540d (alias types) \u548c\u7ed3\u6784\u4f53\u7684\u5f62\u5f0f\u652f\u6301\u7528\u6237\u81ea\u5b9a\u4e49\u7c7b\u578b\uff0c\u6216\u8005\u53eb\u5b9a\u5236\u7c7b\u578b\u3002\u4e00\u4e2a\u5e26\u5c5e\u6027\u7684\u7ed3\u6784\u4f53\u8bd5\u56fe\u8868\u793a\u4e00\u4e2a\u73b0\u5b9e\u4e16\u754c\u4e2d\u7684\u5b9e\u4f53\u3002\u7ed3\u6784\u4f53\u662f\u590d\u5408\u7c7b\u578b (composite types)\uff0c\u5f53\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u578b\uff0c\u5b83\u7531\u4e00\u7cfb\u5217\u5c5e\u6027\u7ec4\u6210\uff0c\u6bcf\u4e2a\u5c5e\u6027\u90fd\u6709\u81ea\u5df1\u7684\u7c7b\u578b\u548c\u503c\u7684\u65f6\u5019\uff0c\u5c31\u5e94\u8be5\u4f7f\u7528\u7ed3\u6784\u4f53\uff0c\u5b83\u628a\u6570\u636e\u805a\u96c6\u5728\u4e00\u8d77\u3002\u7136\u540e\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e9b\u6570\u636e\uff0c\u5c31\u597d\u50cf\u5b83\u662f\u4e00\u4e2a\u72ec\u7acb\u5b9e\u4f53\u7684\u4e00\u90e8\u5206\u3002\u7ed3\u6784\u4f53\u4e5f\u662f\u503c\u7c7b\u578b\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7 new \u51fd\u6570\u6765\u521b\u5efa\u3002 \u7ec4\u6210\u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u90a3\u4e9b\u6570\u636e\u79f0\u4e3a \u5b57\u6bb5 (fields) \u3002\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u6709\u4e00\u4e2a\u7c7b\u578b\u548c\u4e00\u4e2a\u540d\u5b57\uff1b\u5728\u4e00\u4e2a\u7ed3\u6784\u4f53\u4e2d\uff0c\u5b57\u6bb5\u540d\u5b57\u5fc5\u987b\u662f\u552f\u4e00\u7684\u3002 \u7ed3\u6784\u4f53\u7684\u6982\u5ff5\u5728\u8f6f\u4ef6\u5de5\u7a0b\u4e0a\u65e7\u7684\u672f\u8bed\u53eb ADT\uff08\u62bd\u8c61\u6570\u636e\u7c7b\u578b\uff1aAbstract Data Type\uff09\uff0c\u5728\u4e00\u4e9b\u8001\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\u53eb \u8bb0\u5f55 (Record) \uff0c\u6bd4\u5982 Cobol\uff0c\u5728 C \u5bb6\u65cf\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\u5b83\u4e5f\u5b58\u5728\uff0c\u5e76\u4e14\u540d\u5b57\u4e5f\u662f struct \uff0c\u5728\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u8ddf\u4e00\u4e2a\u65e0\u65b9\u6cd5\u7684\u8f7b\u91cf\u7ea7\u7c7b\u4e00\u6837\u3002\u4e0d\u8fc7\u56e0\u4e3a Go \u8bed\u8a00\u4e2d\u6ca1\u6709\u7c7b\u7684\u6982\u5ff5\uff0c\u56e0\u6b64\u5728 Go \u4e2d\u7ed3\u6784\u4f53\u6709\u7740\u66f4\u4e3a\u91cd\u8981\u7684\u5730\u4f4d\u3002","title":"10.0 \u7ed3\u6784 (struct) \u4e0e\u65b9\u6cd5 (method)"},{"location":"10.0/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5728 Go \u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5916\u90e8\u5e93 \u4e0b\u4e00\u8282\uff1a \u7ed3\u6784\u4f53\u5b9a\u4e49","title":"\u94fe\u63a5"},{"location":"10.1/","text":"10.1 \u7ed3\u6784\u4f53\u5b9a\u4e49 \u00b6 \u7ed3\u6784\u4f53\u5b9a\u4e49\u7684\u4e00\u822c\u65b9\u5f0f\u5982\u4e0b\uff1a type identifier struct { field1 type1 field2 type2 ... } type T struct {a, b int} \u4e5f\u662f\u5408\u6cd5\u7684\u8bed\u6cd5\uff0c\u5b83\u66f4\u9002\u7528\u4e8e\u7b80\u5355\u7684\u7ed3\u6784\u4f53\u3002 \u7ed3\u6784\u4f53\u91cc\u7684\u5b57\u6bb5\u90fd\u6709 \u540d\u5b57 \uff0c\u50cf field1 \u3001 field2 \u7b49\uff0c\u5982\u679c\u5b57\u6bb5\u5728\u4ee3\u7801\u4e2d\u4ece\u6765\u4e5f\u4e0d\u4f1a\u88ab\u7528\u5230\uff0c\u90a3\u4e48\u53ef\u4ee5\u547d\u540d\u5b83\u4e3a _ \u3002 \u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\uff0c\u751a\u81f3\u662f\u7ed3\u6784\u4f53\u672c\u8eab\uff08\u53c2\u8003\u7b2c 10.5 \u8282\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f\u51fd\u6570\u6216\u8005\u63a5\u53e3\uff08\u53c2\u8003 \u7b2c 11 \u7ae0 \uff09\u3002\u53ef\u4ee5\u58f0\u660e\u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u4e00\u4e2a\u53d8\u91cf\uff0c\u7136\u540e\u50cf\u4e0b\u9762\u8fd9\u6837\u7ed9\u5b83\u7684\u5b57\u6bb5\u8d4b\u503c\uff1a var s T s . a = 5 s . b = 8 \u6570\u7ec4\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u79cd\u7ed3\u6784\u4f53\u7c7b\u578b\uff0c\u4e0d\u8fc7\u5b83\u4f7f\u7528\u4e0b\u6807\u800c\u4e0d\u662f\u5177\u540d\u7684\u5b57\u6bb5\u3002 \u4f7f\u7528 new() \u4f7f\u7528 new() \u51fd\u6570\u7ed9\u4e00\u4e2a\u65b0\u7684\u7ed3\u6784\u4f53\u53d8\u91cf\u5206\u914d\u5185\u5b58\uff0c\u5b83\u8fd4\u56de\u6307\u5411\u5df2\u5206\u914d\u5185\u5b58\u7684\u6307\u9488\uff1a var t *T = new(T) \uff0c\u5982\u679c\u9700\u8981\u53ef\u4ee5\u628a\u8fd9\u6761\u8bed\u53e5\u653e\u5728\u4e0d\u540c\u7684\u884c\uff08\u6bd4\u5982\u5b9a\u4e49\u662f\u5305\u8303\u56f4\u7684\uff0c\u4f46\u662f\u5206\u914d\u5374\u6ca1\u6709\u5fc5\u8981\u5728\u5f00\u59cb\u5c31\u505a\uff09\u3002 var t * T t = new ( T ) \u5199\u8fd9\u6761\u8bed\u53e5\u7684\u60ef\u7528\u65b9\u6cd5\u662f\uff1a t := new(T) \uff0c\u53d8\u91cf t \u662f\u4e00\u4e2a\u6307\u5411 T \u7684\u6307\u9488\uff0c\u6b64\u65f6\u7ed3\u6784\u4f53\u5b57\u6bb5\u7684\u503c\u662f\u5b83\u4eec\u6240\u5c5e\u7c7b\u578b\u7684\u96f6\u503c\u3002 \u58f0\u660e var t T \u4e5f\u4f1a\u7ed9 t \u5206\u914d\u5185\u5b58\uff0c\u5e76\u96f6\u503c\u5316\u5185\u5b58\uff0c\u4f46\u662f\u8fd9\u4e2a\u65f6\u5019 t \u662f\u7c7b\u578b T \u3002\u5728\u8fd9\u4e24\u79cd\u65b9\u5f0f\u4e2d\uff0c t \u901a\u5e38\u88ab\u79f0\u505a\u7c7b\u578b T \u7684\u4e00\u4e2a\u5b9e\u4f8b (instance) \u6216\u5bf9\u8c61 (object)\u3002 \u793a\u4f8b 10.1 structs_fields.go \u7ed9\u51fa\u4e86\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u4f8b\u5b50\uff1a package main import \"fmt\" type struct1 struct { i1 int f1 float32 str string } func main () { ms := new ( struct1 ) ms . i1 = 10 ms . f1 = 15.5 ms . str = \"Chris\" fmt . Printf ( \"The int is: %d\\n\" , ms . i1 ) fmt . Printf ( \"The float is: %f\\n\" , ms . f1 ) fmt . Printf ( \"The string is: %s\\n\" , ms . str ) fmt . Println ( ms ) } \u8f93\u51fa\uff1a The int is: 10 The float is: 15.500000 The string is: Chris &{10 15.5 Chris} \u4f7f\u7528 fmt.Println() \u6253\u5370\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u9ed8\u8ba4\u8f93\u51fa\u53ef\u4ee5\u5f88\u597d\u7684\u663e\u793a\u5b83\u7684\u5185\u5bb9\uff0c\u7c7b\u4f3c\u4f7f\u7528 %v \u9009\u9879\u3002 \u5c31\u50cf\u5728\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u6240\u4f5c\u7684\u90a3\u6837\uff0c\u53ef\u4ee5\u4f7f\u7528\u70b9\u53f7\u7b26\u7ed9\u5b57\u6bb5\u8d4b\u503c\uff1a structname.fieldname = value \u3002 \u540c\u6837\u7684\uff0c\u4f7f\u7528\u70b9\u53f7\u7b26\u53ef\u4ee5\u83b7\u53d6\u7ed3\u6784\u4f53\u5b57\u6bb5\u7684\u503c\uff1a structname.fieldname \u3002 \u5728 Go \u8bed\u8a00\u4e2d\u8fd9\u53eb \u9009\u62e9\u5668 (selector) \u3002\u65e0\u8bba\u53d8\u91cf\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u8fd8\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u6307\u9488\uff0c\u90fd\u4f7f\u7528\u540c\u6837\u7684 \u9009\u62e9\u5668\u7b26 (selector-notation) \u6765\u5f15\u7528\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\uff1a type myStruct struct { i int } var v myStruct // v \u662f\u7ed3\u6784\u4f53\u7c7b\u578b\u53d8\u91cf var p * myStruct // p \u662f\u6307\u5411\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u53d8\u91cf\u7684\u6307\u9488 v . i p . i \u521d\u59cb\u5316\u4e00\u4e2a\u7ed3\u6784\u4f53\u5b9e\u4f8b\uff08\u4e00\u4e2a\u7ed3\u6784\u4f53\u5b57\u9762\u91cf\uff1astruct-literal\uff09\u7684\u66f4\u7b80\u77ed\u548c\u60ef\u7528\u7684\u65b9\u5f0f\u5982\u4e0b\uff1a ms := & struct1 { 10 , 15.5 , \"Chris\" } // \u6b64\u65f6 ms \u7684\u7c7b\u578b\u662f *struct1 \u6216\u8005\uff1a var ms struct1 ms = struct1 { 10 , 15.5 , \"Chris\" } \u6df7\u5408\u5b57\u9762\u91cf\u8bed\u6cd5 (composite literal syntax) &struct1{a, b, c} \u662f\u4e00\u79cd\u7b80\u5199\uff0c\u5e95\u5c42\u4ecd\u7136\u4f1a\u8c03\u7528 new() \uff0c\u8fd9\u91cc\u503c\u7684\u987a\u5e8f\u5fc5\u987b\u6309\u7167\u5b57\u6bb5\u987a\u5e8f\u6765\u5199\u3002\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\u80fd\u770b\u5230\u53ef\u4ee5\u901a\u8fc7\u5728\u503c\u7684\u524d\u9762\u653e\u4e0a\u5b57\u6bb5\u540d\u6765\u521d\u59cb\u5316\u5b57\u6bb5\u7684\u65b9\u5f0f\u3002\u8868\u8fbe\u5f0f new(Type) \u548c &Type{} \u662f\u7b49\u4ef7\u7684\u3002 \u65f6\u95f4\u95f4\u9694\uff08\u5f00\u59cb\u548c\u7ed3\u675f\u65f6\u95f4\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09\u662f\u4f7f\u7528\u7ed3\u6784\u4f53\u7684\u4e00\u4e2a\u5178\u578b\u4f8b\u5b50\uff1a type Interval struct { start int end int } \u521d\u59cb\u5316\u65b9\u5f0f\uff1a intr := Interval { 0 , 3 } ( A ) intr := Interval { end : 5 , start : 1 } ( B ) intr := Interval { end : 5 } ( C ) \u5728 (A) \u4e2d\uff0c\u503c\u5fc5\u987b\u4ee5\u5b57\u6bb5\u5728\u7ed3\u6784\u4f53\u5b9a\u4e49\u65f6\u7684\u987a\u5e8f\u7ed9\u51fa\uff0c & \u4e0d\u662f\u5fc5\u987b\u7684\u3002(B) \u663e\u793a\u4e86\u53e6\u4e00\u79cd\u65b9\u5f0f\uff0c\u5b57\u6bb5\u540d\u52a0\u4e00\u4e2a\u5192\u53f7\u653e\u5728\u503c\u7684\u524d\u9762\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u503c\u7684\u987a\u5e8f\u4e0d\u5fc5\u4e00\u81f4\uff0c\u5e76\u4e14\u67d0\u4e9b\u5b57\u6bb5\u8fd8\u53ef\u4ee5\u88ab\u5ffd\u7565\u6389\uff0c\u5c31\u50cf (C) \u4e2d\u90a3\u6837\u3002 \u7ed3\u6784\u4f53\u7c7b\u578b\u548c\u5b57\u6bb5\u7684\u547d\u540d\u9075\u5faa\u53ef\u89c1\u6027\u89c4\u5219\uff08\u7b2c 4.2 \u8282\uff09\uff0c\u4e00\u4e2a\u5bfc\u51fa\u7684\u7ed3\u6784\u4f53\u7c7b\u578b\u4e2d\u6709\u4e9b\u5b57\u6bb5\u662f\u5bfc\u51fa\u7684\uff0c\u53e6\u4e00\u4e9b\u4e0d\u662f\uff0c\u8fd9\u662f\u53ef\u80fd\u7684\u3002 \u4e0b\u56fe\u8bf4\u660e\u4e86\u7ed3\u6784\u4f53\u7c7b\u578b\u5b9e\u4f8b\u548c\u4e00\u4e2a\u6307\u5411\u5b83\u7684\u6307\u9488\u7684\u5185\u5b58\u5e03\u5c40\uff1a type Point struct { x , y int } \u4f7f\u7528 new() \u521d\u59cb\u5316\uff1a \u4f5c\u4e3a\u7ed3\u6784\u4f53\u5b57\u9762\u91cf\u521d\u59cb\u5316\uff1a \u7c7b\u578b struct1 \u5728\u5b9a\u4e49\u5b83\u7684\u5305 pack1 \u4e2d\u5fc5\u987b\u662f\u552f\u4e00\u7684\uff0c\u5b83\u7684\u5b8c\u5168\u7c7b\u578b\u540d\u662f\uff1a pack1.struct1 \u3002 \u4e0b\u9762\u7684\u4f8b\u5b50 Listing 10.2\u2014person.go \u663e\u793a\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53 Person \uff0c\u4e00\u4e2a\u65b9\u6cd5 upPerson() \uff0c\u65b9\u6cd5\u6709\u4e00\u4e2a\u7c7b\u578b\u4e3a *Person \u7684\u53c2\u6570\uff08\u56e0\u6b64\u5bf9\u8c61\u672c\u8eab\u662f\u53ef\u4ee5\u88ab\u6539\u53d8\u7684\uff09\uff0c\u4ee5\u53ca\u4e09\u79cd\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u7684\u4e0d\u540c\u65b9\u5f0f\uff1a package main import ( \"fmt\" \"strings\" ) type Person struct { firstName string lastName string } func upPerson ( p * Person ) { p . firstName = strings . ToUpper ( p . firstName ) p . lastName = strings . ToUpper ( p . lastName ) } func main () { // 1-struct as a value type: var pers1 Person pers1 . firstName = \"Chris\" pers1 . lastName = \"Woodward\" upPerson ( & pers1 ) fmt . Printf ( \"The name of the person is %s %s\\n\" , pers1 . firstName , pers1 . lastName ) // 2\u2014struct as a pointer: pers2 := new ( Person ) pers2 . firstName = \"Chris\" pers2 . lastName = \"Woodward\" ( * pers2 ). lastName = \"Woodward\" // \u8fd9\u662f\u5408\u6cd5\u7684 upPerson ( pers2 ) fmt . Printf ( \"The name of the person is %s %s\\n\" , pers2 . firstName , pers2 . lastName ) // 3\u2014struct as a literal: pers3 := & Person { \"Chris\" , \"Woodward\" } upPerson ( pers3 ) fmt . Printf ( \"The name of the person is %s %s\\n\" , pers3 . firstName , pers3 . lastName ) } \u8f93\u51fa\uff1a The name of the person is CHRIS WOODWARD The name of the person is CHRIS WOODWARD The name of the person is CHRIS WOODWARD \u5728\u4e0a\u9762\u4f8b\u5b50\u7684\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u6307\u9488\uff0c\u50cf pers2.lastName = \"Woodward\" \u8fd9\u6837\u7ed9\u7ed3\u6784\u4f53\u5b57\u6bb5\u8d4b\u503c\uff0c\u6ca1\u6709\u50cf C++ \u4e2d\u90a3\u6837\u9700\u8981\u4f7f\u7528 -> \u64cd\u4f5c\u7b26\uff0cGo \u4f1a\u81ea\u52a8\u505a\u8fd9\u6837\u7684\u8f6c\u6362\u3002 \u6ce8\u610f\u4e5f\u53ef\u4ee5\u901a\u8fc7\u89e3\u6307\u9488\u7684\u65b9\u5f0f\u6765\u8bbe\u7f6e\u503c\uff1a (*pers2).lastName = \"Woodward\" \u7ed3\u6784\u4f53\u7684\u5185\u5b58\u5e03\u5c40 Go \u8bed\u8a00\u4e2d\uff0c\u7ed3\u6784\u4f53\u548c\u5b83\u6240\u5305\u542b\u7684\u6570\u636e\u5728\u5185\u5b58\u4e2d\u662f\u4ee5\u8fde\u7eed\u5757\u7684\u5f62\u5f0f\u5b58\u5728\u7684\uff0c\u5373\u4f7f\u7ed3\u6784\u4f53\u4e2d\u5d4c\u5957\u6709\u5176\u4ed6\u7684\u7ed3\u6784\u4f53\uff0c\u8fd9\u5728\u6027\u80fd\u4e0a\u5e26\u6765\u4e86\u5f88\u5927\u7684\u4f18\u52bf\u3002\u4e0d\u50cf Java \u4e2d\u7684\u5f15\u7528\u7c7b\u578b\uff0c\u4e00\u4e2a\u5bf9\u8c61\u548c\u5b83\u91cc\u9762\u5305\u542b\u7684\u5bf9\u8c61\u53ef\u80fd\u4f1a\u5728\u4e0d\u540c\u7684\u5185\u5b58\u7a7a\u95f4\u4e2d\uff0c\u8fd9\u70b9\u548c Go \u8bed\u8a00\u4e2d\u7684\u6307\u9488\u5f88\u50cf\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u6e05\u6670\u5730\u8bf4\u660e\u4e86\u8fd9\u4e9b\u60c5\u51b5\uff1a type Rect1 struct { Min , Max Point } type Rect2 struct { Min , Max * Point } \u9012\u5f52\u7ed3\u6784\u4f53 \u7ed3\u6784\u4f53\u7c7b\u578b\u53ef\u4ee5\u901a\u8fc7\u5f15\u7528\u81ea\u8eab\u6765\u5b9a\u4e49\u3002\u8fd9\u5728\u5b9a\u4e49\u94fe\u8868\u6216\u4e8c\u53c9\u6811\u7684\u5143\u7d20\uff08\u901a\u5e38\u53eb\u8282\u70b9\uff09\u65f6\u7279\u522b\u6709\u7528\uff0c\u6b64\u65f6\u8282\u70b9\u5305\u542b\u6307\u5411\u4e34\u8fd1\u8282\u70b9\u7684\u94fe\u63a5\uff08\u5730\u5740\uff09\u3002\u5982\u4e0b\u6240\u793a\uff0c\u94fe\u8868\u4e2d\u7684 su \uff0c\u6811\u4e2d\u7684 ri \u548c le \u5206\u522b\u662f\u6307\u5411\u522b\u7684\u8282\u70b9\u7684\u6307\u9488\u3002 \u94fe\u8868\uff1a \u8fd9\u5757\u7684 data \u5b57\u6bb5\u7528\u4e8e\u5b58\u653e\u6709\u6548\u6570\u636e\uff08\u6bd4\u5982 float64 \uff09\uff0c su \u6307\u9488\u6307\u5411\u540e\u7ee7\u8282\u70b9\u3002 Go \u4ee3\u7801\uff1a type Node struct { data float64 su * Node } \u94fe\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u53eb head \uff0c\u5b83\u6307\u5411\u7b2c\u4e8c\u4e2a\u5143\u7d20\uff1b\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u53eb tail \uff0c\u5b83\u6ca1\u6709\u540e\u7ee7\u5143\u7d20\uff0c\u6240\u4ee5\u5b83\u7684 su \u4e3a nil \u503c\u3002\u5f53\u7136\u771f\u5b9e\u7684\u94fe\u63a5\u4f1a\u6709\u5f88\u591a\u6570\u636e\u8282\u70b9\uff0c\u5e76\u4e14\u94fe\u8868\u53ef\u4ee5\u52a8\u6001\u589e\u957f\u6216\u6536\u7f29\u3002 \u540c\u6837\u5730\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff0c\u5b83\u6709\u4e00\u4e2a\u524d\u8d8b\u8282\u70b9 pr \u548c\u4e00\u4e2a\u540e\u7ee7\u8282\u70b9 su \uff1a type Node struct { pr * Node data float64 su * Node } \u4e8c\u53c9\u6811\uff1a \u4e8c\u53c9\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u80fd\u94fe\u63a5\u81f3\u4e24\u4e2a\u8282\u70b9\uff1a\u5de6\u8282\u70b9 ( le ) \u548c\u53f3\u8282\u70b9 ( ri )\uff0c\u8fd9\u4e24\u4e2a\u8282\u70b9\u672c\u8eab\u53c8\u53ef\u4ee5\u6709\u5de6\u53f3\u8282\u70b9\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002\u6811\u7684\u9876\u5c42\u8282\u70b9\u53eb\u6839\u8282\u70b9 ( root )\uff0c\u5e95\u5c42\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u53eb\u53f6\u5b50\u8282\u70b9 ( leaves )\uff0c\u53f6\u5b50\u8282\u70b9\u7684 le \u548c ri \u6307\u9488\u4e3a nil \u503c\u3002\u5728 Go \u4e2d\u53ef\u4ee5\u5982\u4e0b\u5b9a\u4e49\u4e8c\u53c9\u6811\uff1a type Tree struct { le * Tree data float64 ri * Tree } \u7ed3\u6784\u4f53\u8f6c\u6362 Go \u4e2d\u7684\u7c7b\u578b\u8f6c\u6362\u9075\u5faa\u4e25\u683c\u7684\u89c4\u5219\u3002\u5f53\u4e3a\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e86\u4e00\u4e2a alias \u7c7b\u578b\u65f6\uff0c\u6b64\u7ed3\u6784\u4f53\u7c7b\u578b\u548c\u5b83\u7684 alias \u7c7b\u578b\u90fd\u6709\u76f8\u540c\u7684\u5e95\u5c42\u7c7b\u578b\uff0c\u5b83\u4eec\u53ef\u4ee5\u5982\u793a\u4f8b 10.3 \u90a3\u6837\u4e92\u76f8\u8f6c\u6362\uff0c\u540c\u65f6\u9700\u8981\u6ce8\u610f\u5176\u4e2d\u975e\u6cd5\u8d4b\u503c\u6216\u8f6c\u6362\u5f15\u8d77\u7684\u7f16\u8bd1\u9519\u8bef\u3002 \u793a\u4f8b 10.3\uff1a package main import \"fmt\" type number struct { f float32 } type nr number // alias type func main () { a := number { 5.0 } b := nr { 5.0 } // var i float32 = b // compile-error: cannot use b (type nr) as type float32 in assignment // var i = float32(b) // compile-error: cannot convert b (type nr) to type float32 // var c number = b // compile-error: cannot use b (type nr) as type number in assignment // needs a conversion: var c = number ( b ) fmt . Println ( a , b , c ) } \u8f93\u51fa\uff1a {5} {5} {5} \u7ec3\u4e60 10.1 vcard.go \uff1a \u5b9a\u4e49\u7ed3\u6784\u4f53 Address \u548c VCard \uff0c\u540e\u8005\u5305\u542b\u4e00\u4e2a\u4eba\u7684\u540d\u5b57\u3001\u5730\u5740\u7f16\u53f7\u3001\u51fa\u751f\u65e5\u671f\u548c\u56fe\u50cf\uff0c\u8bd5\u7740\u9009\u62e9\u6b63\u786e\u7684\u6570\u636e\u7c7b\u578b\u3002\u6784\u5efa\u4e00\u4e2a\u81ea\u5df1\u7684 vcard \u5e76\u6253\u5370\u5b83\u7684\u5185\u5bb9\u3002 \u63d0\u793a\uff1a VCard \u5fc5\u987b\u5305\u542b\u4f4f\u5740\uff0c\u5b83\u5e94\u8be5\u4ee5\u503c\u7c7b\u578b\u8fd8\u662f\u4ee5\u6307\u9488\u7c7b\u578b\u653e\u5728 VCard \u4e2d\u5462\uff1f \u7b2c\u4e8c\u79cd\u4f1a\u597d\u70b9\uff0c\u56e0\u4e3a\u5b83\u5360\u7528\u5185\u5b58\u5c11\u3002\u5305\u542b\u4e00\u4e2a\u540d\u5b57\u548c\u4e24\u4e2a\u6307\u5411\u5730\u5740\u7684\u6307\u9488\u7684 Address \u7ed3\u6784\u4f53\u53ef\u4ee5\u4f7f\u7528 %v \u6253\u5370\uff1a {Kersschot 0x126d2b80 0x126d2be0} \u7ec3\u4e60 10.2 personex1.go \uff1a \u4fee\u6539 personex1.go\uff0c\u4f7f\u5b83\u7684\u53c2\u6570 upPerson \u4e0d\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u89e3\u91ca\u4e0b\u4e8c\u8005\u7684\u533a\u522b\u3002 \u7ec3\u4e60 10.3 point.go \uff1a \u4f7f\u7528\u5750\u6807 X \u3001 Y \u5b9a\u4e49\u4e00\u4e2a\u4e8c\u7ef4 Point \u7ed3\u6784\u4f53\u3002\u540c\u6837\u5730\uff0c\u5bf9\u4e00\u4e2a\u4e09\u7ef4\u70b9\u4f7f\u7528\u5b83\u7684\u6781\u5750\u6807\u5b9a\u4e49\u4e00\u4e2a Polar \u7ed3\u6784\u4f53\u3002\u5b9e\u73b0\u4e00\u4e2a Abs() \u65b9\u6cd5\u6765\u8ba1\u7b97\u4e00\u4e2a Point \u8868\u793a\u7684\u5411\u91cf\u7684\u957f\u5ea6\uff0c\u5b9e\u73b0\u4e00\u4e2a Scale() \u65b9\u6cd5\uff0c\u5b83\u5c06\u70b9\u7684\u5750\u6807\u4e58\u4ee5\u4e00\u4e2a\u5c3a\u5ea6\u56e0\u5b50\uff08\u63d0\u793a\uff1a\u4f7f\u7528 math \u5305\u91cc\u7684 Sqrt() \u51fd\u6570\uff09(function Scale that multiplies the coordinates of a point with a scale factor)\u3002 \u7ec3\u4e60 10.4 rectangle.go \uff1a \u5b9a\u4e49\u4e00\u4e2a Rectangle \u7ed3\u6784\u4f53\uff0c\u5b83\u7684\u957f\u548c\u5bbd\u662f int \u7c7b\u578b\uff0c\u5e76\u5b9a\u4e49\u65b9\u6cd5 Area() \u548c Perimeter() \uff0c\u7136\u540e\u8fdb\u884c\u6d4b\u8bd5\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7ed3\u6784 (struct) \u4e0e\u65b9\u6cd5 (method) \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528\u5de5\u5382\u65b9\u6cd5\u521b\u5efa\u7ed3\u6784\u4f53","title":"10.1 \u7ed3\u6784\u4f53\u5b9a\u4e49"},{"location":"10.1/#101","text":"\u7ed3\u6784\u4f53\u5b9a\u4e49\u7684\u4e00\u822c\u65b9\u5f0f\u5982\u4e0b\uff1a type identifier struct { field1 type1 field2 type2 ... } type T struct {a, b int} \u4e5f\u662f\u5408\u6cd5\u7684\u8bed\u6cd5\uff0c\u5b83\u66f4\u9002\u7528\u4e8e\u7b80\u5355\u7684\u7ed3\u6784\u4f53\u3002 \u7ed3\u6784\u4f53\u91cc\u7684\u5b57\u6bb5\u90fd\u6709 \u540d\u5b57 \uff0c\u50cf field1 \u3001 field2 \u7b49\uff0c\u5982\u679c\u5b57\u6bb5\u5728\u4ee3\u7801\u4e2d\u4ece\u6765\u4e5f\u4e0d\u4f1a\u88ab\u7528\u5230\uff0c\u90a3\u4e48\u53ef\u4ee5\u547d\u540d\u5b83\u4e3a _ \u3002 \u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\uff0c\u751a\u81f3\u662f\u7ed3\u6784\u4f53\u672c\u8eab\uff08\u53c2\u8003\u7b2c 10.5 \u8282\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f\u51fd\u6570\u6216\u8005\u63a5\u53e3\uff08\u53c2\u8003 \u7b2c 11 \u7ae0 \uff09\u3002\u53ef\u4ee5\u58f0\u660e\u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u4e00\u4e2a\u53d8\u91cf\uff0c\u7136\u540e\u50cf\u4e0b\u9762\u8fd9\u6837\u7ed9\u5b83\u7684\u5b57\u6bb5\u8d4b\u503c\uff1a var s T s . a = 5 s . b = 8 \u6570\u7ec4\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u79cd\u7ed3\u6784\u4f53\u7c7b\u578b\uff0c\u4e0d\u8fc7\u5b83\u4f7f\u7528\u4e0b\u6807\u800c\u4e0d\u662f\u5177\u540d\u7684\u5b57\u6bb5\u3002 \u4f7f\u7528 new() \u4f7f\u7528 new() \u51fd\u6570\u7ed9\u4e00\u4e2a\u65b0\u7684\u7ed3\u6784\u4f53\u53d8\u91cf\u5206\u914d\u5185\u5b58\uff0c\u5b83\u8fd4\u56de\u6307\u5411\u5df2\u5206\u914d\u5185\u5b58\u7684\u6307\u9488\uff1a var t *T = new(T) \uff0c\u5982\u679c\u9700\u8981\u53ef\u4ee5\u628a\u8fd9\u6761\u8bed\u53e5\u653e\u5728\u4e0d\u540c\u7684\u884c\uff08\u6bd4\u5982\u5b9a\u4e49\u662f\u5305\u8303\u56f4\u7684\uff0c\u4f46\u662f\u5206\u914d\u5374\u6ca1\u6709\u5fc5\u8981\u5728\u5f00\u59cb\u5c31\u505a\uff09\u3002 var t * T t = new ( T ) \u5199\u8fd9\u6761\u8bed\u53e5\u7684\u60ef\u7528\u65b9\u6cd5\u662f\uff1a t := new(T) \uff0c\u53d8\u91cf t \u662f\u4e00\u4e2a\u6307\u5411 T \u7684\u6307\u9488\uff0c\u6b64\u65f6\u7ed3\u6784\u4f53\u5b57\u6bb5\u7684\u503c\u662f\u5b83\u4eec\u6240\u5c5e\u7c7b\u578b\u7684\u96f6\u503c\u3002 \u58f0\u660e var t T \u4e5f\u4f1a\u7ed9 t \u5206\u914d\u5185\u5b58\uff0c\u5e76\u96f6\u503c\u5316\u5185\u5b58\uff0c\u4f46\u662f\u8fd9\u4e2a\u65f6\u5019 t \u662f\u7c7b\u578b T \u3002\u5728\u8fd9\u4e24\u79cd\u65b9\u5f0f\u4e2d\uff0c t \u901a\u5e38\u88ab\u79f0\u505a\u7c7b\u578b T \u7684\u4e00\u4e2a\u5b9e\u4f8b (instance) \u6216\u5bf9\u8c61 (object)\u3002 \u793a\u4f8b 10.1 structs_fields.go \u7ed9\u51fa\u4e86\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u4f8b\u5b50\uff1a package main import \"fmt\" type struct1 struct { i1 int f1 float32 str string } func main () { ms := new ( struct1 ) ms . i1 = 10 ms . f1 = 15.5 ms . str = \"Chris\" fmt . Printf ( \"The int is: %d\\n\" , ms . i1 ) fmt . Printf ( \"The float is: %f\\n\" , ms . f1 ) fmt . Printf ( \"The string is: %s\\n\" , ms . str ) fmt . Println ( ms ) } \u8f93\u51fa\uff1a The int is: 10 The float is: 15.500000 The string is: Chris &{10 15.5 Chris} \u4f7f\u7528 fmt.Println() \u6253\u5370\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u9ed8\u8ba4\u8f93\u51fa\u53ef\u4ee5\u5f88\u597d\u7684\u663e\u793a\u5b83\u7684\u5185\u5bb9\uff0c\u7c7b\u4f3c\u4f7f\u7528 %v \u9009\u9879\u3002 \u5c31\u50cf\u5728\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u6240\u4f5c\u7684\u90a3\u6837\uff0c\u53ef\u4ee5\u4f7f\u7528\u70b9\u53f7\u7b26\u7ed9\u5b57\u6bb5\u8d4b\u503c\uff1a structname.fieldname = value \u3002 \u540c\u6837\u7684\uff0c\u4f7f\u7528\u70b9\u53f7\u7b26\u53ef\u4ee5\u83b7\u53d6\u7ed3\u6784\u4f53\u5b57\u6bb5\u7684\u503c\uff1a structname.fieldname \u3002 \u5728 Go \u8bed\u8a00\u4e2d\u8fd9\u53eb \u9009\u62e9\u5668 (selector) \u3002\u65e0\u8bba\u53d8\u91cf\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u8fd8\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u6307\u9488\uff0c\u90fd\u4f7f\u7528\u540c\u6837\u7684 \u9009\u62e9\u5668\u7b26 (selector-notation) \u6765\u5f15\u7528\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\uff1a type myStruct struct { i int } var v myStruct // v \u662f\u7ed3\u6784\u4f53\u7c7b\u578b\u53d8\u91cf var p * myStruct // p \u662f\u6307\u5411\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u53d8\u91cf\u7684\u6307\u9488 v . i p . i \u521d\u59cb\u5316\u4e00\u4e2a\u7ed3\u6784\u4f53\u5b9e\u4f8b\uff08\u4e00\u4e2a\u7ed3\u6784\u4f53\u5b57\u9762\u91cf\uff1astruct-literal\uff09\u7684\u66f4\u7b80\u77ed\u548c\u60ef\u7528\u7684\u65b9\u5f0f\u5982\u4e0b\uff1a ms := & struct1 { 10 , 15.5 , \"Chris\" } // \u6b64\u65f6 ms \u7684\u7c7b\u578b\u662f *struct1 \u6216\u8005\uff1a var ms struct1 ms = struct1 { 10 , 15.5 , \"Chris\" } \u6df7\u5408\u5b57\u9762\u91cf\u8bed\u6cd5 (composite literal syntax) &struct1{a, b, c} \u662f\u4e00\u79cd\u7b80\u5199\uff0c\u5e95\u5c42\u4ecd\u7136\u4f1a\u8c03\u7528 new() \uff0c\u8fd9\u91cc\u503c\u7684\u987a\u5e8f\u5fc5\u987b\u6309\u7167\u5b57\u6bb5\u987a\u5e8f\u6765\u5199\u3002\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\u80fd\u770b\u5230\u53ef\u4ee5\u901a\u8fc7\u5728\u503c\u7684\u524d\u9762\u653e\u4e0a\u5b57\u6bb5\u540d\u6765\u521d\u59cb\u5316\u5b57\u6bb5\u7684\u65b9\u5f0f\u3002\u8868\u8fbe\u5f0f new(Type) \u548c &Type{} \u662f\u7b49\u4ef7\u7684\u3002 \u65f6\u95f4\u95f4\u9694\uff08\u5f00\u59cb\u548c\u7ed3\u675f\u65f6\u95f4\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09\u662f\u4f7f\u7528\u7ed3\u6784\u4f53\u7684\u4e00\u4e2a\u5178\u578b\u4f8b\u5b50\uff1a type Interval struct { start int end int } \u521d\u59cb\u5316\u65b9\u5f0f\uff1a intr := Interval { 0 , 3 } ( A ) intr := Interval { end : 5 , start : 1 } ( B ) intr := Interval { end : 5 } ( C ) \u5728 (A) \u4e2d\uff0c\u503c\u5fc5\u987b\u4ee5\u5b57\u6bb5\u5728\u7ed3\u6784\u4f53\u5b9a\u4e49\u65f6\u7684\u987a\u5e8f\u7ed9\u51fa\uff0c & \u4e0d\u662f\u5fc5\u987b\u7684\u3002(B) \u663e\u793a\u4e86\u53e6\u4e00\u79cd\u65b9\u5f0f\uff0c\u5b57\u6bb5\u540d\u52a0\u4e00\u4e2a\u5192\u53f7\u653e\u5728\u503c\u7684\u524d\u9762\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u503c\u7684\u987a\u5e8f\u4e0d\u5fc5\u4e00\u81f4\uff0c\u5e76\u4e14\u67d0\u4e9b\u5b57\u6bb5\u8fd8\u53ef\u4ee5\u88ab\u5ffd\u7565\u6389\uff0c\u5c31\u50cf (C) \u4e2d\u90a3\u6837\u3002 \u7ed3\u6784\u4f53\u7c7b\u578b\u548c\u5b57\u6bb5\u7684\u547d\u540d\u9075\u5faa\u53ef\u89c1\u6027\u89c4\u5219\uff08\u7b2c 4.2 \u8282\uff09\uff0c\u4e00\u4e2a\u5bfc\u51fa\u7684\u7ed3\u6784\u4f53\u7c7b\u578b\u4e2d\u6709\u4e9b\u5b57\u6bb5\u662f\u5bfc\u51fa\u7684\uff0c\u53e6\u4e00\u4e9b\u4e0d\u662f\uff0c\u8fd9\u662f\u53ef\u80fd\u7684\u3002 \u4e0b\u56fe\u8bf4\u660e\u4e86\u7ed3\u6784\u4f53\u7c7b\u578b\u5b9e\u4f8b\u548c\u4e00\u4e2a\u6307\u5411\u5b83\u7684\u6307\u9488\u7684\u5185\u5b58\u5e03\u5c40\uff1a type Point struct { x , y int } \u4f7f\u7528 new() \u521d\u59cb\u5316\uff1a \u4f5c\u4e3a\u7ed3\u6784\u4f53\u5b57\u9762\u91cf\u521d\u59cb\u5316\uff1a \u7c7b\u578b struct1 \u5728\u5b9a\u4e49\u5b83\u7684\u5305 pack1 \u4e2d\u5fc5\u987b\u662f\u552f\u4e00\u7684\uff0c\u5b83\u7684\u5b8c\u5168\u7c7b\u578b\u540d\u662f\uff1a pack1.struct1 \u3002 \u4e0b\u9762\u7684\u4f8b\u5b50 Listing 10.2\u2014person.go \u663e\u793a\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53 Person \uff0c\u4e00\u4e2a\u65b9\u6cd5 upPerson() \uff0c\u65b9\u6cd5\u6709\u4e00\u4e2a\u7c7b\u578b\u4e3a *Person \u7684\u53c2\u6570\uff08\u56e0\u6b64\u5bf9\u8c61\u672c\u8eab\u662f\u53ef\u4ee5\u88ab\u6539\u53d8\u7684\uff09\uff0c\u4ee5\u53ca\u4e09\u79cd\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u7684\u4e0d\u540c\u65b9\u5f0f\uff1a package main import ( \"fmt\" \"strings\" ) type Person struct { firstName string lastName string } func upPerson ( p * Person ) { p . firstName = strings . ToUpper ( p . firstName ) p . lastName = strings . ToUpper ( p . lastName ) } func main () { // 1-struct as a value type: var pers1 Person pers1 . firstName = \"Chris\" pers1 . lastName = \"Woodward\" upPerson ( & pers1 ) fmt . Printf ( \"The name of the person is %s %s\\n\" , pers1 . firstName , pers1 . lastName ) // 2\u2014struct as a pointer: pers2 := new ( Person ) pers2 . firstName = \"Chris\" pers2 . lastName = \"Woodward\" ( * pers2 ). lastName = \"Woodward\" // \u8fd9\u662f\u5408\u6cd5\u7684 upPerson ( pers2 ) fmt . Printf ( \"The name of the person is %s %s\\n\" , pers2 . firstName , pers2 . lastName ) // 3\u2014struct as a literal: pers3 := & Person { \"Chris\" , \"Woodward\" } upPerson ( pers3 ) fmt . Printf ( \"The name of the person is %s %s\\n\" , pers3 . firstName , pers3 . lastName ) } \u8f93\u51fa\uff1a The name of the person is CHRIS WOODWARD The name of the person is CHRIS WOODWARD The name of the person is CHRIS WOODWARD \u5728\u4e0a\u9762\u4f8b\u5b50\u7684\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u6307\u9488\uff0c\u50cf pers2.lastName = \"Woodward\" \u8fd9\u6837\u7ed9\u7ed3\u6784\u4f53\u5b57\u6bb5\u8d4b\u503c\uff0c\u6ca1\u6709\u50cf C++ \u4e2d\u90a3\u6837\u9700\u8981\u4f7f\u7528 -> \u64cd\u4f5c\u7b26\uff0cGo \u4f1a\u81ea\u52a8\u505a\u8fd9\u6837\u7684\u8f6c\u6362\u3002 \u6ce8\u610f\u4e5f\u53ef\u4ee5\u901a\u8fc7\u89e3\u6307\u9488\u7684\u65b9\u5f0f\u6765\u8bbe\u7f6e\u503c\uff1a (*pers2).lastName = \"Woodward\" \u7ed3\u6784\u4f53\u7684\u5185\u5b58\u5e03\u5c40 Go \u8bed\u8a00\u4e2d\uff0c\u7ed3\u6784\u4f53\u548c\u5b83\u6240\u5305\u542b\u7684\u6570\u636e\u5728\u5185\u5b58\u4e2d\u662f\u4ee5\u8fde\u7eed\u5757\u7684\u5f62\u5f0f\u5b58\u5728\u7684\uff0c\u5373\u4f7f\u7ed3\u6784\u4f53\u4e2d\u5d4c\u5957\u6709\u5176\u4ed6\u7684\u7ed3\u6784\u4f53\uff0c\u8fd9\u5728\u6027\u80fd\u4e0a\u5e26\u6765\u4e86\u5f88\u5927\u7684\u4f18\u52bf\u3002\u4e0d\u50cf Java \u4e2d\u7684\u5f15\u7528\u7c7b\u578b\uff0c\u4e00\u4e2a\u5bf9\u8c61\u548c\u5b83\u91cc\u9762\u5305\u542b\u7684\u5bf9\u8c61\u53ef\u80fd\u4f1a\u5728\u4e0d\u540c\u7684\u5185\u5b58\u7a7a\u95f4\u4e2d\uff0c\u8fd9\u70b9\u548c Go \u8bed\u8a00\u4e2d\u7684\u6307\u9488\u5f88\u50cf\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u6e05\u6670\u5730\u8bf4\u660e\u4e86\u8fd9\u4e9b\u60c5\u51b5\uff1a type Rect1 struct { Min , Max Point } type Rect2 struct { Min , Max * Point } \u9012\u5f52\u7ed3\u6784\u4f53 \u7ed3\u6784\u4f53\u7c7b\u578b\u53ef\u4ee5\u901a\u8fc7\u5f15\u7528\u81ea\u8eab\u6765\u5b9a\u4e49\u3002\u8fd9\u5728\u5b9a\u4e49\u94fe\u8868\u6216\u4e8c\u53c9\u6811\u7684\u5143\u7d20\uff08\u901a\u5e38\u53eb\u8282\u70b9\uff09\u65f6\u7279\u522b\u6709\u7528\uff0c\u6b64\u65f6\u8282\u70b9\u5305\u542b\u6307\u5411\u4e34\u8fd1\u8282\u70b9\u7684\u94fe\u63a5\uff08\u5730\u5740\uff09\u3002\u5982\u4e0b\u6240\u793a\uff0c\u94fe\u8868\u4e2d\u7684 su \uff0c\u6811\u4e2d\u7684 ri \u548c le \u5206\u522b\u662f\u6307\u5411\u522b\u7684\u8282\u70b9\u7684\u6307\u9488\u3002 \u94fe\u8868\uff1a \u8fd9\u5757\u7684 data \u5b57\u6bb5\u7528\u4e8e\u5b58\u653e\u6709\u6548\u6570\u636e\uff08\u6bd4\u5982 float64 \uff09\uff0c su \u6307\u9488\u6307\u5411\u540e\u7ee7\u8282\u70b9\u3002 Go \u4ee3\u7801\uff1a type Node struct { data float64 su * Node } \u94fe\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u53eb head \uff0c\u5b83\u6307\u5411\u7b2c\u4e8c\u4e2a\u5143\u7d20\uff1b\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u53eb tail \uff0c\u5b83\u6ca1\u6709\u540e\u7ee7\u5143\u7d20\uff0c\u6240\u4ee5\u5b83\u7684 su \u4e3a nil \u503c\u3002\u5f53\u7136\u771f\u5b9e\u7684\u94fe\u63a5\u4f1a\u6709\u5f88\u591a\u6570\u636e\u8282\u70b9\uff0c\u5e76\u4e14\u94fe\u8868\u53ef\u4ee5\u52a8\u6001\u589e\u957f\u6216\u6536\u7f29\u3002 \u540c\u6837\u5730\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff0c\u5b83\u6709\u4e00\u4e2a\u524d\u8d8b\u8282\u70b9 pr \u548c\u4e00\u4e2a\u540e\u7ee7\u8282\u70b9 su \uff1a type Node struct { pr * Node data float64 su * Node } \u4e8c\u53c9\u6811\uff1a \u4e8c\u53c9\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u80fd\u94fe\u63a5\u81f3\u4e24\u4e2a\u8282\u70b9\uff1a\u5de6\u8282\u70b9 ( le ) \u548c\u53f3\u8282\u70b9 ( ri )\uff0c\u8fd9\u4e24\u4e2a\u8282\u70b9\u672c\u8eab\u53c8\u53ef\u4ee5\u6709\u5de6\u53f3\u8282\u70b9\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002\u6811\u7684\u9876\u5c42\u8282\u70b9\u53eb\u6839\u8282\u70b9 ( root )\uff0c\u5e95\u5c42\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u53eb\u53f6\u5b50\u8282\u70b9 ( leaves )\uff0c\u53f6\u5b50\u8282\u70b9\u7684 le \u548c ri \u6307\u9488\u4e3a nil \u503c\u3002\u5728 Go \u4e2d\u53ef\u4ee5\u5982\u4e0b\u5b9a\u4e49\u4e8c\u53c9\u6811\uff1a type Tree struct { le * Tree data float64 ri * Tree } \u7ed3\u6784\u4f53\u8f6c\u6362 Go \u4e2d\u7684\u7c7b\u578b\u8f6c\u6362\u9075\u5faa\u4e25\u683c\u7684\u89c4\u5219\u3002\u5f53\u4e3a\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e86\u4e00\u4e2a alias \u7c7b\u578b\u65f6\uff0c\u6b64\u7ed3\u6784\u4f53\u7c7b\u578b\u548c\u5b83\u7684 alias \u7c7b\u578b\u90fd\u6709\u76f8\u540c\u7684\u5e95\u5c42\u7c7b\u578b\uff0c\u5b83\u4eec\u53ef\u4ee5\u5982\u793a\u4f8b 10.3 \u90a3\u6837\u4e92\u76f8\u8f6c\u6362\uff0c\u540c\u65f6\u9700\u8981\u6ce8\u610f\u5176\u4e2d\u975e\u6cd5\u8d4b\u503c\u6216\u8f6c\u6362\u5f15\u8d77\u7684\u7f16\u8bd1\u9519\u8bef\u3002 \u793a\u4f8b 10.3\uff1a package main import \"fmt\" type number struct { f float32 } type nr number // alias type func main () { a := number { 5.0 } b := nr { 5.0 } // var i float32 = b // compile-error: cannot use b (type nr) as type float32 in assignment // var i = float32(b) // compile-error: cannot convert b (type nr) to type float32 // var c number = b // compile-error: cannot use b (type nr) as type number in assignment // needs a conversion: var c = number ( b ) fmt . Println ( a , b , c ) } \u8f93\u51fa\uff1a {5} {5} {5} \u7ec3\u4e60 10.1 vcard.go \uff1a \u5b9a\u4e49\u7ed3\u6784\u4f53 Address \u548c VCard \uff0c\u540e\u8005\u5305\u542b\u4e00\u4e2a\u4eba\u7684\u540d\u5b57\u3001\u5730\u5740\u7f16\u53f7\u3001\u51fa\u751f\u65e5\u671f\u548c\u56fe\u50cf\uff0c\u8bd5\u7740\u9009\u62e9\u6b63\u786e\u7684\u6570\u636e\u7c7b\u578b\u3002\u6784\u5efa\u4e00\u4e2a\u81ea\u5df1\u7684 vcard \u5e76\u6253\u5370\u5b83\u7684\u5185\u5bb9\u3002 \u63d0\u793a\uff1a VCard \u5fc5\u987b\u5305\u542b\u4f4f\u5740\uff0c\u5b83\u5e94\u8be5\u4ee5\u503c\u7c7b\u578b\u8fd8\u662f\u4ee5\u6307\u9488\u7c7b\u578b\u653e\u5728 VCard \u4e2d\u5462\uff1f \u7b2c\u4e8c\u79cd\u4f1a\u597d\u70b9\uff0c\u56e0\u4e3a\u5b83\u5360\u7528\u5185\u5b58\u5c11\u3002\u5305\u542b\u4e00\u4e2a\u540d\u5b57\u548c\u4e24\u4e2a\u6307\u5411\u5730\u5740\u7684\u6307\u9488\u7684 Address \u7ed3\u6784\u4f53\u53ef\u4ee5\u4f7f\u7528 %v \u6253\u5370\uff1a {Kersschot 0x126d2b80 0x126d2be0} \u7ec3\u4e60 10.2 personex1.go \uff1a \u4fee\u6539 personex1.go\uff0c\u4f7f\u5b83\u7684\u53c2\u6570 upPerson \u4e0d\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u89e3\u91ca\u4e0b\u4e8c\u8005\u7684\u533a\u522b\u3002 \u7ec3\u4e60 10.3 point.go \uff1a \u4f7f\u7528\u5750\u6807 X \u3001 Y \u5b9a\u4e49\u4e00\u4e2a\u4e8c\u7ef4 Point \u7ed3\u6784\u4f53\u3002\u540c\u6837\u5730\uff0c\u5bf9\u4e00\u4e2a\u4e09\u7ef4\u70b9\u4f7f\u7528\u5b83\u7684\u6781\u5750\u6807\u5b9a\u4e49\u4e00\u4e2a Polar \u7ed3\u6784\u4f53\u3002\u5b9e\u73b0\u4e00\u4e2a Abs() \u65b9\u6cd5\u6765\u8ba1\u7b97\u4e00\u4e2a Point \u8868\u793a\u7684\u5411\u91cf\u7684\u957f\u5ea6\uff0c\u5b9e\u73b0\u4e00\u4e2a Scale() \u65b9\u6cd5\uff0c\u5b83\u5c06\u70b9\u7684\u5750\u6807\u4e58\u4ee5\u4e00\u4e2a\u5c3a\u5ea6\u56e0\u5b50\uff08\u63d0\u793a\uff1a\u4f7f\u7528 math \u5305\u91cc\u7684 Sqrt() \u51fd\u6570\uff09(function Scale that multiplies the coordinates of a point with a scale factor)\u3002 \u7ec3\u4e60 10.4 rectangle.go \uff1a \u5b9a\u4e49\u4e00\u4e2a Rectangle \u7ed3\u6784\u4f53\uff0c\u5b83\u7684\u957f\u548c\u5bbd\u662f int \u7c7b\u578b\uff0c\u5e76\u5b9a\u4e49\u65b9\u6cd5 Area() \u548c Perimeter() \uff0c\u7136\u540e\u8fdb\u884c\u6d4b\u8bd5\u3002","title":"10.1 \u7ed3\u6784\u4f53\u5b9a\u4e49"},{"location":"10.1/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7ed3\u6784 (struct) \u4e0e\u65b9\u6cd5 (method) \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528\u5de5\u5382\u65b9\u6cd5\u521b\u5efa\u7ed3\u6784\u4f53","title":"\u94fe\u63a5"},{"location":"10.2/","text":"10.2 \u4f7f\u7528\u5de5\u5382\u65b9\u6cd5\u521b\u5efa\u7ed3\u6784\u4f53\u5b9e\u4f8b \u00b6 10.2.1 \u7ed3\u6784\u4f53\u5de5\u5382 \u00b6 Go \u8bed\u8a00\u4e0d\u652f\u6301\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8bed\u8a00\u4e2d\u90a3\u6837\u7684\u6784\u9020\u5b50\u65b9\u6cd5\uff0c\u4f46\u662f\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5728 Go \u4e2d\u5b9e\u73b0 \u201c\u6784\u9020\u5b50\u5de5\u5382\u201d\u65b9\u6cd5\u3002\u4e3a\u4e86\u65b9\u4fbf\u901a\u5e38\u4f1a\u4e3a\u7c7b\u578b\u5b9a\u4e49\u4e00\u4e2a\u5de5\u5382\uff0c\u6309\u60ef\u4f8b\uff0c\u5de5\u5382\u7684\u540d\u5b57\u4ee5 new... \u6216 New... \u5f00\u5934\u3002\u5047\u8bbe\u5b9a\u4e49\u4e86\u5982\u4e0b\u7684 File \u7ed3\u6784\u4f53\u7c7b\u578b\uff1a type File struct { fd int // \u6587\u4ef6\u63cf\u8ff0\u7b26 name string // \u6587\u4ef6\u540d } \u4e0b\u9762\u662f\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u5bf9\u5e94\u7684\u5de5\u5382\u65b9\u6cd5\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u7ed3\u6784\u4f53\u5b9e\u4f8b\u7684\u6307\u9488\uff1a func NewFile ( fd int , name string ) * File { if fd < 0 { return nil } return & File { fd , name } } \u7136\u540e\u8fd9\u6837\u8c03\u7528\u5b83\uff1a f := NewFile ( 10 , \"./test.txt\" ) \u5728 Go \u8bed\u8a00\u4e2d\u5e38\u5e38\u50cf\u4e0a\u9762\u8fd9\u6837\u5728\u5de5\u5382\u65b9\u6cd5\u91cc\u4f7f\u7528\u521d\u59cb\u5316\u6765\u7b80\u4fbf\u7684\u5b9e\u73b0\u6784\u9020\u51fd\u6570\u3002 \u5982\u679c File \u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\uff0c\u90a3\u4e48\u8868\u8fbe\u5f0f new(File) \u548c &File{} \u662f\u7b49\u4ef7\u7684\u3002 \u8fd9\u53ef\u4ee5\u548c\u5927\u591a\u6570\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7b28\u62d9\u7684\u521d\u59cb\u5316\u65b9\u5f0f\u505a\u4e2a\u6bd4\u8f83\uff1a File f = new File(...) \u3002 \u6211\u4eec\u53ef\u4ee5\u8bf4\u662f\u5de5\u5382\u5b9e\u4f8b\u5316\u4e86\u7c7b\u578b\u7684\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5c31\u50cf\u5728\u57fa\u4e8e\u7c7b\u7684 OO \u8bed\u8a00\u4e2d\u90a3\u6837\u3002 \u5982\u679c\u60f3\u77e5\u9053\u7ed3\u6784\u4f53\u7c7b\u578b T \u7684\u4e00\u4e2a\u5b9e\u4f8b\u5360\u7528\u4e86\u591a\u5c11\u5185\u5b58\uff0c\u53ef\u4ee5\u4f7f\u7528\uff1a size := unsafe.Sizeof(T{}) \u3002 \u5982\u4f55\u5f3a\u5236\u4f7f\u7528\u5de5\u5382\u65b9\u6cd5 \u901a\u8fc7\u5e94\u7528\u53ef\u89c1\u6027\u89c4\u5219\u53c2\u8003 4.2.1\u8282 \u3001 9.5 \u8282 \u5c31\u53ef\u4ee5\u7981\u6b62\u4f7f\u7528 new() \u51fd\u6570\uff0c\u5f3a\u5236\u7528\u6237\u4f7f\u7528\u5de5\u5382\u65b9\u6cd5\uff0c\u4ece\u800c\u4f7f\u7c7b\u578b\u53d8\u6210\u79c1\u6709\u7684\uff0c\u5c31\u50cf\u5728\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u4e2d\u90a3\u6837\u3002 type matrix struct { ... } func NewMatrix ( params ) * matrix { m := new ( matrix ) // \u521d\u59cb\u5316 m return m } \u5728\u5176\u4ed6\u5305\u91cc\u4f7f\u7528\u5de5\u5382\u65b9\u6cd5\uff1a package main import \"matrix\" ... wrong := new ( matrix . matrix ) // \u7f16\u8bd1\u5931\u8d25\uff08matrix \u662f\u79c1\u6709\u7684\uff09 right := matrix . NewMatrix ( ... ) // \u5b9e\u4f8b\u5316 matrix \u7684\u552f\u4e00\u65b9\u5f0f 10.2.2 map \u548c struct vs new() \u548c make() \u00b6 new() \u548c make() \u8fd9\u4e24\u4e2a\u5185\u7f6e\u51fd\u6570\u5df2\u7ecf\u5728\u7b2c 7.2.4 \u8282\u901a\u8fc7\u5207\u7247\u7684\u4f8b\u5b50\u8bf4\u660e\u8fc7\u4e00\u6b21\u3002 \u73b0\u5728\u4e3a\u6b62\u6211\u4eec\u5df2\u7ecf\u89c1\u5230\u4e86\u53ef\u4ee5\u4f7f\u7528 make() \u7684\u4e09\u79cd\u7c7b\u578b\u4e2d\u7684\u5176\u4e2d\u4e24\u4e2a\uff1a slices / maps / channels\uff08\u89c1\u7b2c 14 \u7ae0\uff09 \u4e0b\u9762\u7684\u4f8b\u5b50\u8bf4\u660e\u4e86\u5728\u6620\u5c04\u4e0a\u4f7f\u7528 new() \u548c make() \u7684\u533a\u522b\u4ee5\u53ca\u53ef\u80fd\u53d1\u751f\u7684\u9519\u8bef\uff1a \u793a\u4f8b 10.4 new_make.go \uff08\u4e0d\u80fd\u7f16\u8bd1\uff09 package main type Foo map [ string ] string type Bar struct { thingOne string thingTwo int } func main () { // OK y := new ( Bar ) ( * y ). thingOne = \"hello\" ( * y ). thingTwo = 1 // NOT OK z := make ( Bar ) // \u7f16\u8bd1\u9519\u8bef\uff1acannot make type Bar ( * z ). thingOne = \"hello\" ( * z ). thingTwo = 1 // OK x := make ( Foo ) x [ \"x\" ] = \"goodbye\" x [ \"y\" ] = \"world\" // NOT OK u := new ( Foo ) ( * u )[ \"x\" ] = \"goodbye\" // \u8fd0\u884c\u65f6\u9519\u8bef!! panic: assignment to entry in nil map ( * u )[ \"y\" ] = \"world\" } \u8bd5\u56fe make() \u4e00\u4e2a\u7ed3\u6784\u4f53\u53d8\u91cf\uff0c\u4f1a\u5f15\u53d1\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\uff0c\u8fd9\u8fd8\u4e0d\u662f\u592a\u7cdf\u7cd5\uff0c\u4f46\u662f new() \u4e00\u4e2a map \u5e76\u8bd5\u56fe\u5411\u5176\u586b\u5145\u6570\u636e\uff0c\u5c06\u4f1a\u5f15\u53d1\u8fd0\u884c\u65f6\u9519\u8bef\uff01 \u56e0\u4e3a new(Foo) \u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u6307\u5411 nil \u7684\u6307\u9488\uff0c\u5b83\u5c1a\u672a\u88ab\u5206\u914d\u5185\u5b58\u3002\u6240\u4ee5\u5728\u4f7f\u7528 map \u65f6\u8981\u7279\u522b\u8c28\u614e\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7ed3\u6784\u4f53\u5b9a\u4e49 \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528\u81ea\u5b9a\u4e49\u5305\u4e2d\u7684\u7ed3\u6784\u4f53","title":"10.2 \u4f7f\u7528\u5de5\u5382\u65b9\u6cd5\u521b\u5efa\u7ed3\u6784\u4f53\u5b9e\u4f8b"},{"location":"10.2/#102","text":"","title":"10.2 \u4f7f\u7528\u5de5\u5382\u65b9\u6cd5\u521b\u5efa\u7ed3\u6784\u4f53\u5b9e\u4f8b"},{"location":"10.2/#1021","text":"Go \u8bed\u8a00\u4e0d\u652f\u6301\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8bed\u8a00\u4e2d\u90a3\u6837\u7684\u6784\u9020\u5b50\u65b9\u6cd5\uff0c\u4f46\u662f\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5728 Go \u4e2d\u5b9e\u73b0 \u201c\u6784\u9020\u5b50\u5de5\u5382\u201d\u65b9\u6cd5\u3002\u4e3a\u4e86\u65b9\u4fbf\u901a\u5e38\u4f1a\u4e3a\u7c7b\u578b\u5b9a\u4e49\u4e00\u4e2a\u5de5\u5382\uff0c\u6309\u60ef\u4f8b\uff0c\u5de5\u5382\u7684\u540d\u5b57\u4ee5 new... \u6216 New... \u5f00\u5934\u3002\u5047\u8bbe\u5b9a\u4e49\u4e86\u5982\u4e0b\u7684 File \u7ed3\u6784\u4f53\u7c7b\u578b\uff1a type File struct { fd int // \u6587\u4ef6\u63cf\u8ff0\u7b26 name string // \u6587\u4ef6\u540d } \u4e0b\u9762\u662f\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u5bf9\u5e94\u7684\u5de5\u5382\u65b9\u6cd5\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u7ed3\u6784\u4f53\u5b9e\u4f8b\u7684\u6307\u9488\uff1a func NewFile ( fd int , name string ) * File { if fd < 0 { return nil } return & File { fd , name } } \u7136\u540e\u8fd9\u6837\u8c03\u7528\u5b83\uff1a f := NewFile ( 10 , \"./test.txt\" ) \u5728 Go \u8bed\u8a00\u4e2d\u5e38\u5e38\u50cf\u4e0a\u9762\u8fd9\u6837\u5728\u5de5\u5382\u65b9\u6cd5\u91cc\u4f7f\u7528\u521d\u59cb\u5316\u6765\u7b80\u4fbf\u7684\u5b9e\u73b0\u6784\u9020\u51fd\u6570\u3002 \u5982\u679c File \u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\uff0c\u90a3\u4e48\u8868\u8fbe\u5f0f new(File) \u548c &File{} \u662f\u7b49\u4ef7\u7684\u3002 \u8fd9\u53ef\u4ee5\u548c\u5927\u591a\u6570\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7b28\u62d9\u7684\u521d\u59cb\u5316\u65b9\u5f0f\u505a\u4e2a\u6bd4\u8f83\uff1a File f = new File(...) \u3002 \u6211\u4eec\u53ef\u4ee5\u8bf4\u662f\u5de5\u5382\u5b9e\u4f8b\u5316\u4e86\u7c7b\u578b\u7684\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5c31\u50cf\u5728\u57fa\u4e8e\u7c7b\u7684 OO \u8bed\u8a00\u4e2d\u90a3\u6837\u3002 \u5982\u679c\u60f3\u77e5\u9053\u7ed3\u6784\u4f53\u7c7b\u578b T \u7684\u4e00\u4e2a\u5b9e\u4f8b\u5360\u7528\u4e86\u591a\u5c11\u5185\u5b58\uff0c\u53ef\u4ee5\u4f7f\u7528\uff1a size := unsafe.Sizeof(T{}) \u3002 \u5982\u4f55\u5f3a\u5236\u4f7f\u7528\u5de5\u5382\u65b9\u6cd5 \u901a\u8fc7\u5e94\u7528\u53ef\u89c1\u6027\u89c4\u5219\u53c2\u8003 4.2.1\u8282 \u3001 9.5 \u8282 \u5c31\u53ef\u4ee5\u7981\u6b62\u4f7f\u7528 new() \u51fd\u6570\uff0c\u5f3a\u5236\u7528\u6237\u4f7f\u7528\u5de5\u5382\u65b9\u6cd5\uff0c\u4ece\u800c\u4f7f\u7c7b\u578b\u53d8\u6210\u79c1\u6709\u7684\uff0c\u5c31\u50cf\u5728\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u4e2d\u90a3\u6837\u3002 type matrix struct { ... } func NewMatrix ( params ) * matrix { m := new ( matrix ) // \u521d\u59cb\u5316 m return m } \u5728\u5176\u4ed6\u5305\u91cc\u4f7f\u7528\u5de5\u5382\u65b9\u6cd5\uff1a package main import \"matrix\" ... wrong := new ( matrix . matrix ) // \u7f16\u8bd1\u5931\u8d25\uff08matrix \u662f\u79c1\u6709\u7684\uff09 right := matrix . NewMatrix ( ... ) // \u5b9e\u4f8b\u5316 matrix \u7684\u552f\u4e00\u65b9\u5f0f","title":"10.2.1 \u7ed3\u6784\u4f53\u5de5\u5382"},{"location":"10.2/#1022-map-struct-vs-new-make","text":"new() \u548c make() \u8fd9\u4e24\u4e2a\u5185\u7f6e\u51fd\u6570\u5df2\u7ecf\u5728\u7b2c 7.2.4 \u8282\u901a\u8fc7\u5207\u7247\u7684\u4f8b\u5b50\u8bf4\u660e\u8fc7\u4e00\u6b21\u3002 \u73b0\u5728\u4e3a\u6b62\u6211\u4eec\u5df2\u7ecf\u89c1\u5230\u4e86\u53ef\u4ee5\u4f7f\u7528 make() \u7684\u4e09\u79cd\u7c7b\u578b\u4e2d\u7684\u5176\u4e2d\u4e24\u4e2a\uff1a slices / maps / channels\uff08\u89c1\u7b2c 14 \u7ae0\uff09 \u4e0b\u9762\u7684\u4f8b\u5b50\u8bf4\u660e\u4e86\u5728\u6620\u5c04\u4e0a\u4f7f\u7528 new() \u548c make() \u7684\u533a\u522b\u4ee5\u53ca\u53ef\u80fd\u53d1\u751f\u7684\u9519\u8bef\uff1a \u793a\u4f8b 10.4 new_make.go \uff08\u4e0d\u80fd\u7f16\u8bd1\uff09 package main type Foo map [ string ] string type Bar struct { thingOne string thingTwo int } func main () { // OK y := new ( Bar ) ( * y ). thingOne = \"hello\" ( * y ). thingTwo = 1 // NOT OK z := make ( Bar ) // \u7f16\u8bd1\u9519\u8bef\uff1acannot make type Bar ( * z ). thingOne = \"hello\" ( * z ). thingTwo = 1 // OK x := make ( Foo ) x [ \"x\" ] = \"goodbye\" x [ \"y\" ] = \"world\" // NOT OK u := new ( Foo ) ( * u )[ \"x\" ] = \"goodbye\" // \u8fd0\u884c\u65f6\u9519\u8bef!! panic: assignment to entry in nil map ( * u )[ \"y\" ] = \"world\" } \u8bd5\u56fe make() \u4e00\u4e2a\u7ed3\u6784\u4f53\u53d8\u91cf\uff0c\u4f1a\u5f15\u53d1\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\uff0c\u8fd9\u8fd8\u4e0d\u662f\u592a\u7cdf\u7cd5\uff0c\u4f46\u662f new() \u4e00\u4e2a map \u5e76\u8bd5\u56fe\u5411\u5176\u586b\u5145\u6570\u636e\uff0c\u5c06\u4f1a\u5f15\u53d1\u8fd0\u884c\u65f6\u9519\u8bef\uff01 \u56e0\u4e3a new(Foo) \u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u6307\u5411 nil \u7684\u6307\u9488\uff0c\u5b83\u5c1a\u672a\u88ab\u5206\u914d\u5185\u5b58\u3002\u6240\u4ee5\u5728\u4f7f\u7528 map \u65f6\u8981\u7279\u522b\u8c28\u614e\u3002","title":"10.2.2 map \u548c struct vs new() \u548c make()"},{"location":"10.2/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7ed3\u6784\u4f53\u5b9a\u4e49 \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528\u81ea\u5b9a\u4e49\u5305\u4e2d\u7684\u7ed3\u6784\u4f53","title":"\u94fe\u63a5"},{"location":"10.3/","text":"10.3 \u4f7f\u7528\u81ea\u5b9a\u4e49\u5305\u4e2d\u7684\u7ed3\u6784\u4f53 \u00b6 \u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0cmain.go \u4f7f\u7528\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u5b83\u6765\u81ea struct_pack \u4e0b\u7684\u5305 structPack \u3002 \u793a\u4f8b 10.5 structPack.go \uff1a package structPack type ExpStruct struct { Mi1 int Mf1 float32 } \u793a\u4f8b 10.6 main.go \uff1a package main import ( \"fmt\" \"./struct_pack/structPack\" ) func main () { struct1 := new ( structPack . ExpStruct ) struct1 . Mi1 = 10 struct1 . Mf1 = 16. fmt . Printf ( \"Mi1 = %d\\n\" , struct1 . Mi1 ) fmt . Printf ( \"Mf1 = %f\\n\" , struct1 . Mf1 ) } \u8f93\u51fa\uff1a Mi1 = 10 Mf1 = 16.000000 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f7f\u7528\u5de5\u5382\u65b9\u6cd5\u521b\u5efa\u7ed3\u6784\u4f53\u5b9e\u4f8b \u4e0b\u4e00\u8282\uff1a \u5e26\u6807\u7b7e\u7684\u7ed3\u6784\u4f53","title":"10.3 \u4f7f\u7528\u81ea\u5b9a\u4e49\u5305\u4e2d\u7684\u7ed3\u6784\u4f53"},{"location":"10.3/#103","text":"\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0cmain.go \u4f7f\u7528\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u5b83\u6765\u81ea struct_pack \u4e0b\u7684\u5305 structPack \u3002 \u793a\u4f8b 10.5 structPack.go \uff1a package structPack type ExpStruct struct { Mi1 int Mf1 float32 } \u793a\u4f8b 10.6 main.go \uff1a package main import ( \"fmt\" \"./struct_pack/structPack\" ) func main () { struct1 := new ( structPack . ExpStruct ) struct1 . Mi1 = 10 struct1 . Mf1 = 16. fmt . Printf ( \"Mi1 = %d\\n\" , struct1 . Mi1 ) fmt . Printf ( \"Mf1 = %f\\n\" , struct1 . Mf1 ) } \u8f93\u51fa\uff1a Mi1 = 10 Mf1 = 16.000000","title":"10.3 \u4f7f\u7528\u81ea\u5b9a\u4e49\u5305\u4e2d\u7684\u7ed3\u6784\u4f53"},{"location":"10.3/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f7f\u7528\u5de5\u5382\u65b9\u6cd5\u521b\u5efa\u7ed3\u6784\u4f53\u5b9e\u4f8b \u4e0b\u4e00\u8282\uff1a \u5e26\u6807\u7b7e\u7684\u7ed3\u6784\u4f53","title":"\u94fe\u63a5"},{"location":"10.4/","text":"10.4 \u5e26\u6807\u7b7e\u7684\u7ed3\u6784\u4f53 \u00b6 \u7ed3\u6784\u4f53\u4e2d\u7684\u5b57\u6bb5\u9664\u4e86\u6709\u540d\u5b57\u548c\u7c7b\u578b\u5916\uff0c\u8fd8\u53ef\u4ee5\u6709\u4e00\u4e2a\u53ef\u9009\u7684\u6807\u7b7e (tag)\uff1a\u5b83\u662f\u4e00\u4e2a\u9644\u5c5e\u4e8e\u5b57\u6bb5\u7684\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u662f\u6587\u6863\u6216\u5176\u4ed6\u7684\u91cd\u8981\u6807\u8bb0\u3002\u6807\u7b7e\u7684\u5185\u5bb9\u4e0d\u53ef\u4ee5\u5728\u4e00\u822c\u7684\u7f16\u7a0b\u4e2d\u4f7f\u7528\uff0c\u53ea\u6709\u5305 reflect \u80fd\u83b7\u53d6\u5b83\u3002\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u7ae0\uff08 \u7b2c 11.10 \u8282 \u4e2d\u6df1\u5165\u7684\u63a2\u8ba8 reflect \u5305\uff0c\u5b83\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u81ea\u7701\u7c7b\u578b\u3001\u5c5e\u6027\u548c\u65b9\u6cd5\uff0c\u6bd4\u5982\uff1a\u5728\u4e00\u4e2a\u53d8\u91cf\u4e0a\u8c03\u7528 reflect.TypeOf() \u53ef\u4ee5\u83b7\u53d6\u53d8\u91cf\u7684\u6b63\u786e\u7c7b\u578b\uff0c\u5982\u679c\u53d8\u91cf\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7 Field \u6765\u7d22\u5f15\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528 Tag \u5c5e\u6027\u3002 \u793a\u4f8b 10.7 struct_tag.go \uff1a package main import ( \"fmt\" \"reflect\" ) type TagType struct { // tags field1 bool \"An important answer\" field2 string \"The name of the thing\" field3 int \"How much there are\" } func main () { tt := TagType { true , \"Barak Obama\" , 1 } for i := 0 ; i < 3 ; i ++ { refTag ( tt , i ) } } func refTag ( tt TagType , ix int ) { ttType := reflect . TypeOf ( tt ) ixField := ttType . Field ( ix ) fmt . Printf ( \"%v\\n\" , ixField . Tag ) } \u8f93\u51fa\uff1a An important answer The name of the thing How much there are \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f7f\u7528\u81ea\u5b9a\u4e49\u5305\u4e2d\u7684\u7ed3\u6784\u4f53 \u4e0b\u4e00\u8282\uff1a \u533f\u540d\u5b57\u6bb5\u548c\u5185\u5d4c\u7ed3\u6784\u4f53","title":"10.4 \u5e26\u6807\u7b7e\u7684\u7ed3\u6784\u4f53"},{"location":"10.4/#104","text":"\u7ed3\u6784\u4f53\u4e2d\u7684\u5b57\u6bb5\u9664\u4e86\u6709\u540d\u5b57\u548c\u7c7b\u578b\u5916\uff0c\u8fd8\u53ef\u4ee5\u6709\u4e00\u4e2a\u53ef\u9009\u7684\u6807\u7b7e (tag)\uff1a\u5b83\u662f\u4e00\u4e2a\u9644\u5c5e\u4e8e\u5b57\u6bb5\u7684\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u662f\u6587\u6863\u6216\u5176\u4ed6\u7684\u91cd\u8981\u6807\u8bb0\u3002\u6807\u7b7e\u7684\u5185\u5bb9\u4e0d\u53ef\u4ee5\u5728\u4e00\u822c\u7684\u7f16\u7a0b\u4e2d\u4f7f\u7528\uff0c\u53ea\u6709\u5305 reflect \u80fd\u83b7\u53d6\u5b83\u3002\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u7ae0\uff08 \u7b2c 11.10 \u8282 \u4e2d\u6df1\u5165\u7684\u63a2\u8ba8 reflect \u5305\uff0c\u5b83\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u81ea\u7701\u7c7b\u578b\u3001\u5c5e\u6027\u548c\u65b9\u6cd5\uff0c\u6bd4\u5982\uff1a\u5728\u4e00\u4e2a\u53d8\u91cf\u4e0a\u8c03\u7528 reflect.TypeOf() \u53ef\u4ee5\u83b7\u53d6\u53d8\u91cf\u7684\u6b63\u786e\u7c7b\u578b\uff0c\u5982\u679c\u53d8\u91cf\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7 Field \u6765\u7d22\u5f15\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528 Tag \u5c5e\u6027\u3002 \u793a\u4f8b 10.7 struct_tag.go \uff1a package main import ( \"fmt\" \"reflect\" ) type TagType struct { // tags field1 bool \"An important answer\" field2 string \"The name of the thing\" field3 int \"How much there are\" } func main () { tt := TagType { true , \"Barak Obama\" , 1 } for i := 0 ; i < 3 ; i ++ { refTag ( tt , i ) } } func refTag ( tt TagType , ix int ) { ttType := reflect . TypeOf ( tt ) ixField := ttType . Field ( ix ) fmt . Printf ( \"%v\\n\" , ixField . Tag ) } \u8f93\u51fa\uff1a An important answer The name of the thing How much there are","title":"10.4 \u5e26\u6807\u7b7e\u7684\u7ed3\u6784\u4f53"},{"location":"10.4/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f7f\u7528\u81ea\u5b9a\u4e49\u5305\u4e2d\u7684\u7ed3\u6784\u4f53 \u4e0b\u4e00\u8282\uff1a \u533f\u540d\u5b57\u6bb5\u548c\u5185\u5d4c\u7ed3\u6784\u4f53","title":"\u94fe\u63a5"},{"location":"10.5/","text":"10.5 \u533f\u540d\u5b57\u6bb5\u548c\u5185\u5d4c\u7ed3\u6784\u4f53 \u00b6 10.5.1 \u5b9a\u4e49 \u00b6 \u7ed3\u6784\u4f53\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a \u533f\u540d\uff08\u6216\u5185\u5d4c\uff09\u5b57\u6bb5 \uff0c\u5373\u8fd9\u4e9b\u5b57\u6bb5\u6ca1\u6709\u663e\u5f0f\u7684\u540d\u5b57\uff0c\u53ea\u6709\u5b57\u6bb5\u7684\u7c7b\u578b\u662f\u5fc5\u987b\u7684\uff0c\u6b64\u65f6\u7c7b\u578b\u5c31\u662f\u5b57\u6bb5\u7684\u540d\u5b57\u3002\u533f\u540d\u5b57\u6bb5\u672c\u8eab\u53ef\u4ee5\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\uff0c\u5373 \u7ed3\u6784\u4f53\u53ef\u4ee5\u5305\u542b\u5185\u5d4c\u7ed3\u6784\u4f53 \u3002 \u53ef\u4ee5\u7c97\u7565\u5730\u5c06\u8fd9\u4e2a\u548c\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u4e2d\u7684\u7ee7\u627f\u6982\u5ff5\u76f8\u6bd4\u8f83\uff0c\u968f\u540e\u5c06\u4f1a\u770b\u5230\u5b83\u88ab\u7528\u6765\u6a21\u62df\u7c7b\u4f3c\u7ee7\u627f\u7684\u884c\u4e3a\u3002Go \u8bed\u8a00\u4e2d\u7684\u7ee7\u627f\u662f\u901a\u8fc7\u5185\u5d4c\u6216\u7ec4\u5408\u6765\u5b9e\u73b0\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u8bf4\uff0c\u5728 Go \u8bed\u8a00\u4e2d\uff0c\u76f8\u6bd4\u8f83\u4e8e\u7ee7\u627f\uff0c\u7ec4\u5408\u66f4\u53d7\u9752\u7750\u3002 \u8003\u8651\u5982\u4e0b\u7684\u7a0b\u5e8f\uff1a \u793a\u4f8b 10.8 structs_anonymous_fields.go \uff1a package main import \"fmt\" type innerS struct { in1 int in2 int } type outerS struct { b int c float32 int // anonymous field innerS //anonymous field } func main () { outer := new ( outerS ) outer . b = 6 outer . c = 7.5 outer . int = 60 outer . in1 = 5 outer . in2 = 10 fmt . Printf ( \"outer.b is: %d\\n\" , outer . b ) fmt . Printf ( \"outer.c is: %f\\n\" , outer . c ) fmt . Printf ( \"outer.int is: %d\\n\" , outer . int ) fmt . Printf ( \"outer.in1 is: %d\\n\" , outer . in1 ) fmt . Printf ( \"outer.in2 is: %d\\n\" , outer . in2 ) // \u4f7f\u7528\u7ed3\u6784\u4f53\u5b57\u9762\u91cf outer2 := outerS { 6 , 7.5 , 60 , innerS { 5 , 10 }} fmt . Println ( \"outer2 is:\" , outer2 ) } \u8f93\u51fa\uff1a outer.b is: 6 outer.c is: 7.500000 outer.int is: 60 outer.in1 is: 5 outer.in2 is: 10 outer2 is:{6 7.5 60 {5 10}} \u901a\u8fc7\u7c7b\u578b outer.int \u7684\u540d\u5b57\u6765\u83b7\u53d6\u5b58\u50a8\u5728\u533f\u540d\u5b57\u6bb5\u4e2d\u7684\u6570\u636e\uff0c\u4e8e\u662f\u53ef\u4ee5\u5f97\u51fa\u4e00\u4e2a\u7ed3\u8bba\uff1a\u5728\u4e00\u4e2a\u7ed3\u6784\u4f53\u4e2d\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u6570\u636e\u7c7b\u578b\u53ea\u80fd\u6709\u4e00\u4e2a\u533f\u540d\u5b57\u6bb5\u3002 10.5.2 \u5185\u5d4c\u7ed3\u6784\u4f53 \u00b6 \u540c\u6837\u5730\u7ed3\u6784\u4f53\u4e5f\u662f\u4e00\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u6240\u4ee5\u5b83\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u533f\u540d\u5b57\u6bb5\u6765\u4f7f\u7528\uff0c\u5982\u540c\u4e0a\u9762\u4f8b\u5b50\u4e2d\u90a3\u6837\u3002\u5916\u5c42\u7ed3\u6784\u4f53\u901a\u8fc7 outer.in1 \u76f4\u63a5\u8fdb\u5165\u5185\u5c42\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\uff0c\u5185\u5d4c\u7ed3\u6784\u4f53\u751a\u81f3\u53ef\u4ee5\u6765\u81ea\u5176\u4ed6\u5305\u3002\u5185\u5c42\u7ed3\u6784\u4f53\u88ab\u7b80\u5355\u7684\u63d2\u5165\u6216\u8005\u5185\u5d4c\u8fdb\u5916\u5c42\u7ed3\u6784\u4f53\u3002\u8fd9\u4e2a\u7b80\u5355\u7684\u201c\u7ee7\u627f\u201d\u673a\u5236\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u5f0f\uff0c\u4f7f\u5f97\u53ef\u4ee5\u4ece\u53e6\u5916\u4e00\u4e2a\u6216\u4e00\u4e9b\u7c7b\u578b\u7ee7\u627f\u90e8\u5206\u6216\u5168\u90e8\u5b9e\u73b0\u3002 \u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\uff1a \u793a\u4f8b 10.9 embedd_struct.go \uff1a package main import \"fmt\" type A struct { ax , ay int } type B struct { A bx , by float32 } func main () { b := B { A { 1 , 2 }, 3.0 , 4.0 } fmt . Println ( b . ax , b . ay , b . bx , b . by ) fmt . Println ( b . A ) } \u8f93\u51fa\uff1a 1 2 3 4 {1 2} \u7ec3\u4e60 10.5 anonymous_struct.go \uff1a \u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u5b83\u6709\u4e00\u4e2a\u5177\u540d\u7684 float32 \u5b57\u6bb5\uff0c2 \u4e2a\u533f\u540d\u5b57\u6bb5\uff0c\u7c7b\u578b\u5206\u522b\u662f int \u548c string \u3002\u901a\u8fc7\u7ed3\u6784\u4f53\u5b57\u9762\u91cf\u65b0\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53\u5b9e\u4f8b\u5e76\u6253\u5370\u5b83\u7684\u5185\u5bb9\u3002 10.5.3 \u547d\u540d\u51b2\u7a81 \u00b6 \u5f53\u4e24\u4e2a\u5b57\u6bb5\u62e5\u6709\u76f8\u540c\u7684\u540d\u5b57\uff08\u53ef\u80fd\u662f\u7ee7\u627f\u6765\u7684\u540d\u5b57\uff09\u65f6\u8be5\u600e\u4e48\u529e\u5462\uff1f \u5916\u5c42\u540d\u5b57\u4f1a\u8986\u76d6\u5185\u5c42\u540d\u5b57\uff08\u4f46\u662f\u4e24\u8005\u7684\u5185\u5b58\u7a7a\u95f4\u90fd\u4fdd\u7559\uff09\uff0c\u8fd9\u63d0\u4f9b\u4e86\u4e00\u79cd\u91cd\u8f7d\u5b57\u6bb5\u6216\u65b9\u6cd5\u7684\u65b9\u5f0f\uff1b \u5982\u679c\u76f8\u540c\u7684\u540d\u5b57\u5728\u540c\u4e00\u7ea7\u522b\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u5982\u679c\u8fd9\u4e2a\u540d\u5b57\u88ab\u7a0b\u5e8f\u4f7f\u7528\u4e86\uff0c\u5c06\u4f1a\u5f15\u53d1\u4e00\u4e2a\u9519\u8bef\uff08\u4e0d\u4f7f\u7528\u6ca1\u5173\u7cfb\uff09\u3002\u6ca1\u6709\u529e\u6cd5\u6765\u89e3\u51b3\u8fd9\u79cd\u95ee\u9898\u5f15\u8d77\u7684\u4e8c\u4e49\u6027\uff0c\u5fc5\u987b\u7531\u7a0b\u5e8f\u5458\u81ea\u5df1\u4fee\u6b63\u3002 \u4f8b\u5b50\uff1a type A struct { a int } type B struct { a , b int } type C struct { A ; B } var c C \u89c4\u5219 2\uff1a\u4f7f\u7528 c.a \u662f\u9519\u8bef\u7684\uff0c\u5230\u5e95\u662f c.A.a \u8fd8\u662f c.B.a \u5462\uff1f\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u5668\u9519\u8bef\uff1a ambiguous DOT reference c.a disambiguate with either c.A.a or c.B.a \u3002 type D struct { B ; b float32 } var d D \u89c4\u52191\uff1a\u4f7f\u7528 d.b \u662f\u6ca1\u95ee\u9898\u7684\uff1a\u5b83\u662f float32 \uff0c\u800c\u4e0d\u662f B \u7684 b \u3002\u5982\u679c\u60f3\u8981\u5185\u5c42\u7684 b \u53ef\u4ee5\u901a\u8fc7 d.B.b \u5f97\u5230\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5e26\u6807\u7b7e\u7684\u7ed3\u6784\u4f53 \u4e0b\u4e00\u8282\uff1a \u65b9\u6cd5","title":"10.5 \u533f\u540d\u5b57\u6bb5\u548c\u5185\u5d4c\u7ed3\u6784\u4f53"},{"location":"10.5/#105","text":"","title":"10.5 \u533f\u540d\u5b57\u6bb5\u548c\u5185\u5d4c\u7ed3\u6784\u4f53"},{"location":"10.5/#1051","text":"\u7ed3\u6784\u4f53\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a \u533f\u540d\uff08\u6216\u5185\u5d4c\uff09\u5b57\u6bb5 \uff0c\u5373\u8fd9\u4e9b\u5b57\u6bb5\u6ca1\u6709\u663e\u5f0f\u7684\u540d\u5b57\uff0c\u53ea\u6709\u5b57\u6bb5\u7684\u7c7b\u578b\u662f\u5fc5\u987b\u7684\uff0c\u6b64\u65f6\u7c7b\u578b\u5c31\u662f\u5b57\u6bb5\u7684\u540d\u5b57\u3002\u533f\u540d\u5b57\u6bb5\u672c\u8eab\u53ef\u4ee5\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\uff0c\u5373 \u7ed3\u6784\u4f53\u53ef\u4ee5\u5305\u542b\u5185\u5d4c\u7ed3\u6784\u4f53 \u3002 \u53ef\u4ee5\u7c97\u7565\u5730\u5c06\u8fd9\u4e2a\u548c\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u4e2d\u7684\u7ee7\u627f\u6982\u5ff5\u76f8\u6bd4\u8f83\uff0c\u968f\u540e\u5c06\u4f1a\u770b\u5230\u5b83\u88ab\u7528\u6765\u6a21\u62df\u7c7b\u4f3c\u7ee7\u627f\u7684\u884c\u4e3a\u3002Go \u8bed\u8a00\u4e2d\u7684\u7ee7\u627f\u662f\u901a\u8fc7\u5185\u5d4c\u6216\u7ec4\u5408\u6765\u5b9e\u73b0\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u8bf4\uff0c\u5728 Go \u8bed\u8a00\u4e2d\uff0c\u76f8\u6bd4\u8f83\u4e8e\u7ee7\u627f\uff0c\u7ec4\u5408\u66f4\u53d7\u9752\u7750\u3002 \u8003\u8651\u5982\u4e0b\u7684\u7a0b\u5e8f\uff1a \u793a\u4f8b 10.8 structs_anonymous_fields.go \uff1a package main import \"fmt\" type innerS struct { in1 int in2 int } type outerS struct { b int c float32 int // anonymous field innerS //anonymous field } func main () { outer := new ( outerS ) outer . b = 6 outer . c = 7.5 outer . int = 60 outer . in1 = 5 outer . in2 = 10 fmt . Printf ( \"outer.b is: %d\\n\" , outer . b ) fmt . Printf ( \"outer.c is: %f\\n\" , outer . c ) fmt . Printf ( \"outer.int is: %d\\n\" , outer . int ) fmt . Printf ( \"outer.in1 is: %d\\n\" , outer . in1 ) fmt . Printf ( \"outer.in2 is: %d\\n\" , outer . in2 ) // \u4f7f\u7528\u7ed3\u6784\u4f53\u5b57\u9762\u91cf outer2 := outerS { 6 , 7.5 , 60 , innerS { 5 , 10 }} fmt . Println ( \"outer2 is:\" , outer2 ) } \u8f93\u51fa\uff1a outer.b is: 6 outer.c is: 7.500000 outer.int is: 60 outer.in1 is: 5 outer.in2 is: 10 outer2 is:{6 7.5 60 {5 10}} \u901a\u8fc7\u7c7b\u578b outer.int \u7684\u540d\u5b57\u6765\u83b7\u53d6\u5b58\u50a8\u5728\u533f\u540d\u5b57\u6bb5\u4e2d\u7684\u6570\u636e\uff0c\u4e8e\u662f\u53ef\u4ee5\u5f97\u51fa\u4e00\u4e2a\u7ed3\u8bba\uff1a\u5728\u4e00\u4e2a\u7ed3\u6784\u4f53\u4e2d\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u6570\u636e\u7c7b\u578b\u53ea\u80fd\u6709\u4e00\u4e2a\u533f\u540d\u5b57\u6bb5\u3002","title":"10.5.1 \u5b9a\u4e49"},{"location":"10.5/#1052","text":"\u540c\u6837\u5730\u7ed3\u6784\u4f53\u4e5f\u662f\u4e00\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u6240\u4ee5\u5b83\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u533f\u540d\u5b57\u6bb5\u6765\u4f7f\u7528\uff0c\u5982\u540c\u4e0a\u9762\u4f8b\u5b50\u4e2d\u90a3\u6837\u3002\u5916\u5c42\u7ed3\u6784\u4f53\u901a\u8fc7 outer.in1 \u76f4\u63a5\u8fdb\u5165\u5185\u5c42\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\uff0c\u5185\u5d4c\u7ed3\u6784\u4f53\u751a\u81f3\u53ef\u4ee5\u6765\u81ea\u5176\u4ed6\u5305\u3002\u5185\u5c42\u7ed3\u6784\u4f53\u88ab\u7b80\u5355\u7684\u63d2\u5165\u6216\u8005\u5185\u5d4c\u8fdb\u5916\u5c42\u7ed3\u6784\u4f53\u3002\u8fd9\u4e2a\u7b80\u5355\u7684\u201c\u7ee7\u627f\u201d\u673a\u5236\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u5f0f\uff0c\u4f7f\u5f97\u53ef\u4ee5\u4ece\u53e6\u5916\u4e00\u4e2a\u6216\u4e00\u4e9b\u7c7b\u578b\u7ee7\u627f\u90e8\u5206\u6216\u5168\u90e8\u5b9e\u73b0\u3002 \u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\uff1a \u793a\u4f8b 10.9 embedd_struct.go \uff1a package main import \"fmt\" type A struct { ax , ay int } type B struct { A bx , by float32 } func main () { b := B { A { 1 , 2 }, 3.0 , 4.0 } fmt . Println ( b . ax , b . ay , b . bx , b . by ) fmt . Println ( b . A ) } \u8f93\u51fa\uff1a 1 2 3 4 {1 2} \u7ec3\u4e60 10.5 anonymous_struct.go \uff1a \u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u5b83\u6709\u4e00\u4e2a\u5177\u540d\u7684 float32 \u5b57\u6bb5\uff0c2 \u4e2a\u533f\u540d\u5b57\u6bb5\uff0c\u7c7b\u578b\u5206\u522b\u662f int \u548c string \u3002\u901a\u8fc7\u7ed3\u6784\u4f53\u5b57\u9762\u91cf\u65b0\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53\u5b9e\u4f8b\u5e76\u6253\u5370\u5b83\u7684\u5185\u5bb9\u3002","title":"10.5.2 \u5185\u5d4c\u7ed3\u6784\u4f53"},{"location":"10.5/#1053","text":"\u5f53\u4e24\u4e2a\u5b57\u6bb5\u62e5\u6709\u76f8\u540c\u7684\u540d\u5b57\uff08\u53ef\u80fd\u662f\u7ee7\u627f\u6765\u7684\u540d\u5b57\uff09\u65f6\u8be5\u600e\u4e48\u529e\u5462\uff1f \u5916\u5c42\u540d\u5b57\u4f1a\u8986\u76d6\u5185\u5c42\u540d\u5b57\uff08\u4f46\u662f\u4e24\u8005\u7684\u5185\u5b58\u7a7a\u95f4\u90fd\u4fdd\u7559\uff09\uff0c\u8fd9\u63d0\u4f9b\u4e86\u4e00\u79cd\u91cd\u8f7d\u5b57\u6bb5\u6216\u65b9\u6cd5\u7684\u65b9\u5f0f\uff1b \u5982\u679c\u76f8\u540c\u7684\u540d\u5b57\u5728\u540c\u4e00\u7ea7\u522b\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u5982\u679c\u8fd9\u4e2a\u540d\u5b57\u88ab\u7a0b\u5e8f\u4f7f\u7528\u4e86\uff0c\u5c06\u4f1a\u5f15\u53d1\u4e00\u4e2a\u9519\u8bef\uff08\u4e0d\u4f7f\u7528\u6ca1\u5173\u7cfb\uff09\u3002\u6ca1\u6709\u529e\u6cd5\u6765\u89e3\u51b3\u8fd9\u79cd\u95ee\u9898\u5f15\u8d77\u7684\u4e8c\u4e49\u6027\uff0c\u5fc5\u987b\u7531\u7a0b\u5e8f\u5458\u81ea\u5df1\u4fee\u6b63\u3002 \u4f8b\u5b50\uff1a type A struct { a int } type B struct { a , b int } type C struct { A ; B } var c C \u89c4\u5219 2\uff1a\u4f7f\u7528 c.a \u662f\u9519\u8bef\u7684\uff0c\u5230\u5e95\u662f c.A.a \u8fd8\u662f c.B.a \u5462\uff1f\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u5668\u9519\u8bef\uff1a ambiguous DOT reference c.a disambiguate with either c.A.a or c.B.a \u3002 type D struct { B ; b float32 } var d D \u89c4\u52191\uff1a\u4f7f\u7528 d.b \u662f\u6ca1\u95ee\u9898\u7684\uff1a\u5b83\u662f float32 \uff0c\u800c\u4e0d\u662f B \u7684 b \u3002\u5982\u679c\u60f3\u8981\u5185\u5c42\u7684 b \u53ef\u4ee5\u901a\u8fc7 d.B.b \u5f97\u5230\u3002","title":"10.5.3 \u547d\u540d\u51b2\u7a81"},{"location":"10.5/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5e26\u6807\u7b7e\u7684\u7ed3\u6784\u4f53 \u4e0b\u4e00\u8282\uff1a \u65b9\u6cd5","title":"\u94fe\u63a5"},{"location":"10.6/","text":"10.6 \u65b9\u6cd5 \u00b6 10.6.1 \u65b9\u6cd5\u662f\u4ec0\u4e48 \u00b6 \u5728 Go \u8bed\u8a00\u4e2d\uff0c\u7ed3\u6784\u4f53\u5c31\u50cf\u662f\u7c7b\u7684\u4e00\u79cd\u7b80\u5316\u5f62\u5f0f\uff0c\u90a3\u4e48\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u5458\u53ef\u80fd\u4f1a\u95ee\uff1a\u7c7b\u7684\u65b9\u6cd5\u5728\u54ea\u91cc\u5462\uff1f\u5728 Go \u4e2d\u6709\u4e00\u4e2a\u6982\u5ff5\uff0c\u5b83\u548c\u65b9\u6cd5\u6709\u7740\u540c\u6837\u7684\u540d\u5b57\uff0c\u5e76\u4e14\u5927\u4f53\u4e0a\u610f\u601d\u76f8\u540c\uff1aGo \u65b9\u6cd5\u662f\u4f5c\u7528\u5728\u63a5\u6536\u8005 (receiver) \u4e0a\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u63a5\u6536\u8005\u662f\u67d0\u79cd\u7c7b\u578b\u7684\u53d8\u91cf\u3002\u56e0\u6b64\u65b9\u6cd5\u662f\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u51fd\u6570\u3002 \u63a5\u6536\u8005\u7c7b\u578b\u53ef\u4ee5\u662f\uff08\u51e0\u4e4e\uff09\u4efb\u4f55\u7c7b\u578b\uff0c\u4e0d\u4ec5\u4ec5\u662f\u7ed3\u6784\u4f53\u7c7b\u578b\uff1a\u4efb\u4f55\u7c7b\u578b\u90fd\u53ef\u4ee5\u6709\u65b9\u6cd5\uff0c\u751a\u81f3\u53ef\u4ee5\u662f\u51fd\u6570\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f int \u3001 bool \u3001 string \u6216\u6570\u7ec4\u7684\u522b\u540d\u7c7b\u578b\u3002\u4f46\u662f\u63a5\u6536\u8005\u4e0d\u80fd\u662f\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\uff08\u53c2\u8003 \u7b2c 11 \u7ae0 \uff09\uff0c\u56e0\u4e3a\u63a5\u53e3\u662f\u4e00\u4e2a\u62bd\u8c61\u5b9a\u4e49\uff0c\u4f46\u662f\u65b9\u6cd5\u5374\u662f\u5177\u4f53\u5b9e\u73b0\uff1b\u5982\u679c\u8fd9\u6837\u505a\u4f1a\u5f15\u53d1\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\uff1a invalid receiver type... \u3002 \u6700\u540e\u63a5\u6536\u8005\u4e0d\u80fd\u662f\u4e00\u4e2a\u6307\u9488\u7c7b\u578b\uff0c\u4f46\u662f\u5b83\u53ef\u4ee5\u662f\u4efb\u4f55\u5176\u4ed6\u5141\u8bb8\u7c7b\u578b\u7684\u6307\u9488\u3002 \u4e00\u4e2a\u7c7b\u578b\u52a0\u4e0a\u5b83\u7684\u65b9\u6cd5\u7b49\u4ef7\u4e8e\u9762\u5411\u5bf9\u8c61\u4e2d\u7684\u4e00\u4e2a\u7c7b\u3002\u4e00\u4e2a\u91cd\u8981\u7684\u533a\u522b\u662f\uff1a\u5728 Go \u4e2d\uff0c\u7c7b\u578b\u7684\u4ee3\u7801\u548c\u7ed1\u5b9a\u5728\u5b83\u4e0a\u9762\u7684\u65b9\u6cd5\u7684\u4ee3\u7801\u53ef\u4ee5\u4e0d\u653e\u7f6e\u5728\u4e00\u8d77\uff0c\u5b83\u4eec\u53ef\u4ee5\u5b58\u5728\u5728\u4e0d\u540c\u7684\u6e90\u6587\u4ef6\uff0c\u552f\u4e00\u7684\u8981\u6c42\u662f\uff1a\u5b83\u4eec\u5fc5\u987b\u662f\u540c\u4e00\u4e2a\u5305\u7684\u3002 \u7c7b\u578b T \uff08\u6216 *T \uff09\u4e0a\u7684\u6240\u6709\u65b9\u6cd5\u7684\u96c6\u5408\u53eb\u505a\u7c7b\u578b T \uff08\u6216 *T \uff09\u7684\u65b9\u6cd5\u96c6 (method set)\u3002 \u56e0\u4e3a\u65b9\u6cd5\u662f\u51fd\u6570\uff0c\u6240\u4ee5\u540c\u6837\u7684\uff0c\u4e0d\u5141\u8bb8\u65b9\u6cd5\u91cd\u8f7d\uff0c\u5373\u5bf9\u4e8e\u4e00\u4e2a\u7c7b\u578b\u53ea\u80fd\u6709\u4e00\u4e2a\u7ed9\u5b9a\u540d\u79f0\u7684\u65b9\u6cd5\u3002\u4f46\u662f\u5982\u679c\u57fa\u4e8e\u63a5\u6536\u8005\u7c7b\u578b\uff0c\u662f\u6709\u91cd\u8f7d\u7684\uff1a\u5177\u6709\u540c\u6837\u540d\u5b57\u7684\u65b9\u6cd5\u53ef\u4ee5\u5728 2 \u4e2a\u6216\u591a\u4e2a\u4e0d\u540c\u7684\u63a5\u6536\u8005\u7c7b\u578b\u4e0a\u5b58\u5728\uff0c\u6bd4\u5982\u5728\u540c\u4e00\u4e2a\u5305\u91cc\u8fd9\u4e48\u505a\u662f\u5141\u8bb8\u7684\uff1a func ( a * denseMatrix ) Add ( b Matrix ) Matrix func ( a * sparseMatrix ) Add ( b Matrix ) Matrix \u522b\u540d\u7c7b\u578b\u6ca1\u6709\u539f\u59cb\u7c7b\u578b\u4e0a\u5df2\u7ecf\u5b9a\u4e49\u8fc7\u7684\u65b9\u6cd5\u3002 \u5b9a\u4e49\u65b9\u6cd5\u7684\u4e00\u822c\u683c\u5f0f\u5982\u4e0b\uff1a func ( recv receiver_type ) methodName ( parameter_list ) ( return_value_list ) { ... } \u5728\u65b9\u6cd5\u540d\u4e4b\u524d\uff0c func \u5173\u952e\u5b57\u4e4b\u540e\u7684\u62ec\u53f7\u4e2d\u6307\u5b9a receiver\u3002 \u5982\u679c recv \u662f receiver \u7684\u5b9e\u4f8b\uff0c Method1 \u662f\u5b83\u7684\u65b9\u6cd5\u540d\uff0c\u90a3\u4e48\u65b9\u6cd5\u8c03\u7528\u9075\u5faa\u4f20\u7edf\u7684 object.name \u9009\u62e9\u5668\u7b26\u53f7\uff1a recv.Method1() \u3002 \u5982\u679c recv \u662f\u4e00\u4e2a\u6307\u9488\uff0cGo \u4f1a\u81ea\u52a8\u89e3\u5f15\u7528\u3002 \u5982\u679c\u65b9\u6cd5\u4e0d\u9700\u8981\u4f7f\u7528 recv \u7684\u503c\uff0c\u53ef\u4ee5\u7528 _ \u66ff\u6362\u5b83\uff0c\u6bd4\u5982\uff1a func ( _ receiver_type ) methodName ( parameter_list ) ( return_value_list ) { ... } recv \u5c31\u50cf\u662f\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u4e2d\u7684 this \u6216 self \uff0c\u4f46\u662f Go \u4e2d\u5e76\u6ca1\u6709\u8fd9\u4e24\u4e2a\u5173\u952e\u5b57\u3002\u968f\u4e2a\u4eba\u559c\u597d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 this \u6216 self \u4f5c\u4e3a receiver \u7684\u540d\u5b57\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u4e0a\u7684\u7b80\u5355\u65b9\u6cd5\u7684\u4f8b\u5b50\uff1a \u793a\u4f8b 10.10 method1 .go \uff1a package main import \"fmt\" type TwoInts struct { a int b int } func main () { two1 := new ( TwoInts ) two1 . a = 12 two1 . b = 10 fmt . Printf ( \"The sum is: %d\\n\" , two1 . AddThem ()) fmt . Printf ( \"Add them to the param: %d\\n\" , two1 . AddToParam ( 20 )) two2 := TwoInts { 3 , 4 } fmt . Printf ( \"The sum is: %d\\n\" , two2 . AddThem ()) } func ( tn * TwoInts ) AddThem () int { return tn . a + tn . b } func ( tn * TwoInts ) AddToParam ( param int ) int { return tn . a + tn . b + param } \u8f93\u51fa\uff1a The sum is: 22 Add them to the param: 42 The sum is: 7 \u4e0b\u9762\u662f\u975e\u7ed3\u6784\u4f53\u7c7b\u578b\u4e0a\u65b9\u6cd5\u7684\u4f8b\u5b50\uff1a \u793a\u4f8b 10.11 method2.go \uff1a package main import \"fmt\" type IntVector [] int func ( v IntVector ) Sum () ( s int ) { for _ , x := range v { s += x } return } func main () { fmt . Println ( IntVector { 1 , 2 , 3 }. Sum ()) // \u8f93\u51fa\u662f6 } \u7ec3\u4e60 10.6 employee_salary.go \u5b9a\u4e49\u7ed3\u6784\u4f53 employee \uff0c\u5b83\u6709\u4e00\u4e2a salary \u5b57\u6bb5\uff0c\u7ed9\u8fd9\u4e2a\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5 giveRaise \u6765\u6309\u7167\u6307\u5b9a\u7684\u767e\u5206\u6bd4\u589e\u52a0\u85aa\u6c34\u3002 \u7ec3\u4e60 10.7 iteration_list.go \u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u6709\u4ec0\u4e48\u9519\uff1f package main import \"container/list\" func ( p * list . List ) Iter () { // ... } func main () { lst := new ( list . List ) for _ = range lst . Iter () { } } \u7c7b\u578b\u548c\u4f5c\u7528\u5728\u5b83\u4e0a\u9762\u5b9a\u4e49\u7684\u65b9\u6cd5\u5fc5\u987b\u5728\u540c\u4e00\u4e2a\u5305\u91cc\u5b9a\u4e49\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u5728 int \u3001 float32(64) \u6216\u7c7b\u4f3c\u8fd9\u4e9b\u7684\u7c7b\u578b\u4e0a\u5b9a\u4e49\u65b9\u6cd5\u3002\u8bd5\u56fe\u5728 int \u7c7b\u578b\u4e0a\u5b9a\u4e49\u65b9\u6cd5\u4f1a\u5f97\u5230\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\uff1a cannot define new methods on non-local type int \u6bd4\u5982\u60f3\u5728 time.Time \u4e0a\u5b9a\u4e49\u5982\u4e0b\u65b9\u6cd5\uff1a func ( t time . Time ) first3Chars () string { return time . LocalTime (). String ()[ 0 : 3 ] } \u7c7b\u578b\u5728\u5176\u4ed6\u7684\uff0c\u6216\u662f\u975e\u672c\u5730\u7684\u5305\u91cc\u5b9a\u4e49\uff0c\u5728\u5b83\u4e0a\u9762\u5b9a\u4e49\u65b9\u6cd5\u90fd\u4f1a\u5f97\u5230\u548c\u4e0a\u9762\u540c\u6837\u7684\u9519\u8bef\u3002 \u4f46\u662f\u6709\u4e00\u4e2a\u95f4\u63a5\u7684\u65b9\u5f0f\uff1a\u53ef\u4ee5\u5148\u5b9a\u4e49\u8be5\u7c7b\u578b\uff08\u6bd4\u5982\uff1a int \u6216 float32(64) \uff09\u7684\u522b\u540d\u7c7b\u578b\uff0c\u7136\u540e\u518d\u4e3a\u522b\u540d\u7c7b\u578b\u5b9a\u4e49\u65b9\u6cd5\u3002\u6216\u8005\u50cf\u4e0b\u9762\u8fd9\u6837\u5c06\u5b83\u4f5c\u4e3a\u533f\u540d\u7c7b\u578b\u5d4c\u5165\u5728\u4e00\u4e2a\u65b0\u7684\u7ed3\u6784\u4f53\u4e2d\u3002\u5f53\u7136\u65b9\u6cd5\u53ea\u5728\u8fd9\u4e2a\u522b\u540d\u7c7b\u578b\u4e0a\u6709\u6548\u3002 \u793a\u4f8b 10.12 method_on_time.go \uff1a package main import ( \"fmt\" \"time\" ) type myTime struct { time . Time //anonymous field } func ( t myTime ) first3Chars () string { return t . Time . String ()[ 0 : 3 ] } func main () { m := myTime { time . Now ()} // \u8c03\u7528\u533f\u540d Time \u4e0a\u7684 String \u65b9\u6cd5 fmt . Println ( \"Full time now:\" , m . String ()) // \u8c03\u7528 myTime.first3Chars fmt . Println ( \"First 3 chars:\" , m . first3Chars ()) } /* Output: Full time now: Mon Oct 24 15:34:54 Romance Daylight Time 2011 First 3 chars: Mon */ 10.6.2 \u51fd\u6570\u548c\u65b9\u6cd5\u7684\u533a\u522b \u00b6 \u51fd\u6570\u5c06\u53d8\u91cf\u4f5c\u4e3a\u53c2\u6570\uff1a Function1(recv) \u65b9\u6cd5\u5728\u53d8\u91cf\u4e0a\u88ab\u8c03\u7528\uff1a recv.Method1() \u5728\u63a5\u6536\u8005\u662f\u6307\u9488\u65f6\uff0c\u65b9\u6cd5\u53ef\u4ee5\u6539\u53d8\u63a5\u6536\u8005\u7684\u503c\uff08\u6216\u72b6\u6001\uff09\uff0c\u8fd9\u70b9\u51fd\u6570\u4e5f\u53ef\u4ee5\u505a\u5230\uff08\u5f53\u53c2\u6570\u4f5c\u4e3a\u6307\u9488\u4f20\u9012\uff0c\u5373\u901a\u8fc7\u5f15\u7528\u8c03\u7528\u65f6\uff0c\u51fd\u6570\u4e5f\u53ef\u4ee5\u6539\u53d8\u53c2\u6570\u7684\u72b6\u6001\uff09\u3002 \u4e0d\u8981\u5fd8\u8bb0 Method1() \u540e\u8fb9\u7684\u62ec\u53f7 () \uff0c\u5426\u5219\u4f1a\u5f15\u53d1\u7f16\u8bd1\u5668\u9519\u8bef\uff1a method recv.Method1 is not an expression, must be called \u63a5\u6536\u8005\u5fc5\u987b\u6709\u4e00\u4e2a\u663e\u5f0f\u7684\u540d\u5b57\uff0c\u8fd9\u4e2a\u540d\u5b57\u5fc5\u987b\u5728\u65b9\u6cd5\u4e2d\u88ab\u4f7f\u7528\u3002 receiver_type \u53eb\u505a \uff08\u63a5\u6536\u8005\uff09\u57fa\u672c\u7c7b\u578b \uff0c\u8fd9\u4e2a\u7c7b\u578b\u5fc5\u987b\u5728\u548c\u65b9\u6cd5\u540c\u6837\u7684\u5305\u4e2d\u88ab\u58f0\u660e\u3002 \u5728 Go \u4e2d\uff0c\uff08\u63a5\u6536\u8005\uff09\u7c7b\u578b\u5173\u8054\u7684\u65b9\u6cd5\u4e0d\u5199\u5728\u7c7b\u578b\u7ed3\u6784\u91cc\u9762\uff0c\u5c31\u50cf\u7c7b\u90a3\u6837\uff1b\u8026\u5408\u66f4\u52a0\u5bbd\u677e\uff1b\u7c7b\u578b\u548c\u65b9\u6cd5\u4e4b\u95f4\u7684\u5173\u8054\u7531\u63a5\u6536\u8005\u6765\u5efa\u7acb\u3002 \u65b9\u6cd5\u6ca1\u6709\u548c\u6570\u636e\u5b9a\u4e49\uff08\u7ed3\u6784\u4f53\uff09\u6df7\u5728\u4e00\u8d77\uff1a\u5b83\u4eec\u662f\u6b63\u4ea4\u7684\u7c7b\u578b\uff1b\u8868\u793a\uff08\u6570\u636e\uff09\u548c\u884c\u4e3a\uff08\u65b9\u6cd5\uff09\u662f\u72ec\u7acb\u7684\u3002 10.6.3 \u6307\u9488\u6216\u503c\u4f5c\u4e3a\u63a5\u6536\u8005 \u00b6 \u9274\u4e8e\u6027\u80fd\u7684\u539f\u56e0\uff0c recv \u6700\u5e38\u89c1\u7684\u662f\u4e00\u4e2a\u6307\u5411 receiver_type \u7684\u6307\u9488\uff08\u56e0\u4e3a\u6211\u4eec\u4e0d\u60f3\u8981\u4e00\u4e2a\u5b9e\u4f8b\u7684\u62f7\u8d1d\uff0c\u5982\u679c\u6309\u503c\u8c03\u7528\u7684\u8bdd\u5c31\u4f1a\u662f\u8fd9\u6837\uff09\uff0c\u7279\u522b\u662f\u5728 receiver \u7c7b\u578b\u662f\u7ed3\u6784\u4f53\u65f6\uff0c\u5c31\u66f4\u662f\u5982\u6b64\u4e86\u3002 \u5982\u679c\u60f3\u8981\u65b9\u6cd5\u6539\u53d8\u63a5\u6536\u8005\u7684\u6570\u636e\uff0c\u5c31\u5728\u63a5\u6536\u8005\u7684\u6307\u9488\u7c7b\u578b\u4e0a\u5b9a\u4e49\u8be5\u65b9\u6cd5\u3002\u5426\u5219\uff0c\u5c31\u5728\u666e\u901a\u7684\u503c\u7c7b\u578b\u4e0a\u5b9a\u4e49\u65b9\u6cd5\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50 pointer_value.go \u4f5c\u4e86\u8bf4\u660e\uff1a change() \u63a5\u53d7\u4e00\u4e2a\u6307\u5411 B \u7684\u6307\u9488\uff0c\u5e76\u6539\u53d8\u5b83\u5185\u90e8\u7684\u6210\u5458\uff1b write() \u901a\u8fc7\u62f7\u8d1d\u63a5\u53d7 B \u7684\u503c\u5e76\u53ea\u8f93\u51fa B \u7684\u5185\u5bb9\u3002\u6ce8\u610f Go \u4e3a\u6211\u4eec\u505a\u4e86\u63a2\u6d4b\u5de5\u4f5c\uff0c\u6211\u4eec\u81ea\u5df1\u5e76\u6ca1\u6709\u6307\u51fa\u662f\u5426\u5728\u6307\u9488\u4e0a\u8c03\u7528\u65b9\u6cd5\uff0cGo \u66ff\u6211\u4eec\u505a\u4e86\u8fd9\u4e9b\u4e8b\u60c5\u3002 b1 \u662f\u503c\u800c b2 \u662f\u6307\u9488\uff0c\u65b9\u6cd5\u90fd\u652f\u6301\u8fd0\u884c\u4e86\u3002 \u793a\u4f8b 10.13 pointer_value.go \uff1a package main import ( \"fmt\" ) type B struct { thing int } func ( b * B ) change () { b . thing = 1 } func ( b B ) write () string { return fmt . Sprint ( b ) } func main () { var b1 B // b1 \u662f\u503c b1 . change () fmt . Println ( b1 . write ()) b2 := new ( B ) // b2 \u662f\u6307\u9488 b2 . change () fmt . Println ( b2 . write ()) } /* \u8f93\u51fa\uff1a {1} {1} */ \u8bd5\u7740\u5728 write() \u4e2d\u6539\u53d8\u63a5\u6536\u8005 b \u7684\u503c\uff1a\u5c06\u4f1a\u770b\u5230\u5b83\u53ef\u4ee5\u6b63\u5e38\u7f16\u8bd1\uff0c\u4f46\u662f\u5f00\u59cb\u7684 b \u6ca1\u6709\u88ab\u6539\u53d8\u3002 \u6211\u4eec\u77e5\u9053\u65b9\u6cd5\u5c06\u6307\u9488\u4f5c\u4e3a\u63a5\u6536\u8005\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u53ea\u662f\u9700\u8981 Point3 \u7684\u503c\u6765\u505a\u8ba1\u7b97\uff1a type Point3 struct { x , y , z float64 } // A method on Point3 func ( p Point3 ) Abs () float64 { return math . Sqrt ( p . x * p . x + p . y * p . y + p . z * p . z ) } \u8fd9\u6837\u505a\u7a0d\u5fae\u6709\u70b9\u6602\u8d35\uff0c\u56e0\u4e3a Point3 \u662f\u4f5c\u4e3a\u503c\u4f20\u9012\u7ed9\u65b9\u6cd5\u7684\uff0c\u56e0\u6b64\u4f20\u9012\u7684\u662f\u5b83\u7684\u62f7\u8d1d\uff0c\u8fd9\u5728 Go \u4e2d\u662f\u5408\u6cd5\u7684\u3002\u4e5f\u53ef\u4ee5\u5728\u6307\u5411\u8fd9\u4e2a\u7c7b\u578b\u7684\u6307\u9488\u4e0a\u8c03\u7528\u6b64\u65b9\u6cd5\uff08\u4f1a\u81ea\u52a8\u89e3\u5f15\u7528\uff09\u3002 \u5047\u8bbe p3 \u5b9a\u4e49\u4e3a\u4e00\u4e2a\u6307\u9488\uff1a p3 := &Point{ 3, 4, 5} \u3002 \u53ef\u4ee5\u4f7f\u7528 p3.Abs() \u6765\u66ff\u4ee3 (*p3).Abs() \u3002 \u50cf\u4f8b\u5b50 10.10 ( method1.go ) \u4e2d\u63a5\u6536\u8005\u7c7b\u578b\u662f *TwoInts \u7684\u65b9\u6cd5 AddThem() \uff0c\u5b83\u80fd\u5728\u7c7b\u578b TwoInts \u7684\u503c\u4e0a\u88ab\u8c03\u7528\uff0c\u8fd9\u662f\u81ea\u52a8\u95f4\u63a5\u53d1\u751f\u7684\u3002 \u56e0\u6b64 two2.AddThem \u53ef\u4ee5\u66ff\u4ee3 (&two2).AddThem() \u3002 \u5728\u503c\u548c\u6307\u9488\u4e0a\u8c03\u7528\u65b9\u6cd5\uff1a \u53ef\u4ee5\u6709\u8fde\u63a5\u5230\u7c7b\u578b\u7684\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u6709\u8fde\u63a5\u5230\u7c7b\u578b\u6307\u9488\u7684\u65b9\u6cd5\u3002 \u4f46\u662f\u8fd9\u6ca1\u5173\u7cfb\uff1a\u5bf9\u4e8e\u7c7b\u578b T \uff0c\u5982\u679c\u5728 \\*T \u4e0a\u5b58\u5728\u65b9\u6cd5 Meth() \uff0c\u5e76\u4e14 t \u662f\u8fd9\u4e2a\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u90a3\u4e48 t.Meth() \u4f1a\u88ab\u81ea\u52a8\u8f6c\u6362\u4e3a (&t).Meth() \u3002 \u6307\u9488\u65b9\u6cd5\u548c\u503c\u65b9\u6cd5\u90fd\u53ef\u4ee5\u5728\u6307\u9488\u6216\u975e\u6307\u9488\u4e0a\u88ab\u8c03\u7528 \uff0c\u5982\u4e0b\u9762\u7a0b\u5e8f\u6240\u793a\uff0c\u7c7b\u578b List \u5728\u503c\u4e0a\u6709\u4e00\u4e2a\u65b9\u6cd5 Len() \uff0c\u5728\u6307\u9488\u4e0a\u6709\u4e00\u4e2a\u65b9\u6cd5 Append() \uff0c\u4f46\u662f\u53ef\u4ee5\u770b\u5230\u4e24\u4e2a\u65b9\u6cd5\u90fd\u53ef\u4ee5\u5728\u4e24\u79cd\u7c7b\u578b\u7684\u53d8\u91cf\u4e0a\u88ab\u8c03\u7528\u3002 \u793a\u4f8b 10.14 methodset1.go \uff1a package main import ( \"fmt\" ) type List [] int func ( l List ) Len () int { return len ( l ) } func ( l * List ) Append ( val int ) { * l = append ( * l , val ) } func main () { // \u503c var lst List lst . Append ( 1 ) fmt . Printf ( \"%v (len: %d)\" , lst , lst . Len ()) // [1] (len: 1) // \u6307\u9488 plst := new ( List ) plst . Append ( 2 ) fmt . Printf ( \"%v (len: %d)\" , plst , plst . Len ()) // &[2] (len: 1) } 10.6.4 \u65b9\u6cd5\u548c\u672a\u5bfc\u51fa\u5b57\u6bb5 \u00b6 \u8003\u8651 person2.go \u4e2d\u7684 person \u5305\uff1a\u7c7b\u578b Person \u88ab\u660e\u786e\u7684\u5bfc\u51fa\u4e86\uff0c\u4f46\u662f\u5b83\u7684\u5b57\u6bb5\u6ca1\u6709\u88ab\u5bfc\u51fa\u3002\u4f8b\u5982\u5728 use_person2.go \u4e2d p.firstName \u5c31\u662f\u9519\u8bef\u7684\u3002\u8be5\u5982\u4f55\u5728\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u4fee\u6539\u6216\u8005\u53ea\u662f\u8bfb\u53d6\u4e00\u4e2a Person \u7684\u540d\u5b57\u5462\uff1f \u8fd9\u53ef\u4ee5\u901a\u8fc7\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u4e00\u4e2a\u4f17\u6240\u5468\u77e5\u7684\u6280\u672f\u6765\u5b8c\u6210\uff1a\u63d0\u4f9b getter() \u548c setter() \u65b9\u6cd5\u3002\u5bf9\u4e8e setter() \u65b9\u6cd5\u4f7f\u7528 Set... \u524d\u7f00\uff0c\u5bf9\u4e8e getter() \u65b9\u6cd5\u53ea\u4f7f\u7528\u6210\u5458\u540d\u3002 \u793a\u4f8b 10.15 person2.go \uff1a package person type Person struct { firstName string lastName string } func ( p * Person ) FirstName () string { return p . firstName } func ( p * Person ) SetFirstName ( newName string ) { p . firstName = newName } \u793a\u4f8b 10.16 use_person2.go \uff1a package main import ( \"./person\" \"fmt\" ) func main () { p := new ( person . Person ) // p.firstName undefined // (cannot refer to unexported field or method firstName) // p.firstName = \"Eric\" p . SetFirstName ( \"Eric\" ) fmt . Println ( p . FirstName ()) // Output: Eric } \u5e76\u53d1\u8bbf\u95ee\u5bf9\u8c61 \u5bf9\u8c61\u7684\u5b57\u6bb5\uff08\u5c5e\u6027\uff09\u4e0d\u5e94\u8be5\u7531 2 \u4e2a\u6216 2 \u4e2a\u4ee5\u4e0a\u7684\u4e0d\u540c\u7ebf\u7a0b\u5728\u540c\u4e00\u65f6\u95f4\u53bb\u6539\u53d8\u3002\u5982\u679c\u5728\u7a0b\u5e8f\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u4e3a\u4e86\u5b89\u5168\u5e76\u53d1\u8bbf\u95ee\uff0c\u53ef\u4ee5\u4f7f\u7528\u5305 sync \uff08\u53c2\u8003 \u7b2c 9.3 \u8282 \u4e2d\u7684\u65b9\u6cd5\u3002\u5728 \u7b2c 14.17 \u8282 \u4e2d\u6211\u4eec\u4f1a\u901a\u8fc7 goroutines \u548c channels \u63a2\u7d22\u53e6\u4e00\u79cd\u65b9\u5f0f\u3002 10.6.5 \u5185\u5d4c\u7c7b\u578b\u7684\u65b9\u6cd5\u548c\u7ee7\u627f \u00b6 \u5f53\u4e00\u4e2a\u533f\u540d\u7c7b\u578b\u88ab\u5185\u5d4c\u5728\u7ed3\u6784\u4f53\u4e2d\u65f6\uff0c\u533f\u540d\u7c7b\u578b\u7684\u53ef\u89c1\u65b9\u6cd5\u4e5f\u540c\u6837\u88ab\u5185\u5d4c\uff0c\u8fd9\u5728\u6548\u679c\u4e0a\u7b49\u540c\u4e8e\u5916\u5c42\u7c7b\u578b \u7ee7\u627f \u4e86\u8fd9\u4e9b\u65b9\u6cd5\uff1a \u5c06\u7236\u7c7b\u578b\u653e\u5728\u5b50\u7c7b\u578b\u4e2d\u6765\u5b9e\u73b0\u4e9a\u578b \u3002\u8fd9\u4e2a\u673a\u5236\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u6a21\u62df\u7ecf\u5178\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u4e2d\u7684\u5b50\u7c7b\u548c\u7ee7\u627f\u76f8\u5173\u7684\u6548\u679c\uff0c\u4e5f\u7c7b\u4f3c Ruby \u4e2d\u7684\u6df7\u5165 (mixin)\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u793a\u4f8b\uff08\u53ef\u4ee5\u5728\u7ec3\u4e60 10.8 \u4e2d\u8fdb\u4e00\u6b65\u5b66\u4e60\uff09\uff1a\u5047\u5b9a\u6709\u4e00\u4e2a Engine \u63a5\u53e3\u7c7b\u578b\uff0c\u4e00\u4e2a Car \u7ed3\u6784\u4f53\u7c7b\u578b\uff0c\u5b83\u5305\u542b\u4e00\u4e2a Engine \u7c7b\u578b\u7684\u533f\u540d\u5b57\u6bb5\uff1a type Engine interface { Start () Stop () } type Car struct { Engine } \u6211\u4eec\u53ef\u4ee5\u6784\u5efa\u5982\u4e0b\u7684\u4ee3\u7801\uff1a func ( c * Car ) GoToWorkIn () { // get in car c . Start () // drive to work c . Stop () // get out of car } \u4e0b\u9762\u662f method3.go \u7684\u5b8c\u6574\u4f8b\u5b50\uff0c\u5b83\u5c55\u793a\u4e86\u5185\u5d4c\u7ed3\u6784\u4f53\u4e0a\u7684\u65b9\u6cd5\u53ef\u4ee5\u76f4\u63a5\u5728\u5916\u5c42\u7c7b\u578b\u7684\u5b9e\u4f8b\u4e0a\u8c03\u7528\uff1a package main import ( \"fmt\" \"math\" ) type Point struct { x , y float64 } func ( p * Point ) Abs () float64 { return math . Sqrt ( p . x * p . x + p . y * p . y ) } type NamedPoint struct { Point name string } func main () { n := & NamedPoint { Point { 3 , 4 }, \"Pythagoras\" } fmt . Println ( n . Abs ()) // \u6253\u5370 5 } \u5185\u5d4c\u5c06\u4e00\u4e2a\u5df2\u5b58\u5728\u7c7b\u578b\u7684\u5b57\u6bb5\u548c\u65b9\u6cd5\u6ce8\u5165\u5230\u4e86\u53e6\u4e00\u4e2a\u7c7b\u578b\u91cc\uff1a\u533f\u540d\u5b57\u6bb5\u4e0a\u7684\u65b9\u6cd5\u201c\u664b\u5347\u201d\u6210\u4e3a\u4e86\u5916\u5c42\u7c7b\u578b\u7684\u65b9\u6cd5\u3002\u5f53\u7136\u7c7b\u578b\u53ef\u4ee5\u6709\u53ea\u4f5c\u7528\u4e8e\u672c\u8eab\u5b9e\u4f8b\u800c\u4e0d\u4f5c\u7528\u4e8e\u5185\u5d4c\u201c\u7236\u201d\u7c7b\u578b\u4e0a\u7684\u65b9\u6cd5\u3002 \u53ef\u4ee5\u8986\u5199\u65b9\u6cd5\uff08\u50cf\u5b57\u6bb5\u4e00\u6837\uff09\uff1a\u548c\u5185\u5d4c\u7c7b\u578b\u65b9\u6cd5\u5177\u6709\u540c\u6837\u540d\u5b57\u7684\u5916\u5c42\u7c7b\u578b\u7684\u65b9\u6cd5\u4f1a\u8986\u5199\u5185\u5d4c\u7c7b\u578b\u5bf9\u5e94\u7684\u65b9\u6cd5\u3002 \u5728\u793a\u4f8b 10.18 method4.go \u4e2d\u6dfb\u52a0\uff1a func ( n * NamedPoint ) Abs () float64 { return n . Point . Abs () * 100. } \u73b0\u5728 fmt.Println(n.Abs()) \u4f1a\u6253\u5370 500 \u3002 \u56e0\u4e3a\u4e00\u4e2a\u7ed3\u6784\u4f53\u53ef\u4ee5\u5d4c\u5165\u591a\u4e2a\u533f\u540d\u7c7b\u578b\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u6211\u4eec\u53ef\u4ee5\u6709\u4e00\u4e2a\u7b80\u5355\u7248\u672c\u7684\u591a\u91cd\u7ee7\u627f\uff0c\u5c31\u50cf\uff1a type Child struct { Father; Mother} \u3002\u5728 \u7b2c 10.6.7 \u8282 \u4e2d\u4f1a\u8fdb\u4e00\u6b65\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u3002 \u7ed3\u6784\u4f53\u5185\u5d4c\u548c\u81ea\u5df1\u5728\u540c\u4e00\u4e2a\u5305\u4e2d\u7684\u7ed3\u6784\u4f53\u65f6\uff0c\u53ef\u4ee5\u5f7c\u6b64\u8bbf\u95ee\u5bf9\u65b9\u6240\u6709\u7684\u5b57\u6bb5\u548c\u65b9\u6cd5\u3002 \u7ec3\u4e60 10.8 inheritance_car.go \u521b\u5efa\u4e00\u4e2a\u4e0a\u9762 Car \u548c Engine \u53ef\u8fd0\u884c\u7684\u4f8b\u5b50\uff0c\u5e76\u4e14\u7ed9 Car \u7c7b\u578b\u4e00\u4e2a wheelCount \u5b57\u6bb5\u548c\u4e00\u4e2a numberOfWheels() \u65b9\u6cd5\u3002 \u521b\u5efa\u4e00\u4e2a Mercedes \u7c7b\u578b\uff0c\u5b83\u5185\u5d4c Car \uff0c\u5e76\u65b0\u5efa Mercedes \u7684\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u7136\u540e\u8c03\u7528\u5b83\u7684\u65b9\u6cd5\u3002 \u7136\u540e\u4ec5\u5728 Mercedes \u7c7b\u578b\u4e0a\u521b\u5efa\u65b9\u6cd5 sayHiToMerkel() \u5e76\u8c03\u7528\u5b83\u3002 10.6.6 \u5982\u4f55\u5728\u7c7b\u578b\u4e2d\u5d4c\u5165\u529f\u80fd \u00b6 \u4e3b\u8981\u6709\u4e24\u79cd\u65b9\u6cd5\u6765\u5b9e\u73b0\u5728\u7c7b\u578b\u4e2d\u5d4c\u5165\u529f\u80fd\uff1a A\uff1a\u805a\u5408\uff08\u6216\u7ec4\u5408\uff09\uff1a\u5305\u542b\u4e00\u4e2a\u6240\u9700\u529f\u80fd\u7c7b\u578b\u7684\u5177\u540d\u5b57\u6bb5\u3002 B\uff1a\u5185\u5d4c\uff1a\u5185\u5d4c\uff08\u533f\u540d\u5730\uff09\u6240\u9700\u529f\u80fd\u7c7b\u578b\uff0c\u50cf\u524d\u4e00\u8282 10.6.5 \u6240\u6f14\u793a\u7684\u90a3\u6837\u3002 \u4e3a\u4e86\u4f7f\u8fd9\u4e9b\u6982\u5ff5\u5177\u4f53\u5316\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a Customer \u7c7b\u578b\uff0c\u6211\u4eec\u60f3\u8ba9\u5b83\u901a\u8fc7 Log \u7c7b\u578b\u6765\u5305\u542b\u65e5\u5fd7\u529f\u80fd\uff0c Log \u7c7b\u578b\u53ea\u662f\u7b80\u5355\u5730\u5305\u542b\u4e00\u4e2a\u7d2f\u79ef\u7684\u6d88\u606f\uff08\u5f53\u7136\u5b83\u53ef\u4ee5\u662f\u590d\u6742\u7684\uff09\u3002\u5982\u679c\u60f3\u8ba9\u7279\u5b9a\u7c7b\u578b\u90fd\u5177\u5907\u65e5\u5fd7\u529f\u80fd\uff0c\u4f60\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u8fd9\u6837\u7684 Log \u7c7b\u578b\uff0c\u7136\u540e\u5c06\u5b83\u4f5c\u4e3a\u7279\u5b9a\u7c7b\u578b\u7684\u4e00\u4e2a\u5b57\u6bb5\uff0c\u5e76\u63d0\u4f9b Log() \uff0c\u5b83\u8fd4\u56de\u8fd9\u4e2a\u65e5\u5fd7\u7684\u5f15\u7528\u3002 \u65b9\u5f0f A \u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u6cd5\u5b9e\u73b0\uff08\u4f7f\u7528\u4e86 \u7b2c 10.7 \u8282 \u4e2d\u7684 String() \u529f\u80fd\uff09\uff1a \u793a\u4f8b 10.19 embed_func1.go \uff1a package main import ( \"fmt\" ) type Log struct { msg string } type Customer struct { Name string log * Log } func main () { c := new ( Customer ) c . Name = \"Barak Obama\" c . log = new ( Log ) c . log . msg = \"1 - Yes we can!\" // shorter c = & Customer { \"Barak Obama\" , & Log { \"1 - Yes we can!\" }} // fmt.Println(c) &{Barak Obama 1 - Yes we can!} c . Log (). Add ( \"2 - After me the world will be a better place!\" ) //fmt.Println(c.log) fmt . Println ( c . Log ()) } func ( l * Log ) Add ( s string ) { l . msg += \"\\n\" + s } func ( l * Log ) String () string { return l . msg } func ( c * Customer ) Log () * Log { return c . log } \u8f93\u51fa\uff1a 1 - Yes we can! 2 - After me the world will be a better place! \u76f8\u5bf9\u7684\u65b9\u5f0f B \u53ef\u80fd\u4f1a\u50cf\u8fd9\u6837 ( embed_func2.go )\uff1a package main import ( \"fmt\" ) type Log struct { msg string } type Customer struct { Name string Log } func main () { c := & Customer { \"Barak Obama\" , Log { \"1 - Yes we can!\" }} c . Add ( \"2 - After me the world will be a better place!\" ) fmt . Println ( c ) } func ( l * Log ) Add ( s string ) { l . msg += \"\\n\" + s } func ( l * Log ) String () string { return l . msg } func ( c * Customer ) String () string { return c . Name + \"\\nLog:\" + fmt . Sprintln ( c . Log . String ()) } \u8f93\u51fa\uff1a Barak Obama Log:1 - Yes we can! 2 - After me the world will be a better place! \u5185\u5d4c\u7684\u7c7b\u578b\u4e0d\u9700\u8981\u6307\u9488\uff0c Customer \u4e5f\u4e0d\u9700\u8981 Add \u65b9\u6cd5\uff0c\u5b83\u4f7f\u7528 Log \u7684 Add \u65b9\u6cd5\uff0c Customer \u6709\u81ea\u5df1\u7684 String \u65b9\u6cd5\uff0c\u5e76\u4e14\u5728\u5b83\u91cc\u9762\u8c03\u7528\u4e86 Log \u7684 String \u65b9\u6cd5\u3002 \u5982\u679c\u5185\u5d4c\u7c7b\u578b\u5d4c\u5165\u4e86\u5176\u4ed6\u7c7b\u578b\uff0c\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u90a3\u4e9b\u7c7b\u578b\u7684\u65b9\u6cd5\u53ef\u4ee5\u76f4\u63a5\u5728\u5916\u5c42\u7c7b\u578b\u4e2d\u4f7f\u7528\u3002 \u56e0\u6b64\u4e00\u4e2a\u597d\u7684\u7b56\u7565\u662f\u521b\u5efa\u4e00\u4e9b\u5c0f\u7684\u3001\u53ef\u590d\u7528\u7684\u7c7b\u578b\u4f5c\u4e3a\u4e00\u4e2a\u5de5\u5177\u7bb1\uff0c\u7528\u4e8e\u7ec4\u6210\u57df\u7c7b\u578b\u3002 10.6.7 \u591a\u91cd\u7ee7\u627f \u00b6 \u591a\u91cd\u7ee7\u627f\u6307\u7684\u662f\u7c7b\u578b\u83b7\u5f97\u591a\u4e2a\u7236\u7c7b\u578b\u884c\u4e3a\u7684\u80fd\u529b\uff0c\u5b83\u5728\u4f20\u7edf\u7684\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u4e2d\u901a\u5e38\u662f\u4e0d\u88ab\u5b9e\u73b0\u7684\uff08C++ \u548c Python \u4f8b\u5916\uff09\u3002\u56e0\u4e3a\u5728\u7c7b\u7ee7\u627f\u5c42\u6b21\u4e2d\uff0c\u591a\u91cd\u7ee7\u627f\u4f1a\u7ed9\u7f16\u8bd1\u5668\u5f15\u5165\u989d\u5916\u7684\u590d\u6742\u5ea6\u3002\u4f46\u662f\u5728 Go \u8bed\u8a00\u4e2d\uff0c\u901a\u8fc7\u5728\u7c7b\u578b\u4e2d\u5d4c\u5165\u6240\u6709\u5fc5\u8981\u7684\u7236\u7c7b\u578b\uff0c\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u5b9e\u73b0\u591a\u91cd\u7ee7\u627f\u3002 \u4f5c\u4e3a\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a\u7c7b\u578b CameraPhone \uff0c\u901a\u8fc7\u5b83\u53ef\u4ee5 Call() \uff0c\u4e5f\u53ef\u4ee5 TakeAPicture() \uff0c\u4f46\u662f\u7b2c\u4e00\u4e2a\u65b9\u6cd5\u5c5e\u4e8e\u7c7b\u578b Phone \uff0c\u7b2c\u4e8c\u4e2a\u65b9\u6cd5\u5c5e\u4e8e\u7c7b\u578b Camera \u3002 \u53ea\u8981\u5d4c\u5165\u8fd9\u4e24\u4e2a\u7c7b\u578b\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5982\u4e0b\u6240\u793a ( mult_inheritance.go )\uff1a package main import ( \"fmt\" ) type Camera struct {} func ( c * Camera ) TakeAPicture () string { return \"Click\" } type Phone struct {} func ( p * Phone ) Call () string { return \"Ring Ring\" } type CameraPhone struct { Camera Phone } func main () { cp := new ( CameraPhone ) fmt . Println ( \"Our new CameraPhone exhibits multiple behaviors...\" ) fmt . Println ( \"It exhibits behavior of a Camera: \" , cp . TakeAPicture ()) fmt . Println ( \"It works like a Phone too: \" , cp . Call ()) } \u8f93\u51fa\uff1a Our new CameraPhone exhibits multiple behaviors... It exhibits behavior of a Camera: Click It works like a Phone too: Ring Ring \u7ec3\u4e60 10.9 point_methods.go \uff1a \u4ece point.go \u5f00\u59cb\uff08 \u7b2c 10.1 \u8282 \u7684\u7ec3\u4e60\uff09\uff1a\u4f7f\u7528\u65b9\u6cd5\u6765\u5b9e\u73b0 Abs() \u548c Scale() \u51fd\u6570\uff0c Point \u4f5c\u4e3a\u65b9\u6cd5\u7684\u63a5\u6536\u8005\u7c7b\u578b\u3002\u4e5f\u4e3a Point3 \u548c Polar \u5b9e\u73b0 Abs() \u65b9\u6cd5\u3002\u5b8c\u6210\u4e86 point.go \u4e2d\u540c\u6837\u7684\u4e8b\u60c5\uff0c\u53ea\u662f\u8fd9\u6b21\u901a\u8fc7\u65b9\u6cd5\u3002 \u7ec3\u4e60 10.10 inherit_methods.go \uff1a \u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b Base \uff0c\u5b83\u5305\u542b\u4e00\u4e2a\u5b57\u6bb5 id \uff0c\u65b9\u6cd5 Id() \u8fd4\u56de id \uff0c\u65b9\u6cd5 SetId() \u4fee\u6539 id \u3002\u7ed3\u6784\u4f53\u7c7b\u578b Person \u5305\u542b Base \uff0c\u53ca FirstName \u548c LastName \u5b57\u6bb5\u3002\u7ed3\u6784\u4f53\u7c7b\u578b Employee \u5305\u542b\u4e00\u4e2a Person \u548c salary \u5b57\u6bb5\u3002 \u521b\u5efa\u4e00\u4e2a employee \u5b9e\u4f8b\uff0c\u7136\u540e\u663e\u793a\u5b83\u7684 id \u3002 \u7ec3\u4e60 10.11 magic.go \uff1a \u9996\u5148\u9884\u6d4b\u4e00\u4e0b\u4e0b\u9762\u7a0b\u5e8f\u7684\u7ed3\u679c\uff0c\u7136\u540e\u52a8\u624b\u5b9e\u9a8c\u4e0b\uff1a package main import ( \"fmt\" ) type Base struct {} func ( Base ) Magic () { fmt . Println ( \"base magic\" ) } func ( self Base ) MoreMagic () { self . Magic () self . Magic () } type Voodoo struct { Base } func ( Voodoo ) Magic () { fmt . Println ( \"voodoo magic\" ) } func main () { v := new ( Voodoo ) v . Magic () v . MoreMagic () } 10.6.8 \u901a\u7528\u65b9\u6cd5\u548c\u65b9\u6cd5\u547d\u540d \u00b6 \u5728\u7f16\u7a0b\u4e2d\u4e00\u4e9b\u57fa\u672c\u64cd\u4f5c\u4f1a\u4e00\u904d\u53c8\u4e00\u904d\u7684\u51fa\u73b0\uff0c\u6bd4\u5982\u6253\u5f00 (Open)\u3001\u5173\u95ed (Close)\u3001\u8bfb (Read)\u3001\u5199 (Write)\u3001\u6392\u5e8f(Sort) \u7b49\u7b49\uff0c\u5e76\u4e14\u5b83\u4eec\u90fd\u6709\u4e00\u4e2a\u5927\u81f4\u7684\u610f\u601d\uff1a\u6253\u5f00 (Open)\u53ef\u4ee5\u4f5c\u7528\u4e8e\u4e00\u4e2a\u6587\u4ef6\u3001\u4e00\u4e2a\u7f51\u7edc\u8fde\u63a5\u3001\u4e00\u4e2a\u6570\u636e\u5e93\u8fde\u63a5\u7b49\u7b49\u3002\u5177\u4f53\u7684\u5b9e\u73b0\u53ef\u80fd\u5343\u5dee\u4e07\u522b\uff0c\u4f46\u662f\u57fa\u672c\u7684\u6982\u5ff5\u662f\u4e00\u81f4\u7684\u3002\u5728 Go \u8bed\u8a00\u4e2d\uff0c\u901a\u8fc7\u4f7f\u7528\u63a5\u53e3\uff08\u53c2\u8003 \u7b2c 11 \u7ae0 \uff09\uff0c\u6807\u51c6\u5e93\u5e7f\u6cdb\u7684\u5e94\u7528\u4e86\u8fd9\u4e9b\u89c4\u5219\uff0c\u5728\u6807\u51c6\u5e93\u4e2d\u8fd9\u4e9b\u901a\u7528\u65b9\u6cd5\u90fd\u6709\u4e00\u81f4\u7684\u540d\u5b57\uff0c\u6bd4\u5982 Open() \u3001 Read() \u3001 Write() \u7b49\u3002\u60f3\u5199\u89c4\u8303\u7684 Go \u7a0b\u5e8f\uff0c\u5c31\u5e94\u8be5\u9075\u5b88\u8fd9\u4e9b\u7ea6\u5b9a\uff0c\u7ed9\u65b9\u6cd5\u5408\u9002\u7684\u540d\u5b57\u548c\u7b7e\u540d\uff0c\u5c31\u50cf\u90a3\u4e9b\u901a\u7528\u65b9\u6cd5\u90a3\u6837\u3002\u8fd9\u6837\u505a\u4f1a\u4f7f Go \u5f00\u53d1\u7684\u8f6f\u4ef6\u66f4\u52a0\u5177\u6709\u4e00\u81f4\u6027\u548c\u53ef\u8bfb\u6027\u3002\u6bd4\u5982\uff1a\u5982\u679c\u9700\u8981\u4e00\u4e2a convert-to-string() \u65b9\u6cd5\uff0c\u5e94\u8be5\u547d\u540d\u4e3a String() \uff0c\u800c\u4e0d\u662f ToString() \uff08\u53c2\u8003 \u7b2c 10.7 \u8282 \uff09\u3002 10.6.9 \u548c\u5176\u4ed6\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u6bd4\u8f83 Go \u7684\u7c7b\u578b\u548c\u65b9\u6cd5 \u00b6 \u5728\u5982 C++\u3001Java\u3001C# \u548c Ruby \u8fd9\u6837\u7684\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u4e2d\uff0c\u65b9\u6cd5\u5728\u7c7b\u7684\u4e0a\u4e0b\u6587\u4e2d\u88ab\u5b9a\u4e49\u548c\u7ee7\u627f\uff1a\u5728\u4e00\u4e2a\u5bf9\u8c61\u4e0a\u8c03\u7528\u65b9\u6cd5\u65f6\uff0c\u8fd0\u884c\u65f6\u4f1a\u68c0\u6d4b\u7c7b\u4ee5\u53ca\u5b83\u7684\u8d85\u7c7b\u4e2d\u662f\u5426\u6709\u6b64\u65b9\u6cd5\u7684\u5b9a\u4e49\uff0c\u5982\u679c\u6ca1\u6709\u4f1a\u5bfc\u81f4\u5f02\u5e38\u53d1\u751f\u3002 \u5728 Go \u8bed\u8a00\u4e2d\uff0c\u8fd9\u6837\u7684\u7ee7\u627f\u5c42\u6b21\u662f\u5b8c\u5168\u6ca1\u5fc5\u8981\u7684\uff1a\u5982\u679c\u65b9\u6cd5\u5728\u6b64\u7c7b\u578b\u5b9a\u4e49\u4e86\uff0c\u5c31\u53ef\u4ee5\u8c03\u7528\u5b83\uff0c\u548c\u5176\u4ed6\u7c7b\u578b\u4e0a\u662f\u5426\u5b58\u5728\u8fd9\u4e2a\u65b9\u6cd5\u6ca1\u6709\u5173\u7cfb\u3002\u5728\u8fd9\u4e2a\u610f\u4e49\u4e0a\uff0cGo \u5177\u6709\u66f4\u5927\u7684\u7075\u6d3b\u6027\u3002 \u4e0b\u9762\u7684\u6a21\u5f0f\u5c31\u5f88\u597d\u7684\u8bf4\u660e\u4e86\u8fd9\u4e2a\u95ee\u9898\uff1a Go \u4e0d\u9700\u8981\u4e00\u4e2a\u663e\u5f0f\u7684\u7c7b\u5b9a\u4e49\uff0c\u5982\u540c Java\u3001C++\u3001C# \u7b49\u90a3\u6837\uff0c\u76f8\u53cd\u5730\uff0c\u201c\u7c7b\u201d\u662f\u901a\u8fc7\u63d0\u4f9b\u4e00\u7ec4\u4f5c\u7528\u4e8e\u4e00\u4e2a\u5171\u540c\u7c7b\u578b\u7684\u65b9\u6cd5\u96c6\u6765\u9690\u5f0f\u5b9a\u4e49\u7684\u3002\u7c7b\u578b\u53ef\u4ee5\u662f\u7ed3\u6784\u4f53\u6216\u8005\u4efb\u4f55\u7528\u6237\u81ea\u5b9a\u4e49\u7c7b\u578b\u3002 \u6bd4\u5982\uff1a\u6211\u4eec\u60f3\u5b9a\u4e49\u81ea\u5df1\u7684 Integer \u7c7b\u578b\uff0c\u5e76\u6dfb\u52a0\u4e00\u4e9b\u7c7b\u4f3c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5\uff0c\u5728 Go \u4e2d\u53ef\u4ee5\u5982\u4e0b\u5b9a\u4e49\uff1a type Integer int func ( i * Integer ) String () string { return strconv . Itoa ( int ( * i )) } \u5728 Java \u6216 C# \u4e2d\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u9700\u8981\u548c\u7c7b Integer \u7684\u5b9a\u4e49\u653e\u5728\u4e00\u8d77\uff0c\u5728 Ruby \u4e2d\u53ef\u4ee5\u76f4\u63a5\u5728\u57fa\u672c\u7c7b\u578b int \u4e0a\u5b9a\u4e49\u8fd9\u4e2a\u65b9\u6cd5\u3002 \u603b\u7ed3 \u5728 Go \u4e2d\uff0c\u7c7b\u578b\u5c31\u662f\u7c7b\uff08\u6570\u636e\u548c\u5173\u8054\u7684\u65b9\u6cd5\uff09\u3002Go \u4e0d\u77e5\u9053\u7c7b\u4f3c\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u7684\u7c7b\u7ee7\u627f\u7684\u6982\u5ff5\u3002\u7ee7\u627f\u6709\u4e24\u4e2a\u597d\u5904\uff1a\u4ee3\u7801\u590d\u7528\u548c\u591a\u6001\u3002 \u5728 Go \u4e2d\uff0c\u4ee3\u7801\u590d\u7528\u901a\u8fc7\u7ec4\u5408\u548c\u59d4\u6258\u5b9e\u73b0\uff0c\u591a\u6001\u901a\u8fc7\u63a5\u53e3\u7684\u4f7f\u7528\u6765\u5b9e\u73b0\uff1a\u6709\u65f6\u8fd9\u4e5f\u53eb \u7ec4\u4ef6\u7f16\u7a0b (Component Programming) \u3002 \u8bb8\u591a\u5f00\u53d1\u8005\u8bf4\u76f8\u6bd4\u4e8e\u7c7b\u7ee7\u627f\uff0cGo \u7684\u63a5\u53e3\u63d0\u4f9b\u4e86\u66f4\u5f3a\u5927\u3001\u5374\u66f4\u7b80\u5355\u7684\u591a\u6001\u884c\u4e3a\u3002 \u5907\u6ce8 \u5982\u679c\u771f\u7684\u9700\u8981\u66f4\u591a\u9762\u5411\u5bf9\u8c61\u7684\u80fd\u529b\uff0c\u770b\u4e00\u4e0b goop \u5305 (Go Object-Oriented Programming)\uff0c\u5b83\u7531 Scott Pakin \u7f16\u5199: \u5b83\u7ed9 Go \u63d0\u4f9b\u4e86 JavaScript \u98ce\u683c\u7684\u5bf9\u8c61\uff08\u57fa\u4e8e\u539f\u578b\u7684\u5bf9\u8c61\uff09\uff0c\u5e76\u4e14\u652f\u6301\u591a\u91cd\u7ee7\u627f\u548c\u7c7b\u578b\u72ec\u7acb\u5206\u6d3e\uff0c\u901a\u8fc7\u5b83\u53ef\u4ee5\u5b9e\u73b0\u4f60\u559c\u6b22\u7684\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u91cc\u7684\u4e00\u4e9b\u7ed3\u6784\u3002 \u95ee\u9898 10.1 \u6211\u4eec\u5728\u67d0\u4e2a\u7c7b\u578b\u7684\u53d8\u91cf\u4e0a\u4f7f\u7528\u70b9\u53f7\u8c03\u7528\u4e00\u4e2a\u65b9\u6cd5\uff1a variable.method() \uff0c\u5728\u4f7f\u7528 Go \u4ee5\u524d\uff0c\u5728\u54ea\u513f\u78b0\u5230\u8fc7\u9762\u5411\u5bf9\u8c61\u7684\u70b9\u53f7\uff1f \u95ee\u9898 10.2 a\uff09\u5047\u8bbe\u5b9a\u4e49\uff1a type Integer int \uff0c\u5b8c\u6210 get() \u65b9\u6cd5\u7684\u65b9\u6cd5\u4f53: func (p Integer) get() int { ... } \u3002 b\uff09\u5b9a\u4e49\uff1a func f(i int) {}; var v Integer \uff0c\u5982\u4f55\u5c31 v \u4f5c\u4e3a\u53c2\u6570\u8c03\u7528f\uff1f c\uff09\u5047\u8bbe Integer \u5b9a\u4e49\u4e3a type Integer struct {n int} \uff0c\u5b8c\u6210 get() \u65b9\u6cd5\u7684\u65b9\u6cd5\u4f53\uff1a func (p Integer) get() int { ... } \u3002 d\uff09\u5bf9\u4e8e\u65b0\u5b9a\u4e49\u7684 Integer \uff0c\u548c b\uff09\u4e2d\u540c\u6837\u7684\u95ee\u9898\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u533f\u540d\u5b57\u6bb5\u548c\u5185\u5d4c\u7ed3\u6784\u4f53 \u4e0b\u4e00\u8282\uff1a \u7c7b\u578b\u7684 String() \u65b9\u6cd5\u548c\u683c\u5f0f\u5316\u63cf\u8ff0\u7b26","title":"10.6 \u65b9\u6cd5"},{"location":"10.6/#106","text":"","title":"10.6 \u65b9\u6cd5"},{"location":"10.6/#1061","text":"\u5728 Go \u8bed\u8a00\u4e2d\uff0c\u7ed3\u6784\u4f53\u5c31\u50cf\u662f\u7c7b\u7684\u4e00\u79cd\u7b80\u5316\u5f62\u5f0f\uff0c\u90a3\u4e48\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u5458\u53ef\u80fd\u4f1a\u95ee\uff1a\u7c7b\u7684\u65b9\u6cd5\u5728\u54ea\u91cc\u5462\uff1f\u5728 Go \u4e2d\u6709\u4e00\u4e2a\u6982\u5ff5\uff0c\u5b83\u548c\u65b9\u6cd5\u6709\u7740\u540c\u6837\u7684\u540d\u5b57\uff0c\u5e76\u4e14\u5927\u4f53\u4e0a\u610f\u601d\u76f8\u540c\uff1aGo \u65b9\u6cd5\u662f\u4f5c\u7528\u5728\u63a5\u6536\u8005 (receiver) \u4e0a\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u63a5\u6536\u8005\u662f\u67d0\u79cd\u7c7b\u578b\u7684\u53d8\u91cf\u3002\u56e0\u6b64\u65b9\u6cd5\u662f\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u51fd\u6570\u3002 \u63a5\u6536\u8005\u7c7b\u578b\u53ef\u4ee5\u662f\uff08\u51e0\u4e4e\uff09\u4efb\u4f55\u7c7b\u578b\uff0c\u4e0d\u4ec5\u4ec5\u662f\u7ed3\u6784\u4f53\u7c7b\u578b\uff1a\u4efb\u4f55\u7c7b\u578b\u90fd\u53ef\u4ee5\u6709\u65b9\u6cd5\uff0c\u751a\u81f3\u53ef\u4ee5\u662f\u51fd\u6570\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f int \u3001 bool \u3001 string \u6216\u6570\u7ec4\u7684\u522b\u540d\u7c7b\u578b\u3002\u4f46\u662f\u63a5\u6536\u8005\u4e0d\u80fd\u662f\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\uff08\u53c2\u8003 \u7b2c 11 \u7ae0 \uff09\uff0c\u56e0\u4e3a\u63a5\u53e3\u662f\u4e00\u4e2a\u62bd\u8c61\u5b9a\u4e49\uff0c\u4f46\u662f\u65b9\u6cd5\u5374\u662f\u5177\u4f53\u5b9e\u73b0\uff1b\u5982\u679c\u8fd9\u6837\u505a\u4f1a\u5f15\u53d1\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\uff1a invalid receiver type... \u3002 \u6700\u540e\u63a5\u6536\u8005\u4e0d\u80fd\u662f\u4e00\u4e2a\u6307\u9488\u7c7b\u578b\uff0c\u4f46\u662f\u5b83\u53ef\u4ee5\u662f\u4efb\u4f55\u5176\u4ed6\u5141\u8bb8\u7c7b\u578b\u7684\u6307\u9488\u3002 \u4e00\u4e2a\u7c7b\u578b\u52a0\u4e0a\u5b83\u7684\u65b9\u6cd5\u7b49\u4ef7\u4e8e\u9762\u5411\u5bf9\u8c61\u4e2d\u7684\u4e00\u4e2a\u7c7b\u3002\u4e00\u4e2a\u91cd\u8981\u7684\u533a\u522b\u662f\uff1a\u5728 Go \u4e2d\uff0c\u7c7b\u578b\u7684\u4ee3\u7801\u548c\u7ed1\u5b9a\u5728\u5b83\u4e0a\u9762\u7684\u65b9\u6cd5\u7684\u4ee3\u7801\u53ef\u4ee5\u4e0d\u653e\u7f6e\u5728\u4e00\u8d77\uff0c\u5b83\u4eec\u53ef\u4ee5\u5b58\u5728\u5728\u4e0d\u540c\u7684\u6e90\u6587\u4ef6\uff0c\u552f\u4e00\u7684\u8981\u6c42\u662f\uff1a\u5b83\u4eec\u5fc5\u987b\u662f\u540c\u4e00\u4e2a\u5305\u7684\u3002 \u7c7b\u578b T \uff08\u6216 *T \uff09\u4e0a\u7684\u6240\u6709\u65b9\u6cd5\u7684\u96c6\u5408\u53eb\u505a\u7c7b\u578b T \uff08\u6216 *T \uff09\u7684\u65b9\u6cd5\u96c6 (method set)\u3002 \u56e0\u4e3a\u65b9\u6cd5\u662f\u51fd\u6570\uff0c\u6240\u4ee5\u540c\u6837\u7684\uff0c\u4e0d\u5141\u8bb8\u65b9\u6cd5\u91cd\u8f7d\uff0c\u5373\u5bf9\u4e8e\u4e00\u4e2a\u7c7b\u578b\u53ea\u80fd\u6709\u4e00\u4e2a\u7ed9\u5b9a\u540d\u79f0\u7684\u65b9\u6cd5\u3002\u4f46\u662f\u5982\u679c\u57fa\u4e8e\u63a5\u6536\u8005\u7c7b\u578b\uff0c\u662f\u6709\u91cd\u8f7d\u7684\uff1a\u5177\u6709\u540c\u6837\u540d\u5b57\u7684\u65b9\u6cd5\u53ef\u4ee5\u5728 2 \u4e2a\u6216\u591a\u4e2a\u4e0d\u540c\u7684\u63a5\u6536\u8005\u7c7b\u578b\u4e0a\u5b58\u5728\uff0c\u6bd4\u5982\u5728\u540c\u4e00\u4e2a\u5305\u91cc\u8fd9\u4e48\u505a\u662f\u5141\u8bb8\u7684\uff1a func ( a * denseMatrix ) Add ( b Matrix ) Matrix func ( a * sparseMatrix ) Add ( b Matrix ) Matrix \u522b\u540d\u7c7b\u578b\u6ca1\u6709\u539f\u59cb\u7c7b\u578b\u4e0a\u5df2\u7ecf\u5b9a\u4e49\u8fc7\u7684\u65b9\u6cd5\u3002 \u5b9a\u4e49\u65b9\u6cd5\u7684\u4e00\u822c\u683c\u5f0f\u5982\u4e0b\uff1a func ( recv receiver_type ) methodName ( parameter_list ) ( return_value_list ) { ... } \u5728\u65b9\u6cd5\u540d\u4e4b\u524d\uff0c func \u5173\u952e\u5b57\u4e4b\u540e\u7684\u62ec\u53f7\u4e2d\u6307\u5b9a receiver\u3002 \u5982\u679c recv \u662f receiver \u7684\u5b9e\u4f8b\uff0c Method1 \u662f\u5b83\u7684\u65b9\u6cd5\u540d\uff0c\u90a3\u4e48\u65b9\u6cd5\u8c03\u7528\u9075\u5faa\u4f20\u7edf\u7684 object.name \u9009\u62e9\u5668\u7b26\u53f7\uff1a recv.Method1() \u3002 \u5982\u679c recv \u662f\u4e00\u4e2a\u6307\u9488\uff0cGo \u4f1a\u81ea\u52a8\u89e3\u5f15\u7528\u3002 \u5982\u679c\u65b9\u6cd5\u4e0d\u9700\u8981\u4f7f\u7528 recv \u7684\u503c\uff0c\u53ef\u4ee5\u7528 _ \u66ff\u6362\u5b83\uff0c\u6bd4\u5982\uff1a func ( _ receiver_type ) methodName ( parameter_list ) ( return_value_list ) { ... } recv \u5c31\u50cf\u662f\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u4e2d\u7684 this \u6216 self \uff0c\u4f46\u662f Go \u4e2d\u5e76\u6ca1\u6709\u8fd9\u4e24\u4e2a\u5173\u952e\u5b57\u3002\u968f\u4e2a\u4eba\u559c\u597d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 this \u6216 self \u4f5c\u4e3a receiver \u7684\u540d\u5b57\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u4e0a\u7684\u7b80\u5355\u65b9\u6cd5\u7684\u4f8b\u5b50\uff1a \u793a\u4f8b 10.10 method1 .go \uff1a package main import \"fmt\" type TwoInts struct { a int b int } func main () { two1 := new ( TwoInts ) two1 . a = 12 two1 . b = 10 fmt . Printf ( \"The sum is: %d\\n\" , two1 . AddThem ()) fmt . Printf ( \"Add them to the param: %d\\n\" , two1 . AddToParam ( 20 )) two2 := TwoInts { 3 , 4 } fmt . Printf ( \"The sum is: %d\\n\" , two2 . AddThem ()) } func ( tn * TwoInts ) AddThem () int { return tn . a + tn . b } func ( tn * TwoInts ) AddToParam ( param int ) int { return tn . a + tn . b + param } \u8f93\u51fa\uff1a The sum is: 22 Add them to the param: 42 The sum is: 7 \u4e0b\u9762\u662f\u975e\u7ed3\u6784\u4f53\u7c7b\u578b\u4e0a\u65b9\u6cd5\u7684\u4f8b\u5b50\uff1a \u793a\u4f8b 10.11 method2.go \uff1a package main import \"fmt\" type IntVector [] int func ( v IntVector ) Sum () ( s int ) { for _ , x := range v { s += x } return } func main () { fmt . Println ( IntVector { 1 , 2 , 3 }. Sum ()) // \u8f93\u51fa\u662f6 } \u7ec3\u4e60 10.6 employee_salary.go \u5b9a\u4e49\u7ed3\u6784\u4f53 employee \uff0c\u5b83\u6709\u4e00\u4e2a salary \u5b57\u6bb5\uff0c\u7ed9\u8fd9\u4e2a\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5 giveRaise \u6765\u6309\u7167\u6307\u5b9a\u7684\u767e\u5206\u6bd4\u589e\u52a0\u85aa\u6c34\u3002 \u7ec3\u4e60 10.7 iteration_list.go \u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u6709\u4ec0\u4e48\u9519\uff1f package main import \"container/list\" func ( p * list . List ) Iter () { // ... } func main () { lst := new ( list . List ) for _ = range lst . Iter () { } } \u7c7b\u578b\u548c\u4f5c\u7528\u5728\u5b83\u4e0a\u9762\u5b9a\u4e49\u7684\u65b9\u6cd5\u5fc5\u987b\u5728\u540c\u4e00\u4e2a\u5305\u91cc\u5b9a\u4e49\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u5728 int \u3001 float32(64) \u6216\u7c7b\u4f3c\u8fd9\u4e9b\u7684\u7c7b\u578b\u4e0a\u5b9a\u4e49\u65b9\u6cd5\u3002\u8bd5\u56fe\u5728 int \u7c7b\u578b\u4e0a\u5b9a\u4e49\u65b9\u6cd5\u4f1a\u5f97\u5230\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\uff1a cannot define new methods on non-local type int \u6bd4\u5982\u60f3\u5728 time.Time \u4e0a\u5b9a\u4e49\u5982\u4e0b\u65b9\u6cd5\uff1a func ( t time . Time ) first3Chars () string { return time . LocalTime (). String ()[ 0 : 3 ] } \u7c7b\u578b\u5728\u5176\u4ed6\u7684\uff0c\u6216\u662f\u975e\u672c\u5730\u7684\u5305\u91cc\u5b9a\u4e49\uff0c\u5728\u5b83\u4e0a\u9762\u5b9a\u4e49\u65b9\u6cd5\u90fd\u4f1a\u5f97\u5230\u548c\u4e0a\u9762\u540c\u6837\u7684\u9519\u8bef\u3002 \u4f46\u662f\u6709\u4e00\u4e2a\u95f4\u63a5\u7684\u65b9\u5f0f\uff1a\u53ef\u4ee5\u5148\u5b9a\u4e49\u8be5\u7c7b\u578b\uff08\u6bd4\u5982\uff1a int \u6216 float32(64) \uff09\u7684\u522b\u540d\u7c7b\u578b\uff0c\u7136\u540e\u518d\u4e3a\u522b\u540d\u7c7b\u578b\u5b9a\u4e49\u65b9\u6cd5\u3002\u6216\u8005\u50cf\u4e0b\u9762\u8fd9\u6837\u5c06\u5b83\u4f5c\u4e3a\u533f\u540d\u7c7b\u578b\u5d4c\u5165\u5728\u4e00\u4e2a\u65b0\u7684\u7ed3\u6784\u4f53\u4e2d\u3002\u5f53\u7136\u65b9\u6cd5\u53ea\u5728\u8fd9\u4e2a\u522b\u540d\u7c7b\u578b\u4e0a\u6709\u6548\u3002 \u793a\u4f8b 10.12 method_on_time.go \uff1a package main import ( \"fmt\" \"time\" ) type myTime struct { time . Time //anonymous field } func ( t myTime ) first3Chars () string { return t . Time . String ()[ 0 : 3 ] } func main () { m := myTime { time . Now ()} // \u8c03\u7528\u533f\u540d Time \u4e0a\u7684 String \u65b9\u6cd5 fmt . Println ( \"Full time now:\" , m . String ()) // \u8c03\u7528 myTime.first3Chars fmt . Println ( \"First 3 chars:\" , m . first3Chars ()) } /* Output: Full time now: Mon Oct 24 15:34:54 Romance Daylight Time 2011 First 3 chars: Mon */","title":"10.6.1 \u65b9\u6cd5\u662f\u4ec0\u4e48"},{"location":"10.6/#1062","text":"\u51fd\u6570\u5c06\u53d8\u91cf\u4f5c\u4e3a\u53c2\u6570\uff1a Function1(recv) \u65b9\u6cd5\u5728\u53d8\u91cf\u4e0a\u88ab\u8c03\u7528\uff1a recv.Method1() \u5728\u63a5\u6536\u8005\u662f\u6307\u9488\u65f6\uff0c\u65b9\u6cd5\u53ef\u4ee5\u6539\u53d8\u63a5\u6536\u8005\u7684\u503c\uff08\u6216\u72b6\u6001\uff09\uff0c\u8fd9\u70b9\u51fd\u6570\u4e5f\u53ef\u4ee5\u505a\u5230\uff08\u5f53\u53c2\u6570\u4f5c\u4e3a\u6307\u9488\u4f20\u9012\uff0c\u5373\u901a\u8fc7\u5f15\u7528\u8c03\u7528\u65f6\uff0c\u51fd\u6570\u4e5f\u53ef\u4ee5\u6539\u53d8\u53c2\u6570\u7684\u72b6\u6001\uff09\u3002 \u4e0d\u8981\u5fd8\u8bb0 Method1() \u540e\u8fb9\u7684\u62ec\u53f7 () \uff0c\u5426\u5219\u4f1a\u5f15\u53d1\u7f16\u8bd1\u5668\u9519\u8bef\uff1a method recv.Method1 is not an expression, must be called \u63a5\u6536\u8005\u5fc5\u987b\u6709\u4e00\u4e2a\u663e\u5f0f\u7684\u540d\u5b57\uff0c\u8fd9\u4e2a\u540d\u5b57\u5fc5\u987b\u5728\u65b9\u6cd5\u4e2d\u88ab\u4f7f\u7528\u3002 receiver_type \u53eb\u505a \uff08\u63a5\u6536\u8005\uff09\u57fa\u672c\u7c7b\u578b \uff0c\u8fd9\u4e2a\u7c7b\u578b\u5fc5\u987b\u5728\u548c\u65b9\u6cd5\u540c\u6837\u7684\u5305\u4e2d\u88ab\u58f0\u660e\u3002 \u5728 Go \u4e2d\uff0c\uff08\u63a5\u6536\u8005\uff09\u7c7b\u578b\u5173\u8054\u7684\u65b9\u6cd5\u4e0d\u5199\u5728\u7c7b\u578b\u7ed3\u6784\u91cc\u9762\uff0c\u5c31\u50cf\u7c7b\u90a3\u6837\uff1b\u8026\u5408\u66f4\u52a0\u5bbd\u677e\uff1b\u7c7b\u578b\u548c\u65b9\u6cd5\u4e4b\u95f4\u7684\u5173\u8054\u7531\u63a5\u6536\u8005\u6765\u5efa\u7acb\u3002 \u65b9\u6cd5\u6ca1\u6709\u548c\u6570\u636e\u5b9a\u4e49\uff08\u7ed3\u6784\u4f53\uff09\u6df7\u5728\u4e00\u8d77\uff1a\u5b83\u4eec\u662f\u6b63\u4ea4\u7684\u7c7b\u578b\uff1b\u8868\u793a\uff08\u6570\u636e\uff09\u548c\u884c\u4e3a\uff08\u65b9\u6cd5\uff09\u662f\u72ec\u7acb\u7684\u3002","title":"10.6.2 \u51fd\u6570\u548c\u65b9\u6cd5\u7684\u533a\u522b"},{"location":"10.6/#1063","text":"\u9274\u4e8e\u6027\u80fd\u7684\u539f\u56e0\uff0c recv \u6700\u5e38\u89c1\u7684\u662f\u4e00\u4e2a\u6307\u5411 receiver_type \u7684\u6307\u9488\uff08\u56e0\u4e3a\u6211\u4eec\u4e0d\u60f3\u8981\u4e00\u4e2a\u5b9e\u4f8b\u7684\u62f7\u8d1d\uff0c\u5982\u679c\u6309\u503c\u8c03\u7528\u7684\u8bdd\u5c31\u4f1a\u662f\u8fd9\u6837\uff09\uff0c\u7279\u522b\u662f\u5728 receiver \u7c7b\u578b\u662f\u7ed3\u6784\u4f53\u65f6\uff0c\u5c31\u66f4\u662f\u5982\u6b64\u4e86\u3002 \u5982\u679c\u60f3\u8981\u65b9\u6cd5\u6539\u53d8\u63a5\u6536\u8005\u7684\u6570\u636e\uff0c\u5c31\u5728\u63a5\u6536\u8005\u7684\u6307\u9488\u7c7b\u578b\u4e0a\u5b9a\u4e49\u8be5\u65b9\u6cd5\u3002\u5426\u5219\uff0c\u5c31\u5728\u666e\u901a\u7684\u503c\u7c7b\u578b\u4e0a\u5b9a\u4e49\u65b9\u6cd5\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50 pointer_value.go \u4f5c\u4e86\u8bf4\u660e\uff1a change() \u63a5\u53d7\u4e00\u4e2a\u6307\u5411 B \u7684\u6307\u9488\uff0c\u5e76\u6539\u53d8\u5b83\u5185\u90e8\u7684\u6210\u5458\uff1b write() \u901a\u8fc7\u62f7\u8d1d\u63a5\u53d7 B \u7684\u503c\u5e76\u53ea\u8f93\u51fa B \u7684\u5185\u5bb9\u3002\u6ce8\u610f Go \u4e3a\u6211\u4eec\u505a\u4e86\u63a2\u6d4b\u5de5\u4f5c\uff0c\u6211\u4eec\u81ea\u5df1\u5e76\u6ca1\u6709\u6307\u51fa\u662f\u5426\u5728\u6307\u9488\u4e0a\u8c03\u7528\u65b9\u6cd5\uff0cGo \u66ff\u6211\u4eec\u505a\u4e86\u8fd9\u4e9b\u4e8b\u60c5\u3002 b1 \u662f\u503c\u800c b2 \u662f\u6307\u9488\uff0c\u65b9\u6cd5\u90fd\u652f\u6301\u8fd0\u884c\u4e86\u3002 \u793a\u4f8b 10.13 pointer_value.go \uff1a package main import ( \"fmt\" ) type B struct { thing int } func ( b * B ) change () { b . thing = 1 } func ( b B ) write () string { return fmt . Sprint ( b ) } func main () { var b1 B // b1 \u662f\u503c b1 . change () fmt . Println ( b1 . write ()) b2 := new ( B ) // b2 \u662f\u6307\u9488 b2 . change () fmt . Println ( b2 . write ()) } /* \u8f93\u51fa\uff1a {1} {1} */ \u8bd5\u7740\u5728 write() \u4e2d\u6539\u53d8\u63a5\u6536\u8005 b \u7684\u503c\uff1a\u5c06\u4f1a\u770b\u5230\u5b83\u53ef\u4ee5\u6b63\u5e38\u7f16\u8bd1\uff0c\u4f46\u662f\u5f00\u59cb\u7684 b \u6ca1\u6709\u88ab\u6539\u53d8\u3002 \u6211\u4eec\u77e5\u9053\u65b9\u6cd5\u5c06\u6307\u9488\u4f5c\u4e3a\u63a5\u6536\u8005\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u53ea\u662f\u9700\u8981 Point3 \u7684\u503c\u6765\u505a\u8ba1\u7b97\uff1a type Point3 struct { x , y , z float64 } // A method on Point3 func ( p Point3 ) Abs () float64 { return math . Sqrt ( p . x * p . x + p . y * p . y + p . z * p . z ) } \u8fd9\u6837\u505a\u7a0d\u5fae\u6709\u70b9\u6602\u8d35\uff0c\u56e0\u4e3a Point3 \u662f\u4f5c\u4e3a\u503c\u4f20\u9012\u7ed9\u65b9\u6cd5\u7684\uff0c\u56e0\u6b64\u4f20\u9012\u7684\u662f\u5b83\u7684\u62f7\u8d1d\uff0c\u8fd9\u5728 Go \u4e2d\u662f\u5408\u6cd5\u7684\u3002\u4e5f\u53ef\u4ee5\u5728\u6307\u5411\u8fd9\u4e2a\u7c7b\u578b\u7684\u6307\u9488\u4e0a\u8c03\u7528\u6b64\u65b9\u6cd5\uff08\u4f1a\u81ea\u52a8\u89e3\u5f15\u7528\uff09\u3002 \u5047\u8bbe p3 \u5b9a\u4e49\u4e3a\u4e00\u4e2a\u6307\u9488\uff1a p3 := &Point{ 3, 4, 5} \u3002 \u53ef\u4ee5\u4f7f\u7528 p3.Abs() \u6765\u66ff\u4ee3 (*p3).Abs() \u3002 \u50cf\u4f8b\u5b50 10.10 ( method1.go ) \u4e2d\u63a5\u6536\u8005\u7c7b\u578b\u662f *TwoInts \u7684\u65b9\u6cd5 AddThem() \uff0c\u5b83\u80fd\u5728\u7c7b\u578b TwoInts \u7684\u503c\u4e0a\u88ab\u8c03\u7528\uff0c\u8fd9\u662f\u81ea\u52a8\u95f4\u63a5\u53d1\u751f\u7684\u3002 \u56e0\u6b64 two2.AddThem \u53ef\u4ee5\u66ff\u4ee3 (&two2).AddThem() \u3002 \u5728\u503c\u548c\u6307\u9488\u4e0a\u8c03\u7528\u65b9\u6cd5\uff1a \u53ef\u4ee5\u6709\u8fde\u63a5\u5230\u7c7b\u578b\u7684\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u6709\u8fde\u63a5\u5230\u7c7b\u578b\u6307\u9488\u7684\u65b9\u6cd5\u3002 \u4f46\u662f\u8fd9\u6ca1\u5173\u7cfb\uff1a\u5bf9\u4e8e\u7c7b\u578b T \uff0c\u5982\u679c\u5728 \\*T \u4e0a\u5b58\u5728\u65b9\u6cd5 Meth() \uff0c\u5e76\u4e14 t \u662f\u8fd9\u4e2a\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u90a3\u4e48 t.Meth() \u4f1a\u88ab\u81ea\u52a8\u8f6c\u6362\u4e3a (&t).Meth() \u3002 \u6307\u9488\u65b9\u6cd5\u548c\u503c\u65b9\u6cd5\u90fd\u53ef\u4ee5\u5728\u6307\u9488\u6216\u975e\u6307\u9488\u4e0a\u88ab\u8c03\u7528 \uff0c\u5982\u4e0b\u9762\u7a0b\u5e8f\u6240\u793a\uff0c\u7c7b\u578b List \u5728\u503c\u4e0a\u6709\u4e00\u4e2a\u65b9\u6cd5 Len() \uff0c\u5728\u6307\u9488\u4e0a\u6709\u4e00\u4e2a\u65b9\u6cd5 Append() \uff0c\u4f46\u662f\u53ef\u4ee5\u770b\u5230\u4e24\u4e2a\u65b9\u6cd5\u90fd\u53ef\u4ee5\u5728\u4e24\u79cd\u7c7b\u578b\u7684\u53d8\u91cf\u4e0a\u88ab\u8c03\u7528\u3002 \u793a\u4f8b 10.14 methodset1.go \uff1a package main import ( \"fmt\" ) type List [] int func ( l List ) Len () int { return len ( l ) } func ( l * List ) Append ( val int ) { * l = append ( * l , val ) } func main () { // \u503c var lst List lst . Append ( 1 ) fmt . Printf ( \"%v (len: %d)\" , lst , lst . Len ()) // [1] (len: 1) // \u6307\u9488 plst := new ( List ) plst . Append ( 2 ) fmt . Printf ( \"%v (len: %d)\" , plst , plst . Len ()) // &[2] (len: 1) }","title":"10.6.3 \u6307\u9488\u6216\u503c\u4f5c\u4e3a\u63a5\u6536\u8005"},{"location":"10.6/#1064","text":"\u8003\u8651 person2.go \u4e2d\u7684 person \u5305\uff1a\u7c7b\u578b Person \u88ab\u660e\u786e\u7684\u5bfc\u51fa\u4e86\uff0c\u4f46\u662f\u5b83\u7684\u5b57\u6bb5\u6ca1\u6709\u88ab\u5bfc\u51fa\u3002\u4f8b\u5982\u5728 use_person2.go \u4e2d p.firstName \u5c31\u662f\u9519\u8bef\u7684\u3002\u8be5\u5982\u4f55\u5728\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u4fee\u6539\u6216\u8005\u53ea\u662f\u8bfb\u53d6\u4e00\u4e2a Person \u7684\u540d\u5b57\u5462\uff1f \u8fd9\u53ef\u4ee5\u901a\u8fc7\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u4e00\u4e2a\u4f17\u6240\u5468\u77e5\u7684\u6280\u672f\u6765\u5b8c\u6210\uff1a\u63d0\u4f9b getter() \u548c setter() \u65b9\u6cd5\u3002\u5bf9\u4e8e setter() \u65b9\u6cd5\u4f7f\u7528 Set... \u524d\u7f00\uff0c\u5bf9\u4e8e getter() \u65b9\u6cd5\u53ea\u4f7f\u7528\u6210\u5458\u540d\u3002 \u793a\u4f8b 10.15 person2.go \uff1a package person type Person struct { firstName string lastName string } func ( p * Person ) FirstName () string { return p . firstName } func ( p * Person ) SetFirstName ( newName string ) { p . firstName = newName } \u793a\u4f8b 10.16 use_person2.go \uff1a package main import ( \"./person\" \"fmt\" ) func main () { p := new ( person . Person ) // p.firstName undefined // (cannot refer to unexported field or method firstName) // p.firstName = \"Eric\" p . SetFirstName ( \"Eric\" ) fmt . Println ( p . FirstName ()) // Output: Eric } \u5e76\u53d1\u8bbf\u95ee\u5bf9\u8c61 \u5bf9\u8c61\u7684\u5b57\u6bb5\uff08\u5c5e\u6027\uff09\u4e0d\u5e94\u8be5\u7531 2 \u4e2a\u6216 2 \u4e2a\u4ee5\u4e0a\u7684\u4e0d\u540c\u7ebf\u7a0b\u5728\u540c\u4e00\u65f6\u95f4\u53bb\u6539\u53d8\u3002\u5982\u679c\u5728\u7a0b\u5e8f\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u4e3a\u4e86\u5b89\u5168\u5e76\u53d1\u8bbf\u95ee\uff0c\u53ef\u4ee5\u4f7f\u7528\u5305 sync \uff08\u53c2\u8003 \u7b2c 9.3 \u8282 \u4e2d\u7684\u65b9\u6cd5\u3002\u5728 \u7b2c 14.17 \u8282 \u4e2d\u6211\u4eec\u4f1a\u901a\u8fc7 goroutines \u548c channels \u63a2\u7d22\u53e6\u4e00\u79cd\u65b9\u5f0f\u3002","title":"10.6.4 \u65b9\u6cd5\u548c\u672a\u5bfc\u51fa\u5b57\u6bb5"},{"location":"10.6/#1065","text":"\u5f53\u4e00\u4e2a\u533f\u540d\u7c7b\u578b\u88ab\u5185\u5d4c\u5728\u7ed3\u6784\u4f53\u4e2d\u65f6\uff0c\u533f\u540d\u7c7b\u578b\u7684\u53ef\u89c1\u65b9\u6cd5\u4e5f\u540c\u6837\u88ab\u5185\u5d4c\uff0c\u8fd9\u5728\u6548\u679c\u4e0a\u7b49\u540c\u4e8e\u5916\u5c42\u7c7b\u578b \u7ee7\u627f \u4e86\u8fd9\u4e9b\u65b9\u6cd5\uff1a \u5c06\u7236\u7c7b\u578b\u653e\u5728\u5b50\u7c7b\u578b\u4e2d\u6765\u5b9e\u73b0\u4e9a\u578b \u3002\u8fd9\u4e2a\u673a\u5236\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u6a21\u62df\u7ecf\u5178\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u4e2d\u7684\u5b50\u7c7b\u548c\u7ee7\u627f\u76f8\u5173\u7684\u6548\u679c\uff0c\u4e5f\u7c7b\u4f3c Ruby \u4e2d\u7684\u6df7\u5165 (mixin)\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u793a\u4f8b\uff08\u53ef\u4ee5\u5728\u7ec3\u4e60 10.8 \u4e2d\u8fdb\u4e00\u6b65\u5b66\u4e60\uff09\uff1a\u5047\u5b9a\u6709\u4e00\u4e2a Engine \u63a5\u53e3\u7c7b\u578b\uff0c\u4e00\u4e2a Car \u7ed3\u6784\u4f53\u7c7b\u578b\uff0c\u5b83\u5305\u542b\u4e00\u4e2a Engine \u7c7b\u578b\u7684\u533f\u540d\u5b57\u6bb5\uff1a type Engine interface { Start () Stop () } type Car struct { Engine } \u6211\u4eec\u53ef\u4ee5\u6784\u5efa\u5982\u4e0b\u7684\u4ee3\u7801\uff1a func ( c * Car ) GoToWorkIn () { // get in car c . Start () // drive to work c . Stop () // get out of car } \u4e0b\u9762\u662f method3.go \u7684\u5b8c\u6574\u4f8b\u5b50\uff0c\u5b83\u5c55\u793a\u4e86\u5185\u5d4c\u7ed3\u6784\u4f53\u4e0a\u7684\u65b9\u6cd5\u53ef\u4ee5\u76f4\u63a5\u5728\u5916\u5c42\u7c7b\u578b\u7684\u5b9e\u4f8b\u4e0a\u8c03\u7528\uff1a package main import ( \"fmt\" \"math\" ) type Point struct { x , y float64 } func ( p * Point ) Abs () float64 { return math . Sqrt ( p . x * p . x + p . y * p . y ) } type NamedPoint struct { Point name string } func main () { n := & NamedPoint { Point { 3 , 4 }, \"Pythagoras\" } fmt . Println ( n . Abs ()) // \u6253\u5370 5 } \u5185\u5d4c\u5c06\u4e00\u4e2a\u5df2\u5b58\u5728\u7c7b\u578b\u7684\u5b57\u6bb5\u548c\u65b9\u6cd5\u6ce8\u5165\u5230\u4e86\u53e6\u4e00\u4e2a\u7c7b\u578b\u91cc\uff1a\u533f\u540d\u5b57\u6bb5\u4e0a\u7684\u65b9\u6cd5\u201c\u664b\u5347\u201d\u6210\u4e3a\u4e86\u5916\u5c42\u7c7b\u578b\u7684\u65b9\u6cd5\u3002\u5f53\u7136\u7c7b\u578b\u53ef\u4ee5\u6709\u53ea\u4f5c\u7528\u4e8e\u672c\u8eab\u5b9e\u4f8b\u800c\u4e0d\u4f5c\u7528\u4e8e\u5185\u5d4c\u201c\u7236\u201d\u7c7b\u578b\u4e0a\u7684\u65b9\u6cd5\u3002 \u53ef\u4ee5\u8986\u5199\u65b9\u6cd5\uff08\u50cf\u5b57\u6bb5\u4e00\u6837\uff09\uff1a\u548c\u5185\u5d4c\u7c7b\u578b\u65b9\u6cd5\u5177\u6709\u540c\u6837\u540d\u5b57\u7684\u5916\u5c42\u7c7b\u578b\u7684\u65b9\u6cd5\u4f1a\u8986\u5199\u5185\u5d4c\u7c7b\u578b\u5bf9\u5e94\u7684\u65b9\u6cd5\u3002 \u5728\u793a\u4f8b 10.18 method4.go \u4e2d\u6dfb\u52a0\uff1a func ( n * NamedPoint ) Abs () float64 { return n . Point . Abs () * 100. } \u73b0\u5728 fmt.Println(n.Abs()) \u4f1a\u6253\u5370 500 \u3002 \u56e0\u4e3a\u4e00\u4e2a\u7ed3\u6784\u4f53\u53ef\u4ee5\u5d4c\u5165\u591a\u4e2a\u533f\u540d\u7c7b\u578b\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u6211\u4eec\u53ef\u4ee5\u6709\u4e00\u4e2a\u7b80\u5355\u7248\u672c\u7684\u591a\u91cd\u7ee7\u627f\uff0c\u5c31\u50cf\uff1a type Child struct { Father; Mother} \u3002\u5728 \u7b2c 10.6.7 \u8282 \u4e2d\u4f1a\u8fdb\u4e00\u6b65\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u3002 \u7ed3\u6784\u4f53\u5185\u5d4c\u548c\u81ea\u5df1\u5728\u540c\u4e00\u4e2a\u5305\u4e2d\u7684\u7ed3\u6784\u4f53\u65f6\uff0c\u53ef\u4ee5\u5f7c\u6b64\u8bbf\u95ee\u5bf9\u65b9\u6240\u6709\u7684\u5b57\u6bb5\u548c\u65b9\u6cd5\u3002 \u7ec3\u4e60 10.8 inheritance_car.go \u521b\u5efa\u4e00\u4e2a\u4e0a\u9762 Car \u548c Engine \u53ef\u8fd0\u884c\u7684\u4f8b\u5b50\uff0c\u5e76\u4e14\u7ed9 Car \u7c7b\u578b\u4e00\u4e2a wheelCount \u5b57\u6bb5\u548c\u4e00\u4e2a numberOfWheels() \u65b9\u6cd5\u3002 \u521b\u5efa\u4e00\u4e2a Mercedes \u7c7b\u578b\uff0c\u5b83\u5185\u5d4c Car \uff0c\u5e76\u65b0\u5efa Mercedes \u7684\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u7136\u540e\u8c03\u7528\u5b83\u7684\u65b9\u6cd5\u3002 \u7136\u540e\u4ec5\u5728 Mercedes \u7c7b\u578b\u4e0a\u521b\u5efa\u65b9\u6cd5 sayHiToMerkel() \u5e76\u8c03\u7528\u5b83\u3002","title":"10.6.5 \u5185\u5d4c\u7c7b\u578b\u7684\u65b9\u6cd5\u548c\u7ee7\u627f"},{"location":"10.6/#1066","text":"\u4e3b\u8981\u6709\u4e24\u79cd\u65b9\u6cd5\u6765\u5b9e\u73b0\u5728\u7c7b\u578b\u4e2d\u5d4c\u5165\u529f\u80fd\uff1a A\uff1a\u805a\u5408\uff08\u6216\u7ec4\u5408\uff09\uff1a\u5305\u542b\u4e00\u4e2a\u6240\u9700\u529f\u80fd\u7c7b\u578b\u7684\u5177\u540d\u5b57\u6bb5\u3002 B\uff1a\u5185\u5d4c\uff1a\u5185\u5d4c\uff08\u533f\u540d\u5730\uff09\u6240\u9700\u529f\u80fd\u7c7b\u578b\uff0c\u50cf\u524d\u4e00\u8282 10.6.5 \u6240\u6f14\u793a\u7684\u90a3\u6837\u3002 \u4e3a\u4e86\u4f7f\u8fd9\u4e9b\u6982\u5ff5\u5177\u4f53\u5316\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a Customer \u7c7b\u578b\uff0c\u6211\u4eec\u60f3\u8ba9\u5b83\u901a\u8fc7 Log \u7c7b\u578b\u6765\u5305\u542b\u65e5\u5fd7\u529f\u80fd\uff0c Log \u7c7b\u578b\u53ea\u662f\u7b80\u5355\u5730\u5305\u542b\u4e00\u4e2a\u7d2f\u79ef\u7684\u6d88\u606f\uff08\u5f53\u7136\u5b83\u53ef\u4ee5\u662f\u590d\u6742\u7684\uff09\u3002\u5982\u679c\u60f3\u8ba9\u7279\u5b9a\u7c7b\u578b\u90fd\u5177\u5907\u65e5\u5fd7\u529f\u80fd\uff0c\u4f60\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u8fd9\u6837\u7684 Log \u7c7b\u578b\uff0c\u7136\u540e\u5c06\u5b83\u4f5c\u4e3a\u7279\u5b9a\u7c7b\u578b\u7684\u4e00\u4e2a\u5b57\u6bb5\uff0c\u5e76\u63d0\u4f9b Log() \uff0c\u5b83\u8fd4\u56de\u8fd9\u4e2a\u65e5\u5fd7\u7684\u5f15\u7528\u3002 \u65b9\u5f0f A \u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u6cd5\u5b9e\u73b0\uff08\u4f7f\u7528\u4e86 \u7b2c 10.7 \u8282 \u4e2d\u7684 String() \u529f\u80fd\uff09\uff1a \u793a\u4f8b 10.19 embed_func1.go \uff1a package main import ( \"fmt\" ) type Log struct { msg string } type Customer struct { Name string log * Log } func main () { c := new ( Customer ) c . Name = \"Barak Obama\" c . log = new ( Log ) c . log . msg = \"1 - Yes we can!\" // shorter c = & Customer { \"Barak Obama\" , & Log { \"1 - Yes we can!\" }} // fmt.Println(c) &{Barak Obama 1 - Yes we can!} c . Log (). Add ( \"2 - After me the world will be a better place!\" ) //fmt.Println(c.log) fmt . Println ( c . Log ()) } func ( l * Log ) Add ( s string ) { l . msg += \"\\n\" + s } func ( l * Log ) String () string { return l . msg } func ( c * Customer ) Log () * Log { return c . log } \u8f93\u51fa\uff1a 1 - Yes we can! 2 - After me the world will be a better place! \u76f8\u5bf9\u7684\u65b9\u5f0f B \u53ef\u80fd\u4f1a\u50cf\u8fd9\u6837 ( embed_func2.go )\uff1a package main import ( \"fmt\" ) type Log struct { msg string } type Customer struct { Name string Log } func main () { c := & Customer { \"Barak Obama\" , Log { \"1 - Yes we can!\" }} c . Add ( \"2 - After me the world will be a better place!\" ) fmt . Println ( c ) } func ( l * Log ) Add ( s string ) { l . msg += \"\\n\" + s } func ( l * Log ) String () string { return l . msg } func ( c * Customer ) String () string { return c . Name + \"\\nLog:\" + fmt . Sprintln ( c . Log . String ()) } \u8f93\u51fa\uff1a Barak Obama Log:1 - Yes we can! 2 - After me the world will be a better place! \u5185\u5d4c\u7684\u7c7b\u578b\u4e0d\u9700\u8981\u6307\u9488\uff0c Customer \u4e5f\u4e0d\u9700\u8981 Add \u65b9\u6cd5\uff0c\u5b83\u4f7f\u7528 Log \u7684 Add \u65b9\u6cd5\uff0c Customer \u6709\u81ea\u5df1\u7684 String \u65b9\u6cd5\uff0c\u5e76\u4e14\u5728\u5b83\u91cc\u9762\u8c03\u7528\u4e86 Log \u7684 String \u65b9\u6cd5\u3002 \u5982\u679c\u5185\u5d4c\u7c7b\u578b\u5d4c\u5165\u4e86\u5176\u4ed6\u7c7b\u578b\uff0c\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u90a3\u4e9b\u7c7b\u578b\u7684\u65b9\u6cd5\u53ef\u4ee5\u76f4\u63a5\u5728\u5916\u5c42\u7c7b\u578b\u4e2d\u4f7f\u7528\u3002 \u56e0\u6b64\u4e00\u4e2a\u597d\u7684\u7b56\u7565\u662f\u521b\u5efa\u4e00\u4e9b\u5c0f\u7684\u3001\u53ef\u590d\u7528\u7684\u7c7b\u578b\u4f5c\u4e3a\u4e00\u4e2a\u5de5\u5177\u7bb1\uff0c\u7528\u4e8e\u7ec4\u6210\u57df\u7c7b\u578b\u3002","title":"10.6.6 \u5982\u4f55\u5728\u7c7b\u578b\u4e2d\u5d4c\u5165\u529f\u80fd"},{"location":"10.6/#1067","text":"\u591a\u91cd\u7ee7\u627f\u6307\u7684\u662f\u7c7b\u578b\u83b7\u5f97\u591a\u4e2a\u7236\u7c7b\u578b\u884c\u4e3a\u7684\u80fd\u529b\uff0c\u5b83\u5728\u4f20\u7edf\u7684\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u4e2d\u901a\u5e38\u662f\u4e0d\u88ab\u5b9e\u73b0\u7684\uff08C++ \u548c Python \u4f8b\u5916\uff09\u3002\u56e0\u4e3a\u5728\u7c7b\u7ee7\u627f\u5c42\u6b21\u4e2d\uff0c\u591a\u91cd\u7ee7\u627f\u4f1a\u7ed9\u7f16\u8bd1\u5668\u5f15\u5165\u989d\u5916\u7684\u590d\u6742\u5ea6\u3002\u4f46\u662f\u5728 Go \u8bed\u8a00\u4e2d\uff0c\u901a\u8fc7\u5728\u7c7b\u578b\u4e2d\u5d4c\u5165\u6240\u6709\u5fc5\u8981\u7684\u7236\u7c7b\u578b\uff0c\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u5b9e\u73b0\u591a\u91cd\u7ee7\u627f\u3002 \u4f5c\u4e3a\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a\u7c7b\u578b CameraPhone \uff0c\u901a\u8fc7\u5b83\u53ef\u4ee5 Call() \uff0c\u4e5f\u53ef\u4ee5 TakeAPicture() \uff0c\u4f46\u662f\u7b2c\u4e00\u4e2a\u65b9\u6cd5\u5c5e\u4e8e\u7c7b\u578b Phone \uff0c\u7b2c\u4e8c\u4e2a\u65b9\u6cd5\u5c5e\u4e8e\u7c7b\u578b Camera \u3002 \u53ea\u8981\u5d4c\u5165\u8fd9\u4e24\u4e2a\u7c7b\u578b\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5982\u4e0b\u6240\u793a ( mult_inheritance.go )\uff1a package main import ( \"fmt\" ) type Camera struct {} func ( c * Camera ) TakeAPicture () string { return \"Click\" } type Phone struct {} func ( p * Phone ) Call () string { return \"Ring Ring\" } type CameraPhone struct { Camera Phone } func main () { cp := new ( CameraPhone ) fmt . Println ( \"Our new CameraPhone exhibits multiple behaviors...\" ) fmt . Println ( \"It exhibits behavior of a Camera: \" , cp . TakeAPicture ()) fmt . Println ( \"It works like a Phone too: \" , cp . Call ()) } \u8f93\u51fa\uff1a Our new CameraPhone exhibits multiple behaviors... It exhibits behavior of a Camera: Click It works like a Phone too: Ring Ring \u7ec3\u4e60 10.9 point_methods.go \uff1a \u4ece point.go \u5f00\u59cb\uff08 \u7b2c 10.1 \u8282 \u7684\u7ec3\u4e60\uff09\uff1a\u4f7f\u7528\u65b9\u6cd5\u6765\u5b9e\u73b0 Abs() \u548c Scale() \u51fd\u6570\uff0c Point \u4f5c\u4e3a\u65b9\u6cd5\u7684\u63a5\u6536\u8005\u7c7b\u578b\u3002\u4e5f\u4e3a Point3 \u548c Polar \u5b9e\u73b0 Abs() \u65b9\u6cd5\u3002\u5b8c\u6210\u4e86 point.go \u4e2d\u540c\u6837\u7684\u4e8b\u60c5\uff0c\u53ea\u662f\u8fd9\u6b21\u901a\u8fc7\u65b9\u6cd5\u3002 \u7ec3\u4e60 10.10 inherit_methods.go \uff1a \u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b Base \uff0c\u5b83\u5305\u542b\u4e00\u4e2a\u5b57\u6bb5 id \uff0c\u65b9\u6cd5 Id() \u8fd4\u56de id \uff0c\u65b9\u6cd5 SetId() \u4fee\u6539 id \u3002\u7ed3\u6784\u4f53\u7c7b\u578b Person \u5305\u542b Base \uff0c\u53ca FirstName \u548c LastName \u5b57\u6bb5\u3002\u7ed3\u6784\u4f53\u7c7b\u578b Employee \u5305\u542b\u4e00\u4e2a Person \u548c salary \u5b57\u6bb5\u3002 \u521b\u5efa\u4e00\u4e2a employee \u5b9e\u4f8b\uff0c\u7136\u540e\u663e\u793a\u5b83\u7684 id \u3002 \u7ec3\u4e60 10.11 magic.go \uff1a \u9996\u5148\u9884\u6d4b\u4e00\u4e0b\u4e0b\u9762\u7a0b\u5e8f\u7684\u7ed3\u679c\uff0c\u7136\u540e\u52a8\u624b\u5b9e\u9a8c\u4e0b\uff1a package main import ( \"fmt\" ) type Base struct {} func ( Base ) Magic () { fmt . Println ( \"base magic\" ) } func ( self Base ) MoreMagic () { self . Magic () self . Magic () } type Voodoo struct { Base } func ( Voodoo ) Magic () { fmt . Println ( \"voodoo magic\" ) } func main () { v := new ( Voodoo ) v . Magic () v . MoreMagic () }","title":"10.6.7 \u591a\u91cd\u7ee7\u627f"},{"location":"10.6/#1068","text":"\u5728\u7f16\u7a0b\u4e2d\u4e00\u4e9b\u57fa\u672c\u64cd\u4f5c\u4f1a\u4e00\u904d\u53c8\u4e00\u904d\u7684\u51fa\u73b0\uff0c\u6bd4\u5982\u6253\u5f00 (Open)\u3001\u5173\u95ed (Close)\u3001\u8bfb (Read)\u3001\u5199 (Write)\u3001\u6392\u5e8f(Sort) \u7b49\u7b49\uff0c\u5e76\u4e14\u5b83\u4eec\u90fd\u6709\u4e00\u4e2a\u5927\u81f4\u7684\u610f\u601d\uff1a\u6253\u5f00 (Open)\u53ef\u4ee5\u4f5c\u7528\u4e8e\u4e00\u4e2a\u6587\u4ef6\u3001\u4e00\u4e2a\u7f51\u7edc\u8fde\u63a5\u3001\u4e00\u4e2a\u6570\u636e\u5e93\u8fde\u63a5\u7b49\u7b49\u3002\u5177\u4f53\u7684\u5b9e\u73b0\u53ef\u80fd\u5343\u5dee\u4e07\u522b\uff0c\u4f46\u662f\u57fa\u672c\u7684\u6982\u5ff5\u662f\u4e00\u81f4\u7684\u3002\u5728 Go \u8bed\u8a00\u4e2d\uff0c\u901a\u8fc7\u4f7f\u7528\u63a5\u53e3\uff08\u53c2\u8003 \u7b2c 11 \u7ae0 \uff09\uff0c\u6807\u51c6\u5e93\u5e7f\u6cdb\u7684\u5e94\u7528\u4e86\u8fd9\u4e9b\u89c4\u5219\uff0c\u5728\u6807\u51c6\u5e93\u4e2d\u8fd9\u4e9b\u901a\u7528\u65b9\u6cd5\u90fd\u6709\u4e00\u81f4\u7684\u540d\u5b57\uff0c\u6bd4\u5982 Open() \u3001 Read() \u3001 Write() \u7b49\u3002\u60f3\u5199\u89c4\u8303\u7684 Go \u7a0b\u5e8f\uff0c\u5c31\u5e94\u8be5\u9075\u5b88\u8fd9\u4e9b\u7ea6\u5b9a\uff0c\u7ed9\u65b9\u6cd5\u5408\u9002\u7684\u540d\u5b57\u548c\u7b7e\u540d\uff0c\u5c31\u50cf\u90a3\u4e9b\u901a\u7528\u65b9\u6cd5\u90a3\u6837\u3002\u8fd9\u6837\u505a\u4f1a\u4f7f Go \u5f00\u53d1\u7684\u8f6f\u4ef6\u66f4\u52a0\u5177\u6709\u4e00\u81f4\u6027\u548c\u53ef\u8bfb\u6027\u3002\u6bd4\u5982\uff1a\u5982\u679c\u9700\u8981\u4e00\u4e2a convert-to-string() \u65b9\u6cd5\uff0c\u5e94\u8be5\u547d\u540d\u4e3a String() \uff0c\u800c\u4e0d\u662f ToString() \uff08\u53c2\u8003 \u7b2c 10.7 \u8282 \uff09\u3002","title":"10.6.8 \u901a\u7528\u65b9\u6cd5\u548c\u65b9\u6cd5\u547d\u540d"},{"location":"10.6/#1069-go","text":"\u5728\u5982 C++\u3001Java\u3001C# \u548c Ruby \u8fd9\u6837\u7684\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u4e2d\uff0c\u65b9\u6cd5\u5728\u7c7b\u7684\u4e0a\u4e0b\u6587\u4e2d\u88ab\u5b9a\u4e49\u548c\u7ee7\u627f\uff1a\u5728\u4e00\u4e2a\u5bf9\u8c61\u4e0a\u8c03\u7528\u65b9\u6cd5\u65f6\uff0c\u8fd0\u884c\u65f6\u4f1a\u68c0\u6d4b\u7c7b\u4ee5\u53ca\u5b83\u7684\u8d85\u7c7b\u4e2d\u662f\u5426\u6709\u6b64\u65b9\u6cd5\u7684\u5b9a\u4e49\uff0c\u5982\u679c\u6ca1\u6709\u4f1a\u5bfc\u81f4\u5f02\u5e38\u53d1\u751f\u3002 \u5728 Go \u8bed\u8a00\u4e2d\uff0c\u8fd9\u6837\u7684\u7ee7\u627f\u5c42\u6b21\u662f\u5b8c\u5168\u6ca1\u5fc5\u8981\u7684\uff1a\u5982\u679c\u65b9\u6cd5\u5728\u6b64\u7c7b\u578b\u5b9a\u4e49\u4e86\uff0c\u5c31\u53ef\u4ee5\u8c03\u7528\u5b83\uff0c\u548c\u5176\u4ed6\u7c7b\u578b\u4e0a\u662f\u5426\u5b58\u5728\u8fd9\u4e2a\u65b9\u6cd5\u6ca1\u6709\u5173\u7cfb\u3002\u5728\u8fd9\u4e2a\u610f\u4e49\u4e0a\uff0cGo \u5177\u6709\u66f4\u5927\u7684\u7075\u6d3b\u6027\u3002 \u4e0b\u9762\u7684\u6a21\u5f0f\u5c31\u5f88\u597d\u7684\u8bf4\u660e\u4e86\u8fd9\u4e2a\u95ee\u9898\uff1a Go \u4e0d\u9700\u8981\u4e00\u4e2a\u663e\u5f0f\u7684\u7c7b\u5b9a\u4e49\uff0c\u5982\u540c Java\u3001C++\u3001C# \u7b49\u90a3\u6837\uff0c\u76f8\u53cd\u5730\uff0c\u201c\u7c7b\u201d\u662f\u901a\u8fc7\u63d0\u4f9b\u4e00\u7ec4\u4f5c\u7528\u4e8e\u4e00\u4e2a\u5171\u540c\u7c7b\u578b\u7684\u65b9\u6cd5\u96c6\u6765\u9690\u5f0f\u5b9a\u4e49\u7684\u3002\u7c7b\u578b\u53ef\u4ee5\u662f\u7ed3\u6784\u4f53\u6216\u8005\u4efb\u4f55\u7528\u6237\u81ea\u5b9a\u4e49\u7c7b\u578b\u3002 \u6bd4\u5982\uff1a\u6211\u4eec\u60f3\u5b9a\u4e49\u81ea\u5df1\u7684 Integer \u7c7b\u578b\uff0c\u5e76\u6dfb\u52a0\u4e00\u4e9b\u7c7b\u4f3c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5\uff0c\u5728 Go \u4e2d\u53ef\u4ee5\u5982\u4e0b\u5b9a\u4e49\uff1a type Integer int func ( i * Integer ) String () string { return strconv . Itoa ( int ( * i )) } \u5728 Java \u6216 C# \u4e2d\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u9700\u8981\u548c\u7c7b Integer \u7684\u5b9a\u4e49\u653e\u5728\u4e00\u8d77\uff0c\u5728 Ruby \u4e2d\u53ef\u4ee5\u76f4\u63a5\u5728\u57fa\u672c\u7c7b\u578b int \u4e0a\u5b9a\u4e49\u8fd9\u4e2a\u65b9\u6cd5\u3002 \u603b\u7ed3 \u5728 Go \u4e2d\uff0c\u7c7b\u578b\u5c31\u662f\u7c7b\uff08\u6570\u636e\u548c\u5173\u8054\u7684\u65b9\u6cd5\uff09\u3002Go \u4e0d\u77e5\u9053\u7c7b\u4f3c\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u7684\u7c7b\u7ee7\u627f\u7684\u6982\u5ff5\u3002\u7ee7\u627f\u6709\u4e24\u4e2a\u597d\u5904\uff1a\u4ee3\u7801\u590d\u7528\u548c\u591a\u6001\u3002 \u5728 Go \u4e2d\uff0c\u4ee3\u7801\u590d\u7528\u901a\u8fc7\u7ec4\u5408\u548c\u59d4\u6258\u5b9e\u73b0\uff0c\u591a\u6001\u901a\u8fc7\u63a5\u53e3\u7684\u4f7f\u7528\u6765\u5b9e\u73b0\uff1a\u6709\u65f6\u8fd9\u4e5f\u53eb \u7ec4\u4ef6\u7f16\u7a0b (Component Programming) \u3002 \u8bb8\u591a\u5f00\u53d1\u8005\u8bf4\u76f8\u6bd4\u4e8e\u7c7b\u7ee7\u627f\uff0cGo \u7684\u63a5\u53e3\u63d0\u4f9b\u4e86\u66f4\u5f3a\u5927\u3001\u5374\u66f4\u7b80\u5355\u7684\u591a\u6001\u884c\u4e3a\u3002 \u5907\u6ce8 \u5982\u679c\u771f\u7684\u9700\u8981\u66f4\u591a\u9762\u5411\u5bf9\u8c61\u7684\u80fd\u529b\uff0c\u770b\u4e00\u4e0b goop \u5305 (Go Object-Oriented Programming)\uff0c\u5b83\u7531 Scott Pakin \u7f16\u5199: \u5b83\u7ed9 Go \u63d0\u4f9b\u4e86 JavaScript \u98ce\u683c\u7684\u5bf9\u8c61\uff08\u57fa\u4e8e\u539f\u578b\u7684\u5bf9\u8c61\uff09\uff0c\u5e76\u4e14\u652f\u6301\u591a\u91cd\u7ee7\u627f\u548c\u7c7b\u578b\u72ec\u7acb\u5206\u6d3e\uff0c\u901a\u8fc7\u5b83\u53ef\u4ee5\u5b9e\u73b0\u4f60\u559c\u6b22\u7684\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u91cc\u7684\u4e00\u4e9b\u7ed3\u6784\u3002 \u95ee\u9898 10.1 \u6211\u4eec\u5728\u67d0\u4e2a\u7c7b\u578b\u7684\u53d8\u91cf\u4e0a\u4f7f\u7528\u70b9\u53f7\u8c03\u7528\u4e00\u4e2a\u65b9\u6cd5\uff1a variable.method() \uff0c\u5728\u4f7f\u7528 Go \u4ee5\u524d\uff0c\u5728\u54ea\u513f\u78b0\u5230\u8fc7\u9762\u5411\u5bf9\u8c61\u7684\u70b9\u53f7\uff1f \u95ee\u9898 10.2 a\uff09\u5047\u8bbe\u5b9a\u4e49\uff1a type Integer int \uff0c\u5b8c\u6210 get() \u65b9\u6cd5\u7684\u65b9\u6cd5\u4f53: func (p Integer) get() int { ... } \u3002 b\uff09\u5b9a\u4e49\uff1a func f(i int) {}; var v Integer \uff0c\u5982\u4f55\u5c31 v \u4f5c\u4e3a\u53c2\u6570\u8c03\u7528f\uff1f c\uff09\u5047\u8bbe Integer \u5b9a\u4e49\u4e3a type Integer struct {n int} \uff0c\u5b8c\u6210 get() \u65b9\u6cd5\u7684\u65b9\u6cd5\u4f53\uff1a func (p Integer) get() int { ... } \u3002 d\uff09\u5bf9\u4e8e\u65b0\u5b9a\u4e49\u7684 Integer \uff0c\u548c b\uff09\u4e2d\u540c\u6837\u7684\u95ee\u9898\u3002","title":"10.6.9 \u548c\u5176\u4ed6\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u6bd4\u8f83 Go \u7684\u7c7b\u578b\u548c\u65b9\u6cd5"},{"location":"10.6/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u533f\u540d\u5b57\u6bb5\u548c\u5185\u5d4c\u7ed3\u6784\u4f53 \u4e0b\u4e00\u8282\uff1a \u7c7b\u578b\u7684 String() \u65b9\u6cd5\u548c\u683c\u5f0f\u5316\u63cf\u8ff0\u7b26","title":"\u94fe\u63a5"},{"location":"10.7/","text":"10.7 \u7c7b\u578b\u7684 String() \u65b9\u6cd5\u548c\u683c\u5f0f\u5316\u63cf\u8ff0\u7b26 \u00b6 \u5f53\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6709\u5f88\u591a\u65b9\u6cd5\u7684\u7c7b\u578b\u65f6\uff0c\u5341\u4e4b\u516b\u4e5d\u4f60\u4f1a\u4f7f\u7528 String() \u65b9\u6cd5\u6765\u5b9a\u5236\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u8f93\u51fa\uff0c\u6362\u53e5\u8bdd\u8bf4\uff1a\u4e00\u79cd\u53ef\u9605\u8bfb\u6027\u548c\u6253\u5370\u6027\u7684\u8f93\u51fa\u3002\u5982\u679c\u7c7b\u578b\u5b9a\u4e49\u4e86 String() \u65b9\u6cd5\uff0c\u5b83\u4f1a\u88ab\u7528\u5728 fmt.Printf() \u4e2d\u751f\u6210\u9ed8\u8ba4\u7684\u8f93\u51fa\uff1a\u7b49\u540c\u4e8e\u4f7f\u7528\u683c\u5f0f\u5316\u63cf\u8ff0\u7b26 %v \u4ea7\u751f\u7684\u8f93\u51fa\u3002\u8fd8\u6709 fmt.Print() \u548c fmt.Println() \u4e5f\u4f1a\u81ea\u52a8\u4f7f\u7528 String() \u65b9\u6cd5\u3002 \u6211\u4eec\u4f7f\u7528 \u7b2c 10.4 \u8282 \u4e2d\u7a0b\u5e8f\u7684\u7c7b\u578b\u6765\u8fdb\u884c\u6d4b\u8bd5\uff1a \u793a\u4f8b 10.22 method_string.go \uff1a package main import ( \"fmt\" \"strconv\" ) type TwoInts struct { a int b int } func main () { two1 := new ( TwoInts ) two1 . a = 12 two1 . b = 10 fmt . Printf ( \"two1 is: %v\\n\" , two1 ) fmt . Println ( \"two1 is:\" , two1 ) fmt . Printf ( \"two1 is: %T\\n\" , two1 ) fmt . Printf ( \"two1 is: %#v\\n\" , two1 ) } func ( tn * TwoInts ) String () string { return \"(\" + strconv . Itoa ( tn . a ) + \"/\" + strconv . Itoa ( tn . b ) + \")\" } \u8f93\u51fa\uff1a two1 is: (12/10) two1 is: (12/10) two1 is: *main.TwoInts two1 is: &main.TwoInts{a:12, b:10} \u5f53\u4f60\u5e7f\u6cdb\u4f7f\u7528\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7c7b\u578b\u65f6\uff0c\u6700\u597d\u4e3a\u5b83\u5b9a\u4e49 String() \u65b9\u6cd5\u3002\u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u4e5f\u53ef\u4ee5\u770b\u5230\uff0c\u683c\u5f0f\u5316\u63cf\u8ff0\u7b26 %T \u4f1a\u7ed9\u51fa\u7c7b\u578b\u7684\u5b8c\u5168\u89c4\u683c\uff0c %#v \u4f1a\u7ed9\u51fa\u5b9e\u4f8b\u7684\u5b8c\u6574\u8f93\u51fa\uff0c\u5305\u62ec\u5b83\u7684\u5b57\u6bb5\uff08\u5728\u7a0b\u5e8f\u81ea\u52a8\u751f\u6210 Go \u4ee3\u7801\u65f6\u4e5f\u5f88\u6709\u7528\uff09\u3002 \u5907\u6ce8 \u4e0d\u8981\u5728 String() \u65b9\u6cd5\u91cc\u9762\u8c03\u7528\u6d89\u53ca String() \u65b9\u6cd5\u7684\u65b9\u6cd5\uff0c\u5b83\u4f1a\u5bfc\u81f4\u610f\u6599\u4e4b\u5916\u7684\u9519\u8bef\uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u5b83\u5bfc\u81f4\u4e86\u4e00\u4e2a\u65e0\u9650\u9012\u5f52\u8c03\u7528\uff08 TT.String() \u8c03\u7528 fmt.Sprintf \uff0c\u800c fmt.Sprintf \u53c8\u4f1a\u53cd\u8fc7\u6765\u8c03\u7528 TT.String() \uff09\uff0c\u5f88\u5feb\u5c31\u4f1a\u5bfc\u81f4\u5185\u5b58\u6ea2\u51fa\uff1a type TT float64 func ( t TT ) String () string { return fmt . Sprintf ( \"%v\" , t ) } t . String () \u7ec3\u4e60 10.12 type_string.go \u7ed9\u5b9a\u7ed3\u6784\u4f53\u7c7b\u578b T : type T struct { a int b float32 c string } \u503c t : t := &T{7, -2.35, \"abc\\tdef\"} \u3002\u7ed9 T \u5b9a\u4e49 String() \uff0c\u4f7f\u5f97 fmt.Printf(\"%v\\n\", t) \u8f93\u51fa\uff1a 7 / -2.350000 / \"abc\\tdef\" \u3002 \u7ec3\u4e60 10.13 celsius.go \u4e3a float64 \u5b9a\u4e49\u4e00\u4e2a\u522b\u540d\u7c7b\u578b Celsius \uff0c\u5e76\u7ed9\u5b83\u5b9a\u4e49 String() \uff0c\u5b83\u8f93\u51fa\u4e00\u4e2a\u5341\u8fdb\u5236\u6570\u548c \u00b0C \u8868\u793a\u7684\u6e29\u5ea6\u503c\u3002 \u7ec3\u4e60 10.14 days.go \u4e3a int \u5b9a\u4e49\u4e00\u4e2a\u522b\u540d\u7c7b\u578b Day \uff0c\u5b9a\u4e49\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\u5b83\u5305\u542b\u4e00\u5468\u4e03\u5929\u7684\u540d\u5b57\uff0c\u4e3a\u7c7b\u578b Day \u5b9a\u4e49 String() \u65b9\u6cd5\uff0c\u5b83\u8f93\u51fa\u661f\u671f\u51e0\u7684\u540d\u5b57\u3002\u4f7f\u7528 iota \u5b9a\u4e49\u4e00\u4e2a\u679a\u4e3e\u5e38\u91cf\u7528\u4e8e\u8868\u793a\u4e00\u5468\u7684\u4e2d\u6bcf\u5929\uff08MO\u3001TU...\uff09\u3002 \u7ec3\u4e60 10.15 timezones.go \u4e3a int \u5b9a\u4e49\u522b\u540d\u7c7b\u578b TZ \uff0c\u5b9a\u4e49\u4e00\u4e9b\u5e38\u91cf\u8868\u793a\u65f6\u533a\uff0c\u6bd4\u5982 UTC\uff0c\u5b9a\u4e49\u4e00\u4e2a map \uff0c\u5b83\u5c06\u65f6\u533a\u7684\u7f29\u5199\u6620\u5c04\u4e3a\u5b83\u7684\u5168\u79f0\uff0c\u6bd4\u5982\uff1a UTC -> \"Universal Greenwich time\" \u3002\u4e3a\u7c7b\u578b TZ \u5b9a\u4e49 String() \u65b9\u6cd5\uff0c\u5b83\u8f93\u51fa\u65f6\u533a\u7684\u5168\u79f0\u3002 \u7ec3\u4e60 10.16 stack_arr.go / stack_struct.go \u5b9e\u73b0\u6808 (stack) \u6570\u636e\u7ed3\u6784\uff1a \u5b83\u7684\u683c\u5b50\u5305\u542b\u6570\u636e\uff0c\u6bd4\u5982\u6574\u6570 i \u3001 j \u3001 k \u548c l \u7b49\u7b49\uff0c\u683c\u5b50\u4ece\u5e95\u90e8\uff08\u7d22\u5f15 0\uff09\u81f3\u9876\u90e8\uff08\u7d22\u5f15 n\uff09\u6765\u7d22\u5f15\u3002\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u5047\u5b9a n = 3 \uff0c\u90a3\u4e48\u4e00\u5171\u6709 4 \u4e2a\u683c\u5b50\u3002 \u4e00\u4e2a\u65b0\u6808\u4e2d\u6240\u6709\u683c\u5b50\u7684\u503c\u90fd\u662f 0 \u3002 \u5c06\u4e00\u4e2a\u65b0\u503c\u653e\u5230\u6808\u7684\u6700\u9876\u90e8\u4e00\u4e2a\u7a7a\uff08\u5305\u62ec\u96f6\uff09\u7684\u683c\u5b50\u4e2d\uff0c\u8fd9\u53eb\u505a push\u3002 \u83b7\u53d6\u6808\u7684\u6700\u9876\u90e8\u4e00\u4e2a\u975e\u7a7a\uff08\u975e\u96f6\uff09\u7684\u683c\u5b50\u7684\u503c\uff0c\u8fd9\u53eb\u505a pop\u3002 \u73b0\u5728\u53ef\u4ee5\u7406\u89e3\u4e3a\u4ec0\u4e48\u6808\u662f\u4e00\u4e2a\u540e\u8fdb\u5148\u51fa (LIFO) \u7684\u7ed3\u6784\u4e86\u5427\u3002 \u4e3a\u6808\u5b9a\u4e49\u4e00\u4e2a Stack \u7c7b\u578b\uff0c\u5e76\u4e3a\u5b83\u5b9a\u4e49 Push \u548c Pop \u65b9\u6cd5\uff0c\u518d\u4e3a\u5b83\u5b9a\u4e49 String() \u65b9\u6cd5\uff08\u7528\u4e8e\u8c03\u8bd5\uff09\u8f93\u51fa\u6808\u7684\u5185\u5bb9\uff0c\u6bd4\u5982\uff1a [0:i] [1:j] [2:k] [3:l] \u3002 1\uff09 stack_arr.go \uff1a\u4f7f\u7528\u957f\u5ea6\u4e3a 4 \u7684 int \u6570\u7ec4\u4f5c\u4e3a\u5e95\u5c42\u6570\u636e\u7ed3\u6784\u3002 2\uff09 stack_struct.go \uff1a\u4f7f\u7528\u5305\u542b\u4e00\u4e2a\u7d22\u5f15\u548c\u4e00\u4e2a int \u6570\u7ec4\u7684\u7ed3\u6784\u4f53\u4f5c\u4e3a\u5e95\u5c42\u6570\u636e\u7ed3\u6784\uff0c\u7d22\u5f15\u8868\u793a\u7b2c\u4e00\u4e2a\u7a7a\u95f2\u7684\u4f4d\u7f6e\u3002 3\uff09\u4f7f\u7528\u5e38\u91cf LIMIT \u4ee3\u66ff\u4e0a\u9762\u8868\u793a\u5143\u7d20\u4e2a\u6570\u7684 4 \u91cd\u65b0\u5b9e\u73b0\u4e0a\u9762\u7684 1\uff09\u548c 2\uff09\uff0c\u4f7f\u5b83\u4eec\u66f4\u5177\u6709\u4e00\u822c\u6027\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u65b9\u6cd5 \u4e0b\u4e00\u8282\uff1a \u5783\u573e\u56de\u6536\u548c SetFinalizer","title":"10.7 \u7c7b\u578b\u7684 String(  \u65b9\u6cd5\u548c\u683c\u5f0f\u5316\u63cf\u8ff0\u7b26"},{"location":"10.7/#107-string","text":"\u5f53\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6709\u5f88\u591a\u65b9\u6cd5\u7684\u7c7b\u578b\u65f6\uff0c\u5341\u4e4b\u516b\u4e5d\u4f60\u4f1a\u4f7f\u7528 String() \u65b9\u6cd5\u6765\u5b9a\u5236\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u8f93\u51fa\uff0c\u6362\u53e5\u8bdd\u8bf4\uff1a\u4e00\u79cd\u53ef\u9605\u8bfb\u6027\u548c\u6253\u5370\u6027\u7684\u8f93\u51fa\u3002\u5982\u679c\u7c7b\u578b\u5b9a\u4e49\u4e86 String() \u65b9\u6cd5\uff0c\u5b83\u4f1a\u88ab\u7528\u5728 fmt.Printf() \u4e2d\u751f\u6210\u9ed8\u8ba4\u7684\u8f93\u51fa\uff1a\u7b49\u540c\u4e8e\u4f7f\u7528\u683c\u5f0f\u5316\u63cf\u8ff0\u7b26 %v \u4ea7\u751f\u7684\u8f93\u51fa\u3002\u8fd8\u6709 fmt.Print() \u548c fmt.Println() \u4e5f\u4f1a\u81ea\u52a8\u4f7f\u7528 String() \u65b9\u6cd5\u3002 \u6211\u4eec\u4f7f\u7528 \u7b2c 10.4 \u8282 \u4e2d\u7a0b\u5e8f\u7684\u7c7b\u578b\u6765\u8fdb\u884c\u6d4b\u8bd5\uff1a \u793a\u4f8b 10.22 method_string.go \uff1a package main import ( \"fmt\" \"strconv\" ) type TwoInts struct { a int b int } func main () { two1 := new ( TwoInts ) two1 . a = 12 two1 . b = 10 fmt . Printf ( \"two1 is: %v\\n\" , two1 ) fmt . Println ( \"two1 is:\" , two1 ) fmt . Printf ( \"two1 is: %T\\n\" , two1 ) fmt . Printf ( \"two1 is: %#v\\n\" , two1 ) } func ( tn * TwoInts ) String () string { return \"(\" + strconv . Itoa ( tn . a ) + \"/\" + strconv . Itoa ( tn . b ) + \")\" } \u8f93\u51fa\uff1a two1 is: (12/10) two1 is: (12/10) two1 is: *main.TwoInts two1 is: &main.TwoInts{a:12, b:10} \u5f53\u4f60\u5e7f\u6cdb\u4f7f\u7528\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7c7b\u578b\u65f6\uff0c\u6700\u597d\u4e3a\u5b83\u5b9a\u4e49 String() \u65b9\u6cd5\u3002\u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u4e5f\u53ef\u4ee5\u770b\u5230\uff0c\u683c\u5f0f\u5316\u63cf\u8ff0\u7b26 %T \u4f1a\u7ed9\u51fa\u7c7b\u578b\u7684\u5b8c\u5168\u89c4\u683c\uff0c %#v \u4f1a\u7ed9\u51fa\u5b9e\u4f8b\u7684\u5b8c\u6574\u8f93\u51fa\uff0c\u5305\u62ec\u5b83\u7684\u5b57\u6bb5\uff08\u5728\u7a0b\u5e8f\u81ea\u52a8\u751f\u6210 Go \u4ee3\u7801\u65f6\u4e5f\u5f88\u6709\u7528\uff09\u3002 \u5907\u6ce8 \u4e0d\u8981\u5728 String() \u65b9\u6cd5\u91cc\u9762\u8c03\u7528\u6d89\u53ca String() \u65b9\u6cd5\u7684\u65b9\u6cd5\uff0c\u5b83\u4f1a\u5bfc\u81f4\u610f\u6599\u4e4b\u5916\u7684\u9519\u8bef\uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u5b83\u5bfc\u81f4\u4e86\u4e00\u4e2a\u65e0\u9650\u9012\u5f52\u8c03\u7528\uff08 TT.String() \u8c03\u7528 fmt.Sprintf \uff0c\u800c fmt.Sprintf \u53c8\u4f1a\u53cd\u8fc7\u6765\u8c03\u7528 TT.String() \uff09\uff0c\u5f88\u5feb\u5c31\u4f1a\u5bfc\u81f4\u5185\u5b58\u6ea2\u51fa\uff1a type TT float64 func ( t TT ) String () string { return fmt . Sprintf ( \"%v\" , t ) } t . String () \u7ec3\u4e60 10.12 type_string.go \u7ed9\u5b9a\u7ed3\u6784\u4f53\u7c7b\u578b T : type T struct { a int b float32 c string } \u503c t : t := &T{7, -2.35, \"abc\\tdef\"} \u3002\u7ed9 T \u5b9a\u4e49 String() \uff0c\u4f7f\u5f97 fmt.Printf(\"%v\\n\", t) \u8f93\u51fa\uff1a 7 / -2.350000 / \"abc\\tdef\" \u3002 \u7ec3\u4e60 10.13 celsius.go \u4e3a float64 \u5b9a\u4e49\u4e00\u4e2a\u522b\u540d\u7c7b\u578b Celsius \uff0c\u5e76\u7ed9\u5b83\u5b9a\u4e49 String() \uff0c\u5b83\u8f93\u51fa\u4e00\u4e2a\u5341\u8fdb\u5236\u6570\u548c \u00b0C \u8868\u793a\u7684\u6e29\u5ea6\u503c\u3002 \u7ec3\u4e60 10.14 days.go \u4e3a int \u5b9a\u4e49\u4e00\u4e2a\u522b\u540d\u7c7b\u578b Day \uff0c\u5b9a\u4e49\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\u5b83\u5305\u542b\u4e00\u5468\u4e03\u5929\u7684\u540d\u5b57\uff0c\u4e3a\u7c7b\u578b Day \u5b9a\u4e49 String() \u65b9\u6cd5\uff0c\u5b83\u8f93\u51fa\u661f\u671f\u51e0\u7684\u540d\u5b57\u3002\u4f7f\u7528 iota \u5b9a\u4e49\u4e00\u4e2a\u679a\u4e3e\u5e38\u91cf\u7528\u4e8e\u8868\u793a\u4e00\u5468\u7684\u4e2d\u6bcf\u5929\uff08MO\u3001TU...\uff09\u3002 \u7ec3\u4e60 10.15 timezones.go \u4e3a int \u5b9a\u4e49\u522b\u540d\u7c7b\u578b TZ \uff0c\u5b9a\u4e49\u4e00\u4e9b\u5e38\u91cf\u8868\u793a\u65f6\u533a\uff0c\u6bd4\u5982 UTC\uff0c\u5b9a\u4e49\u4e00\u4e2a map \uff0c\u5b83\u5c06\u65f6\u533a\u7684\u7f29\u5199\u6620\u5c04\u4e3a\u5b83\u7684\u5168\u79f0\uff0c\u6bd4\u5982\uff1a UTC -> \"Universal Greenwich time\" \u3002\u4e3a\u7c7b\u578b TZ \u5b9a\u4e49 String() \u65b9\u6cd5\uff0c\u5b83\u8f93\u51fa\u65f6\u533a\u7684\u5168\u79f0\u3002 \u7ec3\u4e60 10.16 stack_arr.go / stack_struct.go \u5b9e\u73b0\u6808 (stack) \u6570\u636e\u7ed3\u6784\uff1a \u5b83\u7684\u683c\u5b50\u5305\u542b\u6570\u636e\uff0c\u6bd4\u5982\u6574\u6570 i \u3001 j \u3001 k \u548c l \u7b49\u7b49\uff0c\u683c\u5b50\u4ece\u5e95\u90e8\uff08\u7d22\u5f15 0\uff09\u81f3\u9876\u90e8\uff08\u7d22\u5f15 n\uff09\u6765\u7d22\u5f15\u3002\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u5047\u5b9a n = 3 \uff0c\u90a3\u4e48\u4e00\u5171\u6709 4 \u4e2a\u683c\u5b50\u3002 \u4e00\u4e2a\u65b0\u6808\u4e2d\u6240\u6709\u683c\u5b50\u7684\u503c\u90fd\u662f 0 \u3002 \u5c06\u4e00\u4e2a\u65b0\u503c\u653e\u5230\u6808\u7684\u6700\u9876\u90e8\u4e00\u4e2a\u7a7a\uff08\u5305\u62ec\u96f6\uff09\u7684\u683c\u5b50\u4e2d\uff0c\u8fd9\u53eb\u505a push\u3002 \u83b7\u53d6\u6808\u7684\u6700\u9876\u90e8\u4e00\u4e2a\u975e\u7a7a\uff08\u975e\u96f6\uff09\u7684\u683c\u5b50\u7684\u503c\uff0c\u8fd9\u53eb\u505a pop\u3002 \u73b0\u5728\u53ef\u4ee5\u7406\u89e3\u4e3a\u4ec0\u4e48\u6808\u662f\u4e00\u4e2a\u540e\u8fdb\u5148\u51fa (LIFO) \u7684\u7ed3\u6784\u4e86\u5427\u3002 \u4e3a\u6808\u5b9a\u4e49\u4e00\u4e2a Stack \u7c7b\u578b\uff0c\u5e76\u4e3a\u5b83\u5b9a\u4e49 Push \u548c Pop \u65b9\u6cd5\uff0c\u518d\u4e3a\u5b83\u5b9a\u4e49 String() \u65b9\u6cd5\uff08\u7528\u4e8e\u8c03\u8bd5\uff09\u8f93\u51fa\u6808\u7684\u5185\u5bb9\uff0c\u6bd4\u5982\uff1a [0:i] [1:j] [2:k] [3:l] \u3002 1\uff09 stack_arr.go \uff1a\u4f7f\u7528\u957f\u5ea6\u4e3a 4 \u7684 int \u6570\u7ec4\u4f5c\u4e3a\u5e95\u5c42\u6570\u636e\u7ed3\u6784\u3002 2\uff09 stack_struct.go \uff1a\u4f7f\u7528\u5305\u542b\u4e00\u4e2a\u7d22\u5f15\u548c\u4e00\u4e2a int \u6570\u7ec4\u7684\u7ed3\u6784\u4f53\u4f5c\u4e3a\u5e95\u5c42\u6570\u636e\u7ed3\u6784\uff0c\u7d22\u5f15\u8868\u793a\u7b2c\u4e00\u4e2a\u7a7a\u95f2\u7684\u4f4d\u7f6e\u3002 3\uff09\u4f7f\u7528\u5e38\u91cf LIMIT \u4ee3\u66ff\u4e0a\u9762\u8868\u793a\u5143\u7d20\u4e2a\u6570\u7684 4 \u91cd\u65b0\u5b9e\u73b0\u4e0a\u9762\u7684 1\uff09\u548c 2\uff09\uff0c\u4f7f\u5b83\u4eec\u66f4\u5177\u6709\u4e00\u822c\u6027\u3002","title":"10.7 \u7c7b\u578b\u7684 String() \u65b9\u6cd5\u548c\u683c\u5f0f\u5316\u63cf\u8ff0\u7b26"},{"location":"10.7/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u65b9\u6cd5 \u4e0b\u4e00\u8282\uff1a \u5783\u573e\u56de\u6536\u548c SetFinalizer","title":"\u94fe\u63a5"},{"location":"10.8/","text":"10.8 \u5783\u573e\u56de\u6536\u548c SetFinalizer \u00b6 Go \u5f00\u53d1\u8005\u4e0d\u9700\u8981\u5199\u4ee3\u7801\u6765\u91ca\u653e\u7a0b\u5e8f\u4e2d\u4e0d\u518d\u4f7f\u7528\u7684\u53d8\u91cf\u548c\u7ed3\u6784\u5360\u7528\u7684\u5185\u5b58\uff0c\u5728 Go \u8fd0\u884c\u65f6\u4e2d\u6709\u4e00\u4e2a\u72ec\u7acb\u7684\u8fdb\u7a0b\uff0c\u5373\u5783\u573e\u6536\u96c6\u5668 (GC)\uff0c\u4f1a\u5904\u7406\u8fd9\u4e9b\u4e8b\u60c5\uff0c\u5b83\u641c\u7d22\u4e0d\u518d\u4f7f\u7528\u7684\u53d8\u91cf\u7136\u540e\u91ca\u653e\u5b83\u4eec\u7684\u5185\u5b58\u3002\u53ef\u4ee5\u901a\u8fc7 runtime \u5305\u8bbf\u95ee GC \u8fdb\u7a0b\u3002 \u901a\u8fc7\u8c03\u7528 runtime.GC() \u51fd\u6570\u53ef\u4ee5\u663e\u5f0f\u7684\u89e6\u53d1 GC\uff0c\u4f46\u8fd9\u53ea\u5728\u67d0\u4e9b\u7f55\u89c1\u7684\u573a\u666f\u4e0b\u624d\u6709\u7528\uff0c\u6bd4\u5982\u5f53\u5185\u5b58\u8d44\u6e90\u4e0d\u8db3\u65f6\u8c03\u7528 runtime.GC() \uff0c\u5b83\u4f1a\u5728\u6b64\u51fd\u6570\u6267\u884c\u7684\u70b9\u4e0a\u7acb\u5373\u91ca\u653e\u4e00\u5927\u7247\u5185\u5b58\uff0c\u6b64\u65f6\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u6709\u77ed\u65f6\u7684\u6027\u80fd\u4e0b\u964d\uff08\u56e0\u4e3a GC \u8fdb\u7a0b\u5728\u6267\u884c\uff09\u3002 \u5982\u679c\u60f3\u77e5\u9053\u5f53\u524d\u7684\u5185\u5b58\u72b6\u6001\uff0c\u53ef\u4ee5\u4f7f\u7528\uff1a // fmt.Printf(\"%d\\n\", runtime.MemStats.Alloc/1024) // \u6b64\u5904\u4ee3\u7801\u5728 Go 1.5.1\u4e0b\u4e0d\u518d\u6709\u6548\uff0c\u66f4\u6b63\u4e3a var m runtime . MemStats runtime . ReadMemStats ( & m ) fmt . Printf ( \"%d Kb\\n\" , m . Alloc / 1024 ) \u4e0a\u9762\u7684\u7a0b\u5e8f\u4f1a\u7ed9\u51fa\u5df2\u5206\u914d\u5185\u5b58\u7684\u603b\u91cf\uff0c\u5355\u4f4d\u662f Kb\u3002\u8fdb\u4e00\u6b65\u7684\u6d4b\u91cf\u53c2\u8003 \u6587\u6863\u9875\u9762 \u3002 \u5982\u679c\u9700\u8981\u5728\u4e00\u4e2a\u5bf9\u8c61 obj \u88ab\u4ece\u5185\u5b58\u79fb\u9664\u524d\u6267\u884c\u4e00\u4e9b\u7279\u6b8a\u64cd\u4f5c\uff0c\u6bd4\u5982\u5199\u5230\u65e5\u5fd7\u6587\u4ef6\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u8c03\u7528\u51fd\u6570\u6765\u5b9e\u73b0\uff1a runtime . SetFinalizer ( obj , func ( obj * typeObj )) func(obj *typeObj) \u9700\u8981\u4e00\u4e2a typeObj \u7c7b\u578b\u7684\u6307\u9488\u53c2\u6570 obj \uff0c\u7279\u6b8a\u64cd\u4f5c\u4f1a\u5728\u5b83\u4e0a\u9762\u6267\u884c\u3002 func \u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u533f\u540d\u51fd\u6570\u3002 \u5728\u5bf9\u8c61\u88ab GC \u8fdb\u7a0b\u9009\u4e2d\u5e76\u4ece\u5185\u5b58\u4e2d\u79fb\u9664\u4ee5\u524d\uff0c SetFinalizer \u90fd\u4e0d\u4f1a\u6267\u884c\uff0c\u5373\u4f7f\u7a0b\u5e8f\u6b63\u5e38\u7ed3\u675f\u6216\u8005\u53d1\u751f\u9519\u8bef\u3002 \u7ec3\u4e60 10.17 main_stack.go \u4ece\u7ec3\u4e60 10.16 \u5f00\u59cb\uff08\u5b83\u57fa\u4e8e\u7ed3\u6784\u4f53\u5b9e\u73b0\u4e86\u4e00\u4e2a\u6808\u7ed3\u6784\uff09\uff0c\u4e3a\u6808\u7684\u5b9e\u73b0 ( stack_struct.go ) \u521b\u5efa\u4e00\u4e2a\u5355\u72ec\u7684\u5305 stack \uff0c\u5e76\u4ece main \u5305 main.stack.go \u4e2d\u8c03\u7528\u5b83\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7c7b\u578b\u7684 String() \u65b9\u6cd5\u548c\u683c\u5f0f\u5316\u63cf\u8ff0\u7b26 \u4e0b\u4e00\u7ae0\uff1a \u63a5\u53e3 (Interfaces) \u4e0e\u53cd\u5c04 (reflection)","title":"10.8 \u5783\u573e\u56de\u6536\u548c SetFinalizer"},{"location":"10.8/#108-setfinalizer","text":"Go \u5f00\u53d1\u8005\u4e0d\u9700\u8981\u5199\u4ee3\u7801\u6765\u91ca\u653e\u7a0b\u5e8f\u4e2d\u4e0d\u518d\u4f7f\u7528\u7684\u53d8\u91cf\u548c\u7ed3\u6784\u5360\u7528\u7684\u5185\u5b58\uff0c\u5728 Go \u8fd0\u884c\u65f6\u4e2d\u6709\u4e00\u4e2a\u72ec\u7acb\u7684\u8fdb\u7a0b\uff0c\u5373\u5783\u573e\u6536\u96c6\u5668 (GC)\uff0c\u4f1a\u5904\u7406\u8fd9\u4e9b\u4e8b\u60c5\uff0c\u5b83\u641c\u7d22\u4e0d\u518d\u4f7f\u7528\u7684\u53d8\u91cf\u7136\u540e\u91ca\u653e\u5b83\u4eec\u7684\u5185\u5b58\u3002\u53ef\u4ee5\u901a\u8fc7 runtime \u5305\u8bbf\u95ee GC \u8fdb\u7a0b\u3002 \u901a\u8fc7\u8c03\u7528 runtime.GC() \u51fd\u6570\u53ef\u4ee5\u663e\u5f0f\u7684\u89e6\u53d1 GC\uff0c\u4f46\u8fd9\u53ea\u5728\u67d0\u4e9b\u7f55\u89c1\u7684\u573a\u666f\u4e0b\u624d\u6709\u7528\uff0c\u6bd4\u5982\u5f53\u5185\u5b58\u8d44\u6e90\u4e0d\u8db3\u65f6\u8c03\u7528 runtime.GC() \uff0c\u5b83\u4f1a\u5728\u6b64\u51fd\u6570\u6267\u884c\u7684\u70b9\u4e0a\u7acb\u5373\u91ca\u653e\u4e00\u5927\u7247\u5185\u5b58\uff0c\u6b64\u65f6\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u6709\u77ed\u65f6\u7684\u6027\u80fd\u4e0b\u964d\uff08\u56e0\u4e3a GC \u8fdb\u7a0b\u5728\u6267\u884c\uff09\u3002 \u5982\u679c\u60f3\u77e5\u9053\u5f53\u524d\u7684\u5185\u5b58\u72b6\u6001\uff0c\u53ef\u4ee5\u4f7f\u7528\uff1a // fmt.Printf(\"%d\\n\", runtime.MemStats.Alloc/1024) // \u6b64\u5904\u4ee3\u7801\u5728 Go 1.5.1\u4e0b\u4e0d\u518d\u6709\u6548\uff0c\u66f4\u6b63\u4e3a var m runtime . MemStats runtime . ReadMemStats ( & m ) fmt . Printf ( \"%d Kb\\n\" , m . Alloc / 1024 ) \u4e0a\u9762\u7684\u7a0b\u5e8f\u4f1a\u7ed9\u51fa\u5df2\u5206\u914d\u5185\u5b58\u7684\u603b\u91cf\uff0c\u5355\u4f4d\u662f Kb\u3002\u8fdb\u4e00\u6b65\u7684\u6d4b\u91cf\u53c2\u8003 \u6587\u6863\u9875\u9762 \u3002 \u5982\u679c\u9700\u8981\u5728\u4e00\u4e2a\u5bf9\u8c61 obj \u88ab\u4ece\u5185\u5b58\u79fb\u9664\u524d\u6267\u884c\u4e00\u4e9b\u7279\u6b8a\u64cd\u4f5c\uff0c\u6bd4\u5982\u5199\u5230\u65e5\u5fd7\u6587\u4ef6\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u8c03\u7528\u51fd\u6570\u6765\u5b9e\u73b0\uff1a runtime . SetFinalizer ( obj , func ( obj * typeObj )) func(obj *typeObj) \u9700\u8981\u4e00\u4e2a typeObj \u7c7b\u578b\u7684\u6307\u9488\u53c2\u6570 obj \uff0c\u7279\u6b8a\u64cd\u4f5c\u4f1a\u5728\u5b83\u4e0a\u9762\u6267\u884c\u3002 func \u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u533f\u540d\u51fd\u6570\u3002 \u5728\u5bf9\u8c61\u88ab GC \u8fdb\u7a0b\u9009\u4e2d\u5e76\u4ece\u5185\u5b58\u4e2d\u79fb\u9664\u4ee5\u524d\uff0c SetFinalizer \u90fd\u4e0d\u4f1a\u6267\u884c\uff0c\u5373\u4f7f\u7a0b\u5e8f\u6b63\u5e38\u7ed3\u675f\u6216\u8005\u53d1\u751f\u9519\u8bef\u3002 \u7ec3\u4e60 10.17 main_stack.go \u4ece\u7ec3\u4e60 10.16 \u5f00\u59cb\uff08\u5b83\u57fa\u4e8e\u7ed3\u6784\u4f53\u5b9e\u73b0\u4e86\u4e00\u4e2a\u6808\u7ed3\u6784\uff09\uff0c\u4e3a\u6808\u7684\u5b9e\u73b0 ( stack_struct.go ) \u521b\u5efa\u4e00\u4e2a\u5355\u72ec\u7684\u5305 stack \uff0c\u5e76\u4ece main \u5305 main.stack.go \u4e2d\u8c03\u7528\u5b83\u3002","title":"10.8 \u5783\u573e\u56de\u6536\u548c SetFinalizer"},{"location":"10.8/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7c7b\u578b\u7684 String() \u65b9\u6cd5\u548c\u683c\u5f0f\u5316\u63cf\u8ff0\u7b26 \u4e0b\u4e00\u7ae0\uff1a \u63a5\u53e3 (Interfaces) \u4e0e\u53cd\u5c04 (reflection)","title":"\u94fe\u63a5"},{"location":"11.0/","text":"11.0 \u63a5\u53e3 (interface)\u4e0e\u53cd\u5c04 (reflection) \u00b6 \u672c\u7ae0\u4ecb\u7ecd Go \u8bed\u8a00\u4e2d\u63a5\u53e3\u548c\u53cd\u5c04\u7684\u76f8\u5173\u5185\u5bb9\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u7ae0\uff1a \u5783\u573e\u56de\u6536\u548c SetFinalizer \u4e0b\u4e00\u8282\uff1a \u63a5\u53e3\u662f\u4ec0\u4e48","title":"11.0 \u63a5\u53e3 (interface)\u4e0e\u53cd\u5c04 (reflection)"},{"location":"11.0/#110-interface-reflection","text":"\u672c\u7ae0\u4ecb\u7ecd Go \u8bed\u8a00\u4e2d\u63a5\u53e3\u548c\u53cd\u5c04\u7684\u76f8\u5173\u5185\u5bb9\u3002","title":"11.0 \u63a5\u53e3 (interface)\u4e0e\u53cd\u5c04 (reflection)"},{"location":"11.0/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u7ae0\uff1a \u5783\u573e\u56de\u6536\u548c SetFinalizer \u4e0b\u4e00\u8282\uff1a \u63a5\u53e3\u662f\u4ec0\u4e48","title":"\u94fe\u63a5"},{"location":"11.1/","text":"11.1 \u63a5\u53e3\u662f\u4ec0\u4e48 \u00b6 Go \u8bed\u8a00\u4e0d\u662f\u4e00\u79cd \u201c\u4f20\u7edf\u201d \u7684\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8bed\u8a00\uff1a\u5b83\u91cc\u9762\u6ca1\u6709\u7c7b\u548c\u7ee7\u627f\u7684\u6982\u5ff5\u3002 \u4f46\u662f Go \u8bed\u8a00\u91cc\u6709\u975e\u5e38\u7075\u6d3b\u7684 \u63a5\u53e3 \u6982\u5ff5\uff0c\u901a\u8fc7\u5b83\u53ef\u4ee5\u5b9e\u73b0\u5f88\u591a\u9762\u5411\u5bf9\u8c61\u7684\u7279\u6027\u3002\u63a5\u53e3\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u5f0f\u6765 \u8bf4\u660e \u5bf9\u8c61\u7684\u884c\u4e3a\uff1a\u5982\u679c\u8c01\u80fd\u641e\u5b9a\u8fd9\u4ef6\u4e8b\uff0c\u5b83\u5c31\u53ef\u4ee5\u7528\u5728\u8fd9\u513f\u3002 \u63a5\u53e3\u5b9a\u4e49\u4e86\u4e00\u7ec4\u65b9\u6cd5\uff08\u65b9\u6cd5\u96c6\uff09\uff0c\u4f46\u662f\u8fd9\u4e9b\u65b9\u6cd5\u4e0d\u5305\u542b\uff08\u5b9e\u73b0\uff09\u4ee3\u7801\uff1a\u5b83\u4eec\u6ca1\u6709\u88ab\u5b9e\u73b0\uff08\u5b83\u4eec\u662f\u62bd\u8c61\u7684\uff09\u3002\u63a5\u53e3\u91cc\u4e5f\u4e0d\u80fd\u5305\u542b\u53d8\u91cf\u3002 \u901a\u8fc7\u5982\u4e0b\u683c\u5f0f\u5b9a\u4e49\u63a5\u53e3\uff1a type Namer interface { Method1 ( param_list ) return_type Method2 ( param_list ) return_type ... } \u4e0a\u9762\u7684 Namer \u662f\u4e00\u4e2a \u63a5\u53e3\u7c7b\u578b \u3002 \uff08\u6309\u7167\u7ea6\u5b9a\uff0c\u53ea\u5305\u542b\u4e00\u4e2a\u65b9\u6cd5\u7684\uff09\u63a5\u53e3\u7684\u540d\u5b57\u7531\u65b9\u6cd5\u540d\u52a0 er \u540e\u7f00\u7ec4\u6210\uff0c\u4f8b\u5982 Printer \u3001 Reader \u3001 Writer \u3001 Logger \u3001 Converter \u7b49\u7b49\u3002\u8fd8\u6709\u4e00\u4e9b\u4e0d\u5e38\u7528\u7684\u65b9\u5f0f\uff08\u5f53\u540e\u7f00 er \u4e0d\u5408\u9002\u65f6\uff09\uff0c\u6bd4\u5982 Recoverable \uff0c\u6b64\u65f6\u63a5\u53e3\u540d\u4ee5 able \u7ed3\u5c3e\uff0c\u6216\u8005\u4ee5 I \u5f00\u5934\uff08\u50cf .NET \u6216 Java \u4e2d\u90a3\u6837\uff09\u3002 Go \u8bed\u8a00\u4e2d\u7684\u63a5\u53e3\u90fd\u5f88\u7b80\u77ed\uff0c\u901a\u5e38\u5b83\u4eec\u4f1a\u5305\u542b 0 \u4e2a\u3001\u6700\u591a 3 \u4e2a\u65b9\u6cd5\u3002 \u4e0d\u50cf\u5927\u591a\u6570\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8bed\u8a00\uff0c\u5728 Go \u8bed\u8a00\u4e2d\u63a5\u53e3\u53ef\u4ee5\u6709\u503c\uff0c\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u7684\u53d8\u91cf\u6216\u4e00\u4e2a \u63a5\u53e3\u503c \uff1a var ai Namer \uff0c ai \u662f\u4e00\u4e2a\u591a\u5b57\uff08multiword\uff09\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u7684\u503c\u662f nil \u3002\u5b83\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u867d\u7136\u4e0d\u5b8c\u5168\u662f\u4e00\u56de\u4e8b\u3002\u6307\u5411\u63a5\u53e3\u503c\u7684\u6307\u9488\u662f\u975e\u6cd5\u7684\uff0c\u5b83\u4eec\u4e0d\u4ec5\u4e00\u70b9\u7528\u4e5f\u6ca1\u6709\uff0c\u8fd8\u4f1a\u5bfc\u81f4\u4ee3\u7801\u9519\u8bef\u3002 \u6b64\u5904\u7684\u65b9\u6cd5\u6307\u9488\u8868\u662f\u901a\u8fc7\u8fd0\u884c\u65f6\u53cd\u5c04\u80fd\u529b\u6784\u5efa\u7684\u3002 \u7c7b\u578b\uff08\u6bd4\u5982\u7ed3\u6784\u4f53\uff09\u53ef\u4ee5\u5b9e\u73b0\u67d0\u4e2a\u63a5\u53e3\u7684\u65b9\u6cd5\u96c6\uff1b\u8fd9\u4e2a\u5b9e\u73b0\u53ef\u4ee5\u63cf\u8ff0\u4e3a\uff0c\u8be5\u7c7b\u578b\u7684\u53d8\u91cf\u4e0a\u7684\u6bcf\u4e00\u4e2a\u5177\u4f53\u65b9\u6cd5\u6240\u7ec4\u6210\u7684\u96c6\u5408\uff0c\u5305\u542b\u4e86\u8be5\u63a5\u53e3\u7684\u65b9\u6cd5\u96c6\u3002\u5b9e\u73b0\u4e86 Namer \u63a5\u53e3\u7684\u7c7b\u578b\u7684\u53d8\u91cf\u53ef\u4ee5\u8d4b\u503c\u7ed9 ai \uff08\u5373 receiver \u7684\u503c\uff09\uff0c\u65b9\u6cd5\u8868\u6307\u9488\uff08method table ptr\uff09\u5c31\u6307\u5411\u4e86\u5f53\u524d\u7684\u65b9\u6cd5\u5b9e\u73b0\u3002\u5f53\u53e6\u4e00\u4e2a\u5b9e\u73b0\u4e86 Namer \u63a5\u53e3\u7684\u7c7b\u578b\u7684\u53d8\u91cf\u88ab\u8d4b\u7ed9 ai \uff0c receiver \u7684\u503c\u548c\u65b9\u6cd5\u8868\u6307\u9488\u4e5f\u4f1a\u76f8\u5e94\u6539\u53d8\u3002 \u7c7b\u578b\u4e0d\u9700\u8981\u663e\u5f0f\u58f0\u660e\u5b83\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3\uff1a\u63a5\u53e3\u88ab\u9690\u5f0f\u5730\u5b9e\u73b0\u3002\u591a\u4e2a\u7c7b\u578b\u53ef\u4ee5\u5b9e\u73b0\u540c\u4e00\u4e2a\u63a5\u53e3 \u3002 \u5b9e\u73b0\u67d0\u4e2a\u63a5\u53e3\u7684\u7c7b\u578b\uff08\u9664\u4e86\u5b9e\u73b0\u63a5\u53e3\u65b9\u6cd5\u5916\uff09\u53ef\u4ee5\u6709\u5176\u4ed6\u7684\u65b9\u6cd5 \u3002 \u4e00\u4e2a\u7c7b\u578b\u53ef\u4ee5\u5b9e\u73b0\u591a\u4e2a\u63a5\u53e3 \u3002 \u63a5\u53e3\u7c7b\u578b\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u5b9e\u4f8b\u7684\u5f15\u7528\uff0c \u8be5\u5b9e\u4f8b\u7684\u7c7b\u578b\u5b9e\u73b0\u4e86\u6b64\u63a5\u53e3\uff08\u63a5\u53e3\u662f\u52a8\u6001\u7c7b\u578b\uff09 \u3002 \u5373\u4f7f\u63a5\u53e3\u5728\u7c7b\u578b\u4e4b\u540e\u624d\u5b9a\u4e49\uff0c\u4e8c\u8005\u5904\u4e8e\u4e0d\u540c\u7684\u5305\u4e2d\uff0c\u88ab\u5355\u72ec\u7f16\u8bd1\uff1a\u53ea\u8981\u7c7b\u578b\u5b9e\u73b0\u4e86\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5\uff0c\u5b83\u5c31\u5b9e\u73b0\u4e86\u6b64\u63a5\u53e3\u3002 \u6240\u6709\u8fd9\u4e9b\u7279\u6027\u4f7f\u5f97\u63a5\u53e3\u5177\u6709\u5f88\u5927\u7684\u7075\u6d3b\u6027\u3002 \u7b2c\u4e00\u4e2a\u4f8b\u5b50\uff1a \u793a\u4f8b 11.1 interfaces.go \uff1a package main import \"fmt\" type Shaper interface { Area () float32 } type Square struct { side float32 } func ( sq * Square ) Area () float32 { return sq . side * sq . side } func main () { sq1 := new ( Square ) sq1 . side = 5 var areaIntf Shaper areaIntf = sq1 // shorter,without separate declaration: // areaIntf := Shaper(sq1) // or even: // areaIntf := sq1 fmt . Printf ( \"The square has area: %f\\n\" , areaIntf . Area ()) } \u8f93\u51fa\uff1a The square has area: 25.000000 \u4e0a\u9762\u7684\u7a0b\u5e8f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53 Square \u548c\u4e00\u4e2a\u63a5\u53e3 Shaper \uff0c\u63a5\u53e3\u6709\u4e00\u4e2a\u65b9\u6cd5 Area() \u3002 \u5728 main() \u65b9\u6cd5\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a Square \u7684\u5b9e\u4f8b\u3002\u5728\u4e3b\u7a0b\u5e8f\u5916\u8fb9\u5b9a\u4e49\u4e86\u4e00\u4e2a\u63a5\u6536\u8005\u7c7b\u578b\u662f Square \u65b9\u6cd5\u7684 Area() \uff0c\u7528\u6765\u8ba1\u7b97\u6b63\u65b9\u5f62\u7684\u9762\u79ef\uff1a\u7ed3\u6784\u4f53 Square \u5b9e\u73b0\u4e86\u63a5\u53e3 Shaper \u3002 \u6240\u4ee5\u53ef\u4ee5\u5c06\u4e00\u4e2a Square \u7c7b\u578b\u7684\u53d8\u91cf\u8d4b\u503c\u7ed9\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u7684\u53d8\u91cf\uff1a areaIntf = sq1 \u3002 \u73b0\u5728\u63a5\u53e3\u53d8\u91cf\u5305\u542b\u4e00\u4e2a\u6307\u5411 Square \u53d8\u91cf\u7684\u5f15\u7528\uff0c\u901a\u8fc7\u5b83\u53ef\u4ee5\u8c03\u7528 Square \u4e0a\u7684\u65b9\u6cd5 Area() \u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728 Square \u7684\u5b9e\u4f8b\u4e0a\u8c03\u7528\u6b64\u65b9\u6cd5\uff0c\u4f46\u662f\u5728\u63a5\u53e3\u5b9e\u4f8b\u4e0a\u8c03\u7528\u6b64\u65b9\u6cd5\u66f4\u4ee4\u4eba\u5174\u594b\uff0c\u5b83\u4f7f\u6b64\u65b9\u6cd5\u66f4\u5177\u6709\u4e00\u822c\u6027\u3002\u63a5\u53e3\u53d8\u91cf\u91cc\u5305\u542b\u4e86\u63a5\u6536\u8005\u5b9e\u4f8b\u7684\u503c\u548c\u6307\u5411\u5bf9\u5e94\u65b9\u6cd5\u8868\u7684\u6307\u9488\u3002 \u8fd9\u662f \u591a\u6001 \u7684 Go \u7248\u672c\uff0c\u591a\u6001\u662f\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e2d\u4e00\u4e2a\u5e7f\u4e3a\u4eba\u77e5\u7684\u6982\u5ff5\uff1a\u6839\u636e\u5f53\u524d\u7684\u7c7b\u578b\u9009\u62e9\u6b63\u786e\u7684\u65b9\u6cd5\uff0c\u6216\u8005\u8bf4\uff1a\u540c\u4e00\u79cd\u7c7b\u578b\u5728\u4e0d\u540c\u7684\u5b9e\u4f8b\u4e0a\u4f3c\u4e4e\u8868\u73b0\u51fa\u4e0d\u540c\u7684\u884c\u4e3a\u3002 \u5982\u679c Square \u6ca1\u6709\u5b9e\u73b0 Area() \u65b9\u6cd5\uff0c\u7f16\u8bd1\u5668\u5c06\u4f1a\u7ed9\u51fa\u6e05\u6670\u7684\u9519\u8bef\u4fe1\u606f\uff1a cannot use sq1 (type *Square) as type Shaper in assignment: *Square does not implement Shaper (missing Area method) \u5982\u679c Shaper \u6709\u53e6\u5916\u4e00\u4e2a\u65b9\u6cd5 Perimeter() \uff0c\u4f46\u662f Square \u6ca1\u6709\u5b9e\u73b0\u5b83\uff0c\u5373\u4f7f\u6ca1\u6709\u4eba\u5728 Square \u5b9e\u4f8b\u4e0a\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u7f16\u8bd1\u5668\u4e5f\u4f1a\u7ed9\u51fa\u4e0a\u9762\u540c\u6837\u7684\u9519\u8bef\u3002 \u6269\u5c55\u4e00\u4e0b\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u7c7b\u578b Rectangle \u4e5f\u5b9e\u73b0\u4e86 Shaper \u63a5\u53e3\u3002\u63a5\u7740\u521b\u5efa\u4e00\u4e2a Shaper \u7c7b\u578b\u7684\u6570\u7ec4\uff0c\u8fed\u4ee3\u5b83\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u5e76\u5728\u4e0a\u9762\u8c03\u7528 Area() \u65b9\u6cd5\uff0c\u4ee5\u6b64\u6765\u5c55\u793a\u591a\u6001\u884c\u4e3a\uff1a \u793a\u4f8b 11.2 interfaces_poly.go \uff1a package main import \"fmt\" type Shaper interface { Area () float32 } type Square struct { side float32 } func ( sq * Square ) Area () float32 { return sq . side * sq . side } type Rectangle struct { length , width float32 } func ( r Rectangle ) Area () float32 { return r . length * r . width } func main () { r := Rectangle { 5 , 3 } // Area() of Rectangle needs a value q := & Square { 5 } // Area() of Square needs a pointer // shapes := []Shaper{Shaper(r), Shaper(q)} // or shorter shapes := [] Shaper { r , q } fmt . Println ( \"Looping through shapes for area ...\" ) for n , _ := range shapes { fmt . Println ( \"Shape details: \" , shapes [ n ]) fmt . Println ( \"Area of this shape is: \" , shapes [ n ]. Area ()) } } \u8f93\u51fa\uff1a Looping through shapes for area ... Shape details: {5 3} Area of this shape is: 15 Shape details: &{5} Area of this shape is: 25 \u5728\u8c03\u7528 shapes[n].Area() \u8fd9\u4e2a\u65f6\uff0c\u53ea\u77e5\u9053 shapes[n] \u662f\u4e00\u4e2a Shaper \u5bf9\u8c61\uff0c\u6700\u540e\u5b83\u6447\u8eab\u4e00\u53d8\u6210\u4e3a\u4e86\u4e00\u4e2a Square \u6216 Rectangle \u5bf9\u8c61\uff0c\u5e76\u4e14\u8868\u73b0\u51fa\u4e86\u76f8\u5bf9\u5e94\u7684\u884c\u4e3a\u3002 \u4e5f\u8bb8\u4ece\u73b0\u5728\u5f00\u59cb\u4f60\u5c06\u770b\u5230\u901a\u8fc7\u63a5\u53e3\u5982\u4f55\u4ea7\u751f \u66f4\u5e72\u51c0 \u3001 \u66f4\u7b80\u5355 \u53ca \u66f4\u5177\u6709\u6269\u5c55\u6027 \u7684\u4ee3\u7801\u3002\u5728 11.12.3 \u4e2d\u5c06\u770b\u5230\u5728\u5f00\u53d1\u4e2d\u4e3a\u7c7b\u578b\u6dfb\u52a0\u65b0\u7684\u63a5\u53e3\u662f\u591a\u4e48\u7684\u5bb9\u6613\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u66f4\u5177\u4f53\u7684\u4f8b\u5b50\uff1a\u6709\u4e24\u4e2a\u7c7b\u578b stockPosition \u548c car \uff0c\u5b83\u4eec\u90fd\u6709\u4e00\u4e2a getValue() \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u5177\u6709\u6b64\u65b9\u6cd5\u7684\u63a5\u53e3 valuable \u3002\u63a5\u7740\u5b9a\u4e49\u4e00\u4e2a\u4f7f\u7528 valuable \u7c7b\u578b\u4f5c\u4e3a\u53c2\u6570\u7684\u51fd\u6570 showValue() \uff0c\u6240\u6709\u5b9e\u73b0\u4e86 valuable \u63a5\u53e3\u7684\u7c7b\u578b\u90fd\u53ef\u4ee5\u7528\u8fd9\u4e2a\u51fd\u6570\u3002 \u793a\u4f8b 11.3 valuable.go \uff1a package main import \"fmt\" type stockPosition struct { ticker string sharePrice float32 count float32 } /* method to determine the value of a stock position */ func ( s stockPosition ) getValue () float32 { return s . sharePrice * s . count } type car struct { make string model string price float32 } /* method to determine the value of a car */ func ( c car ) getValue () float32 { return c . price } /* contract that defines different things that have value */ type valuable interface { getValue () float32 } func showValue ( asset valuable ) { fmt . Printf ( \"Value of the asset is %f\\n\" , asset . getValue ()) } func main () { var o valuable = stockPosition { \"GOOG\" , 577.20 , 4 } showValue ( o ) o = car { \"BMW\" , \"M3\" , 66500 } showValue ( o ) } \u8f93\u51fa\uff1a Value of the asset is 2308.800049 Value of the asset is 66500.000000 \u4e00\u4e2a\u6807\u51c6\u5e93\u7684\u4f8b\u5b50 io \u5305\u91cc\u6709\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b Reader : type Reader interface { Read ( p [] byte ) ( n int , err error ) } \u5b9a\u4e49\u53d8\u91cf r \uff1a var r io.Reader \u90a3\u4e48\u5c31\u53ef\u4ee5\u5199\u5982\u4e0b\u7684\u4ee3\u7801\uff1a var r io . Reader r = os . Stdin // see 12.1 r = bufio . NewReader ( r ) r = new ( bytes . Buffer ) f , _ := os . Open ( \"test.txt\" ) r = bufio . NewReader ( f ) \u4e0a\u9762 r \u53f3\u8fb9\u7684\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86 Read() \u65b9\u6cd5\uff0c\u5e76\u4e14\u6709\u76f8\u540c\u7684\u65b9\u6cd5\u7b7e\u540d\uff0c r \u7684\u9759\u6001\u7c7b\u578b\u662f io.Reader \u3002 \u5907\u6ce8 \u6709\u7684\u65f6\u5019\uff0c\u4e5f\u4f1a\u4ee5\u4e00\u79cd\u7a0d\u5fae\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u4f7f\u7528\u63a5\u53e3\u8fd9\u4e2a\u8bcd\uff1a\u4ece\u67d0\u4e2a\u7c7b\u578b\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u5b83\u7684\u63a5\u53e3\u6307\u7684\u662f\uff1a\u5b83\u7684\u6240\u6709\u5bfc\u51fa\u65b9\u6cd5\uff0c\u53ea\u4e0d\u8fc7\u6ca1\u6709\u663e\u5f0f\u5730\u4e3a\u8fd9\u4e9b\u5bfc\u51fa\u65b9\u6cd5\u989d\u5916\u5b9a\u4e00\u4e2a\u63a5\u53e3\u800c\u5df2\u3002 \u7ec3\u4e60 11.1 simple_interface.go \uff1a \u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3 Simpler \uff0c\u5b83\u6709\u4e00\u4e2a Get() \u65b9\u6cd5\u548c\u4e00\u4e2a Set() \uff0c Get() \u8fd4\u56de\u4e00\u4e2a\u6574\u578b\u503c\uff0c Set() \u6709\u4e00\u4e2a\u6574\u578b\u53c2\u6570\u3002\u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b Simple \u5b9e\u73b0\u8fd9\u4e2a\u63a5\u53e3\u3002 \u63a5\u7740\u5b9a\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u6709\u4e00\u4e2a Simpler \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u8c03\u7528\u53c2\u6570\u7684 Get() \u548c Set() \u65b9\u6cd5\u3002\u5728 main \u51fd\u6570\u91cc\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c\u770b\u770b\u5b83\u662f\u5426\u53ef\u4ee5\u6b63\u786e\u8fd0\u884c\u3002 \u7ec3\u4e60 11.2 interfaces_poly2.go \uff1a a) \u6269\u5c55 interfaces_poly.go \u4e2d\u7684\u4f8b\u5b50\uff0c\u6dfb\u52a0\u4e00\u4e2a Circle \u7c7b\u578b b) \u4f7f\u7528\u4e00\u4e2a\u62bd\u8c61\u7c7b\u578b Shape \uff08\u6ca1\u6709\u5b57\u6bb5\uff09 \u5b9e\u73b0\u540c\u6837\u7684\u529f\u80fd\uff0c\u5b83\u5b9e\u73b0\u63a5\u53e3 Shaper \uff0c\u7136\u540e\u5728\u5176\u4ed6\u7c7b\u578b\u91cc\u5185\u5d4c\u6b64\u7c7b\u578b\u3002\u6269\u5c55 10.6.5 \u4e2d\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u8986\u5199\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u63a5\u53e3 (Interfaces) \u4e0e\u53cd\u5c04 (reflection) \u4e0b\u4e00\u8282\uff1a \u63a5\u53e3\u5d4c\u5957\u63a5\u53e3","title":"11.1 \u63a5\u53e3\u662f\u4ec0\u4e48"},{"location":"11.1/#111","text":"Go \u8bed\u8a00\u4e0d\u662f\u4e00\u79cd \u201c\u4f20\u7edf\u201d \u7684\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8bed\u8a00\uff1a\u5b83\u91cc\u9762\u6ca1\u6709\u7c7b\u548c\u7ee7\u627f\u7684\u6982\u5ff5\u3002 \u4f46\u662f Go \u8bed\u8a00\u91cc\u6709\u975e\u5e38\u7075\u6d3b\u7684 \u63a5\u53e3 \u6982\u5ff5\uff0c\u901a\u8fc7\u5b83\u53ef\u4ee5\u5b9e\u73b0\u5f88\u591a\u9762\u5411\u5bf9\u8c61\u7684\u7279\u6027\u3002\u63a5\u53e3\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u5f0f\u6765 \u8bf4\u660e \u5bf9\u8c61\u7684\u884c\u4e3a\uff1a\u5982\u679c\u8c01\u80fd\u641e\u5b9a\u8fd9\u4ef6\u4e8b\uff0c\u5b83\u5c31\u53ef\u4ee5\u7528\u5728\u8fd9\u513f\u3002 \u63a5\u53e3\u5b9a\u4e49\u4e86\u4e00\u7ec4\u65b9\u6cd5\uff08\u65b9\u6cd5\u96c6\uff09\uff0c\u4f46\u662f\u8fd9\u4e9b\u65b9\u6cd5\u4e0d\u5305\u542b\uff08\u5b9e\u73b0\uff09\u4ee3\u7801\uff1a\u5b83\u4eec\u6ca1\u6709\u88ab\u5b9e\u73b0\uff08\u5b83\u4eec\u662f\u62bd\u8c61\u7684\uff09\u3002\u63a5\u53e3\u91cc\u4e5f\u4e0d\u80fd\u5305\u542b\u53d8\u91cf\u3002 \u901a\u8fc7\u5982\u4e0b\u683c\u5f0f\u5b9a\u4e49\u63a5\u53e3\uff1a type Namer interface { Method1 ( param_list ) return_type Method2 ( param_list ) return_type ... } \u4e0a\u9762\u7684 Namer \u662f\u4e00\u4e2a \u63a5\u53e3\u7c7b\u578b \u3002 \uff08\u6309\u7167\u7ea6\u5b9a\uff0c\u53ea\u5305\u542b\u4e00\u4e2a\u65b9\u6cd5\u7684\uff09\u63a5\u53e3\u7684\u540d\u5b57\u7531\u65b9\u6cd5\u540d\u52a0 er \u540e\u7f00\u7ec4\u6210\uff0c\u4f8b\u5982 Printer \u3001 Reader \u3001 Writer \u3001 Logger \u3001 Converter \u7b49\u7b49\u3002\u8fd8\u6709\u4e00\u4e9b\u4e0d\u5e38\u7528\u7684\u65b9\u5f0f\uff08\u5f53\u540e\u7f00 er \u4e0d\u5408\u9002\u65f6\uff09\uff0c\u6bd4\u5982 Recoverable \uff0c\u6b64\u65f6\u63a5\u53e3\u540d\u4ee5 able \u7ed3\u5c3e\uff0c\u6216\u8005\u4ee5 I \u5f00\u5934\uff08\u50cf .NET \u6216 Java \u4e2d\u90a3\u6837\uff09\u3002 Go \u8bed\u8a00\u4e2d\u7684\u63a5\u53e3\u90fd\u5f88\u7b80\u77ed\uff0c\u901a\u5e38\u5b83\u4eec\u4f1a\u5305\u542b 0 \u4e2a\u3001\u6700\u591a 3 \u4e2a\u65b9\u6cd5\u3002 \u4e0d\u50cf\u5927\u591a\u6570\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8bed\u8a00\uff0c\u5728 Go \u8bed\u8a00\u4e2d\u63a5\u53e3\u53ef\u4ee5\u6709\u503c\uff0c\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u7684\u53d8\u91cf\u6216\u4e00\u4e2a \u63a5\u53e3\u503c \uff1a var ai Namer \uff0c ai \u662f\u4e00\u4e2a\u591a\u5b57\uff08multiword\uff09\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u7684\u503c\u662f nil \u3002\u5b83\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u867d\u7136\u4e0d\u5b8c\u5168\u662f\u4e00\u56de\u4e8b\u3002\u6307\u5411\u63a5\u53e3\u503c\u7684\u6307\u9488\u662f\u975e\u6cd5\u7684\uff0c\u5b83\u4eec\u4e0d\u4ec5\u4e00\u70b9\u7528\u4e5f\u6ca1\u6709\uff0c\u8fd8\u4f1a\u5bfc\u81f4\u4ee3\u7801\u9519\u8bef\u3002 \u6b64\u5904\u7684\u65b9\u6cd5\u6307\u9488\u8868\u662f\u901a\u8fc7\u8fd0\u884c\u65f6\u53cd\u5c04\u80fd\u529b\u6784\u5efa\u7684\u3002 \u7c7b\u578b\uff08\u6bd4\u5982\u7ed3\u6784\u4f53\uff09\u53ef\u4ee5\u5b9e\u73b0\u67d0\u4e2a\u63a5\u53e3\u7684\u65b9\u6cd5\u96c6\uff1b\u8fd9\u4e2a\u5b9e\u73b0\u53ef\u4ee5\u63cf\u8ff0\u4e3a\uff0c\u8be5\u7c7b\u578b\u7684\u53d8\u91cf\u4e0a\u7684\u6bcf\u4e00\u4e2a\u5177\u4f53\u65b9\u6cd5\u6240\u7ec4\u6210\u7684\u96c6\u5408\uff0c\u5305\u542b\u4e86\u8be5\u63a5\u53e3\u7684\u65b9\u6cd5\u96c6\u3002\u5b9e\u73b0\u4e86 Namer \u63a5\u53e3\u7684\u7c7b\u578b\u7684\u53d8\u91cf\u53ef\u4ee5\u8d4b\u503c\u7ed9 ai \uff08\u5373 receiver \u7684\u503c\uff09\uff0c\u65b9\u6cd5\u8868\u6307\u9488\uff08method table ptr\uff09\u5c31\u6307\u5411\u4e86\u5f53\u524d\u7684\u65b9\u6cd5\u5b9e\u73b0\u3002\u5f53\u53e6\u4e00\u4e2a\u5b9e\u73b0\u4e86 Namer \u63a5\u53e3\u7684\u7c7b\u578b\u7684\u53d8\u91cf\u88ab\u8d4b\u7ed9 ai \uff0c receiver \u7684\u503c\u548c\u65b9\u6cd5\u8868\u6307\u9488\u4e5f\u4f1a\u76f8\u5e94\u6539\u53d8\u3002 \u7c7b\u578b\u4e0d\u9700\u8981\u663e\u5f0f\u58f0\u660e\u5b83\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3\uff1a\u63a5\u53e3\u88ab\u9690\u5f0f\u5730\u5b9e\u73b0\u3002\u591a\u4e2a\u7c7b\u578b\u53ef\u4ee5\u5b9e\u73b0\u540c\u4e00\u4e2a\u63a5\u53e3 \u3002 \u5b9e\u73b0\u67d0\u4e2a\u63a5\u53e3\u7684\u7c7b\u578b\uff08\u9664\u4e86\u5b9e\u73b0\u63a5\u53e3\u65b9\u6cd5\u5916\uff09\u53ef\u4ee5\u6709\u5176\u4ed6\u7684\u65b9\u6cd5 \u3002 \u4e00\u4e2a\u7c7b\u578b\u53ef\u4ee5\u5b9e\u73b0\u591a\u4e2a\u63a5\u53e3 \u3002 \u63a5\u53e3\u7c7b\u578b\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u5b9e\u4f8b\u7684\u5f15\u7528\uff0c \u8be5\u5b9e\u4f8b\u7684\u7c7b\u578b\u5b9e\u73b0\u4e86\u6b64\u63a5\u53e3\uff08\u63a5\u53e3\u662f\u52a8\u6001\u7c7b\u578b\uff09 \u3002 \u5373\u4f7f\u63a5\u53e3\u5728\u7c7b\u578b\u4e4b\u540e\u624d\u5b9a\u4e49\uff0c\u4e8c\u8005\u5904\u4e8e\u4e0d\u540c\u7684\u5305\u4e2d\uff0c\u88ab\u5355\u72ec\u7f16\u8bd1\uff1a\u53ea\u8981\u7c7b\u578b\u5b9e\u73b0\u4e86\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5\uff0c\u5b83\u5c31\u5b9e\u73b0\u4e86\u6b64\u63a5\u53e3\u3002 \u6240\u6709\u8fd9\u4e9b\u7279\u6027\u4f7f\u5f97\u63a5\u53e3\u5177\u6709\u5f88\u5927\u7684\u7075\u6d3b\u6027\u3002 \u7b2c\u4e00\u4e2a\u4f8b\u5b50\uff1a \u793a\u4f8b 11.1 interfaces.go \uff1a package main import \"fmt\" type Shaper interface { Area () float32 } type Square struct { side float32 } func ( sq * Square ) Area () float32 { return sq . side * sq . side } func main () { sq1 := new ( Square ) sq1 . side = 5 var areaIntf Shaper areaIntf = sq1 // shorter,without separate declaration: // areaIntf := Shaper(sq1) // or even: // areaIntf := sq1 fmt . Printf ( \"The square has area: %f\\n\" , areaIntf . Area ()) } \u8f93\u51fa\uff1a The square has area: 25.000000 \u4e0a\u9762\u7684\u7a0b\u5e8f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53 Square \u548c\u4e00\u4e2a\u63a5\u53e3 Shaper \uff0c\u63a5\u53e3\u6709\u4e00\u4e2a\u65b9\u6cd5 Area() \u3002 \u5728 main() \u65b9\u6cd5\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a Square \u7684\u5b9e\u4f8b\u3002\u5728\u4e3b\u7a0b\u5e8f\u5916\u8fb9\u5b9a\u4e49\u4e86\u4e00\u4e2a\u63a5\u6536\u8005\u7c7b\u578b\u662f Square \u65b9\u6cd5\u7684 Area() \uff0c\u7528\u6765\u8ba1\u7b97\u6b63\u65b9\u5f62\u7684\u9762\u79ef\uff1a\u7ed3\u6784\u4f53 Square \u5b9e\u73b0\u4e86\u63a5\u53e3 Shaper \u3002 \u6240\u4ee5\u53ef\u4ee5\u5c06\u4e00\u4e2a Square \u7c7b\u578b\u7684\u53d8\u91cf\u8d4b\u503c\u7ed9\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u7684\u53d8\u91cf\uff1a areaIntf = sq1 \u3002 \u73b0\u5728\u63a5\u53e3\u53d8\u91cf\u5305\u542b\u4e00\u4e2a\u6307\u5411 Square \u53d8\u91cf\u7684\u5f15\u7528\uff0c\u901a\u8fc7\u5b83\u53ef\u4ee5\u8c03\u7528 Square \u4e0a\u7684\u65b9\u6cd5 Area() \u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728 Square \u7684\u5b9e\u4f8b\u4e0a\u8c03\u7528\u6b64\u65b9\u6cd5\uff0c\u4f46\u662f\u5728\u63a5\u53e3\u5b9e\u4f8b\u4e0a\u8c03\u7528\u6b64\u65b9\u6cd5\u66f4\u4ee4\u4eba\u5174\u594b\uff0c\u5b83\u4f7f\u6b64\u65b9\u6cd5\u66f4\u5177\u6709\u4e00\u822c\u6027\u3002\u63a5\u53e3\u53d8\u91cf\u91cc\u5305\u542b\u4e86\u63a5\u6536\u8005\u5b9e\u4f8b\u7684\u503c\u548c\u6307\u5411\u5bf9\u5e94\u65b9\u6cd5\u8868\u7684\u6307\u9488\u3002 \u8fd9\u662f \u591a\u6001 \u7684 Go \u7248\u672c\uff0c\u591a\u6001\u662f\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e2d\u4e00\u4e2a\u5e7f\u4e3a\u4eba\u77e5\u7684\u6982\u5ff5\uff1a\u6839\u636e\u5f53\u524d\u7684\u7c7b\u578b\u9009\u62e9\u6b63\u786e\u7684\u65b9\u6cd5\uff0c\u6216\u8005\u8bf4\uff1a\u540c\u4e00\u79cd\u7c7b\u578b\u5728\u4e0d\u540c\u7684\u5b9e\u4f8b\u4e0a\u4f3c\u4e4e\u8868\u73b0\u51fa\u4e0d\u540c\u7684\u884c\u4e3a\u3002 \u5982\u679c Square \u6ca1\u6709\u5b9e\u73b0 Area() \u65b9\u6cd5\uff0c\u7f16\u8bd1\u5668\u5c06\u4f1a\u7ed9\u51fa\u6e05\u6670\u7684\u9519\u8bef\u4fe1\u606f\uff1a cannot use sq1 (type *Square) as type Shaper in assignment: *Square does not implement Shaper (missing Area method) \u5982\u679c Shaper \u6709\u53e6\u5916\u4e00\u4e2a\u65b9\u6cd5 Perimeter() \uff0c\u4f46\u662f Square \u6ca1\u6709\u5b9e\u73b0\u5b83\uff0c\u5373\u4f7f\u6ca1\u6709\u4eba\u5728 Square \u5b9e\u4f8b\u4e0a\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u7f16\u8bd1\u5668\u4e5f\u4f1a\u7ed9\u51fa\u4e0a\u9762\u540c\u6837\u7684\u9519\u8bef\u3002 \u6269\u5c55\u4e00\u4e0b\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u7c7b\u578b Rectangle \u4e5f\u5b9e\u73b0\u4e86 Shaper \u63a5\u53e3\u3002\u63a5\u7740\u521b\u5efa\u4e00\u4e2a Shaper \u7c7b\u578b\u7684\u6570\u7ec4\uff0c\u8fed\u4ee3\u5b83\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u5e76\u5728\u4e0a\u9762\u8c03\u7528 Area() \u65b9\u6cd5\uff0c\u4ee5\u6b64\u6765\u5c55\u793a\u591a\u6001\u884c\u4e3a\uff1a \u793a\u4f8b 11.2 interfaces_poly.go \uff1a package main import \"fmt\" type Shaper interface { Area () float32 } type Square struct { side float32 } func ( sq * Square ) Area () float32 { return sq . side * sq . side } type Rectangle struct { length , width float32 } func ( r Rectangle ) Area () float32 { return r . length * r . width } func main () { r := Rectangle { 5 , 3 } // Area() of Rectangle needs a value q := & Square { 5 } // Area() of Square needs a pointer // shapes := []Shaper{Shaper(r), Shaper(q)} // or shorter shapes := [] Shaper { r , q } fmt . Println ( \"Looping through shapes for area ...\" ) for n , _ := range shapes { fmt . Println ( \"Shape details: \" , shapes [ n ]) fmt . Println ( \"Area of this shape is: \" , shapes [ n ]. Area ()) } } \u8f93\u51fa\uff1a Looping through shapes for area ... Shape details: {5 3} Area of this shape is: 15 Shape details: &{5} Area of this shape is: 25 \u5728\u8c03\u7528 shapes[n].Area() \u8fd9\u4e2a\u65f6\uff0c\u53ea\u77e5\u9053 shapes[n] \u662f\u4e00\u4e2a Shaper \u5bf9\u8c61\uff0c\u6700\u540e\u5b83\u6447\u8eab\u4e00\u53d8\u6210\u4e3a\u4e86\u4e00\u4e2a Square \u6216 Rectangle \u5bf9\u8c61\uff0c\u5e76\u4e14\u8868\u73b0\u51fa\u4e86\u76f8\u5bf9\u5e94\u7684\u884c\u4e3a\u3002 \u4e5f\u8bb8\u4ece\u73b0\u5728\u5f00\u59cb\u4f60\u5c06\u770b\u5230\u901a\u8fc7\u63a5\u53e3\u5982\u4f55\u4ea7\u751f \u66f4\u5e72\u51c0 \u3001 \u66f4\u7b80\u5355 \u53ca \u66f4\u5177\u6709\u6269\u5c55\u6027 \u7684\u4ee3\u7801\u3002\u5728 11.12.3 \u4e2d\u5c06\u770b\u5230\u5728\u5f00\u53d1\u4e2d\u4e3a\u7c7b\u578b\u6dfb\u52a0\u65b0\u7684\u63a5\u53e3\u662f\u591a\u4e48\u7684\u5bb9\u6613\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u66f4\u5177\u4f53\u7684\u4f8b\u5b50\uff1a\u6709\u4e24\u4e2a\u7c7b\u578b stockPosition \u548c car \uff0c\u5b83\u4eec\u90fd\u6709\u4e00\u4e2a getValue() \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u5177\u6709\u6b64\u65b9\u6cd5\u7684\u63a5\u53e3 valuable \u3002\u63a5\u7740\u5b9a\u4e49\u4e00\u4e2a\u4f7f\u7528 valuable \u7c7b\u578b\u4f5c\u4e3a\u53c2\u6570\u7684\u51fd\u6570 showValue() \uff0c\u6240\u6709\u5b9e\u73b0\u4e86 valuable \u63a5\u53e3\u7684\u7c7b\u578b\u90fd\u53ef\u4ee5\u7528\u8fd9\u4e2a\u51fd\u6570\u3002 \u793a\u4f8b 11.3 valuable.go \uff1a package main import \"fmt\" type stockPosition struct { ticker string sharePrice float32 count float32 } /* method to determine the value of a stock position */ func ( s stockPosition ) getValue () float32 { return s . sharePrice * s . count } type car struct { make string model string price float32 } /* method to determine the value of a car */ func ( c car ) getValue () float32 { return c . price } /* contract that defines different things that have value */ type valuable interface { getValue () float32 } func showValue ( asset valuable ) { fmt . Printf ( \"Value of the asset is %f\\n\" , asset . getValue ()) } func main () { var o valuable = stockPosition { \"GOOG\" , 577.20 , 4 } showValue ( o ) o = car { \"BMW\" , \"M3\" , 66500 } showValue ( o ) } \u8f93\u51fa\uff1a Value of the asset is 2308.800049 Value of the asset is 66500.000000 \u4e00\u4e2a\u6807\u51c6\u5e93\u7684\u4f8b\u5b50 io \u5305\u91cc\u6709\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b Reader : type Reader interface { Read ( p [] byte ) ( n int , err error ) } \u5b9a\u4e49\u53d8\u91cf r \uff1a var r io.Reader \u90a3\u4e48\u5c31\u53ef\u4ee5\u5199\u5982\u4e0b\u7684\u4ee3\u7801\uff1a var r io . Reader r = os . Stdin // see 12.1 r = bufio . NewReader ( r ) r = new ( bytes . Buffer ) f , _ := os . Open ( \"test.txt\" ) r = bufio . NewReader ( f ) \u4e0a\u9762 r \u53f3\u8fb9\u7684\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86 Read() \u65b9\u6cd5\uff0c\u5e76\u4e14\u6709\u76f8\u540c\u7684\u65b9\u6cd5\u7b7e\u540d\uff0c r \u7684\u9759\u6001\u7c7b\u578b\u662f io.Reader \u3002 \u5907\u6ce8 \u6709\u7684\u65f6\u5019\uff0c\u4e5f\u4f1a\u4ee5\u4e00\u79cd\u7a0d\u5fae\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u4f7f\u7528\u63a5\u53e3\u8fd9\u4e2a\u8bcd\uff1a\u4ece\u67d0\u4e2a\u7c7b\u578b\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u5b83\u7684\u63a5\u53e3\u6307\u7684\u662f\uff1a\u5b83\u7684\u6240\u6709\u5bfc\u51fa\u65b9\u6cd5\uff0c\u53ea\u4e0d\u8fc7\u6ca1\u6709\u663e\u5f0f\u5730\u4e3a\u8fd9\u4e9b\u5bfc\u51fa\u65b9\u6cd5\u989d\u5916\u5b9a\u4e00\u4e2a\u63a5\u53e3\u800c\u5df2\u3002 \u7ec3\u4e60 11.1 simple_interface.go \uff1a \u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3 Simpler \uff0c\u5b83\u6709\u4e00\u4e2a Get() \u65b9\u6cd5\u548c\u4e00\u4e2a Set() \uff0c Get() \u8fd4\u56de\u4e00\u4e2a\u6574\u578b\u503c\uff0c Set() \u6709\u4e00\u4e2a\u6574\u578b\u53c2\u6570\u3002\u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b Simple \u5b9e\u73b0\u8fd9\u4e2a\u63a5\u53e3\u3002 \u63a5\u7740\u5b9a\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u6709\u4e00\u4e2a Simpler \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u8c03\u7528\u53c2\u6570\u7684 Get() \u548c Set() \u65b9\u6cd5\u3002\u5728 main \u51fd\u6570\u91cc\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c\u770b\u770b\u5b83\u662f\u5426\u53ef\u4ee5\u6b63\u786e\u8fd0\u884c\u3002 \u7ec3\u4e60 11.2 interfaces_poly2.go \uff1a a) \u6269\u5c55 interfaces_poly.go \u4e2d\u7684\u4f8b\u5b50\uff0c\u6dfb\u52a0\u4e00\u4e2a Circle \u7c7b\u578b b) \u4f7f\u7528\u4e00\u4e2a\u62bd\u8c61\u7c7b\u578b Shape \uff08\u6ca1\u6709\u5b57\u6bb5\uff09 \u5b9e\u73b0\u540c\u6837\u7684\u529f\u80fd\uff0c\u5b83\u5b9e\u73b0\u63a5\u53e3 Shaper \uff0c\u7136\u540e\u5728\u5176\u4ed6\u7c7b\u578b\u91cc\u5185\u5d4c\u6b64\u7c7b\u578b\u3002\u6269\u5c55 10.6.5 \u4e2d\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u8986\u5199\u3002","title":"11.1 \u63a5\u53e3\u662f\u4ec0\u4e48"},{"location":"11.1/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u63a5\u53e3 (Interfaces) \u4e0e\u53cd\u5c04 (reflection) \u4e0b\u4e00\u8282\uff1a \u63a5\u53e3\u5d4c\u5957\u63a5\u53e3","title":"\u94fe\u63a5"},{"location":"11.10/","text":"11.10 \u53cd\u5c04\u5305 \u00b6 11.10.1 \u65b9\u6cd5\u548c\u7c7b\u578b\u7684\u53cd\u5c04 \u00b6 \u5728 10.4 \u8282\u6211\u4eec\u770b\u5230\u53ef\u4ee5\u901a\u8fc7\u53cd\u5c04\u6765\u5206\u6790\u4e00\u4e2a\u7ed3\u6784\u4f53\u3002\u672c\u8282\u6211\u4eec\u8fdb\u4e00\u6b65\u63a2\u8ba8\u5f3a\u5927\u7684\u53cd\u5c04\u529f\u80fd\u3002\u53cd\u5c04\u662f\u7528\u7a0b\u5e8f\u68c0\u67e5\u5176\u6240\u62e5\u6709\u7684\u7ed3\u6784\uff0c\u5c24\u5176\u662f\u7c7b\u578b\u7684\u4e00\u79cd\u80fd\u529b\uff1b\u8fd9\u662f\u5143\u7f16\u7a0b\u7684\u4e00\u79cd\u5f62\u5f0f\u3002\u53cd\u5c04\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u68c0\u67e5\u7c7b\u578b\u548c\u53d8\u91cf\uff0c\u4f8b\u5982\uff1a\u5b83\u7684\u5927\u5c0f\u3001\u5b83\u7684\u65b9\u6cd5\u4ee5\u53ca\u5b83\u80fd\u201c\u52a8\u6001\u5730\u201d\u8c03\u7528\u8fd9\u4e9b\u65b9\u6cd5\u3002\u8fd9\u5bf9\u4e8e\u6ca1\u6709\u6e90\u4ee3\u7801\u7684\u5305\u5c24\u5176\u6709\u7528\u3002\u8fd9\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u5de5\u5177\uff0c\u9664\u975e\u771f\u5f97\u6709\u5fc5\u8981\uff0c\u5426\u5219\u5e94\u5f53\u907f\u514d\u4f7f\u7528\u6216\u5c0f\u5fc3\u4f7f\u7528\u3002 \u53d8\u91cf\u7684\u6700\u57fa\u672c\u4fe1\u606f\u5c31\u662f\u7c7b\u578b\u548c\u503c\uff1a\u53cd\u5c04\u5305\u7684 Type \u7528\u6765\u8868\u793a\u4e00\u4e2a Go \u7c7b\u578b\uff0c\u53cd\u5c04\u5305\u7684 Value \u4e3a Go \u503c\u63d0\u4f9b\u4e86\u53cd\u5c04\u63a5\u53e3\u3002 \u4e24\u4e2a\u7b80\u5355\u7684\u51fd\u6570\uff0c reflect.TypeOf \u548c reflect.ValueOf \uff0c\u8fd4\u56de\u88ab\u68c0\u67e5\u5bf9\u8c61\u7684\u7c7b\u578b\u548c\u503c\u3002\u4f8b\u5982\uff0cx \u88ab\u5b9a\u4e49\u4e3a\uff1a var x float64 = 3.4 \uff0c\u90a3\u4e48 reflect.TypeOf(x) \u8fd4\u56de float64 \uff0c reflect.ValueOf(x) \u8fd4\u56de <float64 Value> \u5b9e\u9645\u4e0a\uff0c\u53cd\u5c04\u662f\u901a\u8fc7\u68c0\u67e5\u4e00\u4e2a\u63a5\u53e3\u7684\u503c\uff0c\u53d8\u91cf\u9996\u5148\u88ab\u8f6c\u6362\u6210\u7a7a\u63a5\u53e3\u3002\u8fd9\u4ece\u4e0b\u9762\u4e24\u4e2a\u51fd\u6570\u7b7e\u540d\u80fd\u591f\u5f88\u660e\u663e\u7684\u770b\u51fa\u6765\uff1a func TypeOf ( i interface {}) Type func ValueOf ( i interface {}) Value \u63a5\u53e3\u7684\u503c\u5305\u542b\u4e00\u4e2a type \u548c value\u3002 \u53cd\u5c04\u53ef\u4ee5\u4ece\u63a5\u53e3\u503c\u53cd\u5c04\u5230\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u4ece\u5bf9\u8c61\u53cd\u5c04\u56de\u63a5\u53e3\u503c\u3002 reflect.Type \u548c reflect.Value \u90fd\u6709\u8bb8\u591a\u65b9\u6cd5\u7528\u4e8e\u68c0\u67e5\u548c\u64cd\u4f5c\u5b83\u4eec\u3002\u4e00\u4e2a\u91cd\u8981\u7684\u4f8b\u5b50\u662f Value \u6709\u4e00\u4e2a Type() \u65b9\u6cd5\u8fd4\u56de reflect.Value \u7684 Type \u7c7b\u578b\u3002\u53e6\u4e00\u4e2a\u662f Type \u548c Value \u90fd\u6709 Kind() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5e38\u91cf\u6765\u8868\u793a\u7c7b\u578b\uff1a Uint \u3001 Float64 \u3001 Slice \u7b49\u7b49\u3002\u540c\u6837 Value \u6709\u53eb\u505a Int() \u548c Float() \u7684\u65b9\u6cd5\u53ef\u4ee5\u83b7\u53d6\u5b58\u50a8\u5728\u5185\u90e8\u7684\u503c\uff08\u8ddf int64 \u548c float64 \u4e00\u6837\uff09 const ( Invalid Kind = iota Bool Int Int8 Int16 Int32 Int64 Uint Uint8 Uint16 Uint32 Uint64 Uintptr Float32 Float64 Complex64 Complex128 Array Chan Func Interface Map Ptr Slice String Struct UnsafePointer ) \u5bf9\u4e8e float64 \u7c7b\u578b\u7684\u53d8\u91cf x \uff0c\u5982\u679c v:=reflect.ValueOf(x) \uff0c\u90a3\u4e48 v.Kind() \u8fd4\u56de reflect.Float64 \uff0c\u6240\u4ee5\u4e0b\u9762\u7684\u8868\u8fbe\u5f0f\u662f true \uff1a v.Kind() == reflect.Float64 Kind() \u603b\u662f\u8fd4\u56de\u5e95\u5c42\u7c7b\u578b\uff1a type MyInt int var m MyInt = 5 v := reflect . ValueOf ( m ) \u65b9\u6cd5 v.Kind() \u8fd4\u56de reflect.Int \u3002 \u53d8\u91cf v \u7684 Interface() \u65b9\u6cd5\u53ef\u4ee5\u5f97\u5230\u8fd8\u539f\uff08\u63a5\u53e3\uff09\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fd9\u6837\u6253\u5370 v \u7684\u503c\uff1a fmt.Println(v.Interface()) \u5c1d\u8bd5\u8fd0\u884c\u4e0b\u9762\u7684\u4ee3\u7801\uff1a \u793a\u4f8b 11.11 reflect1.go \uff1a // blog: Laws of Reflection package main import ( \"fmt\" \"reflect\" ) func main () { var x float64 = 3.4 fmt . Println ( \"type:\" , reflect . TypeOf ( x )) v := reflect . ValueOf ( x ) fmt . Println ( \"value:\" , v ) fmt . Println ( \"type:\" , v . Type ()) fmt . Println ( \"kind:\" , v . Kind ()) fmt . Println ( \"value:\" , v . Float ()) fmt . Println ( v . Interface ()) fmt . Printf ( \"value is %5.2e\\n\" , v . Interface ()) y := v . Interface ().( float64 ) fmt . Println ( y ) } \u8f93\u51fa\uff1a type: float64 value: 3.4 type: float64 kind: float64 value: 3.4 3.4 value is 3.40e+00 3.4 x \u662f\u4e00\u4e2a float64 \u7c7b\u578b\u7684\u503c\uff0c reflect.ValueOf(x).Float() \u8fd4\u56de\u8fd9\u4e2a float64 \u7c7b\u578b\u7684\u5b9e\u9645\u503c\uff1b\u540c\u6837\u7684\u9002\u7528\u4e8e Int(), Bool(), Complex(), String() 11.10.2 \u901a\u8fc7\u53cd\u5c04\u4fee\u6539\uff08\u8bbe\u7f6e\uff09\u503c \u00b6 \u7ee7\u7eed\u524d\u9762\u7684\u4f8b\u5b50\uff08\u53c2\u9605 11.9 reflect2.go \uff09\uff0c\u5047\u8bbe\u6211\u4eec\u8981\u628a x \u7684\u503c\u6539\u4e3a 3.1415 \u3002 Value \u6709\u4e00\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\uff0c\u4f46\u662f\u5fc5\u987b\u5c0f\u5fc3\u4f7f\u7528\uff1a v.SetFloat(3.1415) \u3002 \u8fd9\u5c06\u4ea7\u751f\u4e00\u4e2a\u9519\u8bef\uff1a reflect.Value.SetFloat using unaddressable value \u3002 \u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u5462\uff1f\u95ee\u9898\u7684\u539f\u56e0\u662f v \u4e0d\u662f\u53ef\u8bbe\u7f6e\u7684\uff08\u8fd9\u91cc\u5e76\u4e0d\u662f\u8bf4\u503c\u4e0d\u53ef\u5bfb\u5740\uff09\u3002\u662f\u5426\u53ef\u8bbe\u7f6e\u662f Value \u7684\u4e00\u4e2a\u5c5e\u6027\uff0c\u5e76\u4e14\u4e0d\u662f\u6240\u6709\u7684\u53cd\u5c04\u503c\u90fd\u6709\u8fd9\u4e2a\u5c5e\u6027\uff1a\u53ef\u4ee5\u4f7f\u7528 CanSet() \u65b9\u6cd5\u6d4b\u8bd5\u662f\u5426\u53ef\u8bbe\u7f6e\u3002 \u5728\u4f8b\u5b50\u4e2d\u6211\u4eec\u770b\u5230 v.CanSet() \u8fd4\u56de false \uff1a settability of v: false \u5f53 v := reflect.ValueOf(x) \u51fd\u6570\u901a\u8fc7\u4f20\u9012\u4e00\u4e2a x \u62f7\u8d1d\u521b\u5efa\u4e86 v \uff0c\u90a3\u4e48 v \u7684\u6539\u53d8\u5e76\u4e0d\u80fd\u66f4\u6539\u539f\u59cb\u7684 x \u3002\u8981\u60f3 v \u7684\u66f4\u6539\u80fd\u4f5c\u7528\u5230 x \uff0c\u90a3\u5c31\u5fc5\u987b\u4f20\u9012 x \u7684\u5730\u5740 v = reflect.ValueOf(&x) \u3002 \u901a\u8fc7 Type() \u6211\u4eec\u770b\u5230 v \u73b0\u5728\u7684\u7c7b\u578b\u662f *float64 \u5e76\u4e14\u4ecd\u7136\u662f\u4e0d\u53ef\u8bbe\u7f6e\u7684\u3002 \u8981\u60f3\u8ba9\u5176\u53ef\u8bbe\u7f6e\u6211\u4eec\u9700\u8981\u4f7f\u7528 Elem() \u51fd\u6570\uff0c\u8fd9\u95f4\u63a5\u5730\u4f7f\u7528\u6307\u9488\uff1a v = v.Elem() \u73b0\u5728 v.CanSet() \u8fd4\u56de true \u5e76\u4e14 v.SetFloat(3.1415) \u8bbe\u7f6e\u6210\u529f\u4e86\uff01 \u793a\u4f8b 11.12 reflect2.go \uff1a package main import ( \"fmt\" \"reflect\" ) func main () { var x float64 = 3.4 v := reflect . ValueOf ( x ) // setting a value: // v.SetFloat(3.1415) // Error: will panic: reflect.Value.SetFloat using unaddressable value fmt . Println ( \"settability of v:\" , v . CanSet ()) v = reflect . ValueOf ( & x ) // Note: take the address of x. fmt . Println ( \"type of v:\" , v . Type ()) fmt . Println ( \"settability of v:\" , v . CanSet ()) v = v . Elem () fmt . Println ( \"The Elem of v is: \" , v ) fmt . Println ( \"settability of v:\" , v . CanSet ()) v . SetFloat ( 3.1415 ) // this works! fmt . Println ( v . Interface ()) fmt . Println ( v ) } \u8f93\u51fa\uff1a settability of v: false type of v: *float64 settability of v: false The Elem of v is: <float64 Value> settability of v: true 3.1415 <float64 Value> \u53cd\u5c04\u4e2d\u6709\u4e9b\u5185\u5bb9\u662f\u9700\u8981\u7528\u5730\u5740\u53bb\u6539\u53d8\u5b83\u7684\u72b6\u6001\u7684\u3002 11.10.3 \u53cd\u5c04\u7ed3\u6784 \u00b6 \u6709\u4e9b\u65f6\u5019\u9700\u8981\u53cd\u5c04\u4e00\u4e2a\u7ed3\u6784\u7c7b\u578b\u3002 NumField() \u65b9\u6cd5\u8fd4\u56de\u7ed3\u6784\u5185\u7684\u5b57\u6bb5\u6570\u91cf\uff1b\u901a\u8fc7\u4e00\u4e2a for \u5faa\u73af\u7528\u7d22\u5f15\u53d6\u5f97\u6bcf\u4e2a\u5b57\u6bb5\u7684\u503c Field(i) \u3002 \u6211\u4eec\u540c\u6837\u80fd\u591f\u8c03\u7528\u7b7e\u540d\u5728\u7ed3\u6784\u4e0a\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982\uff0c\u4f7f\u7528\u7d22\u5f15 n \u6765\u8c03\u7528\uff1a Method(n).Call(nil) \u3002 \u793a\u4f8b 11.13 reflect_struct.go \uff1a package main import ( \"fmt\" \"reflect\" ) type NotknownType struct { s1 , s2 , s3 string } func ( n NotknownType ) String () string { return n . s1 + \" - \" + n . s2 + \" - \" + n . s3 } // variable to investigate: var secret interface {} = NotknownType { \"Ada\" , \"Go\" , \"Oberon\" } func main () { value := reflect . ValueOf ( secret ) // <main.NotknownType Value> typ := reflect . TypeOf ( secret ) // main.NotknownType // alternative: // typ := value.Type() // main.NotknownType fmt . Println ( typ ) knd := value . Kind () // struct fmt . Println ( knd ) // iterate through the fields of the struct: for i := 0 ; i < value . NumField (); i ++ { fmt . Printf ( \"Field %d: %v\\n\" , i , value . Field ( i )) // error: panic: reflect.Value.SetString using value obtained using unexported field // value.Field(i).SetString(\"C#\") } // call the first method, which is String(): results := value . Method ( 0 ). Call ( nil ) fmt . Println ( results ) // [Ada - Go - Oberon] } \u8f93\u51fa\uff1a main.NotknownType struct Field 0: Ada Field 1: Go Field 2: Oberon [Ada - Go - Oberon] \u4f46\u662f\u5982\u679c\u5c1d\u8bd5\u66f4\u6539\u4e00\u4e2a\u503c\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u9519\u8bef\uff1a panic: reflect.Value.SetString using value obtained using unexported field \u8fd9\u662f\u56e0\u4e3a\u7ed3\u6784\u4e2d\u53ea\u6709\u88ab\u5bfc\u51fa\u5b57\u6bb5\uff08\u9996\u5b57\u6bcd\u5927\u5199\uff09\u624d\u662f\u53ef\u8bbe\u7f6e\u7684\uff1b\u6765\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a \u793a\u4f8b 11.14 reflect_struct2.go \uff1a package main import ( \"fmt\" \"reflect\" ) type T struct { A int B string } func main () { t := T { 23 , \"skidoo\" } s := reflect . ValueOf ( & t ). Elem () typeOfT := s . Type () for i := 0 ; i < s . NumField (); i ++ { f := s . Field ( i ) fmt . Printf ( \"%d: %s %s = %v\\n\" , i , typeOfT . Field ( i ). Name , f . Type (), f . Interface ()) } s . Field ( 0 ). SetInt ( 77 ) s . Field ( 1 ). SetString ( \"Sunset Strip\" ) fmt . Println ( \"t is now\" , t ) } \u8f93\u51fa\uff1a 0: A int = 23 1: B string = skidoo t is now {77 Sunset Strip} \u9644\u5f55 37 \u6df1\u5165\u9610\u8ff0\u4e86\u53cd\u5c04\u6982\u5ff5\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7a7a\u63a5\u53e3 \u4e0b\u4e00\u8282\uff1a Printf \u548c\u53cd\u5c04","title":"11.10 \u53cd\u5c04\u5305"},{"location":"11.10/#1110","text":"","title":"11.10 \u53cd\u5c04\u5305"},{"location":"11.10/#11101","text":"\u5728 10.4 \u8282\u6211\u4eec\u770b\u5230\u53ef\u4ee5\u901a\u8fc7\u53cd\u5c04\u6765\u5206\u6790\u4e00\u4e2a\u7ed3\u6784\u4f53\u3002\u672c\u8282\u6211\u4eec\u8fdb\u4e00\u6b65\u63a2\u8ba8\u5f3a\u5927\u7684\u53cd\u5c04\u529f\u80fd\u3002\u53cd\u5c04\u662f\u7528\u7a0b\u5e8f\u68c0\u67e5\u5176\u6240\u62e5\u6709\u7684\u7ed3\u6784\uff0c\u5c24\u5176\u662f\u7c7b\u578b\u7684\u4e00\u79cd\u80fd\u529b\uff1b\u8fd9\u662f\u5143\u7f16\u7a0b\u7684\u4e00\u79cd\u5f62\u5f0f\u3002\u53cd\u5c04\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u68c0\u67e5\u7c7b\u578b\u548c\u53d8\u91cf\uff0c\u4f8b\u5982\uff1a\u5b83\u7684\u5927\u5c0f\u3001\u5b83\u7684\u65b9\u6cd5\u4ee5\u53ca\u5b83\u80fd\u201c\u52a8\u6001\u5730\u201d\u8c03\u7528\u8fd9\u4e9b\u65b9\u6cd5\u3002\u8fd9\u5bf9\u4e8e\u6ca1\u6709\u6e90\u4ee3\u7801\u7684\u5305\u5c24\u5176\u6709\u7528\u3002\u8fd9\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u5de5\u5177\uff0c\u9664\u975e\u771f\u5f97\u6709\u5fc5\u8981\uff0c\u5426\u5219\u5e94\u5f53\u907f\u514d\u4f7f\u7528\u6216\u5c0f\u5fc3\u4f7f\u7528\u3002 \u53d8\u91cf\u7684\u6700\u57fa\u672c\u4fe1\u606f\u5c31\u662f\u7c7b\u578b\u548c\u503c\uff1a\u53cd\u5c04\u5305\u7684 Type \u7528\u6765\u8868\u793a\u4e00\u4e2a Go \u7c7b\u578b\uff0c\u53cd\u5c04\u5305\u7684 Value \u4e3a Go \u503c\u63d0\u4f9b\u4e86\u53cd\u5c04\u63a5\u53e3\u3002 \u4e24\u4e2a\u7b80\u5355\u7684\u51fd\u6570\uff0c reflect.TypeOf \u548c reflect.ValueOf \uff0c\u8fd4\u56de\u88ab\u68c0\u67e5\u5bf9\u8c61\u7684\u7c7b\u578b\u548c\u503c\u3002\u4f8b\u5982\uff0cx \u88ab\u5b9a\u4e49\u4e3a\uff1a var x float64 = 3.4 \uff0c\u90a3\u4e48 reflect.TypeOf(x) \u8fd4\u56de float64 \uff0c reflect.ValueOf(x) \u8fd4\u56de <float64 Value> \u5b9e\u9645\u4e0a\uff0c\u53cd\u5c04\u662f\u901a\u8fc7\u68c0\u67e5\u4e00\u4e2a\u63a5\u53e3\u7684\u503c\uff0c\u53d8\u91cf\u9996\u5148\u88ab\u8f6c\u6362\u6210\u7a7a\u63a5\u53e3\u3002\u8fd9\u4ece\u4e0b\u9762\u4e24\u4e2a\u51fd\u6570\u7b7e\u540d\u80fd\u591f\u5f88\u660e\u663e\u7684\u770b\u51fa\u6765\uff1a func TypeOf ( i interface {}) Type func ValueOf ( i interface {}) Value \u63a5\u53e3\u7684\u503c\u5305\u542b\u4e00\u4e2a type \u548c value\u3002 \u53cd\u5c04\u53ef\u4ee5\u4ece\u63a5\u53e3\u503c\u53cd\u5c04\u5230\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u4ece\u5bf9\u8c61\u53cd\u5c04\u56de\u63a5\u53e3\u503c\u3002 reflect.Type \u548c reflect.Value \u90fd\u6709\u8bb8\u591a\u65b9\u6cd5\u7528\u4e8e\u68c0\u67e5\u548c\u64cd\u4f5c\u5b83\u4eec\u3002\u4e00\u4e2a\u91cd\u8981\u7684\u4f8b\u5b50\u662f Value \u6709\u4e00\u4e2a Type() \u65b9\u6cd5\u8fd4\u56de reflect.Value \u7684 Type \u7c7b\u578b\u3002\u53e6\u4e00\u4e2a\u662f Type \u548c Value \u90fd\u6709 Kind() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5e38\u91cf\u6765\u8868\u793a\u7c7b\u578b\uff1a Uint \u3001 Float64 \u3001 Slice \u7b49\u7b49\u3002\u540c\u6837 Value \u6709\u53eb\u505a Int() \u548c Float() \u7684\u65b9\u6cd5\u53ef\u4ee5\u83b7\u53d6\u5b58\u50a8\u5728\u5185\u90e8\u7684\u503c\uff08\u8ddf int64 \u548c float64 \u4e00\u6837\uff09 const ( Invalid Kind = iota Bool Int Int8 Int16 Int32 Int64 Uint Uint8 Uint16 Uint32 Uint64 Uintptr Float32 Float64 Complex64 Complex128 Array Chan Func Interface Map Ptr Slice String Struct UnsafePointer ) \u5bf9\u4e8e float64 \u7c7b\u578b\u7684\u53d8\u91cf x \uff0c\u5982\u679c v:=reflect.ValueOf(x) \uff0c\u90a3\u4e48 v.Kind() \u8fd4\u56de reflect.Float64 \uff0c\u6240\u4ee5\u4e0b\u9762\u7684\u8868\u8fbe\u5f0f\u662f true \uff1a v.Kind() == reflect.Float64 Kind() \u603b\u662f\u8fd4\u56de\u5e95\u5c42\u7c7b\u578b\uff1a type MyInt int var m MyInt = 5 v := reflect . ValueOf ( m ) \u65b9\u6cd5 v.Kind() \u8fd4\u56de reflect.Int \u3002 \u53d8\u91cf v \u7684 Interface() \u65b9\u6cd5\u53ef\u4ee5\u5f97\u5230\u8fd8\u539f\uff08\u63a5\u53e3\uff09\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fd9\u6837\u6253\u5370 v \u7684\u503c\uff1a fmt.Println(v.Interface()) \u5c1d\u8bd5\u8fd0\u884c\u4e0b\u9762\u7684\u4ee3\u7801\uff1a \u793a\u4f8b 11.11 reflect1.go \uff1a // blog: Laws of Reflection package main import ( \"fmt\" \"reflect\" ) func main () { var x float64 = 3.4 fmt . Println ( \"type:\" , reflect . TypeOf ( x )) v := reflect . ValueOf ( x ) fmt . Println ( \"value:\" , v ) fmt . Println ( \"type:\" , v . Type ()) fmt . Println ( \"kind:\" , v . Kind ()) fmt . Println ( \"value:\" , v . Float ()) fmt . Println ( v . Interface ()) fmt . Printf ( \"value is %5.2e\\n\" , v . Interface ()) y := v . Interface ().( float64 ) fmt . Println ( y ) } \u8f93\u51fa\uff1a type: float64 value: 3.4 type: float64 kind: float64 value: 3.4 3.4 value is 3.40e+00 3.4 x \u662f\u4e00\u4e2a float64 \u7c7b\u578b\u7684\u503c\uff0c reflect.ValueOf(x).Float() \u8fd4\u56de\u8fd9\u4e2a float64 \u7c7b\u578b\u7684\u5b9e\u9645\u503c\uff1b\u540c\u6837\u7684\u9002\u7528\u4e8e Int(), Bool(), Complex(), String()","title":"11.10.1 \u65b9\u6cd5\u548c\u7c7b\u578b\u7684\u53cd\u5c04"},{"location":"11.10/#11102","text":"\u7ee7\u7eed\u524d\u9762\u7684\u4f8b\u5b50\uff08\u53c2\u9605 11.9 reflect2.go \uff09\uff0c\u5047\u8bbe\u6211\u4eec\u8981\u628a x \u7684\u503c\u6539\u4e3a 3.1415 \u3002 Value \u6709\u4e00\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\uff0c\u4f46\u662f\u5fc5\u987b\u5c0f\u5fc3\u4f7f\u7528\uff1a v.SetFloat(3.1415) \u3002 \u8fd9\u5c06\u4ea7\u751f\u4e00\u4e2a\u9519\u8bef\uff1a reflect.Value.SetFloat using unaddressable value \u3002 \u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u5462\uff1f\u95ee\u9898\u7684\u539f\u56e0\u662f v \u4e0d\u662f\u53ef\u8bbe\u7f6e\u7684\uff08\u8fd9\u91cc\u5e76\u4e0d\u662f\u8bf4\u503c\u4e0d\u53ef\u5bfb\u5740\uff09\u3002\u662f\u5426\u53ef\u8bbe\u7f6e\u662f Value \u7684\u4e00\u4e2a\u5c5e\u6027\uff0c\u5e76\u4e14\u4e0d\u662f\u6240\u6709\u7684\u53cd\u5c04\u503c\u90fd\u6709\u8fd9\u4e2a\u5c5e\u6027\uff1a\u53ef\u4ee5\u4f7f\u7528 CanSet() \u65b9\u6cd5\u6d4b\u8bd5\u662f\u5426\u53ef\u8bbe\u7f6e\u3002 \u5728\u4f8b\u5b50\u4e2d\u6211\u4eec\u770b\u5230 v.CanSet() \u8fd4\u56de false \uff1a settability of v: false \u5f53 v := reflect.ValueOf(x) \u51fd\u6570\u901a\u8fc7\u4f20\u9012\u4e00\u4e2a x \u62f7\u8d1d\u521b\u5efa\u4e86 v \uff0c\u90a3\u4e48 v \u7684\u6539\u53d8\u5e76\u4e0d\u80fd\u66f4\u6539\u539f\u59cb\u7684 x \u3002\u8981\u60f3 v \u7684\u66f4\u6539\u80fd\u4f5c\u7528\u5230 x \uff0c\u90a3\u5c31\u5fc5\u987b\u4f20\u9012 x \u7684\u5730\u5740 v = reflect.ValueOf(&x) \u3002 \u901a\u8fc7 Type() \u6211\u4eec\u770b\u5230 v \u73b0\u5728\u7684\u7c7b\u578b\u662f *float64 \u5e76\u4e14\u4ecd\u7136\u662f\u4e0d\u53ef\u8bbe\u7f6e\u7684\u3002 \u8981\u60f3\u8ba9\u5176\u53ef\u8bbe\u7f6e\u6211\u4eec\u9700\u8981\u4f7f\u7528 Elem() \u51fd\u6570\uff0c\u8fd9\u95f4\u63a5\u5730\u4f7f\u7528\u6307\u9488\uff1a v = v.Elem() \u73b0\u5728 v.CanSet() \u8fd4\u56de true \u5e76\u4e14 v.SetFloat(3.1415) \u8bbe\u7f6e\u6210\u529f\u4e86\uff01 \u793a\u4f8b 11.12 reflect2.go \uff1a package main import ( \"fmt\" \"reflect\" ) func main () { var x float64 = 3.4 v := reflect . ValueOf ( x ) // setting a value: // v.SetFloat(3.1415) // Error: will panic: reflect.Value.SetFloat using unaddressable value fmt . Println ( \"settability of v:\" , v . CanSet ()) v = reflect . ValueOf ( & x ) // Note: take the address of x. fmt . Println ( \"type of v:\" , v . Type ()) fmt . Println ( \"settability of v:\" , v . CanSet ()) v = v . Elem () fmt . Println ( \"The Elem of v is: \" , v ) fmt . Println ( \"settability of v:\" , v . CanSet ()) v . SetFloat ( 3.1415 ) // this works! fmt . Println ( v . Interface ()) fmt . Println ( v ) } \u8f93\u51fa\uff1a settability of v: false type of v: *float64 settability of v: false The Elem of v is: <float64 Value> settability of v: true 3.1415 <float64 Value> \u53cd\u5c04\u4e2d\u6709\u4e9b\u5185\u5bb9\u662f\u9700\u8981\u7528\u5730\u5740\u53bb\u6539\u53d8\u5b83\u7684\u72b6\u6001\u7684\u3002","title":"11.10.2 \u901a\u8fc7\u53cd\u5c04\u4fee\u6539\uff08\u8bbe\u7f6e\uff09\u503c"},{"location":"11.10/#11103","text":"\u6709\u4e9b\u65f6\u5019\u9700\u8981\u53cd\u5c04\u4e00\u4e2a\u7ed3\u6784\u7c7b\u578b\u3002 NumField() \u65b9\u6cd5\u8fd4\u56de\u7ed3\u6784\u5185\u7684\u5b57\u6bb5\u6570\u91cf\uff1b\u901a\u8fc7\u4e00\u4e2a for \u5faa\u73af\u7528\u7d22\u5f15\u53d6\u5f97\u6bcf\u4e2a\u5b57\u6bb5\u7684\u503c Field(i) \u3002 \u6211\u4eec\u540c\u6837\u80fd\u591f\u8c03\u7528\u7b7e\u540d\u5728\u7ed3\u6784\u4e0a\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982\uff0c\u4f7f\u7528\u7d22\u5f15 n \u6765\u8c03\u7528\uff1a Method(n).Call(nil) \u3002 \u793a\u4f8b 11.13 reflect_struct.go \uff1a package main import ( \"fmt\" \"reflect\" ) type NotknownType struct { s1 , s2 , s3 string } func ( n NotknownType ) String () string { return n . s1 + \" - \" + n . s2 + \" - \" + n . s3 } // variable to investigate: var secret interface {} = NotknownType { \"Ada\" , \"Go\" , \"Oberon\" } func main () { value := reflect . ValueOf ( secret ) // <main.NotknownType Value> typ := reflect . TypeOf ( secret ) // main.NotknownType // alternative: // typ := value.Type() // main.NotknownType fmt . Println ( typ ) knd := value . Kind () // struct fmt . Println ( knd ) // iterate through the fields of the struct: for i := 0 ; i < value . NumField (); i ++ { fmt . Printf ( \"Field %d: %v\\n\" , i , value . Field ( i )) // error: panic: reflect.Value.SetString using value obtained using unexported field // value.Field(i).SetString(\"C#\") } // call the first method, which is String(): results := value . Method ( 0 ). Call ( nil ) fmt . Println ( results ) // [Ada - Go - Oberon] } \u8f93\u51fa\uff1a main.NotknownType struct Field 0: Ada Field 1: Go Field 2: Oberon [Ada - Go - Oberon] \u4f46\u662f\u5982\u679c\u5c1d\u8bd5\u66f4\u6539\u4e00\u4e2a\u503c\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u9519\u8bef\uff1a panic: reflect.Value.SetString using value obtained using unexported field \u8fd9\u662f\u56e0\u4e3a\u7ed3\u6784\u4e2d\u53ea\u6709\u88ab\u5bfc\u51fa\u5b57\u6bb5\uff08\u9996\u5b57\u6bcd\u5927\u5199\uff09\u624d\u662f\u53ef\u8bbe\u7f6e\u7684\uff1b\u6765\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a \u793a\u4f8b 11.14 reflect_struct2.go \uff1a package main import ( \"fmt\" \"reflect\" ) type T struct { A int B string } func main () { t := T { 23 , \"skidoo\" } s := reflect . ValueOf ( & t ). Elem () typeOfT := s . Type () for i := 0 ; i < s . NumField (); i ++ { f := s . Field ( i ) fmt . Printf ( \"%d: %s %s = %v\\n\" , i , typeOfT . Field ( i ). Name , f . Type (), f . Interface ()) } s . Field ( 0 ). SetInt ( 77 ) s . Field ( 1 ). SetString ( \"Sunset Strip\" ) fmt . Println ( \"t is now\" , t ) } \u8f93\u51fa\uff1a 0: A int = 23 1: B string = skidoo t is now {77 Sunset Strip} \u9644\u5f55 37 \u6df1\u5165\u9610\u8ff0\u4e86\u53cd\u5c04\u6982\u5ff5\u3002","title":"11.10.3 \u53cd\u5c04\u7ed3\u6784"},{"location":"11.10/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7a7a\u63a5\u53e3 \u4e0b\u4e00\u8282\uff1a Printf \u548c\u53cd\u5c04","title":"\u94fe\u63a5"},{"location":"11.11/","text":"11.11 Printf() \u548c\u53cd\u5c04 \u00b6 \u5728 Go \u8bed\u8a00\u7684\u6807\u51c6\u5e93\u4e2d\uff0c\u524d\u51e0\u8282\u6240\u8ff0\u7684\u53cd\u5c04\u7684\u529f\u80fd\u88ab\u5927\u91cf\u5730\u4f7f\u7528\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c fmt \u5305\u4e2d\u7684 Printf() \uff08\u4ee5\u53ca\u5176\u4ed6\u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570\uff09\u90fd\u4f1a\u4f7f\u7528\u53cd\u5c04\u6765\u5206\u6790\u5b83\u7684 ... \u53c2\u6570\u3002 Printf() \u7684\u51fd\u6570\u58f0\u660e\u4e3a\uff1a func Printf ( format string , args ... interface {}) ( n int , err error ) Printf() \u4e2d\u7684 ... \u53c2\u6570\u4e3a\u7a7a\u63a5\u53e3\u7c7b\u578b\u3002 Printf() \u4f7f\u7528\u53cd\u5c04\u5305\u6765\u89e3\u6790\u8fd9\u4e2a\u53c2\u6570\u5217\u8868\u3002\u6240\u4ee5\uff0c Printf() \u80fd\u591f\u77e5\u9053\u5b83\u6bcf\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u3002\u56e0\u6b64\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u53ea\u6709 %d \u800c\u6ca1\u6709 %u \u548c %ld \uff0c\u56e0\u4e3a\u5b83\u77e5\u9053\u8fd9\u4e2a\u53c2\u6570\u662f unsigned \u8fd8\u662f long\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48 Print() \u548c Println() \u5728\u6ca1\u6709\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u60c5\u51b5\u4e0b\u8fd8\u80fd\u5982\u6b64\u6f02\u4eae\u5730\u8f93\u51fa\u3002 \u4e3a\u4e86\u8ba9\u5927\u5bb6\u66f4\u52a0\u5177\u4f53\u5730\u4e86\u89e3 Printf() \u4e2d\u7684\u53cd\u5c04\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u901a\u7528\u8f93\u51fa\u51fd\u6570\u3002\u5176\u4e2d\u4f7f\u7528\u4e86 type-switch \u6765\u63a8\u5bfc\u53c2\u6570\u7c7b\u578b\uff0c\u5e76\u6839\u636e\u7c7b\u578b\u6765\u8f93\u51fa\u6bcf\u4e2a\u53c2\u6570\u7684\u503c\uff08\u8fd9\u91cc\u7528\u4e86 10.7 \u8282\u4e2d\u7ec3\u4e60 10.13 \u7684\u90e8\u5206\u4ee3\u7801\uff09 \u793a\u4f8b 11.15 print.go \uff1a package main import ( \"os\" \"strconv\" ) type Stringer interface { String () string } type Celsius float64 func ( c Celsius ) String () string { return strconv . FormatFloat ( float64 ( c ), 'f' , 1 , 64 ) + \" \u00b0C\" } type Day int var dayName = [] string { \"Monday\" , \"Tuesday\" , \"Wednesday\" , \"Thursday\" , \"Friday\" , \"Saturday\" , \"Sunday\" } func ( day Day ) String () string { return dayName [ day ] } func print ( args ... interface {}) { for i , arg := range args { if i > 0 { os . Stdout . WriteString ( \" \" )} switch a := arg .( type ) { // type switch case Stringer : os . Stdout . WriteString ( a . String ()) case int : os . Stdout . WriteString ( strconv . Itoa ( a )) case string : os . Stdout . WriteString ( a ) // more types default : os . Stdout . WriteString ( \"???\" ) } } } func main () { print ( Day ( 1 ), \"was\" , Celsius ( 18.36 )) // Tuesday was 18.4 \u00b0C } \u5728 12.8 \u8282\u4e2d\u6211\u4eec\u5c06\u9610\u91ca fmt.Fprintf() \u662f\u600e\u4e48\u8fd0\u7528\u540c\u6837\u7684\u53cd\u5c04\u539f\u5219\u7684\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u53cd\u5c04\u5305 \u4e0b\u4e00\u8282\uff1a \u63a5\u53e3\u548c\u52a8\u6001\u7c7b\u578b","title":"11.11 Printf \u548c\u53cd\u5c04"},{"location":"11.11/#1111-printf","text":"\u5728 Go \u8bed\u8a00\u7684\u6807\u51c6\u5e93\u4e2d\uff0c\u524d\u51e0\u8282\u6240\u8ff0\u7684\u53cd\u5c04\u7684\u529f\u80fd\u88ab\u5927\u91cf\u5730\u4f7f\u7528\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c fmt \u5305\u4e2d\u7684 Printf() \uff08\u4ee5\u53ca\u5176\u4ed6\u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570\uff09\u90fd\u4f1a\u4f7f\u7528\u53cd\u5c04\u6765\u5206\u6790\u5b83\u7684 ... \u53c2\u6570\u3002 Printf() \u7684\u51fd\u6570\u58f0\u660e\u4e3a\uff1a func Printf ( format string , args ... interface {}) ( n int , err error ) Printf() \u4e2d\u7684 ... \u53c2\u6570\u4e3a\u7a7a\u63a5\u53e3\u7c7b\u578b\u3002 Printf() \u4f7f\u7528\u53cd\u5c04\u5305\u6765\u89e3\u6790\u8fd9\u4e2a\u53c2\u6570\u5217\u8868\u3002\u6240\u4ee5\uff0c Printf() \u80fd\u591f\u77e5\u9053\u5b83\u6bcf\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u3002\u56e0\u6b64\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u53ea\u6709 %d \u800c\u6ca1\u6709 %u \u548c %ld \uff0c\u56e0\u4e3a\u5b83\u77e5\u9053\u8fd9\u4e2a\u53c2\u6570\u662f unsigned \u8fd8\u662f long\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48 Print() \u548c Println() \u5728\u6ca1\u6709\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u60c5\u51b5\u4e0b\u8fd8\u80fd\u5982\u6b64\u6f02\u4eae\u5730\u8f93\u51fa\u3002 \u4e3a\u4e86\u8ba9\u5927\u5bb6\u66f4\u52a0\u5177\u4f53\u5730\u4e86\u89e3 Printf() \u4e2d\u7684\u53cd\u5c04\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u901a\u7528\u8f93\u51fa\u51fd\u6570\u3002\u5176\u4e2d\u4f7f\u7528\u4e86 type-switch \u6765\u63a8\u5bfc\u53c2\u6570\u7c7b\u578b\uff0c\u5e76\u6839\u636e\u7c7b\u578b\u6765\u8f93\u51fa\u6bcf\u4e2a\u53c2\u6570\u7684\u503c\uff08\u8fd9\u91cc\u7528\u4e86 10.7 \u8282\u4e2d\u7ec3\u4e60 10.13 \u7684\u90e8\u5206\u4ee3\u7801\uff09 \u793a\u4f8b 11.15 print.go \uff1a package main import ( \"os\" \"strconv\" ) type Stringer interface { String () string } type Celsius float64 func ( c Celsius ) String () string { return strconv . FormatFloat ( float64 ( c ), 'f' , 1 , 64 ) + \" \u00b0C\" } type Day int var dayName = [] string { \"Monday\" , \"Tuesday\" , \"Wednesday\" , \"Thursday\" , \"Friday\" , \"Saturday\" , \"Sunday\" } func ( day Day ) String () string { return dayName [ day ] } func print ( args ... interface {}) { for i , arg := range args { if i > 0 { os . Stdout . WriteString ( \" \" )} switch a := arg .( type ) { // type switch case Stringer : os . Stdout . WriteString ( a . String ()) case int : os . Stdout . WriteString ( strconv . Itoa ( a )) case string : os . Stdout . WriteString ( a ) // more types default : os . Stdout . WriteString ( \"???\" ) } } } func main () { print ( Day ( 1 ), \"was\" , Celsius ( 18.36 )) // Tuesday was 18.4 \u00b0C } \u5728 12.8 \u8282\u4e2d\u6211\u4eec\u5c06\u9610\u91ca fmt.Fprintf() \u662f\u600e\u4e48\u8fd0\u7528\u540c\u6837\u7684\u53cd\u5c04\u539f\u5219\u7684\u3002","title":"11.11 Printf() \u548c\u53cd\u5c04"},{"location":"11.11/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u53cd\u5c04\u5305 \u4e0b\u4e00\u8282\uff1a \u63a5\u53e3\u548c\u52a8\u6001\u7c7b\u578b","title":"\u94fe\u63a5"},{"location":"11.12/","text":"11.12 \u63a5\u53e3\u4e0e\u52a8\u6001\u7c7b\u578b \u00b6 11.12.1 Go \u7684\u52a8\u6001\u7c7b\u578b \u00b6 \u5728\u7ecf\u5178\u7684\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\uff08\u50cf C++\uff0cJava \u548c C#\uff09\u4e2d\u6570\u636e\u548c\u65b9\u6cd5\u88ab\u5c01\u88c5\u4e3a*\u7c7b*\u7684\u6982\u5ff5\uff1a\u7c7b\u5305\u542b\u5b83\u4eec\u4e24\u8005\uff0c\u5e76\u4e14\u4e0d\u80fd\u5265\u79bb\u3002 Go \u6ca1\u6709\u7c7b\uff1a\u6570\u636e\uff08\u7ed3\u6784\u4f53\u6216\u66f4\u4e00\u822c\u7684\u7c7b\u578b\uff09\u548c\u65b9\u6cd5\u662f\u4e00\u79cd\u677e\u8026\u5408\u7684\u6b63\u4ea4\u5173\u7cfb\u3002 Go \u4e2d\u7684\u63a5\u53e3\u8ddf Java/C# \u7c7b\u4f3c\uff1a\u90fd\u662f\u5fc5\u987b\u63d0\u4f9b\u4e00\u4e2a\u6307\u5b9a\u65b9\u6cd5\u96c6\u7684\u5b9e\u73b0\u3002\u4f46\u662f\u66f4\u52a0\u7075\u6d3b\u901a\u7528\uff1a\u4efb\u4f55\u63d0\u4f9b\u4e86\u63a5\u53e3\u65b9\u6cd5\u5b9e\u73b0\u4ee3\u7801\u7684\u7c7b\u578b\u90fd\u9690\u5f0f\u5730\u5b9e\u73b0\u4e86\u8be5\u63a5\u53e3\uff0c\u800c\u4e0d\u7528\u663e\u5f0f\u5730\u58f0\u660e\u3002 \u548c\u5176\u5b83\u8bed\u8a00\u76f8\u6bd4\uff0cGo \u662f\u552f\u4e00\u7ed3\u5408\u4e86\u63a5\u53e3\u503c\uff0c\u9759\u6001\u7c7b\u578b\u68c0\u67e5\uff08\u662f\u5426\u8be5\u7c7b\u578b\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3\uff09\uff0c\u8fd0\u884c\u65f6\u52a8\u6001\u8f6c\u6362\u7684\u8bed\u8a00\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u663e\u5f0f\u5730\u58f0\u660e\u7c7b\u578b\u662f\u5426\u6ee1\u8db3\u67d0\u4e2a\u63a5\u53e3\u3002\u8be5\u7279\u6027\u5141\u8bb8\u6211\u4eec\u5728\u4e0d\u6539\u53d8\u5df2\u6709\u7684\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u5b9a\u4e49\u548c\u4f7f\u7528\u65b0\u63a5\u53e3\u3002 \u63a5\u6536\u4e00\u4e2a\uff08\u6216\u591a\u4e2a\uff09\u63a5\u53e3\u7c7b\u578b\u4f5c\u4e3a\u53c2\u6570\u7684\u51fd\u6570\uff0c\u5176**\u5b9e\u53c2**\u53ef\u4ee5\u662f\u4efb\u4f55\u5b9e\u73b0\u4e86\u8be5\u63a5\u53e3\u7684\u7c7b\u578b\u7684\u53d8\u91cf\u3002 \u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3\u7684\u7c7b\u578b\u53ef\u4ee5\u88ab\u4f20\u7ed9\u4efb\u4f55\u4ee5\u6b64\u63a5\u53e3\u4e3a\u53c2\u6570\u7684\u51fd\u6570 \u3002 \u7c7b\u4f3c\u4e8e Python \u548c Ruby \u8fd9\u7c7b\u52a8\u6001\u8bed\u8a00\u4e2d\u7684\u52a8\u6001\u7c7b\u578b (duck typing)\uff1b\u8fd9\u610f\u5473\u7740\u5bf9\u8c61\u53ef\u4ee5\u6839\u636e\u63d0\u4f9b\u7684\u65b9\u6cd5\u88ab\u5904\u7406\uff08\u4f8b\u5982\uff0c\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\uff09\uff0c\u800c\u5ffd\u7565\u5b83\u4eec\u7684\u5b9e\u9645\u7c7b\u578b\uff1a\u5b83\u4eec\u80fd\u505a\u4ec0\u4e48\u6bd4\u5b83\u4eec\u662f\u4ec0\u4e48\u66f4\u91cd\u8981\u3002 \u8fd9\u5728\u7a0b\u5e8f duck_dance.go \u4e2d\u5f97\u4ee5\u9610\u660e\uff0c\u51fd\u6570 DuckDance() \u63a5\u53d7\u4e00\u4e2a IDuck \u63a5\u53e3\u7c7b\u578b\u53d8\u91cf\u3002\u4ec5\u5f53 DuckDance() \u88ab\u5b9e\u73b0\u4e86 IDuck \u63a5\u53e3\u7684\u7c7b\u578b\u8c03\u7528\u65f6\u7a0b\u5e8f\u624d\u80fd\u7f16\u8bd1\u901a\u8fc7\u3002 \u793a\u4f8b 11.16 duck_dance.go \uff1a package main import \"fmt\" type IDuck interface { Quack () Walk () } func DuckDance ( duck IDuck ) { for i := 1 ; i <= 3 ; i ++ { duck . Quack () duck . Walk () } } type Bird struct { // ... } func ( b * Bird ) Quack () { fmt . Println ( \"I am quacking!\" ) } func ( b * Bird ) Walk () { fmt . Println ( \"I am walking!\" ) } func main () { b := new ( Bird ) DuckDance ( b ) } \u8f93\u51fa\uff1a I am quacking! I am walking! I am quacking! I am walking! I am quacking! I am walking! \u5982\u679c Bird \u6ca1\u6709\u5b9e\u73b0 Walk() \uff08\u628a\u5b83\u6ce8\u91ca\u6389\uff09\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\uff1a cannot use b (type *Bird) as type IDuck in function argument: *Bird does not implement IDuck (missing Walk method) \u5982\u679c\u5bf9 cat \u8c03\u7528\u51fd\u6570 DuckDance() \uff0cGo \u4f1a\u63d0\u793a\u7f16\u8bd1\u9519\u8bef\uff0c\u4f46\u662f Python \u548c Ruby \u4f1a\u4ee5\u8fd0\u884c\u65f6\u9519\u8bef\u7ed3\u675f\u3002 11.12.2 \u52a8\u6001\u65b9\u6cd5\u8c03\u7528 \u00b6 \u50cf Python\uff0cRuby \u8fd9\u7c7b\u8bed\u8a00\uff0c\u52a8\u6001\u7c7b\u578b\u662f\u5ef6\u8fdf\u7ed1\u5b9a\u7684\uff08\u5728\u8fd0\u884c\u65f6\u8fdb\u884c\uff09\uff1a\u65b9\u6cd5\u53ea\u662f\u7528\u53c2\u6570\u548c\u53d8\u91cf\u7b80\u5355\u5730\u8c03\u7528\uff0c\u7136\u540e\u5728\u8fd0\u884c\u65f6\u624d\u89e3\u6790\uff08\u5b83\u4eec\u5f88\u53ef\u80fd\u6709\u50cf responds_to \u8fd9\u6837\u7684\u65b9\u6cd5\u6765\u68c0\u67e5\u5bf9\u8c61\u662f\u5426\u53ef\u4ee5\u54cd\u5e94\u67d0\u4e2a\u65b9\u6cd5\uff0c\u4f46\u662f\u8fd9\u4e5f\u610f\u5473\u7740\u66f4\u5927\u7684\u7f16\u7801\u91cf\u548c\u66f4\u591a\u7684\u6d4b\u8bd5\u5de5\u4f5c\uff09 Go \u7684\u5b9e\u73b0\u4e0e\u6b64\u76f8\u53cd\uff0c\u901a\u5e38\u9700\u8981\u7f16\u8bd1\u5668\u9759\u6001\u68c0\u67e5\u7684\u652f\u6301\uff1a\u5f53\u53d8\u91cf\u88ab\u8d4b\u503c\u7ed9\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u7684\u53d8\u91cf\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u68c0\u67e5\u5176\u662f\u5426\u5b9e\u73b0\u4e86\u8be5\u63a5\u53e3\u7684\u6240\u6709\u51fd\u6570\u3002\u5982\u679c\u65b9\u6cd5\u8c03\u7528\u4f5c\u7528\u4e8e\u50cf interface{} \u8fd9\u6837\u7684\u201c\u6cdb\u578b\u201d\u4e0a\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u7c7b\u578b\u65ad\u8a00\uff08\u53c2\u89c1 11.3 \u8282\uff09\u6765\u68c0\u67e5\u53d8\u91cf\u662f\u5426\u5b9e\u73b0\u4e86\u76f8\u5e94\u63a5\u53e3\u3002 \u4f8b\u5982\uff0c\u4f60\u7528\u4e0d\u540c\u7684\u7c7b\u578b\u8868\u793a XML \u8f93\u51fa\u6d41\u4e2d\u7684\u4e0d\u540c\u5b9e\u4f53\u3002\u7136\u540e\u6211\u4eec\u4e3a XML \u5b9a\u4e49\u4e00\u4e2a\u5982\u4e0b\u7684\u201c\u5199\u201d\u63a5\u53e3\uff08\u751a\u81f3\u53ef\u4ee5\u628a\u5b83\u5b9a\u4e49\u4e3a\u79c1\u6709\u63a5\u53e3\uff09\uff1a type xmlWriter interface { WriteXML ( w io . Writer ) error } \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u9002\u7528\u4e8e\u8be5\u6d41\u7c7b\u578b\u7684\u4efb\u4f55\u53d8\u91cf\u7684 StreamXML() \u51fd\u6570\uff0c\u5e76\u7528\u7c7b\u578b\u65ad\u8a00\u68c0\u67e5\u4f20\u5165\u7684\u53d8\u91cf\u662f\u5426\u5b9e\u73b0\u4e86\u8be5\u63a5\u53e3\uff1b\u5982\u679c\u6ca1\u6709\uff0c\u6211\u4eec\u5c31\u8c03\u7528\u5185\u5efa\u7684 encodeToXML() \u6765\u5b8c\u6210\u76f8\u5e94\u5de5\u4f5c\uff1a // Exported XML streaming function. func StreamXML ( v interface {}, w io . Writer ) error { if xw , ok := v .( xmlWriter ); ok { // It\u2019s an xmlWriter, use method of asserted type. return xw . WriteXML ( w ) } // No implementation, so we have to use our own function (with perhaps reflection): return encodeToXML ( v , w ) } // Internal XML encoding function. func encodeToXML ( v interface {}, w io . Writer ) error { // ... } Go \u5728\u8fd9\u91cc\u7528\u4e86\u548c gob \u76f8\u540c\u7684\u673a\u5236\uff1a\u5b9a\u4e49\u4e86\u4e24\u4e2a\u63a5\u53e3 GobEncoder \u548c GobDecoder \u3002\u8fd9\u6837\u5c31\u5141\u8bb8\u7c7b\u578b\u81ea\u5df1\u5b9e\u73b0\u4ece\u6d41\u7f16\u89e3\u7801\u7684\u5177\u4f53\u65b9\u5f0f\uff1b\u5982\u679c\u6ca1\u6709\u5b9e\u73b0\u5c31\u4f7f\u7528\u6807\u51c6\u7684\u53cd\u5c04\u65b9\u5f0f\u3002 \u56e0\u6b64 Go \u63d0\u4f9b\u4e86\u52a8\u6001\u8bed\u8a00\u7684\u4f18\u70b9\uff0c\u5374\u6ca1\u6709\u5176\u4ed6\u52a8\u6001\u8bed\u8a00\u5728\u8fd0\u884c\u65f6\u53ef\u80fd\u53d1\u751f\u9519\u8bef\u7684\u7f3a\u70b9\u3002 \u5bf9\u4e8e\u52a8\u6001\u8bed\u8a00\u975e\u5e38\u91cd\u8981\u7684\u5355\u5143\u6d4b\u8bd5\u6765\u8bf4\uff0c\u8fd9\u6837\u5373\u53ef\u4ee5\u51cf\u5c11\u5355\u5143\u6d4b\u8bd5\u7684\u90e8\u5206\u9700\u6c42\uff0c\u53c8\u53ef\u4ee5\u53d1\u6325\u76f8\u5f53\u5927\u7684\u4f5c\u7528\u3002 Go \u7684\u63a5\u53e3\u63d0\u9ad8\u4e86\u4ee3\u7801\u7684\u5206\u79bb\u5ea6\uff0c\u6539\u5584\u4e86\u4ee3\u7801\u7684\u590d\u7528\u6027\uff0c\u4f7f\u5f97\u4ee3\u7801\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u7684\u8bbe\u8ba1\u6a21\u5f0f\u66f4\u5bb9\u6613\u5b9e\u73b0\u3002\u7528 Go \u63a5\u53e3\u8fd8\u80fd\u5b9e\u73b0\u201c\u4f9d\u8d56\u6ce8\u5165\u6a21\u5f0f\u201d\u3002 11.12.3 \u63a5\u53e3\u7684\u63d0\u53d6 \u00b6 *\u63d0\u53d6\u63a5\u53e3*\u662f\u975e\u5e38\u6709\u7528\u7684\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u53ef\u4ee5\u51cf\u5c11\u9700\u8981\u7684\u7c7b\u578b\u548c\u65b9\u6cd5\u6570\u91cf\uff0c\u800c\u4e14\u4e0d\u9700\u8981\u50cf\u4f20\u7edf\u7684\u57fa\u4e8e\u7c7b\u7684\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u90a3\u6837\u7ef4\u62a4\u6574\u4e2a\u7684\u7c7b\u5c42\u6b21\u7ed3\u6784\u3002 Go \u63a5\u53e3\u53ef\u4ee5\u8ba9\u5f00\u53d1\u8005\u627e\u51fa\u81ea\u5df1\u5199\u7684\u7a0b\u5e8f\u4e2d\u7684\u7c7b\u578b\u3002\u5047\u8bbe\u6709\u4e00\u4e9b\u62e5\u6709\u5171\u540c\u884c\u4e3a\u7684\u5bf9\u8c61\uff0c\u5e76\u4e14\u5f00\u53d1\u8005\u60f3\u8981\u62bd\u8c61\u51fa\u8fd9\u4e9b\u884c\u4e3a\uff0c\u8fd9\u65f6\u5c31\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u63a5\u53e3\u6765\u4f7f\u7528\u3002 \u6211\u4eec\u6765\u6269\u5c55 11.1 \u8282\u7684\u793a\u4f8b 11.2 interfaces_poly.go \uff0c\u5047\u8bbe\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u65b0\u7684\u63a5\u53e3 TopologicalGenus \uff0c\u7528\u6765\u7ed9 shape \u6392\u5e8f\uff08\u8fd9\u91cc\u7b80\u5355\u5730\u5b9e\u73b0\u4e3a\u8fd4\u56de int \uff09\u3002\u6211\u4eec\u9700\u8981\u505a\u7684\u662f\u7ed9\u60f3\u8981\u6ee1\u8db3\u63a5\u53e3\u7684\u7c7b\u578b\u5b9e\u73b0 Rank() \u65b9\u6cd5\uff1a \u793a\u4f8b 11.17 multi_interfaces_poly.go \uff1a //multi_interfaces_poly.go package main import \"fmt\" type Shaper interface { Area () float32 } type TopologicalGenus interface { Rank () int } type Square struct { side float32 } func ( sq * Square ) Area () float32 { return sq . side * sq . side } func ( sq * Square ) Rank () int { return 1 } type Rectangle struct { length , width float32 } func ( r Rectangle ) Area () float32 { return r . length * r . width } func ( r Rectangle ) Rank () int { return 2 } func main () { r := Rectangle { 5 , 3 } // Area() of Rectangle needs a value q := & Square { 5 } // Area() of Square needs a pointer shapes := [] Shaper { r , q } fmt . Println ( \"Looping through shapes for area ...\" ) for n , _ := range shapes { fmt . Println ( \"Shape details: \" , shapes [ n ]) fmt . Println ( \"Area of this shape is: \" , shapes [ n ]. Area ()) } topgen := [] TopologicalGenus { r , q } fmt . Println ( \"Looping through topgen for rank ...\" ) for n , _ := range topgen { fmt . Println ( \"Shape details: \" , topgen [ n ]) fmt . Println ( \"Topological Genus of this shape is: \" , topgen [ n ]. Rank ()) } } \u8f93\u51fa\uff1a Looping through shapes for area ... Shape details: {5 3} Area of this shape is: 15 Shape details: &{5} Area of this shape is: 25 Looping through topgen for rank ... Shape details: {5 3} Topological Genus of this shape is: 2 Shape details: &{5} Topological Genus of this shape is: 1 \u6240\u4ee5\u4f60\u4e0d\u7528\u63d0\u524d\u8bbe\u8ba1\u51fa\u6240\u6709\u7684\u63a5\u53e3\uff1b \u6574\u4e2a\u8bbe\u8ba1\u53ef\u4ee5\u6301\u7eed\u6f14\u8fdb\uff0c\u800c\u4e0d\u7528\u5e9f\u5f03\u4e4b\u524d\u7684\u51b3\u5b9a \u3002\u7c7b\u578b\u8981\u5b9e\u73b0\u67d0\u4e2a\u63a5\u53e3\uff0c\u5b83\u672c\u8eab\u4e0d\u7528\u6539\u53d8\uff0c\u4f60\u53ea\u9700\u8981\u5728\u8fd9\u4e2a\u7c7b\u578b\u4e0a\u5b9e\u73b0\u65b0\u7684\u65b9\u6cd5\u3002 11.12.4 \u663e\u5f0f\u5730\u6307\u660e\u7c7b\u578b\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3 \u00b6 \u5982\u679c\u4f60\u5e0c\u671b\u6ee1\u8db3\u67d0\u4e2a\u63a5\u53e3\u7684\u7c7b\u578b\u663e\u5f0f\u5730\u58f0\u660e\u5b83\u4eec\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u63a5\u53e3\uff0c\u4f60\u53ef\u4ee5\u5411\u63a5\u53e3\u7684\u65b9\u6cd5\u96c6\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u5177\u6709\u63cf\u8ff0\u6027\u540d\u5b57\u7684\u65b9\u6cd5\u3002\u4f8b\u5982\uff1a type Fooer interface { Foo () ImplementsFooer () } \u7c7b\u578b Bar \u5fc5\u987b\u5b9e\u73b0 ImplementsFooer \u65b9\u6cd5\u6765\u6ee1\u8db3 Fooer \u63a5\u53e3\uff0c\u4ee5\u6e05\u695a\u5730\u8bb0\u5f55\u8fd9\u4e2a\u4e8b\u5b9e\u3002 type Bar struct {} func ( b Bar ) ImplementsFooer () {} func ( b Bar ) Foo () {} \u5927\u90e8\u5206\u4ee3\u7801\u5e76\u4e0d\u4f7f\u7528\u8fd9\u6837\u7684\u7ea6\u675f\uff0c\u56e0\u4e3a\u5b83\u9650\u5236\u4e86\u63a5\u53e3\u7684\u5b9e\u7528\u6027\u3002 \u4f46\u662f\u6709\u4e9b\u65f6\u5019\uff0c\u8fd9\u6837\u7684\u7ea6\u675f\u5728\u5927\u91cf\u76f8\u4f3c\u7684\u63a5\u53e3\u4e2d\u88ab\u7528\u6765\u89e3\u51b3\u6b67\u4e49\u3002 11.12.5 \u7a7a\u63a5\u53e3\u548c\u51fd\u6570\u91cd\u8f7d \u00b6 \u5728 6.1 \u8282\u4e2d, \u6211\u4eec\u770b\u5230\u51fd\u6570\u91cd\u8f7d\u662f\u4e0d\u88ab\u5141\u8bb8\u7684\u3002\u5728 Go \u8bed\u8a00\u4e2d\u51fd\u6570\u91cd\u8f7d\u53ef\u4ee5\u7528\u53ef\u53d8\u53c2\u6570 ...T \u4f5c\u4e3a\u51fd\u6570\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u6765\u5b9e\u73b0\uff08\u53c2\u89c1 6.3 \u8282\uff09\u3002\u5982\u679c\u6211\u4eec\u628a T \u6362\u4e3a\u7a7a\u63a5\u53e3\uff0c\u90a3\u4e48\u53ef\u4ee5\u77e5\u9053\u4efb\u4f55\u7c7b\u578b\u7684\u53d8\u91cf\u90fd\u662f\u6ee1\u8db3 T (\u7a7a\u63a5\u53e3\uff09\u7c7b\u578b\u7684\uff0c\u8fd9\u6837\u5c31\u5141\u8bb8\u6211\u4eec\u4f20\u9012\u4efb\u4f55\u6570\u91cf\u4efb\u4f55\u7c7b\u578b\u7684\u53c2\u6570\u7ed9\u51fd\u6570\uff0c\u5373\u91cd\u8f7d\u7684\u5b9e\u9645\u542b\u4e49\u3002 \u51fd\u6570 fmt.Printf \u5c31\u662f\u8fd9\u6837\u505a\u7684\uff1a fmt . Printf ( format string , a ... interface {}) ( n int , errno error ) \u8fd9\u4e2a\u51fd\u6570\u901a\u8fc7\u679a\u4e3e slice \u7c7b\u578b\u7684\u5b9e\u53c2\u52a8\u6001\u786e\u5b9a\u6240\u6709\u53c2\u6570\u7684\u7c7b\u578b\uff0c\u5e76\u67e5\u770b\u6bcf\u4e2a\u7c7b\u578b\u662f\u5426\u5b9e\u73b0\u4e86 String() \u65b9\u6cd5\uff0c\u5982\u679c\u662f\u5c31\u7528\u4e8e\u4ea7\u751f\u8f93\u51fa\u4fe1\u606f\u3002\u6211\u4eec\u53ef\u4ee5\u56de\u5230 11.10 \u8282\u67e5\u770b\u8fd9\u4e9b\u7ec6\u8282\u3002 11.12.6 \u63a5\u53e3\u7684\u7ee7\u627f \u00b6 \u5f53\u4e00\u4e2a\u7c7b\u578b\u5305\u542b\uff08\u5185\u5d4c\uff09\u53e6\u4e00\u4e2a\u7c7b\u578b\uff08\u5b9e\u73b0\u4e86\u4e00\u4e2a\u6216\u591a\u4e2a\u63a5\u53e3\uff09\u7684\u6307\u9488\u65f6\uff0c\u8fd9\u4e2a\u7c7b\u578b\u5c31\u53ef\u4ee5\u4f7f\u7528\uff08\u53e6\u4e00\u4e2a\u7c7b\u578b\uff09\u6240\u6709\u7684\u63a5\u53e3\u65b9\u6cd5\u3002 \u4f8b\u5982\uff1a type Task struct { Command string * log . Logger } \u8fd9\u4e2a\u7c7b\u578b\u7684\u5de5\u5382\u65b9\u6cd5\u50cf\u8fd9\u6837\uff1a func NewTask ( command string , logger * log . Logger ) * Task { return & Task { command , logger } } \u5f53 log.Logger \u5b9e\u73b0\u4e86 Log() \u65b9\u6cd5\u540e\uff0c Task \u7684\u5b9e\u4f8b task \u5c31\u53ef\u4ee5\u8c03\u7528\u8be5\u65b9\u6cd5\uff1a task . Log () \u7c7b\u578b\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f\u591a\u4e2a\u63a5\u53e3\u6765\u63d0\u4f9b\u50cf*\u591a\u91cd\u7ee7\u627f*\u4e00\u6837\u7684\u7279\u6027\uff1a type ReaderWriter struct { * io . Reader * io . Writer } \u4e0a\u9762\u6982\u8ff0\u7684\u539f\u7406\u88ab\u5e94\u7528\u4e8e\u6574\u4e2a Go \u5305\uff0c\u591a\u6001\u7528\u5f97\u8d8a\u591a\uff0c\u4ee3\u7801\u5c31\u76f8\u5bf9\u8d8a\u5c11\uff08\u53c2\u89c1 12.8 \u8282 \uff09\u3002\u8fd9\u88ab\u8ba4\u4e3a\u662f Go \u7f16\u7a0b\u4e2d\u7684\u91cd\u8981\u7684\u6700\u4f73\u5b9e\u8df5\u3002 \u6709\u7528\u7684\u63a5\u53e3\u53ef\u4ee5\u5728\u5f00\u53d1\u7684\u8fc7\u7a0b\u4e2d\u88ab\u5f52\u7eb3\u51fa\u6765\u3002\u6dfb\u52a0\u65b0\u63a5\u53e3\u975e\u5e38\u5bb9\u6613\uff0c\u56e0\u4e3a\u5df2\u6709\u7684\u7c7b\u578b\u4e0d\u7528\u53d8\u52a8\uff08\u4ec5\u4ec5\u9700\u8981\u5b9e\u73b0\u65b0\u63a5\u53e3\u7684\u65b9\u6cd5\uff09\u3002\u5df2\u6709\u7684\u51fd\u6570\u53ef\u4ee5\u6269\u5c55\u4e3a\u4f7f\u7528\u63a5\u53e3\u7c7b\u578b\u7684\u7ea6\u675f\u6027\u53c2\u6570\uff1a\u901a\u5e38\u53ea\u6709\u51fd\u6570\u7b7e\u540d\u9700\u8981\u6539\u53d8\u3002\u5bf9\u6bd4\u57fa\u4e8e\u7c7b\u7684 OO \u7c7b\u578b\u7684\u8bed\u8a00\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5219\u9700\u8981\u9002\u5e94\u6574\u4e2a\u7c7b\u5c42\u6b21\u7ed3\u6784\u7684\u53d8\u5316\u3002 \u7ec3\u4e60 11.11 \uff1a map_function_interface.go \uff1a \u5728\u7ec3\u4e60 7.13 \u4e2d\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a map() \u51fd\u6570\u6765\u4f7f\u7528 int \u5207\u7247 ( map_function.go )\u3002 \u901a\u8fc7\u7a7a\u63a5\u53e3\u548c\u7c7b\u578b\u65ad\u8a00\uff0c\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5199\u4e00\u4e2a\u53ef\u4ee5\u5e94\u7528\u4e8e\u8bb8\u591a\u7c7b\u578b\u7684*\u6cdb\u578b*\u7684 map() \u51fd\u6570\uff0c\u4e3a int \u548c string \u6784\u5efa\u4e00\u4e2a\u628a int \u503c\u52a0\u500d\u548c\u5c06\u5b57\u7b26\u4e32\u503c\u4e0e\u5176\u81ea\u8eab\u8fde\u63a5\uff08\u8bd1\u8005\u6ce8\uff1a\u5373 \"abc\" \u53d8\u6210 \"abcabc\" \uff09\u7684 map() \u51fd\u6570 mapFunc() \u3002 \u63d0\u793a\uff1a\u4e3a\u4e86\u53ef\u8bfb\u6027\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a interface{} \u7684\u522b\u540d\uff0c\u6bd4\u5982\uff1a type obj interface{} \u3002 \u7ec3\u4e60 11.12 \uff1a map_function_interface_var.go \uff1a \u7a0d\u5fae\u6539\u53d8\u7ec3\u4e60 11.11\uff0c\u5141\u8bb8 mapFunc() \u63a5\u6536\u4e0d\u5b9a\u6570\u91cf\u7684 items \u3002 \u7ec3\u4e60 11.13 \uff1a main_stack.go \u2014 stack/stack_general.go \uff1a \u5728\u7ec3\u4e60 10.16 \u548c 10.17 \u4e2d\u6211\u4eec\u5f00\u53d1\u4e86\u4e00\u4e9b\u6808\u7ed3\u6784\u7c7b\u578b\u3002\u4f46\u662f\u5b83\u4eec\u88ab\u9650\u5236\u4e3a\u67d0\u79cd\u56fa\u5b9a\u7684\u5185\u5efa\u7c7b\u578b\u3002\u73b0\u5728\u7528\u4e00\u4e2a\u5143\u7d20\u7c7b\u578b\u662f interface{} \uff08\u7a7a\u63a5\u53e3\uff09\u7684\u5207\u7247\u5f00\u53d1\u4e00\u4e2a\u901a\u7528\u7684\u6808\u7c7b\u578b\u3002 \u5b9e\u73b0\u4e0b\u9762\u7684\u6808\u65b9\u6cd5\uff1a Len () int IsEmpty () bool Push ( x interface {}) Pop () ( interface {}, error ) Pop() \u6539\u53d8\u6808\u5e76\u8fd4\u56de\u6700\u9876\u90e8\u7684\u5143\u7d20\uff1b Top() \u53ea\u8fd4\u56de\u6700\u9876\u90e8\u5143\u7d20\u3002 \u5728\u4e3b\u7a0b\u5e8f\u4e2d\u6784\u5efa\u4e00\u4e2a\u5145\u6ee1\u4e0d\u540c\u7c7b\u578b\u5143\u7d20\u7684\u6808\uff0c\u7136\u540e\u5f39\u51fa\u5e76\u6253\u5370\u6240\u6709\u5143\u7d20\u7684\u503c\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Printf \u548c\u53cd\u5c04 \u4e0b\u4e00\u8282\uff1a \u603b\u7ed3\uff1aGo \u4e2d\u7684\u9762\u5411\u5bf9\u8c61","title":"11.12 \u63a5\u53e3\u4e0e\u52a8\u6001\u7c7b\u578b"},{"location":"11.12/#1112","text":"","title":"11.12 \u63a5\u53e3\u4e0e\u52a8\u6001\u7c7b\u578b"},{"location":"11.12/#11121-go","text":"\u5728\u7ecf\u5178\u7684\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\uff08\u50cf C++\uff0cJava \u548c C#\uff09\u4e2d\u6570\u636e\u548c\u65b9\u6cd5\u88ab\u5c01\u88c5\u4e3a*\u7c7b*\u7684\u6982\u5ff5\uff1a\u7c7b\u5305\u542b\u5b83\u4eec\u4e24\u8005\uff0c\u5e76\u4e14\u4e0d\u80fd\u5265\u79bb\u3002 Go \u6ca1\u6709\u7c7b\uff1a\u6570\u636e\uff08\u7ed3\u6784\u4f53\u6216\u66f4\u4e00\u822c\u7684\u7c7b\u578b\uff09\u548c\u65b9\u6cd5\u662f\u4e00\u79cd\u677e\u8026\u5408\u7684\u6b63\u4ea4\u5173\u7cfb\u3002 Go \u4e2d\u7684\u63a5\u53e3\u8ddf Java/C# \u7c7b\u4f3c\uff1a\u90fd\u662f\u5fc5\u987b\u63d0\u4f9b\u4e00\u4e2a\u6307\u5b9a\u65b9\u6cd5\u96c6\u7684\u5b9e\u73b0\u3002\u4f46\u662f\u66f4\u52a0\u7075\u6d3b\u901a\u7528\uff1a\u4efb\u4f55\u63d0\u4f9b\u4e86\u63a5\u53e3\u65b9\u6cd5\u5b9e\u73b0\u4ee3\u7801\u7684\u7c7b\u578b\u90fd\u9690\u5f0f\u5730\u5b9e\u73b0\u4e86\u8be5\u63a5\u53e3\uff0c\u800c\u4e0d\u7528\u663e\u5f0f\u5730\u58f0\u660e\u3002 \u548c\u5176\u5b83\u8bed\u8a00\u76f8\u6bd4\uff0cGo \u662f\u552f\u4e00\u7ed3\u5408\u4e86\u63a5\u53e3\u503c\uff0c\u9759\u6001\u7c7b\u578b\u68c0\u67e5\uff08\u662f\u5426\u8be5\u7c7b\u578b\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3\uff09\uff0c\u8fd0\u884c\u65f6\u52a8\u6001\u8f6c\u6362\u7684\u8bed\u8a00\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u663e\u5f0f\u5730\u58f0\u660e\u7c7b\u578b\u662f\u5426\u6ee1\u8db3\u67d0\u4e2a\u63a5\u53e3\u3002\u8be5\u7279\u6027\u5141\u8bb8\u6211\u4eec\u5728\u4e0d\u6539\u53d8\u5df2\u6709\u7684\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u5b9a\u4e49\u548c\u4f7f\u7528\u65b0\u63a5\u53e3\u3002 \u63a5\u6536\u4e00\u4e2a\uff08\u6216\u591a\u4e2a\uff09\u63a5\u53e3\u7c7b\u578b\u4f5c\u4e3a\u53c2\u6570\u7684\u51fd\u6570\uff0c\u5176**\u5b9e\u53c2**\u53ef\u4ee5\u662f\u4efb\u4f55\u5b9e\u73b0\u4e86\u8be5\u63a5\u53e3\u7684\u7c7b\u578b\u7684\u53d8\u91cf\u3002 \u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3\u7684\u7c7b\u578b\u53ef\u4ee5\u88ab\u4f20\u7ed9\u4efb\u4f55\u4ee5\u6b64\u63a5\u53e3\u4e3a\u53c2\u6570\u7684\u51fd\u6570 \u3002 \u7c7b\u4f3c\u4e8e Python \u548c Ruby \u8fd9\u7c7b\u52a8\u6001\u8bed\u8a00\u4e2d\u7684\u52a8\u6001\u7c7b\u578b (duck typing)\uff1b\u8fd9\u610f\u5473\u7740\u5bf9\u8c61\u53ef\u4ee5\u6839\u636e\u63d0\u4f9b\u7684\u65b9\u6cd5\u88ab\u5904\u7406\uff08\u4f8b\u5982\uff0c\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\uff09\uff0c\u800c\u5ffd\u7565\u5b83\u4eec\u7684\u5b9e\u9645\u7c7b\u578b\uff1a\u5b83\u4eec\u80fd\u505a\u4ec0\u4e48\u6bd4\u5b83\u4eec\u662f\u4ec0\u4e48\u66f4\u91cd\u8981\u3002 \u8fd9\u5728\u7a0b\u5e8f duck_dance.go \u4e2d\u5f97\u4ee5\u9610\u660e\uff0c\u51fd\u6570 DuckDance() \u63a5\u53d7\u4e00\u4e2a IDuck \u63a5\u53e3\u7c7b\u578b\u53d8\u91cf\u3002\u4ec5\u5f53 DuckDance() \u88ab\u5b9e\u73b0\u4e86 IDuck \u63a5\u53e3\u7684\u7c7b\u578b\u8c03\u7528\u65f6\u7a0b\u5e8f\u624d\u80fd\u7f16\u8bd1\u901a\u8fc7\u3002 \u793a\u4f8b 11.16 duck_dance.go \uff1a package main import \"fmt\" type IDuck interface { Quack () Walk () } func DuckDance ( duck IDuck ) { for i := 1 ; i <= 3 ; i ++ { duck . Quack () duck . Walk () } } type Bird struct { // ... } func ( b * Bird ) Quack () { fmt . Println ( \"I am quacking!\" ) } func ( b * Bird ) Walk () { fmt . Println ( \"I am walking!\" ) } func main () { b := new ( Bird ) DuckDance ( b ) } \u8f93\u51fa\uff1a I am quacking! I am walking! I am quacking! I am walking! I am quacking! I am walking! \u5982\u679c Bird \u6ca1\u6709\u5b9e\u73b0 Walk() \uff08\u628a\u5b83\u6ce8\u91ca\u6389\uff09\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\uff1a cannot use b (type *Bird) as type IDuck in function argument: *Bird does not implement IDuck (missing Walk method) \u5982\u679c\u5bf9 cat \u8c03\u7528\u51fd\u6570 DuckDance() \uff0cGo \u4f1a\u63d0\u793a\u7f16\u8bd1\u9519\u8bef\uff0c\u4f46\u662f Python \u548c Ruby \u4f1a\u4ee5\u8fd0\u884c\u65f6\u9519\u8bef\u7ed3\u675f\u3002","title":"11.12.1 Go \u7684\u52a8\u6001\u7c7b\u578b"},{"location":"11.12/#11122","text":"\u50cf Python\uff0cRuby \u8fd9\u7c7b\u8bed\u8a00\uff0c\u52a8\u6001\u7c7b\u578b\u662f\u5ef6\u8fdf\u7ed1\u5b9a\u7684\uff08\u5728\u8fd0\u884c\u65f6\u8fdb\u884c\uff09\uff1a\u65b9\u6cd5\u53ea\u662f\u7528\u53c2\u6570\u548c\u53d8\u91cf\u7b80\u5355\u5730\u8c03\u7528\uff0c\u7136\u540e\u5728\u8fd0\u884c\u65f6\u624d\u89e3\u6790\uff08\u5b83\u4eec\u5f88\u53ef\u80fd\u6709\u50cf responds_to \u8fd9\u6837\u7684\u65b9\u6cd5\u6765\u68c0\u67e5\u5bf9\u8c61\u662f\u5426\u53ef\u4ee5\u54cd\u5e94\u67d0\u4e2a\u65b9\u6cd5\uff0c\u4f46\u662f\u8fd9\u4e5f\u610f\u5473\u7740\u66f4\u5927\u7684\u7f16\u7801\u91cf\u548c\u66f4\u591a\u7684\u6d4b\u8bd5\u5de5\u4f5c\uff09 Go \u7684\u5b9e\u73b0\u4e0e\u6b64\u76f8\u53cd\uff0c\u901a\u5e38\u9700\u8981\u7f16\u8bd1\u5668\u9759\u6001\u68c0\u67e5\u7684\u652f\u6301\uff1a\u5f53\u53d8\u91cf\u88ab\u8d4b\u503c\u7ed9\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u7684\u53d8\u91cf\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u68c0\u67e5\u5176\u662f\u5426\u5b9e\u73b0\u4e86\u8be5\u63a5\u53e3\u7684\u6240\u6709\u51fd\u6570\u3002\u5982\u679c\u65b9\u6cd5\u8c03\u7528\u4f5c\u7528\u4e8e\u50cf interface{} \u8fd9\u6837\u7684\u201c\u6cdb\u578b\u201d\u4e0a\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u7c7b\u578b\u65ad\u8a00\uff08\u53c2\u89c1 11.3 \u8282\uff09\u6765\u68c0\u67e5\u53d8\u91cf\u662f\u5426\u5b9e\u73b0\u4e86\u76f8\u5e94\u63a5\u53e3\u3002 \u4f8b\u5982\uff0c\u4f60\u7528\u4e0d\u540c\u7684\u7c7b\u578b\u8868\u793a XML \u8f93\u51fa\u6d41\u4e2d\u7684\u4e0d\u540c\u5b9e\u4f53\u3002\u7136\u540e\u6211\u4eec\u4e3a XML \u5b9a\u4e49\u4e00\u4e2a\u5982\u4e0b\u7684\u201c\u5199\u201d\u63a5\u53e3\uff08\u751a\u81f3\u53ef\u4ee5\u628a\u5b83\u5b9a\u4e49\u4e3a\u79c1\u6709\u63a5\u53e3\uff09\uff1a type xmlWriter interface { WriteXML ( w io . Writer ) error } \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u9002\u7528\u4e8e\u8be5\u6d41\u7c7b\u578b\u7684\u4efb\u4f55\u53d8\u91cf\u7684 StreamXML() \u51fd\u6570\uff0c\u5e76\u7528\u7c7b\u578b\u65ad\u8a00\u68c0\u67e5\u4f20\u5165\u7684\u53d8\u91cf\u662f\u5426\u5b9e\u73b0\u4e86\u8be5\u63a5\u53e3\uff1b\u5982\u679c\u6ca1\u6709\uff0c\u6211\u4eec\u5c31\u8c03\u7528\u5185\u5efa\u7684 encodeToXML() \u6765\u5b8c\u6210\u76f8\u5e94\u5de5\u4f5c\uff1a // Exported XML streaming function. func StreamXML ( v interface {}, w io . Writer ) error { if xw , ok := v .( xmlWriter ); ok { // It\u2019s an xmlWriter, use method of asserted type. return xw . WriteXML ( w ) } // No implementation, so we have to use our own function (with perhaps reflection): return encodeToXML ( v , w ) } // Internal XML encoding function. func encodeToXML ( v interface {}, w io . Writer ) error { // ... } Go \u5728\u8fd9\u91cc\u7528\u4e86\u548c gob \u76f8\u540c\u7684\u673a\u5236\uff1a\u5b9a\u4e49\u4e86\u4e24\u4e2a\u63a5\u53e3 GobEncoder \u548c GobDecoder \u3002\u8fd9\u6837\u5c31\u5141\u8bb8\u7c7b\u578b\u81ea\u5df1\u5b9e\u73b0\u4ece\u6d41\u7f16\u89e3\u7801\u7684\u5177\u4f53\u65b9\u5f0f\uff1b\u5982\u679c\u6ca1\u6709\u5b9e\u73b0\u5c31\u4f7f\u7528\u6807\u51c6\u7684\u53cd\u5c04\u65b9\u5f0f\u3002 \u56e0\u6b64 Go \u63d0\u4f9b\u4e86\u52a8\u6001\u8bed\u8a00\u7684\u4f18\u70b9\uff0c\u5374\u6ca1\u6709\u5176\u4ed6\u52a8\u6001\u8bed\u8a00\u5728\u8fd0\u884c\u65f6\u53ef\u80fd\u53d1\u751f\u9519\u8bef\u7684\u7f3a\u70b9\u3002 \u5bf9\u4e8e\u52a8\u6001\u8bed\u8a00\u975e\u5e38\u91cd\u8981\u7684\u5355\u5143\u6d4b\u8bd5\u6765\u8bf4\uff0c\u8fd9\u6837\u5373\u53ef\u4ee5\u51cf\u5c11\u5355\u5143\u6d4b\u8bd5\u7684\u90e8\u5206\u9700\u6c42\uff0c\u53c8\u53ef\u4ee5\u53d1\u6325\u76f8\u5f53\u5927\u7684\u4f5c\u7528\u3002 Go \u7684\u63a5\u53e3\u63d0\u9ad8\u4e86\u4ee3\u7801\u7684\u5206\u79bb\u5ea6\uff0c\u6539\u5584\u4e86\u4ee3\u7801\u7684\u590d\u7528\u6027\uff0c\u4f7f\u5f97\u4ee3\u7801\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u7684\u8bbe\u8ba1\u6a21\u5f0f\u66f4\u5bb9\u6613\u5b9e\u73b0\u3002\u7528 Go \u63a5\u53e3\u8fd8\u80fd\u5b9e\u73b0\u201c\u4f9d\u8d56\u6ce8\u5165\u6a21\u5f0f\u201d\u3002","title":"11.12.2 \u52a8\u6001\u65b9\u6cd5\u8c03\u7528"},{"location":"11.12/#11123","text":"*\u63d0\u53d6\u63a5\u53e3*\u662f\u975e\u5e38\u6709\u7528\u7684\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u53ef\u4ee5\u51cf\u5c11\u9700\u8981\u7684\u7c7b\u578b\u548c\u65b9\u6cd5\u6570\u91cf\uff0c\u800c\u4e14\u4e0d\u9700\u8981\u50cf\u4f20\u7edf\u7684\u57fa\u4e8e\u7c7b\u7684\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u90a3\u6837\u7ef4\u62a4\u6574\u4e2a\u7684\u7c7b\u5c42\u6b21\u7ed3\u6784\u3002 Go \u63a5\u53e3\u53ef\u4ee5\u8ba9\u5f00\u53d1\u8005\u627e\u51fa\u81ea\u5df1\u5199\u7684\u7a0b\u5e8f\u4e2d\u7684\u7c7b\u578b\u3002\u5047\u8bbe\u6709\u4e00\u4e9b\u62e5\u6709\u5171\u540c\u884c\u4e3a\u7684\u5bf9\u8c61\uff0c\u5e76\u4e14\u5f00\u53d1\u8005\u60f3\u8981\u62bd\u8c61\u51fa\u8fd9\u4e9b\u884c\u4e3a\uff0c\u8fd9\u65f6\u5c31\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u63a5\u53e3\u6765\u4f7f\u7528\u3002 \u6211\u4eec\u6765\u6269\u5c55 11.1 \u8282\u7684\u793a\u4f8b 11.2 interfaces_poly.go \uff0c\u5047\u8bbe\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u65b0\u7684\u63a5\u53e3 TopologicalGenus \uff0c\u7528\u6765\u7ed9 shape \u6392\u5e8f\uff08\u8fd9\u91cc\u7b80\u5355\u5730\u5b9e\u73b0\u4e3a\u8fd4\u56de int \uff09\u3002\u6211\u4eec\u9700\u8981\u505a\u7684\u662f\u7ed9\u60f3\u8981\u6ee1\u8db3\u63a5\u53e3\u7684\u7c7b\u578b\u5b9e\u73b0 Rank() \u65b9\u6cd5\uff1a \u793a\u4f8b 11.17 multi_interfaces_poly.go \uff1a //multi_interfaces_poly.go package main import \"fmt\" type Shaper interface { Area () float32 } type TopologicalGenus interface { Rank () int } type Square struct { side float32 } func ( sq * Square ) Area () float32 { return sq . side * sq . side } func ( sq * Square ) Rank () int { return 1 } type Rectangle struct { length , width float32 } func ( r Rectangle ) Area () float32 { return r . length * r . width } func ( r Rectangle ) Rank () int { return 2 } func main () { r := Rectangle { 5 , 3 } // Area() of Rectangle needs a value q := & Square { 5 } // Area() of Square needs a pointer shapes := [] Shaper { r , q } fmt . Println ( \"Looping through shapes for area ...\" ) for n , _ := range shapes { fmt . Println ( \"Shape details: \" , shapes [ n ]) fmt . Println ( \"Area of this shape is: \" , shapes [ n ]. Area ()) } topgen := [] TopologicalGenus { r , q } fmt . Println ( \"Looping through topgen for rank ...\" ) for n , _ := range topgen { fmt . Println ( \"Shape details: \" , topgen [ n ]) fmt . Println ( \"Topological Genus of this shape is: \" , topgen [ n ]. Rank ()) } } \u8f93\u51fa\uff1a Looping through shapes for area ... Shape details: {5 3} Area of this shape is: 15 Shape details: &{5} Area of this shape is: 25 Looping through topgen for rank ... Shape details: {5 3} Topological Genus of this shape is: 2 Shape details: &{5} Topological Genus of this shape is: 1 \u6240\u4ee5\u4f60\u4e0d\u7528\u63d0\u524d\u8bbe\u8ba1\u51fa\u6240\u6709\u7684\u63a5\u53e3\uff1b \u6574\u4e2a\u8bbe\u8ba1\u53ef\u4ee5\u6301\u7eed\u6f14\u8fdb\uff0c\u800c\u4e0d\u7528\u5e9f\u5f03\u4e4b\u524d\u7684\u51b3\u5b9a \u3002\u7c7b\u578b\u8981\u5b9e\u73b0\u67d0\u4e2a\u63a5\u53e3\uff0c\u5b83\u672c\u8eab\u4e0d\u7528\u6539\u53d8\uff0c\u4f60\u53ea\u9700\u8981\u5728\u8fd9\u4e2a\u7c7b\u578b\u4e0a\u5b9e\u73b0\u65b0\u7684\u65b9\u6cd5\u3002","title":"11.12.3 \u63a5\u53e3\u7684\u63d0\u53d6"},{"location":"11.12/#11124","text":"\u5982\u679c\u4f60\u5e0c\u671b\u6ee1\u8db3\u67d0\u4e2a\u63a5\u53e3\u7684\u7c7b\u578b\u663e\u5f0f\u5730\u58f0\u660e\u5b83\u4eec\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u63a5\u53e3\uff0c\u4f60\u53ef\u4ee5\u5411\u63a5\u53e3\u7684\u65b9\u6cd5\u96c6\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u5177\u6709\u63cf\u8ff0\u6027\u540d\u5b57\u7684\u65b9\u6cd5\u3002\u4f8b\u5982\uff1a type Fooer interface { Foo () ImplementsFooer () } \u7c7b\u578b Bar \u5fc5\u987b\u5b9e\u73b0 ImplementsFooer \u65b9\u6cd5\u6765\u6ee1\u8db3 Fooer \u63a5\u53e3\uff0c\u4ee5\u6e05\u695a\u5730\u8bb0\u5f55\u8fd9\u4e2a\u4e8b\u5b9e\u3002 type Bar struct {} func ( b Bar ) ImplementsFooer () {} func ( b Bar ) Foo () {} \u5927\u90e8\u5206\u4ee3\u7801\u5e76\u4e0d\u4f7f\u7528\u8fd9\u6837\u7684\u7ea6\u675f\uff0c\u56e0\u4e3a\u5b83\u9650\u5236\u4e86\u63a5\u53e3\u7684\u5b9e\u7528\u6027\u3002 \u4f46\u662f\u6709\u4e9b\u65f6\u5019\uff0c\u8fd9\u6837\u7684\u7ea6\u675f\u5728\u5927\u91cf\u76f8\u4f3c\u7684\u63a5\u53e3\u4e2d\u88ab\u7528\u6765\u89e3\u51b3\u6b67\u4e49\u3002","title":"11.12.4 \u663e\u5f0f\u5730\u6307\u660e\u7c7b\u578b\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3"},{"location":"11.12/#11125","text":"\u5728 6.1 \u8282\u4e2d, \u6211\u4eec\u770b\u5230\u51fd\u6570\u91cd\u8f7d\u662f\u4e0d\u88ab\u5141\u8bb8\u7684\u3002\u5728 Go \u8bed\u8a00\u4e2d\u51fd\u6570\u91cd\u8f7d\u53ef\u4ee5\u7528\u53ef\u53d8\u53c2\u6570 ...T \u4f5c\u4e3a\u51fd\u6570\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u6765\u5b9e\u73b0\uff08\u53c2\u89c1 6.3 \u8282\uff09\u3002\u5982\u679c\u6211\u4eec\u628a T \u6362\u4e3a\u7a7a\u63a5\u53e3\uff0c\u90a3\u4e48\u53ef\u4ee5\u77e5\u9053\u4efb\u4f55\u7c7b\u578b\u7684\u53d8\u91cf\u90fd\u662f\u6ee1\u8db3 T (\u7a7a\u63a5\u53e3\uff09\u7c7b\u578b\u7684\uff0c\u8fd9\u6837\u5c31\u5141\u8bb8\u6211\u4eec\u4f20\u9012\u4efb\u4f55\u6570\u91cf\u4efb\u4f55\u7c7b\u578b\u7684\u53c2\u6570\u7ed9\u51fd\u6570\uff0c\u5373\u91cd\u8f7d\u7684\u5b9e\u9645\u542b\u4e49\u3002 \u51fd\u6570 fmt.Printf \u5c31\u662f\u8fd9\u6837\u505a\u7684\uff1a fmt . Printf ( format string , a ... interface {}) ( n int , errno error ) \u8fd9\u4e2a\u51fd\u6570\u901a\u8fc7\u679a\u4e3e slice \u7c7b\u578b\u7684\u5b9e\u53c2\u52a8\u6001\u786e\u5b9a\u6240\u6709\u53c2\u6570\u7684\u7c7b\u578b\uff0c\u5e76\u67e5\u770b\u6bcf\u4e2a\u7c7b\u578b\u662f\u5426\u5b9e\u73b0\u4e86 String() \u65b9\u6cd5\uff0c\u5982\u679c\u662f\u5c31\u7528\u4e8e\u4ea7\u751f\u8f93\u51fa\u4fe1\u606f\u3002\u6211\u4eec\u53ef\u4ee5\u56de\u5230 11.10 \u8282\u67e5\u770b\u8fd9\u4e9b\u7ec6\u8282\u3002","title":"11.12.5 \u7a7a\u63a5\u53e3\u548c\u51fd\u6570\u91cd\u8f7d"},{"location":"11.12/#11126","text":"\u5f53\u4e00\u4e2a\u7c7b\u578b\u5305\u542b\uff08\u5185\u5d4c\uff09\u53e6\u4e00\u4e2a\u7c7b\u578b\uff08\u5b9e\u73b0\u4e86\u4e00\u4e2a\u6216\u591a\u4e2a\u63a5\u53e3\uff09\u7684\u6307\u9488\u65f6\uff0c\u8fd9\u4e2a\u7c7b\u578b\u5c31\u53ef\u4ee5\u4f7f\u7528\uff08\u53e6\u4e00\u4e2a\u7c7b\u578b\uff09\u6240\u6709\u7684\u63a5\u53e3\u65b9\u6cd5\u3002 \u4f8b\u5982\uff1a type Task struct { Command string * log . Logger } \u8fd9\u4e2a\u7c7b\u578b\u7684\u5de5\u5382\u65b9\u6cd5\u50cf\u8fd9\u6837\uff1a func NewTask ( command string , logger * log . Logger ) * Task { return & Task { command , logger } } \u5f53 log.Logger \u5b9e\u73b0\u4e86 Log() \u65b9\u6cd5\u540e\uff0c Task \u7684\u5b9e\u4f8b task \u5c31\u53ef\u4ee5\u8c03\u7528\u8be5\u65b9\u6cd5\uff1a task . Log () \u7c7b\u578b\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f\u591a\u4e2a\u63a5\u53e3\u6765\u63d0\u4f9b\u50cf*\u591a\u91cd\u7ee7\u627f*\u4e00\u6837\u7684\u7279\u6027\uff1a type ReaderWriter struct { * io . Reader * io . Writer } \u4e0a\u9762\u6982\u8ff0\u7684\u539f\u7406\u88ab\u5e94\u7528\u4e8e\u6574\u4e2a Go \u5305\uff0c\u591a\u6001\u7528\u5f97\u8d8a\u591a\uff0c\u4ee3\u7801\u5c31\u76f8\u5bf9\u8d8a\u5c11\uff08\u53c2\u89c1 12.8 \u8282 \uff09\u3002\u8fd9\u88ab\u8ba4\u4e3a\u662f Go \u7f16\u7a0b\u4e2d\u7684\u91cd\u8981\u7684\u6700\u4f73\u5b9e\u8df5\u3002 \u6709\u7528\u7684\u63a5\u53e3\u53ef\u4ee5\u5728\u5f00\u53d1\u7684\u8fc7\u7a0b\u4e2d\u88ab\u5f52\u7eb3\u51fa\u6765\u3002\u6dfb\u52a0\u65b0\u63a5\u53e3\u975e\u5e38\u5bb9\u6613\uff0c\u56e0\u4e3a\u5df2\u6709\u7684\u7c7b\u578b\u4e0d\u7528\u53d8\u52a8\uff08\u4ec5\u4ec5\u9700\u8981\u5b9e\u73b0\u65b0\u63a5\u53e3\u7684\u65b9\u6cd5\uff09\u3002\u5df2\u6709\u7684\u51fd\u6570\u53ef\u4ee5\u6269\u5c55\u4e3a\u4f7f\u7528\u63a5\u53e3\u7c7b\u578b\u7684\u7ea6\u675f\u6027\u53c2\u6570\uff1a\u901a\u5e38\u53ea\u6709\u51fd\u6570\u7b7e\u540d\u9700\u8981\u6539\u53d8\u3002\u5bf9\u6bd4\u57fa\u4e8e\u7c7b\u7684 OO \u7c7b\u578b\u7684\u8bed\u8a00\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5219\u9700\u8981\u9002\u5e94\u6574\u4e2a\u7c7b\u5c42\u6b21\u7ed3\u6784\u7684\u53d8\u5316\u3002 \u7ec3\u4e60 11.11 \uff1a map_function_interface.go \uff1a \u5728\u7ec3\u4e60 7.13 \u4e2d\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a map() \u51fd\u6570\u6765\u4f7f\u7528 int \u5207\u7247 ( map_function.go )\u3002 \u901a\u8fc7\u7a7a\u63a5\u53e3\u548c\u7c7b\u578b\u65ad\u8a00\uff0c\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5199\u4e00\u4e2a\u53ef\u4ee5\u5e94\u7528\u4e8e\u8bb8\u591a\u7c7b\u578b\u7684*\u6cdb\u578b*\u7684 map() \u51fd\u6570\uff0c\u4e3a int \u548c string \u6784\u5efa\u4e00\u4e2a\u628a int \u503c\u52a0\u500d\u548c\u5c06\u5b57\u7b26\u4e32\u503c\u4e0e\u5176\u81ea\u8eab\u8fde\u63a5\uff08\u8bd1\u8005\u6ce8\uff1a\u5373 \"abc\" \u53d8\u6210 \"abcabc\" \uff09\u7684 map() \u51fd\u6570 mapFunc() \u3002 \u63d0\u793a\uff1a\u4e3a\u4e86\u53ef\u8bfb\u6027\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a interface{} \u7684\u522b\u540d\uff0c\u6bd4\u5982\uff1a type obj interface{} \u3002 \u7ec3\u4e60 11.12 \uff1a map_function_interface_var.go \uff1a \u7a0d\u5fae\u6539\u53d8\u7ec3\u4e60 11.11\uff0c\u5141\u8bb8 mapFunc() \u63a5\u6536\u4e0d\u5b9a\u6570\u91cf\u7684 items \u3002 \u7ec3\u4e60 11.13 \uff1a main_stack.go \u2014 stack/stack_general.go \uff1a \u5728\u7ec3\u4e60 10.16 \u548c 10.17 \u4e2d\u6211\u4eec\u5f00\u53d1\u4e86\u4e00\u4e9b\u6808\u7ed3\u6784\u7c7b\u578b\u3002\u4f46\u662f\u5b83\u4eec\u88ab\u9650\u5236\u4e3a\u67d0\u79cd\u56fa\u5b9a\u7684\u5185\u5efa\u7c7b\u578b\u3002\u73b0\u5728\u7528\u4e00\u4e2a\u5143\u7d20\u7c7b\u578b\u662f interface{} \uff08\u7a7a\u63a5\u53e3\uff09\u7684\u5207\u7247\u5f00\u53d1\u4e00\u4e2a\u901a\u7528\u7684\u6808\u7c7b\u578b\u3002 \u5b9e\u73b0\u4e0b\u9762\u7684\u6808\u65b9\u6cd5\uff1a Len () int IsEmpty () bool Push ( x interface {}) Pop () ( interface {}, error ) Pop() \u6539\u53d8\u6808\u5e76\u8fd4\u56de\u6700\u9876\u90e8\u7684\u5143\u7d20\uff1b Top() \u53ea\u8fd4\u56de\u6700\u9876\u90e8\u5143\u7d20\u3002 \u5728\u4e3b\u7a0b\u5e8f\u4e2d\u6784\u5efa\u4e00\u4e2a\u5145\u6ee1\u4e0d\u540c\u7c7b\u578b\u5143\u7d20\u7684\u6808\uff0c\u7136\u540e\u5f39\u51fa\u5e76\u6253\u5370\u6240\u6709\u5143\u7d20\u7684\u503c\u3002","title":"11.12.6 \u63a5\u53e3\u7684\u7ee7\u627f"},{"location":"11.12/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Printf \u548c\u53cd\u5c04 \u4e0b\u4e00\u8282\uff1a \u603b\u7ed3\uff1aGo \u4e2d\u7684\u9762\u5411\u5bf9\u8c61","title":"\u94fe\u63a5"},{"location":"11.13/","text":"11.13 \u603b\u7ed3\uff1aGo \u4e2d\u7684\u9762\u5411\u5bf9\u8c61 \u00b6 \u6211\u4eec\u603b\u7ed3\u4e00\u4e0b\u524d\u9762\u770b\u5230\u7684\uff1aGo \u6ca1\u6709\u7c7b\uff0c\u800c\u662f\u677e\u8026\u5408\u7684\u7c7b\u578b\u3001\u65b9\u6cd5\u5bf9\u63a5\u53e3\u7684\u5b9e\u73b0\u3002 OO \u8bed\u8a00\u6700\u91cd\u8981\u7684\u4e09\u4e2a\u65b9\u9762\u5206\u522b\u662f\uff1a\u5c01\u88c5\u3001\u7ee7\u627f\u548c\u591a\u6001\uff0c\u5728 Go \u4e2d\u5b83\u4eec\u662f\u600e\u6837\u8868\u73b0\u7684\u5462\uff1f \u5c01\u88c5\uff08\u6570\u636e\u9690\u85cf\uff09\uff1a\u548c\u522b\u7684 OO \u8bed\u8a00\u6709 4 \u4e2a\u6216\u66f4\u591a\u7684\u8bbf\u95ee\u5c42\u6b21\u76f8\u6bd4\uff0cGo \u628a\u5b83\u7b80\u5316\u4e3a\u4e86 2 \u5c42\uff08\u53c2\u89c1 4.2 \u8282 \u7684\u53ef\u89c1\u6027\u89c4\u5219\uff09: 1\uff09\u5305\u8303\u56f4\u5185\u7684\uff1a\u901a\u8fc7\u6807\u8bc6\u7b26\u9996\u5b57\u6bcd\u5c0f\u5199\uff0c*\u5bf9\u8c61*\u53ea\u5728\u5b83\u6240\u5728\u7684\u5305\u5185\u53ef\u89c1 2\uff09\u53ef\u5bfc\u51fa\u7684\uff1a\u901a\u8fc7\u6807\u8bc6\u7b26\u9996\u5b57\u6bcd\u5927\u5199\uff0c*\u5bf9\u8c61*\u5bf9\u6240\u5728\u5305\u4ee5\u5916\u4e5f\u53ef\u89c1 \u7c7b\u578b\u53ea\u62e5\u6709\u81ea\u5df1\u6240\u5728\u5305\u4e2d\u5b9a\u4e49\u7684\u65b9\u6cd5\u3002 \u7ee7\u627f\uff1a\u7528\u7ec4\u5408\u5b9e\u73b0\uff1a\u5185\u5d4c\u4e00\u4e2a\uff08\u6216\u591a\u4e2a\uff09\u5305\u542b\u60f3\u8981\u7684\u884c\u4e3a\uff08\u5b57\u6bb5\u548c\u65b9\u6cd5\uff09\u7684\u7c7b\u578b\uff1b\u591a\u91cd\u7ee7\u627f\u53ef\u4ee5\u901a\u8fc7\u5185\u5d4c\u591a\u4e2a\u7c7b\u578b\u5b9e\u73b0 \u591a\u6001\uff1a\u7528\u63a5\u53e3\u5b9e\u73b0\uff1a\u67d0\u4e2a\u7c7b\u578b\u7684\u5b9e\u4f8b\u53ef\u4ee5\u8d4b\u7ed9\u5b83\u6240\u5b9e\u73b0\u7684\u4efb\u610f\u63a5\u53e3\u7c7b\u578b\u7684\u53d8\u91cf\u3002\u7c7b\u578b\u548c\u63a5\u53e3\u662f\u677e\u8026\u5408\u7684\uff0c\u5e76\u4e14\u591a\u91cd\u7ee7\u627f\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0\u591a\u4e2a\u63a5\u53e3\u5b9e\u73b0\u3002Go \u63a5\u53e3\u4e0d\u662f Java \u548c C# \u63a5\u53e3\u7684\u53d8\u4f53\uff0c\u800c\u4e14\u63a5\u53e3\u95f4\u662f\u4e0d\u76f8\u5173\u7684\uff0c\u5e76\u4e14\u662f\u5927\u89c4\u6a21\u7f16\u7a0b\u548c\u53ef\u9002\u5e94\u7684\u6f14\u8fdb\u578b\u8bbe\u8ba1\u7684\u5173\u952e\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u63a5\u53e3\u4e0e\u52a8\u6001\u7c7b\u578b \u4e0b\u4e00\u8282\uff1a \u7ed3\u6784\u4f53\uff0c\u96c6\u5408\u548c\u9ad8\u9636\u51fd\u6570","title":"11.13 \u603b\u7ed3 Go \u4e2d\u7684\u9762\u5411\u5bf9\u8c61"},{"location":"11.13/#1113-go","text":"\u6211\u4eec\u603b\u7ed3\u4e00\u4e0b\u524d\u9762\u770b\u5230\u7684\uff1aGo \u6ca1\u6709\u7c7b\uff0c\u800c\u662f\u677e\u8026\u5408\u7684\u7c7b\u578b\u3001\u65b9\u6cd5\u5bf9\u63a5\u53e3\u7684\u5b9e\u73b0\u3002 OO \u8bed\u8a00\u6700\u91cd\u8981\u7684\u4e09\u4e2a\u65b9\u9762\u5206\u522b\u662f\uff1a\u5c01\u88c5\u3001\u7ee7\u627f\u548c\u591a\u6001\uff0c\u5728 Go \u4e2d\u5b83\u4eec\u662f\u600e\u6837\u8868\u73b0\u7684\u5462\uff1f \u5c01\u88c5\uff08\u6570\u636e\u9690\u85cf\uff09\uff1a\u548c\u522b\u7684 OO \u8bed\u8a00\u6709 4 \u4e2a\u6216\u66f4\u591a\u7684\u8bbf\u95ee\u5c42\u6b21\u76f8\u6bd4\uff0cGo \u628a\u5b83\u7b80\u5316\u4e3a\u4e86 2 \u5c42\uff08\u53c2\u89c1 4.2 \u8282 \u7684\u53ef\u89c1\u6027\u89c4\u5219\uff09: 1\uff09\u5305\u8303\u56f4\u5185\u7684\uff1a\u901a\u8fc7\u6807\u8bc6\u7b26\u9996\u5b57\u6bcd\u5c0f\u5199\uff0c*\u5bf9\u8c61*\u53ea\u5728\u5b83\u6240\u5728\u7684\u5305\u5185\u53ef\u89c1 2\uff09\u53ef\u5bfc\u51fa\u7684\uff1a\u901a\u8fc7\u6807\u8bc6\u7b26\u9996\u5b57\u6bcd\u5927\u5199\uff0c*\u5bf9\u8c61*\u5bf9\u6240\u5728\u5305\u4ee5\u5916\u4e5f\u53ef\u89c1 \u7c7b\u578b\u53ea\u62e5\u6709\u81ea\u5df1\u6240\u5728\u5305\u4e2d\u5b9a\u4e49\u7684\u65b9\u6cd5\u3002 \u7ee7\u627f\uff1a\u7528\u7ec4\u5408\u5b9e\u73b0\uff1a\u5185\u5d4c\u4e00\u4e2a\uff08\u6216\u591a\u4e2a\uff09\u5305\u542b\u60f3\u8981\u7684\u884c\u4e3a\uff08\u5b57\u6bb5\u548c\u65b9\u6cd5\uff09\u7684\u7c7b\u578b\uff1b\u591a\u91cd\u7ee7\u627f\u53ef\u4ee5\u901a\u8fc7\u5185\u5d4c\u591a\u4e2a\u7c7b\u578b\u5b9e\u73b0 \u591a\u6001\uff1a\u7528\u63a5\u53e3\u5b9e\u73b0\uff1a\u67d0\u4e2a\u7c7b\u578b\u7684\u5b9e\u4f8b\u53ef\u4ee5\u8d4b\u7ed9\u5b83\u6240\u5b9e\u73b0\u7684\u4efb\u610f\u63a5\u53e3\u7c7b\u578b\u7684\u53d8\u91cf\u3002\u7c7b\u578b\u548c\u63a5\u53e3\u662f\u677e\u8026\u5408\u7684\uff0c\u5e76\u4e14\u591a\u91cd\u7ee7\u627f\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0\u591a\u4e2a\u63a5\u53e3\u5b9e\u73b0\u3002Go \u63a5\u53e3\u4e0d\u662f Java \u548c C# \u63a5\u53e3\u7684\u53d8\u4f53\uff0c\u800c\u4e14\u63a5\u53e3\u95f4\u662f\u4e0d\u76f8\u5173\u7684\uff0c\u5e76\u4e14\u662f\u5927\u89c4\u6a21\u7f16\u7a0b\u548c\u53ef\u9002\u5e94\u7684\u6f14\u8fdb\u578b\u8bbe\u8ba1\u7684\u5173\u952e\u3002","title":"11.13 \u603b\u7ed3\uff1aGo \u4e2d\u7684\u9762\u5411\u5bf9\u8c61"},{"location":"11.13/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u63a5\u53e3\u4e0e\u52a8\u6001\u7c7b\u578b \u4e0b\u4e00\u8282\uff1a \u7ed3\u6784\u4f53\uff0c\u96c6\u5408\u548c\u9ad8\u9636\u51fd\u6570","title":"\u94fe\u63a5"},{"location":"11.14/","text":"11.14 \u7ed3\u6784\u4f53\u3001\u96c6\u5408\u548c\u9ad8\u9636\u51fd\u6570 \u00b6 \u901a\u5e38\u4f60\u5728\u5e94\u7528\u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u90a3\u4e48\u4f60\u4e5f\u53ef\u80fd\u9700\u8981\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684\uff08\u6307\u9488\uff09\u5bf9\u8c61\u96c6\u5408\uff0c\u6bd4\u5982\uff1a type Any interface {} type Car struct { Model string Manufacturer string BuildYear int // ... } type Cars [] * Car \u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u9ad8\u9636\u51fd\u6570\uff0c\u5b9e\u9645\u4e0a\u4e5f\u5c31\u662f\u628a\u51fd\u6570\u4f5c\u4e3a\u5b9a\u4e49\u6240\u9700\u65b9\u6cd5\uff08\u5176\u4ed6\u51fd\u6570\uff09\u7684\u53c2\u6570\uff0c\u4f8b\u5982\uff1a 1\uff09\u5b9a\u4e49\u4e00\u4e2a\u901a\u7528\u7684 Process() \u51fd\u6570\uff0c\u5b83\u63a5\u6536\u4e00\u4e2a\u4f5c\u7528\u4e8e\u6bcf\u4e00\u8f86 car \u7684 f \u51fd\u6570\u4f5c\u53c2\u6570\uff1a // Process all cars with the given function f: func ( cs Cars ) Process ( f func ( car * Car )) { for _ , c := range cs { f ( c ) } } 2\uff09\u5728\u4e0a\u9762\u7684\u57fa\u7840\u4e0a\uff0c\u5b9e\u73b0\u4e00\u4e2a\u67e5\u627e\u51fd\u6570\u6765\u83b7\u53d6\u5b50\u96c6\u5408\uff0c\u5e76\u5728 Process() \u4e2d\u4f20\u5165\u4e00\u4e2a\u95ed\u5305\u6267\u884c\uff08\u8fd9\u6837\u5c31\u53ef\u4ee5\u8bbf\u95ee\u5c40\u90e8\u5207\u7247 cars \uff09\uff1a // Find all cars matching a given criteria. func ( cs Cars ) FindAll ( f func ( car * Car ) bool ) Cars { cars := make ([] * Car , 0 ) cs . Process ( func ( c * Car ) { if f ( c ) { cars = append ( cars , c ) } }) return cars } 3\uff09\u5b9e\u73b0\u5bf9\u5e94\u4f5c\u7528\u7684\u529f\u6548 (Map-functionality)\uff0c\u4ece\u6bcf\u4e2a car \u5bf9\u8c61\u5f53\u4e2d\u4ea7\u51fa\u67d0\u4e9b\u4e1c\u897f\uff1a // Process cars and create new data. func ( cs Cars ) Map ( f func ( car * Car ) Any ) [] Any { result := make ([] Any , 0 ) ix := 0 cs . Process ( func ( c * Car ) { result [ ix ] = f ( c ) ix ++ }) return result } \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e0b\u9762\u8fd9\u6837\u7684\u5177\u4f53\u67e5\u8be2\uff1a allNewBMWs := allCars . FindAll ( func ( car * Car ) bool { return ( car . Manufacturer == \"BMW\" ) && ( car . BuildYear > 2010 ) }) 4\uff09\u6211\u4eec\u4e5f\u53ef\u4ee5\u6839\u636e\u53c2\u6570\u8fd4\u56de\u4e0d\u540c\u7684\u51fd\u6570\u3002\u4e5f\u8bb8\u6211\u4eec\u60f3\u6839\u636e\u4e0d\u540c\u7684\u5382\u5546\u6dfb\u52a0\u6c7d\u8f66\u5230\u4e0d\u540c\u7684\u96c6\u5408\uff0c\u4f46\u662f\u8fd9\uff08\u8fd9\u79cd\u6620\u5c04\u5173\u7cfb\uff09\u53ef\u80fd\u4f1a\u662f\u4f1a\u6539\u53d8\u7684\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6765\u4ea7\u751f\u7279\u5b9a\u7684\u6dfb\u52a0\u51fd\u6570\u548c map \u96c6\uff1a func MakeSortedAppender ( manufacturers [] string )( func ( car * Car ), map [ string ] Cars ) { // Prepare maps of sorted cars. sortedCars := make ( map [ string ] Cars ) for _ , m := range manufacturers { sortedCars [ m ] = make ([] * Car , 0 ) } sortedCars [ \"Default\" ] = make ([] * Car , 0 ) // Prepare appender function: appender := func ( c * Car ) { if _ , ok := sortedCars [ c . Manufacturer ]; ok { sortedCars [ c . Manufacturer ] = append ( sortedCars [ c . Manufacturer ], c ) } else { sortedCars [ \"Default\" ] = append ( sortedCars [ \"Default\" ], c ) } } return appender , sortedCars } \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u628a\u6c7d\u8f66\u5206\u7c7b\u4e3a\u72ec\u7acb\u7684\u96c6\u5408\uff0c\u50cf\u8fd9\u6837\uff1a manufacturers := [] string { \"Ford\" , \"Aston Martin\" , \"Land Rover\" , \"BMW\" , \"Jaguar\" } sortedAppender , sortedCars := MakeSortedAppender ( manufacturers ) allUnsortedCars . Process ( sortedAppender ) BMWCount := len ( sortedCars [ \"BMW\" ]) \u6211\u4eec\u8ba9\u8fd9\u4e9b\u4ee3\u7801\u5728\u4e0b\u9762\u7684\u7a0b\u5e8f cars.go \u4e2d\u6267\u884c\uff1a \u793a\u4f8b 11.18 cars.go \uff1a // cars.go package main import ( \"fmt\" ) type Any interface {} type Car struct { Model string Manufacturer string BuildYear int // ... } type Cars [] * Car func main () { // make some cars: ford := & Car { \"Fiesta\" , \"Ford\" , 2008 } bmw := & Car { \"XL 450\" , \"BMW\" , 2011 } merc := & Car { \"D600\" , \"Mercedes\" , 2009 } bmw2 := & Car { \"X 800\" , \"BMW\" , 2008 } // query: allCars := Cars ([] * Car { ford , bmw , merc , bmw2 }) allNewBMWs := allCars . FindAll ( func ( car * Car ) bool { return ( car . Manufacturer == \"BMW\" ) && ( car . BuildYear > 2010 ) }) fmt . Println ( \"AllCars: \" , allCars ) fmt . Println ( \"New BMWs: \" , allNewBMWs ) // manufacturers := [] string { \"Ford\" , \"Aston Martin\" , \"Land Rover\" , \"BMW\" , \"Jaguar\" } sortedAppender , sortedCars := MakeSortedAppender ( manufacturers ) allCars . Process ( sortedAppender ) fmt . Println ( \"Map sortedCars: \" , sortedCars ) BMWCount := len ( sortedCars [ \"BMW\" ]) fmt . Println ( \"We have \" , BMWCount , \" BMWs\" ) } // Process all cars with the given function f: func ( cs Cars ) Process ( f func ( car * Car )) { for _ , c := range cs { f ( c ) } } // Find all cars matching a given criteria. func ( cs Cars ) FindAll ( f func ( car * Car ) bool ) Cars { cars := make ([] * Car , 0 ) cs . Process ( func ( c * Car ) { if f ( c ) { cars = append ( cars , c ) } }) return cars } // Process cars and create new data. func ( cs Cars ) Map ( f func ( car * Car ) Any ) [] Any { result := make ([] Any , len ( cs )) ix := 0 cs . Process ( func ( c * Car ) { result [ ix ] = f ( c ) ix ++ }) return result } func MakeSortedAppender ( manufacturers [] string ) ( func ( car * Car ), map [ string ] Cars ) { // Prepare maps of sorted cars. sortedCars := make ( map [ string ] Cars ) for _ , m := range manufacturers { sortedCars [ m ] = make ([] * Car , 0 ) } sortedCars [ \"Default\" ] = make ([] * Car , 0 ) // Prepare appender function: appender := func ( c * Car ) { if _ , ok := sortedCars [ c . Manufacturer ]; ok { sortedCars [ c . Manufacturer ] = append ( sortedCars [ c . Manufacturer ], c ) } else { sortedCars [ \"Default\" ] = append ( sortedCars [ \"Default\" ], c ) } } return appender , sortedCars } \u8f93\u51fa\uff1a AllCars: [0xf8400038a0 0xf840003bd0 0xf840003ba0 0xf840003b70] New BMWs: [0xf840003bd0] Map sortedCars: map[Default:[0xf840003ba0] Jaguar:[] Land Rover:[] BMW:[0xf840003bd0 0xf840003b70] Aston Martin:[] Ford:[0xf8400038a0]] We have 2 BMWs \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Go \u4e2d\u7684\u9762\u5411\u5bf9\u8c61 \u4e0b\u4e00\u7ae0\uff1a \u8bfb\u5199\u6570\u636e","title":"11.14 \u7ed3\u6784\u4f53\u3001\u96c6\u5408\u548c\u9ad8\u9636\u51fd\u6570"},{"location":"11.14/#1114","text":"\u901a\u5e38\u4f60\u5728\u5e94\u7528\u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u90a3\u4e48\u4f60\u4e5f\u53ef\u80fd\u9700\u8981\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684\uff08\u6307\u9488\uff09\u5bf9\u8c61\u96c6\u5408\uff0c\u6bd4\u5982\uff1a type Any interface {} type Car struct { Model string Manufacturer string BuildYear int // ... } type Cars [] * Car \u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u9ad8\u9636\u51fd\u6570\uff0c\u5b9e\u9645\u4e0a\u4e5f\u5c31\u662f\u628a\u51fd\u6570\u4f5c\u4e3a\u5b9a\u4e49\u6240\u9700\u65b9\u6cd5\uff08\u5176\u4ed6\u51fd\u6570\uff09\u7684\u53c2\u6570\uff0c\u4f8b\u5982\uff1a 1\uff09\u5b9a\u4e49\u4e00\u4e2a\u901a\u7528\u7684 Process() \u51fd\u6570\uff0c\u5b83\u63a5\u6536\u4e00\u4e2a\u4f5c\u7528\u4e8e\u6bcf\u4e00\u8f86 car \u7684 f \u51fd\u6570\u4f5c\u53c2\u6570\uff1a // Process all cars with the given function f: func ( cs Cars ) Process ( f func ( car * Car )) { for _ , c := range cs { f ( c ) } } 2\uff09\u5728\u4e0a\u9762\u7684\u57fa\u7840\u4e0a\uff0c\u5b9e\u73b0\u4e00\u4e2a\u67e5\u627e\u51fd\u6570\u6765\u83b7\u53d6\u5b50\u96c6\u5408\uff0c\u5e76\u5728 Process() \u4e2d\u4f20\u5165\u4e00\u4e2a\u95ed\u5305\u6267\u884c\uff08\u8fd9\u6837\u5c31\u53ef\u4ee5\u8bbf\u95ee\u5c40\u90e8\u5207\u7247 cars \uff09\uff1a // Find all cars matching a given criteria. func ( cs Cars ) FindAll ( f func ( car * Car ) bool ) Cars { cars := make ([] * Car , 0 ) cs . Process ( func ( c * Car ) { if f ( c ) { cars = append ( cars , c ) } }) return cars } 3\uff09\u5b9e\u73b0\u5bf9\u5e94\u4f5c\u7528\u7684\u529f\u6548 (Map-functionality)\uff0c\u4ece\u6bcf\u4e2a car \u5bf9\u8c61\u5f53\u4e2d\u4ea7\u51fa\u67d0\u4e9b\u4e1c\u897f\uff1a // Process cars and create new data. func ( cs Cars ) Map ( f func ( car * Car ) Any ) [] Any { result := make ([] Any , 0 ) ix := 0 cs . Process ( func ( c * Car ) { result [ ix ] = f ( c ) ix ++ }) return result } \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e0b\u9762\u8fd9\u6837\u7684\u5177\u4f53\u67e5\u8be2\uff1a allNewBMWs := allCars . FindAll ( func ( car * Car ) bool { return ( car . Manufacturer == \"BMW\" ) && ( car . BuildYear > 2010 ) }) 4\uff09\u6211\u4eec\u4e5f\u53ef\u4ee5\u6839\u636e\u53c2\u6570\u8fd4\u56de\u4e0d\u540c\u7684\u51fd\u6570\u3002\u4e5f\u8bb8\u6211\u4eec\u60f3\u6839\u636e\u4e0d\u540c\u7684\u5382\u5546\u6dfb\u52a0\u6c7d\u8f66\u5230\u4e0d\u540c\u7684\u96c6\u5408\uff0c\u4f46\u662f\u8fd9\uff08\u8fd9\u79cd\u6620\u5c04\u5173\u7cfb\uff09\u53ef\u80fd\u4f1a\u662f\u4f1a\u6539\u53d8\u7684\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6765\u4ea7\u751f\u7279\u5b9a\u7684\u6dfb\u52a0\u51fd\u6570\u548c map \u96c6\uff1a func MakeSortedAppender ( manufacturers [] string )( func ( car * Car ), map [ string ] Cars ) { // Prepare maps of sorted cars. sortedCars := make ( map [ string ] Cars ) for _ , m := range manufacturers { sortedCars [ m ] = make ([] * Car , 0 ) } sortedCars [ \"Default\" ] = make ([] * Car , 0 ) // Prepare appender function: appender := func ( c * Car ) { if _ , ok := sortedCars [ c . Manufacturer ]; ok { sortedCars [ c . Manufacturer ] = append ( sortedCars [ c . Manufacturer ], c ) } else { sortedCars [ \"Default\" ] = append ( sortedCars [ \"Default\" ], c ) } } return appender , sortedCars } \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u628a\u6c7d\u8f66\u5206\u7c7b\u4e3a\u72ec\u7acb\u7684\u96c6\u5408\uff0c\u50cf\u8fd9\u6837\uff1a manufacturers := [] string { \"Ford\" , \"Aston Martin\" , \"Land Rover\" , \"BMW\" , \"Jaguar\" } sortedAppender , sortedCars := MakeSortedAppender ( manufacturers ) allUnsortedCars . Process ( sortedAppender ) BMWCount := len ( sortedCars [ \"BMW\" ]) \u6211\u4eec\u8ba9\u8fd9\u4e9b\u4ee3\u7801\u5728\u4e0b\u9762\u7684\u7a0b\u5e8f cars.go \u4e2d\u6267\u884c\uff1a \u793a\u4f8b 11.18 cars.go \uff1a // cars.go package main import ( \"fmt\" ) type Any interface {} type Car struct { Model string Manufacturer string BuildYear int // ... } type Cars [] * Car func main () { // make some cars: ford := & Car { \"Fiesta\" , \"Ford\" , 2008 } bmw := & Car { \"XL 450\" , \"BMW\" , 2011 } merc := & Car { \"D600\" , \"Mercedes\" , 2009 } bmw2 := & Car { \"X 800\" , \"BMW\" , 2008 } // query: allCars := Cars ([] * Car { ford , bmw , merc , bmw2 }) allNewBMWs := allCars . FindAll ( func ( car * Car ) bool { return ( car . Manufacturer == \"BMW\" ) && ( car . BuildYear > 2010 ) }) fmt . Println ( \"AllCars: \" , allCars ) fmt . Println ( \"New BMWs: \" , allNewBMWs ) // manufacturers := [] string { \"Ford\" , \"Aston Martin\" , \"Land Rover\" , \"BMW\" , \"Jaguar\" } sortedAppender , sortedCars := MakeSortedAppender ( manufacturers ) allCars . Process ( sortedAppender ) fmt . Println ( \"Map sortedCars: \" , sortedCars ) BMWCount := len ( sortedCars [ \"BMW\" ]) fmt . Println ( \"We have \" , BMWCount , \" BMWs\" ) } // Process all cars with the given function f: func ( cs Cars ) Process ( f func ( car * Car )) { for _ , c := range cs { f ( c ) } } // Find all cars matching a given criteria. func ( cs Cars ) FindAll ( f func ( car * Car ) bool ) Cars { cars := make ([] * Car , 0 ) cs . Process ( func ( c * Car ) { if f ( c ) { cars = append ( cars , c ) } }) return cars } // Process cars and create new data. func ( cs Cars ) Map ( f func ( car * Car ) Any ) [] Any { result := make ([] Any , len ( cs )) ix := 0 cs . Process ( func ( c * Car ) { result [ ix ] = f ( c ) ix ++ }) return result } func MakeSortedAppender ( manufacturers [] string ) ( func ( car * Car ), map [ string ] Cars ) { // Prepare maps of sorted cars. sortedCars := make ( map [ string ] Cars ) for _ , m := range manufacturers { sortedCars [ m ] = make ([] * Car , 0 ) } sortedCars [ \"Default\" ] = make ([] * Car , 0 ) // Prepare appender function: appender := func ( c * Car ) { if _ , ok := sortedCars [ c . Manufacturer ]; ok { sortedCars [ c . Manufacturer ] = append ( sortedCars [ c . Manufacturer ], c ) } else { sortedCars [ \"Default\" ] = append ( sortedCars [ \"Default\" ], c ) } } return appender , sortedCars } \u8f93\u51fa\uff1a AllCars: [0xf8400038a0 0xf840003bd0 0xf840003ba0 0xf840003b70] New BMWs: [0xf840003bd0] Map sortedCars: map[Default:[0xf840003ba0] Jaguar:[] Land Rover:[] BMW:[0xf840003bd0 0xf840003b70] Aston Martin:[] Ford:[0xf8400038a0]] We have 2 BMWs","title":"11.14 \u7ed3\u6784\u4f53\u3001\u96c6\u5408\u548c\u9ad8\u9636\u51fd\u6570"},{"location":"11.14/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Go \u4e2d\u7684\u9762\u5411\u5bf9\u8c61 \u4e0b\u4e00\u7ae0\uff1a \u8bfb\u5199\u6570\u636e","title":"\u94fe\u63a5"},{"location":"11.2/","text":"11.2 \u63a5\u53e3\u5d4c\u5957\u63a5\u53e3 \u00b6 \u4e00\u4e2a\u63a5\u53e3\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u5176\u4ed6\u7684\u63a5\u53e3\uff0c\u8fd9\u76f8\u5f53\u4e8e\u76f4\u63a5\u5c06\u8fd9\u4e9b\u5185\u5d4c\u63a5\u53e3\u7684\u65b9\u6cd5\u5217\u4e3e\u5728\u5916\u5c42\u63a5\u53e3\u4e2d\u4e00\u6837\u3002 \u6bd4\u5982\u63a5\u53e3 File \u5305\u542b\u4e86 ReadWrite \u548c Lock \u7684\u6240\u6709\u65b9\u6cd5\uff0c\u5b83\u8fd8\u989d\u5916\u6709\u4e00\u4e2a Close() \u65b9\u6cd5\u3002 type ReadWrite interface { Read ( b Buffer ) bool Write ( b Buffer ) bool } type Lock interface { Lock () Unlock () } type File interface { ReadWrite Lock Close () } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u63a5\u53e3\u662f\u4ec0\u4e48 \u4e0b\u4e00\u8282\uff1a \u5982\u4f55\u68c0\u6d4b\u548c\u8f6c\u6362\u63a5\u53e3\u53d8\u91cf\u7684\u7c7b\u578b\uff1a\u7c7b\u578b\u65ad\u8a00","title":"11.2 \u63a5\u53e3\u5d4c\u5957\u63a5\u53e3"},{"location":"11.2/#112","text":"\u4e00\u4e2a\u63a5\u53e3\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u5176\u4ed6\u7684\u63a5\u53e3\uff0c\u8fd9\u76f8\u5f53\u4e8e\u76f4\u63a5\u5c06\u8fd9\u4e9b\u5185\u5d4c\u63a5\u53e3\u7684\u65b9\u6cd5\u5217\u4e3e\u5728\u5916\u5c42\u63a5\u53e3\u4e2d\u4e00\u6837\u3002 \u6bd4\u5982\u63a5\u53e3 File \u5305\u542b\u4e86 ReadWrite \u548c Lock \u7684\u6240\u6709\u65b9\u6cd5\uff0c\u5b83\u8fd8\u989d\u5916\u6709\u4e00\u4e2a Close() \u65b9\u6cd5\u3002 type ReadWrite interface { Read ( b Buffer ) bool Write ( b Buffer ) bool } type Lock interface { Lock () Unlock () } type File interface { ReadWrite Lock Close () }","title":"11.2 \u63a5\u53e3\u5d4c\u5957\u63a5\u53e3"},{"location":"11.2/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u63a5\u53e3\u662f\u4ec0\u4e48 \u4e0b\u4e00\u8282\uff1a \u5982\u4f55\u68c0\u6d4b\u548c\u8f6c\u6362\u63a5\u53e3\u53d8\u91cf\u7684\u7c7b\u578b\uff1a\u7c7b\u578b\u65ad\u8a00","title":"\u94fe\u63a5"},{"location":"11.3/","text":"11.3 \u7c7b\u578b\u65ad\u8a00\uff1a\u5982\u4f55\u68c0\u6d4b\u548c\u8f6c\u6362\u63a5\u53e3\u53d8\u91cf\u7684\u7c7b\u578b \u00b6 \u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u7684\u53d8\u91cf varI \u4e2d\u53ef\u4ee5\u5305\u542b\u4efb\u4f55\u7c7b\u578b\u7684\u503c\uff0c\u5fc5\u987b\u6709\u4e00\u79cd\u65b9\u5f0f\u6765\u68c0\u6d4b\u5b83\u7684 \u52a8\u6001 \u7c7b\u578b\uff0c\u5373\u8fd0\u884c\u65f6\u5728\u53d8\u91cf\u4e2d\u5b58\u50a8\u7684\u503c\u7684\u5b9e\u9645\u7c7b\u578b\u3002\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u52a8\u6001\u7c7b\u578b\u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u4f46\u662f\u5b83\u603b\u662f\u53ef\u4ee5\u5206\u914d\u7ed9\u63a5\u53e3\u53d8\u91cf\u672c\u8eab\u7684\u7c7b\u578b\u3002\u901a\u5e38\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 \u7c7b\u578b\u65ad\u8a00 \u6765\u6d4b\u8bd5\u5728\u67d0\u4e2a\u65f6\u523b varI \u662f\u5426\u5305\u542b\u7c7b\u578b T \u7684\u503c\uff1a v := varI .( T ) // unchecked type assertion varI \u5fc5\u987b\u662f\u4e00\u4e2a\u63a5\u53e3\u53d8\u91cf \uff0c\u5426\u5219\u7f16\u8bd1\u5668\u4f1a\u62a5\u9519\uff1a invalid type assertion: varI.(T) (non-interface type (type of varI) on left) \u3002 \u7c7b\u578b\u65ad\u8a00\u53ef\u80fd\u662f\u65e0\u6548\u7684\uff0c\u867d\u7136\u7f16\u8bd1\u5668\u4f1a\u5c3d\u529b\u68c0\u67e5\u8f6c\u6362\u662f\u5426\u6709\u6548\uff0c\u4f46\u662f\u5b83\u4e0d\u53ef\u80fd\u9884\u89c1\u6240\u6709\u7684\u53ef\u80fd\u6027\u3002\u5982\u679c\u8f6c\u6362\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u5931\u8d25\u4f1a\u5bfc\u81f4\u9519\u8bef\u53d1\u751f\u3002\u66f4\u5b89\u5168\u7684\u65b9\u5f0f\u662f\u4f7f\u7528\u4ee5\u4e0b\u5f62\u5f0f\u6765\u8fdb\u884c\u7c7b\u578b\u65ad\u8a00\uff1a if v , ok := varI .( T ); ok { // checked type assertion Process ( v ) return } // varI is not of type T \u5982\u679c\u8f6c\u6362\u5408\u6cd5\uff0c v \u662f varI \u8f6c\u6362\u5230\u7c7b\u578b T \u7684\u503c\uff0c ok \u4f1a\u662f true \uff1b\u5426\u5219 v \u662f\u7c7b\u578b T \u7684\u96f6\u503c\uff0c ok \u662f false \uff0c\u4e5f\u6ca1\u6709\u8fd0\u884c\u65f6\u9519\u8bef\u53d1\u751f\u3002 \u5e94\u8be5\u603b\u662f\u4f7f\u7528\u4e0a\u9762\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u7c7b\u578b\u65ad\u8a00 \u3002 \u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u80fd\u53ea\u662f\u60f3\u5728 if \u4e2d\u6d4b\u8bd5\u4e00\u4e0b ok \u7684\u503c\uff0c\u6b64\u65f6\u4f7f\u7528\u4ee5\u4e0b\u7684\u65b9\u6cd5\u4f1a\u662f\u6700\u65b9\u4fbf\u7684\uff1a if _ , ok := varI .( T ); ok { // ... } \u793a\u4f8b 11.4 type_interfaces.go \uff1a package main import ( \"fmt\" \"math\" ) type Square struct { side float32 } type Circle struct { radius float32 } type Shaper interface { Area () float32 } func main () { var areaIntf Shaper sq1 := new ( Square ) sq1 . side = 5 areaIntf = sq1 // Is Square the type of areaIntf? if t , ok := areaIntf .( * Square ); ok { fmt . Printf ( \"The type of areaIntf is: %T\\n\" , t ) } if u , ok := areaIntf .( * Circle ); ok { fmt . Printf ( \"The type of areaIntf is: %T\\n\" , u ) } else { fmt . Println ( \"areaIntf does not contain a variable of type Circle\" ) } } func ( sq * Square ) Area () float32 { return sq . side * sq . side } func ( ci * Circle ) Area () float32 { return ci . radius * ci . radius * math . Pi } \u8f93\u51fa\uff1a The type of areaIntf is: *main.Square areaIntf does not contain a variable of type Circle \u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a\u65b0\u7c7b\u578b Circle \uff0c\u5b83\u4e5f\u5b9e\u73b0\u4e86 Shaper \u63a5\u53e3\u3002 if t, ok := areaIntf.(*Square); ok \u6d4b\u8bd5 areaIntf \u91cc\u662f\u5426\u6709\u4e00\u4e2a\u5305\u542b *Square \u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u7ed3\u679c\u662f\u786e\u5b9a\u7684\uff1b\u7136\u540e\u6211\u4eec\u6d4b\u8bd5\u5b83\u662f\u5426\u5305\u542b\u4e00\u4e2a *Circle \u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u7ed3\u679c\u662f\u5426\u5b9a\u7684\u3002 \u5907\u6ce8 \u5982\u679c\u5ffd\u7565 areaIntf.(*Square) \u4e2d\u7684 * \u53f7\uff0c\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u9519\u8bef\uff1a impossible type assertion: Square does not implement Shaper (Area method has pointer receiver) \u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u63a5\u53e3\u5d4c\u5957\u63a5\u53e3 \u4e0b\u4e00\u8282\uff1a \u7c7b\u578b\u5224\u65ad\uff1atype-switch","title":"11.3 \u7c7b\u578b\u65ad\u8a00 \u5982\u4f55\u68c0\u6d4b\u548c\u8f6c\u6362\u63a5\u53e3\u53d8\u91cf\u7684\u7c7b\u578b"},{"location":"11.3/#113","text":"\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u7684\u53d8\u91cf varI \u4e2d\u53ef\u4ee5\u5305\u542b\u4efb\u4f55\u7c7b\u578b\u7684\u503c\uff0c\u5fc5\u987b\u6709\u4e00\u79cd\u65b9\u5f0f\u6765\u68c0\u6d4b\u5b83\u7684 \u52a8\u6001 \u7c7b\u578b\uff0c\u5373\u8fd0\u884c\u65f6\u5728\u53d8\u91cf\u4e2d\u5b58\u50a8\u7684\u503c\u7684\u5b9e\u9645\u7c7b\u578b\u3002\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u52a8\u6001\u7c7b\u578b\u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u4f46\u662f\u5b83\u603b\u662f\u53ef\u4ee5\u5206\u914d\u7ed9\u63a5\u53e3\u53d8\u91cf\u672c\u8eab\u7684\u7c7b\u578b\u3002\u901a\u5e38\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 \u7c7b\u578b\u65ad\u8a00 \u6765\u6d4b\u8bd5\u5728\u67d0\u4e2a\u65f6\u523b varI \u662f\u5426\u5305\u542b\u7c7b\u578b T \u7684\u503c\uff1a v := varI .( T ) // unchecked type assertion varI \u5fc5\u987b\u662f\u4e00\u4e2a\u63a5\u53e3\u53d8\u91cf \uff0c\u5426\u5219\u7f16\u8bd1\u5668\u4f1a\u62a5\u9519\uff1a invalid type assertion: varI.(T) (non-interface type (type of varI) on left) \u3002 \u7c7b\u578b\u65ad\u8a00\u53ef\u80fd\u662f\u65e0\u6548\u7684\uff0c\u867d\u7136\u7f16\u8bd1\u5668\u4f1a\u5c3d\u529b\u68c0\u67e5\u8f6c\u6362\u662f\u5426\u6709\u6548\uff0c\u4f46\u662f\u5b83\u4e0d\u53ef\u80fd\u9884\u89c1\u6240\u6709\u7684\u53ef\u80fd\u6027\u3002\u5982\u679c\u8f6c\u6362\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u5931\u8d25\u4f1a\u5bfc\u81f4\u9519\u8bef\u53d1\u751f\u3002\u66f4\u5b89\u5168\u7684\u65b9\u5f0f\u662f\u4f7f\u7528\u4ee5\u4e0b\u5f62\u5f0f\u6765\u8fdb\u884c\u7c7b\u578b\u65ad\u8a00\uff1a if v , ok := varI .( T ); ok { // checked type assertion Process ( v ) return } // varI is not of type T \u5982\u679c\u8f6c\u6362\u5408\u6cd5\uff0c v \u662f varI \u8f6c\u6362\u5230\u7c7b\u578b T \u7684\u503c\uff0c ok \u4f1a\u662f true \uff1b\u5426\u5219 v \u662f\u7c7b\u578b T \u7684\u96f6\u503c\uff0c ok \u662f false \uff0c\u4e5f\u6ca1\u6709\u8fd0\u884c\u65f6\u9519\u8bef\u53d1\u751f\u3002 \u5e94\u8be5\u603b\u662f\u4f7f\u7528\u4e0a\u9762\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u7c7b\u578b\u65ad\u8a00 \u3002 \u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u80fd\u53ea\u662f\u60f3\u5728 if \u4e2d\u6d4b\u8bd5\u4e00\u4e0b ok \u7684\u503c\uff0c\u6b64\u65f6\u4f7f\u7528\u4ee5\u4e0b\u7684\u65b9\u6cd5\u4f1a\u662f\u6700\u65b9\u4fbf\u7684\uff1a if _ , ok := varI .( T ); ok { // ... } \u793a\u4f8b 11.4 type_interfaces.go \uff1a package main import ( \"fmt\" \"math\" ) type Square struct { side float32 } type Circle struct { radius float32 } type Shaper interface { Area () float32 } func main () { var areaIntf Shaper sq1 := new ( Square ) sq1 . side = 5 areaIntf = sq1 // Is Square the type of areaIntf? if t , ok := areaIntf .( * Square ); ok { fmt . Printf ( \"The type of areaIntf is: %T\\n\" , t ) } if u , ok := areaIntf .( * Circle ); ok { fmt . Printf ( \"The type of areaIntf is: %T\\n\" , u ) } else { fmt . Println ( \"areaIntf does not contain a variable of type Circle\" ) } } func ( sq * Square ) Area () float32 { return sq . side * sq . side } func ( ci * Circle ) Area () float32 { return ci . radius * ci . radius * math . Pi } \u8f93\u51fa\uff1a The type of areaIntf is: *main.Square areaIntf does not contain a variable of type Circle \u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a\u65b0\u7c7b\u578b Circle \uff0c\u5b83\u4e5f\u5b9e\u73b0\u4e86 Shaper \u63a5\u53e3\u3002 if t, ok := areaIntf.(*Square); ok \u6d4b\u8bd5 areaIntf \u91cc\u662f\u5426\u6709\u4e00\u4e2a\u5305\u542b *Square \u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u7ed3\u679c\u662f\u786e\u5b9a\u7684\uff1b\u7136\u540e\u6211\u4eec\u6d4b\u8bd5\u5b83\u662f\u5426\u5305\u542b\u4e00\u4e2a *Circle \u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u7ed3\u679c\u662f\u5426\u5b9a\u7684\u3002 \u5907\u6ce8 \u5982\u679c\u5ffd\u7565 areaIntf.(*Square) \u4e2d\u7684 * \u53f7\uff0c\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u9519\u8bef\uff1a impossible type assertion: Square does not implement Shaper (Area method has pointer receiver) \u3002","title":"11.3 \u7c7b\u578b\u65ad\u8a00\uff1a\u5982\u4f55\u68c0\u6d4b\u548c\u8f6c\u6362\u63a5\u53e3\u53d8\u91cf\u7684\u7c7b\u578b"},{"location":"11.3/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u63a5\u53e3\u5d4c\u5957\u63a5\u53e3 \u4e0b\u4e00\u8282\uff1a \u7c7b\u578b\u5224\u65ad\uff1atype-switch","title":"\u94fe\u63a5"},{"location":"11.4/","text":"11.4 \u7c7b\u578b\u5224\u65ad\uff1atype-switch \u00b6 \u63a5\u53e3\u53d8\u91cf\u7684\u7c7b\u578b\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u7279\u6b8a\u5f62\u5f0f\u7684 switch \u6765\u68c0\u6d4b\uff1a type-switch \uff08\u4e0b\u9762\u662f\u793a\u4f8b 11.4 \u7684\u7b2c\u4e8c\u90e8\u5206\uff09\uff1a switch t := areaIntf .( type ) { case * Square : fmt . Printf ( \"Type Square %T with value %v\\n\" , t , t ) case * Circle : fmt . Printf ( \"Type Circle %T with value %v\\n\" , t , t ) case nil : fmt . Printf ( \"nil value: nothing to check?\\n\" ) default : fmt . Printf ( \"Unexpected type %T\\n\" , t ) } \u8f93\u51fa\uff1a Type Square *main.Square with value &{5} \u53d8\u91cf t \u5f97\u5230\u4e86 areaIntf \u7684\u503c\u548c\u7c7b\u578b\uff0c\u6240\u6709 case \u8bed\u53e5\u4e2d\u5217\u4e3e\u7684\u7c7b\u578b\uff08 nil \u9664\u5916\uff09\u90fd\u5fc5\u987b\u5b9e\u73b0\u5bf9\u5e94\u7684\u63a5\u53e3\uff08\u5728\u4e0a\u4f8b\u4e2d\u5373 Shaper \uff09\uff0c\u5982\u679c\u88ab\u68c0\u6d4b\u7c7b\u578b\u6ca1\u6709\u5728 case \u8bed\u53e5\u5217\u4e3e\u7684\u7c7b\u578b\u4e2d\uff0c\u5c31\u4f1a\u6267\u884c default \u8bed\u53e5\u3002 \u53ef\u4ee5\u7528 type-switch \u8fdb\u884c\u8fd0\u884c\u65f6\u7c7b\u578b\u5206\u6790\uff0c\u4f46\u662f\u5728 type-switch \u4e0d\u5141\u8bb8\u6709 fallthrough \u3002 \u5982\u679c\u4ec5\u4ec5\u662f\u6d4b\u8bd5\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u4e0d\u7528\u5b83\u7684\u503c\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u4e0d\u9700\u8981\u8d4b\u503c\u8bed\u53e5\uff0c\u6bd4\u5982\uff1a switch areaIntf .( type ) { case * Square : // TODO case * Circle : // TODO ... default : // TODO } \u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u5c55\u793a\u4e86\u4e00\u4e2a\u7c7b\u578b\u5206\u7c7b\u51fd\u6570\uff0c\u5b83\u6709\u4e00\u4e2a\u53ef\u53d8\u957f\u5ea6\u53c2\u6570\uff0c\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\u7684\u6570\u7ec4\uff0c\u5b83\u4f1a\u6839\u636e\u6570\u7ec4\u5143\u7d20\u7684\u5b9e\u9645\u7c7b\u578b\u6267\u884c\u4e0d\u540c\u7684\u52a8\u4f5c\uff1a func classifier ( items ... interface {}) { for i , x := range items { switch x .( type ) { case bool : fmt . Printf ( \"Param #%d is a bool\\n\" , i ) case float64 : fmt . Printf ( \"Param #%d is a float64\\n\" , i ) case int , int64 : fmt . Printf ( \"Param #%d is a int\\n\" , i ) case nil : fmt . Printf ( \"Param #%d is a nil\\n\" , i ) case string : fmt . Printf ( \"Param #%d is a string\\n\" , i ) default : fmt . Printf ( \"Param #%d is unknown\\n\" , i ) } } } \u53ef\u4ee5\u8fd9\u6837\u8c03\u7528\u6b64\u65b9\u6cd5\uff1a classifier(13, -14.3, \"BELGIUM\", complex(1, 2), nil, false) \u3002 \u5728\u5904\u7406\u6765\u81ea\u4e8e\u5916\u90e8\u7684\u3001\u7c7b\u578b\u672a\u77e5\u7684\u6570\u636e\u65f6\uff0c\u6bd4\u5982\u89e3\u6790\u8bf8\u5982 JSON \u6216 XML \u7f16\u7801\u7684\u6570\u636e\uff0c\u7c7b\u578b\u6d4b\u8bd5\u548c\u8f6c\u6362\u4f1a\u975e\u5e38\u6709\u7528\u3002 \u5728\u793a\u4f8b 12.17 ( xml.go ) \u4e2d\u89e3\u6790 XML \u6587\u6863\u65f6\uff0c\u6211\u4eec\u5c31\u4f1a\u7528\u5230 type-switch \u3002 \u7ec3\u4e60 11.4 simple_interface2.go \uff1a \u63a5\u7740\u7ec3\u4e60 11.1 \u4e2d\u7684\u5185\u5bb9\uff0c\u521b\u5efa\u7b2c\u4e8c\u4e2a\u7c7b\u578b RSimple \uff0c\u5b83\u4e5f\u5b9e\u73b0\u4e86\u63a5\u53e3 Simpler \uff0c\u5199\u4e00\u4e2a\u51fd\u6570 fi() \uff0c\u4f7f\u5b83\u53ef\u4ee5\u533a\u5206 Simple \u548c RSimple \u7c7b\u578b\u7684\u53d8\u91cf\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7c7b\u578b\u65ad\u8a00\uff1a\u5982\u4f55\u68c0\u6d4b\u548c\u8f6c\u6362\u63a5\u53e3\u53d8\u91cf\u7684\u7c7b\u578b \u4e0b\u4e00\u8282\uff1a \u6d4b\u8bd5\u4e00\u4e2a\u503c\u662f\u5426\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3","title":"11.4 \u7c7b\u578b\u5224\u65ad type-switch"},{"location":"11.4/#114-type-switch","text":"\u63a5\u53e3\u53d8\u91cf\u7684\u7c7b\u578b\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u7279\u6b8a\u5f62\u5f0f\u7684 switch \u6765\u68c0\u6d4b\uff1a type-switch \uff08\u4e0b\u9762\u662f\u793a\u4f8b 11.4 \u7684\u7b2c\u4e8c\u90e8\u5206\uff09\uff1a switch t := areaIntf .( type ) { case * Square : fmt . Printf ( \"Type Square %T with value %v\\n\" , t , t ) case * Circle : fmt . Printf ( \"Type Circle %T with value %v\\n\" , t , t ) case nil : fmt . Printf ( \"nil value: nothing to check?\\n\" ) default : fmt . Printf ( \"Unexpected type %T\\n\" , t ) } \u8f93\u51fa\uff1a Type Square *main.Square with value &{5} \u53d8\u91cf t \u5f97\u5230\u4e86 areaIntf \u7684\u503c\u548c\u7c7b\u578b\uff0c\u6240\u6709 case \u8bed\u53e5\u4e2d\u5217\u4e3e\u7684\u7c7b\u578b\uff08 nil \u9664\u5916\uff09\u90fd\u5fc5\u987b\u5b9e\u73b0\u5bf9\u5e94\u7684\u63a5\u53e3\uff08\u5728\u4e0a\u4f8b\u4e2d\u5373 Shaper \uff09\uff0c\u5982\u679c\u88ab\u68c0\u6d4b\u7c7b\u578b\u6ca1\u6709\u5728 case \u8bed\u53e5\u5217\u4e3e\u7684\u7c7b\u578b\u4e2d\uff0c\u5c31\u4f1a\u6267\u884c default \u8bed\u53e5\u3002 \u53ef\u4ee5\u7528 type-switch \u8fdb\u884c\u8fd0\u884c\u65f6\u7c7b\u578b\u5206\u6790\uff0c\u4f46\u662f\u5728 type-switch \u4e0d\u5141\u8bb8\u6709 fallthrough \u3002 \u5982\u679c\u4ec5\u4ec5\u662f\u6d4b\u8bd5\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u4e0d\u7528\u5b83\u7684\u503c\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u4e0d\u9700\u8981\u8d4b\u503c\u8bed\u53e5\uff0c\u6bd4\u5982\uff1a switch areaIntf .( type ) { case * Square : // TODO case * Circle : // TODO ... default : // TODO } \u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u5c55\u793a\u4e86\u4e00\u4e2a\u7c7b\u578b\u5206\u7c7b\u51fd\u6570\uff0c\u5b83\u6709\u4e00\u4e2a\u53ef\u53d8\u957f\u5ea6\u53c2\u6570\uff0c\u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\u7684\u6570\u7ec4\uff0c\u5b83\u4f1a\u6839\u636e\u6570\u7ec4\u5143\u7d20\u7684\u5b9e\u9645\u7c7b\u578b\u6267\u884c\u4e0d\u540c\u7684\u52a8\u4f5c\uff1a func classifier ( items ... interface {}) { for i , x := range items { switch x .( type ) { case bool : fmt . Printf ( \"Param #%d is a bool\\n\" , i ) case float64 : fmt . Printf ( \"Param #%d is a float64\\n\" , i ) case int , int64 : fmt . Printf ( \"Param #%d is a int\\n\" , i ) case nil : fmt . Printf ( \"Param #%d is a nil\\n\" , i ) case string : fmt . Printf ( \"Param #%d is a string\\n\" , i ) default : fmt . Printf ( \"Param #%d is unknown\\n\" , i ) } } } \u53ef\u4ee5\u8fd9\u6837\u8c03\u7528\u6b64\u65b9\u6cd5\uff1a classifier(13, -14.3, \"BELGIUM\", complex(1, 2), nil, false) \u3002 \u5728\u5904\u7406\u6765\u81ea\u4e8e\u5916\u90e8\u7684\u3001\u7c7b\u578b\u672a\u77e5\u7684\u6570\u636e\u65f6\uff0c\u6bd4\u5982\u89e3\u6790\u8bf8\u5982 JSON \u6216 XML \u7f16\u7801\u7684\u6570\u636e\uff0c\u7c7b\u578b\u6d4b\u8bd5\u548c\u8f6c\u6362\u4f1a\u975e\u5e38\u6709\u7528\u3002 \u5728\u793a\u4f8b 12.17 ( xml.go ) \u4e2d\u89e3\u6790 XML \u6587\u6863\u65f6\uff0c\u6211\u4eec\u5c31\u4f1a\u7528\u5230 type-switch \u3002 \u7ec3\u4e60 11.4 simple_interface2.go \uff1a \u63a5\u7740\u7ec3\u4e60 11.1 \u4e2d\u7684\u5185\u5bb9\uff0c\u521b\u5efa\u7b2c\u4e8c\u4e2a\u7c7b\u578b RSimple \uff0c\u5b83\u4e5f\u5b9e\u73b0\u4e86\u63a5\u53e3 Simpler \uff0c\u5199\u4e00\u4e2a\u51fd\u6570 fi() \uff0c\u4f7f\u5b83\u53ef\u4ee5\u533a\u5206 Simple \u548c RSimple \u7c7b\u578b\u7684\u53d8\u91cf\u3002","title":"11.4 \u7c7b\u578b\u5224\u65ad\uff1atype-switch"},{"location":"11.4/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7c7b\u578b\u65ad\u8a00\uff1a\u5982\u4f55\u68c0\u6d4b\u548c\u8f6c\u6362\u63a5\u53e3\u53d8\u91cf\u7684\u7c7b\u578b \u4e0b\u4e00\u8282\uff1a \u6d4b\u8bd5\u4e00\u4e2a\u503c\u662f\u5426\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3","title":"\u94fe\u63a5"},{"location":"11.5/","text":"11.5 \u6d4b\u8bd5\u4e00\u4e2a\u503c\u662f\u5426\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3 \u00b6 \u8fd9\u662f 11.3 \u7c7b\u578b\u65ad\u8a00\u4e2d\u7684\u4e00\u4e2a\u7279\u4f8b\uff1a\u5047\u5b9a v \u662f\u4e00\u4e2a\u503c\uff0c\u7136\u540e\u6211\u4eec\u60f3\u6d4b\u8bd5\u5b83\u662f\u5426\u5b9e\u73b0\u4e86 Stringer \u63a5\u53e3\uff0c\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a type Stringer interface { String () string } if sv , ok := v .( Stringer ); ok { fmt . Printf ( \"v implements String(): %s\\n\" , sv . String ()) // note: sv, not v } Print() \u51fd\u6570\u5c31\u662f\u5982\u6b64\u68c0\u6d4b\u7c7b\u578b\u662f\u5426\u53ef\u4ee5\u6253\u5370\u81ea\u8eab\u7684\u3002 \u63a5\u53e3\u662f\u4e00\u79cd\u5951\u7ea6\uff0c\u5b9e\u73b0\u7c7b\u578b\u5fc5\u987b\u6ee1\u8db3\u5b83\uff0c\u5b83\u63cf\u8ff0\u4e86\u7c7b\u578b\u7684\u884c\u4e3a\uff0c\u89c4\u5b9a\u7c7b\u578b\u53ef\u4ee5\u505a\u4ec0\u4e48\u3002\u63a5\u53e3\u5f7b\u5e95\u5c06\u7c7b\u578b\u80fd\u505a\u4ec0\u4e48\uff0c\u4ee5\u53ca\u5982\u4f55\u505a\u5206\u79bb\u5f00\u6765\uff0c\u4f7f\u5f97\u76f8\u540c\u63a5\u53e3\u7684\u53d8\u91cf\u5728\u4e0d\u540c\u7684\u65f6\u523b\u8868\u73b0\u51fa\u4e0d\u540c\u7684\u884c\u4e3a\uff0c\u8fd9\u5c31\u662f\u591a\u6001\u7684\u672c\u8d28\u3002 \u7f16\u5199\u53c2\u6570\u662f\u63a5\u53e3\u53d8\u91cf\u7684\u51fd\u6570\uff0c\u8fd9\u4f7f\u5f97\u5b83\u4eec\u66f4\u5177\u6709\u4e00\u822c\u6027\u3002 \u4f7f\u7528\u63a5\u53e3\u4f7f\u4ee3\u7801\u66f4\u5177\u6709\u666e\u9002\u6027\u3002 \u6807\u51c6\u5e93\u91cc\u5230\u5904\u90fd\u4f7f\u7528\u4e86\u8fd9\u4e2a\u539f\u5219\uff0c\u5982\u679c\u5bf9\u63a5\u53e3\u6982\u5ff5\u6ca1\u6709\u826f\u597d\u7684\u628a\u63e1\uff0c\u662f\u4e0d\u53ef\u80fd\u7406\u89e3\u5b83\u662f\u5982\u4f55\u6784\u5efa\u7684\u3002 \u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u4f1a\u8ba8\u8bba\u4e24\u4e2a\u91cd\u8981\u7684\u4f8b\u5b50\uff0c\u8bd5\u7740\u53bb\u6df1\u5165\u7406\u89e3\u5b83\u4eec\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u66f4\u597d\u7684\u5e94\u7528\u4e0a\u9762\u7684\u539f\u5219\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7c7b\u578b\u5224\u65ad\uff1atype-switch \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528\u65b9\u6cd5\u96c6\u4e0e\u63a5\u53e3","title":"11.5 \u6d4b\u8bd5\u4e00\u4e2a\u503c\u662f\u5426\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3"},{"location":"11.5/#115","text":"\u8fd9\u662f 11.3 \u7c7b\u578b\u65ad\u8a00\u4e2d\u7684\u4e00\u4e2a\u7279\u4f8b\uff1a\u5047\u5b9a v \u662f\u4e00\u4e2a\u503c\uff0c\u7136\u540e\u6211\u4eec\u60f3\u6d4b\u8bd5\u5b83\u662f\u5426\u5b9e\u73b0\u4e86 Stringer \u63a5\u53e3\uff0c\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a type Stringer interface { String () string } if sv , ok := v .( Stringer ); ok { fmt . Printf ( \"v implements String(): %s\\n\" , sv . String ()) // note: sv, not v } Print() \u51fd\u6570\u5c31\u662f\u5982\u6b64\u68c0\u6d4b\u7c7b\u578b\u662f\u5426\u53ef\u4ee5\u6253\u5370\u81ea\u8eab\u7684\u3002 \u63a5\u53e3\u662f\u4e00\u79cd\u5951\u7ea6\uff0c\u5b9e\u73b0\u7c7b\u578b\u5fc5\u987b\u6ee1\u8db3\u5b83\uff0c\u5b83\u63cf\u8ff0\u4e86\u7c7b\u578b\u7684\u884c\u4e3a\uff0c\u89c4\u5b9a\u7c7b\u578b\u53ef\u4ee5\u505a\u4ec0\u4e48\u3002\u63a5\u53e3\u5f7b\u5e95\u5c06\u7c7b\u578b\u80fd\u505a\u4ec0\u4e48\uff0c\u4ee5\u53ca\u5982\u4f55\u505a\u5206\u79bb\u5f00\u6765\uff0c\u4f7f\u5f97\u76f8\u540c\u63a5\u53e3\u7684\u53d8\u91cf\u5728\u4e0d\u540c\u7684\u65f6\u523b\u8868\u73b0\u51fa\u4e0d\u540c\u7684\u884c\u4e3a\uff0c\u8fd9\u5c31\u662f\u591a\u6001\u7684\u672c\u8d28\u3002 \u7f16\u5199\u53c2\u6570\u662f\u63a5\u53e3\u53d8\u91cf\u7684\u51fd\u6570\uff0c\u8fd9\u4f7f\u5f97\u5b83\u4eec\u66f4\u5177\u6709\u4e00\u822c\u6027\u3002 \u4f7f\u7528\u63a5\u53e3\u4f7f\u4ee3\u7801\u66f4\u5177\u6709\u666e\u9002\u6027\u3002 \u6807\u51c6\u5e93\u91cc\u5230\u5904\u90fd\u4f7f\u7528\u4e86\u8fd9\u4e2a\u539f\u5219\uff0c\u5982\u679c\u5bf9\u63a5\u53e3\u6982\u5ff5\u6ca1\u6709\u826f\u597d\u7684\u628a\u63e1\uff0c\u662f\u4e0d\u53ef\u80fd\u7406\u89e3\u5b83\u662f\u5982\u4f55\u6784\u5efa\u7684\u3002 \u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u4f1a\u8ba8\u8bba\u4e24\u4e2a\u91cd\u8981\u7684\u4f8b\u5b50\uff0c\u8bd5\u7740\u53bb\u6df1\u5165\u7406\u89e3\u5b83\u4eec\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u66f4\u597d\u7684\u5e94\u7528\u4e0a\u9762\u7684\u539f\u5219\u3002","title":"11.5 \u6d4b\u8bd5\u4e00\u4e2a\u503c\u662f\u5426\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3"},{"location":"11.5/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7c7b\u578b\u5224\u65ad\uff1atype-switch \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528\u65b9\u6cd5\u96c6\u4e0e\u63a5\u53e3","title":"\u94fe\u63a5"},{"location":"11.6/","text":"11.6 \u4f7f\u7528\u65b9\u6cd5\u96c6\u4e0e\u63a5\u53e3 \u00b6 \u5728 \u7b2c 10.6.3 \u8282 \u53ca\u4f8b\u5b50 methodset1.go \u4e2d\u6211\u4eec\u770b\u5230\uff0c\u4f5c\u7528\u4e8e\u53d8\u91cf\u4e0a\u7684\u65b9\u6cd5\u5b9e\u9645\u4e0a\u662f\u4e0d\u533a\u5206\u53d8\u91cf\u5230\u5e95\u662f\u6307\u9488\u8fd8\u662f\u503c\u7684\u3002\u5f53\u78b0\u5230\u63a5\u53e3\u7c7b\u578b\u503c\u65f6\uff0c\u8fd9\u4f1a\u53d8\u5f97\u6709\u70b9\u590d\u6742\uff0c\u539f\u56e0\u662f\u63a5\u53e3\u53d8\u91cf\u4e2d\u5b58\u50a8\u7684\u5177\u4f53\u503c\u662f\u4e0d\u53ef\u5bfb\u5740\u7684\uff0c\u5e78\u8fd0\u7684\u662f\uff0c\u5982\u679c\u4f7f\u7528\u4e0d\u5f53\u7f16\u8bd1\u5668\u4f1a\u7ed9\u51fa\u9519\u8bef\u3002\u8003\u8651\u4e0b\u9762\u7684\u7a0b\u5e8f\uff1a \u793a\u4f8b 11.5 methodset2.go \uff1a package main import ( \"fmt\" ) type List [] int func ( l List ) Len () int { return len ( l ) } func ( l * List ) Append ( val int ) { * l = append ( * l , val ) } type Appender interface { Append ( int ) } func CountInto ( a Appender , start , end int ) { for i := start ; i <= end ; i ++ { a . Append ( i ) } } type Lener interface { Len () int } func LongEnough ( l Lener ) bool { return l . Len () * 10 > 42 } func main () { // A bare value var lst List // compiler error: // cannot use lst (type List) as type Appender in argument to CountInto: // List does not implement Appender (Append method has pointer receiver) // CountInto(lst, 1, 10) if LongEnough ( lst ) { // VALID: Identical receiver type fmt . Printf ( \"- lst is long enough\\n\" ) } // A pointer value plst := new ( List ) CountInto ( plst , 1 , 10 ) // VALID: Identical receiver type if LongEnough ( plst ) { // VALID: a *List can be dereferenced for the receiver fmt . Printf ( \"- plst is long enough\\n\" ) } } \u8ba8\u8bba \u5728 lst \u4e0a\u8c03\u7528 CountInto \u65f6\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u7f16\u8bd1\u5668\u9519\u8bef\uff0c\u56e0\u4e3a CountInto \u9700\u8981\u4e00\u4e2a Appender \uff0c\u800c\u5b83\u7684\u65b9\u6cd5 Append \u53ea\u5b9a\u4e49\u5728\u6307\u9488\u4e0a\u3002 \u5728 lst \u4e0a\u8c03\u7528 LongEnough \u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a Len \u5b9a\u4e49\u5728\u503c\u4e0a\u3002 \u5728 plst \u4e0a\u8c03\u7528 CountInto \u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a CountInto \u9700\u8981\u4e00\u4e2a Appender \uff0c\u5e76\u4e14\u5b83\u7684\u65b9\u6cd5 Append \u5b9a\u4e49\u5728\u6307\u9488\u4e0a\u3002 \u5728 plst \u4e0a\u8c03\u7528 LongEnough \u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a\u6307\u9488\u4f1a\u88ab\u81ea\u52a8\u89e3\u5f15\u7528\u3002 \u603b\u7ed3 \u5728\u63a5\u53e3\u4e0a\u8c03\u7528\u65b9\u6cd5\u65f6\uff0c\u5fc5\u987b\u6709\u548c\u65b9\u6cd5\u5b9a\u4e49\u65f6\u76f8\u540c\u7684\u63a5\u6536\u8005\u7c7b\u578b\u6216\u8005\u662f\u53ef\u4ee5\u6839\u636e\u5177\u4f53\u7c7b\u578b P \u76f4\u63a5\u8fa8\u8bc6\u7684\uff1a \u6307\u9488\u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7\u6307\u9488\u8c03\u7528 \u503c\u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7\u503c\u8c03\u7528 \u63a5\u6536\u8005\u662f\u503c\u7684\u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7\u6307\u9488\u8c03\u7528\uff0c\u56e0\u4e3a\u6307\u9488\u4f1a\u9996\u5148\u88ab\u89e3\u5f15\u7528 \u63a5\u6536\u8005\u662f\u6307\u9488\u7684\u65b9\u6cd5\u4e0d\u53ef\u4ee5\u901a\u8fc7\u503c\u8c03\u7528\uff0c\u56e0\u4e3a\u5b58\u50a8\u5728\u63a5\u53e3\u4e2d\u7684\u503c\u6ca1\u6709\u5730\u5740 \u5c06\u4e00\u4e2a\u503c\u8d4b\u503c\u7ed9\u4e00\u4e2a\u63a5\u53e3\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u786e\u4fdd\u6240\u6709\u53ef\u80fd\u7684\u63a5\u53e3\u65b9\u6cd5\u90fd\u53ef\u4ee5\u5728\u6b64\u503c\u4e0a\u88ab\u8c03\u7528\uff0c\u56e0\u6b64\u4e0d\u6b63\u786e\u7684\u8d4b\u503c\u5728\u7f16\u8bd1\u671f\u5c31\u4f1a\u5931\u8d25\u3002 \u8bd1\u6ce8 Go \u8bed\u8a00\u89c4\u8303\u5b9a\u4e49\u4e86\u63a5\u53e3\u65b9\u6cd5\u96c6\u7684\u8c03\u7528\u89c4\u5219\uff1a \u7c7b\u578b *T \u7684\u53ef\u8c03\u7528\u65b9\u6cd5\u96c6\u5305\u542b\u63a5\u53d7\u8005\u4e3a *T \u6216 T \u7684\u6240\u6709\u65b9\u6cd5\u96c6 \u7c7b\u578b T \u7684\u53ef\u8c03\u7528\u65b9\u6cd5\u96c6\u5305\u542b\u63a5\u53d7\u8005\u4e3a T \u7684\u6240\u6709\u65b9\u6cd5 \u7c7b\u578b T \u7684\u53ef\u8c03\u7528\u65b9\u6cd5\u96c6**\u4e0d**\u5305\u542b\u63a5\u53d7\u8005\u4e3a *T \u7684\u65b9\u6cd5 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6d4b\u8bd5\u4e00\u4e2a\u503c\u662f\u5426\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3 \u4e0b\u4e00\u8282\uff1a \u7b2c\u4e00\u4e2a\u4f8b\u5b50\uff1a\u4f7f\u7528 Sorter \u63a5\u53e3\u6392\u5e8f","title":"11.6 \u4f7f\u7528\u65b9\u6cd5\u96c6\u4e0e\u63a5\u53e3"},{"location":"11.6/#116","text":"\u5728 \u7b2c 10.6.3 \u8282 \u53ca\u4f8b\u5b50 methodset1.go \u4e2d\u6211\u4eec\u770b\u5230\uff0c\u4f5c\u7528\u4e8e\u53d8\u91cf\u4e0a\u7684\u65b9\u6cd5\u5b9e\u9645\u4e0a\u662f\u4e0d\u533a\u5206\u53d8\u91cf\u5230\u5e95\u662f\u6307\u9488\u8fd8\u662f\u503c\u7684\u3002\u5f53\u78b0\u5230\u63a5\u53e3\u7c7b\u578b\u503c\u65f6\uff0c\u8fd9\u4f1a\u53d8\u5f97\u6709\u70b9\u590d\u6742\uff0c\u539f\u56e0\u662f\u63a5\u53e3\u53d8\u91cf\u4e2d\u5b58\u50a8\u7684\u5177\u4f53\u503c\u662f\u4e0d\u53ef\u5bfb\u5740\u7684\uff0c\u5e78\u8fd0\u7684\u662f\uff0c\u5982\u679c\u4f7f\u7528\u4e0d\u5f53\u7f16\u8bd1\u5668\u4f1a\u7ed9\u51fa\u9519\u8bef\u3002\u8003\u8651\u4e0b\u9762\u7684\u7a0b\u5e8f\uff1a \u793a\u4f8b 11.5 methodset2.go \uff1a package main import ( \"fmt\" ) type List [] int func ( l List ) Len () int { return len ( l ) } func ( l * List ) Append ( val int ) { * l = append ( * l , val ) } type Appender interface { Append ( int ) } func CountInto ( a Appender , start , end int ) { for i := start ; i <= end ; i ++ { a . Append ( i ) } } type Lener interface { Len () int } func LongEnough ( l Lener ) bool { return l . Len () * 10 > 42 } func main () { // A bare value var lst List // compiler error: // cannot use lst (type List) as type Appender in argument to CountInto: // List does not implement Appender (Append method has pointer receiver) // CountInto(lst, 1, 10) if LongEnough ( lst ) { // VALID: Identical receiver type fmt . Printf ( \"- lst is long enough\\n\" ) } // A pointer value plst := new ( List ) CountInto ( plst , 1 , 10 ) // VALID: Identical receiver type if LongEnough ( plst ) { // VALID: a *List can be dereferenced for the receiver fmt . Printf ( \"- plst is long enough\\n\" ) } } \u8ba8\u8bba \u5728 lst \u4e0a\u8c03\u7528 CountInto \u65f6\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u7f16\u8bd1\u5668\u9519\u8bef\uff0c\u56e0\u4e3a CountInto \u9700\u8981\u4e00\u4e2a Appender \uff0c\u800c\u5b83\u7684\u65b9\u6cd5 Append \u53ea\u5b9a\u4e49\u5728\u6307\u9488\u4e0a\u3002 \u5728 lst \u4e0a\u8c03\u7528 LongEnough \u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a Len \u5b9a\u4e49\u5728\u503c\u4e0a\u3002 \u5728 plst \u4e0a\u8c03\u7528 CountInto \u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a CountInto \u9700\u8981\u4e00\u4e2a Appender \uff0c\u5e76\u4e14\u5b83\u7684\u65b9\u6cd5 Append \u5b9a\u4e49\u5728\u6307\u9488\u4e0a\u3002 \u5728 plst \u4e0a\u8c03\u7528 LongEnough \u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a\u6307\u9488\u4f1a\u88ab\u81ea\u52a8\u89e3\u5f15\u7528\u3002 \u603b\u7ed3 \u5728\u63a5\u53e3\u4e0a\u8c03\u7528\u65b9\u6cd5\u65f6\uff0c\u5fc5\u987b\u6709\u548c\u65b9\u6cd5\u5b9a\u4e49\u65f6\u76f8\u540c\u7684\u63a5\u6536\u8005\u7c7b\u578b\u6216\u8005\u662f\u53ef\u4ee5\u6839\u636e\u5177\u4f53\u7c7b\u578b P \u76f4\u63a5\u8fa8\u8bc6\u7684\uff1a \u6307\u9488\u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7\u6307\u9488\u8c03\u7528 \u503c\u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7\u503c\u8c03\u7528 \u63a5\u6536\u8005\u662f\u503c\u7684\u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7\u6307\u9488\u8c03\u7528\uff0c\u56e0\u4e3a\u6307\u9488\u4f1a\u9996\u5148\u88ab\u89e3\u5f15\u7528 \u63a5\u6536\u8005\u662f\u6307\u9488\u7684\u65b9\u6cd5\u4e0d\u53ef\u4ee5\u901a\u8fc7\u503c\u8c03\u7528\uff0c\u56e0\u4e3a\u5b58\u50a8\u5728\u63a5\u53e3\u4e2d\u7684\u503c\u6ca1\u6709\u5730\u5740 \u5c06\u4e00\u4e2a\u503c\u8d4b\u503c\u7ed9\u4e00\u4e2a\u63a5\u53e3\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u786e\u4fdd\u6240\u6709\u53ef\u80fd\u7684\u63a5\u53e3\u65b9\u6cd5\u90fd\u53ef\u4ee5\u5728\u6b64\u503c\u4e0a\u88ab\u8c03\u7528\uff0c\u56e0\u6b64\u4e0d\u6b63\u786e\u7684\u8d4b\u503c\u5728\u7f16\u8bd1\u671f\u5c31\u4f1a\u5931\u8d25\u3002 \u8bd1\u6ce8 Go \u8bed\u8a00\u89c4\u8303\u5b9a\u4e49\u4e86\u63a5\u53e3\u65b9\u6cd5\u96c6\u7684\u8c03\u7528\u89c4\u5219\uff1a \u7c7b\u578b *T \u7684\u53ef\u8c03\u7528\u65b9\u6cd5\u96c6\u5305\u542b\u63a5\u53d7\u8005\u4e3a *T \u6216 T \u7684\u6240\u6709\u65b9\u6cd5\u96c6 \u7c7b\u578b T \u7684\u53ef\u8c03\u7528\u65b9\u6cd5\u96c6\u5305\u542b\u63a5\u53d7\u8005\u4e3a T \u7684\u6240\u6709\u65b9\u6cd5 \u7c7b\u578b T \u7684\u53ef\u8c03\u7528\u65b9\u6cd5\u96c6**\u4e0d**\u5305\u542b\u63a5\u53d7\u8005\u4e3a *T \u7684\u65b9\u6cd5","title":"11.6 \u4f7f\u7528\u65b9\u6cd5\u96c6\u4e0e\u63a5\u53e3"},{"location":"11.6/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6d4b\u8bd5\u4e00\u4e2a\u503c\u662f\u5426\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3 \u4e0b\u4e00\u8282\uff1a \u7b2c\u4e00\u4e2a\u4f8b\u5b50\uff1a\u4f7f\u7528 Sorter \u63a5\u53e3\u6392\u5e8f","title":"\u94fe\u63a5"},{"location":"11.7/","text":"11.7 \u7b2c\u4e00\u4e2a\u4f8b\u5b50\uff1a\u4f7f\u7528 Sorter \u63a5\u53e3\u6392\u5e8f \u00b6 \u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u662f\u6765\u81ea\u6807\u51c6\u5e93\u7684 sort \u5305\uff0c\u8981\u5bf9\u4e00\u7ec4\u6570\u5b57\u6216\u5b57\u7b26\u4e32\u6392\u5e8f\uff0c\u53ea\u9700\u8981\u5b9e\u73b0\u4e09\u4e2a\u65b9\u6cd5\uff1a\u53cd\u6620\u5143\u7d20\u4e2a\u6570\u7684 Len() \u65b9\u6cd5\u3001\u6bd4\u8f83\u7b2c i \u548c j \u4e2a\u5143\u7d20\u7684 Less(i, j) \u65b9\u6cd5\u4ee5\u53ca\u4ea4\u6362\u7b2c i \u548c j \u4e2a\u5143\u7d20\u7684 Swap(i, j) \u65b9\u6cd5\u3002 \u6392\u5e8f\u51fd\u6570\u7684\u7b97\u6cd5\u53ea\u4f1a\u4f7f\u7528\u5230\u8fd9\u4e09\u4e2a\u65b9\u6cd5\uff08\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u6392\u5e8f\u7b97\u6cd5\u6765\u5b9e\u73b0\uff0c\u6b64\u5904\u6211\u4eec\u4f7f\u7528\u5192\u6ce1\u6392\u5e8f\uff09\uff1a func Sort ( data Sorter ) { for pass := 1 ; pass < data . Len (); pass ++ { for i := 0 ; i < data . Len () - pass ; i ++ { if data . Less ( i + 1 , i ) { data . Swap ( i , i + 1 ) } } } } Sort \u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u7684\u53c2\u6570\uff1a Sorter \uff0c\u5b83\u58f0\u660e\u4e86\u8fd9\u4e9b\u65b9\u6cd5\uff1a type Sorter interface { Len () int Less ( i , j int ) bool Swap ( i , j int ) } \u53c2\u6570\u4e2d\u7684 int \u662f\u5f85\u6392\u5e8f\u5e8f\u5217\u957f\u5ea6\u7684\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u8bf4\u8981\u6392\u5e8f\u7684\u5bf9\u8c61\u4e00\u5b9a\u8981\u662f\u4e00\u7ec4 int \u3002 i \u548c j \u8868\u793a\u5143\u7d20\u7684\u6574\u578b\u7d22\u5f15\uff0c\u957f\u5ea6\u4e5f\u662f\u6574\u578b\u7684\u3002 \u73b0\u5728\u5982\u679c\u6211\u4eec\u60f3\u5bf9\u4e00\u4e2a int \u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u6240\u6709\u5fc5\u987b\u505a\u7684\u4e8b\u60c5\u5c31\u662f\uff1a\u4e3a\u6570\u7ec4\u5b9a\u4e00\u4e2a\u7c7b\u578b\u5e76\u5728\u5b83\u4e0a\u9762\u5b9e\u73b0 Sorter \u63a5\u53e3\u7684\u65b9\u6cd5\uff1a type IntArray [] int func ( p IntArray ) Len () int { return len ( p ) } func ( p IntArray ) Less ( i , j int ) bool { return p [ i ] < p [ j ] } func ( p IntArray ) Swap ( i , j int ) { p [ i ], p [ j ] = p [ j ], p [ i ] } \u4e0b\u9762\u662f\u8c03\u7528\u6392\u5e8f\u51fd\u6570\u7684\u4e00\u4e2a\u5177\u4f53\u4f8b\u5b50\uff1a data := [] int { 74 , 59 , 238 , - 784 , 9845 , 959 , 905 , 0 , 0 , 42 , 7586 , - 5467984 , 7586 } a := sort . IntArray ( data ) //conversion to type IntArray from package sort sort . Sort ( a ) \u5b8c\u6574\u7684\u3001\u53ef\u8fd0\u884c\u7684\u4ee3\u7801\u53ef\u4ee5\u5728 sort.go \u548c sortmain.go \u91cc\u627e\u5230\u3002 \u540c\u6837\u7684\u539f\u7406\uff0c\u6392\u5e8f\u51fd\u6570\u53ef\u4ee5\u7528\u4e8e\u4e00\u4e2a\u6d6e\u70b9\u578b\u6570\u7ec4\uff0c\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u6216\u8005\u4e00\u4e2a\u8868\u793a\u6bcf\u5468\u5404\u5929\u7684\u7ed3\u6784\u4f53 dayArray \u3002 \u793a\u4f8b 11.6 sort.go \uff1a package sort type Sorter interface { Len () int Less ( i , j int ) bool Swap ( i , j int ) } func Sort ( data Sorter ) { for pass := 1 ; pass < data . Len (); pass ++ { for i := 0 ; i < data . Len () - pass ; i ++ { if data . Less ( i + 1 , i ) { data . Swap ( i , i + 1 ) } } } } func IsSorted ( data Sorter ) bool { n := data . Len () for i := n - 1 ; i > 0 ; i -- { if data . Less ( i , i - 1 ) { return false } } return true } // Convenience types for common cases type IntArray [] int func ( p IntArray ) Len () int { return len ( p ) } func ( p IntArray ) Less ( i , j int ) bool { return p [ i ] < p [ j ] } func ( p IntArray ) Swap ( i , j int ) { p [ i ], p [ j ] = p [ j ], p [ i ] } type StringArray [] string func ( p StringArray ) Len () int { return len ( p ) } func ( p StringArray ) Less ( i , j int ) bool { return p [ i ] < p [ j ] } func ( p StringArray ) Swap ( i , j int ) { p [ i ], p [ j ] = p [ j ], p [ i ] } // Convenience wrappers for common cases func SortInts ( a [] int ) { Sort ( IntArray ( a )) } func SortStrings ( a [] string ) { Sort ( StringArray ( a )) } func IntsAreSorted ( a [] int ) bool { return IsSorted ( IntArray ( a )) } func StringsAreSorted ( a [] string ) bool { return IsSorted ( StringArray ( a )) } \u793a\u4f8b 11.7 sortmain.go \uff1a package main import ( \"./sort\" \"fmt\" ) func ints () { data := [] int { 74 , 59 , 238 , - 784 , 9845 , 959 , 905 , 0 , 0 , 42 , 7586 , - 5467984 , 7586 } a := sort . IntArray ( data ) //conversion to type IntArray sort . Sort ( a ) if ! sort . IsSorted ( a ) { panic ( \"fails\" ) } fmt . Printf ( \"The sorted array is: %v\\n\" , a ) } func strings () { data := [] string { \"monday\" , \"friday\" , \"tuesday\" , \"wednesday\" , \"sunday\" , \"thursday\" , \"\" , \"saturday\" } a := sort . StringArray ( data ) sort . Sort ( a ) if ! sort . IsSorted ( a ) { panic ( \"fail\" ) } fmt . Printf ( \"The sorted array is: %v\\n\" , a ) } type day struct { num int shortName string longName string } type dayArray struct { data [] * day } func ( p * dayArray ) Len () int { return len ( p . data ) } func ( p * dayArray ) Less ( i , j int ) bool { return p . data [ i ]. num < p . data [ j ]. num } func ( p * dayArray ) Swap ( i , j int ) { p . data [ i ], p . data [ j ] = p . data [ j ], p . data [ i ] } func days () { Sunday := day { 0 , \"SUN\" , \"Sunday\" } Monday := day { 1 , \"MON\" , \"Monday\" } Tuesday := day { 2 , \"TUE\" , \"Tuesday\" } Wednesday := day { 3 , \"WED\" , \"Wednesday\" } Thursday := day { 4 , \"THU\" , \"Thursday\" } Friday := day { 5 , \"FRI\" , \"Friday\" } Saturday := day { 6 , \"SAT\" , \"Saturday\" } data := [] * day { & Tuesday , & Thursday , & Wednesday , & Sunday , & Monday , & Friday , & Saturday } a := dayArray { data } sort . Sort ( & a ) if ! sort . IsSorted ( & a ) { panic ( \"fail\" ) } for _ , d := range data { fmt . Printf ( \"%s \" , d . longName ) } fmt . Printf ( \"\\n\" ) } func main () { ints () strings () days () } \u8f93\u51fa\uff1a The sorted array is: [-5467984 -784 0 0 42 59 74 238 905 959 7586 7586 9845] The sorted array is: [ friday monday saturday sunday thursday tuesday wednesday] Sunday Monday Tuesday Wednesday Thursday Friday Saturday \u5907\u6ce8 \uff1a panic(\"fail\") \u7528\u4e8e\u505c\u6b62\u5904\u4e8e\u5728\u975e\u6b63\u5e38\u60c5\u51b5\u4e0b\u7684\u7a0b\u5e8f\uff08\u8be6\u7ec6\u8bf7\u53c2\u8003 \u7b2c 13 \u7ae0 \uff09\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u5148\u6253\u5370\u4e00\u6761\u4fe1\u606f\uff0c\u7136\u540e\u8c03\u7528 os.Exit(1) \u6765\u505c\u6b62\u7a0b\u5e8f\u3002 \u4e0a\u9762\u7684\u4f8b\u5b50\u5e2e\u52a9\u6211\u4eec\u8fdb\u4e00\u6b65\u4e86\u89e3\u4e86\u63a5\u53e3\u7684\u610f\u4e49\u548c\u4f7f\u7528\u65b9\u5f0f\u3002\u5bf9\u4e8e\u57fa\u672c\u7c7b\u578b\u7684\u6392\u5e8f\uff0c\u6807\u51c6\u5e93\u5df2\u7ecf\u63d0\u4f9b\u4e86\u76f8\u5173\u7684\u6392\u5e8f\u51fd\u6570\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u6211\u4eec\u518d\u91cd\u590d\u9020\u8f6e\u5b50\u4e86\u3002\u5bf9\u4e8e\u4e00\u822c\u6027\u7684\u6392\u5e8f\uff0c sort \u5305\u5b9a\u4e49\u4e86\u4e00\u4e2a\u63a5\u53e3\uff1a type Interface interface { Len () int Less ( i , j int ) bool Swap ( i , j int ) } \u8fd9\u4e2a\u63a5\u53e3\u603b\u7ed3\u4e86\u9700\u8981\u7528\u4e8e\u6392\u5e8f\u7684\u62bd\u8c61\u65b9\u6cd5\uff0c\u51fd\u6570 Sort(data Interface) \u7528\u6765\u5bf9\u6b64\u7c7b\u5bf9\u8c61\u8fdb\u884c\u6392\u5e8f\uff0c\u53ef\u4ee5\u7528\u5b83\u4eec\u6765\u5b9e\u73b0\u5bf9\u5176\u4ed6\u7c7b\u578b\u7684\u6570\u636e\uff08\u975e\u57fa\u672c\u7c7b\u578b\uff09\u8fdb\u884c\u6392\u5e8f\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4e5f\u662f\u8fd9\u4e48\u505a\u7684\uff0c\u4e0d\u4ec5\u53ef\u4ee5\u5bf9 int \u548c string \u5e8f\u5217\u8fdb\u884c\u6392\u5e8f\uff0c\u4e5f\u53ef\u4ee5\u5bf9\u7528\u6237\u81ea\u5b9a\u4e49\u7c7b\u578b dayArray \u8fdb\u884c\u6392\u5e8f\u3002 \u7ec3\u4e60 11.5 interfaces_ext.go \uff1a a). \u7ee7\u7eed\u6269\u5c55\u7a0b\u5e8f\uff0c\u5b9a\u4e49\u7c7b\u578b Triangle \uff0c\u8ba9\u5b83\u5b9e\u73b0 AreaInterface \u63a5\u53e3\u3002\u901a\u8fc7\u8ba1\u7b97\u4e00\u4e2a\u7279\u5b9a\u4e09\u89d2\u5f62\u7684\u9762\u79ef\u6765\u8fdb\u884c\u6d4b\u8bd5\uff08\u4e09\u89d2\u5f62\u9762\u79ef=0.5 * (\u5e95 * \u9ad8)\uff09 b). \u5b9a\u4e49\u4e00\u4e2a\u65b0\u63a5\u53e3 PeriInterface \uff0c\u5b83\u6709\u4e00\u4e2a Perimeter \u65b9\u6cd5\u3002\u8ba9 Square \u5b9e\u73b0\u8fd9\u4e2a\u63a5\u53e3\uff0c\u5e76\u901a\u8fc7\u4e00\u4e2a Square \u793a\u4f8b\u6765\u6d4b\u8bd5\u5b83\u3002 \u7ec3\u4e60 11.6 point_interfaces.go \uff1a \u7ee7\u7eed 10.3 \u4e2d\u7684\u7ec3\u4e60 point_methods.go \uff0c\u5b9a\u4e49\u63a5\u53e3 Magnitude \uff0c\u5b83\u6709\u4e00\u4e2a\u65b9\u6cd5 Abs() \u3002\u8ba9 Point \u3001 Point3 \u53ca Polar \u5b9e\u73b0\u6b64\u63a5\u53e3\u3002\u901a\u8fc7\u63a5\u53e3\u7c7b\u578b\u53d8\u91cf\u4f7f\u7528\u65b9\u6cd5\u505a point.go \u4e2d\u540c\u6837\u7684\u4e8b\u60c5\u3002 \u7ec3\u4e60 11.7 float_sort.go / float_sortmain.go \uff1a \u7c7b\u4f3c 11.7 \u548c\u793a\u4f8b 11.\u00be\uff0c\u5b9a\u4e49\u4e00\u4e2a\u5305 float64 \uff0c\u5e76\u5728\u5305\u91cc\u5b9a\u4e49\u7c7b\u578b Float64Array \uff0c\u7136\u540e\u8ba9\u5b83\u5b9e\u73b0 Sorter \u63a5\u53e3\u7528\u6765\u5bf9 float64 \u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u3002 \u53e6\u5916\u63d0\u4f9b\u5982\u4e0b\u65b9\u6cd5\uff1a NewFloat64Array() \uff1a\u521b\u5efa\u4e00\u4e2a\u5305\u542b 25 \u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u53d8\u91cf\uff08\u53c2\u8003 10.2 \uff09 List() \uff1a\u8fd4\u56de\u6570\u7ec4\u683c\u5f0f\u5316\u540e\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u5728 String() \u65b9\u6cd5\u4e2d\u8c03\u7528\u5b83\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u663e\u5f0f\u5730\u8c03\u7528 List() \u6765\u6253\u5370\u6570\u7ec4\uff08\u53c2\u8003 10.7 \uff09 Fill() \uff1a\u521b\u5efa\u4e00\u4e2a\u5305\u542b 10 \u4e2a\u968f\u673a\u6d6e\u70b9\u6570\u7684\u6570\u7ec4\uff08\u53c2\u8003 4.5.2.6 \uff09 \u5728\u4e3b\u7a0b\u5e8f\u4e2d\u65b0\u5efa\u4e00\u4e2a\u6b64\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u7136\u540e\u5bf9\u5b83\u6392\u5e8f\u5e76\u8fdb\u884c\u6d4b\u8bd5\u3002 \u7ec3\u4e60 11.8 sort.go / sort_persons.go \uff1a \u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53 Person \uff0c\u5b83\u6709\u4e24\u4e2a\u5b57\u6bb5\uff1a firstName \u548c lastName \uff0c\u4e3a []Person \u5b9a\u4e49\u7c7b\u578b Persons \u3002\u8ba9 Persons \u5b9e\u73b0 Sorter \u63a5\u53e3\u5e76\u8fdb\u884c\u6d4b\u8bd5\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f7f\u7528\u65b9\u6cd5\u96c6\u4e0e\u63a5\u53e3 \u4e0b\u4e00\u8282\uff1a \u7b2c\u4e8c\u4e2a\u4f8b\u5b50\uff1a\u8bfb\u548c\u5199","title":"11.7 \u7b2c\u4e00\u4e2a\u4f8b\u5b50 \u4f7f\u7528 Sorter \u63a5\u53e3\u6392\u5e8f"},{"location":"11.7/#117-sorter","text":"\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u662f\u6765\u81ea\u6807\u51c6\u5e93\u7684 sort \u5305\uff0c\u8981\u5bf9\u4e00\u7ec4\u6570\u5b57\u6216\u5b57\u7b26\u4e32\u6392\u5e8f\uff0c\u53ea\u9700\u8981\u5b9e\u73b0\u4e09\u4e2a\u65b9\u6cd5\uff1a\u53cd\u6620\u5143\u7d20\u4e2a\u6570\u7684 Len() \u65b9\u6cd5\u3001\u6bd4\u8f83\u7b2c i \u548c j \u4e2a\u5143\u7d20\u7684 Less(i, j) \u65b9\u6cd5\u4ee5\u53ca\u4ea4\u6362\u7b2c i \u548c j \u4e2a\u5143\u7d20\u7684 Swap(i, j) \u65b9\u6cd5\u3002 \u6392\u5e8f\u51fd\u6570\u7684\u7b97\u6cd5\u53ea\u4f1a\u4f7f\u7528\u5230\u8fd9\u4e09\u4e2a\u65b9\u6cd5\uff08\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u6392\u5e8f\u7b97\u6cd5\u6765\u5b9e\u73b0\uff0c\u6b64\u5904\u6211\u4eec\u4f7f\u7528\u5192\u6ce1\u6392\u5e8f\uff09\uff1a func Sort ( data Sorter ) { for pass := 1 ; pass < data . Len (); pass ++ { for i := 0 ; i < data . Len () - pass ; i ++ { if data . Less ( i + 1 , i ) { data . Swap ( i , i + 1 ) } } } } Sort \u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u7684\u53c2\u6570\uff1a Sorter \uff0c\u5b83\u58f0\u660e\u4e86\u8fd9\u4e9b\u65b9\u6cd5\uff1a type Sorter interface { Len () int Less ( i , j int ) bool Swap ( i , j int ) } \u53c2\u6570\u4e2d\u7684 int \u662f\u5f85\u6392\u5e8f\u5e8f\u5217\u957f\u5ea6\u7684\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u8bf4\u8981\u6392\u5e8f\u7684\u5bf9\u8c61\u4e00\u5b9a\u8981\u662f\u4e00\u7ec4 int \u3002 i \u548c j \u8868\u793a\u5143\u7d20\u7684\u6574\u578b\u7d22\u5f15\uff0c\u957f\u5ea6\u4e5f\u662f\u6574\u578b\u7684\u3002 \u73b0\u5728\u5982\u679c\u6211\u4eec\u60f3\u5bf9\u4e00\u4e2a int \u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u6240\u6709\u5fc5\u987b\u505a\u7684\u4e8b\u60c5\u5c31\u662f\uff1a\u4e3a\u6570\u7ec4\u5b9a\u4e00\u4e2a\u7c7b\u578b\u5e76\u5728\u5b83\u4e0a\u9762\u5b9e\u73b0 Sorter \u63a5\u53e3\u7684\u65b9\u6cd5\uff1a type IntArray [] int func ( p IntArray ) Len () int { return len ( p ) } func ( p IntArray ) Less ( i , j int ) bool { return p [ i ] < p [ j ] } func ( p IntArray ) Swap ( i , j int ) { p [ i ], p [ j ] = p [ j ], p [ i ] } \u4e0b\u9762\u662f\u8c03\u7528\u6392\u5e8f\u51fd\u6570\u7684\u4e00\u4e2a\u5177\u4f53\u4f8b\u5b50\uff1a data := [] int { 74 , 59 , 238 , - 784 , 9845 , 959 , 905 , 0 , 0 , 42 , 7586 , - 5467984 , 7586 } a := sort . IntArray ( data ) //conversion to type IntArray from package sort sort . Sort ( a ) \u5b8c\u6574\u7684\u3001\u53ef\u8fd0\u884c\u7684\u4ee3\u7801\u53ef\u4ee5\u5728 sort.go \u548c sortmain.go \u91cc\u627e\u5230\u3002 \u540c\u6837\u7684\u539f\u7406\uff0c\u6392\u5e8f\u51fd\u6570\u53ef\u4ee5\u7528\u4e8e\u4e00\u4e2a\u6d6e\u70b9\u578b\u6570\u7ec4\uff0c\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u6216\u8005\u4e00\u4e2a\u8868\u793a\u6bcf\u5468\u5404\u5929\u7684\u7ed3\u6784\u4f53 dayArray \u3002 \u793a\u4f8b 11.6 sort.go \uff1a package sort type Sorter interface { Len () int Less ( i , j int ) bool Swap ( i , j int ) } func Sort ( data Sorter ) { for pass := 1 ; pass < data . Len (); pass ++ { for i := 0 ; i < data . Len () - pass ; i ++ { if data . Less ( i + 1 , i ) { data . Swap ( i , i + 1 ) } } } } func IsSorted ( data Sorter ) bool { n := data . Len () for i := n - 1 ; i > 0 ; i -- { if data . Less ( i , i - 1 ) { return false } } return true } // Convenience types for common cases type IntArray [] int func ( p IntArray ) Len () int { return len ( p ) } func ( p IntArray ) Less ( i , j int ) bool { return p [ i ] < p [ j ] } func ( p IntArray ) Swap ( i , j int ) { p [ i ], p [ j ] = p [ j ], p [ i ] } type StringArray [] string func ( p StringArray ) Len () int { return len ( p ) } func ( p StringArray ) Less ( i , j int ) bool { return p [ i ] < p [ j ] } func ( p StringArray ) Swap ( i , j int ) { p [ i ], p [ j ] = p [ j ], p [ i ] } // Convenience wrappers for common cases func SortInts ( a [] int ) { Sort ( IntArray ( a )) } func SortStrings ( a [] string ) { Sort ( StringArray ( a )) } func IntsAreSorted ( a [] int ) bool { return IsSorted ( IntArray ( a )) } func StringsAreSorted ( a [] string ) bool { return IsSorted ( StringArray ( a )) } \u793a\u4f8b 11.7 sortmain.go \uff1a package main import ( \"./sort\" \"fmt\" ) func ints () { data := [] int { 74 , 59 , 238 , - 784 , 9845 , 959 , 905 , 0 , 0 , 42 , 7586 , - 5467984 , 7586 } a := sort . IntArray ( data ) //conversion to type IntArray sort . Sort ( a ) if ! sort . IsSorted ( a ) { panic ( \"fails\" ) } fmt . Printf ( \"The sorted array is: %v\\n\" , a ) } func strings () { data := [] string { \"monday\" , \"friday\" , \"tuesday\" , \"wednesday\" , \"sunday\" , \"thursday\" , \"\" , \"saturday\" } a := sort . StringArray ( data ) sort . Sort ( a ) if ! sort . IsSorted ( a ) { panic ( \"fail\" ) } fmt . Printf ( \"The sorted array is: %v\\n\" , a ) } type day struct { num int shortName string longName string } type dayArray struct { data [] * day } func ( p * dayArray ) Len () int { return len ( p . data ) } func ( p * dayArray ) Less ( i , j int ) bool { return p . data [ i ]. num < p . data [ j ]. num } func ( p * dayArray ) Swap ( i , j int ) { p . data [ i ], p . data [ j ] = p . data [ j ], p . data [ i ] } func days () { Sunday := day { 0 , \"SUN\" , \"Sunday\" } Monday := day { 1 , \"MON\" , \"Monday\" } Tuesday := day { 2 , \"TUE\" , \"Tuesday\" } Wednesday := day { 3 , \"WED\" , \"Wednesday\" } Thursday := day { 4 , \"THU\" , \"Thursday\" } Friday := day { 5 , \"FRI\" , \"Friday\" } Saturday := day { 6 , \"SAT\" , \"Saturday\" } data := [] * day { & Tuesday , & Thursday , & Wednesday , & Sunday , & Monday , & Friday , & Saturday } a := dayArray { data } sort . Sort ( & a ) if ! sort . IsSorted ( & a ) { panic ( \"fail\" ) } for _ , d := range data { fmt . Printf ( \"%s \" , d . longName ) } fmt . Printf ( \"\\n\" ) } func main () { ints () strings () days () } \u8f93\u51fa\uff1a The sorted array is: [-5467984 -784 0 0 42 59 74 238 905 959 7586 7586 9845] The sorted array is: [ friday monday saturday sunday thursday tuesday wednesday] Sunday Monday Tuesday Wednesday Thursday Friday Saturday \u5907\u6ce8 \uff1a panic(\"fail\") \u7528\u4e8e\u505c\u6b62\u5904\u4e8e\u5728\u975e\u6b63\u5e38\u60c5\u51b5\u4e0b\u7684\u7a0b\u5e8f\uff08\u8be6\u7ec6\u8bf7\u53c2\u8003 \u7b2c 13 \u7ae0 \uff09\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u5148\u6253\u5370\u4e00\u6761\u4fe1\u606f\uff0c\u7136\u540e\u8c03\u7528 os.Exit(1) \u6765\u505c\u6b62\u7a0b\u5e8f\u3002 \u4e0a\u9762\u7684\u4f8b\u5b50\u5e2e\u52a9\u6211\u4eec\u8fdb\u4e00\u6b65\u4e86\u89e3\u4e86\u63a5\u53e3\u7684\u610f\u4e49\u548c\u4f7f\u7528\u65b9\u5f0f\u3002\u5bf9\u4e8e\u57fa\u672c\u7c7b\u578b\u7684\u6392\u5e8f\uff0c\u6807\u51c6\u5e93\u5df2\u7ecf\u63d0\u4f9b\u4e86\u76f8\u5173\u7684\u6392\u5e8f\u51fd\u6570\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u6211\u4eec\u518d\u91cd\u590d\u9020\u8f6e\u5b50\u4e86\u3002\u5bf9\u4e8e\u4e00\u822c\u6027\u7684\u6392\u5e8f\uff0c sort \u5305\u5b9a\u4e49\u4e86\u4e00\u4e2a\u63a5\u53e3\uff1a type Interface interface { Len () int Less ( i , j int ) bool Swap ( i , j int ) } \u8fd9\u4e2a\u63a5\u53e3\u603b\u7ed3\u4e86\u9700\u8981\u7528\u4e8e\u6392\u5e8f\u7684\u62bd\u8c61\u65b9\u6cd5\uff0c\u51fd\u6570 Sort(data Interface) \u7528\u6765\u5bf9\u6b64\u7c7b\u5bf9\u8c61\u8fdb\u884c\u6392\u5e8f\uff0c\u53ef\u4ee5\u7528\u5b83\u4eec\u6765\u5b9e\u73b0\u5bf9\u5176\u4ed6\u7c7b\u578b\u7684\u6570\u636e\uff08\u975e\u57fa\u672c\u7c7b\u578b\uff09\u8fdb\u884c\u6392\u5e8f\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4e5f\u662f\u8fd9\u4e48\u505a\u7684\uff0c\u4e0d\u4ec5\u53ef\u4ee5\u5bf9 int \u548c string \u5e8f\u5217\u8fdb\u884c\u6392\u5e8f\uff0c\u4e5f\u53ef\u4ee5\u5bf9\u7528\u6237\u81ea\u5b9a\u4e49\u7c7b\u578b dayArray \u8fdb\u884c\u6392\u5e8f\u3002 \u7ec3\u4e60 11.5 interfaces_ext.go \uff1a a). \u7ee7\u7eed\u6269\u5c55\u7a0b\u5e8f\uff0c\u5b9a\u4e49\u7c7b\u578b Triangle \uff0c\u8ba9\u5b83\u5b9e\u73b0 AreaInterface \u63a5\u53e3\u3002\u901a\u8fc7\u8ba1\u7b97\u4e00\u4e2a\u7279\u5b9a\u4e09\u89d2\u5f62\u7684\u9762\u79ef\u6765\u8fdb\u884c\u6d4b\u8bd5\uff08\u4e09\u89d2\u5f62\u9762\u79ef=0.5 * (\u5e95 * \u9ad8)\uff09 b). \u5b9a\u4e49\u4e00\u4e2a\u65b0\u63a5\u53e3 PeriInterface \uff0c\u5b83\u6709\u4e00\u4e2a Perimeter \u65b9\u6cd5\u3002\u8ba9 Square \u5b9e\u73b0\u8fd9\u4e2a\u63a5\u53e3\uff0c\u5e76\u901a\u8fc7\u4e00\u4e2a Square \u793a\u4f8b\u6765\u6d4b\u8bd5\u5b83\u3002 \u7ec3\u4e60 11.6 point_interfaces.go \uff1a \u7ee7\u7eed 10.3 \u4e2d\u7684\u7ec3\u4e60 point_methods.go \uff0c\u5b9a\u4e49\u63a5\u53e3 Magnitude \uff0c\u5b83\u6709\u4e00\u4e2a\u65b9\u6cd5 Abs() \u3002\u8ba9 Point \u3001 Point3 \u53ca Polar \u5b9e\u73b0\u6b64\u63a5\u53e3\u3002\u901a\u8fc7\u63a5\u53e3\u7c7b\u578b\u53d8\u91cf\u4f7f\u7528\u65b9\u6cd5\u505a point.go \u4e2d\u540c\u6837\u7684\u4e8b\u60c5\u3002 \u7ec3\u4e60 11.7 float_sort.go / float_sortmain.go \uff1a \u7c7b\u4f3c 11.7 \u548c\u793a\u4f8b 11.\u00be\uff0c\u5b9a\u4e49\u4e00\u4e2a\u5305 float64 \uff0c\u5e76\u5728\u5305\u91cc\u5b9a\u4e49\u7c7b\u578b Float64Array \uff0c\u7136\u540e\u8ba9\u5b83\u5b9e\u73b0 Sorter \u63a5\u53e3\u7528\u6765\u5bf9 float64 \u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u3002 \u53e6\u5916\u63d0\u4f9b\u5982\u4e0b\u65b9\u6cd5\uff1a NewFloat64Array() \uff1a\u521b\u5efa\u4e00\u4e2a\u5305\u542b 25 \u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u53d8\u91cf\uff08\u53c2\u8003 10.2 \uff09 List() \uff1a\u8fd4\u56de\u6570\u7ec4\u683c\u5f0f\u5316\u540e\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u5728 String() \u65b9\u6cd5\u4e2d\u8c03\u7528\u5b83\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u663e\u5f0f\u5730\u8c03\u7528 List() \u6765\u6253\u5370\u6570\u7ec4\uff08\u53c2\u8003 10.7 \uff09 Fill() \uff1a\u521b\u5efa\u4e00\u4e2a\u5305\u542b 10 \u4e2a\u968f\u673a\u6d6e\u70b9\u6570\u7684\u6570\u7ec4\uff08\u53c2\u8003 4.5.2.6 \uff09 \u5728\u4e3b\u7a0b\u5e8f\u4e2d\u65b0\u5efa\u4e00\u4e2a\u6b64\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u7136\u540e\u5bf9\u5b83\u6392\u5e8f\u5e76\u8fdb\u884c\u6d4b\u8bd5\u3002 \u7ec3\u4e60 11.8 sort.go / sort_persons.go \uff1a \u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53 Person \uff0c\u5b83\u6709\u4e24\u4e2a\u5b57\u6bb5\uff1a firstName \u548c lastName \uff0c\u4e3a []Person \u5b9a\u4e49\u7c7b\u578b Persons \u3002\u8ba9 Persons \u5b9e\u73b0 Sorter \u63a5\u53e3\u5e76\u8fdb\u884c\u6d4b\u8bd5\u3002","title":"11.7 \u7b2c\u4e00\u4e2a\u4f8b\u5b50\uff1a\u4f7f\u7528 Sorter \u63a5\u53e3\u6392\u5e8f"},{"location":"11.7/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f7f\u7528\u65b9\u6cd5\u96c6\u4e0e\u63a5\u53e3 \u4e0b\u4e00\u8282\uff1a \u7b2c\u4e8c\u4e2a\u4f8b\u5b50\uff1a\u8bfb\u548c\u5199","title":"\u94fe\u63a5"},{"location":"11.8/","text":"11.8 \u7b2c\u4e8c\u4e2a\u4f8b\u5b50\uff1a\u8bfb\u548c\u5199 \u00b6 \u8bfb\u548c\u5199\u662f\u8f6f\u4ef6\u4e2d\u5f88\u666e\u904d\u7684\u884c\u4e3a\uff0c\u63d0\u8d77\u5b83\u4eec\u4f1a\u7acb\u5373\u60f3\u5230\u8bfb\u5199\u6587\u4ef6\u3001\u7f13\u5b58\uff08\u6bd4\u5982\u5b57\u8282\u6216\u5b57\u7b26\u4e32\u5207\u7247\uff09\u3001\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u3001\u6807\u51c6\u9519\u8bef\u4ee5\u53ca\u7f51\u7edc\u8fde\u63a5\u3001\u7ba1\u9053\u7b49\u7b49\uff0c\u6216\u8005\u8bfb\u5199\u6211\u4eec\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b\u3002\u4e3a\u4e86\u8ba9\u4ee3\u7801\u5c3d\u53ef\u80fd\u901a\u7528\uff0cGo \u91c7\u53d6\u4e86\u4e00\u81f4\u7684\u65b9\u5f0f\u6765\u8bfb\u5199\u6570\u636e\u3002 io \u5305\u63d0\u4f9b\u4e86\u7528\u4e8e\u8bfb\u548c\u5199\u7684\u63a5\u53e3 io.Reader \u548c io.Writer \uff1a type Reader interface { Read ( p [] byte ) ( n int , err error ) } type Writer interface { Write ( p [] byte ) ( n int , err error ) } \u53ea\u8981\u7c7b\u578b\u5b9e\u73b0\u4e86\u8bfb\u5199\u63a5\u53e3\uff0c\u63d0\u4f9b Read \u548c Write \u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u4ece\u5b83\u8bfb\u53d6\u6570\u636e\uff0c\u6216\u5411\u5b83\u5199\u5165\u6570\u636e\u3002\u4e00\u4e2a\u5bf9\u8c61\u8981\u662f\u53ef\u8bfb\u7684\uff0c\u5b83\u5fc5\u987b\u5b9e\u73b0 io.Reader \u63a5\u53e3\uff0c\u8fd9\u4e2a\u63a5\u53e3\u53ea\u6709\u4e00\u4e2a\u7b7e\u540d\u662f Read(p []byte) (n int, err error) \u7684\u65b9\u6cd5\uff0c\u5b83\u4ece\u8c03\u7528\u5b83\u7684\u5bf9\u8c61\u4e0a\u8bfb\u53d6\u6570\u636e\uff0c\u5e76\u628a\u8bfb\u5230\u7684\u6570\u636e\u653e\u5165\u53c2\u6570\u4e2d\u7684\u5b57\u8282\u5207\u7247\u4e2d\uff0c\u7136\u540e\u8fd4\u56de\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u548c\u4e00\u4e2a error \u5bf9\u8c61\uff0c\u5982\u679c\u6ca1\u6709\u9519\u8bef\u53d1\u751f\u8fd4\u56de nil \uff0c\u5982\u679c\u5df2\u7ecf\u5230\u8fbe\u8f93\u5165\u7684\u5c3e\u7aef\uff0c\u4f1a\u8fd4\u56de io.EOF(\"EOF\") \uff0c\u5982\u679c\u8bfb\u53d6\u7684\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u9519\u8bef\uff0c\u5c31\u4f1a\u8fd4\u56de\u5177\u4f53\u7684\u9519\u8bef\u4fe1\u606f\u3002\u7c7b\u4f3c\u5730\uff0c\u4e00\u4e2a\u5bf9\u8c61\u8981\u662f\u53ef\u5199\u7684\uff0c\u5b83\u5fc5\u987b\u5b9e\u73b0 io.Writer \u63a5\u53e3\uff0c\u8fd9\u4e2a\u63a5\u53e3\u4e5f\u53ea\u6709\u4e00\u4e2a\u7b7e\u540d\u662f Write(p []byte) (n int, err error) \u7684\u65b9\u6cd5\uff0c\u5b83\u5c06\u6307\u5b9a\u5b57\u8282\u5207\u7247\u4e2d\u7684\u6570\u636e\u5199\u5165\u8c03\u7528\u5b83\u7684\u5bf9\u8c61\u91cc\uff0c\u7136\u540e\u8fd4\u56de\u5b9e\u9645\u5199\u5165\u7684\u5b57\u8282\u6570\u548c\u4e00\u4e2a error \u5bf9\u8c61\uff08\u5982\u679c\u6ca1\u6709\u9519\u8bef\u53d1\u751f\u5c31\u662f nil \uff09\u3002 io \u5305\u91cc\u7684 Readers \u548c Writers \u90fd\u662f\u4e0d\u5e26\u7f13\u51b2\u7684\uff0c bufio \u5305\u91cc\u63d0\u4f9b\u4e86\u5bf9\u5e94\u7684\u5e26\u7f13\u51b2\u7684\u64cd\u4f5c\uff0c\u5728\u8bfb\u5199 UTF-8 \u7f16\u7801\u7684\u6587\u672c\u6587\u4ef6\u65f6\u5b83\u4eec\u5c24\u5176\u6709\u7528\u3002\u5728 \u7b2c 12 \u7ae0 \u6211\u4eec\u4f1a\u770b\u5230\u5f88\u591a\u5728\u5b9e\u6218\u4e2d\u4f7f\u7528\u5b83\u4eec\u7684\u4f8b\u5b50\u3002 \u5728\u5b9e\u9645\u7f16\u7a0b\u4e2d\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528\u8fd9\u4e9b\u63a5\u53e3\uff0c\u4f1a\u4f7f\u7a0b\u5e8f\u53d8\u5f97\u66f4\u901a\u7528\uff0c\u53ef\u4ee5\u5728\u4efb\u4f55\u5b9e\u73b0\u4e86\u8fd9\u4e9b\u63a5\u53e3\u7684\u7c7b\u578b\u4e0a\u4f7f\u7528\u8bfb\u5199\u65b9\u6cd5\u3002 \u4f8b\u5982\u4e00\u4e2a JPEG \u56fe\u5f62\u89e3\u7801\u5668\uff0c\u901a\u8fc7\u4e00\u4e2a Reader \u53c2\u6570\uff0c\u5b83\u53ef\u4ee5\u89e3\u7801\u6765\u81ea\u78c1\u76d8\u3001\u7f51\u7edc\u8fde\u63a5\u6216\u4ee5 gzip \u538b\u7f29\u7684 HTTP \u6d41\u4e2d\u7684 JPEG \u56fe\u5f62\u6570\u636e\uff0c\u6216\u8005\u5176\u4ed6\u4efb\u4f55\u5b9e\u73b0\u4e86 Reader \u63a5\u53e3\u7684\u5bf9\u8c61\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7b2c\u4e00\u4e2a\u4f8b\u5b50\uff1a\u4f7f\u7528Sorter\u63a5\u53e3\u6392\u5e8f \u4e0b\u4e00\u8282\uff1a \u7a7a\u63a5\u53e3","title":"11.8 \u7b2c\u4e8c\u4e2a\u4f8b\u5b50 \u8bfb\u548c\u5199"},{"location":"11.8/#118","text":"\u8bfb\u548c\u5199\u662f\u8f6f\u4ef6\u4e2d\u5f88\u666e\u904d\u7684\u884c\u4e3a\uff0c\u63d0\u8d77\u5b83\u4eec\u4f1a\u7acb\u5373\u60f3\u5230\u8bfb\u5199\u6587\u4ef6\u3001\u7f13\u5b58\uff08\u6bd4\u5982\u5b57\u8282\u6216\u5b57\u7b26\u4e32\u5207\u7247\uff09\u3001\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u3001\u6807\u51c6\u9519\u8bef\u4ee5\u53ca\u7f51\u7edc\u8fde\u63a5\u3001\u7ba1\u9053\u7b49\u7b49\uff0c\u6216\u8005\u8bfb\u5199\u6211\u4eec\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b\u3002\u4e3a\u4e86\u8ba9\u4ee3\u7801\u5c3d\u53ef\u80fd\u901a\u7528\uff0cGo \u91c7\u53d6\u4e86\u4e00\u81f4\u7684\u65b9\u5f0f\u6765\u8bfb\u5199\u6570\u636e\u3002 io \u5305\u63d0\u4f9b\u4e86\u7528\u4e8e\u8bfb\u548c\u5199\u7684\u63a5\u53e3 io.Reader \u548c io.Writer \uff1a type Reader interface { Read ( p [] byte ) ( n int , err error ) } type Writer interface { Write ( p [] byte ) ( n int , err error ) } \u53ea\u8981\u7c7b\u578b\u5b9e\u73b0\u4e86\u8bfb\u5199\u63a5\u53e3\uff0c\u63d0\u4f9b Read \u548c Write \u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u4ece\u5b83\u8bfb\u53d6\u6570\u636e\uff0c\u6216\u5411\u5b83\u5199\u5165\u6570\u636e\u3002\u4e00\u4e2a\u5bf9\u8c61\u8981\u662f\u53ef\u8bfb\u7684\uff0c\u5b83\u5fc5\u987b\u5b9e\u73b0 io.Reader \u63a5\u53e3\uff0c\u8fd9\u4e2a\u63a5\u53e3\u53ea\u6709\u4e00\u4e2a\u7b7e\u540d\u662f Read(p []byte) (n int, err error) \u7684\u65b9\u6cd5\uff0c\u5b83\u4ece\u8c03\u7528\u5b83\u7684\u5bf9\u8c61\u4e0a\u8bfb\u53d6\u6570\u636e\uff0c\u5e76\u628a\u8bfb\u5230\u7684\u6570\u636e\u653e\u5165\u53c2\u6570\u4e2d\u7684\u5b57\u8282\u5207\u7247\u4e2d\uff0c\u7136\u540e\u8fd4\u56de\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u548c\u4e00\u4e2a error \u5bf9\u8c61\uff0c\u5982\u679c\u6ca1\u6709\u9519\u8bef\u53d1\u751f\u8fd4\u56de nil \uff0c\u5982\u679c\u5df2\u7ecf\u5230\u8fbe\u8f93\u5165\u7684\u5c3e\u7aef\uff0c\u4f1a\u8fd4\u56de io.EOF(\"EOF\") \uff0c\u5982\u679c\u8bfb\u53d6\u7684\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u9519\u8bef\uff0c\u5c31\u4f1a\u8fd4\u56de\u5177\u4f53\u7684\u9519\u8bef\u4fe1\u606f\u3002\u7c7b\u4f3c\u5730\uff0c\u4e00\u4e2a\u5bf9\u8c61\u8981\u662f\u53ef\u5199\u7684\uff0c\u5b83\u5fc5\u987b\u5b9e\u73b0 io.Writer \u63a5\u53e3\uff0c\u8fd9\u4e2a\u63a5\u53e3\u4e5f\u53ea\u6709\u4e00\u4e2a\u7b7e\u540d\u662f Write(p []byte) (n int, err error) \u7684\u65b9\u6cd5\uff0c\u5b83\u5c06\u6307\u5b9a\u5b57\u8282\u5207\u7247\u4e2d\u7684\u6570\u636e\u5199\u5165\u8c03\u7528\u5b83\u7684\u5bf9\u8c61\u91cc\uff0c\u7136\u540e\u8fd4\u56de\u5b9e\u9645\u5199\u5165\u7684\u5b57\u8282\u6570\u548c\u4e00\u4e2a error \u5bf9\u8c61\uff08\u5982\u679c\u6ca1\u6709\u9519\u8bef\u53d1\u751f\u5c31\u662f nil \uff09\u3002 io \u5305\u91cc\u7684 Readers \u548c Writers \u90fd\u662f\u4e0d\u5e26\u7f13\u51b2\u7684\uff0c bufio \u5305\u91cc\u63d0\u4f9b\u4e86\u5bf9\u5e94\u7684\u5e26\u7f13\u51b2\u7684\u64cd\u4f5c\uff0c\u5728\u8bfb\u5199 UTF-8 \u7f16\u7801\u7684\u6587\u672c\u6587\u4ef6\u65f6\u5b83\u4eec\u5c24\u5176\u6709\u7528\u3002\u5728 \u7b2c 12 \u7ae0 \u6211\u4eec\u4f1a\u770b\u5230\u5f88\u591a\u5728\u5b9e\u6218\u4e2d\u4f7f\u7528\u5b83\u4eec\u7684\u4f8b\u5b50\u3002 \u5728\u5b9e\u9645\u7f16\u7a0b\u4e2d\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528\u8fd9\u4e9b\u63a5\u53e3\uff0c\u4f1a\u4f7f\u7a0b\u5e8f\u53d8\u5f97\u66f4\u901a\u7528\uff0c\u53ef\u4ee5\u5728\u4efb\u4f55\u5b9e\u73b0\u4e86\u8fd9\u4e9b\u63a5\u53e3\u7684\u7c7b\u578b\u4e0a\u4f7f\u7528\u8bfb\u5199\u65b9\u6cd5\u3002 \u4f8b\u5982\u4e00\u4e2a JPEG \u56fe\u5f62\u89e3\u7801\u5668\uff0c\u901a\u8fc7\u4e00\u4e2a Reader \u53c2\u6570\uff0c\u5b83\u53ef\u4ee5\u89e3\u7801\u6765\u81ea\u78c1\u76d8\u3001\u7f51\u7edc\u8fde\u63a5\u6216\u4ee5 gzip \u538b\u7f29\u7684 HTTP \u6d41\u4e2d\u7684 JPEG \u56fe\u5f62\u6570\u636e\uff0c\u6216\u8005\u5176\u4ed6\u4efb\u4f55\u5b9e\u73b0\u4e86 Reader \u63a5\u53e3\u7684\u5bf9\u8c61\u3002","title":"11.8 \u7b2c\u4e8c\u4e2a\u4f8b\u5b50\uff1a\u8bfb\u548c\u5199"},{"location":"11.8/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7b2c\u4e00\u4e2a\u4f8b\u5b50\uff1a\u4f7f\u7528Sorter\u63a5\u53e3\u6392\u5e8f \u4e0b\u4e00\u8282\uff1a \u7a7a\u63a5\u53e3","title":"\u94fe\u63a5"},{"location":"11.9/","text":"11.9 \u7a7a\u63a5\u53e3 \u00b6 11.9.1 \u6982\u5ff5 \u00b6 \u7a7a\u63a5\u53e3\u6216\u8005\u6700\u5c0f\u63a5\u53e3 \u4e0d\u5305\u542b\u4efb\u4f55\u65b9\u6cd5\uff0c\u5b83\u5bf9\u5b9e\u73b0\u4e0d\u505a\u4efb\u4f55\u8981\u6c42\uff1a type Any interface {} \u4efb\u4f55\u5176\u4ed6\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86\u7a7a\u63a5\u53e3\uff08\u5b83\u4e0d\u4ec5\u4ec5\u50cf Java/C# \u4e2d Object \u5f15\u7528\u7c7b\u578b\uff09\uff0c any \u6216 Any \u662f\u7a7a\u63a5\u53e3\u4e00\u4e2a\u5f88\u597d\u7684\u522b\u540d\u6216\u7f29\u5199\u3002 \u7a7a\u63a5\u53e3\u7c7b\u4f3c Java/C# \u4e2d\u6240\u6709\u7c7b\u7684\u57fa\u7c7b\uff1a Object \u7c7b\uff0c\u4e8c\u8005\u7684\u76ee\u6807\u4e5f\u5f88\u76f8\u8fd1\u3002 \u53ef\u4ee5\u7ed9\u4e00\u4e2a\u7a7a\u63a5\u53e3\u7c7b\u578b\u7684\u53d8\u91cf var val interface {} \u8d4b\u4efb\u4f55\u7c7b\u578b\u7684\u503c\u3002 \u793a\u4f8b 11.8 empty_interface.go \uff1a package main import \"fmt\" var i = 5 var str = \"ABC\" type Person struct { name string age int } type Any interface {} func main () { var val Any val = 5 fmt . Printf ( \"val has the value: %v\\n\" , val ) val = str fmt . Printf ( \"val has the value: %v\\n\" , val ) pers1 := new ( Person ) pers1 . name = \"Rob Pike\" pers1 . age = 55 val = pers1 fmt . Printf ( \"val has the value: %v\\n\" , val ) switch t := val .( type ) { case int : fmt . Printf ( \"Type int %T\\n\" , t ) case string : fmt . Printf ( \"Type string %T\\n\" , t ) case bool : fmt . Printf ( \"Type boolean %T\\n\" , t ) case * Person : fmt . Printf ( \"Type pointer to Person %T\\n\" , t ) default : fmt . Printf ( \"Unexpected type %T\" , t ) } } \u8f93\u51fa\uff1a val has the value: 5 val has the value: ABC val has the value: &{Rob Pike 55} Type pointer to Person *main.Person \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u63a5\u53e3\u53d8\u91cf val \u88ab\u4f9d\u6b21\u8d4b\u4e88\u4e00\u4e2a int \uff0c string \u548c Person \u5b9e\u4f8b\u7684\u503c\uff0c\u7136\u540e\u4f7f\u7528 type-switch \u6765\u6d4b\u8bd5\u5b83\u7684\u5b9e\u9645\u7c7b\u578b\u3002\u6bcf\u4e2a interface {} \u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u5360\u636e\u4e24\u4e2a\u5b57\u957f\uff1a\u4e00\u4e2a\u7528\u6765\u5b58\u50a8\u5b83\u5305\u542b\u7684\u7c7b\u578b\uff0c\u53e6\u4e00\u4e2a\u7528\u6765\u5b58\u50a8\u5b83\u5305\u542b\u7684\u6570\u636e\u6216\u8005\u6307\u5411\u6570\u636e\u7684\u6307\u9488\u3002 \u793a\u4f8b emptyint_switch.go \u8bf4\u660e\u4e86\u7a7a\u63a5\u53e3\u5728 type-switch \u4e2d\u8054\u5408 lambda \u51fd\u6570\u7684\u7528\u6cd5\uff1a package main import \"fmt\" type specialString string var whatIsThis specialString = \"hello\" func TypeSwitch () { testFunc := func ( any interface {}) { switch v := any .( type ) { case bool : fmt . Printf ( \"any %v is a bool type\" , v ) case int : fmt . Printf ( \"any %v is an int type\" , v ) case float32 : fmt . Printf ( \"any %v is a float32 type\" , v ) case string : fmt . Printf ( \"any %v is a string type\" , v ) case specialString : fmt . Printf ( \"any %v is a special String!\" , v ) default : fmt . Println ( \"unknown type!\" ) } } testFunc ( whatIsThis ) } func main () { TypeSwitch () } \u8f93\u51fa\uff1a any hello is a special String! \u7ec3\u4e60 11.9 simple_interface3.go \uff1a \u7ee7\u7eed\u7ec3\u4e60 11.2\uff0c\u5728\u5b83\u4e2d\u6dfb\u52a0\u4e00\u4e2a gI() \u51fd\u6570\uff0c\u5b83\u4e0d\u518d\u63a5\u53d7 Simpler \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u800c\u662f\u63a5\u53d7\u4e00\u4e2a\u7a7a\u63a5\u53e3\u53c2\u6570\u3002\u7136\u540e\u901a\u8fc7\u7c7b\u578b\u65ad\u8a00\u5224\u65ad\u53c2\u6570\u662f\u5426\u662f Simpler \u7c7b\u578b\u3002\u6700\u540e\u5728 main \u4f7f\u7528 gI() \u53d6\u4ee3 fI() \u51fd\u6570\u5e76\u8c03\u7528\u5b83\u3002\u786e\u4fdd\u4f60\u7684\u4ee3\u7801\u8db3\u591f\u5b89\u5168\u3002 11.9.2 \u6784\u5efa\u901a\u7528\u7c7b\u578b\u6216\u5305\u542b\u4e0d\u540c\u7c7b\u578b\u53d8\u91cf\u7684\u6570\u7ec4 \u00b6 \u5728 7.6.6 \u4e2d\u6211\u4eec\u770b\u5230\u4e86\u80fd\u88ab\u641c\u7d22\u548c\u6392\u5e8f\u7684 int \u6570\u7ec4\u3001 float \u6570\u7ec4\u4ee5\u53ca string \u6570\u7ec4\uff0c\u90a3\u4e48\u5bf9\u4e8e\u5176\u4ed6\u7c7b\u578b\u7684\u6570\u7ec4\u5462\uff0c\u662f\u4e0d\u662f\u6211\u4eec\u5fc5\u987b\u5f97\u81ea\u5df1\u7f16\u7a0b\u5b9e\u73b0\u5b83\u4eec\uff1f \u73b0\u5728\u6211\u4eec\u77e5\u9053\u8be5\u600e\u4e48\u505a\u4e86\uff0c\u5c31\u662f\u901a\u8fc7\u4f7f\u7528\u7a7a\u63a5\u53e3\u3002\u8ba9\u6211\u4eec\u7ed9\u7a7a\u63a5\u53e3\u5b9a\u4e00\u4e2a\u522b\u540d\u7c7b\u578b Element \uff1a type Element interface{} \u7136\u540e\u5b9a\u4e49\u4e00\u4e2a\u5bb9\u5668\u7c7b\u578b\u7684\u7ed3\u6784\u4f53 Vector \uff0c\u5b83\u5305\u542b\u4e00\u4e2a Element \u7c7b\u578b\u5143\u7d20\u7684\u5207\u7247\uff1a type Vector struct { a [] Element } Vector \u91cc\u80fd\u653e\u4efb\u4f55\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u56e0\u4e3a\u4efb\u4f55\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86\u7a7a\u63a5\u53e3\uff0c\u5b9e\u9645\u4e0a Vector \u91cc\u653e\u7684\u6bcf\u4e2a\u5143\u7d20\u53ef\u4ee5\u662f\u4e0d\u540c\u7c7b\u578b\u7684\u53d8\u91cf\u3002\u6211\u4eec\u4e3a\u5b83\u5b9a\u4e49\u4e00\u4e2a At() \u65b9\u6cd5\u7528\u4e8e\u8fd4\u56de\u7b2c i \u4e2a\u5143\u7d20\uff1a func ( p * Vector ) At ( i int ) Element { return p . a [ i ] } \u518d\u5b9a\u4e00\u4e2a Set() \u65b9\u6cd5\u7528\u4e8e\u8bbe\u7f6e\u7b2c i \u4e2a\u5143\u7d20\u7684\u503c\uff1a func ( p * Vector ) Set ( i int , e Element ) { p . a [ i ] = e } Vector \u4e2d\u5b58\u50a8\u7684\u6240\u6709\u5143\u7d20\u90fd\u662f Element \u7c7b\u578b\uff0c\u8981\u5f97\u5230\u5b83\u4eec\u7684\u539f\u59cb\u7c7b\u578b\uff08unboxing\uff1a\u62c6\u7bb1\uff09\u9700\u8981\u7528\u5230\u7c7b\u578b\u65ad\u8a00\u3002TODO\uff1aThe compiler rejects assertions guaranteed to fail\uff0c\u7c7b\u578b\u65ad\u8a00\u603b\u662f\u5728\u8fd0\u884c\u65f6\u624d\u6267\u884c\uff0c\u56e0\u6b64\u5b83\u4f1a\u4ea7\u751f\u8fd0\u884c\u65f6\u9519\u8bef\u3002 \u7ec3\u4e60 11.10 min_interface.go / minmain.go \uff1a \u4eff\u7167 11.7 \u4e2d\u5f00\u53d1\u7684 Sorter \u63a5\u53e3\uff0c\u521b\u5efa\u4e00\u4e2a Miner \u63a5\u53e3\u5e76\u5b9e\u73b0\u4e00\u4e9b\u5fc5\u8981\u7684\u64cd\u4f5c\u3002\u51fd\u6570 Min() \u63a5\u53d7\u4e00\u4e2a Miner \u7c7b\u578b\u53d8\u91cf\u7684\u96c6\u5408\uff0c\u7136\u540e\u8ba1\u7b97\u5e76\u8fd4\u56de\u96c6\u5408\u4e2d\u6700\u5c0f\u7684\u5143\u7d20\u3002 11.9.3 \u590d\u5236\u6570\u636e\u5207\u7247\u81f3\u7a7a\u63a5\u53e3\u5207\u7247 \u00b6 \u5047\u8bbe\u4f60\u6709\u4e00\u4e2a myType \u7c7b\u578b\u7684\u6570\u636e\u5207\u7247\uff0c\u4f60\u60f3\u5c06\u5207\u7247\u4e2d\u7684\u6570\u636e\u590d\u5236\u5230\u4e00\u4e2a\u7a7a\u63a5\u53e3\u5207\u7247\u4e2d\uff0c\u7c7b\u4f3c\uff1a var dataSlice [] myType = FuncReturnSlice () var interfaceSlice [] interface {} = dataSlice \u53ef\u60dc\u4e0d\u80fd\u8fd9\u4e48\u505a\uff0c\u7f16\u8bd1\u65f6\u4f1a\u51fa\u9519\uff1a cannot use dataSlice (type []myType) as type []interface { } in assignment \u3002 \u539f\u56e0\u662f\u5b83\u4eec\u4fe9\u5728\u5185\u5b58\u4e2d\u7684\u5e03\u5c40\u662f\u4e0d\u4e00\u6837\u7684\uff08\u53c2\u8003 Go wiki \uff09\u3002 \u5fc5\u987b\u4f7f\u7528 for-range \u8bed\u53e5\u6765\u4e00\u4e2a\u4e00\u4e2a\u663e\u5f0f\u5730\u8d4b\u503c\uff1a var dataSlice [] myType = FuncReturnSlice () var interfaceSlice [] interface {} = make ([] interface {}, len ( dataSlice )) for i , d := range dataSlice { interfaceSlice [ i ] = d } 11.9.4 \u901a\u7528\u7c7b\u578b\u7684\u8282\u70b9\u6570\u636e\u7ed3\u6784 \u00b6 \u5728 10.1 \u4e2d\u6211\u4eec\u9047\u5230\u4e86\u8bf8\u5982\u5217\u8868\u548c\u6811\u8fd9\u6837\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5728\u5b83\u4eec\u7684\u5b9a\u4e49\u4e2d\u4f7f\u7528\u4e86\u4e00\u79cd\u53eb\u8282\u70b9\u7684\u9012\u5f52\u7ed3\u6784\u4f53\u7c7b\u578b\uff0c\u8282\u70b9\u5305\u542b\u4e00\u4e2a\u67d0\u79cd\u7c7b\u578b\u7684\u6570\u636e\u5b57\u6bb5\u3002\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u7a7a\u63a5\u53e3\u4f5c\u4e3a\u6570\u636e\u5b57\u6bb5\u7684\u7c7b\u578b\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u5199\u51fa\u901a\u7528\u7684\u4ee3\u7801\u3002\u4e0b\u9762\u662f\u5b9e\u73b0\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u90e8\u5206\u4ee3\u7801\uff1a\u901a\u7528\u5b9a\u4e49\u3001\u7528\u4e8e\u521b\u5efa\u7a7a\u8282\u70b9\u7684 NewNode \u65b9\u6cd5\uff0c\u53ca\u8bbe\u7f6e\u6570\u636e\u7684 SetData \u65b9\u6cd5\u3002 \u793a\u4f8b 11.10 node_structures.go \uff1a package main import \"fmt\" type Node struct { le * Node data interface {} ri * Node } func NewNode ( left , right * Node ) * Node { return & Node { left , nil , right } } func ( n * Node ) SetData ( data interface {}) { n . data = data } func main () { root := NewNode ( nil , nil ) root . SetData ( \"root node\" ) // make child (leaf) nodes: a := NewNode ( nil , nil ) a . SetData ( \"left node\" ) b := NewNode ( nil , nil ) b . SetData ( \"right node\" ) root . le = a root . ri = b fmt . Printf ( \"%v\\n\" , root ) // Output: &{0x125275f0 root node 0x125275e0} } 11.9.5 \u63a5\u53e3\u5230\u63a5\u53e3 \u00b6 \u4e00\u4e2a\u63a5\u53e3\u7684\u503c\u53ef\u4ee5\u8d4b\u503c\u7ed9\u53e6\u4e00\u4e2a\u63a5\u53e3\u53d8\u91cf\uff0c\u53ea\u8981\u5e95\u5c42\u7c7b\u578b\u5b9e\u73b0\u4e86\u5fc5\u8981\u7684\u65b9\u6cd5\u3002\u8fd9\u4e2a\u8f6c\u6362\u662f\u5728\u8fd0\u884c\u65f6\u8fdb\u884c\u68c0\u67e5\u7684\uff0c\u8f6c\u6362\u5931\u8d25\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u8fd0\u884c\u65f6\u9519\u8bef\uff1a\u8fd9\u662f Go \u8bed\u8a00\u52a8\u6001\u7684\u4e00\u9762\uff0c\u53ef\u4ee5\u62ff\u5b83\u548c Ruby \u548c Python \u8fd9\u4e9b\u52a8\u6001\u8bed\u8a00\u76f8\u6bd4\u8f83\u3002 \u5047\u5b9a\uff1a var ai AbsInterface // declares method Abs() type SqrInterface interface { Sqr () float } var si SqrInterface pp := new ( Point ) // say *Point implements Abs, Sqr var empty interface {} \u90a3\u4e48\u4e0b\u9762\u7684\u8bed\u53e5\u548c\u7c7b\u578b\u65ad\u8a00\u662f\u5408\u6cd5\u7684\uff1a empty = pp // everything satisfies empty ai = empty .( AbsInterface ) // underlying value pp implements Abs() // (runtime failure otherwise) si = ai .( SqrInterface ) // *Point has Sqr() even though AbsInterface doesn\u2019t empty = si // *Point implements empty set // Note: statically checkable so type assertion not necessary. \u4e0b\u9762\u662f\u51fd\u6570\u8c03\u7528\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1a type myPrintInterface interface { print () } func f3 ( x myInterface ) { x .( myPrintInterface ). print () // type assertion to myPrintInterface } x \u8f6c\u6362\u4e3a myPrintInterface \u7c7b\u578b\u662f\u5b8c\u5168\u52a8\u6001\u7684\uff1a\u53ea\u8981 x \u7684\u5e95\u5c42\u7c7b\u578b\uff08\u52a8\u6001\u7c7b\u578b\uff09\u5b9a\u4e49\u4e86 print \u65b9\u6cd5\u8fd9\u4e2a\u8c03\u7528\u5c31\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\uff08\u8bd1\u6ce8\uff1a\u82e5 x \u7684\u5e95\u5c42\u7c7b\u578b\u672a\u5b9a\u4e49 print \u65b9\u6cd5\uff0c\u6b64\u5904\u7c7b\u578b\u65ad\u8a00\u4f1a\u5bfc\u81f4 panic \uff0c\u6700\u4f73\u5b9e\u8df5\u5e94\u8be5\u4e3a if mpi, ok := x.(myPrintInterface); ok { mpi.print() } \uff0c\u53c2\u8003 11.3 \u7ae0\u8282\uff09\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7b2c\u4e8c\u4e2a\u4f8b\u5b50\uff1a\u8bfb\u548c\u5199 \u4e0b\u4e00\u8282\uff1a \u53cd\u5c04\u5305","title":"11.9 \u7a7a\u63a5\u53e3"},{"location":"11.9/#119","text":"","title":"11.9 \u7a7a\u63a5\u53e3"},{"location":"11.9/#1191","text":"\u7a7a\u63a5\u53e3\u6216\u8005\u6700\u5c0f\u63a5\u53e3 \u4e0d\u5305\u542b\u4efb\u4f55\u65b9\u6cd5\uff0c\u5b83\u5bf9\u5b9e\u73b0\u4e0d\u505a\u4efb\u4f55\u8981\u6c42\uff1a type Any interface {} \u4efb\u4f55\u5176\u4ed6\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86\u7a7a\u63a5\u53e3\uff08\u5b83\u4e0d\u4ec5\u4ec5\u50cf Java/C# \u4e2d Object \u5f15\u7528\u7c7b\u578b\uff09\uff0c any \u6216 Any \u662f\u7a7a\u63a5\u53e3\u4e00\u4e2a\u5f88\u597d\u7684\u522b\u540d\u6216\u7f29\u5199\u3002 \u7a7a\u63a5\u53e3\u7c7b\u4f3c Java/C# \u4e2d\u6240\u6709\u7c7b\u7684\u57fa\u7c7b\uff1a Object \u7c7b\uff0c\u4e8c\u8005\u7684\u76ee\u6807\u4e5f\u5f88\u76f8\u8fd1\u3002 \u53ef\u4ee5\u7ed9\u4e00\u4e2a\u7a7a\u63a5\u53e3\u7c7b\u578b\u7684\u53d8\u91cf var val interface {} \u8d4b\u4efb\u4f55\u7c7b\u578b\u7684\u503c\u3002 \u793a\u4f8b 11.8 empty_interface.go \uff1a package main import \"fmt\" var i = 5 var str = \"ABC\" type Person struct { name string age int } type Any interface {} func main () { var val Any val = 5 fmt . Printf ( \"val has the value: %v\\n\" , val ) val = str fmt . Printf ( \"val has the value: %v\\n\" , val ) pers1 := new ( Person ) pers1 . name = \"Rob Pike\" pers1 . age = 55 val = pers1 fmt . Printf ( \"val has the value: %v\\n\" , val ) switch t := val .( type ) { case int : fmt . Printf ( \"Type int %T\\n\" , t ) case string : fmt . Printf ( \"Type string %T\\n\" , t ) case bool : fmt . Printf ( \"Type boolean %T\\n\" , t ) case * Person : fmt . Printf ( \"Type pointer to Person %T\\n\" , t ) default : fmt . Printf ( \"Unexpected type %T\" , t ) } } \u8f93\u51fa\uff1a val has the value: 5 val has the value: ABC val has the value: &{Rob Pike 55} Type pointer to Person *main.Person \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u63a5\u53e3\u53d8\u91cf val \u88ab\u4f9d\u6b21\u8d4b\u4e88\u4e00\u4e2a int \uff0c string \u548c Person \u5b9e\u4f8b\u7684\u503c\uff0c\u7136\u540e\u4f7f\u7528 type-switch \u6765\u6d4b\u8bd5\u5b83\u7684\u5b9e\u9645\u7c7b\u578b\u3002\u6bcf\u4e2a interface {} \u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u5360\u636e\u4e24\u4e2a\u5b57\u957f\uff1a\u4e00\u4e2a\u7528\u6765\u5b58\u50a8\u5b83\u5305\u542b\u7684\u7c7b\u578b\uff0c\u53e6\u4e00\u4e2a\u7528\u6765\u5b58\u50a8\u5b83\u5305\u542b\u7684\u6570\u636e\u6216\u8005\u6307\u5411\u6570\u636e\u7684\u6307\u9488\u3002 \u793a\u4f8b emptyint_switch.go \u8bf4\u660e\u4e86\u7a7a\u63a5\u53e3\u5728 type-switch \u4e2d\u8054\u5408 lambda \u51fd\u6570\u7684\u7528\u6cd5\uff1a package main import \"fmt\" type specialString string var whatIsThis specialString = \"hello\" func TypeSwitch () { testFunc := func ( any interface {}) { switch v := any .( type ) { case bool : fmt . Printf ( \"any %v is a bool type\" , v ) case int : fmt . Printf ( \"any %v is an int type\" , v ) case float32 : fmt . Printf ( \"any %v is a float32 type\" , v ) case string : fmt . Printf ( \"any %v is a string type\" , v ) case specialString : fmt . Printf ( \"any %v is a special String!\" , v ) default : fmt . Println ( \"unknown type!\" ) } } testFunc ( whatIsThis ) } func main () { TypeSwitch () } \u8f93\u51fa\uff1a any hello is a special String! \u7ec3\u4e60 11.9 simple_interface3.go \uff1a \u7ee7\u7eed\u7ec3\u4e60 11.2\uff0c\u5728\u5b83\u4e2d\u6dfb\u52a0\u4e00\u4e2a gI() \u51fd\u6570\uff0c\u5b83\u4e0d\u518d\u63a5\u53d7 Simpler \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u800c\u662f\u63a5\u53d7\u4e00\u4e2a\u7a7a\u63a5\u53e3\u53c2\u6570\u3002\u7136\u540e\u901a\u8fc7\u7c7b\u578b\u65ad\u8a00\u5224\u65ad\u53c2\u6570\u662f\u5426\u662f Simpler \u7c7b\u578b\u3002\u6700\u540e\u5728 main \u4f7f\u7528 gI() \u53d6\u4ee3 fI() \u51fd\u6570\u5e76\u8c03\u7528\u5b83\u3002\u786e\u4fdd\u4f60\u7684\u4ee3\u7801\u8db3\u591f\u5b89\u5168\u3002","title":"11.9.1 \u6982\u5ff5"},{"location":"11.9/#1192","text":"\u5728 7.6.6 \u4e2d\u6211\u4eec\u770b\u5230\u4e86\u80fd\u88ab\u641c\u7d22\u548c\u6392\u5e8f\u7684 int \u6570\u7ec4\u3001 float \u6570\u7ec4\u4ee5\u53ca string \u6570\u7ec4\uff0c\u90a3\u4e48\u5bf9\u4e8e\u5176\u4ed6\u7c7b\u578b\u7684\u6570\u7ec4\u5462\uff0c\u662f\u4e0d\u662f\u6211\u4eec\u5fc5\u987b\u5f97\u81ea\u5df1\u7f16\u7a0b\u5b9e\u73b0\u5b83\u4eec\uff1f \u73b0\u5728\u6211\u4eec\u77e5\u9053\u8be5\u600e\u4e48\u505a\u4e86\uff0c\u5c31\u662f\u901a\u8fc7\u4f7f\u7528\u7a7a\u63a5\u53e3\u3002\u8ba9\u6211\u4eec\u7ed9\u7a7a\u63a5\u53e3\u5b9a\u4e00\u4e2a\u522b\u540d\u7c7b\u578b Element \uff1a type Element interface{} \u7136\u540e\u5b9a\u4e49\u4e00\u4e2a\u5bb9\u5668\u7c7b\u578b\u7684\u7ed3\u6784\u4f53 Vector \uff0c\u5b83\u5305\u542b\u4e00\u4e2a Element \u7c7b\u578b\u5143\u7d20\u7684\u5207\u7247\uff1a type Vector struct { a [] Element } Vector \u91cc\u80fd\u653e\u4efb\u4f55\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u56e0\u4e3a\u4efb\u4f55\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86\u7a7a\u63a5\u53e3\uff0c\u5b9e\u9645\u4e0a Vector \u91cc\u653e\u7684\u6bcf\u4e2a\u5143\u7d20\u53ef\u4ee5\u662f\u4e0d\u540c\u7c7b\u578b\u7684\u53d8\u91cf\u3002\u6211\u4eec\u4e3a\u5b83\u5b9a\u4e49\u4e00\u4e2a At() \u65b9\u6cd5\u7528\u4e8e\u8fd4\u56de\u7b2c i \u4e2a\u5143\u7d20\uff1a func ( p * Vector ) At ( i int ) Element { return p . a [ i ] } \u518d\u5b9a\u4e00\u4e2a Set() \u65b9\u6cd5\u7528\u4e8e\u8bbe\u7f6e\u7b2c i \u4e2a\u5143\u7d20\u7684\u503c\uff1a func ( p * Vector ) Set ( i int , e Element ) { p . a [ i ] = e } Vector \u4e2d\u5b58\u50a8\u7684\u6240\u6709\u5143\u7d20\u90fd\u662f Element \u7c7b\u578b\uff0c\u8981\u5f97\u5230\u5b83\u4eec\u7684\u539f\u59cb\u7c7b\u578b\uff08unboxing\uff1a\u62c6\u7bb1\uff09\u9700\u8981\u7528\u5230\u7c7b\u578b\u65ad\u8a00\u3002TODO\uff1aThe compiler rejects assertions guaranteed to fail\uff0c\u7c7b\u578b\u65ad\u8a00\u603b\u662f\u5728\u8fd0\u884c\u65f6\u624d\u6267\u884c\uff0c\u56e0\u6b64\u5b83\u4f1a\u4ea7\u751f\u8fd0\u884c\u65f6\u9519\u8bef\u3002 \u7ec3\u4e60 11.10 min_interface.go / minmain.go \uff1a \u4eff\u7167 11.7 \u4e2d\u5f00\u53d1\u7684 Sorter \u63a5\u53e3\uff0c\u521b\u5efa\u4e00\u4e2a Miner \u63a5\u53e3\u5e76\u5b9e\u73b0\u4e00\u4e9b\u5fc5\u8981\u7684\u64cd\u4f5c\u3002\u51fd\u6570 Min() \u63a5\u53d7\u4e00\u4e2a Miner \u7c7b\u578b\u53d8\u91cf\u7684\u96c6\u5408\uff0c\u7136\u540e\u8ba1\u7b97\u5e76\u8fd4\u56de\u96c6\u5408\u4e2d\u6700\u5c0f\u7684\u5143\u7d20\u3002","title":"11.9.2 \u6784\u5efa\u901a\u7528\u7c7b\u578b\u6216\u5305\u542b\u4e0d\u540c\u7c7b\u578b\u53d8\u91cf\u7684\u6570\u7ec4"},{"location":"11.9/#1193","text":"\u5047\u8bbe\u4f60\u6709\u4e00\u4e2a myType \u7c7b\u578b\u7684\u6570\u636e\u5207\u7247\uff0c\u4f60\u60f3\u5c06\u5207\u7247\u4e2d\u7684\u6570\u636e\u590d\u5236\u5230\u4e00\u4e2a\u7a7a\u63a5\u53e3\u5207\u7247\u4e2d\uff0c\u7c7b\u4f3c\uff1a var dataSlice [] myType = FuncReturnSlice () var interfaceSlice [] interface {} = dataSlice \u53ef\u60dc\u4e0d\u80fd\u8fd9\u4e48\u505a\uff0c\u7f16\u8bd1\u65f6\u4f1a\u51fa\u9519\uff1a cannot use dataSlice (type []myType) as type []interface { } in assignment \u3002 \u539f\u56e0\u662f\u5b83\u4eec\u4fe9\u5728\u5185\u5b58\u4e2d\u7684\u5e03\u5c40\u662f\u4e0d\u4e00\u6837\u7684\uff08\u53c2\u8003 Go wiki \uff09\u3002 \u5fc5\u987b\u4f7f\u7528 for-range \u8bed\u53e5\u6765\u4e00\u4e2a\u4e00\u4e2a\u663e\u5f0f\u5730\u8d4b\u503c\uff1a var dataSlice [] myType = FuncReturnSlice () var interfaceSlice [] interface {} = make ([] interface {}, len ( dataSlice )) for i , d := range dataSlice { interfaceSlice [ i ] = d }","title":"11.9.3 \u590d\u5236\u6570\u636e\u5207\u7247\u81f3\u7a7a\u63a5\u53e3\u5207\u7247"},{"location":"11.9/#1194","text":"\u5728 10.1 \u4e2d\u6211\u4eec\u9047\u5230\u4e86\u8bf8\u5982\u5217\u8868\u548c\u6811\u8fd9\u6837\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5728\u5b83\u4eec\u7684\u5b9a\u4e49\u4e2d\u4f7f\u7528\u4e86\u4e00\u79cd\u53eb\u8282\u70b9\u7684\u9012\u5f52\u7ed3\u6784\u4f53\u7c7b\u578b\uff0c\u8282\u70b9\u5305\u542b\u4e00\u4e2a\u67d0\u79cd\u7c7b\u578b\u7684\u6570\u636e\u5b57\u6bb5\u3002\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u7a7a\u63a5\u53e3\u4f5c\u4e3a\u6570\u636e\u5b57\u6bb5\u7684\u7c7b\u578b\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u5199\u51fa\u901a\u7528\u7684\u4ee3\u7801\u3002\u4e0b\u9762\u662f\u5b9e\u73b0\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u90e8\u5206\u4ee3\u7801\uff1a\u901a\u7528\u5b9a\u4e49\u3001\u7528\u4e8e\u521b\u5efa\u7a7a\u8282\u70b9\u7684 NewNode \u65b9\u6cd5\uff0c\u53ca\u8bbe\u7f6e\u6570\u636e\u7684 SetData \u65b9\u6cd5\u3002 \u793a\u4f8b 11.10 node_structures.go \uff1a package main import \"fmt\" type Node struct { le * Node data interface {} ri * Node } func NewNode ( left , right * Node ) * Node { return & Node { left , nil , right } } func ( n * Node ) SetData ( data interface {}) { n . data = data } func main () { root := NewNode ( nil , nil ) root . SetData ( \"root node\" ) // make child (leaf) nodes: a := NewNode ( nil , nil ) a . SetData ( \"left node\" ) b := NewNode ( nil , nil ) b . SetData ( \"right node\" ) root . le = a root . ri = b fmt . Printf ( \"%v\\n\" , root ) // Output: &{0x125275f0 root node 0x125275e0} }","title":"11.9.4 \u901a\u7528\u7c7b\u578b\u7684\u8282\u70b9\u6570\u636e\u7ed3\u6784"},{"location":"11.9/#1195","text":"\u4e00\u4e2a\u63a5\u53e3\u7684\u503c\u53ef\u4ee5\u8d4b\u503c\u7ed9\u53e6\u4e00\u4e2a\u63a5\u53e3\u53d8\u91cf\uff0c\u53ea\u8981\u5e95\u5c42\u7c7b\u578b\u5b9e\u73b0\u4e86\u5fc5\u8981\u7684\u65b9\u6cd5\u3002\u8fd9\u4e2a\u8f6c\u6362\u662f\u5728\u8fd0\u884c\u65f6\u8fdb\u884c\u68c0\u67e5\u7684\uff0c\u8f6c\u6362\u5931\u8d25\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u8fd0\u884c\u65f6\u9519\u8bef\uff1a\u8fd9\u662f Go \u8bed\u8a00\u52a8\u6001\u7684\u4e00\u9762\uff0c\u53ef\u4ee5\u62ff\u5b83\u548c Ruby \u548c Python \u8fd9\u4e9b\u52a8\u6001\u8bed\u8a00\u76f8\u6bd4\u8f83\u3002 \u5047\u5b9a\uff1a var ai AbsInterface // declares method Abs() type SqrInterface interface { Sqr () float } var si SqrInterface pp := new ( Point ) // say *Point implements Abs, Sqr var empty interface {} \u90a3\u4e48\u4e0b\u9762\u7684\u8bed\u53e5\u548c\u7c7b\u578b\u65ad\u8a00\u662f\u5408\u6cd5\u7684\uff1a empty = pp // everything satisfies empty ai = empty .( AbsInterface ) // underlying value pp implements Abs() // (runtime failure otherwise) si = ai .( SqrInterface ) // *Point has Sqr() even though AbsInterface doesn\u2019t empty = si // *Point implements empty set // Note: statically checkable so type assertion not necessary. \u4e0b\u9762\u662f\u51fd\u6570\u8c03\u7528\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1a type myPrintInterface interface { print () } func f3 ( x myInterface ) { x .( myPrintInterface ). print () // type assertion to myPrintInterface } x \u8f6c\u6362\u4e3a myPrintInterface \u7c7b\u578b\u662f\u5b8c\u5168\u52a8\u6001\u7684\uff1a\u53ea\u8981 x \u7684\u5e95\u5c42\u7c7b\u578b\uff08\u52a8\u6001\u7c7b\u578b\uff09\u5b9a\u4e49\u4e86 print \u65b9\u6cd5\u8fd9\u4e2a\u8c03\u7528\u5c31\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\uff08\u8bd1\u6ce8\uff1a\u82e5 x \u7684\u5e95\u5c42\u7c7b\u578b\u672a\u5b9a\u4e49 print \u65b9\u6cd5\uff0c\u6b64\u5904\u7c7b\u578b\u65ad\u8a00\u4f1a\u5bfc\u81f4 panic \uff0c\u6700\u4f73\u5b9e\u8df5\u5e94\u8be5\u4e3a if mpi, ok := x.(myPrintInterface); ok { mpi.print() } \uff0c\u53c2\u8003 11.3 \u7ae0\u8282\uff09\u3002","title":"11.9.5 \u63a5\u53e3\u5230\u63a5\u53e3"},{"location":"11.9/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7b2c\u4e8c\u4e2a\u4f8b\u5b50\uff1a\u8bfb\u548c\u5199 \u4e0b\u4e00\u8282\uff1a \u53cd\u5c04\u5305","title":"\u94fe\u63a5"},{"location":"12.0/","text":"12.0 \u8bfb\u5199\u6570\u636e \u00b6 \u9664\u4e86 fmt \u548c os \u5305\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u7528\u5230 bufio \u5305\u6765\u5904\u7406\u7f13\u51b2\u7684\u8f93\u5165\u548c\u8f93\u51fa\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u7ae0\uff1a \u7ed3\u6784\u4f53\u3001\u96c6\u5408\u548c\u9ad8\u9636\u51fd\u6570 \u4e0b\u4e00\u8282\uff1a \u8bfb\u53d6\u7528\u6237\u7684\u8f93\u5165","title":"12.0 \u8bfb\u5199\u6570\u636e"},{"location":"12.0/#120","text":"\u9664\u4e86 fmt \u548c os \u5305\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u7528\u5230 bufio \u5305\u6765\u5904\u7406\u7f13\u51b2\u7684\u8f93\u5165\u548c\u8f93\u51fa\u3002","title":"12.0 \u8bfb\u5199\u6570\u636e"},{"location":"12.0/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u7ae0\uff1a \u7ed3\u6784\u4f53\u3001\u96c6\u5408\u548c\u9ad8\u9636\u51fd\u6570 \u4e0b\u4e00\u8282\uff1a \u8bfb\u53d6\u7528\u6237\u7684\u8f93\u5165","title":"\u94fe\u63a5"},{"location":"12.1/","text":"12.1 \u8bfb\u53d6\u7528\u6237\u7684\u8f93\u5165 \u00b6 \u6211\u4eec\u5982\u4f55\u8bfb\u53d6\u7528\u6237\u7684\u952e\u76d8\uff08\u63a7\u5236\u53f0\uff09\u8f93\u5165\u5462\uff1f\u4ece\u952e\u76d8\u548c\u6807\u51c6\u8f93\u5165 os.Stdin \u8bfb\u53d6\u8f93\u5165\uff0c\u6700\u7b80\u5355\u7684\u529e\u6cd5\u662f\u4f7f\u7528 fmt \u5305\u63d0\u4f9b\u7684 Scan... \u548c Sscan... \u5f00\u5934\u7684\u51fd\u6570\u3002\u8bf7\u770b\u4ee5\u4e0b\u7a0b\u5e8f\uff1a \u793a\u4f8b 12.1 readinput1.go \uff1a // \u4ece\u63a7\u5236\u53f0\u8bfb\u53d6\u8f93\u5165: package main import \"fmt\" var ( firstName , lastName , s string i int f float32 input = \"56.12 / 5212 / Go\" format = \"%f / %d / %s\" ) func main () { fmt . Println ( \"Please enter your full name: \" ) fmt . Scanln ( & firstName , & lastName ) // fmt.Scanf(\"%s %s\", &firstName, &lastName) fmt . Printf ( \"Hi %s %s!\\n\" , firstName , lastName ) // Hi Chris Naegels fmt . Sscanf ( input , format , & f , & i , & s ) fmt . Println ( \"From the string we read: \" , f , i , s ) // \u8f93\u51fa\u7ed3\u679c: From the string we read: 56.12 5212 Go } Scanln() \u626b\u63cf\u6765\u81ea\u6807\u51c6\u8f93\u5165\u7684\u6587\u672c\uff0c\u5c06\u7a7a\u683c\u5206\u9694\u7684\u503c\u4f9d\u6b21\u5b58\u653e\u5230\u540e\u7eed\u7684\u53c2\u6570\u5185\uff0c\u76f4\u5230\u78b0\u5230\u6362\u884c\u3002 Scanf() \u4e0e\u5176\u7c7b\u4f3c\uff0c\u9664\u4e86 Scanf() \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u7528\u4f5c\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u7528\u6765\u51b3\u5b9a\u5982\u4f55\u8bfb\u53d6\u3002 Sscan... \u548c\u4ee5 Sscan... \u5f00\u5934\u7684\u51fd\u6570\u5219\u662f\u4ece\u5b57\u7b26\u4e32\u8bfb\u53d6\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u4e0e Scanf() \u76f8\u540c\u3002\u5982\u679c\u8fd9\u4e9b\u51fd\u6570\u8bfb\u53d6\u5230\u7684\u7ed3\u679c\u4e0e\u60a8\u9884\u60f3\u7684\u4e0d\u540c\uff0c\u60a8\u53ef\u4ee5\u68c0\u67e5\u6210\u529f\u8bfb\u5165\u6570\u636e\u7684\u4e2a\u6570\u548c\u8fd4\u56de\u7684\u9519\u8bef\u3002 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 bufio \u5305\u63d0\u4f9b\u7684\u7f13\u51b2\u8bfb\u53d6\u5668 (buffered reader) \u6765\u8bfb\u53d6\u6570\u636e\uff0c\u6b63\u5982\u4ee5\u4e0b\u4f8b\u5b50\u6240\u793a\uff1a \u793a\u4f8b 12.2 readinput2.go \uff1a package main import ( \"fmt\" \"bufio\" \"os\" ) var inputReader * bufio . Reader var input string var err error func main () { inputReader = bufio . NewReader ( os . Stdin ) fmt . Println ( \"Please enter some input: \" ) input , err = inputReader . ReadString ( '\\n' ) if err == nil { fmt . Printf ( \"The input was: %s\\n\" , input ) } } inputReader \u662f\u4e00\u4e2a\u6307\u5411 bufio.Reader \u7684\u6307\u9488\u3002 inputReader := bufio.NewReader(os.Stdin) \u8fd9\u884c\u4ee3\u7801\uff0c\u5c06\u4f1a\u521b\u5efa\u4e00\u4e2a\u8bfb\u53d6\u5668\uff0c\u5e76\u5c06\u5176\u4e0e\u6807\u51c6\u8f93\u5165\u7ed1\u5b9a\u3002 bufio.NewReader() \u6784\u9020\u51fd\u6570\u7684\u7b7e\u540d\u4e3a\uff1a func NewReader(rd io.Reader) *Reader \u8be5\u51fd\u6570\u7684\u5b9e\u53c2\u53ef\u4ee5\u662f\u6ee1\u8db3 io.Reader \u63a5\u53e3\u7684\u4efb\u610f\u5bf9\u8c61\uff08\u4efb\u610f\u5305\u542b\u6709\u9002\u5f53\u7684 Read() \u65b9\u6cd5\u7684\u5bf9\u8c61\uff0c\u8bf7\u53c2\u8003 \u7ae0\u8282 11.8 \uff09\uff0c\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5e26\u7f13\u51b2\u7684 io.Reader \u5bf9\u8c61\uff0c\u5b83\u5c06\u4ece\u6307\u5b9a\u8bfb\u53d6\u5668\uff08\u4f8b\u5982 os.Stdin \uff09\u8bfb\u53d6\u5185\u5bb9\u3002 \u8fd4\u56de\u7684\u8bfb\u53d6\u5668\u5bf9\u8c61\u63d0\u4f9b\u4e00\u4e2a\u65b9\u6cd5 ReadString(delim byte) \uff0c\u8be5\u65b9\u6cd5\u4ece\u8f93\u5165\u4e2d\u8bfb\u53d6\u5185\u5bb9\uff0c\u76f4\u5230\u78b0\u5230 delim \u6307\u5b9a\u7684\u5b57\u7b26\uff0c\u7136\u540e\u5c06\u8bfb\u53d6\u5230\u7684\u5185\u5bb9\u8fde\u540c delim \u5b57\u7b26\u4e00\u8d77\u653e\u5230\u7f13\u51b2\u533a\u3002 ReadString \u8fd4\u56de\u8bfb\u53d6\u5230\u7684\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u78b0\u5230\u9519\u8bef\u5219\u8fd4\u56de nil \u3002\u5982\u679c\u5b83\u4e00\u76f4\u8bfb\u5230\u6587\u4ef6\u7ed3\u675f\uff0c\u5219\u8fd4\u56de\u8bfb\u53d6\u5230\u7684\u5b57\u7b26\u4e32\u548c io.EOF \u3002\u5982\u679c\u8bfb\u53d6\u8fc7\u7a0b\u4e2d\u6ca1\u6709\u78b0\u5230 delim \u5b57\u7b26\uff0c\u5c06\u8fd4\u56de\u9519\u8bef err != nil \u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f1a\u8bfb\u53d6\u952e\u76d8\u8f93\u5165\uff0c\u76f4\u5230\u56de\u8f66\u952e ( \\n ) \u88ab\u6309\u4e0b\u3002 \u5c4f\u5e55\u662f\u6807\u51c6\u8f93\u51fa os.Stdout \uff1b os.Stderr \u7528\u4e8e\u663e\u793a\u9519\u8bef\u4fe1\u606f\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u7b49\u540c\u4e8e os.Stdout \u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u7701\u7565\u53d8\u91cf\u58f0\u660e\uff0c\u800c\u4f7f\u7528 := \uff0c\u4f8b\u5982\uff1a inputReader := bufio . NewReader ( os . Stdin ) input , err := inputReader . ReadString ( '\\n' ) \u6211\u4eec\u5c06\u4ece\u73b0\u5728\u5f00\u59cb\u4f7f\u7528\u8fd9\u79cd\u5199\u6cd5\u3002 \u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u4ece\u952e\u76d8\u8bfb\u53d6\u8f93\u5165\uff0c\u4f7f\u7528\u4e86 switch \u8bed\u53e5\uff1a \u793a\u4f8b 12.3 switch_input.go \uff1a package main import ( \"fmt\" \"os\" \"bufio\" ) func main () { inputReader := bufio . NewReader ( os . Stdin ) fmt . Println ( \"Please enter your name:\" ) input , err := inputReader . ReadString ( '\\n' ) if err != nil { fmt . Println ( \"There were errors reading, exiting program.\" ) return } fmt . Printf ( \"Your name is %s\" , input ) // For Unix: test with delimiter \"\\n\", for Windows: test with \"\\r\\n\" switch input { case \"Philip\\r\\n\" : fmt . Println ( \"Welcome Philip!\" ) case \"Chris\\r\\n\" : fmt . Println ( \"Welcome Chris!\" ) case \"Ivo\\r\\n\" : fmt . Println ( \"Welcome Ivo!\" ) default : fmt . Printf ( \"You are not welcome here! Goodbye!\" ) } // version 2: switch input { case \"Philip\\r\\n\" : fallthrough case \"Ivo\\r\\n\" : fallthrough case \"Chris\\r\\n\" : fmt . Printf ( \"Welcome %s\\n\" , input ) default : fmt . Printf ( \"You are not welcome here! Goodbye!\\n\" ) } // version 3: switch input { case \"Philip\\r\\n\" , \"Ivo\\r\\n\" : fmt . Printf ( \"Welcome %s\\n\" , input ) default : fmt . Printf ( \"You are not welcome here! Goodbye!\\n\" ) } } \u6ce8\u610f\uff1aUnix \u548c Windows \u7684\u884c\u7ed3\u675f\u7b26\u662f\u4e0d\u540c\u7684\uff01 \u7ec3\u4e60 \u7ec3\u4e60 12.1: word_letter_count.go \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u4ece\u952e\u76d8\u8bfb\u53d6\u8f93\u5165\u3002\u5f53\u7528\u6237\u8f93\u5165 'S' \u7684\u65f6\u5019\u8868\u793a\u8f93\u5165\u7ed3\u675f\uff0c\u8fd9\u65f6\u7a0b\u5e8f\u8f93\u51fa 3 \u4e2a\u6570\u5b57\uff1a i) \u8f93\u5165\u7684\u5b57\u7b26\u7684\u4e2a\u6570\uff0c\u5305\u62ec\u7a7a\u683c\uff0c\u4f46\u4e0d\u5305\u62ec '\\r' \u548c '\\n' ii) \u8f93\u5165\u7684\u5355\u8bcd\u7684\u4e2a\u6570 iii) \u8f93\u5165\u7684\u884c\u6570 \u7ec3\u4e60 12.2: calculator.go \u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u9006\u6ce2\u5170\u5f0f\u8ba1\u7b97\u5668\uff0c\u5b83\u63a5\u53d7\u7528\u6237\u8f93\u5165\u7684\u6574\u578b\u6570\uff08\u6700\u5927\u503c 999999\uff09\u548c\u8fd0\u7b97\u7b26 +\u3001-\u3001*\u3001/\u3002 \u8f93\u5165\u7684\u683c\u5f0f\u4e3a\uff1a number1 ENTER number2 ENTER operator ENTER --> \u663e\u793a\u7ed3\u679c \u5f53\u7528\u6237\u8f93\u5165\u5b57\u7b26 'q' \u65f6\uff0c\u7a0b\u5e8f\u7ed3\u675f\u3002\u8bf7\u4f7f\u7528\u60a8\u5728 \u7ec3\u4e60 11.13 \u4e2d\u5f00\u53d1\u7684 stack \u5305\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u8bfb\u5199\u6570\u636e \u4e0b\u4e00\u8282\uff1a \u6587\u4ef6\u8bfb\u5199","title":"12.1 \u8bfb\u53d6\u7528\u6237\u7684\u8f93\u5165"},{"location":"12.1/#121","text":"\u6211\u4eec\u5982\u4f55\u8bfb\u53d6\u7528\u6237\u7684\u952e\u76d8\uff08\u63a7\u5236\u53f0\uff09\u8f93\u5165\u5462\uff1f\u4ece\u952e\u76d8\u548c\u6807\u51c6\u8f93\u5165 os.Stdin \u8bfb\u53d6\u8f93\u5165\uff0c\u6700\u7b80\u5355\u7684\u529e\u6cd5\u662f\u4f7f\u7528 fmt \u5305\u63d0\u4f9b\u7684 Scan... \u548c Sscan... \u5f00\u5934\u7684\u51fd\u6570\u3002\u8bf7\u770b\u4ee5\u4e0b\u7a0b\u5e8f\uff1a \u793a\u4f8b 12.1 readinput1.go \uff1a // \u4ece\u63a7\u5236\u53f0\u8bfb\u53d6\u8f93\u5165: package main import \"fmt\" var ( firstName , lastName , s string i int f float32 input = \"56.12 / 5212 / Go\" format = \"%f / %d / %s\" ) func main () { fmt . Println ( \"Please enter your full name: \" ) fmt . Scanln ( & firstName , & lastName ) // fmt.Scanf(\"%s %s\", &firstName, &lastName) fmt . Printf ( \"Hi %s %s!\\n\" , firstName , lastName ) // Hi Chris Naegels fmt . Sscanf ( input , format , & f , & i , & s ) fmt . Println ( \"From the string we read: \" , f , i , s ) // \u8f93\u51fa\u7ed3\u679c: From the string we read: 56.12 5212 Go } Scanln() \u626b\u63cf\u6765\u81ea\u6807\u51c6\u8f93\u5165\u7684\u6587\u672c\uff0c\u5c06\u7a7a\u683c\u5206\u9694\u7684\u503c\u4f9d\u6b21\u5b58\u653e\u5230\u540e\u7eed\u7684\u53c2\u6570\u5185\uff0c\u76f4\u5230\u78b0\u5230\u6362\u884c\u3002 Scanf() \u4e0e\u5176\u7c7b\u4f3c\uff0c\u9664\u4e86 Scanf() \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u7528\u4f5c\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u7528\u6765\u51b3\u5b9a\u5982\u4f55\u8bfb\u53d6\u3002 Sscan... \u548c\u4ee5 Sscan... \u5f00\u5934\u7684\u51fd\u6570\u5219\u662f\u4ece\u5b57\u7b26\u4e32\u8bfb\u53d6\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u4e0e Scanf() \u76f8\u540c\u3002\u5982\u679c\u8fd9\u4e9b\u51fd\u6570\u8bfb\u53d6\u5230\u7684\u7ed3\u679c\u4e0e\u60a8\u9884\u60f3\u7684\u4e0d\u540c\uff0c\u60a8\u53ef\u4ee5\u68c0\u67e5\u6210\u529f\u8bfb\u5165\u6570\u636e\u7684\u4e2a\u6570\u548c\u8fd4\u56de\u7684\u9519\u8bef\u3002 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 bufio \u5305\u63d0\u4f9b\u7684\u7f13\u51b2\u8bfb\u53d6\u5668 (buffered reader) \u6765\u8bfb\u53d6\u6570\u636e\uff0c\u6b63\u5982\u4ee5\u4e0b\u4f8b\u5b50\u6240\u793a\uff1a \u793a\u4f8b 12.2 readinput2.go \uff1a package main import ( \"fmt\" \"bufio\" \"os\" ) var inputReader * bufio . Reader var input string var err error func main () { inputReader = bufio . NewReader ( os . Stdin ) fmt . Println ( \"Please enter some input: \" ) input , err = inputReader . ReadString ( '\\n' ) if err == nil { fmt . Printf ( \"The input was: %s\\n\" , input ) } } inputReader \u662f\u4e00\u4e2a\u6307\u5411 bufio.Reader \u7684\u6307\u9488\u3002 inputReader := bufio.NewReader(os.Stdin) \u8fd9\u884c\u4ee3\u7801\uff0c\u5c06\u4f1a\u521b\u5efa\u4e00\u4e2a\u8bfb\u53d6\u5668\uff0c\u5e76\u5c06\u5176\u4e0e\u6807\u51c6\u8f93\u5165\u7ed1\u5b9a\u3002 bufio.NewReader() \u6784\u9020\u51fd\u6570\u7684\u7b7e\u540d\u4e3a\uff1a func NewReader(rd io.Reader) *Reader \u8be5\u51fd\u6570\u7684\u5b9e\u53c2\u53ef\u4ee5\u662f\u6ee1\u8db3 io.Reader \u63a5\u53e3\u7684\u4efb\u610f\u5bf9\u8c61\uff08\u4efb\u610f\u5305\u542b\u6709\u9002\u5f53\u7684 Read() \u65b9\u6cd5\u7684\u5bf9\u8c61\uff0c\u8bf7\u53c2\u8003 \u7ae0\u8282 11.8 \uff09\uff0c\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5e26\u7f13\u51b2\u7684 io.Reader \u5bf9\u8c61\uff0c\u5b83\u5c06\u4ece\u6307\u5b9a\u8bfb\u53d6\u5668\uff08\u4f8b\u5982 os.Stdin \uff09\u8bfb\u53d6\u5185\u5bb9\u3002 \u8fd4\u56de\u7684\u8bfb\u53d6\u5668\u5bf9\u8c61\u63d0\u4f9b\u4e00\u4e2a\u65b9\u6cd5 ReadString(delim byte) \uff0c\u8be5\u65b9\u6cd5\u4ece\u8f93\u5165\u4e2d\u8bfb\u53d6\u5185\u5bb9\uff0c\u76f4\u5230\u78b0\u5230 delim \u6307\u5b9a\u7684\u5b57\u7b26\uff0c\u7136\u540e\u5c06\u8bfb\u53d6\u5230\u7684\u5185\u5bb9\u8fde\u540c delim \u5b57\u7b26\u4e00\u8d77\u653e\u5230\u7f13\u51b2\u533a\u3002 ReadString \u8fd4\u56de\u8bfb\u53d6\u5230\u7684\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u78b0\u5230\u9519\u8bef\u5219\u8fd4\u56de nil \u3002\u5982\u679c\u5b83\u4e00\u76f4\u8bfb\u5230\u6587\u4ef6\u7ed3\u675f\uff0c\u5219\u8fd4\u56de\u8bfb\u53d6\u5230\u7684\u5b57\u7b26\u4e32\u548c io.EOF \u3002\u5982\u679c\u8bfb\u53d6\u8fc7\u7a0b\u4e2d\u6ca1\u6709\u78b0\u5230 delim \u5b57\u7b26\uff0c\u5c06\u8fd4\u56de\u9519\u8bef err != nil \u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f1a\u8bfb\u53d6\u952e\u76d8\u8f93\u5165\uff0c\u76f4\u5230\u56de\u8f66\u952e ( \\n ) \u88ab\u6309\u4e0b\u3002 \u5c4f\u5e55\u662f\u6807\u51c6\u8f93\u51fa os.Stdout \uff1b os.Stderr \u7528\u4e8e\u663e\u793a\u9519\u8bef\u4fe1\u606f\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u7b49\u540c\u4e8e os.Stdout \u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u7701\u7565\u53d8\u91cf\u58f0\u660e\uff0c\u800c\u4f7f\u7528 := \uff0c\u4f8b\u5982\uff1a inputReader := bufio . NewReader ( os . Stdin ) input , err := inputReader . ReadString ( '\\n' ) \u6211\u4eec\u5c06\u4ece\u73b0\u5728\u5f00\u59cb\u4f7f\u7528\u8fd9\u79cd\u5199\u6cd5\u3002 \u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u4ece\u952e\u76d8\u8bfb\u53d6\u8f93\u5165\uff0c\u4f7f\u7528\u4e86 switch \u8bed\u53e5\uff1a \u793a\u4f8b 12.3 switch_input.go \uff1a package main import ( \"fmt\" \"os\" \"bufio\" ) func main () { inputReader := bufio . NewReader ( os . Stdin ) fmt . Println ( \"Please enter your name:\" ) input , err := inputReader . ReadString ( '\\n' ) if err != nil { fmt . Println ( \"There were errors reading, exiting program.\" ) return } fmt . Printf ( \"Your name is %s\" , input ) // For Unix: test with delimiter \"\\n\", for Windows: test with \"\\r\\n\" switch input { case \"Philip\\r\\n\" : fmt . Println ( \"Welcome Philip!\" ) case \"Chris\\r\\n\" : fmt . Println ( \"Welcome Chris!\" ) case \"Ivo\\r\\n\" : fmt . Println ( \"Welcome Ivo!\" ) default : fmt . Printf ( \"You are not welcome here! Goodbye!\" ) } // version 2: switch input { case \"Philip\\r\\n\" : fallthrough case \"Ivo\\r\\n\" : fallthrough case \"Chris\\r\\n\" : fmt . Printf ( \"Welcome %s\\n\" , input ) default : fmt . Printf ( \"You are not welcome here! Goodbye!\\n\" ) } // version 3: switch input { case \"Philip\\r\\n\" , \"Ivo\\r\\n\" : fmt . Printf ( \"Welcome %s\\n\" , input ) default : fmt . Printf ( \"You are not welcome here! Goodbye!\\n\" ) } } \u6ce8\u610f\uff1aUnix \u548c Windows \u7684\u884c\u7ed3\u675f\u7b26\u662f\u4e0d\u540c\u7684\uff01 \u7ec3\u4e60 \u7ec3\u4e60 12.1: word_letter_count.go \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u4ece\u952e\u76d8\u8bfb\u53d6\u8f93\u5165\u3002\u5f53\u7528\u6237\u8f93\u5165 'S' \u7684\u65f6\u5019\u8868\u793a\u8f93\u5165\u7ed3\u675f\uff0c\u8fd9\u65f6\u7a0b\u5e8f\u8f93\u51fa 3 \u4e2a\u6570\u5b57\uff1a i) \u8f93\u5165\u7684\u5b57\u7b26\u7684\u4e2a\u6570\uff0c\u5305\u62ec\u7a7a\u683c\uff0c\u4f46\u4e0d\u5305\u62ec '\\r' \u548c '\\n' ii) \u8f93\u5165\u7684\u5355\u8bcd\u7684\u4e2a\u6570 iii) \u8f93\u5165\u7684\u884c\u6570 \u7ec3\u4e60 12.2: calculator.go \u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u9006\u6ce2\u5170\u5f0f\u8ba1\u7b97\u5668\uff0c\u5b83\u63a5\u53d7\u7528\u6237\u8f93\u5165\u7684\u6574\u578b\u6570\uff08\u6700\u5927\u503c 999999\uff09\u548c\u8fd0\u7b97\u7b26 +\u3001-\u3001*\u3001/\u3002 \u8f93\u5165\u7684\u683c\u5f0f\u4e3a\uff1a number1 ENTER number2 ENTER operator ENTER --> \u663e\u793a\u7ed3\u679c \u5f53\u7528\u6237\u8f93\u5165\u5b57\u7b26 'q' \u65f6\uff0c\u7a0b\u5e8f\u7ed3\u675f\u3002\u8bf7\u4f7f\u7528\u60a8\u5728 \u7ec3\u4e60 11.13 \u4e2d\u5f00\u53d1\u7684 stack \u5305\u3002","title":"12.1 \u8bfb\u53d6\u7528\u6237\u7684\u8f93\u5165"},{"location":"12.1/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u8bfb\u5199\u6570\u636e \u4e0b\u4e00\u8282\uff1a \u6587\u4ef6\u8bfb\u5199","title":"\u94fe\u63a5"},{"location":"12.10/","text":"12.10 XML \u6570\u636e\u683c\u5f0f \u00b6 \u4e0b\u9762\u662f\u4e0e 12.9 \u8282 JSON \u4f8b\u5b50\u7b49\u4ef7\u7684 XML \u7248\u672c\uff1a <Person> <FirstName> Laura </FirstName> <LastName> Lynn </LastName> </Person> \u5982\u540c json \u5305\u4e00\u6837\uff0c\u4e5f\u6709 xml.Marshal() \u548c xml.Unmarshal() \u4ece XML \u4e2d\u7f16\u7801\u548c\u89e3\u7801\u6570\u636e\uff1b\u4f46\u8fd9\u4e2a\u66f4\u901a\u7528\uff0c\u53ef\u4ee5\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u548c\u5199\u5165\uff08\u6216\u8005\u4efb\u4f55\u5b9e\u73b0\u4e86 io.Reader \u548c io.Writer \u63a5\u53e3\u7684\u7c7b\u578b\uff09 \u548c JSON \u7684\u65b9\u5f0f\u4e00\u6837\uff0cXML \u6570\u636e\u53ef\u4ee5\u5e8f\u5217\u5316\u4e3a\u7ed3\u6784\uff0c\u6216\u8005\u4ece\u7ed3\u6784\u53cd\u5e8f\u5217\u5316\u4e3a XML \u6570\u636e\uff1b\u8fd9\u4e9b\u53ef\u4ee5\u5728\u4f8b\u5b50 15.8\uff08 twitter_status.go \uff09\u4e2d\u770b\u5230\u3002 encoding / xml \u5305\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684 XML \u89e3\u6790\u5668\uff08SAX\uff09\uff0c\u7528\u6765\u89e3\u6790 XML \u6570\u636e\u5185\u5bb9\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u8bf4\u660e\u5982\u4f55\u4f7f\u7528\u89e3\u6790\u5668\uff1a \u793a\u4f8b 12.17 xml.go \uff1a // xml.go package main import ( \"encoding/xml\" \"fmt\" \"strings\" ) var t , token xml . Token var err error func main () { input := \"<Person><FirstName>Laura</FirstName><LastName>Lynn</LastName></Person>\" inputReader := strings . NewReader ( input ) p := xml . NewDecoder ( inputReader ) for t , err = p . Token (); err == nil ; t , err = p . Token () { switch token := t .( type ) { case xml . StartElement : name := token . Name . Local fmt . Printf ( \"Token name: %s\\n\" , name ) for _ , attr := range token . Attr { attrName := attr . Name . Local attrValue := attr . Value fmt . Printf ( \"An attribute is: %s %s\\n\" , attrName , attrValue ) // ... } case xml . EndElement : fmt . Println ( \"End of token\" ) case xml . CharData : content := string ([] byte ( token )) fmt . Printf ( \"This is the content: %v\\n\" , content ) // ... default : // ... } } } \u8f93\u51fa\uff1a Token name: Person Token name: FirstName This is the content: Laura End of token Token name: LastName This is the content: Lynn End of token End of token \u5305\u4e2d\u5b9a\u4e49\u4e86\u82e5\u5e72 XML \u6807\u7b7e\u7c7b\u578b\uff1aStartElement\uff0cChardata\uff08\u8fd9\u662f\u4ece\u5f00\u59cb\u6807\u7b7e\u5230\u7ed3\u675f\u6807\u7b7e\u4e4b\u95f4\u7684\u5b9e\u9645\u6587\u672c\uff09\uff0cEndElement\uff0cComment\uff0cDirective \u6216 ProcInst\u3002 \u5305\u4e2d\u540c\u6837\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7ed3\u6784\u89e3\u6790\u5668\uff1a NewParser() \u65b9\u6cd5\u6301\u6709\u4e00\u4e2a io.Reader \uff08\u8fd9\u91cc\u5177\u4f53\u7c7b\u578b\u662f strings.NewReader \uff09\u5e76\u751f\u6210\u4e00\u4e2a\u89e3\u6790\u5668\u7c7b\u578b\u7684\u5bf9\u8c61\u3002\u8fd8\u6709\u4e00\u4e2a Token() \u65b9\u6cd5\u8fd4\u56de\u8f93\u5165\u6d41\u91cc\u7684\u4e0b\u4e00\u4e2a XML token\u3002\u5728\u8f93\u5165\u6d41\u7684\u7ed3\u5c3e\u5904\uff0c\u4f1a\u8fd4\u56de ( nil , io.EOF ) XML \u6587\u672c\u88ab\u5faa\u73af\u5904\u7406\u76f4\u5230 Token() \u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\uff0c\u56e0\u4e3a\u5df2\u7ecf\u5230\u8fbe\u6587\u4ef6\u5c3e\u90e8\uff0c\u518d\u6ca1\u6709\u5185\u5bb9\u53ef\u4f9b\u5904\u7406\u4e86\u3002\u901a\u8fc7\u4e00\u4e2a type-switch \u53ef\u4ee5\u6839\u636e\u4e00\u4e9b XML \u6807\u7b7e\u8fdb\u4e00\u6b65\u5904\u7406\u3002Chardata \u4e2d\u7684\u5185\u5bb9\u53ea\u662f\u4e00\u4e2a []byte \uff0c\u901a\u8fc7\u5b57\u7b26\u4e32\u8f6c\u6362\u8ba9\u5176\u53d8\u5f97\u53ef\u8bfb\u6027\u5f3a\u4e00\u4e9b\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Json \u6570\u636e\u683c\u5f0f \u4e0b\u4e00\u8282\uff1a \u7528 Gob \u4f20\u8f93\u6570\u636e","title":"12.10 XML \u6570\u636e\u683c\u5f0f"},{"location":"12.10/#1210-xml","text":"\u4e0b\u9762\u662f\u4e0e 12.9 \u8282 JSON \u4f8b\u5b50\u7b49\u4ef7\u7684 XML \u7248\u672c\uff1a <Person> <FirstName> Laura </FirstName> <LastName> Lynn </LastName> </Person> \u5982\u540c json \u5305\u4e00\u6837\uff0c\u4e5f\u6709 xml.Marshal() \u548c xml.Unmarshal() \u4ece XML \u4e2d\u7f16\u7801\u548c\u89e3\u7801\u6570\u636e\uff1b\u4f46\u8fd9\u4e2a\u66f4\u901a\u7528\uff0c\u53ef\u4ee5\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u548c\u5199\u5165\uff08\u6216\u8005\u4efb\u4f55\u5b9e\u73b0\u4e86 io.Reader \u548c io.Writer \u63a5\u53e3\u7684\u7c7b\u578b\uff09 \u548c JSON \u7684\u65b9\u5f0f\u4e00\u6837\uff0cXML \u6570\u636e\u53ef\u4ee5\u5e8f\u5217\u5316\u4e3a\u7ed3\u6784\uff0c\u6216\u8005\u4ece\u7ed3\u6784\u53cd\u5e8f\u5217\u5316\u4e3a XML \u6570\u636e\uff1b\u8fd9\u4e9b\u53ef\u4ee5\u5728\u4f8b\u5b50 15.8\uff08 twitter_status.go \uff09\u4e2d\u770b\u5230\u3002 encoding / xml \u5305\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684 XML \u89e3\u6790\u5668\uff08SAX\uff09\uff0c\u7528\u6765\u89e3\u6790 XML \u6570\u636e\u5185\u5bb9\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u8bf4\u660e\u5982\u4f55\u4f7f\u7528\u89e3\u6790\u5668\uff1a \u793a\u4f8b 12.17 xml.go \uff1a // xml.go package main import ( \"encoding/xml\" \"fmt\" \"strings\" ) var t , token xml . Token var err error func main () { input := \"<Person><FirstName>Laura</FirstName><LastName>Lynn</LastName></Person>\" inputReader := strings . NewReader ( input ) p := xml . NewDecoder ( inputReader ) for t , err = p . Token (); err == nil ; t , err = p . Token () { switch token := t .( type ) { case xml . StartElement : name := token . Name . Local fmt . Printf ( \"Token name: %s\\n\" , name ) for _ , attr := range token . Attr { attrName := attr . Name . Local attrValue := attr . Value fmt . Printf ( \"An attribute is: %s %s\\n\" , attrName , attrValue ) // ... } case xml . EndElement : fmt . Println ( \"End of token\" ) case xml . CharData : content := string ([] byte ( token )) fmt . Printf ( \"This is the content: %v\\n\" , content ) // ... default : // ... } } } \u8f93\u51fa\uff1a Token name: Person Token name: FirstName This is the content: Laura End of token Token name: LastName This is the content: Lynn End of token End of token \u5305\u4e2d\u5b9a\u4e49\u4e86\u82e5\u5e72 XML \u6807\u7b7e\u7c7b\u578b\uff1aStartElement\uff0cChardata\uff08\u8fd9\u662f\u4ece\u5f00\u59cb\u6807\u7b7e\u5230\u7ed3\u675f\u6807\u7b7e\u4e4b\u95f4\u7684\u5b9e\u9645\u6587\u672c\uff09\uff0cEndElement\uff0cComment\uff0cDirective \u6216 ProcInst\u3002 \u5305\u4e2d\u540c\u6837\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7ed3\u6784\u89e3\u6790\u5668\uff1a NewParser() \u65b9\u6cd5\u6301\u6709\u4e00\u4e2a io.Reader \uff08\u8fd9\u91cc\u5177\u4f53\u7c7b\u578b\u662f strings.NewReader \uff09\u5e76\u751f\u6210\u4e00\u4e2a\u89e3\u6790\u5668\u7c7b\u578b\u7684\u5bf9\u8c61\u3002\u8fd8\u6709\u4e00\u4e2a Token() \u65b9\u6cd5\u8fd4\u56de\u8f93\u5165\u6d41\u91cc\u7684\u4e0b\u4e00\u4e2a XML token\u3002\u5728\u8f93\u5165\u6d41\u7684\u7ed3\u5c3e\u5904\uff0c\u4f1a\u8fd4\u56de ( nil , io.EOF ) XML \u6587\u672c\u88ab\u5faa\u73af\u5904\u7406\u76f4\u5230 Token() \u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\uff0c\u56e0\u4e3a\u5df2\u7ecf\u5230\u8fbe\u6587\u4ef6\u5c3e\u90e8\uff0c\u518d\u6ca1\u6709\u5185\u5bb9\u53ef\u4f9b\u5904\u7406\u4e86\u3002\u901a\u8fc7\u4e00\u4e2a type-switch \u53ef\u4ee5\u6839\u636e\u4e00\u4e9b XML \u6807\u7b7e\u8fdb\u4e00\u6b65\u5904\u7406\u3002Chardata \u4e2d\u7684\u5185\u5bb9\u53ea\u662f\u4e00\u4e2a []byte \uff0c\u901a\u8fc7\u5b57\u7b26\u4e32\u8f6c\u6362\u8ba9\u5176\u53d8\u5f97\u53ef\u8bfb\u6027\u5f3a\u4e00\u4e9b\u3002","title":"12.10 XML \u6570\u636e\u683c\u5f0f"},{"location":"12.10/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Json \u6570\u636e\u683c\u5f0f \u4e0b\u4e00\u8282\uff1a \u7528 Gob \u4f20\u8f93\u6570\u636e","title":"\u94fe\u63a5"},{"location":"12.11/","text":"12.11 \u7528 Gob \u4f20\u8f93\u6570\u636e \u00b6 Gob \u662f Go \u81ea\u5df1\u7684\u4ee5\u4e8c\u8fdb\u5236\u5f62\u5f0f\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7a0b\u5e8f\u6570\u636e\u7684\u683c\u5f0f\uff1b\u53ef\u4ee5\u5728 encoding \u5305\u4e2d\u627e\u5230\u3002\u8fd9\u79cd\u683c\u5f0f\u7684\u6570\u636e\u7b80\u79f0\u4e3a Gob \uff08\u5373 Go binary \u7684\u7f29\u5199\uff09\u3002\u7c7b\u4f3c\u4e8e Python \u7684 \"pickle\" \u548c Java \u7684 \"Serialization\"\u3002 Gob \u901a\u5e38\u7528\u4e8e\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\uff08RPCs\uff0c\u53c2\u89c1 15.9 \u8282 \u7684 rpc \u5305\uff09\u53c2\u6570\u548c\u7ed3\u679c\u7684\u4f20\u8f93\uff0c\u4ee5\u53ca\u5e94\u7528\u7a0b\u5e8f\u548c\u673a\u5668\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\u3002 \u5b83\u548c JSON \u6216 XML \u6709\u4ec0\u4e48\u4e0d\u540c\u5462\uff1fGob \u7279\u5b9a\u5730\u7528\u4e8e\u7eaf Go \u7684\u73af\u5883\u4e2d\uff0c\u4f8b\u5982\uff0c\u4e24\u4e2a\u7528 Go \u5199\u7684\u670d\u52a1\u4e4b\u95f4\u7684\u901a\u4fe1\u3002\u8fd9\u6837\u7684\u8bdd\u670d\u52a1\u53ef\u4ee5\u88ab\u5b9e\u73b0\u5f97\u66f4\u52a0\u9ad8\u6548\u548c\u4f18\u5316\u3002 Gob \u4e0d\u662f\u53ef\u5916\u90e8\u5b9a\u4e49\uff0c\u8bed\u8a00\u65e0\u5173\u7684\u7f16\u7801\u65b9\u5f0f\u3002\u56e0\u6b64\u5b83\u7684\u9996\u9009\u683c\u5f0f\u662f\u4e8c\u8fdb\u5236\uff0c\u800c\u4e0d\u662f\u50cf JSON \u548c XML \u90a3\u6837\u7684\u6587\u672c\u683c\u5f0f\u3002 Gob \u5e76\u4e0d\u662f\u4e00\u79cd\u4e0d\u540c\u4e8e Go \u7684\u8bed\u8a00\uff0c\u800c\u662f\u5728\u7f16\u7801\u548c\u89e3\u7801\u8fc7\u7a0b\u4e2d\u7528\u5230\u4e86 Go \u7684\u53cd\u5c04\u3002 Gob \u6587\u4ef6\u6216\u6d41\u662f\u5b8c\u5168\u81ea\u63cf\u8ff0\u7684\uff1a\u91cc\u9762\u5305\u542b\u7684\u6240\u6709\u7c7b\u578b\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u63cf\u8ff0\uff0c\u5e76\u4e14\u603b\u662f\u53ef\u4ee5\u7528 Go \u89e3\u7801\uff0c\u800c\u4e0d\u9700\u8981\u4e86\u89e3\u6587\u4ef6\u7684\u5185\u5bb9\u3002 \u53ea\u6709\u53ef\u5bfc\u51fa\u7684\u5b57\u6bb5\u4f1a\u88ab\u7f16\u7801\uff0c\u96f6\u503c\u4f1a\u88ab\u5ffd\u7565\u3002\u5728\u89e3\u7801\u7ed3\u6784\u4f53\u7684\u65f6\u5019\uff0c\u53ea\u6709\u540c\u65f6\u5339\u914d\u540d\u79f0\u548c\u53ef\u517c\u5bb9\u7c7b\u578b\u7684\u5b57\u6bb5\u624d\u4f1a\u88ab\u89e3\u7801\u3002\u5f53\u6e90\u6570\u636e\u7c7b\u578b\u589e\u52a0\u65b0\u5b57\u6bb5\u540e\uff0cGob \u89e3\u7801\u5ba2\u6237\u7aef\u4ecd\u7136\u53ef\u4ee5\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u6b63\u5e38\u5de5\u4f5c\uff1a\u89e3\u7801\u5ba2\u6237\u7aef\u4f1a\u7ee7\u7eed\u8bc6\u522b\u4ee5\u524d\u5b58\u5728\u7684\u5b57\u6bb5\u3002\u5e76\u4e14\u8fd8\u63d0\u4f9b\u4e86\u5f88\u5927\u7684\u7075\u6d3b\u6027\uff0c\u6bd4\u5982\u5728\u53d1\u9001\u8005\u770b\u6765\uff0c\u6574\u6570\u88ab\u7f16\u7801\u6210\u6ca1\u6709\u56fa\u5b9a\u957f\u5ea6\u7684\u53ef\u53d8\u957f\u5ea6\uff0c\u800c\u5ffd\u7565\u5177\u4f53\u7684 Go \u7c7b\u578b\u3002 \u5047\u5982\u5728\u53d1\u9001\u8005\u8fd9\u8fb9\u6709\u4e00\u4e2a\u6709\u7ed3\u6784 T\uff1a type T struct { X , Y , Z int } var t = T { X : 7 , Y : 0 , Z : 8 } \u800c\u5728\u63a5\u6536\u8005\u8fd9\u8fb9\u53ef\u4ee5\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53 U \u7c7b\u578b\u7684\u53d8\u91cf u \u6765\u63a5\u6536\u8fd9\u4e2a\u503c\uff1a type U struct { X , Y * int8 } var u U \u5728\u63a5\u6536\u8005\u4e2d\uff0c X \u7684\u503c\u662f 7 \uff0c Y \u7684\u503c\u662f 0 \uff08 Y \u7684\u503c\u5e76\u6ca1\u6709\u4ece t \u4e2d\u4f20\u9012\u8fc7\u6765\uff0c\u56e0\u4e3a\u5b83\u662f\u96f6\u503c\uff09 \u548c JSON \u7684\u4f7f\u7528\u65b9\u5f0f\u4e00\u6837\uff0cGob \u4f7f\u7528\u901a\u7528\u7684 io.Writer \u63a5\u53e3\uff0c\u901a\u8fc7 NewEncoder() \u51fd\u6570\u521b\u5efa Encoder \u5bf9\u8c61\u5e76\u8c03\u7528 Encode() \uff1b\u76f8\u53cd\u7684\u8fc7\u7a0b\u4f7f\u7528\u901a\u7528\u7684 io.Reader \u63a5\u53e3\uff0c\u901a\u8fc7 NewDecoder() \u51fd\u6570\u521b\u5efa Decoder \u5bf9\u8c61\u5e76\u8c03\u7528 Decode() \u3002 \u6211\u4eec\u628a\u793a\u4f8b 12.12 \u7684\u4fe1\u606f\u5199\u8fdb\u540d\u4e3a vcard.gob \u7684\u6587\u4ef6\u4f5c\u4e3a\u4f8b\u5b50\u3002\u8fd9\u4f1a\u4ea7\u751f\u4e00\u4e2a\u6587\u672c\u53ef\u8bfb\u6570\u636e\u548c\u4e8c\u8fdb\u5236\u6570\u636e\u7684\u6df7\u5408\uff0c\u5f53\u4f60\u8bd5\u7740\u5728\u6587\u672c\u7f16\u8f91\u4e2d\u6253\u5f00\u7684\u65f6\u5019\u4f1a\u770b\u5230\u3002 \u5728\u793a\u4f8b 12.18 \u4e2d\u4f60\u4f1a\u770b\u5230\u4e00\u4e2a\u7f16\u89e3\u7801\uff0c\u5e76\u4e14\u4ee5\u5b57\u8282\u7f13\u51b2\u6a21\u62df\u7f51\u7edc\u4f20\u8f93\u7684\u7b80\u5355\u4f8b\u5b50\uff1a \u793a\u4f8b 12.18 gob1.go \uff1a // gob1.go package main import ( \"bytes\" \"fmt\" \"encoding/gob\" \"log\" ) type P struct { X , Y , Z int Name string } type Q struct { X , Y * int32 Name string } func main () { // Initialize the encoder and decoder. Normally enc and dec would be // bound to network connections and the encoder and decoder would // run in different processes. var network bytes . Buffer // Stand-in for a network connection enc := gob . NewEncoder ( & network ) // Will write to network. dec := gob . NewDecoder ( & network ) // Will read from network. // Encode (send) the value. err := enc . Encode ( P { 3 , 4 , 5 , \"Pythagoras\" }) if err != nil { log . Fatal ( \"encode error:\" , err ) } // Decode (receive) the value. var q Q err = dec . Decode ( & q ) if err != nil { log . Fatal ( \"decode error:\" , err ) } fmt . Printf ( \"%q: {%d,%d}\\n\" , q . Name , q . X , q . Y ) } // Output: \"Pythagoras\": {3,4} \u793a\u4f8b 12.19 gob2.go \u7f16\u7801\u5230\u6587\u4ef6\uff1a // gob2.go package main import ( \"encoding/gob\" \"log\" \"os\" ) type Address struct { Type string City string Country string } type VCard struct { FirstName string LastName string Addresses [] * Address Remark string } var content string func main () { pa := & Address { \"private\" , \"Aartselaar\" , \"Belgium\" } wa := & Address { \"work\" , \"Boom\" , \"Belgium\" } vc := VCard { \"Jan\" , \"Kersschot\" , [] * Address { pa , wa }, \"none\" } // fmt.Printf(\"%v: \\n\", vc) // {Jan Kersschot [0x126d2b80 0x126d2be0] none}: // using an encoder: file , _ := os . OpenFile ( \"vcard.gob\" , os . O_CREATE | os . O_WRONLY , 0666 ) defer file . Close () enc := gob . NewEncoder ( file ) err := enc . Encode ( vc ) if err != nil { log . Println ( \"Error in encoding gob\" ) } } \u7ec3\u4e60 12.8 \uff1a degob.go \uff1a \u5199\u4e00\u4e2a\u7a0b\u5e8f\u8bfb\u53d6 vcard.gob \u6587\u4ef6\uff0c\u89e3\u7801\u5e76\u6253\u5370\u5b83\u7684\u5185\u5bb9\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a XML \u6570\u636e\u683c\u5f0f \u4e0b\u4e00\u8282\uff1a Go \u4e2d\u7684\u5bc6\u7801\u5b66","title":"12.11 \u7528 Gob \u4f20\u8f93\u6570\u636e"},{"location":"12.11/#1211-gob","text":"Gob \u662f Go \u81ea\u5df1\u7684\u4ee5\u4e8c\u8fdb\u5236\u5f62\u5f0f\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7a0b\u5e8f\u6570\u636e\u7684\u683c\u5f0f\uff1b\u53ef\u4ee5\u5728 encoding \u5305\u4e2d\u627e\u5230\u3002\u8fd9\u79cd\u683c\u5f0f\u7684\u6570\u636e\u7b80\u79f0\u4e3a Gob \uff08\u5373 Go binary \u7684\u7f29\u5199\uff09\u3002\u7c7b\u4f3c\u4e8e Python \u7684 \"pickle\" \u548c Java \u7684 \"Serialization\"\u3002 Gob \u901a\u5e38\u7528\u4e8e\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\uff08RPCs\uff0c\u53c2\u89c1 15.9 \u8282 \u7684 rpc \u5305\uff09\u53c2\u6570\u548c\u7ed3\u679c\u7684\u4f20\u8f93\uff0c\u4ee5\u53ca\u5e94\u7528\u7a0b\u5e8f\u548c\u673a\u5668\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\u3002 \u5b83\u548c JSON \u6216 XML \u6709\u4ec0\u4e48\u4e0d\u540c\u5462\uff1fGob \u7279\u5b9a\u5730\u7528\u4e8e\u7eaf Go \u7684\u73af\u5883\u4e2d\uff0c\u4f8b\u5982\uff0c\u4e24\u4e2a\u7528 Go \u5199\u7684\u670d\u52a1\u4e4b\u95f4\u7684\u901a\u4fe1\u3002\u8fd9\u6837\u7684\u8bdd\u670d\u52a1\u53ef\u4ee5\u88ab\u5b9e\u73b0\u5f97\u66f4\u52a0\u9ad8\u6548\u548c\u4f18\u5316\u3002 Gob \u4e0d\u662f\u53ef\u5916\u90e8\u5b9a\u4e49\uff0c\u8bed\u8a00\u65e0\u5173\u7684\u7f16\u7801\u65b9\u5f0f\u3002\u56e0\u6b64\u5b83\u7684\u9996\u9009\u683c\u5f0f\u662f\u4e8c\u8fdb\u5236\uff0c\u800c\u4e0d\u662f\u50cf JSON \u548c XML \u90a3\u6837\u7684\u6587\u672c\u683c\u5f0f\u3002 Gob \u5e76\u4e0d\u662f\u4e00\u79cd\u4e0d\u540c\u4e8e Go \u7684\u8bed\u8a00\uff0c\u800c\u662f\u5728\u7f16\u7801\u548c\u89e3\u7801\u8fc7\u7a0b\u4e2d\u7528\u5230\u4e86 Go \u7684\u53cd\u5c04\u3002 Gob \u6587\u4ef6\u6216\u6d41\u662f\u5b8c\u5168\u81ea\u63cf\u8ff0\u7684\uff1a\u91cc\u9762\u5305\u542b\u7684\u6240\u6709\u7c7b\u578b\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u63cf\u8ff0\uff0c\u5e76\u4e14\u603b\u662f\u53ef\u4ee5\u7528 Go \u89e3\u7801\uff0c\u800c\u4e0d\u9700\u8981\u4e86\u89e3\u6587\u4ef6\u7684\u5185\u5bb9\u3002 \u53ea\u6709\u53ef\u5bfc\u51fa\u7684\u5b57\u6bb5\u4f1a\u88ab\u7f16\u7801\uff0c\u96f6\u503c\u4f1a\u88ab\u5ffd\u7565\u3002\u5728\u89e3\u7801\u7ed3\u6784\u4f53\u7684\u65f6\u5019\uff0c\u53ea\u6709\u540c\u65f6\u5339\u914d\u540d\u79f0\u548c\u53ef\u517c\u5bb9\u7c7b\u578b\u7684\u5b57\u6bb5\u624d\u4f1a\u88ab\u89e3\u7801\u3002\u5f53\u6e90\u6570\u636e\u7c7b\u578b\u589e\u52a0\u65b0\u5b57\u6bb5\u540e\uff0cGob \u89e3\u7801\u5ba2\u6237\u7aef\u4ecd\u7136\u53ef\u4ee5\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u6b63\u5e38\u5de5\u4f5c\uff1a\u89e3\u7801\u5ba2\u6237\u7aef\u4f1a\u7ee7\u7eed\u8bc6\u522b\u4ee5\u524d\u5b58\u5728\u7684\u5b57\u6bb5\u3002\u5e76\u4e14\u8fd8\u63d0\u4f9b\u4e86\u5f88\u5927\u7684\u7075\u6d3b\u6027\uff0c\u6bd4\u5982\u5728\u53d1\u9001\u8005\u770b\u6765\uff0c\u6574\u6570\u88ab\u7f16\u7801\u6210\u6ca1\u6709\u56fa\u5b9a\u957f\u5ea6\u7684\u53ef\u53d8\u957f\u5ea6\uff0c\u800c\u5ffd\u7565\u5177\u4f53\u7684 Go \u7c7b\u578b\u3002 \u5047\u5982\u5728\u53d1\u9001\u8005\u8fd9\u8fb9\u6709\u4e00\u4e2a\u6709\u7ed3\u6784 T\uff1a type T struct { X , Y , Z int } var t = T { X : 7 , Y : 0 , Z : 8 } \u800c\u5728\u63a5\u6536\u8005\u8fd9\u8fb9\u53ef\u4ee5\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53 U \u7c7b\u578b\u7684\u53d8\u91cf u \u6765\u63a5\u6536\u8fd9\u4e2a\u503c\uff1a type U struct { X , Y * int8 } var u U \u5728\u63a5\u6536\u8005\u4e2d\uff0c X \u7684\u503c\u662f 7 \uff0c Y \u7684\u503c\u662f 0 \uff08 Y \u7684\u503c\u5e76\u6ca1\u6709\u4ece t \u4e2d\u4f20\u9012\u8fc7\u6765\uff0c\u56e0\u4e3a\u5b83\u662f\u96f6\u503c\uff09 \u548c JSON \u7684\u4f7f\u7528\u65b9\u5f0f\u4e00\u6837\uff0cGob \u4f7f\u7528\u901a\u7528\u7684 io.Writer \u63a5\u53e3\uff0c\u901a\u8fc7 NewEncoder() \u51fd\u6570\u521b\u5efa Encoder \u5bf9\u8c61\u5e76\u8c03\u7528 Encode() \uff1b\u76f8\u53cd\u7684\u8fc7\u7a0b\u4f7f\u7528\u901a\u7528\u7684 io.Reader \u63a5\u53e3\uff0c\u901a\u8fc7 NewDecoder() \u51fd\u6570\u521b\u5efa Decoder \u5bf9\u8c61\u5e76\u8c03\u7528 Decode() \u3002 \u6211\u4eec\u628a\u793a\u4f8b 12.12 \u7684\u4fe1\u606f\u5199\u8fdb\u540d\u4e3a vcard.gob \u7684\u6587\u4ef6\u4f5c\u4e3a\u4f8b\u5b50\u3002\u8fd9\u4f1a\u4ea7\u751f\u4e00\u4e2a\u6587\u672c\u53ef\u8bfb\u6570\u636e\u548c\u4e8c\u8fdb\u5236\u6570\u636e\u7684\u6df7\u5408\uff0c\u5f53\u4f60\u8bd5\u7740\u5728\u6587\u672c\u7f16\u8f91\u4e2d\u6253\u5f00\u7684\u65f6\u5019\u4f1a\u770b\u5230\u3002 \u5728\u793a\u4f8b 12.18 \u4e2d\u4f60\u4f1a\u770b\u5230\u4e00\u4e2a\u7f16\u89e3\u7801\uff0c\u5e76\u4e14\u4ee5\u5b57\u8282\u7f13\u51b2\u6a21\u62df\u7f51\u7edc\u4f20\u8f93\u7684\u7b80\u5355\u4f8b\u5b50\uff1a \u793a\u4f8b 12.18 gob1.go \uff1a // gob1.go package main import ( \"bytes\" \"fmt\" \"encoding/gob\" \"log\" ) type P struct { X , Y , Z int Name string } type Q struct { X , Y * int32 Name string } func main () { // Initialize the encoder and decoder. Normally enc and dec would be // bound to network connections and the encoder and decoder would // run in different processes. var network bytes . Buffer // Stand-in for a network connection enc := gob . NewEncoder ( & network ) // Will write to network. dec := gob . NewDecoder ( & network ) // Will read from network. // Encode (send) the value. err := enc . Encode ( P { 3 , 4 , 5 , \"Pythagoras\" }) if err != nil { log . Fatal ( \"encode error:\" , err ) } // Decode (receive) the value. var q Q err = dec . Decode ( & q ) if err != nil { log . Fatal ( \"decode error:\" , err ) } fmt . Printf ( \"%q: {%d,%d}\\n\" , q . Name , q . X , q . Y ) } // Output: \"Pythagoras\": {3,4} \u793a\u4f8b 12.19 gob2.go \u7f16\u7801\u5230\u6587\u4ef6\uff1a // gob2.go package main import ( \"encoding/gob\" \"log\" \"os\" ) type Address struct { Type string City string Country string } type VCard struct { FirstName string LastName string Addresses [] * Address Remark string } var content string func main () { pa := & Address { \"private\" , \"Aartselaar\" , \"Belgium\" } wa := & Address { \"work\" , \"Boom\" , \"Belgium\" } vc := VCard { \"Jan\" , \"Kersschot\" , [] * Address { pa , wa }, \"none\" } // fmt.Printf(\"%v: \\n\", vc) // {Jan Kersschot [0x126d2b80 0x126d2be0] none}: // using an encoder: file , _ := os . OpenFile ( \"vcard.gob\" , os . O_CREATE | os . O_WRONLY , 0666 ) defer file . Close () enc := gob . NewEncoder ( file ) err := enc . Encode ( vc ) if err != nil { log . Println ( \"Error in encoding gob\" ) } } \u7ec3\u4e60 12.8 \uff1a degob.go \uff1a \u5199\u4e00\u4e2a\u7a0b\u5e8f\u8bfb\u53d6 vcard.gob \u6587\u4ef6\uff0c\u89e3\u7801\u5e76\u6253\u5370\u5b83\u7684\u5185\u5bb9\u3002","title":"12.11 \u7528 Gob \u4f20\u8f93\u6570\u636e"},{"location":"12.11/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a XML \u6570\u636e\u683c\u5f0f \u4e0b\u4e00\u8282\uff1a Go \u4e2d\u7684\u5bc6\u7801\u5b66","title":"\u94fe\u63a5"},{"location":"12.12/","text":"12.12 Go \u4e2d\u7684\u5bc6\u7801\u5b66 \u00b6 \u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u7684\u6570\u636e\u5fc5\u987b\u52a0\u5bc6\uff0c\u4ee5\u9632\u6b62\u88ab hacker\uff08\u9ed1\u5ba2\uff09\u8bfb\u53d6\u6216\u7be1\u6539\uff0c\u5e76\u4e14\u4fdd\u8bc1\u53d1\u51fa\u7684\u6570\u636e\u548c\u6536\u5230\u7684\u6570\u636e\u68c0\u9a8c\u548c\u4e00\u81f4\u3002 \u9274\u4e8e Go \u6bcd\u516c\u53f8\u7684\u4e1a\u52a1\uff0c\u6211\u4eec\u6beb\u4e0d\u60ca\u8bb6\u5730\u770b\u5230 Go \u7684\u6807\u51c6\u5e93\u4e3a\u8be5\u9886\u57df\u63d0\u4f9b\u4e86\u8d85\u8fc7 30 \u4e2a\u7684\u5305\uff1a hash \u5305\uff1a\u5b9e\u73b0\u4e86 adler32 \u3001 crc32 \u3001 crc64 \u548c fnv \u6821\u9a8c\uff1b crypto \u5305\uff1a\u5b9e\u73b0\u4e86\u5176\u5b83\u7684 hash \u7b97\u6cd5\uff0c\u6bd4\u5982 md4 \u3001 md5 \u3001 sha1 \u7b49\u3002\u4ee5\u53ca\u5b8c\u6574\u5730\u5b9e\u73b0\u4e86 aes \u3001 blowfish \u3001 rc4 \u3001 rsa \u3001 xtea \u7b49\u52a0\u5bc6\u7b97\u6cd5\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u7528 sha1 \u548c md5 \u8ba1\u7b97\u5e76\u8f93\u51fa\u4e86\u4e00\u4e9b\u6821\u9a8c\u503c\u3002 \u793a\u4f8b 12.20 hash_sha1.go \uff1a // hash_sha1.go package main import ( \"fmt\" \"crypto/sha1\" \"io\" \"log\" ) func main () { hasher := sha1 . New () io . WriteString ( hasher , \"test\" ) b := [] byte {} fmt . Printf ( \"Result: %x\\n\" , hasher . Sum ( b )) fmt . Printf ( \"Result: %d\\n\" , hasher . Sum ( b )) // hasher . Reset () data := [] byte ( \"We shall overcome!\" ) n , err := hasher . Write ( data ) if n != len ( data ) || err != nil { log . Printf ( \"Hash write error: %v / %v\" , n , err ) } checksum := hasher . Sum ( b ) fmt . Printf ( \"Result: %x\\n\" , checksum ) } \u8f93\u51fa\uff1a Result: a94a8fe5ccb19ba61c4c0873d391e987982fbbd3 Result: [169 74 143 229 204 177 155 166 28 76 8 115 211 145 233 135 152 47 187 211] Result: e2222bfc59850bbb00a722e764a555603bb59b2a \u901a\u8fc7\u8c03\u7528 sha1.New() \u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684 hash.Hash \u5bf9\u8c61\uff0c\u7528\u6765\u8ba1\u7b97 SHA1 \u6821\u9a8c\u503c\u3002 Hash \u7c7b\u578b\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u5b83\u5b9e\u73b0\u4e86 io.Writer \u63a5\u53e3\uff1a type Hash interface { // Write (via the embedded io.Writer interface) adds more data to the running hash. // It never returns an error. io . Writer // Sum appends the current hash to b and returns the resulting slice. // It does not change the underlying hash state. Sum ( b [] byte ) [] byte // Reset resets the Hash to its initial state. Reset () // Size returns the number of bytes Sum will return. Size () int // BlockSize returns the hash's underlying block size. // The Write method must be able to accept any amount // of data, but it may operate more efficiently if all writes // are a multiple of the block size. BlockSize () int } \u901a\u8fc7 io.WriteString \u6216 hasher.Write \u5c06\u7ed9\u5b9a\u7684 []byte \u9644\u52a0\u5230\u5f53\u524d\u7684 hash.Hash \u5bf9\u8c61\u4e2d\u3002 \u7ec3\u4e60 12.9 \uff1a hash_md5.go \uff1a \u5728\u793a\u4f8b 12.20 \u4e2d\u68c0\u9a8c md5 \u7b97\u6cd5\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7528 Gob \u4f20\u8f93\u6570\u636e \u4e0b\u4e00\u7ae0\uff1a \u9519\u8bef\u5904\u7406\u4e0e\u6d4b\u8bd5","title":"12.12 Go \u4e2d\u7684\u5bc6\u7801\u5b66"},{"location":"12.12/#1212-go","text":"\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u7684\u6570\u636e\u5fc5\u987b\u52a0\u5bc6\uff0c\u4ee5\u9632\u6b62\u88ab hacker\uff08\u9ed1\u5ba2\uff09\u8bfb\u53d6\u6216\u7be1\u6539\uff0c\u5e76\u4e14\u4fdd\u8bc1\u53d1\u51fa\u7684\u6570\u636e\u548c\u6536\u5230\u7684\u6570\u636e\u68c0\u9a8c\u548c\u4e00\u81f4\u3002 \u9274\u4e8e Go \u6bcd\u516c\u53f8\u7684\u4e1a\u52a1\uff0c\u6211\u4eec\u6beb\u4e0d\u60ca\u8bb6\u5730\u770b\u5230 Go \u7684\u6807\u51c6\u5e93\u4e3a\u8be5\u9886\u57df\u63d0\u4f9b\u4e86\u8d85\u8fc7 30 \u4e2a\u7684\u5305\uff1a hash \u5305\uff1a\u5b9e\u73b0\u4e86 adler32 \u3001 crc32 \u3001 crc64 \u548c fnv \u6821\u9a8c\uff1b crypto \u5305\uff1a\u5b9e\u73b0\u4e86\u5176\u5b83\u7684 hash \u7b97\u6cd5\uff0c\u6bd4\u5982 md4 \u3001 md5 \u3001 sha1 \u7b49\u3002\u4ee5\u53ca\u5b8c\u6574\u5730\u5b9e\u73b0\u4e86 aes \u3001 blowfish \u3001 rc4 \u3001 rsa \u3001 xtea \u7b49\u52a0\u5bc6\u7b97\u6cd5\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u7528 sha1 \u548c md5 \u8ba1\u7b97\u5e76\u8f93\u51fa\u4e86\u4e00\u4e9b\u6821\u9a8c\u503c\u3002 \u793a\u4f8b 12.20 hash_sha1.go \uff1a // hash_sha1.go package main import ( \"fmt\" \"crypto/sha1\" \"io\" \"log\" ) func main () { hasher := sha1 . New () io . WriteString ( hasher , \"test\" ) b := [] byte {} fmt . Printf ( \"Result: %x\\n\" , hasher . Sum ( b )) fmt . Printf ( \"Result: %d\\n\" , hasher . Sum ( b )) // hasher . Reset () data := [] byte ( \"We shall overcome!\" ) n , err := hasher . Write ( data ) if n != len ( data ) || err != nil { log . Printf ( \"Hash write error: %v / %v\" , n , err ) } checksum := hasher . Sum ( b ) fmt . Printf ( \"Result: %x\\n\" , checksum ) } \u8f93\u51fa\uff1a Result: a94a8fe5ccb19ba61c4c0873d391e987982fbbd3 Result: [169 74 143 229 204 177 155 166 28 76 8 115 211 145 233 135 152 47 187 211] Result: e2222bfc59850bbb00a722e764a555603bb59b2a \u901a\u8fc7\u8c03\u7528 sha1.New() \u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684 hash.Hash \u5bf9\u8c61\uff0c\u7528\u6765\u8ba1\u7b97 SHA1 \u6821\u9a8c\u503c\u3002 Hash \u7c7b\u578b\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u5b83\u5b9e\u73b0\u4e86 io.Writer \u63a5\u53e3\uff1a type Hash interface { // Write (via the embedded io.Writer interface) adds more data to the running hash. // It never returns an error. io . Writer // Sum appends the current hash to b and returns the resulting slice. // It does not change the underlying hash state. Sum ( b [] byte ) [] byte // Reset resets the Hash to its initial state. Reset () // Size returns the number of bytes Sum will return. Size () int // BlockSize returns the hash's underlying block size. // The Write method must be able to accept any amount // of data, but it may operate more efficiently if all writes // are a multiple of the block size. BlockSize () int } \u901a\u8fc7 io.WriteString \u6216 hasher.Write \u5c06\u7ed9\u5b9a\u7684 []byte \u9644\u52a0\u5230\u5f53\u524d\u7684 hash.Hash \u5bf9\u8c61\u4e2d\u3002 \u7ec3\u4e60 12.9 \uff1a hash_md5.go \uff1a \u5728\u793a\u4f8b 12.20 \u4e2d\u68c0\u9a8c md5 \u7b97\u6cd5\u3002","title":"12.12 Go \u4e2d\u7684\u5bc6\u7801\u5b66"},{"location":"12.12/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7528 Gob \u4f20\u8f93\u6570\u636e \u4e0b\u4e00\u7ae0\uff1a \u9519\u8bef\u5904\u7406\u4e0e\u6d4b\u8bd5","title":"\u94fe\u63a5"},{"location":"12.2/","text":"12.2 \u6587\u4ef6\u8bfb\u5199 \u00b6 12.2.1 \u8bfb\u6587\u4ef6 \u00b6 \u5728 Go \u8bed\u8a00\u4e2d\uff0c\u6587\u4ef6\u4f7f\u7528\u6307\u5411 os.File \u7c7b\u578b\u7684\u6307\u9488\u6765\u8868\u793a\u7684\uff0c\u4e5f\u53eb\u505a\u6587\u4ef6\u53e5\u67c4\u3002\u6211\u4eec\u5728\u524d\u9762\u7ae0\u8282\u4f7f\u7528\u5230\u8fc7\u6807\u51c6\u8f93\u5165 os.Stdin \u548c\u6807\u51c6\u8f93\u51fa os.Stdout \uff0c\u4ed6\u4eec\u7684\u7c7b\u578b\u90fd\u662f *os.File \u3002\u8ba9\u6211\u4eec\u6765\u770b\u770b\u4e0b\u9762\u8fd9\u4e2a\u7a0b\u5e8f\uff1a \u793a\u4f8b 12.4 fileinput.go \uff1a package main import ( \"bufio\" \"fmt\" \"io\" \"os\" ) func main () { inputFile , inputError := os . Open ( \"input.dat\" ) if inputError != nil { fmt . Printf ( \"An error occurred on opening the inputfile\\n\" + \"Does the file exist?\\n\" + \"Have you got access to it?\\n\" ) return // exit the function on error } defer inputFile . Close () inputReader := bufio . NewReader ( inputFile ) for { inputString , readerError := inputReader . ReadString ( '\\n' ) fmt . Printf ( \"The input was: %s\" , inputString ) if readerError == io . EOF { return } } } \u53d8\u91cf inputFile \u662f *os.File \u7c7b\u578b\u7684\u3002\u8be5\u7c7b\u578b\u662f\u4e00\u4e2a\u7ed3\u6784\uff0c\u8868\u793a\u4e00\u4e2a\u6253\u5f00\u6587\u4ef6\u7684\u63cf\u8ff0\u7b26\uff08\u6587\u4ef6\u53e5\u67c4\uff09\u3002\u7136\u540e\uff0c\u4f7f\u7528 os \u5305\u91cc\u7684 Open() \u51fd\u6570\u6765\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u3002\u8be5\u51fd\u6570\u7684\u53c2\u6570\u662f\u6587\u4ef6\u540d\uff0c\u7c7b\u578b\u4e3a string \u3002\u5728\u4e0a\u9762\u7684\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u4ee5\u53ea\u8bfb\u6a21\u5f0f\u6253\u5f00 input.dat \u6587\u4ef6\u3002 \u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u6216\u8005\u7a0b\u5e8f\u6ca1\u6709\u8db3\u591f\u7684\u6743\u9650\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6\uff0cOpen\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\uff1a inputFile, inputError = os.Open(\"input.dat\") \u3002\u5982\u679c\u6587\u4ef6\u6253\u5f00\u6b63\u5e38\uff0c\u6211\u4eec\u5c31\u4f7f\u7528 defer inputFile.Close() \u8bed\u53e5\u786e\u4fdd\u5728\u7a0b\u5e8f\u9000\u51fa\u524d\u5173\u95ed\u8be5\u6587\u4ef6\u3002\u7136\u540e\uff0c\u6211\u4eec\u4f7f\u7528 bufio.NewReader() \u6765\u83b7\u5f97\u4e00\u4e2a\u8bfb\u53d6\u5668\u53d8\u91cf\u3002 \u901a\u8fc7\u4f7f\u7528 bufio \u5305\u63d0\u4f9b\u7684\u8bfb\u53d6\u5668\uff08\u5199\u5165\u5668\u4e5f\u7c7b\u4f3c\uff09\uff0c\u5982\u4e0a\u9762\u7a0b\u5e8f\u6240\u793a\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u64cd\u4f5c\u76f8\u5bf9\u9ad8\u5c42\u7684 string \u5bf9\u8c61\uff0c\u800c\u907f\u514d\u4e86\u53bb\u64cd\u4f5c\u6bd4\u8f83\u5e95\u5c42\u7684\u5b57\u8282\u3002 \u63a5\u7740\uff0c\u6211\u4eec\u5728\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u4e2d\u4f7f\u7528 ReadString('\\n') \u6216 ReadBytes('\\n') \u5c06\u6587\u4ef6\u7684\u5185\u5bb9\u9010\u884c\uff08\u884c\u7ed3\u675f\u7b26 '\\n' \uff09\u8bfb\u53d6\u51fa\u6765\u3002 \u6ce8\u610f\uff1a \u5728\u4e4b\u524d\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u770b\u5230\uff0cUnix \u548c Linux \u7684\u884c\u7ed3\u675f\u7b26\u662f \\n \uff0c\u800c Windows \u7684\u884c\u7ed3\u675f\u7b26\u662f \\r\\n \u3002\u5728\u4f7f\u7528 ReadString \u548c ReadBytes \u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u5173\u5fc3\u64cd\u4f5c\u7cfb\u7edf\u7684\u7c7b\u578b\uff0c\u76f4\u63a5\u4f7f\u7528 \\n \u5c31\u53ef\u4ee5\u4e86\u3002\u53e6\u5916\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528 ReadLine() \u65b9\u6cd5\u6765\u5b9e\u73b0\u76f8\u540c\u7684\u529f\u80fd\u3002 \u4e00\u65e6\u8bfb\u53d6\u5230\u6587\u4ef6\u672b\u5c3e\uff0c\u53d8\u91cf readerError \u7684\u503c\u5c06\u53d8\u6210\u975e\u7a7a\uff08\u4e8b\u5b9e\u4e0a\uff0c\u5176\u503c\u4e3a\u5e38\u91cf io.EOF \uff09\uff0c\u6211\u4eec\u5c31\u4f1a\u6267\u884c return \u8bed\u53e5\u4ece\u800c\u9000\u51fa\u5faa\u73af\u3002 \u5176\u4ed6\u7c7b\u4f3c\u51fd\u6570\uff1a 1) \u5c06\u6574\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\u8bfb\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\u91cc\uff1a \u5982\u679c\u60a8\u60f3\u8fd9\u4e48\u505a\uff0c\u53ef\u4ee5\u4f7f\u7528 io/ioutil \u5305\u91cc\u7684 ioutil.ReadFile() \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u7b2c\u4e00\u4e2a\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u662f []byte \uff0c\u91cc\u9762\u5b58\u653e\u8bfb\u53d6\u5230\u7684\u5185\u5bb9\uff0c\u7b2c\u4e8c\u4e2a\u8fd4\u56de\u503c\u662f\u9519\u8bef\uff0c\u5982\u679c\u6ca1\u6709\u9519\u8bef\u53d1\u751f\uff0c\u7b2c\u4e8c\u4e2a\u8fd4\u56de\u503c\u4e3a nil \u3002\u8bf7\u770b\u793a\u4f8b 12.5\u3002\u7c7b\u4f3c\u7684\uff0c\u51fd\u6570 WriteFile() \u53ef\u4ee5\u5c06 []byte \u7684\u503c\u5199\u5165\u6587\u4ef6\u3002 \u793a\u4f8b 12.5 read_write_file1.go \uff1a package main import ( \"fmt\" \"io/ioutil\" \"os\" ) func main () { inputFile := \"products.txt\" outputFile := \"products_copy.txt\" buf , err := ioutil . ReadFile ( inputFile ) if err != nil { fmt . Fprintf ( os . Stderr , \"File Error: %s\\n\" , err ) // panic(err.Error()) } fmt . Printf ( \"%s\\n\" , string ( buf )) err = ioutil . WriteFile ( outputFile , buf , 0644 ) // oct, not hex if err != nil { panic ( err . Error ()) } } 2) \u5e26\u7f13\u51b2\u7684\u8bfb\u53d6 \u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u6587\u4ef6\u7684\u5185\u5bb9\u662f\u4e0d\u6309\u884c\u5212\u5206\u7684\uff0c\u6216\u8005\u5e72\u8106\u5c31\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c ReadString() \u5c31\u65e0\u6cd5\u4f7f\u7528\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 bufio.Reader \u7684 Read() \uff0c\u5b83\u53ea\u63a5\u6536\u4e00\u4e2a\u53c2\u6570\uff1a buf := make ([] byte , 1024 ) ... n , err := inputReader . Read ( buf ) if ( n == 0 ) { break } \u53d8\u91cf n \u7684\u503c\u8868\u793a\u8bfb\u53d6\u5230\u7684\u5b57\u8282\u6570. 3) \u6309\u5217\u8bfb\u53d6\u6587\u4ef6\u4e2d\u7684\u6570\u636e \u5982\u679c\u6570\u636e\u662f\u6309\u5217\u6392\u5217\u5e76\u7528\u7a7a\u683c\u5206\u9694\u7684\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 fmt \u5305\u63d0\u4f9b\u7684\u4ee5 FScan... \u5f00\u5934\u7684\u4e00\u7cfb\u5217\u51fd\u6570\u6765\u8bfb\u53d6\u4ed6\u4eec\u3002\u8bf7\u770b\u4ee5\u4e0b\u7a0b\u5e8f\uff0c\u6211\u4eec\u5c06 3 \u5217\u7684\u6570\u636e\u5206\u522b\u8bfb\u5165\u53d8\u91cf v1 \u3001 v2 \u548c v3 \u5185\uff0c\u7136\u540e\u5206\u522b\u628a\u4ed6\u4eec\u6dfb\u52a0\u5230\u5207\u7247\u7684\u5c3e\u90e8\u3002 \u793a\u4f8b 12.6 read_file2.go \uff1a package main import ( \"fmt\" \"os\" ) func main () { file , err := os . Open ( \"products2.txt\" ) if err != nil { panic ( err ) } defer file . Close () var col1 , col2 , col3 [] string for { var v1 , v2 , v3 string _ , err := fmt . Fscanln ( file , & v1 , & v2 , & v3 ) // scans until newline if err != nil { break } col1 = append ( col1 , v1 ) col2 = append ( col2 , v2 ) col3 = append ( col3 , v3 ) } fmt . Println ( col1 ) fmt . Println ( col2 ) fmt . Println ( col3 ) } \u8f93\u51fa\u7ed3\u679c\uff1a [ABC FUNC GO] [40 56 45] [150 280 356] \u6ce8\u610f\uff1a path \u5305\u91cc\u5305\u542b\u4e00\u4e2a\u5b50\u5305\u53eb filepath \uff0c\u8fd9\u4e2a\u5b50\u5305\u63d0\u4f9b\u4e86\u8de8\u5e73\u53f0\u7684\u51fd\u6570\uff0c\u7528\u4e8e\u5904\u7406\u6587\u4ef6\u540d\u548c\u8def\u5f84\u3002\u4f8b\u5982 Base() \u51fd\u6570\u7528\u4e8e\u83b7\u5f97\u8def\u5f84\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff08\u4e0d\u5305\u542b\u540e\u9762\u7684\u5206\u9694\u7b26\uff09\uff1a import \"path/filepath\" filename := filepath . Base ( path ) \u7ec3\u4e60 12.3 \uff1a read_csv.go \u6587\u4ef6 products.txt \u7684\u5185\u5bb9\u5982\u4e0b\uff1a \"The ABC of Go\";25.5;1500 \"Functional Programming with Go\";56;280 \"Go for It\";45.9;356 \"The Go Way\";55;500 \u6bcf\u884c\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bb5\u4e3a\u6807\u9898\uff0c\u7b2c\u4e8c\u4e2a\u5b57\u6bb5\u4e3a\u4ef7\u683c\uff0c\u7b2c\u4e09\u4e2a\u5b57\u6bb5\u4e3a\u6570\u91cf\u3002\u5185\u5bb9\u7684\u683c\u5f0f\u57fa\u672c\u4e0e \u793a\u4f8b 12.3c \u7684\u76f8\u540c\uff0c\u9664\u4e86\u5206\u9694\u7b26\u6539\u6210\u4e86\u5206\u53f7\u3002\u8bf7\u8bfb\u53d6\u51fa\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u7528\u4e8e\u5b58\u53d6\u4e00\u884c\u7684\u6570\u636e\uff0c\u7136\u540e\u4f7f\u7528\u7ed3\u6784\u7684\u5207\u7247\uff0c\u5e76\u628a\u6570\u636e\u6253\u5370\u51fa\u6765\u3002 \u5173\u4e8e\u89e3\u6790 CSV \u6587\u4ef6\uff0c encoding/csv \u5305\u63d0\u4f9b\u4e86\u76f8\u5e94\u7684\u529f\u80fd\u3002\u5177\u4f53\u8bf7\u53c2\u8003 http://golang.org/pkg/encoding/csv/ \u3002 12.2.2 compress \u5305\uff1a\u8bfb\u53d6\u538b\u7f29\u6587\u4ef6 \u00b6 compress \u5305\u63d0\u4f9b\u4e86\u8bfb\u53d6\u538b\u7f29\u6587\u4ef6\u7684\u529f\u80fd\uff0c\u652f\u6301\u7684\u538b\u7f29\u6587\u4ef6\u683c\u5f0f\u4e3a\uff1abzip2\u3001flate\u3001gzip\u3001lzw \u548c zlib\u3002 \u4e0b\u9762\u7684\u7a0b\u5e8f\u5c55\u793a\u4e86\u5982\u4f55\u8bfb\u53d6\u4e00\u4e2a gzip \u6587\u4ef6\u3002 \u793a\u4f8b 12.7 gzipped.go \uff1a package main import ( \"fmt\" \"bufio\" \"os\" \"compress/gzip\" ) func main () { fName := \"MyFile.gz\" var r * bufio . Reader fi , err := os . Open ( fName ) if err != nil { fmt . Fprintf ( os . Stderr , \"%v, Can't open %s: error: %s\\n\" , os . Args [ 0 ], fName , err ) os . Exit ( 1 ) } defer fi . Close () fz , err := gzip . NewReader ( fi ) if err != nil { r = bufio . NewReader ( fi ) } else { r = bufio . NewReader ( fz ) } for { line , err := r . ReadString ( '\\n' ) if err != nil { fmt . Println ( \"Done reading file\" ) os . Exit ( 0 ) } fmt . Println ( line ) } } 12.2.3 \u5199\u6587\u4ef6 \u00b6 \u8bf7\u770b\u4ee5\u4e0b\u7a0b\u5e8f\uff1a \u793a\u4f8b 12.8 fileoutput.go \uff1a package main import ( \"os\" \"bufio\" \"fmt\" ) func main () { // var outputWriter *bufio.Writer // var outputFile *os.File // var outputError os.Error // var outputString string outputFile , outputError := os . OpenFile ( \"output.dat\" , os . O_WRONLY | os . O_CREATE , 0666 ) if outputError != nil { fmt . Printf ( \"An error occurred with file opening or creation\\n\" ) return } defer outputFile . Close () outputWriter := bufio . NewWriter ( outputFile ) outputString := \"hello world!\\n\" for i := 0 ; i < 10 ; i ++ { outputWriter . WriteString ( outputString ) } outputWriter . Flush () } \u9664\u4e86\u6587\u4ef6\u53e5\u67c4\uff0c\u6211\u4eec\u8fd8\u9700\u8981 bufio \u7684 Writer \u3002\u6211\u4eec\u4ee5\u53ea\u5199\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6 output.dat \uff0c\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u5219\u81ea\u52a8\u521b\u5efa\uff1a outputFile , outputError := os . OpenFile ( \"output.dat\" , os . O_WRONLY | os . O_CREATE , 0666 ) \u53ef\u4ee5\u770b\u5230\uff0c OpenFile \u51fd\u6570\u6709\u4e09\u4e2a\u53c2\u6570\uff1a\u6587\u4ef6\u540d\u3001\u4e00\u4e2a\u6216\u591a\u4e2a\u6807\u5fd7\uff08\u4f7f\u7528\u903b\u8f91\u8fd0\u7b97\u7b26 | \u8fde\u63a5\uff09\uff0c\u4f7f\u7528\u7684\u6587\u4ef6\u6743\u9650\u3002 \u6211\u4eec\u901a\u5e38\u4f1a\u7528\u5230\u4ee5\u4e0b\u6807\u5fd7\uff1a os.O_RDONLY \uff1a\u53ea\u8bfb os.O_WRONLY \uff1a\u53ea\u5199 os.O_CREATE \uff1a\u521b\u5efa\uff1a\u5982\u679c\u6307\u5b9a\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5c31\u521b\u5efa\u8be5\u6587\u4ef6\u3002 os.O_TRUNC \uff1a\u622a\u65ad\uff1a\u5982\u679c\u6307\u5b9a\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u5c31\u5c06\u8be5\u6587\u4ef6\u7684\u957f\u5ea6\u622a\u4e3a 0 \u3002 \u5728\u8bfb\u6587\u4ef6\u7684\u65f6\u5019\uff0c\u6587\u4ef6\u7684\u6743\u9650\u662f\u88ab\u5ffd\u7565\u7684\uff0c\u6240\u4ee5\u5728\u4f7f\u7528 OpenFile() \u65f6\u4f20\u5165\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u53ef\u4ee5\u7528 0 \u3002\u800c\u5728\u5199\u6587\u4ef6\u65f6\uff0c\u4e0d\u7ba1\u662f Unix \u8fd8\u662f Windows\uff0c\u90fd\u9700\u8981\u4f7f\u7528 0666 \u3002 \u7136\u540e\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5199\u5165\u5668\uff08\u7f13\u51b2\u533a\uff09\u5bf9\u8c61\uff1a outputWriter := bufio . NewWriter ( outputFile ) \u63a5\u7740\uff0c\u4f7f\u7528\u4e00\u4e2a for \u5faa\u73af\uff0c\u5c06\u5b57\u7b26\u4e32\u5199\u5165\u7f13\u51b2\u533a\uff0c\u5199 10 \u6b21\uff1a outputWriter.WriteString(outputString) \u7f13\u51b2\u533a\u7684\u5185\u5bb9\u7d27\u63a5\u7740\u88ab\u5b8c\u5168\u5199\u5165\u6587\u4ef6\uff1a outputWriter.Flush() \u5982\u679c\u5199\u5165\u7684\u4e1c\u897f\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 fmt.Fprintf(outputFile, \"Some test data.\\n\") \u76f4\u63a5\u5c06\u5185\u5bb9\u5199\u5165\u6587\u4ef6\u3002 fmt \u5305\u91cc\u7684 F... \u5f00\u5934\u7684 Print() \u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u5199\u5165\u4efb\u4f55 io.Writer \uff0c\u5305\u62ec\u6587\u4ef6\uff08\u8bf7\u53c2\u8003 \u7ae0\u8282 12.8 )\u3002 \u7a0b\u5e8f filewrite.go \u5c55\u793a\u4e86\u4e0d\u4f7f\u7528 fmt.FPrintf() \u51fd\u6570\uff0c\u4f7f\u7528\u5176\u4ed6\u51fd\u6570\u5982\u4f55\u5199\u6587\u4ef6\uff1a \u793a\u4f8b 12.8 filewrite.go \uff1a package main import \"os\" func main () { os . Stdout . WriteString ( \"hello, world\\n\" ) f , _ := os . OpenFile ( \"test\" , os . O_CREATE | os . O_WRONLY , 0666 ) defer f . Close () f . WriteString ( \"hello, world in a file\\n\" ) } \u4f7f\u7528 os.Stdout.WriteString(\"hello, world\\n\") \uff0c\u6211\u4eec\u53ef\u4ee5\u8f93\u51fa\u5230\u5c4f\u5e55\u3002 \u6211\u4eec\u4ee5\u53ea\u5199\u6a21\u5f0f\u521b\u5efa\u6216\u6253\u5f00\u6587\u4ef6 \"test\" \uff0c\u5e76\u4e14\u5ffd\u7565\u4e86\u53ef\u80fd\u53d1\u751f\u7684\u9519\u8bef\uff1a f, _ := os.OpenFile(\"test\", os.O_CREATE|os.O_WRONLY, 0666) \u6211\u4eec\u4e0d\u4f7f\u7528\u7f13\u51b2\u533a\uff0c\u76f4\u63a5\u5c06\u5185\u5bb9\u5199\u5165\u6587\u4ef6\uff1a f.WriteString() \u7ec3\u4e60 12.4 \uff1a wiki_part1.go \uff08\u8fd9\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u7ec3\u4e60\uff0c\u4f46\u662f\u540c\u65f6\u4e5f\u662f\u4e3a \u7ae0\u8282 15.4 \u505a\u51c6\u5907\uff09 \u7a0b\u5e8f\u4e2d\u7684\u6570\u636e\u7ed3\u6784\u5982\u4e0b\uff0c\u662f\u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u7ed3\u6784: type Page struct { Title string Body [] byte } \u8bf7\u7ed9\u8fd9\u4e2a\u7ed3\u6784\u7f16\u5199\u4e00\u4e2a save() \u65b9\u6cd5\uff0c\u5c06 Title \u4f5c\u4e3a\u6587\u4ef6\u540d\u3001Body \u4f5c\u4e3a\u6587\u4ef6\u5185\u5bb9\uff0c\u5199\u5165\u5230\u6587\u672c\u6587\u4ef6\u4e2d\u3002 \u518d\u7f16\u5199\u4e00\u4e2a load() \u51fd\u6570\uff0c\u63a5\u6536\u7684\u53c2\u6570\u662f\u5b57\u7b26\u4e32 title \uff0c\u8be5\u51fd\u6570\u8bfb\u53d6\u51fa\u4e0e title \u5bf9\u5e94\u7684\u6587\u672c\u6587\u4ef6\u3002\u8bf7\u4f7f\u7528 *Page \u505a\u4e3a\u53c2\u6570\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u7ed3\u6784\u53ef\u80fd\u76f8\u5f53\u5de8\u5927\uff0c\u6211\u4eec\u4e0d\u60f3\u5728\u5185\u5b58\u4e2d\u62f7\u8d1d\u5b83\u3002\u8bf7\u4f7f\u7528 ioutil \u5305\u91cc\u7684\u51fd\u6570\uff08\u53c2\u8003 \u7ae0\u8282 12.2.1 \uff09\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u8bfb\u53d6\u7528\u6237\u7684\u8f93\u5165 \u4e0b\u4e00\u8282\uff1a \u6587\u4ef6\u62f7\u8d1d","title":"12.2 \u6587\u4ef6\u8bfb\u5199"},{"location":"12.2/#122","text":"","title":"12.2 \u6587\u4ef6\u8bfb\u5199"},{"location":"12.2/#1221","text":"\u5728 Go \u8bed\u8a00\u4e2d\uff0c\u6587\u4ef6\u4f7f\u7528\u6307\u5411 os.File \u7c7b\u578b\u7684\u6307\u9488\u6765\u8868\u793a\u7684\uff0c\u4e5f\u53eb\u505a\u6587\u4ef6\u53e5\u67c4\u3002\u6211\u4eec\u5728\u524d\u9762\u7ae0\u8282\u4f7f\u7528\u5230\u8fc7\u6807\u51c6\u8f93\u5165 os.Stdin \u548c\u6807\u51c6\u8f93\u51fa os.Stdout \uff0c\u4ed6\u4eec\u7684\u7c7b\u578b\u90fd\u662f *os.File \u3002\u8ba9\u6211\u4eec\u6765\u770b\u770b\u4e0b\u9762\u8fd9\u4e2a\u7a0b\u5e8f\uff1a \u793a\u4f8b 12.4 fileinput.go \uff1a package main import ( \"bufio\" \"fmt\" \"io\" \"os\" ) func main () { inputFile , inputError := os . Open ( \"input.dat\" ) if inputError != nil { fmt . Printf ( \"An error occurred on opening the inputfile\\n\" + \"Does the file exist?\\n\" + \"Have you got access to it?\\n\" ) return // exit the function on error } defer inputFile . Close () inputReader := bufio . NewReader ( inputFile ) for { inputString , readerError := inputReader . ReadString ( '\\n' ) fmt . Printf ( \"The input was: %s\" , inputString ) if readerError == io . EOF { return } } } \u53d8\u91cf inputFile \u662f *os.File \u7c7b\u578b\u7684\u3002\u8be5\u7c7b\u578b\u662f\u4e00\u4e2a\u7ed3\u6784\uff0c\u8868\u793a\u4e00\u4e2a\u6253\u5f00\u6587\u4ef6\u7684\u63cf\u8ff0\u7b26\uff08\u6587\u4ef6\u53e5\u67c4\uff09\u3002\u7136\u540e\uff0c\u4f7f\u7528 os \u5305\u91cc\u7684 Open() \u51fd\u6570\u6765\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u3002\u8be5\u51fd\u6570\u7684\u53c2\u6570\u662f\u6587\u4ef6\u540d\uff0c\u7c7b\u578b\u4e3a string \u3002\u5728\u4e0a\u9762\u7684\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u4ee5\u53ea\u8bfb\u6a21\u5f0f\u6253\u5f00 input.dat \u6587\u4ef6\u3002 \u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u6216\u8005\u7a0b\u5e8f\u6ca1\u6709\u8db3\u591f\u7684\u6743\u9650\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6\uff0cOpen\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\uff1a inputFile, inputError = os.Open(\"input.dat\") \u3002\u5982\u679c\u6587\u4ef6\u6253\u5f00\u6b63\u5e38\uff0c\u6211\u4eec\u5c31\u4f7f\u7528 defer inputFile.Close() \u8bed\u53e5\u786e\u4fdd\u5728\u7a0b\u5e8f\u9000\u51fa\u524d\u5173\u95ed\u8be5\u6587\u4ef6\u3002\u7136\u540e\uff0c\u6211\u4eec\u4f7f\u7528 bufio.NewReader() \u6765\u83b7\u5f97\u4e00\u4e2a\u8bfb\u53d6\u5668\u53d8\u91cf\u3002 \u901a\u8fc7\u4f7f\u7528 bufio \u5305\u63d0\u4f9b\u7684\u8bfb\u53d6\u5668\uff08\u5199\u5165\u5668\u4e5f\u7c7b\u4f3c\uff09\uff0c\u5982\u4e0a\u9762\u7a0b\u5e8f\u6240\u793a\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u64cd\u4f5c\u76f8\u5bf9\u9ad8\u5c42\u7684 string \u5bf9\u8c61\uff0c\u800c\u907f\u514d\u4e86\u53bb\u64cd\u4f5c\u6bd4\u8f83\u5e95\u5c42\u7684\u5b57\u8282\u3002 \u63a5\u7740\uff0c\u6211\u4eec\u5728\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u4e2d\u4f7f\u7528 ReadString('\\n') \u6216 ReadBytes('\\n') \u5c06\u6587\u4ef6\u7684\u5185\u5bb9\u9010\u884c\uff08\u884c\u7ed3\u675f\u7b26 '\\n' \uff09\u8bfb\u53d6\u51fa\u6765\u3002 \u6ce8\u610f\uff1a \u5728\u4e4b\u524d\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u770b\u5230\uff0cUnix \u548c Linux \u7684\u884c\u7ed3\u675f\u7b26\u662f \\n \uff0c\u800c Windows \u7684\u884c\u7ed3\u675f\u7b26\u662f \\r\\n \u3002\u5728\u4f7f\u7528 ReadString \u548c ReadBytes \u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u5173\u5fc3\u64cd\u4f5c\u7cfb\u7edf\u7684\u7c7b\u578b\uff0c\u76f4\u63a5\u4f7f\u7528 \\n \u5c31\u53ef\u4ee5\u4e86\u3002\u53e6\u5916\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528 ReadLine() \u65b9\u6cd5\u6765\u5b9e\u73b0\u76f8\u540c\u7684\u529f\u80fd\u3002 \u4e00\u65e6\u8bfb\u53d6\u5230\u6587\u4ef6\u672b\u5c3e\uff0c\u53d8\u91cf readerError \u7684\u503c\u5c06\u53d8\u6210\u975e\u7a7a\uff08\u4e8b\u5b9e\u4e0a\uff0c\u5176\u503c\u4e3a\u5e38\u91cf io.EOF \uff09\uff0c\u6211\u4eec\u5c31\u4f1a\u6267\u884c return \u8bed\u53e5\u4ece\u800c\u9000\u51fa\u5faa\u73af\u3002 \u5176\u4ed6\u7c7b\u4f3c\u51fd\u6570\uff1a 1) \u5c06\u6574\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\u8bfb\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\u91cc\uff1a \u5982\u679c\u60a8\u60f3\u8fd9\u4e48\u505a\uff0c\u53ef\u4ee5\u4f7f\u7528 io/ioutil \u5305\u91cc\u7684 ioutil.ReadFile() \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u7b2c\u4e00\u4e2a\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u662f []byte \uff0c\u91cc\u9762\u5b58\u653e\u8bfb\u53d6\u5230\u7684\u5185\u5bb9\uff0c\u7b2c\u4e8c\u4e2a\u8fd4\u56de\u503c\u662f\u9519\u8bef\uff0c\u5982\u679c\u6ca1\u6709\u9519\u8bef\u53d1\u751f\uff0c\u7b2c\u4e8c\u4e2a\u8fd4\u56de\u503c\u4e3a nil \u3002\u8bf7\u770b\u793a\u4f8b 12.5\u3002\u7c7b\u4f3c\u7684\uff0c\u51fd\u6570 WriteFile() \u53ef\u4ee5\u5c06 []byte \u7684\u503c\u5199\u5165\u6587\u4ef6\u3002 \u793a\u4f8b 12.5 read_write_file1.go \uff1a package main import ( \"fmt\" \"io/ioutil\" \"os\" ) func main () { inputFile := \"products.txt\" outputFile := \"products_copy.txt\" buf , err := ioutil . ReadFile ( inputFile ) if err != nil { fmt . Fprintf ( os . Stderr , \"File Error: %s\\n\" , err ) // panic(err.Error()) } fmt . Printf ( \"%s\\n\" , string ( buf )) err = ioutil . WriteFile ( outputFile , buf , 0644 ) // oct, not hex if err != nil { panic ( err . Error ()) } } 2) \u5e26\u7f13\u51b2\u7684\u8bfb\u53d6 \u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u6587\u4ef6\u7684\u5185\u5bb9\u662f\u4e0d\u6309\u884c\u5212\u5206\u7684\uff0c\u6216\u8005\u5e72\u8106\u5c31\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c ReadString() \u5c31\u65e0\u6cd5\u4f7f\u7528\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 bufio.Reader \u7684 Read() \uff0c\u5b83\u53ea\u63a5\u6536\u4e00\u4e2a\u53c2\u6570\uff1a buf := make ([] byte , 1024 ) ... n , err := inputReader . Read ( buf ) if ( n == 0 ) { break } \u53d8\u91cf n \u7684\u503c\u8868\u793a\u8bfb\u53d6\u5230\u7684\u5b57\u8282\u6570. 3) \u6309\u5217\u8bfb\u53d6\u6587\u4ef6\u4e2d\u7684\u6570\u636e \u5982\u679c\u6570\u636e\u662f\u6309\u5217\u6392\u5217\u5e76\u7528\u7a7a\u683c\u5206\u9694\u7684\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 fmt \u5305\u63d0\u4f9b\u7684\u4ee5 FScan... \u5f00\u5934\u7684\u4e00\u7cfb\u5217\u51fd\u6570\u6765\u8bfb\u53d6\u4ed6\u4eec\u3002\u8bf7\u770b\u4ee5\u4e0b\u7a0b\u5e8f\uff0c\u6211\u4eec\u5c06 3 \u5217\u7684\u6570\u636e\u5206\u522b\u8bfb\u5165\u53d8\u91cf v1 \u3001 v2 \u548c v3 \u5185\uff0c\u7136\u540e\u5206\u522b\u628a\u4ed6\u4eec\u6dfb\u52a0\u5230\u5207\u7247\u7684\u5c3e\u90e8\u3002 \u793a\u4f8b 12.6 read_file2.go \uff1a package main import ( \"fmt\" \"os\" ) func main () { file , err := os . Open ( \"products2.txt\" ) if err != nil { panic ( err ) } defer file . Close () var col1 , col2 , col3 [] string for { var v1 , v2 , v3 string _ , err := fmt . Fscanln ( file , & v1 , & v2 , & v3 ) // scans until newline if err != nil { break } col1 = append ( col1 , v1 ) col2 = append ( col2 , v2 ) col3 = append ( col3 , v3 ) } fmt . Println ( col1 ) fmt . Println ( col2 ) fmt . Println ( col3 ) } \u8f93\u51fa\u7ed3\u679c\uff1a [ABC FUNC GO] [40 56 45] [150 280 356] \u6ce8\u610f\uff1a path \u5305\u91cc\u5305\u542b\u4e00\u4e2a\u5b50\u5305\u53eb filepath \uff0c\u8fd9\u4e2a\u5b50\u5305\u63d0\u4f9b\u4e86\u8de8\u5e73\u53f0\u7684\u51fd\u6570\uff0c\u7528\u4e8e\u5904\u7406\u6587\u4ef6\u540d\u548c\u8def\u5f84\u3002\u4f8b\u5982 Base() \u51fd\u6570\u7528\u4e8e\u83b7\u5f97\u8def\u5f84\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff08\u4e0d\u5305\u542b\u540e\u9762\u7684\u5206\u9694\u7b26\uff09\uff1a import \"path/filepath\" filename := filepath . Base ( path ) \u7ec3\u4e60 12.3 \uff1a read_csv.go \u6587\u4ef6 products.txt \u7684\u5185\u5bb9\u5982\u4e0b\uff1a \"The ABC of Go\";25.5;1500 \"Functional Programming with Go\";56;280 \"Go for It\";45.9;356 \"The Go Way\";55;500 \u6bcf\u884c\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bb5\u4e3a\u6807\u9898\uff0c\u7b2c\u4e8c\u4e2a\u5b57\u6bb5\u4e3a\u4ef7\u683c\uff0c\u7b2c\u4e09\u4e2a\u5b57\u6bb5\u4e3a\u6570\u91cf\u3002\u5185\u5bb9\u7684\u683c\u5f0f\u57fa\u672c\u4e0e \u793a\u4f8b 12.3c \u7684\u76f8\u540c\uff0c\u9664\u4e86\u5206\u9694\u7b26\u6539\u6210\u4e86\u5206\u53f7\u3002\u8bf7\u8bfb\u53d6\u51fa\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u7528\u4e8e\u5b58\u53d6\u4e00\u884c\u7684\u6570\u636e\uff0c\u7136\u540e\u4f7f\u7528\u7ed3\u6784\u7684\u5207\u7247\uff0c\u5e76\u628a\u6570\u636e\u6253\u5370\u51fa\u6765\u3002 \u5173\u4e8e\u89e3\u6790 CSV \u6587\u4ef6\uff0c encoding/csv \u5305\u63d0\u4f9b\u4e86\u76f8\u5e94\u7684\u529f\u80fd\u3002\u5177\u4f53\u8bf7\u53c2\u8003 http://golang.org/pkg/encoding/csv/ \u3002","title":"12.2.1 \u8bfb\u6587\u4ef6"},{"location":"12.2/#1222-compress","text":"compress \u5305\u63d0\u4f9b\u4e86\u8bfb\u53d6\u538b\u7f29\u6587\u4ef6\u7684\u529f\u80fd\uff0c\u652f\u6301\u7684\u538b\u7f29\u6587\u4ef6\u683c\u5f0f\u4e3a\uff1abzip2\u3001flate\u3001gzip\u3001lzw \u548c zlib\u3002 \u4e0b\u9762\u7684\u7a0b\u5e8f\u5c55\u793a\u4e86\u5982\u4f55\u8bfb\u53d6\u4e00\u4e2a gzip \u6587\u4ef6\u3002 \u793a\u4f8b 12.7 gzipped.go \uff1a package main import ( \"fmt\" \"bufio\" \"os\" \"compress/gzip\" ) func main () { fName := \"MyFile.gz\" var r * bufio . Reader fi , err := os . Open ( fName ) if err != nil { fmt . Fprintf ( os . Stderr , \"%v, Can't open %s: error: %s\\n\" , os . Args [ 0 ], fName , err ) os . Exit ( 1 ) } defer fi . Close () fz , err := gzip . NewReader ( fi ) if err != nil { r = bufio . NewReader ( fi ) } else { r = bufio . NewReader ( fz ) } for { line , err := r . ReadString ( '\\n' ) if err != nil { fmt . Println ( \"Done reading file\" ) os . Exit ( 0 ) } fmt . Println ( line ) } }","title":"12.2.2 compress \u5305\uff1a\u8bfb\u53d6\u538b\u7f29\u6587\u4ef6"},{"location":"12.2/#1223","text":"\u8bf7\u770b\u4ee5\u4e0b\u7a0b\u5e8f\uff1a \u793a\u4f8b 12.8 fileoutput.go \uff1a package main import ( \"os\" \"bufio\" \"fmt\" ) func main () { // var outputWriter *bufio.Writer // var outputFile *os.File // var outputError os.Error // var outputString string outputFile , outputError := os . OpenFile ( \"output.dat\" , os . O_WRONLY | os . O_CREATE , 0666 ) if outputError != nil { fmt . Printf ( \"An error occurred with file opening or creation\\n\" ) return } defer outputFile . Close () outputWriter := bufio . NewWriter ( outputFile ) outputString := \"hello world!\\n\" for i := 0 ; i < 10 ; i ++ { outputWriter . WriteString ( outputString ) } outputWriter . Flush () } \u9664\u4e86\u6587\u4ef6\u53e5\u67c4\uff0c\u6211\u4eec\u8fd8\u9700\u8981 bufio \u7684 Writer \u3002\u6211\u4eec\u4ee5\u53ea\u5199\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6 output.dat \uff0c\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u5219\u81ea\u52a8\u521b\u5efa\uff1a outputFile , outputError := os . OpenFile ( \"output.dat\" , os . O_WRONLY | os . O_CREATE , 0666 ) \u53ef\u4ee5\u770b\u5230\uff0c OpenFile \u51fd\u6570\u6709\u4e09\u4e2a\u53c2\u6570\uff1a\u6587\u4ef6\u540d\u3001\u4e00\u4e2a\u6216\u591a\u4e2a\u6807\u5fd7\uff08\u4f7f\u7528\u903b\u8f91\u8fd0\u7b97\u7b26 | \u8fde\u63a5\uff09\uff0c\u4f7f\u7528\u7684\u6587\u4ef6\u6743\u9650\u3002 \u6211\u4eec\u901a\u5e38\u4f1a\u7528\u5230\u4ee5\u4e0b\u6807\u5fd7\uff1a os.O_RDONLY \uff1a\u53ea\u8bfb os.O_WRONLY \uff1a\u53ea\u5199 os.O_CREATE \uff1a\u521b\u5efa\uff1a\u5982\u679c\u6307\u5b9a\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5c31\u521b\u5efa\u8be5\u6587\u4ef6\u3002 os.O_TRUNC \uff1a\u622a\u65ad\uff1a\u5982\u679c\u6307\u5b9a\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u5c31\u5c06\u8be5\u6587\u4ef6\u7684\u957f\u5ea6\u622a\u4e3a 0 \u3002 \u5728\u8bfb\u6587\u4ef6\u7684\u65f6\u5019\uff0c\u6587\u4ef6\u7684\u6743\u9650\u662f\u88ab\u5ffd\u7565\u7684\uff0c\u6240\u4ee5\u5728\u4f7f\u7528 OpenFile() \u65f6\u4f20\u5165\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u53ef\u4ee5\u7528 0 \u3002\u800c\u5728\u5199\u6587\u4ef6\u65f6\uff0c\u4e0d\u7ba1\u662f Unix \u8fd8\u662f Windows\uff0c\u90fd\u9700\u8981\u4f7f\u7528 0666 \u3002 \u7136\u540e\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5199\u5165\u5668\uff08\u7f13\u51b2\u533a\uff09\u5bf9\u8c61\uff1a outputWriter := bufio . NewWriter ( outputFile ) \u63a5\u7740\uff0c\u4f7f\u7528\u4e00\u4e2a for \u5faa\u73af\uff0c\u5c06\u5b57\u7b26\u4e32\u5199\u5165\u7f13\u51b2\u533a\uff0c\u5199 10 \u6b21\uff1a outputWriter.WriteString(outputString) \u7f13\u51b2\u533a\u7684\u5185\u5bb9\u7d27\u63a5\u7740\u88ab\u5b8c\u5168\u5199\u5165\u6587\u4ef6\uff1a outputWriter.Flush() \u5982\u679c\u5199\u5165\u7684\u4e1c\u897f\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 fmt.Fprintf(outputFile, \"Some test data.\\n\") \u76f4\u63a5\u5c06\u5185\u5bb9\u5199\u5165\u6587\u4ef6\u3002 fmt \u5305\u91cc\u7684 F... \u5f00\u5934\u7684 Print() \u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u5199\u5165\u4efb\u4f55 io.Writer \uff0c\u5305\u62ec\u6587\u4ef6\uff08\u8bf7\u53c2\u8003 \u7ae0\u8282 12.8 )\u3002 \u7a0b\u5e8f filewrite.go \u5c55\u793a\u4e86\u4e0d\u4f7f\u7528 fmt.FPrintf() \u51fd\u6570\uff0c\u4f7f\u7528\u5176\u4ed6\u51fd\u6570\u5982\u4f55\u5199\u6587\u4ef6\uff1a \u793a\u4f8b 12.8 filewrite.go \uff1a package main import \"os\" func main () { os . Stdout . WriteString ( \"hello, world\\n\" ) f , _ := os . OpenFile ( \"test\" , os . O_CREATE | os . O_WRONLY , 0666 ) defer f . Close () f . WriteString ( \"hello, world in a file\\n\" ) } \u4f7f\u7528 os.Stdout.WriteString(\"hello, world\\n\") \uff0c\u6211\u4eec\u53ef\u4ee5\u8f93\u51fa\u5230\u5c4f\u5e55\u3002 \u6211\u4eec\u4ee5\u53ea\u5199\u6a21\u5f0f\u521b\u5efa\u6216\u6253\u5f00\u6587\u4ef6 \"test\" \uff0c\u5e76\u4e14\u5ffd\u7565\u4e86\u53ef\u80fd\u53d1\u751f\u7684\u9519\u8bef\uff1a f, _ := os.OpenFile(\"test\", os.O_CREATE|os.O_WRONLY, 0666) \u6211\u4eec\u4e0d\u4f7f\u7528\u7f13\u51b2\u533a\uff0c\u76f4\u63a5\u5c06\u5185\u5bb9\u5199\u5165\u6587\u4ef6\uff1a f.WriteString() \u7ec3\u4e60 12.4 \uff1a wiki_part1.go \uff08\u8fd9\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u7ec3\u4e60\uff0c\u4f46\u662f\u540c\u65f6\u4e5f\u662f\u4e3a \u7ae0\u8282 15.4 \u505a\u51c6\u5907\uff09 \u7a0b\u5e8f\u4e2d\u7684\u6570\u636e\u7ed3\u6784\u5982\u4e0b\uff0c\u662f\u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u7ed3\u6784: type Page struct { Title string Body [] byte } \u8bf7\u7ed9\u8fd9\u4e2a\u7ed3\u6784\u7f16\u5199\u4e00\u4e2a save() \u65b9\u6cd5\uff0c\u5c06 Title \u4f5c\u4e3a\u6587\u4ef6\u540d\u3001Body \u4f5c\u4e3a\u6587\u4ef6\u5185\u5bb9\uff0c\u5199\u5165\u5230\u6587\u672c\u6587\u4ef6\u4e2d\u3002 \u518d\u7f16\u5199\u4e00\u4e2a load() \u51fd\u6570\uff0c\u63a5\u6536\u7684\u53c2\u6570\u662f\u5b57\u7b26\u4e32 title \uff0c\u8be5\u51fd\u6570\u8bfb\u53d6\u51fa\u4e0e title \u5bf9\u5e94\u7684\u6587\u672c\u6587\u4ef6\u3002\u8bf7\u4f7f\u7528 *Page \u505a\u4e3a\u53c2\u6570\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u7ed3\u6784\u53ef\u80fd\u76f8\u5f53\u5de8\u5927\uff0c\u6211\u4eec\u4e0d\u60f3\u5728\u5185\u5b58\u4e2d\u62f7\u8d1d\u5b83\u3002\u8bf7\u4f7f\u7528 ioutil \u5305\u91cc\u7684\u51fd\u6570\uff08\u53c2\u8003 \u7ae0\u8282 12.2.1 \uff09\u3002","title":"12.2.3 \u5199\u6587\u4ef6"},{"location":"12.2/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u8bfb\u53d6\u7528\u6237\u7684\u8f93\u5165 \u4e0b\u4e00\u8282\uff1a \u6587\u4ef6\u62f7\u8d1d","title":"\u94fe\u63a5"},{"location":"12.3/","text":"12.3 \u6587\u4ef6\u62f7\u8d1d \u00b6 \u5982\u4f55\u62f7\u8d1d\u4e00\u4e2a\u6587\u4ef6\u5230\u53e6\u4e00\u4e2a\u6587\u4ef6\uff1f\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u5c31\u662f\u4f7f\u7528 io \u5305\uff1a \u793a\u4f8b 12.10 filecopy.go \uff1a // filecopy.go package main import ( \"fmt\" \"io\" \"os\" ) func main () { CopyFile ( \"target.txt\" , \"source.txt\" ) fmt . Println ( \"Copy done!\" ) } func CopyFile ( dstName , srcName string ) ( written int64 , err error ) { src , err := os . Open ( srcName ) if err != nil { return } defer src . Close () dst , err := os . Create ( dstName ) if err != nil { return } defer dst . Close () return io . Copy ( dst , src ) } \u6ce8\u610f defer \u7684\u4f7f\u7528\uff1a\u5f53\u6253\u5f00 dst \u6587\u4ef6\u65f6\u53d1\u751f\u4e86\u9519\u8bef\uff0c\u90a3\u4e48 defer \u4ecd\u7136\u80fd\u591f\u786e\u4fdd src.Close() \u6267\u884c\u3002\u5982\u679c\u4e0d\u8fd9\u4e48\u505a\uff0c src \u6587\u4ef6\u4f1a\u4e00\u76f4\u4fdd\u6301\u6253\u5f00\u72b6\u6001\u5e76\u5360\u7528\u8d44\u6e90\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6587\u4ef6\u8bfb\u5199 \u4e0b\u4e00\u8282\uff1a \u4ece\u547d\u4ee4\u884c\u8bfb\u53d6\u53c2\u6570","title":"12.3 \u6587\u4ef6\u62f7\u8d1d"},{"location":"12.3/#123","text":"\u5982\u4f55\u62f7\u8d1d\u4e00\u4e2a\u6587\u4ef6\u5230\u53e6\u4e00\u4e2a\u6587\u4ef6\uff1f\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u5c31\u662f\u4f7f\u7528 io \u5305\uff1a \u793a\u4f8b 12.10 filecopy.go \uff1a // filecopy.go package main import ( \"fmt\" \"io\" \"os\" ) func main () { CopyFile ( \"target.txt\" , \"source.txt\" ) fmt . Println ( \"Copy done!\" ) } func CopyFile ( dstName , srcName string ) ( written int64 , err error ) { src , err := os . Open ( srcName ) if err != nil { return } defer src . Close () dst , err := os . Create ( dstName ) if err != nil { return } defer dst . Close () return io . Copy ( dst , src ) } \u6ce8\u610f defer \u7684\u4f7f\u7528\uff1a\u5f53\u6253\u5f00 dst \u6587\u4ef6\u65f6\u53d1\u751f\u4e86\u9519\u8bef\uff0c\u90a3\u4e48 defer \u4ecd\u7136\u80fd\u591f\u786e\u4fdd src.Close() \u6267\u884c\u3002\u5982\u679c\u4e0d\u8fd9\u4e48\u505a\uff0c src \u6587\u4ef6\u4f1a\u4e00\u76f4\u4fdd\u6301\u6253\u5f00\u72b6\u6001\u5e76\u5360\u7528\u8d44\u6e90\u3002","title":"12.3 \u6587\u4ef6\u62f7\u8d1d"},{"location":"12.3/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6587\u4ef6\u8bfb\u5199 \u4e0b\u4e00\u8282\uff1a \u4ece\u547d\u4ee4\u884c\u8bfb\u53d6\u53c2\u6570","title":"\u94fe\u63a5"},{"location":"12.4/","text":"12.4 \u4ece\u547d\u4ee4\u884c\u8bfb\u53d6\u53c2\u6570 \u00b6 12.4.1 os \u5305 \u00b6 os \u5305\u4e2d\u6709\u4e00\u4e2a string \u7c7b\u578b\u7684\u5207\u7247\u53d8\u91cf os.Args \uff0c\u7528\u6765\u5904\u7406\u4e00\u4e9b\u57fa\u672c\u7684\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u5b83\u5728\u7a0b\u5e8f\u542f\u52a8\u540e\u8bfb\u53d6\u547d\u4ee4\u884c\u8f93\u5165\u7684\u53c2\u6570\u3002\u6765\u770b\u4e0b\u9762\u7684\u6253\u62db\u547c\u7a0b\u5e8f\uff1a \u793a\u4f8b 12.11 os_args.go \uff1a // os_args.go package main import ( \"fmt\" \"os\" \"strings\" ) func main () { who := \"Alice \" if len ( os . Args ) > 1 { who += strings . Join ( os . Args [ 1 :], \" \" ) } fmt . Println ( \"Good Morning\" , who ) } \u6211\u4eec\u5728 IDE \u6216\u7f16\u8f91\u5668\u4e2d\u76f4\u63a5\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u8f93\u51fa\uff1a Good Morning Alice \u6211\u4eec\u5728\u547d\u4ee4\u884c\u8fd0\u884c os_args \u6216 ./os_args \u4f1a\u5f97\u5230\u540c\u6837\u7684\u7ed3\u679c\u3002 \u4f46\u662f\u6211\u4eec\u5728\u547d\u4ee4\u884c\u52a0\u5165\u53c2\u6570\uff0c\u50cf\u8fd9\u6837\uff1a os_args John Bill Marc Luke \uff0c\u5c06\u5f97\u5230\u8fd9\u6837\u7684\u8f93\u51fa\uff1a Good Morning Alice John Bill Marc Luke \u8fd9\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\u4f1a\u653e\u7f6e\u5728\u5207\u7247 os.Args[] \u4e2d\uff08\u4ee5\u7a7a\u683c\u5206\u9694\uff09\uff0c\u4ece\u7d22\u5f15 1 \u5f00\u59cb\uff08 os.Args[0] \u653e\u7684\u662f\u7a0b\u5e8f\u672c\u8eab\u7684\u540d\u5b57\uff0c\u5728\u672c\u4f8b\u4e2d\u662f os_args \uff09\u3002\u51fd\u6570 strings.Join \u4ee5\u7a7a\u683c\u4e3a\u95f4\u9694\u8fde\u63a5\u8fd9\u4e9b\u53c2\u6570\u3002 \u7ec3\u4e60 12.5 \uff1a hello_who.go \u5199\u4e00\u4e2a\u201cHello World\u201d\u7684\u53d8\u79cd\u7a0b\u5e8f\uff1a\u628a\u4eba\u7684\u540d\u5b57\u4f5c\u4e3a\u7a0b\u5e8f\u547d\u4ee4\u884c\u6267\u884c\u7684\u4e00\u4e2a\u53c2\u6570\uff0c\u6bd4\u5982\uff1a hello_who Evan Michael Laura \u90a3\u4e48\u4f1a\u8f93\u51fa Hello Evan Michael Laura! 12.4.2 flag \u5305 \u00b6 flag \u5305\u6709\u4e00\u4e2a\u6269\u5c55\u529f\u80fd\u7528\u6765\u89e3\u6790\u547d\u4ee4\u884c\u9009\u9879\u3002\u4f46\u662f\u901a\u5e38\u88ab\u7528\u6765\u66ff\u6362\u57fa\u672c\u5e38\u91cf\uff0c\u4f8b\u5982\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u6211\u4eec\u5e0c\u671b\u5728\u547d\u4ee4\u884c\u7ed9\u5e38\u91cf\u4e00\u4e9b\u4e0d\u4e00\u6837\u7684\u503c\u3002\uff08\u53c2\u770b 19 \u7ae0 \u7684\u9879\u76ee\uff09 \u5728 flag \u5305\u4e2d\u6709\u4e00\u4e2a Flag \u662f\u88ab\u5b9a\u4e49\u6210\u4e00\u4e2a\u542b\u6709\u5982\u4e0b\u5b57\u6bb5\u7684\u7ed3\u6784\u4f53\uff1a type Flag struct { Name string // name as it appears on command line Usage string // help message Value Value // value as set DefValue string // default value (as text); for usage message } \u4e0b\u9762\u7684\u7a0b\u5e8f echo.go \u6a21\u62df\u4e86 Unix \u7684 echo \u529f\u80fd\uff1a package main import ( \"flag\" // command line option parser \"os\" ) var NewLine = flag . Bool ( \"n\" , false , \"print newline\" ) // echo -n flag, of type *bool const ( Space = \" \" Newline = \"\\n\" ) func main () { flag . PrintDefaults () flag . Parse () // Scans the arg list and sets up flags var s string = \"\" for i := 0 ; i < flag . NArg (); i ++ { if i > 0 { s += \" \" if * NewLine { // -n is parsed, flag becomes true s += Newline } } s += flag . Arg ( i ) } os . Stdout . WriteString ( s ) } flag.Parse() \u626b\u63cf\u53c2\u6570\u5217\u8868\uff08\u6216\u8005\u5e38\u91cf\u5217\u8868\uff09\u5e76\u8bbe\u7f6e flag, flag.Arg(i) \u8868\u793a\u7b2c i \u4e2a\u53c2\u6570\u3002 Parse() \u4e4b\u540e flag.Arg(i) \u5168\u90e8\u53ef\u7528\uff0c flag.Arg(0) \u5c31\u662f\u7b2c\u4e00\u4e2a\u771f\u5b9e\u7684 flag\uff0c\u800c\u4e0d\u662f\u50cf os.Args(0) \u653e\u7f6e\u7a0b\u5e8f\u7684\u540d\u5b57\u3002 flag.Narg() \u8fd4\u56de\u53c2\u6570\u7684\u6570\u91cf\u3002\u89e3\u6790\u540e flag \u6216\u5e38\u91cf\u5c31\u53ef\u7528\u4e86\u3002 flag.Bool() \u5b9a\u4e49\u4e86\u4e00\u4e2a\u9ed8\u8ba4\u503c\u662f false \u7684 flag\uff1a\u5f53\u5728\u547d\u4ee4\u884c\u51fa\u73b0\u4e86\u7b2c\u4e00\u4e2a\u53c2\u6570\uff08\u8fd9\u91cc\u662f 'n' \uff09\uff0cflag \u88ab\u8bbe\u7f6e\u6210 true \uff08 NewLine \u662f *bool \u7c7b\u578b\uff09\u3002flag \u88ab\u89e3\u5f15\u7528\u5230 *NewLine \uff0c\u6240\u4ee5\u5f53\u503c\u662f true \u65f6\u5c06\u6dfb\u52a0\u4e00\u4e2a Newline(\"\\n\") \u3002 flag.PrintDefaults() \u6253\u5370 flag \u7684\u4f7f\u7528\u5e2e\u52a9\u4fe1\u606f\uff0c\u672c\u4f8b\u4e2d\u6253\u5370\u7684\u662f\uff1a - n = false : print newline flag.VisitAll(fn func(*Flag)) \u662f\u53e6\u4e00\u4e2a\u6709\u7528\u7684\u529f\u80fd\uff1a\u6309\u7167\u5b57\u5178\u987a\u5e8f\u904d\u5386 flag\uff0c\u5e76\u4e14\u5bf9\u6bcf\u4e2a\u6807\u7b7e\u8c03\u7528 fn \uff08\u53c2\u8003 15.8 \u7ae0 \u7684\u4f8b\u5b50\uff09 \u5f53\u5728\u547d\u4ee4\u884c (Windows) \u4e2d\u6267\u884c\uff1a echo.exe A B C \uff0c\u5c06\u8f93\u51fa\uff1a A B C \uff1b\u6267\u884c echo.exe -n A B C \uff0c\u5c06\u8f93\u51fa\uff1a A B C \u6bcf\u4e2a\u5b57\u7b26\u7684\u8f93\u51fa\u90fd\u65b0\u8d77\u4e00\u884c\uff0c\u6bcf\u6b21\u90fd\u5728\u8f93\u51fa\u7684\u6570\u636e\u524d\u9762\u6253\u5370\u4f7f\u7528\u5e2e\u52a9\u4fe1\u606f\uff1a -n=false: print newline \u3002 \u5bf9\u4e8e flag.Bool \u4f60\u53ef\u4ee5\u8bbe\u7f6e\u5e03\u5c14\u578b flag \u6765\u6d4b\u8bd5\u4f60\u7684\u4ee3\u7801\uff0c\u4f8b\u5982\u5b9a\u4e49\u4e00\u4e2a flag processedFlag : var processedFlag = flag . Bool ( \"proc\" , false , \"nothing processed yet\" ) \u5728\u540e\u9762\u7528\u5982\u4e0b\u4ee3\u7801\u6765\u6d4b\u8bd5\uff1a if * processedFlag { // found flag -proc r = process () } \u8981\u7ed9 flag \u5b9a\u4e49\u5176\u5b83\u7c7b\u578b\uff0c\u53ef\u4ee5\u4f7f\u7528 flag.Int() \uff0c flag.Float64() \uff0c flag.String() \u3002 \u5728 \u7b2c 15.8 \u7ae0 \u4f60\u5c06\u627e\u5230\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6587\u4ef6\u62f7\u8d1d \u4e0b\u4e00\u8282\uff1a \u7528 buffer \u8bfb\u53d6\u6587\u4ef6","title":"12.4 \u4ece\u547d\u4ee4\u884c\u8bfb\u53d6\u53c2\u6570"},{"location":"12.4/#124","text":"","title":"12.4 \u4ece\u547d\u4ee4\u884c\u8bfb\u53d6\u53c2\u6570"},{"location":"12.4/#1241-os","text":"os \u5305\u4e2d\u6709\u4e00\u4e2a string \u7c7b\u578b\u7684\u5207\u7247\u53d8\u91cf os.Args \uff0c\u7528\u6765\u5904\u7406\u4e00\u4e9b\u57fa\u672c\u7684\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u5b83\u5728\u7a0b\u5e8f\u542f\u52a8\u540e\u8bfb\u53d6\u547d\u4ee4\u884c\u8f93\u5165\u7684\u53c2\u6570\u3002\u6765\u770b\u4e0b\u9762\u7684\u6253\u62db\u547c\u7a0b\u5e8f\uff1a \u793a\u4f8b 12.11 os_args.go \uff1a // os_args.go package main import ( \"fmt\" \"os\" \"strings\" ) func main () { who := \"Alice \" if len ( os . Args ) > 1 { who += strings . Join ( os . Args [ 1 :], \" \" ) } fmt . Println ( \"Good Morning\" , who ) } \u6211\u4eec\u5728 IDE \u6216\u7f16\u8f91\u5668\u4e2d\u76f4\u63a5\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u8f93\u51fa\uff1a Good Morning Alice \u6211\u4eec\u5728\u547d\u4ee4\u884c\u8fd0\u884c os_args \u6216 ./os_args \u4f1a\u5f97\u5230\u540c\u6837\u7684\u7ed3\u679c\u3002 \u4f46\u662f\u6211\u4eec\u5728\u547d\u4ee4\u884c\u52a0\u5165\u53c2\u6570\uff0c\u50cf\u8fd9\u6837\uff1a os_args John Bill Marc Luke \uff0c\u5c06\u5f97\u5230\u8fd9\u6837\u7684\u8f93\u51fa\uff1a Good Morning Alice John Bill Marc Luke \u8fd9\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\u4f1a\u653e\u7f6e\u5728\u5207\u7247 os.Args[] \u4e2d\uff08\u4ee5\u7a7a\u683c\u5206\u9694\uff09\uff0c\u4ece\u7d22\u5f15 1 \u5f00\u59cb\uff08 os.Args[0] \u653e\u7684\u662f\u7a0b\u5e8f\u672c\u8eab\u7684\u540d\u5b57\uff0c\u5728\u672c\u4f8b\u4e2d\u662f os_args \uff09\u3002\u51fd\u6570 strings.Join \u4ee5\u7a7a\u683c\u4e3a\u95f4\u9694\u8fde\u63a5\u8fd9\u4e9b\u53c2\u6570\u3002 \u7ec3\u4e60 12.5 \uff1a hello_who.go \u5199\u4e00\u4e2a\u201cHello World\u201d\u7684\u53d8\u79cd\u7a0b\u5e8f\uff1a\u628a\u4eba\u7684\u540d\u5b57\u4f5c\u4e3a\u7a0b\u5e8f\u547d\u4ee4\u884c\u6267\u884c\u7684\u4e00\u4e2a\u53c2\u6570\uff0c\u6bd4\u5982\uff1a hello_who Evan Michael Laura \u90a3\u4e48\u4f1a\u8f93\u51fa Hello Evan Michael Laura!","title":"12.4.1 os \u5305"},{"location":"12.4/#1242-flag","text":"flag \u5305\u6709\u4e00\u4e2a\u6269\u5c55\u529f\u80fd\u7528\u6765\u89e3\u6790\u547d\u4ee4\u884c\u9009\u9879\u3002\u4f46\u662f\u901a\u5e38\u88ab\u7528\u6765\u66ff\u6362\u57fa\u672c\u5e38\u91cf\uff0c\u4f8b\u5982\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u6211\u4eec\u5e0c\u671b\u5728\u547d\u4ee4\u884c\u7ed9\u5e38\u91cf\u4e00\u4e9b\u4e0d\u4e00\u6837\u7684\u503c\u3002\uff08\u53c2\u770b 19 \u7ae0 \u7684\u9879\u76ee\uff09 \u5728 flag \u5305\u4e2d\u6709\u4e00\u4e2a Flag \u662f\u88ab\u5b9a\u4e49\u6210\u4e00\u4e2a\u542b\u6709\u5982\u4e0b\u5b57\u6bb5\u7684\u7ed3\u6784\u4f53\uff1a type Flag struct { Name string // name as it appears on command line Usage string // help message Value Value // value as set DefValue string // default value (as text); for usage message } \u4e0b\u9762\u7684\u7a0b\u5e8f echo.go \u6a21\u62df\u4e86 Unix \u7684 echo \u529f\u80fd\uff1a package main import ( \"flag\" // command line option parser \"os\" ) var NewLine = flag . Bool ( \"n\" , false , \"print newline\" ) // echo -n flag, of type *bool const ( Space = \" \" Newline = \"\\n\" ) func main () { flag . PrintDefaults () flag . Parse () // Scans the arg list and sets up flags var s string = \"\" for i := 0 ; i < flag . NArg (); i ++ { if i > 0 { s += \" \" if * NewLine { // -n is parsed, flag becomes true s += Newline } } s += flag . Arg ( i ) } os . Stdout . WriteString ( s ) } flag.Parse() \u626b\u63cf\u53c2\u6570\u5217\u8868\uff08\u6216\u8005\u5e38\u91cf\u5217\u8868\uff09\u5e76\u8bbe\u7f6e flag, flag.Arg(i) \u8868\u793a\u7b2c i \u4e2a\u53c2\u6570\u3002 Parse() \u4e4b\u540e flag.Arg(i) \u5168\u90e8\u53ef\u7528\uff0c flag.Arg(0) \u5c31\u662f\u7b2c\u4e00\u4e2a\u771f\u5b9e\u7684 flag\uff0c\u800c\u4e0d\u662f\u50cf os.Args(0) \u653e\u7f6e\u7a0b\u5e8f\u7684\u540d\u5b57\u3002 flag.Narg() \u8fd4\u56de\u53c2\u6570\u7684\u6570\u91cf\u3002\u89e3\u6790\u540e flag \u6216\u5e38\u91cf\u5c31\u53ef\u7528\u4e86\u3002 flag.Bool() \u5b9a\u4e49\u4e86\u4e00\u4e2a\u9ed8\u8ba4\u503c\u662f false \u7684 flag\uff1a\u5f53\u5728\u547d\u4ee4\u884c\u51fa\u73b0\u4e86\u7b2c\u4e00\u4e2a\u53c2\u6570\uff08\u8fd9\u91cc\u662f 'n' \uff09\uff0cflag \u88ab\u8bbe\u7f6e\u6210 true \uff08 NewLine \u662f *bool \u7c7b\u578b\uff09\u3002flag \u88ab\u89e3\u5f15\u7528\u5230 *NewLine \uff0c\u6240\u4ee5\u5f53\u503c\u662f true \u65f6\u5c06\u6dfb\u52a0\u4e00\u4e2a Newline(\"\\n\") \u3002 flag.PrintDefaults() \u6253\u5370 flag \u7684\u4f7f\u7528\u5e2e\u52a9\u4fe1\u606f\uff0c\u672c\u4f8b\u4e2d\u6253\u5370\u7684\u662f\uff1a - n = false : print newline flag.VisitAll(fn func(*Flag)) \u662f\u53e6\u4e00\u4e2a\u6709\u7528\u7684\u529f\u80fd\uff1a\u6309\u7167\u5b57\u5178\u987a\u5e8f\u904d\u5386 flag\uff0c\u5e76\u4e14\u5bf9\u6bcf\u4e2a\u6807\u7b7e\u8c03\u7528 fn \uff08\u53c2\u8003 15.8 \u7ae0 \u7684\u4f8b\u5b50\uff09 \u5f53\u5728\u547d\u4ee4\u884c (Windows) \u4e2d\u6267\u884c\uff1a echo.exe A B C \uff0c\u5c06\u8f93\u51fa\uff1a A B C \uff1b\u6267\u884c echo.exe -n A B C \uff0c\u5c06\u8f93\u51fa\uff1a A B C \u6bcf\u4e2a\u5b57\u7b26\u7684\u8f93\u51fa\u90fd\u65b0\u8d77\u4e00\u884c\uff0c\u6bcf\u6b21\u90fd\u5728\u8f93\u51fa\u7684\u6570\u636e\u524d\u9762\u6253\u5370\u4f7f\u7528\u5e2e\u52a9\u4fe1\u606f\uff1a -n=false: print newline \u3002 \u5bf9\u4e8e flag.Bool \u4f60\u53ef\u4ee5\u8bbe\u7f6e\u5e03\u5c14\u578b flag \u6765\u6d4b\u8bd5\u4f60\u7684\u4ee3\u7801\uff0c\u4f8b\u5982\u5b9a\u4e49\u4e00\u4e2a flag processedFlag : var processedFlag = flag . Bool ( \"proc\" , false , \"nothing processed yet\" ) \u5728\u540e\u9762\u7528\u5982\u4e0b\u4ee3\u7801\u6765\u6d4b\u8bd5\uff1a if * processedFlag { // found flag -proc r = process () } \u8981\u7ed9 flag \u5b9a\u4e49\u5176\u5b83\u7c7b\u578b\uff0c\u53ef\u4ee5\u4f7f\u7528 flag.Int() \uff0c flag.Float64() \uff0c flag.String() \u3002 \u5728 \u7b2c 15.8 \u7ae0 \u4f60\u5c06\u627e\u5230\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u3002","title":"12.4.2 flag \u5305"},{"location":"12.4/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6587\u4ef6\u62f7\u8d1d \u4e0b\u4e00\u8282\uff1a \u7528 buffer \u8bfb\u53d6\u6587\u4ef6","title":"\u94fe\u63a5"},{"location":"12.5/","text":"12.5 \u7528 buffer \u8bfb\u53d6\u6587\u4ef6 \u00b6 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u7ed3\u5408\u4f7f\u7528\u4e86\u7f13\u51b2\u8bfb\u53d6\u6587\u4ef6\u548c\u547d\u4ee4\u884c flag \u89e3\u6790\u8fd9\u4e24\u9879\u6280\u672f\u3002\u5982\u679c\u4e0d\u52a0\u53c2\u6570\uff0c\u90a3\u4e48\u4f60\u8f93\u5165\u4ec0\u4e48\u5c4f\u5e55\u5c31\u6253\u5370\u4ec0\u4e48\u3002 \u53c2\u6570\u88ab\u8ba4\u4e3a\u662f\u6587\u4ef6\u540d\uff0c\u5982\u679c\u6587\u4ef6\u5b58\u5728\u7684\u8bdd\u5c31\u6253\u5370\u6587\u4ef6\u5185\u5bb9\u5230\u5c4f\u5e55\u3002\u547d\u4ee4\u884c\u6267\u884c cat test \u6d4b\u8bd5\u8f93\u51fa\u3002 \u793a\u4f8b 12.11 cat.go \uff1a package main import ( \"bufio\" \"flag\" \"fmt\" \"io\" \"os\" ) func cat ( r * bufio . Reader ) { for { buf , err := r . ReadBytes ( '\\n' ) fmt . Fprintf ( os . Stdout , \"%s\" , buf ) if err == io . EOF { break } } return } func main () { flag . Parse () if flag . NArg () == 0 { cat ( bufio . NewReader ( os . Stdin )) } for i := 0 ; i < flag . NArg (); i ++ { f , err := os . Open ( flag . Arg ( i )) if err != nil { fmt . Fprintf ( os . Stderr , \"%s:error reading from %s: %s\\n\" , os . Args [ 0 ], flag . Arg ( i ), err . Error ()) continue } cat ( bufio . NewReader ( f )) f . Close () } } \u5728 12.6 \u7ae0\u8282 \uff0c\u6211\u4eec\u5c06\u770b\u5230\u5982\u4f55\u4f7f\u7528\u7f13\u51b2\u5199\u5165\u3002 \u7ec3\u4e60 12.6 \uff1a cat_numbered.go \u6269\u5c55 cat.go \u4f8b\u5b50\uff0c\u4f7f\u7528 flag \u6dfb\u52a0\u4e00\u4e2a\u9009\u9879\uff0c\u76ee\u7684\u662f\u4e3a\u6bcf\u4e00\u884c\u5934\u90e8\u52a0\u5165\u4e00\u4e2a\u884c\u53f7\u3002\u4f7f\u7528 cat -n test \u6d4b\u8bd5\u8f93\u51fa\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4ece\u547d\u4ee4\u884c\u8bfb\u53d6\u53c2\u6570 \u4e0b\u4e00\u8282\uff1a \u7528\u5207\u7247\u8bfb\u5199\u6587\u4ef6","title":"12.5 \u7528 buffer \u8bfb\u53d6\u6587\u4ef6"},{"location":"12.5/#125-buffer","text":"\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u7ed3\u5408\u4f7f\u7528\u4e86\u7f13\u51b2\u8bfb\u53d6\u6587\u4ef6\u548c\u547d\u4ee4\u884c flag \u89e3\u6790\u8fd9\u4e24\u9879\u6280\u672f\u3002\u5982\u679c\u4e0d\u52a0\u53c2\u6570\uff0c\u90a3\u4e48\u4f60\u8f93\u5165\u4ec0\u4e48\u5c4f\u5e55\u5c31\u6253\u5370\u4ec0\u4e48\u3002 \u53c2\u6570\u88ab\u8ba4\u4e3a\u662f\u6587\u4ef6\u540d\uff0c\u5982\u679c\u6587\u4ef6\u5b58\u5728\u7684\u8bdd\u5c31\u6253\u5370\u6587\u4ef6\u5185\u5bb9\u5230\u5c4f\u5e55\u3002\u547d\u4ee4\u884c\u6267\u884c cat test \u6d4b\u8bd5\u8f93\u51fa\u3002 \u793a\u4f8b 12.11 cat.go \uff1a package main import ( \"bufio\" \"flag\" \"fmt\" \"io\" \"os\" ) func cat ( r * bufio . Reader ) { for { buf , err := r . ReadBytes ( '\\n' ) fmt . Fprintf ( os . Stdout , \"%s\" , buf ) if err == io . EOF { break } } return } func main () { flag . Parse () if flag . NArg () == 0 { cat ( bufio . NewReader ( os . Stdin )) } for i := 0 ; i < flag . NArg (); i ++ { f , err := os . Open ( flag . Arg ( i )) if err != nil { fmt . Fprintf ( os . Stderr , \"%s:error reading from %s: %s\\n\" , os . Args [ 0 ], flag . Arg ( i ), err . Error ()) continue } cat ( bufio . NewReader ( f )) f . Close () } } \u5728 12.6 \u7ae0\u8282 \uff0c\u6211\u4eec\u5c06\u770b\u5230\u5982\u4f55\u4f7f\u7528\u7f13\u51b2\u5199\u5165\u3002 \u7ec3\u4e60 12.6 \uff1a cat_numbered.go \u6269\u5c55 cat.go \u4f8b\u5b50\uff0c\u4f7f\u7528 flag \u6dfb\u52a0\u4e00\u4e2a\u9009\u9879\uff0c\u76ee\u7684\u662f\u4e3a\u6bcf\u4e00\u884c\u5934\u90e8\u52a0\u5165\u4e00\u4e2a\u884c\u53f7\u3002\u4f7f\u7528 cat -n test \u6d4b\u8bd5\u8f93\u51fa\u3002","title":"12.5 \u7528 buffer \u8bfb\u53d6\u6587\u4ef6"},{"location":"12.5/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4ece\u547d\u4ee4\u884c\u8bfb\u53d6\u53c2\u6570 \u4e0b\u4e00\u8282\uff1a \u7528\u5207\u7247\u8bfb\u5199\u6587\u4ef6","title":"\u94fe\u63a5"},{"location":"12.6/","text":"12.6 \u7528\u5207\u7247\u8bfb\u5199\u6587\u4ef6 \u00b6 \u5207\u7247\u63d0\u4f9b\u4e86 Go \u4e2d\u5904\u7406 I/O \u7f13\u51b2\u7684\u6807\u51c6\u65b9\u5f0f\uff0c\u4e0b\u9762 cat \u51fd\u6570\u7684\u7b2c\u4e8c\u7248\u4e2d\uff0c\u5728\u4e00\u4e2a\u5207\u7247\u7f13\u51b2\u5185\u4f7f\u7528\u65e0\u9650 for \u5faa\u73af\uff08\u76f4\u5230\u6587\u4ef6\u5c3e\u90e8 EOF \uff09\u8bfb\u53d6\u6587\u4ef6\uff0c\u5e76\u5199\u5165\u5230\u6807\u51c6\u8f93\u51fa\uff08 os.Stdout \uff09\u3002 func cat ( f * os . File ) { const NBUF = 512 var buf [ NBUF ] byte for { switch nr , err := f . Read ( buf [:]); { case nr < 0 : fmt . Fprintf ( os . Stderr , \"cat: error reading: %s\\n\" , err . Error ()) os . Exit ( 1 ) case nr == 0 : // EOF return case nr > 0 : if nw , ew := os . Stdout . Write ( buf [ 0 : nr ]); nw != nr { fmt . Fprintf ( os . Stderr , \"cat: error writing: %s\\n\" , ew . Error ()) } } } } \u4e0a\u9762\u7684\u4ee3\u7801\u6765\u81ea\u4e8e cat2.go \uff0c\u4f7f\u7528\u4e86 os \u5305\u4e2d\u7684 os.File \u548c Read \u65b9\u6cd5\uff1b cat2.go \u4e0e cat.go \u5177\u6709\u540c\u6837\u7684\u529f\u80fd\u3002 \u793a\u4f8b 12.14 cat2.go \uff1a package main import ( \"flag\" \"fmt\" \"os\" ) func cat ( f * os . File ) { const NBUF = 512 var buf [ NBUF ] byte for { switch nr , err := f . Read ( buf [:]); true { case nr < 0 : fmt . Fprintf ( os . Stderr , \"cat: error reading: %s\\n\" , err . Error ()) os . Exit ( 1 ) case nr == 0 : // EOF return case nr > 0 : if nw , ew := os . Stdout . Write ( buf [ 0 : nr ]); nw != nr { fmt . Fprintf ( os . Stderr , \"cat: error writing: %s\\n\" , ew . Error ()) } } } } func main () { flag . Parse () // Scans the arg list and sets up flags if flag . NArg () == 0 { cat ( os . Stdin ) } for i := 0 ; i < flag . NArg (); i ++ { f , err := os . Open ( flag . Arg ( i )) if f == nil { fmt . Fprintf ( os . Stderr , \"cat: can't open %s: error %s\\n\" , flag . Arg ( i ), err ) os . Exit ( 1 ) } cat ( f ) f . Close () } } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7528 buffer \u8bfb\u53d6\u6587\u4ef6 \u4e0b\u4e00\u8282\uff1a \u7528 defer \u5173\u95ed\u6587\u4ef6","title":"12.6 \u7528\u5207\u7247\u8bfb\u5199\u6587\u4ef6"},{"location":"12.6/#126","text":"\u5207\u7247\u63d0\u4f9b\u4e86 Go \u4e2d\u5904\u7406 I/O \u7f13\u51b2\u7684\u6807\u51c6\u65b9\u5f0f\uff0c\u4e0b\u9762 cat \u51fd\u6570\u7684\u7b2c\u4e8c\u7248\u4e2d\uff0c\u5728\u4e00\u4e2a\u5207\u7247\u7f13\u51b2\u5185\u4f7f\u7528\u65e0\u9650 for \u5faa\u73af\uff08\u76f4\u5230\u6587\u4ef6\u5c3e\u90e8 EOF \uff09\u8bfb\u53d6\u6587\u4ef6\uff0c\u5e76\u5199\u5165\u5230\u6807\u51c6\u8f93\u51fa\uff08 os.Stdout \uff09\u3002 func cat ( f * os . File ) { const NBUF = 512 var buf [ NBUF ] byte for { switch nr , err := f . Read ( buf [:]); { case nr < 0 : fmt . Fprintf ( os . Stderr , \"cat: error reading: %s\\n\" , err . Error ()) os . Exit ( 1 ) case nr == 0 : // EOF return case nr > 0 : if nw , ew := os . Stdout . Write ( buf [ 0 : nr ]); nw != nr { fmt . Fprintf ( os . Stderr , \"cat: error writing: %s\\n\" , ew . Error ()) } } } } \u4e0a\u9762\u7684\u4ee3\u7801\u6765\u81ea\u4e8e cat2.go \uff0c\u4f7f\u7528\u4e86 os \u5305\u4e2d\u7684 os.File \u548c Read \u65b9\u6cd5\uff1b cat2.go \u4e0e cat.go \u5177\u6709\u540c\u6837\u7684\u529f\u80fd\u3002 \u793a\u4f8b 12.14 cat2.go \uff1a package main import ( \"flag\" \"fmt\" \"os\" ) func cat ( f * os . File ) { const NBUF = 512 var buf [ NBUF ] byte for { switch nr , err := f . Read ( buf [:]); true { case nr < 0 : fmt . Fprintf ( os . Stderr , \"cat: error reading: %s\\n\" , err . Error ()) os . Exit ( 1 ) case nr == 0 : // EOF return case nr > 0 : if nw , ew := os . Stdout . Write ( buf [ 0 : nr ]); nw != nr { fmt . Fprintf ( os . Stderr , \"cat: error writing: %s\\n\" , ew . Error ()) } } } } func main () { flag . Parse () // Scans the arg list and sets up flags if flag . NArg () == 0 { cat ( os . Stdin ) } for i := 0 ; i < flag . NArg (); i ++ { f , err := os . Open ( flag . Arg ( i )) if f == nil { fmt . Fprintf ( os . Stderr , \"cat: can't open %s: error %s\\n\" , flag . Arg ( i ), err ) os . Exit ( 1 ) } cat ( f ) f . Close () } }","title":"12.6 \u7528\u5207\u7247\u8bfb\u5199\u6587\u4ef6"},{"location":"12.6/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7528 buffer \u8bfb\u53d6\u6587\u4ef6 \u4e0b\u4e00\u8282\uff1a \u7528 defer \u5173\u95ed\u6587\u4ef6","title":"\u94fe\u63a5"},{"location":"12.7/","text":"12.7 \u7528 defer \u5173\u95ed\u6587\u4ef6 \u00b6 defer \u5173\u952e\u5b57\uff08\u53c2\u770b 6.4 \uff09\u5bf9\u4e8e\u5728\u51fd\u6570\u7ed3\u675f\u65f6\u5173\u95ed\u6253\u5f00\u7684\u6587\u4ef6\u975e\u5e38\u6709\u7528\uff0c\u4f8b\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\uff1a func data ( name string ) string { f , _ := os . OpenFile ( name , os . O_RDONLY , 0 ) defer f . Close () // idiomatic Go code! contents , _ := ioutil . ReadAll ( f ) return string ( contents ) } \u5728\u51fd\u6570 return \u540e\u6267\u884c\u4e86 f.Close() \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7528\u5207\u7247\u8bfb\u5199\u6587\u4ef6 \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528\u63a5\u53e3\u7684\u5b9e\u9645\u4f8b\u5b50\uff1afmt.Fprintf","title":"12.7 \u7528 defer \u5173\u95ed\u6587\u4ef6"},{"location":"12.7/#127-defer","text":"defer \u5173\u952e\u5b57\uff08\u53c2\u770b 6.4 \uff09\u5bf9\u4e8e\u5728\u51fd\u6570\u7ed3\u675f\u65f6\u5173\u95ed\u6253\u5f00\u7684\u6587\u4ef6\u975e\u5e38\u6709\u7528\uff0c\u4f8b\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\uff1a func data ( name string ) string { f , _ := os . OpenFile ( name , os . O_RDONLY , 0 ) defer f . Close () // idiomatic Go code! contents , _ := ioutil . ReadAll ( f ) return string ( contents ) } \u5728\u51fd\u6570 return \u540e\u6267\u884c\u4e86 f.Close()","title":"12.7 \u7528 defer \u5173\u95ed\u6587\u4ef6"},{"location":"12.7/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7528\u5207\u7247\u8bfb\u5199\u6587\u4ef6 \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528\u63a5\u53e3\u7684\u5b9e\u9645\u4f8b\u5b50\uff1afmt.Fprintf","title":"\u94fe\u63a5"},{"location":"12.8/","text":"12.8 \u4f7f\u7528\u63a5\u53e3\u7684\u5b9e\u9645\u4f8b\u5b50\uff1afmt.Fprintf \u00b6 \u4f8b\u5b50\u7a0b\u5e8f io_interfaces.go \u5f88\u597d\u7684\u9610\u8ff0\u4e86 io \u5305\u4e2d\u7684\u63a5\u53e3\u6982\u5ff5\u3002 \u793a\u4f8b 12.15 io_interfaces.go \uff1a // interfaces being used in the GO-package fmt package main import ( \"bufio\" \"fmt\" \"os\" ) func main () { // unbuffered fmt . Fprintf ( os . Stdout , \"%s\\n\" , \"hello world! - unbuffered\" ) // buffered: os.Stdout implements io.Writer buf := bufio . NewWriter ( os . Stdout ) // and now so does buf. fmt . Fprintf ( buf , \"%s\\n\" , \"hello world! - buffered\" ) buf . Flush () } \u8f93\u51fa\uff1a hello world! - unbuffered hello world! - buffered \u4e0b\u9762\u662f fmt.Fprintf() \u51fd\u6570\u7684\u5b9e\u9645\u7b7e\u540d func Fprintf ( w io . Writer , format string , a ... interface {}) ( n int , err error ) \u4e0d\u662f\u5199\u5165\u4e00\u4e2a\u6587\u4ef6\uff0c\u800c\u662f\u5199\u5165\u4e00\u4e2a io.Writer \u63a5\u53e3\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u4e0b\u9762\u662f Writer \u63a5\u53e3\u5728 io \u5305\u4e2d\u7684\u5b9a\u4e49\uff1a type Writer interface { Write ( p [] byte ) ( n int , err error ) } fmt.Fprintf() \u4f9d\u636e\u6307\u5b9a\u7684\u683c\u5f0f\u5411\u7b2c\u4e00\u4e2a\u53c2\u6570\u5185\u5199\u5165\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u5b9e\u73b0\u4e86 io.Writer \u63a5\u53e3\u3002 Fprintf() \u80fd\u591f\u5199\u5165\u4efb\u4f55\u7c7b\u578b\uff0c\u53ea\u8981\u5176\u5b9e\u73b0\u4e86 Write \u65b9\u6cd5\uff0c\u5305\u62ec os.Stdout \uff0c\u6587\u4ef6\uff08\u4f8b\u5982 os.File \uff09\uff0c\u7ba1\u9053\uff0c\u7f51\u7edc\u8fde\u63a5\uff0c\u901a\u9053\u7b49\u7b49\u3002\u540c\u6837\u5730\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 bufio \u5305\u4e2d\u7f13\u51b2\u5199\u5165\u3002 bufio \u5305\u4e2d\u5b9a\u4e49\u4e86 type Writer struct{...} \u3002 bufio.Writer \u5b9e\u73b0\u4e86 Write() \u65b9\u6cd5\uff1a func ( b * Writer ) Write ( p [] byte ) ( nn int , err error ) \u5b83\u8fd8\u6709\u4e00\u4e2a\u5de5\u5382\u51fd\u6570\uff1a\u4f20\u7ed9\u5b83\u4e00\u4e2a io.Writer \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5e26\u7f13\u51b2\u7684 bufio.Writer \u7c7b\u578b\u7684 io.Writer \uff1a func NewWriter ( wr io . Writer ) ( b * Writer ) \u9002\u5408\u4efb\u4f55\u5f62\u5f0f\u7684\u7f13\u51b2\u5199\u5165\u3002 \u5728\u7f13\u51b2\u5199\u5165\u7684\u6700\u540e\u5343\u4e07\u4e0d\u8981\u5fd8\u4e86\u4f7f\u7528 Flush() \uff0c\u5426\u5219\u6700\u540e\u7684\u8f93\u51fa\u4e0d\u4f1a\u88ab\u5199\u5165\u3002 \u5728 15.2 - 15.8 \u7ae0\u8282\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 fmt.Fprint() \u51fd\u6570\u5411 http.ResponseWriter \u5199\u5165\uff0c\u5176\u540c\u6837\u5b9e\u73b0\u4e86 io.Writer \u63a5\u53e3\u3002 \u7ec3\u4e60 12.7 \uff1a remove_3till5char.go \u4e0b\u9762\u7684\u4ee3\u7801\u6709\u4e00\u4e2a\u8f93\u5165\u6587\u4ef6 goprogram \uff0c\u7136\u540e\u4ee5\u6bcf\u4e00\u884c\u4e3a\u5355\u4f4d\u8bfb\u53d6\uff0c\u4ece\u8bfb\u53d6\u7684\u5f53\u524d\u884c\u4e2d\u622a\u53d6\u7b2c 3 \u5230\u7b2c 5 \u7684\u5b57\u8282\u5199\u5165\u53e6\u4e00\u4e2a\u6587\u4ef6\u3002\u7136\u800c\u5f53\u4f60\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u8f93\u51fa\u7684\u6587\u4ef6\u5374\u662f\u4e2a\u7a7a\u6587\u4ef6\u3002\u627e\u51fa\u7a0b\u5e8f\u903b\u8f91\u4e2d\u7684 bug\uff0c\u4fee\u6b63\u5b83\u5e76\u6d4b\u8bd5\u3002 package main import ( \"bufio\" \"fmt\" \"os\" \"io\" ) func main () { inputFile , _ := os . Open ( \"goprogram\" ) outputFile , _ := os . OpenFile ( \"goprogramT\" , os . O_WRONLY | os . O_CREATE , 0666 ) defer inputFile . Close () defer outputFile . Close () inputReader := bufio . NewReader ( inputFile ) outputWriter := bufio . NewWriter ( outputFile ) for { inputString , _ , readerError := inputReader . ReadLine () if readerError == io . EOF { fmt . Println ( \"EOF\" ) return } outputString := string ( inputString [ 2 : 5 ]) + \"\\r\\n\" _ , err := outputWriter . WriteString ( outputString ) if err != nil { fmt . Println ( err ) return } } fmt . Println ( \"Conversion done\" ) } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7528 defer \u5173\u95ed\u6587\u4ef6 \u4e0b\u4e00\u8282\uff1a \u683c\u5f0f\u5316 JSON \u6570\u636e","title":"12.8 \u4f7f\u7528\u63a5\u53e3\u7684\u5b9e\u9645\u4f8b\u5b50 fmt.Fprintf"},{"location":"12.8/#128-fmtfprintf","text":"\u4f8b\u5b50\u7a0b\u5e8f io_interfaces.go \u5f88\u597d\u7684\u9610\u8ff0\u4e86 io \u5305\u4e2d\u7684\u63a5\u53e3\u6982\u5ff5\u3002 \u793a\u4f8b 12.15 io_interfaces.go \uff1a // interfaces being used in the GO-package fmt package main import ( \"bufio\" \"fmt\" \"os\" ) func main () { // unbuffered fmt . Fprintf ( os . Stdout , \"%s\\n\" , \"hello world! - unbuffered\" ) // buffered: os.Stdout implements io.Writer buf := bufio . NewWriter ( os . Stdout ) // and now so does buf. fmt . Fprintf ( buf , \"%s\\n\" , \"hello world! - buffered\" ) buf . Flush () } \u8f93\u51fa\uff1a hello world! - unbuffered hello world! - buffered \u4e0b\u9762\u662f fmt.Fprintf() \u51fd\u6570\u7684\u5b9e\u9645\u7b7e\u540d func Fprintf ( w io . Writer , format string , a ... interface {}) ( n int , err error ) \u4e0d\u662f\u5199\u5165\u4e00\u4e2a\u6587\u4ef6\uff0c\u800c\u662f\u5199\u5165\u4e00\u4e2a io.Writer \u63a5\u53e3\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u4e0b\u9762\u662f Writer \u63a5\u53e3\u5728 io \u5305\u4e2d\u7684\u5b9a\u4e49\uff1a type Writer interface { Write ( p [] byte ) ( n int , err error ) } fmt.Fprintf() \u4f9d\u636e\u6307\u5b9a\u7684\u683c\u5f0f\u5411\u7b2c\u4e00\u4e2a\u53c2\u6570\u5185\u5199\u5165\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u5b9e\u73b0\u4e86 io.Writer \u63a5\u53e3\u3002 Fprintf() \u80fd\u591f\u5199\u5165\u4efb\u4f55\u7c7b\u578b\uff0c\u53ea\u8981\u5176\u5b9e\u73b0\u4e86 Write \u65b9\u6cd5\uff0c\u5305\u62ec os.Stdout \uff0c\u6587\u4ef6\uff08\u4f8b\u5982 os.File \uff09\uff0c\u7ba1\u9053\uff0c\u7f51\u7edc\u8fde\u63a5\uff0c\u901a\u9053\u7b49\u7b49\u3002\u540c\u6837\u5730\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 bufio \u5305\u4e2d\u7f13\u51b2\u5199\u5165\u3002 bufio \u5305\u4e2d\u5b9a\u4e49\u4e86 type Writer struct{...} \u3002 bufio.Writer \u5b9e\u73b0\u4e86 Write() \u65b9\u6cd5\uff1a func ( b * Writer ) Write ( p [] byte ) ( nn int , err error ) \u5b83\u8fd8\u6709\u4e00\u4e2a\u5de5\u5382\u51fd\u6570\uff1a\u4f20\u7ed9\u5b83\u4e00\u4e2a io.Writer \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5e26\u7f13\u51b2\u7684 bufio.Writer \u7c7b\u578b\u7684 io.Writer \uff1a func NewWriter ( wr io . Writer ) ( b * Writer ) \u9002\u5408\u4efb\u4f55\u5f62\u5f0f\u7684\u7f13\u51b2\u5199\u5165\u3002 \u5728\u7f13\u51b2\u5199\u5165\u7684\u6700\u540e\u5343\u4e07\u4e0d\u8981\u5fd8\u4e86\u4f7f\u7528 Flush() \uff0c\u5426\u5219\u6700\u540e\u7684\u8f93\u51fa\u4e0d\u4f1a\u88ab\u5199\u5165\u3002 \u5728 15.2 - 15.8 \u7ae0\u8282\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 fmt.Fprint() \u51fd\u6570\u5411 http.ResponseWriter \u5199\u5165\uff0c\u5176\u540c\u6837\u5b9e\u73b0\u4e86 io.Writer \u63a5\u53e3\u3002 \u7ec3\u4e60 12.7 \uff1a remove_3till5char.go \u4e0b\u9762\u7684\u4ee3\u7801\u6709\u4e00\u4e2a\u8f93\u5165\u6587\u4ef6 goprogram \uff0c\u7136\u540e\u4ee5\u6bcf\u4e00\u884c\u4e3a\u5355\u4f4d\u8bfb\u53d6\uff0c\u4ece\u8bfb\u53d6\u7684\u5f53\u524d\u884c\u4e2d\u622a\u53d6\u7b2c 3 \u5230\u7b2c 5 \u7684\u5b57\u8282\u5199\u5165\u53e6\u4e00\u4e2a\u6587\u4ef6\u3002\u7136\u800c\u5f53\u4f60\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u8f93\u51fa\u7684\u6587\u4ef6\u5374\u662f\u4e2a\u7a7a\u6587\u4ef6\u3002\u627e\u51fa\u7a0b\u5e8f\u903b\u8f91\u4e2d\u7684 bug\uff0c\u4fee\u6b63\u5b83\u5e76\u6d4b\u8bd5\u3002 package main import ( \"bufio\" \"fmt\" \"os\" \"io\" ) func main () { inputFile , _ := os . Open ( \"goprogram\" ) outputFile , _ := os . OpenFile ( \"goprogramT\" , os . O_WRONLY | os . O_CREATE , 0666 ) defer inputFile . Close () defer outputFile . Close () inputReader := bufio . NewReader ( inputFile ) outputWriter := bufio . NewWriter ( outputFile ) for { inputString , _ , readerError := inputReader . ReadLine () if readerError == io . EOF { fmt . Println ( \"EOF\" ) return } outputString := string ( inputString [ 2 : 5 ]) + \"\\r\\n\" _ , err := outputWriter . WriteString ( outputString ) if err != nil { fmt . Println ( err ) return } } fmt . Println ( \"Conversion done\" ) }","title":"12.8 \u4f7f\u7528\u63a5\u53e3\u7684\u5b9e\u9645\u4f8b\u5b50\uff1afmt.Fprintf"},{"location":"12.8/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7528 defer \u5173\u95ed\u6587\u4ef6 \u4e0b\u4e00\u8282\uff1a \u683c\u5f0f\u5316 JSON \u6570\u636e","title":"\u94fe\u63a5"},{"location":"12.9/","text":"12.9 JSON \u6570\u636e\u683c\u5f0f \u00b6 \u6570\u636e\u7ed3\u6784\u8981\u5728\u7f51\u7edc\u4e2d\u4f20\u8f93\u6216\u4fdd\u5b58\u5230\u6587\u4ef6\uff0c\u5c31\u5fc5\u987b\u5bf9\u5176\u7f16\u7801\u548c\u89e3\u7801\uff1b\u76ee\u524d\u5b58\u5728\u5f88\u591a\u7f16\u7801\u683c\u5f0f\uff1aJSON\uff0cXML\uff0cgob\uff0cGoogle \u7f13\u51b2\u534f\u8bae\u7b49\u7b49\u3002Go \u8bed\u8a00\u652f\u6301\u6240\u6709\u8fd9\u4e9b\u7f16\u7801\u683c\u5f0f\uff1b\u5728\u540e\u9762\u7684\u7ae0\u8282\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u524d\u4e09\u79cd\u683c\u5f0f\u3002 \u7ed3\u6784\u53ef\u80fd\u5305\u542b\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u5982\u679c\u5c06\u5176\u4f5c\u4e3a\u6587\u672c\u6253\u5370\uff0c\u90a3\u4e48\u53ef\u8bfb\u6027\u662f\u5f88\u5dee\u7684\u3002\u53e6\u5916\u7ed3\u6784\u5185\u90e8\u53ef\u80fd\u5305\u542b\u533f\u540d\u5b57\u6bb5\uff0c\u800c\u4e0d\u6e05\u695a\u6570\u636e\u7684\u7528\u610f\u3002 \u901a\u8fc7\u628a\u6570\u636e\u8f6c\u6362\u6210\u7eaf\u6587\u672c\uff0c\u4f7f\u7528\u547d\u540d\u7684\u5b57\u6bb5\u6765\u6807\u6ce8\uff0c\u8ba9\u5176\u5177\u6709\u53ef\u8bfb\u6027\u3002\u8fd9\u6837\u7684\u6570\u636e\u683c\u5f0f\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\uff0c\u800c\u4e14\u662f\u4e0e\u5e73\u53f0\u65e0\u5173\u7684\uff0c\u4efb\u4f55\u7c7b\u578b\u7684\u5e94\u7528\u90fd\u80fd\u591f\u8bfb\u53d6\u548c\u8f93\u51fa\uff0c\u4e0d\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u548c\u7f16\u7a0b\u8bed\u8a00\u7684\u7c7b\u578b\u76f8\u5173\u3002 \u4e0b\u9762\u662f\u4e00\u4e9b\u672f\u8bed\u8bf4\u660e\uff1a \u6570\u636e\u7ed3\u6784 \u2192 \u6307\u5b9a\u683c\u5f0f = \u5e8f\u5217\u5316 \u6216 \u7f16\u7801 \uff08\u4f20\u8f93\u4e4b\u524d\uff09 \u6307\u5b9a\u683c\u5f0f \u2192 \u6570\u636e\u7ed3\u6784 = \u53cd\u5e8f\u5217\u5316 \u6216 \u89e3\u7801 \uff08\u4f20\u8f93\u4e4b\u540e\uff09 \u5e8f\u5217\u5316\u662f\u5728\u5185\u5b58\u4e2d\u628a\u6570\u636e\u8f6c\u6362\u6210\u6307\u5b9a\u683c\u5f0f\uff08\u6570\u636e -> \u5b57\u7b26\u4e32\uff09\uff0c\u53cd\u4e4b\u4ea6\u7136\uff08\u5b57\u7b26\u4e32 -> \u6570\u636e\uff09\u3002 \u7f16\u7801\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u53ea\u662f\u8f93\u51fa\u4e00\u4e2a\u6570\u636e\u6d41\uff08\u5b9e\u73b0\u4e86 io.Writer \u63a5\u53e3\uff09\uff1b\u89e3\u7801\u662f\u4ece\u4e00\u4e2a\u6570\u636e\u6d41\uff08\u5b9e\u73b0\u4e86 io.Reader \uff09\u8f93\u51fa\u5230\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u3002 \u6211\u4eec\u90fd\u6bd4\u8f83\u719f\u6089 XML \u683c\u5f0f(\u53c2\u9605 12.10 )\uff1b\u4f46\u6709\u4e9b\u65f6\u5019 JSON\uff08JavaScript Object Notation\uff0c\u53c2\u9605 http://json.org \uff09\u88ab\u4f5c\u4e3a\u9996\u9009\uff0c\u4e3b\u8981\u662f\u7531\u4e8e\u5176\u683c\u5f0f\u4e0a\u975e\u5e38\u7b80\u6d01\u3002\u901a\u5e38 JSON \u88ab\u7528\u4e8e web \u540e\u7aef\u548c\u6d4f\u89c8\u5668\u4e4b\u95f4\u7684\u901a\u8baf\uff0c\u4f46\u662f\u5728\u5176\u5b83\u573a\u666f\u4e5f\u540c\u6837\u7684\u6709\u7528\u3002 \u8fd9\u662f\u4e00\u4e2a\u7b80\u77ed\u7684 JSON \u7247\u6bb5\uff1a { \"Person\" : { \"FirstName\" : \"Laura\" , \"LastName\" : \"Lynn\" } } \u5c3d\u7ba1 XML \u88ab\u5e7f\u6cdb\u7684\u5e94\u7528\uff0c\u4f46\u662f JSON \u66f4\u52a0\u7b80\u6d01\u3001\u8f7b\u91cf\uff08\u5360\u7528\u66f4\u5c11\u7684\u5185\u5b58\u3001\u78c1\u76d8\u53ca\u7f51\u7edc\u5e26\u5bbd\uff09\u548c\u66f4\u597d\u7684\u53ef\u8bfb\u6027\uff0c\u8fd9\u4e5f\u4f7f\u5b83\u8d8a\u6765\u8d8a\u53d7\u6b22\u8fce\u3002 Go \u8bed\u8a00\u7684 json \u5305\u53ef\u4ee5\u8ba9\u4f60\u5728\u7a0b\u5e8f\u4e2d\u65b9\u4fbf\u7684\u8bfb\u53d6\u548c\u5199\u5165 JSON \u6570\u636e\u3002 \u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u91cc\u4f7f\u7528 json \u5305\uff0c\u5e76\u4f7f\u7528\u7ec3\u4e60 10.1 vcard.go \u4e2d\u4e00\u4e2a\u7b80\u5316\u7248\u672c\u7684 Address \u548c VCard \u7ed3\u6784\uff08\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u5ffd\u7565\u4e86\u5f88\u591a\u9519\u8bef\u5904\u7406\uff0c\u4e0d\u8fc7\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u4f60\u5fc5\u987b\u8981\u5408\u7406\u7684\u5904\u7406\u8fd9\u4e9b\u9519\u8bef\uff0c\u53c2\u9605 13 \u7ae0 \uff09\u3002 \u793a\u4f8b 12.16 json.go \uff1a // json.go package main import ( \"encoding/json\" \"fmt\" \"log\" \"os\" ) type Address struct { Type string City string Country string } type VCard struct { FirstName string LastName string Addresses [] * Address Remark string } func main () { pa := & Address { \"private\" , \"Aartselaar\" , \"Belgium\" } wa := & Address { \"work\" , \"Boom\" , \"Belgium\" } vc := VCard { \"Jan\" , \"Kersschot\" , [] * Address { pa , wa }, \"none\" } // fmt.Printf(\"%v: \\n\", vc) // {Jan Kersschot [0x126d2b80 0x126d2be0] none}: // JSON format: js , _ := json . Marshal ( vc ) fmt . Printf ( \"JSON format: %s\" , js ) // using an encoder: file , _ := os . OpenFile ( \"vcard.json\" , os . O_CREATE | os . O_WRONLY , 0666 ) defer file . Close () enc := json . NewEncoder ( file ) err := enc . Encode ( vc ) if err != nil { log . Println ( \"Error in encoding json\" ) } } json.Marshal() \u7684\u51fd\u6570\u7b7e\u540d\u662f func Marshal(v interface{}) ([]byte, error) \uff0c\u4e0b\u9762\u662f\u6570\u636e\u7f16\u7801\u540e\u7684 JSON \u6587\u672c\uff08\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a []byte \uff09\uff1a { \"FirstName\" : \"Jan\" , \"LastName\" : \"Kersschot\" , \"Addresses\" : [{ \"Type\" : \"private\" , \"City\" : \"Aartselaar\" , \"Country\" : \"Belgium\" }, { \"Type\" : \"work\" , \"City\" : \"Boom\" , \"Country\" : \"Belgium\" }], \"Remark\" : \"none\" } \u51fa\u4e8e\u5b89\u5168\u8003\u8651\uff0c\u5728 web \u5e94\u7528\u4e2d\u6700\u597d\u4f7f\u7528 json.MarshalforHTML() \u51fd\u6570\uff0c\u5176\u5bf9\u6570\u636e\u6267\u884c HTML \u8f6c\u7801\uff0c\u6240\u4ee5\u6587\u672c\u53ef\u4ee5\u88ab\u5b89\u5168\u5730\u5d4c\u5728 HTML <script> \u6807\u7b7e\u4e2d\u3002 json.NewEncoder() \u7684\u51fd\u6570\u7b7e\u540d\u662f func NewEncoder(w io.Writer) *Encoder \uff0c\u8fd4\u56de\u7684 Encoder \u7c7b\u578b\u7684\u6307\u9488\u53ef\u8c03\u7528\u65b9\u6cd5 Encode(v interface{}) \uff0c\u5c06\u6570\u636e\u5bf9\u8c61 v \u7684 json \u7f16\u7801\u5199\u5165 io.Writer w \u4e2d\u3002 JSON \u4e0e Go \u7c7b\u578b\u5bf9\u5e94\u5982\u4e0b\uff1a bool \u5bf9\u5e94 JSON \u7684 boolean float64 \u5bf9\u5e94 JSON \u7684 number string \u5bf9\u5e94 JSON \u7684 string nil \u5bf9\u5e94 JSON \u7684 null \u4e0d\u662f\u6240\u6709\u7684\u6570\u636e\u90fd\u53ef\u4ee5\u7f16\u7801\u4e3a JSON \u7c7b\u578b\uff0c\u53ea\u6709\u9a8c\u8bc1\u901a\u8fc7\u7684\u6570\u636e\u7ed3\u6784\u624d\u80fd\u88ab\u7f16\u7801\uff1a JSON \u5bf9\u8c61\u53ea\u652f\u6301\u5b57\u7b26\u4e32\u7c7b\u578b\u7684 key\uff1b\u8981\u7f16\u7801\u4e00\u4e2a Go map \u7c7b\u578b\uff0c map \u5fc5\u987b\u662f map[string]T \uff08 T \u662f json \u5305\u4e2d\u652f\u6301\u7684\u4efb\u4f55\u7c7b\u578b\uff09 Channel\uff0c\u590d\u6742\u7c7b\u578b\u548c\u51fd\u6570\u7c7b\u578b\u4e0d\u80fd\u88ab\u7f16\u7801 \u4e0d\u652f\u6301\u5faa\u73af\u6570\u636e\u7ed3\u6784\uff1b\u5b83\u5c06\u5f15\u8d77\u5e8f\u5217\u5316\u8fdb\u5165\u4e00\u4e2a\u65e0\u9650\u5faa\u73af \u6307\u9488\u53ef\u4ee5\u88ab\u7f16\u7801\uff0c\u5b9e\u9645\u4e0a\u662f\u5bf9\u6307\u9488\u6307\u5411\u7684\u503c\u8fdb\u884c\u7f16\u7801\uff08\u6216\u8005\u6307\u9488\u662f nil \uff09 \u53cd\u5e8f\u5217\u5316\uff1a \u00b6 json.Unmarshal() \u7684\u51fd\u6570\u7b7e\u540d\u662f func Unmarshal(data []byte, v interface{}) error \u628a JSON \u89e3\u7801\u4e3a\u6570\u636e\u7ed3\u6784\u3002 \u793a\u4f8b 12.16 \u4e2d\u5bf9 vc \u7f16\u7801\u540e\u7684\u6570\u636e\u4e3a js \uff0c\u5bf9\u5176\u89e3\u7801\u65f6\uff0c\u6211\u4eec\u9996\u5148\u521b\u5efa\u7ed3\u6784 VCard \u7528\u6765\u4fdd\u5b58\u89e3\u7801\u7684\u6570\u636e\uff1a var v VCard \u5e76\u8c03\u7528 json.Unmarshal(js, &v) \uff0c\u89e3\u6790 []byte \u4e2d\u7684 JSON \u6570\u636e\u5e76\u5c06\u7ed3\u679c\u5b58\u5165\u6307\u9488 &v \u6307\u5411\u7684\u503c\u3002 \u867d\u7136\u53cd\u5c04\u80fd\u591f\u8ba9 JSON \u5b57\u6bb5\u53bb\u5c1d\u8bd5\u5339\u914d\u76ee\u6807\u7ed3\u6784\u5b57\u6bb5\uff1b\u4f46\u662f\u53ea\u6709\u771f\u6b63\u5339\u914d\u4e0a\u7684\u5b57\u6bb5\u624d\u4f1a\u586b\u5145\u6570\u636e\u3002\u5b57\u6bb5\u6ca1\u6709\u5339\u914d\u4e0d\u4f1a\u62a5\u9519\uff0c\u800c\u662f\u76f4\u63a5\u5ffd\u7565\u6389\u3002 \uff08\u7ec3\u4e60 15.2b twitter_status_json.go \u4e2d\u7528\u5230\u4e86 Unmarshal() \uff09 \u89e3\u7801\u4efb\u610f\u7684\u6570\u636e\uff1a \u00b6 json \u5305\u4f7f\u7528 map[string]interface{} \u548c []interface{} \u50a8\u5b58\u4efb\u610f\u7684 JSON \u5bf9\u8c61\u548c\u6570\u7ec4\uff1b\u5176\u53ef\u4ee5\u88ab\u53cd\u5e8f\u5217\u5316\u4e3a\u4efb\u4f55\u7684 JSON blob \u5b58\u50a8\u5230\u63a5\u53e3\u503c\u4e2d\u3002 \u6765\u770b\u8fd9\u4e2a JSON \u6570\u636e\uff0c\u88ab\u5b58\u50a8\u5728\u53d8\u91cf b \u4e2d\uff1a b := [] byte ( `{\"Name\": \"Wednesday\", \"Age\": 6, \"Parents\": [\"Gomez\", \"Morticia\"]}` ) \u4e0d\u7528\u7406\u89e3\u8fd9\u4e2a\u6570\u636e\u7684\u7ed3\u6784\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 Unmarshal() \u628a\u8fd9\u4e2a\u6570\u636e\u7f16\u7801\u5e76\u4fdd\u5b58\u5728\u63a5\u53e3\u503c\u4e2d\uff1a var f interface {} err := json . Unmarshal ( b , & f ) f \u6307\u5411\u7684\u503c\u662f\u4e00\u4e2a map \uff0ckey \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0cvalue \u662f\u81ea\u8eab\u5b58\u50a8\u4f5c\u4e3a\u7a7a\u63a5\u53e3\u7c7b\u578b\u7684\u503c\uff1a map [ string ] interface {} { \"Name\" : \"Wednesday\" , \"Age\" : 6 , \"Parents\" : [] interface {} { \"Gomez\" , \"Morticia\" , }, } \u8981\u8bbf\u95ee\u8fd9\u4e2a\u6570\u636e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u65ad\u8a00 m := f .( map [ string ] interface {}) \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 for range \u8bed\u6cd5\u548c type switch \u6765\u8bbf\u95ee\u5176\u5b9e\u9645\u7c7b\u578b\uff1a for k , v := range m { switch vv := v .( type ) { case string : fmt . Println ( k , \"is string\" , vv ) case int : fmt . Println ( k , \"is int\" , vv ) case [] interface {}: fmt . Println ( k , \"is an array:\" ) for i , u := range vv { fmt . Println ( i , u ) } default : fmt . Println ( k , \"is of a type I don\u2019t know how to handle\" ) } } \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4f60\u53ef\u4ee5\u5904\u7406\u672a\u77e5\u7684 JSON \u6570\u636e\uff0c\u540c\u65f6\u53ef\u4ee5\u786e\u4fdd\u7c7b\u578b\u5b89\u5168\u3002 \u89e3\u7801\u6570\u636e\u5230\u7ed3\u6784 \u00b6 \u5982\u679c\u6211\u4eec\u4e8b\u5148\u77e5\u9053 JSON \u6570\u636e\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u9002\u5f53\u7684\u7ed3\u6784\u5e76\u5bf9 JSON \u6570\u636e\u53cd\u5e8f\u5217\u5316\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u5b9a\u4e49\uff1a type FamilyMember struct { Name string Age int Parents [] string } \u5e76\u5bf9\u5176\u53cd\u5e8f\u5217\u5316\uff1a var m FamilyMember err := json . Unmarshal ( b , & m ) \u7a0b\u5e8f\u5b9e\u9645\u4e0a\u662f\u5206\u914d\u4e86\u4e00\u4e2a\u65b0\u7684\u5207\u7247\u3002\u8fd9\u662f\u4e00\u4e2a\u5178\u578b\u7684\u53cd\u5e8f\u5217\u5316\u5f15\u7528\u7c7b\u578b\uff08\u6307\u9488\u3001\u5207\u7247\u548c map \uff09\u7684\u4f8b\u5b50\u3002 \u7f16\u7801\u548c\u89e3\u7801\u6d41 \u00b6 json \u5305\u63d0\u4f9b Decoder \u548c Encoder \u7c7b\u578b\u6765\u652f\u6301\u5e38\u7528 JSON \u6570\u636e\u6d41\u8bfb\u5199\u3002 NewDecoder() \u548c NewEncoder() \u51fd\u6570\u5206\u522b\u5c01\u88c5\u4e86 io.Reader \u548c io.Writer \u63a5\u53e3\u3002 func NewDecoder ( r io . Reader ) * Decoder func NewEncoder ( w io . Writer ) * Encoder \u8981\u60f3\u628a JSON \u76f4\u63a5\u5199\u5165\u6587\u4ef6\uff0c\u53ef\u4ee5\u4f7f\u7528 json.NewEncoder \u521d\u59cb\u5316\u6587\u4ef6\uff08\u6216\u8005\u4efb\u4f55\u5b9e\u73b0 io.Writer \u7684\u7c7b\u578b\uff09\uff0c\u5e76\u8c03\u7528 Encode() \uff1b\u53cd\u8fc7\u6765\u4e0e\u5176\u5bf9\u5e94\u7684\u662f\u4f7f\u7528 json.NewDecoder \u548c Decode() \u51fd\u6570\uff1a func NewDecoder ( r io . Reader ) * Decoder func ( dec * Decoder ) Decode ( v interface {}) error \u6765\u770b\u4e0b\u63a5\u53e3\u662f\u5982\u4f55\u5bf9\u5b9e\u73b0\u8fdb\u884c\u62bd\u8c61\u7684\uff1a\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\uff0c\u53ea\u8981\u5176\u5b9e\u73b0\u4e86\u67d0\u79cd\u63a5\u53e3\uff0c\u76ee\u6807\u6216\u6e90\u6570\u636e\u8981\u80fd\u591f\u88ab\u7f16\u7801\u5c31\u5fc5\u987b\u5b9e\u73b0 io.Writer \u6216 io.Reader \u63a5\u53e3\u3002\u7531\u4e8e Go \u8bed\u8a00\u4e2d\u5230\u5904\u90fd\u5b9e\u73b0\u4e86 Reader \u548c Writer\uff0c\u56e0\u6b64 Encoder \u548c Decoder \u53ef\u88ab\u5e94\u7528\u7684\u573a\u666f\u975e\u5e38\u5e7f\u6cdb\uff0c\u4f8b\u5982\u8bfb\u53d6\u6216\u5199\u5165 HTTP \u8fde\u63a5\u3001websockets \u6216\u6587\u4ef6\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f7f\u7528\u63a5\u53e3\u7684\u5b9e\u9645\u4f8b\u5b50:fmt.Fprintf \u4e0b\u4e00\u8282\uff1a XML \u6570\u636e\u683c\u5f0f","title":"12.9 \u683c\u5f0f\u5316 JSON \u6570\u636e"},{"location":"12.9/#129-json","text":"\u6570\u636e\u7ed3\u6784\u8981\u5728\u7f51\u7edc\u4e2d\u4f20\u8f93\u6216\u4fdd\u5b58\u5230\u6587\u4ef6\uff0c\u5c31\u5fc5\u987b\u5bf9\u5176\u7f16\u7801\u548c\u89e3\u7801\uff1b\u76ee\u524d\u5b58\u5728\u5f88\u591a\u7f16\u7801\u683c\u5f0f\uff1aJSON\uff0cXML\uff0cgob\uff0cGoogle \u7f13\u51b2\u534f\u8bae\u7b49\u7b49\u3002Go \u8bed\u8a00\u652f\u6301\u6240\u6709\u8fd9\u4e9b\u7f16\u7801\u683c\u5f0f\uff1b\u5728\u540e\u9762\u7684\u7ae0\u8282\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u524d\u4e09\u79cd\u683c\u5f0f\u3002 \u7ed3\u6784\u53ef\u80fd\u5305\u542b\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u5982\u679c\u5c06\u5176\u4f5c\u4e3a\u6587\u672c\u6253\u5370\uff0c\u90a3\u4e48\u53ef\u8bfb\u6027\u662f\u5f88\u5dee\u7684\u3002\u53e6\u5916\u7ed3\u6784\u5185\u90e8\u53ef\u80fd\u5305\u542b\u533f\u540d\u5b57\u6bb5\uff0c\u800c\u4e0d\u6e05\u695a\u6570\u636e\u7684\u7528\u610f\u3002 \u901a\u8fc7\u628a\u6570\u636e\u8f6c\u6362\u6210\u7eaf\u6587\u672c\uff0c\u4f7f\u7528\u547d\u540d\u7684\u5b57\u6bb5\u6765\u6807\u6ce8\uff0c\u8ba9\u5176\u5177\u6709\u53ef\u8bfb\u6027\u3002\u8fd9\u6837\u7684\u6570\u636e\u683c\u5f0f\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\uff0c\u800c\u4e14\u662f\u4e0e\u5e73\u53f0\u65e0\u5173\u7684\uff0c\u4efb\u4f55\u7c7b\u578b\u7684\u5e94\u7528\u90fd\u80fd\u591f\u8bfb\u53d6\u548c\u8f93\u51fa\uff0c\u4e0d\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u548c\u7f16\u7a0b\u8bed\u8a00\u7684\u7c7b\u578b\u76f8\u5173\u3002 \u4e0b\u9762\u662f\u4e00\u4e9b\u672f\u8bed\u8bf4\u660e\uff1a \u6570\u636e\u7ed3\u6784 \u2192 \u6307\u5b9a\u683c\u5f0f = \u5e8f\u5217\u5316 \u6216 \u7f16\u7801 \uff08\u4f20\u8f93\u4e4b\u524d\uff09 \u6307\u5b9a\u683c\u5f0f \u2192 \u6570\u636e\u7ed3\u6784 = \u53cd\u5e8f\u5217\u5316 \u6216 \u89e3\u7801 \uff08\u4f20\u8f93\u4e4b\u540e\uff09 \u5e8f\u5217\u5316\u662f\u5728\u5185\u5b58\u4e2d\u628a\u6570\u636e\u8f6c\u6362\u6210\u6307\u5b9a\u683c\u5f0f\uff08\u6570\u636e -> \u5b57\u7b26\u4e32\uff09\uff0c\u53cd\u4e4b\u4ea6\u7136\uff08\u5b57\u7b26\u4e32 -> \u6570\u636e\uff09\u3002 \u7f16\u7801\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u53ea\u662f\u8f93\u51fa\u4e00\u4e2a\u6570\u636e\u6d41\uff08\u5b9e\u73b0\u4e86 io.Writer \u63a5\u53e3\uff09\uff1b\u89e3\u7801\u662f\u4ece\u4e00\u4e2a\u6570\u636e\u6d41\uff08\u5b9e\u73b0\u4e86 io.Reader \uff09\u8f93\u51fa\u5230\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u3002 \u6211\u4eec\u90fd\u6bd4\u8f83\u719f\u6089 XML \u683c\u5f0f(\u53c2\u9605 12.10 )\uff1b\u4f46\u6709\u4e9b\u65f6\u5019 JSON\uff08JavaScript Object Notation\uff0c\u53c2\u9605 http://json.org \uff09\u88ab\u4f5c\u4e3a\u9996\u9009\uff0c\u4e3b\u8981\u662f\u7531\u4e8e\u5176\u683c\u5f0f\u4e0a\u975e\u5e38\u7b80\u6d01\u3002\u901a\u5e38 JSON \u88ab\u7528\u4e8e web \u540e\u7aef\u548c\u6d4f\u89c8\u5668\u4e4b\u95f4\u7684\u901a\u8baf\uff0c\u4f46\u662f\u5728\u5176\u5b83\u573a\u666f\u4e5f\u540c\u6837\u7684\u6709\u7528\u3002 \u8fd9\u662f\u4e00\u4e2a\u7b80\u77ed\u7684 JSON \u7247\u6bb5\uff1a { \"Person\" : { \"FirstName\" : \"Laura\" , \"LastName\" : \"Lynn\" } } \u5c3d\u7ba1 XML \u88ab\u5e7f\u6cdb\u7684\u5e94\u7528\uff0c\u4f46\u662f JSON \u66f4\u52a0\u7b80\u6d01\u3001\u8f7b\u91cf\uff08\u5360\u7528\u66f4\u5c11\u7684\u5185\u5b58\u3001\u78c1\u76d8\u53ca\u7f51\u7edc\u5e26\u5bbd\uff09\u548c\u66f4\u597d\u7684\u53ef\u8bfb\u6027\uff0c\u8fd9\u4e5f\u4f7f\u5b83\u8d8a\u6765\u8d8a\u53d7\u6b22\u8fce\u3002 Go \u8bed\u8a00\u7684 json \u5305\u53ef\u4ee5\u8ba9\u4f60\u5728\u7a0b\u5e8f\u4e2d\u65b9\u4fbf\u7684\u8bfb\u53d6\u548c\u5199\u5165 JSON \u6570\u636e\u3002 \u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u91cc\u4f7f\u7528 json \u5305\uff0c\u5e76\u4f7f\u7528\u7ec3\u4e60 10.1 vcard.go \u4e2d\u4e00\u4e2a\u7b80\u5316\u7248\u672c\u7684 Address \u548c VCard \u7ed3\u6784\uff08\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u5ffd\u7565\u4e86\u5f88\u591a\u9519\u8bef\u5904\u7406\uff0c\u4e0d\u8fc7\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u4f60\u5fc5\u987b\u8981\u5408\u7406\u7684\u5904\u7406\u8fd9\u4e9b\u9519\u8bef\uff0c\u53c2\u9605 13 \u7ae0 \uff09\u3002 \u793a\u4f8b 12.16 json.go \uff1a // json.go package main import ( \"encoding/json\" \"fmt\" \"log\" \"os\" ) type Address struct { Type string City string Country string } type VCard struct { FirstName string LastName string Addresses [] * Address Remark string } func main () { pa := & Address { \"private\" , \"Aartselaar\" , \"Belgium\" } wa := & Address { \"work\" , \"Boom\" , \"Belgium\" } vc := VCard { \"Jan\" , \"Kersschot\" , [] * Address { pa , wa }, \"none\" } // fmt.Printf(\"%v: \\n\", vc) // {Jan Kersschot [0x126d2b80 0x126d2be0] none}: // JSON format: js , _ := json . Marshal ( vc ) fmt . Printf ( \"JSON format: %s\" , js ) // using an encoder: file , _ := os . OpenFile ( \"vcard.json\" , os . O_CREATE | os . O_WRONLY , 0666 ) defer file . Close () enc := json . NewEncoder ( file ) err := enc . Encode ( vc ) if err != nil { log . Println ( \"Error in encoding json\" ) } } json.Marshal() \u7684\u51fd\u6570\u7b7e\u540d\u662f func Marshal(v interface{}) ([]byte, error) \uff0c\u4e0b\u9762\u662f\u6570\u636e\u7f16\u7801\u540e\u7684 JSON \u6587\u672c\uff08\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a []byte \uff09\uff1a { \"FirstName\" : \"Jan\" , \"LastName\" : \"Kersschot\" , \"Addresses\" : [{ \"Type\" : \"private\" , \"City\" : \"Aartselaar\" , \"Country\" : \"Belgium\" }, { \"Type\" : \"work\" , \"City\" : \"Boom\" , \"Country\" : \"Belgium\" }], \"Remark\" : \"none\" } \u51fa\u4e8e\u5b89\u5168\u8003\u8651\uff0c\u5728 web \u5e94\u7528\u4e2d\u6700\u597d\u4f7f\u7528 json.MarshalforHTML() \u51fd\u6570\uff0c\u5176\u5bf9\u6570\u636e\u6267\u884c HTML \u8f6c\u7801\uff0c\u6240\u4ee5\u6587\u672c\u53ef\u4ee5\u88ab\u5b89\u5168\u5730\u5d4c\u5728 HTML <script> \u6807\u7b7e\u4e2d\u3002 json.NewEncoder() \u7684\u51fd\u6570\u7b7e\u540d\u662f func NewEncoder(w io.Writer) *Encoder \uff0c\u8fd4\u56de\u7684 Encoder \u7c7b\u578b\u7684\u6307\u9488\u53ef\u8c03\u7528\u65b9\u6cd5 Encode(v interface{}) \uff0c\u5c06\u6570\u636e\u5bf9\u8c61 v \u7684 json \u7f16\u7801\u5199\u5165 io.Writer w \u4e2d\u3002 JSON \u4e0e Go \u7c7b\u578b\u5bf9\u5e94\u5982\u4e0b\uff1a bool \u5bf9\u5e94 JSON \u7684 boolean float64 \u5bf9\u5e94 JSON \u7684 number string \u5bf9\u5e94 JSON \u7684 string nil \u5bf9\u5e94 JSON \u7684 null \u4e0d\u662f\u6240\u6709\u7684\u6570\u636e\u90fd\u53ef\u4ee5\u7f16\u7801\u4e3a JSON \u7c7b\u578b\uff0c\u53ea\u6709\u9a8c\u8bc1\u901a\u8fc7\u7684\u6570\u636e\u7ed3\u6784\u624d\u80fd\u88ab\u7f16\u7801\uff1a JSON \u5bf9\u8c61\u53ea\u652f\u6301\u5b57\u7b26\u4e32\u7c7b\u578b\u7684 key\uff1b\u8981\u7f16\u7801\u4e00\u4e2a Go map \u7c7b\u578b\uff0c map \u5fc5\u987b\u662f map[string]T \uff08 T \u662f json \u5305\u4e2d\u652f\u6301\u7684\u4efb\u4f55\u7c7b\u578b\uff09 Channel\uff0c\u590d\u6742\u7c7b\u578b\u548c\u51fd\u6570\u7c7b\u578b\u4e0d\u80fd\u88ab\u7f16\u7801 \u4e0d\u652f\u6301\u5faa\u73af\u6570\u636e\u7ed3\u6784\uff1b\u5b83\u5c06\u5f15\u8d77\u5e8f\u5217\u5316\u8fdb\u5165\u4e00\u4e2a\u65e0\u9650\u5faa\u73af \u6307\u9488\u53ef\u4ee5\u88ab\u7f16\u7801\uff0c\u5b9e\u9645\u4e0a\u662f\u5bf9\u6307\u9488\u6307\u5411\u7684\u503c\u8fdb\u884c\u7f16\u7801\uff08\u6216\u8005\u6307\u9488\u662f nil \uff09","title":"12.9 JSON \u6570\u636e\u683c\u5f0f"},{"location":"12.9/#_1","text":"json.Unmarshal() \u7684\u51fd\u6570\u7b7e\u540d\u662f func Unmarshal(data []byte, v interface{}) error \u628a JSON \u89e3\u7801\u4e3a\u6570\u636e\u7ed3\u6784\u3002 \u793a\u4f8b 12.16 \u4e2d\u5bf9 vc \u7f16\u7801\u540e\u7684\u6570\u636e\u4e3a js \uff0c\u5bf9\u5176\u89e3\u7801\u65f6\uff0c\u6211\u4eec\u9996\u5148\u521b\u5efa\u7ed3\u6784 VCard \u7528\u6765\u4fdd\u5b58\u89e3\u7801\u7684\u6570\u636e\uff1a var v VCard \u5e76\u8c03\u7528 json.Unmarshal(js, &v) \uff0c\u89e3\u6790 []byte \u4e2d\u7684 JSON \u6570\u636e\u5e76\u5c06\u7ed3\u679c\u5b58\u5165\u6307\u9488 &v \u6307\u5411\u7684\u503c\u3002 \u867d\u7136\u53cd\u5c04\u80fd\u591f\u8ba9 JSON \u5b57\u6bb5\u53bb\u5c1d\u8bd5\u5339\u914d\u76ee\u6807\u7ed3\u6784\u5b57\u6bb5\uff1b\u4f46\u662f\u53ea\u6709\u771f\u6b63\u5339\u914d\u4e0a\u7684\u5b57\u6bb5\u624d\u4f1a\u586b\u5145\u6570\u636e\u3002\u5b57\u6bb5\u6ca1\u6709\u5339\u914d\u4e0d\u4f1a\u62a5\u9519\uff0c\u800c\u662f\u76f4\u63a5\u5ffd\u7565\u6389\u3002 \uff08\u7ec3\u4e60 15.2b twitter_status_json.go \u4e2d\u7528\u5230\u4e86 Unmarshal() \uff09","title":"\u53cd\u5e8f\u5217\u5316\uff1a"},{"location":"12.9/#_2","text":"json \u5305\u4f7f\u7528 map[string]interface{} \u548c []interface{} \u50a8\u5b58\u4efb\u610f\u7684 JSON \u5bf9\u8c61\u548c\u6570\u7ec4\uff1b\u5176\u53ef\u4ee5\u88ab\u53cd\u5e8f\u5217\u5316\u4e3a\u4efb\u4f55\u7684 JSON blob \u5b58\u50a8\u5230\u63a5\u53e3\u503c\u4e2d\u3002 \u6765\u770b\u8fd9\u4e2a JSON \u6570\u636e\uff0c\u88ab\u5b58\u50a8\u5728\u53d8\u91cf b \u4e2d\uff1a b := [] byte ( `{\"Name\": \"Wednesday\", \"Age\": 6, \"Parents\": [\"Gomez\", \"Morticia\"]}` ) \u4e0d\u7528\u7406\u89e3\u8fd9\u4e2a\u6570\u636e\u7684\u7ed3\u6784\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 Unmarshal() \u628a\u8fd9\u4e2a\u6570\u636e\u7f16\u7801\u5e76\u4fdd\u5b58\u5728\u63a5\u53e3\u503c\u4e2d\uff1a var f interface {} err := json . Unmarshal ( b , & f ) f \u6307\u5411\u7684\u503c\u662f\u4e00\u4e2a map \uff0ckey \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0cvalue \u662f\u81ea\u8eab\u5b58\u50a8\u4f5c\u4e3a\u7a7a\u63a5\u53e3\u7c7b\u578b\u7684\u503c\uff1a map [ string ] interface {} { \"Name\" : \"Wednesday\" , \"Age\" : 6 , \"Parents\" : [] interface {} { \"Gomez\" , \"Morticia\" , }, } \u8981\u8bbf\u95ee\u8fd9\u4e2a\u6570\u636e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u65ad\u8a00 m := f .( map [ string ] interface {}) \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 for range \u8bed\u6cd5\u548c type switch \u6765\u8bbf\u95ee\u5176\u5b9e\u9645\u7c7b\u578b\uff1a for k , v := range m { switch vv := v .( type ) { case string : fmt . Println ( k , \"is string\" , vv ) case int : fmt . Println ( k , \"is int\" , vv ) case [] interface {}: fmt . Println ( k , \"is an array:\" ) for i , u := range vv { fmt . Println ( i , u ) } default : fmt . Println ( k , \"is of a type I don\u2019t know how to handle\" ) } } \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4f60\u53ef\u4ee5\u5904\u7406\u672a\u77e5\u7684 JSON \u6570\u636e\uff0c\u540c\u65f6\u53ef\u4ee5\u786e\u4fdd\u7c7b\u578b\u5b89\u5168\u3002","title":"\u89e3\u7801\u4efb\u610f\u7684\u6570\u636e\uff1a"},{"location":"12.9/#_3","text":"\u5982\u679c\u6211\u4eec\u4e8b\u5148\u77e5\u9053 JSON \u6570\u636e\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u9002\u5f53\u7684\u7ed3\u6784\u5e76\u5bf9 JSON \u6570\u636e\u53cd\u5e8f\u5217\u5316\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u5b9a\u4e49\uff1a type FamilyMember struct { Name string Age int Parents [] string } \u5e76\u5bf9\u5176\u53cd\u5e8f\u5217\u5316\uff1a var m FamilyMember err := json . Unmarshal ( b , & m ) \u7a0b\u5e8f\u5b9e\u9645\u4e0a\u662f\u5206\u914d\u4e86\u4e00\u4e2a\u65b0\u7684\u5207\u7247\u3002\u8fd9\u662f\u4e00\u4e2a\u5178\u578b\u7684\u53cd\u5e8f\u5217\u5316\u5f15\u7528\u7c7b\u578b\uff08\u6307\u9488\u3001\u5207\u7247\u548c map \uff09\u7684\u4f8b\u5b50\u3002","title":"\u89e3\u7801\u6570\u636e\u5230\u7ed3\u6784"},{"location":"12.9/#_4","text":"json \u5305\u63d0\u4f9b Decoder \u548c Encoder \u7c7b\u578b\u6765\u652f\u6301\u5e38\u7528 JSON \u6570\u636e\u6d41\u8bfb\u5199\u3002 NewDecoder() \u548c NewEncoder() \u51fd\u6570\u5206\u522b\u5c01\u88c5\u4e86 io.Reader \u548c io.Writer \u63a5\u53e3\u3002 func NewDecoder ( r io . Reader ) * Decoder func NewEncoder ( w io . Writer ) * Encoder \u8981\u60f3\u628a JSON \u76f4\u63a5\u5199\u5165\u6587\u4ef6\uff0c\u53ef\u4ee5\u4f7f\u7528 json.NewEncoder \u521d\u59cb\u5316\u6587\u4ef6\uff08\u6216\u8005\u4efb\u4f55\u5b9e\u73b0 io.Writer \u7684\u7c7b\u578b\uff09\uff0c\u5e76\u8c03\u7528 Encode() \uff1b\u53cd\u8fc7\u6765\u4e0e\u5176\u5bf9\u5e94\u7684\u662f\u4f7f\u7528 json.NewDecoder \u548c Decode() \u51fd\u6570\uff1a func NewDecoder ( r io . Reader ) * Decoder func ( dec * Decoder ) Decode ( v interface {}) error \u6765\u770b\u4e0b\u63a5\u53e3\u662f\u5982\u4f55\u5bf9\u5b9e\u73b0\u8fdb\u884c\u62bd\u8c61\u7684\uff1a\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\uff0c\u53ea\u8981\u5176\u5b9e\u73b0\u4e86\u67d0\u79cd\u63a5\u53e3\uff0c\u76ee\u6807\u6216\u6e90\u6570\u636e\u8981\u80fd\u591f\u88ab\u7f16\u7801\u5c31\u5fc5\u987b\u5b9e\u73b0 io.Writer \u6216 io.Reader \u63a5\u53e3\u3002\u7531\u4e8e Go \u8bed\u8a00\u4e2d\u5230\u5904\u90fd\u5b9e\u73b0\u4e86 Reader \u548c Writer\uff0c\u56e0\u6b64 Encoder \u548c Decoder \u53ef\u88ab\u5e94\u7528\u7684\u573a\u666f\u975e\u5e38\u5e7f\u6cdb\uff0c\u4f8b\u5982\u8bfb\u53d6\u6216\u5199\u5165 HTTP \u8fde\u63a5\u3001websockets \u6216\u6587\u4ef6\u3002","title":"\u7f16\u7801\u548c\u89e3\u7801\u6d41"},{"location":"12.9/#_5","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f7f\u7528\u63a5\u53e3\u7684\u5b9e\u9645\u4f8b\u5b50:fmt.Fprintf \u4e0b\u4e00\u8282\uff1a XML \u6570\u636e\u683c\u5f0f","title":"\u94fe\u63a5"},{"location":"13.0/","text":"13.0 \u9519\u8bef\u5904\u7406\u4e0e\u6d4b\u8bd5 \u00b6 Go \u6ca1\u6709\u50cf Java \u548c .NET \u90a3\u6837\u7684 try/catch \u5f02\u5e38\u673a\u5236\uff1a\u4e0d\u80fd\u6267\u884c\u629b\u5f02\u5e38\u64cd\u4f5c\u3002\u4f46\u662f\u6709\u4e00\u5957 defer-panic-and-recover \u673a\u5236\uff08\u53c2\u89c1 13.2 - 13.3 \u8282\uff09\u3002 Go \u7684\u8bbe\u8ba1\u8005\u89c9\u5f97 try/catch \u673a\u5236\u7684\u4f7f\u7528\u592a\u6cdb\u6ee5\u4e86\uff0c\u800c\u4e14\u4ece\u5e95\u5c42\u5411\u66f4\u9ad8\u7684\u5c42\u7ea7\u629b\u5f02\u5e38\u592a\u8017\u8d39\u8d44\u6e90\u3002\u4ed6\u4eec\u7ed9 Go \u8bbe\u8ba1\u7684\u673a\u5236\u4e5f\u53ef\u4ee5\u201c\u6355\u6349\u201d\u5f02\u5e38\uff0c\u4f46\u662f\u66f4\u8f7b\u91cf\uff0c\u5e76\u4e14\u53ea\u5e94\u8be5\u4f5c\u4e3a\uff08\u5904\u7406\u9519\u8bef\u7684\uff09\u6700\u540e\u7684\u624b\u6bb5\u3002 Go \u662f\u600e\u4e48\u5904\u7406\u666e\u901a\u9519\u8bef\u7684\u5462\uff1f\u901a\u8fc7\u5728\u51fd\u6570\u548c\u65b9\u6cd5\u4e2d\u8fd4\u56de\u9519\u8bef\u5bf9\u8c61\u4f5c\u4e3a\u5b83\u4eec\u7684\u552f\u4e00\u6216\u6700\u540e\u4e00\u4e2a\u8fd4\u56de\u503c\u2014\u2014\u5982\u679c\u8fd4\u56de nil \uff0c\u5219\u6ca1\u6709\u9519\u8bef\u53d1\u751f\u2014\u2014\u5e76\u4e14\u4e3b\u8c03 (calling) \u51fd\u6570\u603b\u662f\u5e94\u8be5\u68c0\u67e5\u6536\u5230\u7684\u9519\u8bef\u3002 \u6c38\u8fdc\u4e0d\u8981\u5ffd\u7565\u9519\u8bef\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\uff01\uff01 \u5904\u7406\u9519\u8bef\u5e76\u4e14\u5728\u51fd\u6570\u53d1\u751f\u9519\u8bef\u7684\u5730\u65b9\u7ed9\u7528\u6237\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\uff1a\u7167\u8fd9\u6837\u5904\u7406\u5c31\u7b97\u771f\u7684\u51fa\u4e86\u95ee\u9898\uff0c\u4f60\u7684\u7a0b\u5e8f\u4e5f\u80fd\u7ee7\u7eed\u8fd0\u884c\u5e76\u4e14\u901a\u77e5\u7ed9\u7528\u6237\u3002 panic() \u548c recover() \u662f\u7528\u6765\u5904\u7406\u771f\u6b63\u7684\u5f02\u5e38\uff08\u65e0\u6cd5\u9884\u6d4b\u7684\u9519\u8bef\uff09\u800c\u4e0d\u662f\u666e\u901a\u7684\u9519\u8bef\u3002 \u5e93\u51fd\u6570\u901a\u5e38\u5fc5\u987b\u8fd4\u56de\u67d0\u79cd\u9519\u8bef\u63d0\u793a\u7ed9\u4e3b\u8c03\u51fd\u6570\u3002 \u5728\u524d\u9762\u7684\u7ae0\u8282\u4e2d\u6211\u4eec\u4e86\u89e3\u4e86 Go \u68c0\u67e5\u548c\u62a5\u544a\u9519\u8bef\u6761\u4ef6\u7684\u60ef\u6709\u65b9\u5f0f\uff1a \u4ea7\u751f\u9519\u8bef\u7684\u51fd\u6570\u4f1a\u8fd4\u56de\u4e24\u4e2a\u53d8\u91cf\uff0c\u4e00\u4e2a\u503c\u548c\u4e00\u4e2a\u9519\u8bef\u7801\uff1b\u5982\u679c\u540e\u8005\u662f nil \u5c31\u662f\u6210\u529f\uff0c\u975e nil \u5c31\u662f\u53d1\u751f\u4e86\u9519\u8bef\u3002 \u4e3a\u4e86\u9632\u6b62\u53d1\u751f\u9519\u8bef\u65f6\u6b63\u5728\u6267\u884c\u7684\u51fd\u6570\uff08\u5982\u679c\u6709\u5fc5\u8981\u7684\u8bdd\u751a\u81f3\u4f1a\u662f\u6574\u4e2a\u7a0b\u5e8f\uff09\u88ab\u4e2d\u6b62\uff0c\u5728\u8c03\u7528\u51fd\u6570\u540e\u5fc5\u987b\u68c0\u67e5\u9519\u8bef\u3002 \u4e0b\u9762\u8fd9\u6bb5\u6765\u81ea pack1 \u5305\u7684\u4ee3\u7801 Func1() \u6d4b\u8bd5\u4e86\u5b83\u7684\u8fd4\u56de\u503c\uff1a if value , err := pack1 . Func1 ( param1 ); err != nil { fmt . Printf ( \"Error %s in pack1.Func1 with parameter %v\" , err . Error (), param1 ) return // or: return err } else { // Process(value) } \u4e3a\u4e86\u66f4\u6e05\u6670\u7684\u4ee3\u7801\uff0c\u5e94\u8be5\u603b\u662f\u4f7f\u7528\u5305\u542b\u9519\u8bef\u503c\u53d8\u91cf\u7684 if \u590d\u5408\u8bed\u53e5 \u4e0a\u4f8b\u9664\u4e86 fmt.Printf() \u8fd8\u53ef\u4ee5\u4f7f\u7528 log \u4e2d\u5bf9\u5e94\u7684\u65b9\u6cd5\uff08\u53c2\u89c1 13.3 \u8282\u548c 15.2 \u8282\uff09\uff0c\u5982\u679c\u7a0b\u5e8f\u4e2d\u6b62\u4e5f\u6ca1\u5173\u7cfb\u7684\u8bdd\u751a\u81f3\u53ef\u4ee5\u4f7f\u7528 panic() \uff08\u53c2\u89c1\u540e\u9762\u7684\u7ae0\u8282\uff09\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Go \u4e2d\u7684\u5bc6\u7801\u5b66 \u4e0b\u4e00\u8282\uff1a \u9519\u8bef\u5904\u7406","title":"13.0 \u9519\u8bef\u5904\u7406\u4e0e\u6d4b\u8bd5"},{"location":"13.0/#130","text":"Go \u6ca1\u6709\u50cf Java \u548c .NET \u90a3\u6837\u7684 try/catch \u5f02\u5e38\u673a\u5236\uff1a\u4e0d\u80fd\u6267\u884c\u629b\u5f02\u5e38\u64cd\u4f5c\u3002\u4f46\u662f\u6709\u4e00\u5957 defer-panic-and-recover \u673a\u5236\uff08\u53c2\u89c1 13.2 - 13.3 \u8282\uff09\u3002 Go \u7684\u8bbe\u8ba1\u8005\u89c9\u5f97 try/catch \u673a\u5236\u7684\u4f7f\u7528\u592a\u6cdb\u6ee5\u4e86\uff0c\u800c\u4e14\u4ece\u5e95\u5c42\u5411\u66f4\u9ad8\u7684\u5c42\u7ea7\u629b\u5f02\u5e38\u592a\u8017\u8d39\u8d44\u6e90\u3002\u4ed6\u4eec\u7ed9 Go \u8bbe\u8ba1\u7684\u673a\u5236\u4e5f\u53ef\u4ee5\u201c\u6355\u6349\u201d\u5f02\u5e38\uff0c\u4f46\u662f\u66f4\u8f7b\u91cf\uff0c\u5e76\u4e14\u53ea\u5e94\u8be5\u4f5c\u4e3a\uff08\u5904\u7406\u9519\u8bef\u7684\uff09\u6700\u540e\u7684\u624b\u6bb5\u3002 Go \u662f\u600e\u4e48\u5904\u7406\u666e\u901a\u9519\u8bef\u7684\u5462\uff1f\u901a\u8fc7\u5728\u51fd\u6570\u548c\u65b9\u6cd5\u4e2d\u8fd4\u56de\u9519\u8bef\u5bf9\u8c61\u4f5c\u4e3a\u5b83\u4eec\u7684\u552f\u4e00\u6216\u6700\u540e\u4e00\u4e2a\u8fd4\u56de\u503c\u2014\u2014\u5982\u679c\u8fd4\u56de nil \uff0c\u5219\u6ca1\u6709\u9519\u8bef\u53d1\u751f\u2014\u2014\u5e76\u4e14\u4e3b\u8c03 (calling) \u51fd\u6570\u603b\u662f\u5e94\u8be5\u68c0\u67e5\u6536\u5230\u7684\u9519\u8bef\u3002 \u6c38\u8fdc\u4e0d\u8981\u5ffd\u7565\u9519\u8bef\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\uff01\uff01 \u5904\u7406\u9519\u8bef\u5e76\u4e14\u5728\u51fd\u6570\u53d1\u751f\u9519\u8bef\u7684\u5730\u65b9\u7ed9\u7528\u6237\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\uff1a\u7167\u8fd9\u6837\u5904\u7406\u5c31\u7b97\u771f\u7684\u51fa\u4e86\u95ee\u9898\uff0c\u4f60\u7684\u7a0b\u5e8f\u4e5f\u80fd\u7ee7\u7eed\u8fd0\u884c\u5e76\u4e14\u901a\u77e5\u7ed9\u7528\u6237\u3002 panic() \u548c recover() \u662f\u7528\u6765\u5904\u7406\u771f\u6b63\u7684\u5f02\u5e38\uff08\u65e0\u6cd5\u9884\u6d4b\u7684\u9519\u8bef\uff09\u800c\u4e0d\u662f\u666e\u901a\u7684\u9519\u8bef\u3002 \u5e93\u51fd\u6570\u901a\u5e38\u5fc5\u987b\u8fd4\u56de\u67d0\u79cd\u9519\u8bef\u63d0\u793a\u7ed9\u4e3b\u8c03\u51fd\u6570\u3002 \u5728\u524d\u9762\u7684\u7ae0\u8282\u4e2d\u6211\u4eec\u4e86\u89e3\u4e86 Go \u68c0\u67e5\u548c\u62a5\u544a\u9519\u8bef\u6761\u4ef6\u7684\u60ef\u6709\u65b9\u5f0f\uff1a \u4ea7\u751f\u9519\u8bef\u7684\u51fd\u6570\u4f1a\u8fd4\u56de\u4e24\u4e2a\u53d8\u91cf\uff0c\u4e00\u4e2a\u503c\u548c\u4e00\u4e2a\u9519\u8bef\u7801\uff1b\u5982\u679c\u540e\u8005\u662f nil \u5c31\u662f\u6210\u529f\uff0c\u975e nil \u5c31\u662f\u53d1\u751f\u4e86\u9519\u8bef\u3002 \u4e3a\u4e86\u9632\u6b62\u53d1\u751f\u9519\u8bef\u65f6\u6b63\u5728\u6267\u884c\u7684\u51fd\u6570\uff08\u5982\u679c\u6709\u5fc5\u8981\u7684\u8bdd\u751a\u81f3\u4f1a\u662f\u6574\u4e2a\u7a0b\u5e8f\uff09\u88ab\u4e2d\u6b62\uff0c\u5728\u8c03\u7528\u51fd\u6570\u540e\u5fc5\u987b\u68c0\u67e5\u9519\u8bef\u3002 \u4e0b\u9762\u8fd9\u6bb5\u6765\u81ea pack1 \u5305\u7684\u4ee3\u7801 Func1() \u6d4b\u8bd5\u4e86\u5b83\u7684\u8fd4\u56de\u503c\uff1a if value , err := pack1 . Func1 ( param1 ); err != nil { fmt . Printf ( \"Error %s in pack1.Func1 with parameter %v\" , err . Error (), param1 ) return // or: return err } else { // Process(value) } \u4e3a\u4e86\u66f4\u6e05\u6670\u7684\u4ee3\u7801\uff0c\u5e94\u8be5\u603b\u662f\u4f7f\u7528\u5305\u542b\u9519\u8bef\u503c\u53d8\u91cf\u7684 if \u590d\u5408\u8bed\u53e5 \u4e0a\u4f8b\u9664\u4e86 fmt.Printf() \u8fd8\u53ef\u4ee5\u4f7f\u7528 log \u4e2d\u5bf9\u5e94\u7684\u65b9\u6cd5\uff08\u53c2\u89c1 13.3 \u8282\u548c 15.2 \u8282\uff09\uff0c\u5982\u679c\u7a0b\u5e8f\u4e2d\u6b62\u4e5f\u6ca1\u5173\u7cfb\u7684\u8bdd\u751a\u81f3\u53ef\u4ee5\u4f7f\u7528 panic() \uff08\u53c2\u89c1\u540e\u9762\u7684\u7ae0\u8282\uff09\u3002","title":"13.0 \u9519\u8bef\u5904\u7406\u4e0e\u6d4b\u8bd5"},{"location":"13.0/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Go \u4e2d\u7684\u5bc6\u7801\u5b66 \u4e0b\u4e00\u8282\uff1a \u9519\u8bef\u5904\u7406","title":"\u94fe\u63a5"},{"location":"13.1/","text":"13.1 \u9519\u8bef\u5904\u7406 \u00b6 Go \u6709\u4e00\u4e2a\u9884\u5148\u5b9a\u4e49\u7684 error \u63a5\u53e3\u7c7b\u578b type error interface { Error () string } \u9519\u8bef\u503c\u7528\u6765\u8868\u793a\u5f02\u5e38\u72b6\u6001\uff1b\u6211\u4eec\u53ef\u4ee5\u5728 5.2 \u8282 \u4e2d\u770b\u5230\u5b83\u7684\u6807\u51c6\u7528\u6cd5\u3002\u5904\u7406\u6587\u4ef6\u64cd\u4f5c\u7684\u4f8b\u5b50\u53ef\u4ee5\u5728 12 \u7ae0 \u627e\u5230\uff1b\u6211\u4eec\u5c06\u5728 15 \u7ae0 \u770b\u5230\u7f51\u7edc\u64cd\u4f5c\u7684\u4f8b\u5b50\u3002 errors \u5305\u4e2d\u6709\u4e00\u4e2a errorString \u7ed3\u6784\u4f53\u5b9e\u73b0\u4e86 error \u63a5\u53e3\u3002\u5f53\u7a0b\u5e8f\u5904\u4e8e\u9519\u8bef\u72b6\u6001\u65f6\u53ef\u4ee5\u7528 os.Exit(1) \u6765\u4e2d\u6b62\u8fd0\u884c\u3002 13.1.1 \u5b9a\u4e49\u9519\u8bef \u00b6 \u4efb\u4f55\u65f6\u5019\u5f53\u4f60\u9700\u8981\u4e00\u4e2a\u65b0\u7684\u9519\u8bef\u7c7b\u578b\uff0c\u90fd\u53ef\u4ee5\u7528 errors \u5305\uff08\u5fc5\u987b\u5148 import \uff09\u7684 errors.New() \u51fd\u6570\u63a5\u6536\u5408\u9002\u7684\u9519\u8bef\u4fe1\u606f\u6765\u521b\u5efa\uff0c\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a err := errors . New ( \"math - square root of negative number\" ) \u5728\u793a\u4f8b 13.1 \u4e2d\u4f60\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u7b80\u5355\u7684\u7528\u4f8b\uff1a \u793a\u4f8b 13.1 errors.go \uff1a // errors.go package main import ( \"errors\" \"fmt\" ) var errNotFound error = errors . New ( \"Not found error\" ) func main () { fmt . Printf ( \"error: %v\" , errNotFound ) } // error: Not found error \u53ef\u4ee5\u628a\u5b83\u7528\u4e8e\u8ba1\u7b97\u5e73\u65b9\u6839\u51fd\u6570\u7684\u53c2\u6570\u6d4b\u8bd5\uff1a func Sqrt ( f float64 ) ( float64 , error ) { if f < 0 { return 0 , errors . New ( \"math - square root of negative number\" ) } // implementation of Sqrt } \u4f60\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u8c03\u7528 Sqrt() \u51fd\u6570\uff1a if f , err := Sqrt ( - 1 ); err != nil { fmt . Printf ( \"Error: %s\\n\" , err ) } \u7531\u4e8e fmt.Printf \u4f1a\u81ea\u52a8\u8c03\u7528 String() \u65b9\u6cd5 \uff08\u53c2\u89c1 10.7 \u8282 \uff09\uff0c\u6240\u4ee5\u9519\u8bef\u4fe1\u606f \u201c Error: math - square root of negative number \u201d \u4f1a\u6253\u5370\u51fa\u6765\u3002\u901a\u5e38\uff08\u9519\u8bef\u4fe1\u606f\uff09\u90fd\u4f1a\u6709\u50cf Error:... \u8fd9\u6837\u7684\u524d\u7f00\uff0c\u6240\u4ee5\u4f60\u7684\u9519\u8bef\u4fe1\u606f\u4e0d\u8981\u4ee5\u5927\u5199\u5b57\u6bcd\u5f00\u5934\uff08\u6ce8\uff1a\u82f1\u6587\u53ea\u6709\u53e5\u9996\u5355\u8bcd\u9996\u5b57\u6bcd\u5927\u5199\uff0c\u8fd9\u91cc\u5e94\u5f53\u662f\u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff09\u3002 \u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u81ea\u5b9a\u4e49\u9519\u8bef\u7ed3\u6784\u7c7b\u578b\u5f88\u6709\u610f\u4e49\u7684\uff0c\u53ef\u4ee5\u5305\u542b\u9664\u4e86\uff08\u4f4e\u5c42\u7ea7\u7684\uff09\u9519\u8bef\u4fe1\u606f\u4ee5\u5916\u7684\u5176\u5b83\u6709\u7528\u4fe1\u606f\uff0c\u4f8b\u5982\uff0c\u6b63\u5728\u8fdb\u884c\u7684\u64cd\u4f5c\uff08\u6253\u5f00\u6587\u4ef6\u7b49\uff09\uff0c\u5168\u8def\u5f84\u6216\u540d\u5b57\u3002\u770b\u4e0b\u9762\u4f8b\u5b50\u4e2d os.Open() \u64cd\u4f5c\u89e6\u53d1\u7684 PathError \u9519\u8bef\uff1a // PathError records an error and the operation and file path that caused it. type PathError struct { Op string // \"open\", \"unlink\", etc. Path string // The associated file. Err error // Returned by the system call. } func ( e * PathError ) Error () string { return e . Op + \" \" + e . Path + \": \" + e . Err . Error () } \u5982\u679c\u6709\u4e0d\u540c\u9519\u8bef\u6761\u4ef6\u53ef\u80fd\u53d1\u751f\uff0c\u90a3\u4e48\u5bf9\u5b9e\u9645\u7684\u9519\u8bef\u4f7f\u7528\u7c7b\u578b\u65ad\u8a00\u6216\u7c7b\u578b\u5224\u65ad\uff08type-switch\uff09\u662f\u5f88\u6709\u7528\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u6839\u636e\u9519\u8bef\u573a\u666f\u505a\u4e00\u4e9b\u8865\u6551\u548c\u6062\u590d\u64cd\u4f5c\u3002 // err != nil if e , ok := err .( * os . PathError ); ok { // remedy situation } \u6216\uff1a switch err := err .( type ) { case ParseError : PrintParseError ( err ) case PathError : PrintPathError ( err ) ... default : fmt . Printf ( \"Not a special error, just %s\\n\" , err ) } \u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u8003\u8651\u7528 json \u5305\u7684\u60c5\u51b5\u3002\u5f53 json.Decode() \u5728\u89e3\u6790 JSON \u6587\u6863\u53d1\u751f\u8bed\u6cd5\u9519\u8bef\u65f6\uff0c\u6307\u5b9a\u8fd4\u56de\u4e00\u4e2a SyntaxError \u7c7b\u578b\u7684\u9519\u8bef\uff1a type SyntaxError struct { msg string // description of error // error occurred after reading Offset bytes, from which line and columnnr can be obtained Offset int64 } func ( e * SyntaxError ) Error () string { return e . msg } \u5728\u8c03\u7528\u4ee3\u7801\u4e2d\u4f60\u53ef\u4ee5\u50cf\u8fd9\u6837\u7528\u7c7b\u578b\u65ad\u8a00\u6d4b\u8bd5\u9519\u8bef\u662f\u4e0d\u662f\u4e0a\u9762\u7684\u7c7b\u578b\uff1a if serr , ok := err .( * json . SyntaxError ); ok { line , col := findLine ( f , serr . Offset ) return fmt . Errorf ( \"%s:%d:%d: %v\" , f . Name (), line , col , err ) } \u5305\u4e5f\u53ef\u4ee5\u7528\u989d\u5916\u7684\u65b9\u6cd5 (methods)\u5b9a\u4e49\u7279\u5b9a\u7684\u9519\u8bef\uff0c\u6bd4\u5982 net.Error \uff1a package net type Error interface { Timeout () bool // Is the error a timeout? Temporary () bool // Is the error temporary? } \u5728 15.1 \u8282 \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u600e\u4e48\u4f7f\u7528\u5b83\u3002 \u6b63\u5982\u4f60\u6240\u770b\u5230\u7684\u4e00\u6837\uff0c\u6240\u6709\u7684\u4f8b\u5b50\u90fd\u9075\u5faa\u540c\u4e00\u79cd\u547d\u540d\u89c4\u8303\uff1a\u9519\u8bef\u7c7b\u578b\u4ee5 ...Error \u7ed3\u5c3e\uff0c\u9519\u8bef\u53d8\u91cf\u4ee5 err... \u6216 Err... \u5f00\u5934\u6216\u8005\u76f4\u63a5\u53eb err \u6216 Err \u3002 syscall \u662f\u4f4e\u9636\u5916\u90e8\u5305\uff0c\u7528\u6765\u63d0\u4f9b\u7cfb\u7edf\u57fa\u672c\u8c03\u7528\u7684\u539f\u59cb\u63a5\u53e3\u3002\u5b83\u4eec\u8fd4\u56de\u5c01\u88c5\u6574\u6570\u7c7b\u578b\u9519\u8bef\u7801\u7684 syscall.Errno \uff1b\u7c7b\u578b syscall.Errno \u5b9e\u73b0\u4e86 Error \u63a5\u53e3\u3002 \u5927\u90e8\u5206 syscall \u51fd\u6570\u90fd\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u548c\u53ef\u80fd\u7684\u9519\u8bef\uff0c\u6bd4\u5982\uff1a r , err := syscall . Open ( name , mode , perm ) if err != nil { fmt . Println ( err . Error ()) } os \u5305\u4e5f\u63d0\u4f9b\u4e86\u4e00\u5957\u50cf os.EINAL \u8fd9\u6837\u7684\u6807\u51c6\u9519\u8bef\uff0c\u5b83\u4eec\u57fa\u4e8e syscall \u9519\u8bef\uff1a var ( EPERM Error = Errno ( syscall . EPERM ) ENOENT Error = Errno ( syscall . ENOENT ) ESRCH Error = Errno ( syscall . ESRCH ) EINTR Error = Errno ( syscall . EINTR ) EIO Error = Errno ( syscall . EIO ) ... ) 13.1.2 \u7528 fmt \u521b\u5efa\u9519\u8bef\u5bf9\u8c61 \u00b6 \u901a\u5e38\u4f60\u60f3\u8981\u8fd4\u56de\u5305\u542b\u9519\u8bef\u53c2\u6570\u7684\u66f4\u6709\u4fe1\u606f\u91cf\u7684\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\uff1a\u53ef\u4ee5\u7528 fmt.Errorf() \u6765\u5b9e\u73b0\uff1a\u5b83\u548c fmt.Printf() \u5b8c\u5168\u4e00\u6837\uff0c\u63a5\u6536\u4e00\u4e2a\u6216\u591a\u4e2a\u683c\u5f0f\u5360\u4f4d\u7b26\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u548c\u76f8\u5e94\u6570\u91cf\u7684\u5360\u4f4d\u53d8\u91cf\u3002\u548c\u6253\u5370\u4fe1\u606f\u4e0d\u540c\u7684\u662f\u5b83\u7528\u4fe1\u606f\u751f\u6210\u9519\u8bef\u5bf9\u8c61\u3002 \u6bd4\u5982\u5728\u524d\u9762\u7684\u5e73\u65b9\u6839\u4f8b\u5b50\u4e2d\u4f7f\u7528\uff1a if f < 0 { return 0 , fmt . Errorf ( \"math: square root of negative number %g\" , f ) } \u7b2c\u4e8c\u4e2a\u4f8b\u5b50\uff1a\u4ece\u547d\u4ee4\u884c\u8bfb\u53d6\u8f93\u5165\u65f6\uff0c\u5982\u679c\u52a0\u4e86 --help \u6216 -h \u6807\u5fd7\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u6709\u7528\u7684\u4fe1\u606f\u4ea7\u751f\u4e00\u4e2a\u9519\u8bef\uff1a if len ( os . Args ) > 1 && ( os . Args [ 1 ] == \"-h\" || os . Args [ 1 ] == \"--help\" ) { err = fmt . Errorf ( \"usage: %s infile.txt outfile.txt\" , filepath . Base ( os . Args [ 0 ])) return } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u9519\u8bef\u5904\u7406\u4e0e\u6d4b\u8bd5 \u4e0b\u4e00\u8282\uff1a \u8fd0\u884c\u65f6\u5f02\u5e38\u548c panic","title":"13.1 \u9519\u8bef\u5904\u7406"},{"location":"13.1/#131","text":"Go \u6709\u4e00\u4e2a\u9884\u5148\u5b9a\u4e49\u7684 error \u63a5\u53e3\u7c7b\u578b type error interface { Error () string } \u9519\u8bef\u503c\u7528\u6765\u8868\u793a\u5f02\u5e38\u72b6\u6001\uff1b\u6211\u4eec\u53ef\u4ee5\u5728 5.2 \u8282 \u4e2d\u770b\u5230\u5b83\u7684\u6807\u51c6\u7528\u6cd5\u3002\u5904\u7406\u6587\u4ef6\u64cd\u4f5c\u7684\u4f8b\u5b50\u53ef\u4ee5\u5728 12 \u7ae0 \u627e\u5230\uff1b\u6211\u4eec\u5c06\u5728 15 \u7ae0 \u770b\u5230\u7f51\u7edc\u64cd\u4f5c\u7684\u4f8b\u5b50\u3002 errors \u5305\u4e2d\u6709\u4e00\u4e2a errorString \u7ed3\u6784\u4f53\u5b9e\u73b0\u4e86 error \u63a5\u53e3\u3002\u5f53\u7a0b\u5e8f\u5904\u4e8e\u9519\u8bef\u72b6\u6001\u65f6\u53ef\u4ee5\u7528 os.Exit(1) \u6765\u4e2d\u6b62\u8fd0\u884c\u3002","title":"13.1 \u9519\u8bef\u5904\u7406"},{"location":"13.1/#1311","text":"\u4efb\u4f55\u65f6\u5019\u5f53\u4f60\u9700\u8981\u4e00\u4e2a\u65b0\u7684\u9519\u8bef\u7c7b\u578b\uff0c\u90fd\u53ef\u4ee5\u7528 errors \u5305\uff08\u5fc5\u987b\u5148 import \uff09\u7684 errors.New() \u51fd\u6570\u63a5\u6536\u5408\u9002\u7684\u9519\u8bef\u4fe1\u606f\u6765\u521b\u5efa\uff0c\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a err := errors . New ( \"math - square root of negative number\" ) \u5728\u793a\u4f8b 13.1 \u4e2d\u4f60\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u7b80\u5355\u7684\u7528\u4f8b\uff1a \u793a\u4f8b 13.1 errors.go \uff1a // errors.go package main import ( \"errors\" \"fmt\" ) var errNotFound error = errors . New ( \"Not found error\" ) func main () { fmt . Printf ( \"error: %v\" , errNotFound ) } // error: Not found error \u53ef\u4ee5\u628a\u5b83\u7528\u4e8e\u8ba1\u7b97\u5e73\u65b9\u6839\u51fd\u6570\u7684\u53c2\u6570\u6d4b\u8bd5\uff1a func Sqrt ( f float64 ) ( float64 , error ) { if f < 0 { return 0 , errors . New ( \"math - square root of negative number\" ) } // implementation of Sqrt } \u4f60\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u8c03\u7528 Sqrt() \u51fd\u6570\uff1a if f , err := Sqrt ( - 1 ); err != nil { fmt . Printf ( \"Error: %s\\n\" , err ) } \u7531\u4e8e fmt.Printf \u4f1a\u81ea\u52a8\u8c03\u7528 String() \u65b9\u6cd5 \uff08\u53c2\u89c1 10.7 \u8282 \uff09\uff0c\u6240\u4ee5\u9519\u8bef\u4fe1\u606f \u201c Error: math - square root of negative number \u201d \u4f1a\u6253\u5370\u51fa\u6765\u3002\u901a\u5e38\uff08\u9519\u8bef\u4fe1\u606f\uff09\u90fd\u4f1a\u6709\u50cf Error:... \u8fd9\u6837\u7684\u524d\u7f00\uff0c\u6240\u4ee5\u4f60\u7684\u9519\u8bef\u4fe1\u606f\u4e0d\u8981\u4ee5\u5927\u5199\u5b57\u6bcd\u5f00\u5934\uff08\u6ce8\uff1a\u82f1\u6587\u53ea\u6709\u53e5\u9996\u5355\u8bcd\u9996\u5b57\u6bcd\u5927\u5199\uff0c\u8fd9\u91cc\u5e94\u5f53\u662f\u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff09\u3002 \u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u81ea\u5b9a\u4e49\u9519\u8bef\u7ed3\u6784\u7c7b\u578b\u5f88\u6709\u610f\u4e49\u7684\uff0c\u53ef\u4ee5\u5305\u542b\u9664\u4e86\uff08\u4f4e\u5c42\u7ea7\u7684\uff09\u9519\u8bef\u4fe1\u606f\u4ee5\u5916\u7684\u5176\u5b83\u6709\u7528\u4fe1\u606f\uff0c\u4f8b\u5982\uff0c\u6b63\u5728\u8fdb\u884c\u7684\u64cd\u4f5c\uff08\u6253\u5f00\u6587\u4ef6\u7b49\uff09\uff0c\u5168\u8def\u5f84\u6216\u540d\u5b57\u3002\u770b\u4e0b\u9762\u4f8b\u5b50\u4e2d os.Open() \u64cd\u4f5c\u89e6\u53d1\u7684 PathError \u9519\u8bef\uff1a // PathError records an error and the operation and file path that caused it. type PathError struct { Op string // \"open\", \"unlink\", etc. Path string // The associated file. Err error // Returned by the system call. } func ( e * PathError ) Error () string { return e . Op + \" \" + e . Path + \": \" + e . Err . Error () } \u5982\u679c\u6709\u4e0d\u540c\u9519\u8bef\u6761\u4ef6\u53ef\u80fd\u53d1\u751f\uff0c\u90a3\u4e48\u5bf9\u5b9e\u9645\u7684\u9519\u8bef\u4f7f\u7528\u7c7b\u578b\u65ad\u8a00\u6216\u7c7b\u578b\u5224\u65ad\uff08type-switch\uff09\u662f\u5f88\u6709\u7528\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u6839\u636e\u9519\u8bef\u573a\u666f\u505a\u4e00\u4e9b\u8865\u6551\u548c\u6062\u590d\u64cd\u4f5c\u3002 // err != nil if e , ok := err .( * os . PathError ); ok { // remedy situation } \u6216\uff1a switch err := err .( type ) { case ParseError : PrintParseError ( err ) case PathError : PrintPathError ( err ) ... default : fmt . Printf ( \"Not a special error, just %s\\n\" , err ) } \u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u8003\u8651\u7528 json \u5305\u7684\u60c5\u51b5\u3002\u5f53 json.Decode() \u5728\u89e3\u6790 JSON \u6587\u6863\u53d1\u751f\u8bed\u6cd5\u9519\u8bef\u65f6\uff0c\u6307\u5b9a\u8fd4\u56de\u4e00\u4e2a SyntaxError \u7c7b\u578b\u7684\u9519\u8bef\uff1a type SyntaxError struct { msg string // description of error // error occurred after reading Offset bytes, from which line and columnnr can be obtained Offset int64 } func ( e * SyntaxError ) Error () string { return e . msg } \u5728\u8c03\u7528\u4ee3\u7801\u4e2d\u4f60\u53ef\u4ee5\u50cf\u8fd9\u6837\u7528\u7c7b\u578b\u65ad\u8a00\u6d4b\u8bd5\u9519\u8bef\u662f\u4e0d\u662f\u4e0a\u9762\u7684\u7c7b\u578b\uff1a if serr , ok := err .( * json . SyntaxError ); ok { line , col := findLine ( f , serr . Offset ) return fmt . Errorf ( \"%s:%d:%d: %v\" , f . Name (), line , col , err ) } \u5305\u4e5f\u53ef\u4ee5\u7528\u989d\u5916\u7684\u65b9\u6cd5 (methods)\u5b9a\u4e49\u7279\u5b9a\u7684\u9519\u8bef\uff0c\u6bd4\u5982 net.Error \uff1a package net type Error interface { Timeout () bool // Is the error a timeout? Temporary () bool // Is the error temporary? } \u5728 15.1 \u8282 \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u600e\u4e48\u4f7f\u7528\u5b83\u3002 \u6b63\u5982\u4f60\u6240\u770b\u5230\u7684\u4e00\u6837\uff0c\u6240\u6709\u7684\u4f8b\u5b50\u90fd\u9075\u5faa\u540c\u4e00\u79cd\u547d\u540d\u89c4\u8303\uff1a\u9519\u8bef\u7c7b\u578b\u4ee5 ...Error \u7ed3\u5c3e\uff0c\u9519\u8bef\u53d8\u91cf\u4ee5 err... \u6216 Err... \u5f00\u5934\u6216\u8005\u76f4\u63a5\u53eb err \u6216 Err \u3002 syscall \u662f\u4f4e\u9636\u5916\u90e8\u5305\uff0c\u7528\u6765\u63d0\u4f9b\u7cfb\u7edf\u57fa\u672c\u8c03\u7528\u7684\u539f\u59cb\u63a5\u53e3\u3002\u5b83\u4eec\u8fd4\u56de\u5c01\u88c5\u6574\u6570\u7c7b\u578b\u9519\u8bef\u7801\u7684 syscall.Errno \uff1b\u7c7b\u578b syscall.Errno \u5b9e\u73b0\u4e86 Error \u63a5\u53e3\u3002 \u5927\u90e8\u5206 syscall \u51fd\u6570\u90fd\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u548c\u53ef\u80fd\u7684\u9519\u8bef\uff0c\u6bd4\u5982\uff1a r , err := syscall . Open ( name , mode , perm ) if err != nil { fmt . Println ( err . Error ()) } os \u5305\u4e5f\u63d0\u4f9b\u4e86\u4e00\u5957\u50cf os.EINAL \u8fd9\u6837\u7684\u6807\u51c6\u9519\u8bef\uff0c\u5b83\u4eec\u57fa\u4e8e syscall \u9519\u8bef\uff1a var ( EPERM Error = Errno ( syscall . EPERM ) ENOENT Error = Errno ( syscall . ENOENT ) ESRCH Error = Errno ( syscall . ESRCH ) EINTR Error = Errno ( syscall . EINTR ) EIO Error = Errno ( syscall . EIO ) ... )","title":"13.1.1 \u5b9a\u4e49\u9519\u8bef"},{"location":"13.1/#1312-fmt","text":"\u901a\u5e38\u4f60\u60f3\u8981\u8fd4\u56de\u5305\u542b\u9519\u8bef\u53c2\u6570\u7684\u66f4\u6709\u4fe1\u606f\u91cf\u7684\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\uff1a\u53ef\u4ee5\u7528 fmt.Errorf() \u6765\u5b9e\u73b0\uff1a\u5b83\u548c fmt.Printf() \u5b8c\u5168\u4e00\u6837\uff0c\u63a5\u6536\u4e00\u4e2a\u6216\u591a\u4e2a\u683c\u5f0f\u5360\u4f4d\u7b26\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u548c\u76f8\u5e94\u6570\u91cf\u7684\u5360\u4f4d\u53d8\u91cf\u3002\u548c\u6253\u5370\u4fe1\u606f\u4e0d\u540c\u7684\u662f\u5b83\u7528\u4fe1\u606f\u751f\u6210\u9519\u8bef\u5bf9\u8c61\u3002 \u6bd4\u5982\u5728\u524d\u9762\u7684\u5e73\u65b9\u6839\u4f8b\u5b50\u4e2d\u4f7f\u7528\uff1a if f < 0 { return 0 , fmt . Errorf ( \"math: square root of negative number %g\" , f ) } \u7b2c\u4e8c\u4e2a\u4f8b\u5b50\uff1a\u4ece\u547d\u4ee4\u884c\u8bfb\u53d6\u8f93\u5165\u65f6\uff0c\u5982\u679c\u52a0\u4e86 --help \u6216 -h \u6807\u5fd7\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u6709\u7528\u7684\u4fe1\u606f\u4ea7\u751f\u4e00\u4e2a\u9519\u8bef\uff1a if len ( os . Args ) > 1 && ( os . Args [ 1 ] == \"-h\" || os . Args [ 1 ] == \"--help\" ) { err = fmt . Errorf ( \"usage: %s infile.txt outfile.txt\" , filepath . Base ( os . Args [ 0 ])) return }","title":"13.1.2 \u7528 fmt \u521b\u5efa\u9519\u8bef\u5bf9\u8c61"},{"location":"13.1/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u9519\u8bef\u5904\u7406\u4e0e\u6d4b\u8bd5 \u4e0b\u4e00\u8282\uff1a \u8fd0\u884c\u65f6\u5f02\u5e38\u548c panic","title":"\u94fe\u63a5"},{"location":"13.10/","text":"13.10 \u6027\u80fd\u8c03\u8bd5\uff1a\u5206\u6790\u5e76\u4f18\u5316 Go \u7a0b\u5e8f \u00b6 13.10.1 \u65f6\u95f4\u548c\u5185\u5b58\u6d88\u8017 \u00b6 \u53ef\u4ee5\u7528\u8fd9\u4e2a\u4fbf\u6377\u811a\u672c xtime \u6765\u6d4b\u91cf\uff1a #!/bin/sh /usr/bin/time -f '%Uu %Ss %er %MkB %C' \" $@ \" \u5728 Unix \u547d\u4ee4\u884c\u4e2d\u50cf\u8fd9\u6837\u4f7f\u7528 xtime goprogexec \uff0c\u8fd9\u91cc\u7684 progexec \u662f\u4e00\u4e2a Go \u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u8fd9\u53e5\u547d\u4ee4\u884c\u8f93\u51fa\u7c7b\u4f3c\uff1a56.63u 0.26s 56.92r 1642640kB progexec\uff0c\u5206\u522b\u5bf9\u5e94\u7528\u6237\u65f6\u95f4\uff0c\u7cfb\u7edf\u65f6\u95f4\uff0c\u5b9e\u9645\u65f6\u95f4\u548c\u6700\u5927\u5185\u5b58\u5360\u7528\u3002 13.10.2 \u7528 go test \u8c03\u8bd5 \u00b6 \u5982\u679c\u4ee3\u7801\u4f7f\u7528\u4e86 Go \u4e2d testing \u5305\u7684\u57fa\u51c6\u6d4b\u8bd5\u529f\u80fd\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 gotest \u6807\u51c6\u7684 -cpuprofile \u548c -memprofile \u6807\u5fd7\u5411\u6307\u5b9a\u6587\u4ef6\u5199\u5165 CPU \u6216 \u5185\u5b58\u4f7f\u7528\u60c5\u51b5\u62a5\u544a\u3002 \u4f7f\u7528\u65b9\u5f0f\uff1a go test -x -v -cpuprofile=prof.out -file x_test.go \u7f16\u8bd1\u6267\u884c x_test.go \u4e2d\u7684\u6d4b\u8bd5\uff0c\u5e76\u5411 prof.out \u6587\u4ef6\u4e2d\u5199\u5165 cpu \u6027\u80fd\u5206\u6790\u4fe1\u606f\u3002 13.10.3 \u7528 pprof \u8c03\u8bd5 \u00b6 \u4f60\u53ef\u4ee5\u5728\u5355\u673a\u7a0b\u5e8f progexec \u4e2d\u5f15\u5165 runtime/pprof \u5305\uff1b\u8fd9\u4e2a\u5305\u4ee5 pprof \u53ef\u89c6\u5316\u5de5\u5177\u9700\u8981\u7684\u683c\u5f0f\u5199\u5165\u8fd0\u884c\u65f6\u62a5\u544a\u6570\u636e\u3002\u5bf9\u4e8e CPU \u6027\u80fd\u5206\u6790\u6765\u8bf4\u4f60\u9700\u8981\u6dfb\u52a0\u4e00\u4e9b\u4ee3\u7801\uff1a var cpuprofile = flag . String ( \"cpuprofile\" , \"\" , \"write cpu profile to file\" ) func main () { flag . Parse () if * cpuprofile != \"\" { f , err := os . Create ( * cpuprofile ) if err != nil { log . Fatal ( err ) } pprof . StartCPUProfile ( f ) defer pprof . StopCPUProfile () } ... \u4ee3\u7801\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3a cpuprofile \u7684 flag\uff0c\u8c03\u7528 Go flag \u5e93\u6765\u89e3\u6790\u547d\u4ee4\u884c flag\uff0c\u5982\u679c\u547d\u4ee4\u884c\u8bbe\u7f6e\u4e86 cpuprofile flag\uff0c\u5219\u5f00\u59cb CPU \u6027\u80fd\u5206\u6790\u5e76\u628a\u7ed3\u679c\u91cd\u5b9a\u5411\u5230\u90a3\u4e2a\u6587\u4ef6\uff08 os.Create \u7528\u62ff\u5230\u7684\u540d\u5b57\u521b\u5efa\u4e86\u7528\u6765\u5199\u5165\u5206\u6790\u6570\u636e\u7684\u6587\u4ef6\uff09\u3002\u8fd9\u4e2a\u5206\u6790\u7a0b\u5e8f\u6700\u540e\u9700\u8981\u5728\u7a0b\u5e8f\u9000\u51fa\u4e4b\u524d\u8c03\u7528 StopCPUProfile() \u6765\u5237\u65b0\u6302\u8d77\u7684\u5199\u64cd\u4f5c\u5230\u6587\u4ef6\u4e2d\uff1b\u6211\u4eec\u7528 defer \u6765\u4fdd\u8bc1\u8fd9\u4e00\u5207\u4f1a\u5728 main() \u8fd4\u56de\u65f6\u89e6\u53d1\u3002 \u73b0\u5728\u7528\u8fd9\u4e2a flag \u8fd0\u884c\u7a0b\u5e8f\uff1a progexec -cpuprofile=progexec.prof \u7136\u540e\u53ef\u4ee5\u50cf\u8fd9\u6837\u7528 gopprof \u5de5\u5177\uff1a gopprof progexec progexec.prof gopprof \u7a0b\u5e8f\u662f Google pprofC++ \u5206\u6790\u5668\u7684\u4e00\u4e2a\u8f7b\u5fae\u53d8\u79cd\uff1b\u5173\u4e8e\u6b64\u5de5\u5177\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u53c2\u89c1 https://github.com/gperftools/gperftools \u3002 \u5982\u679c\u5f00\u542f\u4e86 CPU \u6027\u80fd\u5206\u6790\uff0cGo \u7a0b\u5e8f\u4f1a\u4ee5\u5927\u7ea6\u6bcf\u79d2 100 \u6b21\u7684\u9891\u7387\u963b\u585e\uff0c\u5e76\u8bb0\u5f55\u5f53\u524d\u6267\u884c\u7684 goroutine \u6808\u4e0a\u7684\u7a0b\u5e8f\u8ba1\u6570\u5668\u6837\u672c\u3002 \u6b64\u5de5\u5177\u4e00\u4e9b\u6709\u8da3\u7684\u547d\u4ee4\uff1a 1\uff09 topN \u7528\u6765\u5c55\u793a\u5206\u6790\u7ed3\u679c\u4e2d\u6700\u5f00\u5934\u7684 N \u4efd\u6837\u672c\uff0c\u4f8b\u5982\uff1a top5 \u5b83\u4f1a\u5c55\u793a\u5728\u7a0b\u5e8f\u8fd0\u884c\u671f\u95f4\u8c03\u7528\u6700\u9891\u7e41\u7684 5 \u4e2a\u51fd\u6570\uff0c\u8f93\u51fa\u5982\u4e0b\uff1a Total: 3099 samples 626 20.2% 20.2% 626 20.2% scanblock 309 10.0% 30.2% 2839 91.6% main.FindLoops ... \u7b2c 5 \u5217\u8868\u793a\u51fd\u6570\u7684\u8c03\u7528\u9891\u5ea6\u3002 2\uff09 web \u6216 web \u51fd\u6570\u540d \u8be5\u547d\u4ee4\u751f\u6210\u4e00\u4efd SVG \u683c\u5f0f\u7684\u5206\u6790\u6570\u636e\u56fe\u8868\uff0c\u5e76\u5728\u7f51\u7edc\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u5b83\uff08\u8fd8\u6709\u4e00\u4e2a gv \u547d\u4ee4\u53ef\u4ee5\u751f\u6210 PostScript \u683c\u5f0f\u7684\u6570\u636e\uff0c\u5e76\u5728 GhostView \u4e2d\u6253\u5f00\uff0c\u8fd9\u4e2a\u547d\u4ee4\u9700\u8981\u5b89\u88c5 graphviz\uff09\u3002\u51fd\u6570\u88ab\u8868\u793a\u6210\u4e0d\u540c\u7684\u77e9\u5f62\uff08\u88ab\u8c03\u7528\u8d8a\u591a\uff0c\u77e9\u5f62\u8d8a\u5927\uff09\uff0c\u7bad\u5934\u6307\u793a\u51fd\u6570\u8c03\u7528\u94fe\u3002 3\uff09 list \u51fd\u6570\u540d \u6216 weblist \u51fd\u6570\u540d \u5c55\u793a\u5bf9\u5e94\u51fd\u6570\u540d\u7684\u4ee3\u7801\u884c\u5217\u8868\uff0c\u7b2c 2 \u5217\u8868\u793a\u5f53\u524d\u884c\u6267\u884c\u6d88\u8017\u7684\u65f6\u95f4\uff0c\u8fd9\u6837\u5c31\u5f88\u597d\u5730\u6307\u51fa\u4e86\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u6d88\u8017\u6700\u5927\u7684\u4ee3\u7801\u3002 \u5982\u679c\u53d1\u73b0\u51fd\u6570 runtime.mallocgc \uff08\u5206\u914d\u5185\u5b58\u5e76\u6267\u884c\u5468\u671f\u6027\u7684\u5783\u573e\u56de\u6536\uff09\u8c03\u7528\u9891\u7e41\uff0c\u90a3\u4e48\u662f\u5e94\u8be5\u8fdb\u884c\u5185\u5b58\u5206\u6790\u7684\u65f6\u5019\u4e86\u3002\u627e\u51fa\u5783\u573e\u56de\u6536\u9891\u7e41\u6267\u884c\u7684\u539f\u56e0\uff0c\u548c\u5185\u5b58\u5927\u91cf\u5206\u914d\u7684\u6839\u6e90\u3002 \u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\u5fc5\u987b\u5728\u5408\u9002\u7684\u5730\u65b9\u6dfb\u52a0\u4e0b\u9762\u7684\u4ee3\u7801\uff1a var memprofile = flag . String ( \"memprofile\" , \"\" , \"write memory profile to this file\" ) ... CallToFunctionWhichAllocatesLotsOfMemory () if * memprofile != \"\" { f , err := os . Create ( * memprofile ) if err != nil { log . Fatal ( err ) } pprof . WriteHeapProfile ( f ) f . Close () return } \u7528 -memprofile flag \u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\uff1a progexec -memprofile=progexec.mprof \u7136\u540e\u4f60\u53ef\u4ee5\u50cf\u8fd9\u6837\u518d\u6b21\u4f7f\u7528 gopprof \u5de5\u5177\uff1a gopprof progexec progexec.mprof top5 \uff0c list \u51fd\u6570\u540d \u7b49\u547d\u4ee4\u540c\u6837\u9002\u7528\uff0c\u53ea\u4e0d\u8fc7\u73b0\u5728\u662f\u4ee5 Mb \u4e3a\u5355\u4f4d\u6d4b\u91cf\u5185\u5b58\u5206\u914d\u60c5\u51b5\uff0c\u8fd9\u662f top \u547d\u4ee4\u8f93\u51fa\u7684\u4f8b\u5b50\uff1a Total: 118.3 MB 66.1 55.8% 55.8% 103.7 87.7% main.FindLoops 30.5 25.8% 81.6% 30.5 25.8% main.*LSG\u00b7NewLoop ... \u4ece\u7b2c 1 \u5217\u53ef\u4ee5\u770b\u51fa\uff0c\u6700\u4e0a\u9762\u7684\u51fd\u6570\u5360\u7528\u4e86\u6700\u591a\u7684\u5185\u5b58\u3002 \u540c\u6837\u6709\u4e00\u4e2a\u62a5\u544a\u5185\u5b58\u5206\u914d\u8ba1\u6570\u7684\u6709\u8da3\u5de5\u5177\uff1a gopprof --inuse_objects progexec progexec.mprof \u5bf9\u4e8e web \u5e94\u7528\u6765\u8bf4\uff0c\u6709\u6807\u51c6\u7684 HTTP \u63a5\u53e3\u53ef\u4ee5\u5206\u6790\u6570\u636e\u3002\u5728 HTTP \u670d\u52a1\u4e2d\u6dfb\u52a0 import _ \"http/pprof\" \u4f1a\u4e3a /debug/pprof/ \u4e0b\u7684\u4e00\u4e9b URL \u5b89\u88c5\u5904\u7406\u5668\u3002\u7136\u540e\u4f60\u53ef\u4ee5\u7528\u4e00\u4e2a\u552f\u4e00\u7684\u53c2\u6570\u2014\u2014\u4f60\u670d\u52a1\u4e2d\u7684\u5206\u6790\u6570\u636e\u7684 URL \u6765\u6267\u884c gopprof \u547d\u4ee4\u2014\u2014\u5b83\u4f1a\u4e0b\u8f7d\u5e76\u6267\u884c\u5728\u7ebf\u5206\u6790\u3002 gopprof http://localhost:6060/debug/pprof/profile # 30-second CPU profile gopprof http://localhost:6060/debug/pprof/heap # heap profile \u5728 Go-blog\uff08\u5f15\u7528 15\uff09\u4e2d\u6709\u4e00\u7bc7\u5f88\u597d\u7684\u6587\u7ae0\u7528\u5177\u4f53\u7684\u4f8b\u5b50\u8fdb\u884c\u4e86\u5206\u6790\uff1a\u5206\u6790 Go \u7a0b\u5e8f\uff082011\u5e746\u6708\uff09\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7528\uff08\u6d4b\u8bd5\u6570\u636e\uff09\u8868\u9a71\u52a8\u6d4b\u8bd5 \u4e0b\u4e00\u7ae0\uff1a \u534f\u7a0b\uff08goroutine\uff09\u4e0e\u901a\u9053\uff08channel\uff09","title":"13.10 \u6027\u80fd\u8c03\u8bd5 \u5206\u6790\u5e76\u4f18\u5316 Go \u7a0b\u5e8f"},{"location":"13.10/#1310-go","text":"","title":"13.10 \u6027\u80fd\u8c03\u8bd5\uff1a\u5206\u6790\u5e76\u4f18\u5316 Go \u7a0b\u5e8f"},{"location":"13.10/#13101","text":"\u53ef\u4ee5\u7528\u8fd9\u4e2a\u4fbf\u6377\u811a\u672c xtime \u6765\u6d4b\u91cf\uff1a #!/bin/sh /usr/bin/time -f '%Uu %Ss %er %MkB %C' \" $@ \" \u5728 Unix \u547d\u4ee4\u884c\u4e2d\u50cf\u8fd9\u6837\u4f7f\u7528 xtime goprogexec \uff0c\u8fd9\u91cc\u7684 progexec \u662f\u4e00\u4e2a Go \u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u8fd9\u53e5\u547d\u4ee4\u884c\u8f93\u51fa\u7c7b\u4f3c\uff1a56.63u 0.26s 56.92r 1642640kB progexec\uff0c\u5206\u522b\u5bf9\u5e94\u7528\u6237\u65f6\u95f4\uff0c\u7cfb\u7edf\u65f6\u95f4\uff0c\u5b9e\u9645\u65f6\u95f4\u548c\u6700\u5927\u5185\u5b58\u5360\u7528\u3002","title":"13.10.1 \u65f6\u95f4\u548c\u5185\u5b58\u6d88\u8017"},{"location":"13.10/#13102-go-test","text":"\u5982\u679c\u4ee3\u7801\u4f7f\u7528\u4e86 Go \u4e2d testing \u5305\u7684\u57fa\u51c6\u6d4b\u8bd5\u529f\u80fd\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 gotest \u6807\u51c6\u7684 -cpuprofile \u548c -memprofile \u6807\u5fd7\u5411\u6307\u5b9a\u6587\u4ef6\u5199\u5165 CPU \u6216 \u5185\u5b58\u4f7f\u7528\u60c5\u51b5\u62a5\u544a\u3002 \u4f7f\u7528\u65b9\u5f0f\uff1a go test -x -v -cpuprofile=prof.out -file x_test.go \u7f16\u8bd1\u6267\u884c x_test.go \u4e2d\u7684\u6d4b\u8bd5\uff0c\u5e76\u5411 prof.out \u6587\u4ef6\u4e2d\u5199\u5165 cpu \u6027\u80fd\u5206\u6790\u4fe1\u606f\u3002","title":"13.10.2 \u7528 go test \u8c03\u8bd5"},{"location":"13.10/#13103-pprof","text":"\u4f60\u53ef\u4ee5\u5728\u5355\u673a\u7a0b\u5e8f progexec \u4e2d\u5f15\u5165 runtime/pprof \u5305\uff1b\u8fd9\u4e2a\u5305\u4ee5 pprof \u53ef\u89c6\u5316\u5de5\u5177\u9700\u8981\u7684\u683c\u5f0f\u5199\u5165\u8fd0\u884c\u65f6\u62a5\u544a\u6570\u636e\u3002\u5bf9\u4e8e CPU \u6027\u80fd\u5206\u6790\u6765\u8bf4\u4f60\u9700\u8981\u6dfb\u52a0\u4e00\u4e9b\u4ee3\u7801\uff1a var cpuprofile = flag . String ( \"cpuprofile\" , \"\" , \"write cpu profile to file\" ) func main () { flag . Parse () if * cpuprofile != \"\" { f , err := os . Create ( * cpuprofile ) if err != nil { log . Fatal ( err ) } pprof . StartCPUProfile ( f ) defer pprof . StopCPUProfile () } ... \u4ee3\u7801\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3a cpuprofile \u7684 flag\uff0c\u8c03\u7528 Go flag \u5e93\u6765\u89e3\u6790\u547d\u4ee4\u884c flag\uff0c\u5982\u679c\u547d\u4ee4\u884c\u8bbe\u7f6e\u4e86 cpuprofile flag\uff0c\u5219\u5f00\u59cb CPU \u6027\u80fd\u5206\u6790\u5e76\u628a\u7ed3\u679c\u91cd\u5b9a\u5411\u5230\u90a3\u4e2a\u6587\u4ef6\uff08 os.Create \u7528\u62ff\u5230\u7684\u540d\u5b57\u521b\u5efa\u4e86\u7528\u6765\u5199\u5165\u5206\u6790\u6570\u636e\u7684\u6587\u4ef6\uff09\u3002\u8fd9\u4e2a\u5206\u6790\u7a0b\u5e8f\u6700\u540e\u9700\u8981\u5728\u7a0b\u5e8f\u9000\u51fa\u4e4b\u524d\u8c03\u7528 StopCPUProfile() \u6765\u5237\u65b0\u6302\u8d77\u7684\u5199\u64cd\u4f5c\u5230\u6587\u4ef6\u4e2d\uff1b\u6211\u4eec\u7528 defer \u6765\u4fdd\u8bc1\u8fd9\u4e00\u5207\u4f1a\u5728 main() \u8fd4\u56de\u65f6\u89e6\u53d1\u3002 \u73b0\u5728\u7528\u8fd9\u4e2a flag \u8fd0\u884c\u7a0b\u5e8f\uff1a progexec -cpuprofile=progexec.prof \u7136\u540e\u53ef\u4ee5\u50cf\u8fd9\u6837\u7528 gopprof \u5de5\u5177\uff1a gopprof progexec progexec.prof gopprof \u7a0b\u5e8f\u662f Google pprofC++ \u5206\u6790\u5668\u7684\u4e00\u4e2a\u8f7b\u5fae\u53d8\u79cd\uff1b\u5173\u4e8e\u6b64\u5de5\u5177\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u53c2\u89c1 https://github.com/gperftools/gperftools \u3002 \u5982\u679c\u5f00\u542f\u4e86 CPU \u6027\u80fd\u5206\u6790\uff0cGo \u7a0b\u5e8f\u4f1a\u4ee5\u5927\u7ea6\u6bcf\u79d2 100 \u6b21\u7684\u9891\u7387\u963b\u585e\uff0c\u5e76\u8bb0\u5f55\u5f53\u524d\u6267\u884c\u7684 goroutine \u6808\u4e0a\u7684\u7a0b\u5e8f\u8ba1\u6570\u5668\u6837\u672c\u3002 \u6b64\u5de5\u5177\u4e00\u4e9b\u6709\u8da3\u7684\u547d\u4ee4\uff1a 1\uff09 topN \u7528\u6765\u5c55\u793a\u5206\u6790\u7ed3\u679c\u4e2d\u6700\u5f00\u5934\u7684 N \u4efd\u6837\u672c\uff0c\u4f8b\u5982\uff1a top5 \u5b83\u4f1a\u5c55\u793a\u5728\u7a0b\u5e8f\u8fd0\u884c\u671f\u95f4\u8c03\u7528\u6700\u9891\u7e41\u7684 5 \u4e2a\u51fd\u6570\uff0c\u8f93\u51fa\u5982\u4e0b\uff1a Total: 3099 samples 626 20.2% 20.2% 626 20.2% scanblock 309 10.0% 30.2% 2839 91.6% main.FindLoops ... \u7b2c 5 \u5217\u8868\u793a\u51fd\u6570\u7684\u8c03\u7528\u9891\u5ea6\u3002 2\uff09 web \u6216 web \u51fd\u6570\u540d \u8be5\u547d\u4ee4\u751f\u6210\u4e00\u4efd SVG \u683c\u5f0f\u7684\u5206\u6790\u6570\u636e\u56fe\u8868\uff0c\u5e76\u5728\u7f51\u7edc\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u5b83\uff08\u8fd8\u6709\u4e00\u4e2a gv \u547d\u4ee4\u53ef\u4ee5\u751f\u6210 PostScript \u683c\u5f0f\u7684\u6570\u636e\uff0c\u5e76\u5728 GhostView \u4e2d\u6253\u5f00\uff0c\u8fd9\u4e2a\u547d\u4ee4\u9700\u8981\u5b89\u88c5 graphviz\uff09\u3002\u51fd\u6570\u88ab\u8868\u793a\u6210\u4e0d\u540c\u7684\u77e9\u5f62\uff08\u88ab\u8c03\u7528\u8d8a\u591a\uff0c\u77e9\u5f62\u8d8a\u5927\uff09\uff0c\u7bad\u5934\u6307\u793a\u51fd\u6570\u8c03\u7528\u94fe\u3002 3\uff09 list \u51fd\u6570\u540d \u6216 weblist \u51fd\u6570\u540d \u5c55\u793a\u5bf9\u5e94\u51fd\u6570\u540d\u7684\u4ee3\u7801\u884c\u5217\u8868\uff0c\u7b2c 2 \u5217\u8868\u793a\u5f53\u524d\u884c\u6267\u884c\u6d88\u8017\u7684\u65f6\u95f4\uff0c\u8fd9\u6837\u5c31\u5f88\u597d\u5730\u6307\u51fa\u4e86\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u6d88\u8017\u6700\u5927\u7684\u4ee3\u7801\u3002 \u5982\u679c\u53d1\u73b0\u51fd\u6570 runtime.mallocgc \uff08\u5206\u914d\u5185\u5b58\u5e76\u6267\u884c\u5468\u671f\u6027\u7684\u5783\u573e\u56de\u6536\uff09\u8c03\u7528\u9891\u7e41\uff0c\u90a3\u4e48\u662f\u5e94\u8be5\u8fdb\u884c\u5185\u5b58\u5206\u6790\u7684\u65f6\u5019\u4e86\u3002\u627e\u51fa\u5783\u573e\u56de\u6536\u9891\u7e41\u6267\u884c\u7684\u539f\u56e0\uff0c\u548c\u5185\u5b58\u5927\u91cf\u5206\u914d\u7684\u6839\u6e90\u3002 \u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\u5fc5\u987b\u5728\u5408\u9002\u7684\u5730\u65b9\u6dfb\u52a0\u4e0b\u9762\u7684\u4ee3\u7801\uff1a var memprofile = flag . String ( \"memprofile\" , \"\" , \"write memory profile to this file\" ) ... CallToFunctionWhichAllocatesLotsOfMemory () if * memprofile != \"\" { f , err := os . Create ( * memprofile ) if err != nil { log . Fatal ( err ) } pprof . WriteHeapProfile ( f ) f . Close () return } \u7528 -memprofile flag \u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\uff1a progexec -memprofile=progexec.mprof \u7136\u540e\u4f60\u53ef\u4ee5\u50cf\u8fd9\u6837\u518d\u6b21\u4f7f\u7528 gopprof \u5de5\u5177\uff1a gopprof progexec progexec.mprof top5 \uff0c list \u51fd\u6570\u540d \u7b49\u547d\u4ee4\u540c\u6837\u9002\u7528\uff0c\u53ea\u4e0d\u8fc7\u73b0\u5728\u662f\u4ee5 Mb \u4e3a\u5355\u4f4d\u6d4b\u91cf\u5185\u5b58\u5206\u914d\u60c5\u51b5\uff0c\u8fd9\u662f top \u547d\u4ee4\u8f93\u51fa\u7684\u4f8b\u5b50\uff1a Total: 118.3 MB 66.1 55.8% 55.8% 103.7 87.7% main.FindLoops 30.5 25.8% 81.6% 30.5 25.8% main.*LSG\u00b7NewLoop ... \u4ece\u7b2c 1 \u5217\u53ef\u4ee5\u770b\u51fa\uff0c\u6700\u4e0a\u9762\u7684\u51fd\u6570\u5360\u7528\u4e86\u6700\u591a\u7684\u5185\u5b58\u3002 \u540c\u6837\u6709\u4e00\u4e2a\u62a5\u544a\u5185\u5b58\u5206\u914d\u8ba1\u6570\u7684\u6709\u8da3\u5de5\u5177\uff1a gopprof --inuse_objects progexec progexec.mprof \u5bf9\u4e8e web \u5e94\u7528\u6765\u8bf4\uff0c\u6709\u6807\u51c6\u7684 HTTP \u63a5\u53e3\u53ef\u4ee5\u5206\u6790\u6570\u636e\u3002\u5728 HTTP \u670d\u52a1\u4e2d\u6dfb\u52a0 import _ \"http/pprof\" \u4f1a\u4e3a /debug/pprof/ \u4e0b\u7684\u4e00\u4e9b URL \u5b89\u88c5\u5904\u7406\u5668\u3002\u7136\u540e\u4f60\u53ef\u4ee5\u7528\u4e00\u4e2a\u552f\u4e00\u7684\u53c2\u6570\u2014\u2014\u4f60\u670d\u52a1\u4e2d\u7684\u5206\u6790\u6570\u636e\u7684 URL \u6765\u6267\u884c gopprof \u547d\u4ee4\u2014\u2014\u5b83\u4f1a\u4e0b\u8f7d\u5e76\u6267\u884c\u5728\u7ebf\u5206\u6790\u3002 gopprof http://localhost:6060/debug/pprof/profile # 30-second CPU profile gopprof http://localhost:6060/debug/pprof/heap # heap profile \u5728 Go-blog\uff08\u5f15\u7528 15\uff09\u4e2d\u6709\u4e00\u7bc7\u5f88\u597d\u7684\u6587\u7ae0\u7528\u5177\u4f53\u7684\u4f8b\u5b50\u8fdb\u884c\u4e86\u5206\u6790\uff1a\u5206\u6790 Go \u7a0b\u5e8f\uff082011\u5e746\u6708\uff09\u3002","title":"13.10.3 \u7528 pprof \u8c03\u8bd5"},{"location":"13.10/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7528\uff08\u6d4b\u8bd5\u6570\u636e\uff09\u8868\u9a71\u52a8\u6d4b\u8bd5 \u4e0b\u4e00\u7ae0\uff1a \u534f\u7a0b\uff08goroutine\uff09\u4e0e\u901a\u9053\uff08channel\uff09","title":"\u94fe\u63a5"},{"location":"13.2/","text":"13.2 \u8fd0\u884c\u65f6\u5f02\u5e38\u548c panic \u00b6 \u5f53\u53d1\u751f\u50cf\u6570\u7ec4\u4e0b\u6807\u8d8a\u754c\u6216\u7c7b\u578b\u65ad\u8a00\u5931\u8d25\u8fd9\u6837\u7684\u8fd0\u884c\u9519\u8bef\u65f6\uff0cGo \u8fd0\u884c\u65f6\u4f1a\u89e6\u53d1*\u8fd0\u884c\u65f6 panic*\uff0c\u4f34\u968f\u7740\u7a0b\u5e8f\u7684\u5d29\u6e83\u629b\u51fa\u4e00\u4e2a runtime.Error \u63a5\u53e3\u7c7b\u578b\u7684\u503c\u3002\u8fd9\u4e2a\u9519\u8bef\u503c\u6709\u4e2a RuntimeError() \u65b9\u6cd5\u7528\u4e8e\u533a\u522b\u666e\u901a\u9519\u8bef\u3002 panic() \u53ef\u4ee5\u76f4\u63a5\u4ece\u4ee3\u7801\u521d\u59cb\u5316\uff1a\u5f53\u9519\u8bef\u6761\u4ef6\uff08\u6211\u4eec\u6240\u6d4b\u8bd5\u7684\u4ee3\u7801\uff09\u5f88\u4e25\u82db\u4e14\u4e0d\u53ef\u6062\u590d\uff0c\u7a0b\u5e8f\u4e0d\u80fd\u7ee7\u7eed\u8fd0\u884c\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 panic() \u51fd\u6570\u4ea7\u751f\u4e00\u4e2a\u4e2d\u6b62\u7a0b\u5e8f\u7684\u8fd0\u884c\u65f6\u9519\u8bef\u3002 panic() \u63a5\u6536\u4e00\u4e2a\u505a\u4efb\u610f\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u901a\u5e38\u662f\u5b57\u7b26\u4e32\uff0c\u5728\u7a0b\u5e8f\u6b7b\u4ea1\u65f6\u88ab\u6253\u5370\u51fa\u6765\u3002Go \u8fd0\u884c\u65f6\u8d1f\u8d23\u4e2d\u6b62\u7a0b\u5e8f\u5e76\u7ed9\u51fa\u8c03\u8bd5\u4fe1\u606f\u3002\u5728\u793a\u4f8b 13.2 panic.go \u4e2d\u9610\u660e\u4e86\u5b83\u7684\u5de5\u4f5c\u65b9\u5f0f\uff1a package main import \"fmt\" func main () { fmt . Println ( \"Starting the program\" ) panic ( \"A severe error occurred: stopping the program!\" ) fmt . Println ( \"Ending the program\" ) } \u8f93\u51fa\u5982\u4e0b\uff1a Starting the program panic: A severe error occurred: stopping the program! panic PC=0x4f3038 runtime.panic+0x99 /go/src/pkg/runtime/proc.c:1032 runtime.panic(0x442938, 0x4f08e8) main.main+0xa5 E:/Go/GoBoek/code examples/chapter 13/panic.go:8 main.main() runtime.mainstart+0xf 386/asm.s:84 runtime.mainstart() runtime.goexit /go/src/pkg/runtime/proc.c:148 runtime.goexit() ---- Error run E:/Go/GoBoek/code examples/chapter 13/panic.exe with code Crashed ---- Program exited with code -1073741783 \u4e00\u4e2a\u68c0\u67e5\u7a0b\u5e8f\u662f\u5426\u88ab\u5df2\u77e5\u7528\u6237\u542f\u52a8\u7684\u5177\u4f53\u4f8b\u5b50\uff1a var user = os . Getenv ( \"USER\" ) func check () { if user == \"\" { panic ( \"Unknown user: no value for $USER\" ) } } \u53ef\u4ee5\u5728\u5bfc\u5165\u5305\u7684 init() \u51fd\u6570\u4e2d\u68c0\u67e5\u8fd9\u4e9b\u3002 \u5f53\u53d1\u751f\u9519\u8bef\u5fc5\u987b\u4e2d\u6b62\u7a0b\u5e8f\u65f6\uff0c panic() \u53ef\u4ee5\u7528\u4e8e\u9519\u8bef\u5904\u7406\u6a21\u5f0f\uff1a if err != nil { panic ( \"ERROR occurred:\" + err . Error ()) } Go panicking \uff1a \u5728\u591a\u5c42\u5d4c\u5957\u7684\u51fd\u6570\u8c03\u7528\u4e2d\u8c03\u7528 panic() \uff0c\u53ef\u4ee5\u9a6c\u4e0a\u4e2d\u6b62\u5f53\u524d\u51fd\u6570\u7684\u6267\u884c\uff0c\u6240\u6709\u7684 defer \u8bed\u53e5\u90fd\u4f1a\u4fdd\u8bc1\u6267\u884c\u5e76\u628a\u63a7\u5236\u6743\u4ea4\u8fd8\u7ed9\u63a5\u6536\u5230 panic \u7684\u51fd\u6570\u8c03\u7528\u8005\u3002\u8fd9\u6837\u5411\u4e0a\u5192\u6ce1\u76f4\u5230\u6700\u9876\u5c42\uff0c\u5e76\u6267\u884c\uff08\u6bcf\u5c42\u7684\uff09 defer \uff0c\u5728\u6808\u9876\u5904\u7a0b\u5e8f\u5d29\u6e83\uff0c\u5e76\u5728\u547d\u4ee4\u884c\u4e2d\u7528\u4f20\u7ed9 panic() \u7684\u503c\u62a5\u544a\u9519\u8bef\u60c5\u51b5\uff1a\u8fd9\u4e2a\u7ec8\u6b62\u8fc7\u7a0b\u5c31\u662f panicking \u3002 \u6807\u51c6\u5e93\u4e2d\u6709\u8bb8\u591a\u5305\u542b Must \u524d\u7f00\u7684\u51fd\u6570\uff0c\u50cf regexp.MustComplie() \u548c template.Must() \uff1b\u5f53\u6b63\u5219\u8868\u8fbe\u5f0f\u6216\u6a21\u677f\u4e2d\u8f6c\u5165\u7684\u8f6c\u6362\u5b57\u7b26\u4e32\u5bfc\u81f4\u9519\u8bef\u65f6\uff0c\u8fd9\u4e9b\u51fd\u6570\u4f1a panic() \u3002 \u4e0d\u80fd\u968f\u610f\u5730\u7528 panic() \u4e2d\u6b62\u7a0b\u5e8f\uff0c\u5fc5\u987b\u5c3d\u529b\u8865\u6551\u9519\u8bef\u8ba9\u7a0b\u5e8f\u80fd\u7ee7\u7eed\u6267\u884c\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u9519\u8bef\u5904\u7406 \u4e0b\u4e00\u8282\uff1a \u4ece panic \u4e2d\u6062\u590d (recover)","title":"13.2 \u8fd0\u884c\u65f6\u5f02\u5e38\u548c panic"},{"location":"13.2/#132-panic","text":"\u5f53\u53d1\u751f\u50cf\u6570\u7ec4\u4e0b\u6807\u8d8a\u754c\u6216\u7c7b\u578b\u65ad\u8a00\u5931\u8d25\u8fd9\u6837\u7684\u8fd0\u884c\u9519\u8bef\u65f6\uff0cGo \u8fd0\u884c\u65f6\u4f1a\u89e6\u53d1*\u8fd0\u884c\u65f6 panic*\uff0c\u4f34\u968f\u7740\u7a0b\u5e8f\u7684\u5d29\u6e83\u629b\u51fa\u4e00\u4e2a runtime.Error \u63a5\u53e3\u7c7b\u578b\u7684\u503c\u3002\u8fd9\u4e2a\u9519\u8bef\u503c\u6709\u4e2a RuntimeError() \u65b9\u6cd5\u7528\u4e8e\u533a\u522b\u666e\u901a\u9519\u8bef\u3002 panic() \u53ef\u4ee5\u76f4\u63a5\u4ece\u4ee3\u7801\u521d\u59cb\u5316\uff1a\u5f53\u9519\u8bef\u6761\u4ef6\uff08\u6211\u4eec\u6240\u6d4b\u8bd5\u7684\u4ee3\u7801\uff09\u5f88\u4e25\u82db\u4e14\u4e0d\u53ef\u6062\u590d\uff0c\u7a0b\u5e8f\u4e0d\u80fd\u7ee7\u7eed\u8fd0\u884c\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 panic() \u51fd\u6570\u4ea7\u751f\u4e00\u4e2a\u4e2d\u6b62\u7a0b\u5e8f\u7684\u8fd0\u884c\u65f6\u9519\u8bef\u3002 panic() \u63a5\u6536\u4e00\u4e2a\u505a\u4efb\u610f\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u901a\u5e38\u662f\u5b57\u7b26\u4e32\uff0c\u5728\u7a0b\u5e8f\u6b7b\u4ea1\u65f6\u88ab\u6253\u5370\u51fa\u6765\u3002Go \u8fd0\u884c\u65f6\u8d1f\u8d23\u4e2d\u6b62\u7a0b\u5e8f\u5e76\u7ed9\u51fa\u8c03\u8bd5\u4fe1\u606f\u3002\u5728\u793a\u4f8b 13.2 panic.go \u4e2d\u9610\u660e\u4e86\u5b83\u7684\u5de5\u4f5c\u65b9\u5f0f\uff1a package main import \"fmt\" func main () { fmt . Println ( \"Starting the program\" ) panic ( \"A severe error occurred: stopping the program!\" ) fmt . Println ( \"Ending the program\" ) } \u8f93\u51fa\u5982\u4e0b\uff1a Starting the program panic: A severe error occurred: stopping the program! panic PC=0x4f3038 runtime.panic+0x99 /go/src/pkg/runtime/proc.c:1032 runtime.panic(0x442938, 0x4f08e8) main.main+0xa5 E:/Go/GoBoek/code examples/chapter 13/panic.go:8 main.main() runtime.mainstart+0xf 386/asm.s:84 runtime.mainstart() runtime.goexit /go/src/pkg/runtime/proc.c:148 runtime.goexit() ---- Error run E:/Go/GoBoek/code examples/chapter 13/panic.exe with code Crashed ---- Program exited with code -1073741783 \u4e00\u4e2a\u68c0\u67e5\u7a0b\u5e8f\u662f\u5426\u88ab\u5df2\u77e5\u7528\u6237\u542f\u52a8\u7684\u5177\u4f53\u4f8b\u5b50\uff1a var user = os . Getenv ( \"USER\" ) func check () { if user == \"\" { panic ( \"Unknown user: no value for $USER\" ) } } \u53ef\u4ee5\u5728\u5bfc\u5165\u5305\u7684 init() \u51fd\u6570\u4e2d\u68c0\u67e5\u8fd9\u4e9b\u3002 \u5f53\u53d1\u751f\u9519\u8bef\u5fc5\u987b\u4e2d\u6b62\u7a0b\u5e8f\u65f6\uff0c panic() \u53ef\u4ee5\u7528\u4e8e\u9519\u8bef\u5904\u7406\u6a21\u5f0f\uff1a if err != nil { panic ( \"ERROR occurred:\" + err . Error ()) } Go panicking \uff1a \u5728\u591a\u5c42\u5d4c\u5957\u7684\u51fd\u6570\u8c03\u7528\u4e2d\u8c03\u7528 panic() \uff0c\u53ef\u4ee5\u9a6c\u4e0a\u4e2d\u6b62\u5f53\u524d\u51fd\u6570\u7684\u6267\u884c\uff0c\u6240\u6709\u7684 defer \u8bed\u53e5\u90fd\u4f1a\u4fdd\u8bc1\u6267\u884c\u5e76\u628a\u63a7\u5236\u6743\u4ea4\u8fd8\u7ed9\u63a5\u6536\u5230 panic \u7684\u51fd\u6570\u8c03\u7528\u8005\u3002\u8fd9\u6837\u5411\u4e0a\u5192\u6ce1\u76f4\u5230\u6700\u9876\u5c42\uff0c\u5e76\u6267\u884c\uff08\u6bcf\u5c42\u7684\uff09 defer \uff0c\u5728\u6808\u9876\u5904\u7a0b\u5e8f\u5d29\u6e83\uff0c\u5e76\u5728\u547d\u4ee4\u884c\u4e2d\u7528\u4f20\u7ed9 panic() \u7684\u503c\u62a5\u544a\u9519\u8bef\u60c5\u51b5\uff1a\u8fd9\u4e2a\u7ec8\u6b62\u8fc7\u7a0b\u5c31\u662f panicking \u3002 \u6807\u51c6\u5e93\u4e2d\u6709\u8bb8\u591a\u5305\u542b Must \u524d\u7f00\u7684\u51fd\u6570\uff0c\u50cf regexp.MustComplie() \u548c template.Must() \uff1b\u5f53\u6b63\u5219\u8868\u8fbe\u5f0f\u6216\u6a21\u677f\u4e2d\u8f6c\u5165\u7684\u8f6c\u6362\u5b57\u7b26\u4e32\u5bfc\u81f4\u9519\u8bef\u65f6\uff0c\u8fd9\u4e9b\u51fd\u6570\u4f1a panic() \u3002 \u4e0d\u80fd\u968f\u610f\u5730\u7528 panic() \u4e2d\u6b62\u7a0b\u5e8f\uff0c\u5fc5\u987b\u5c3d\u529b\u8865\u6551\u9519\u8bef\u8ba9\u7a0b\u5e8f\u80fd\u7ee7\u7eed\u6267\u884c\u3002","title":"13.2 \u8fd0\u884c\u65f6\u5f02\u5e38\u548c panic"},{"location":"13.2/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u9519\u8bef\u5904\u7406 \u4e0b\u4e00\u8282\uff1a \u4ece panic \u4e2d\u6062\u590d (recover)","title":"\u94fe\u63a5"},{"location":"13.3/","text":"13.3 \u4ece panic \u4e2d\u6062\u590d (recover) \u00b6 \u6b63\u5982\u540d\u5b57\u4e00\u6837\uff0c\u8fd9\u4e2a ( recover() ) \u5185\u5efa\u51fd\u6570\u88ab\u7528\u4e8e\u4ece panic \u6216\u9519\u8bef\u573a\u666f\u4e2d\u6062\u590d\uff1a\u8ba9\u7a0b\u5e8f\u53ef\u4ee5\u4ece panicking \u91cd\u65b0\u83b7\u5f97\u63a7\u5236\u6743\uff0c\u505c\u6b62\u7ec8\u6b62\u8fc7\u7a0b\u8fdb\u800c\u6062\u590d\u6b63\u5e38\u6267\u884c\u3002 recover \u53ea\u80fd\u5728 defer \u4fee\u9970\u7684\u51fd\u6570\uff08\u53c2\u89c1 6.4 \u8282 \uff09\u4e2d\u4f7f\u7528\uff1a\u7528\u4e8e\u53d6\u5f97 panic() \u8c03\u7528\u4e2d\u4f20\u9012\u8fc7\u6765\u7684\u9519\u8bef\u503c\uff0c\u5982\u679c\u662f\u6b63\u5e38\u6267\u884c\uff0c\u8c03\u7528 recover() \u4f1a\u8fd4\u56de nil \uff0c\u4e14\u6ca1\u6709\u5176\u5b83\u6548\u679c\u3002 \u603b\u7ed3 \uff1a panic() \u4f1a\u5bfc\u81f4\u6808\u88ab\u5c55\u5f00\u76f4\u5230 defer \u4fee\u9970\u7684 recover() \u88ab\u8c03\u7528\u6216\u8005\u7a0b\u5e8f\u4e2d\u6b62\u3002 \u4e0b\u9762\u4f8b\u5b50\u4e2d\u7684 protect() \u51fd\u6570\u8c03\u7528\u51fd\u6570\u53c2\u6570 g \u6765\u4fdd\u62a4\u8c03\u7528\u8005\u9632\u6b62\u4ece g \u4e2d\u629b\u51fa\u7684\u8fd0\u884c\u65f6 panic\uff0c\u5e76\u5c55\u793a panic \u4e2d\u7684\u4fe1\u606f\uff1a func protect ( g func ()) { defer func () { log . Println ( \"done\" ) // Println executes normally even if there is a panic if err := recover (); err != nil { log . Printf ( \"run time panic: %v\" , err ) } }() log . Println ( \"start\" ) g () // possible runtime-error } \u8fd9\u8ddf Java \u548c .NET \u8fd9\u6837\u7684\u8bed\u8a00\u4e2d\u7684 catch \u5757\u7c7b\u4f3c\u3002 log \u5305\u5b9e\u73b0\u4e86\u7b80\u5355\u7684\u65e5\u5fd7\u529f\u80fd\uff1a\u9ed8\u8ba4\u7684 log \u5bf9\u8c61\u5411\u6807\u51c6\u9519\u8bef\u8f93\u51fa\u4e2d\u5199\u5165\u5e76\u6253\u5370\u6bcf\u6761\u65e5\u5fd7\u4fe1\u606f\u7684\u65e5\u671f\u548c\u65f6\u95f4\u3002\u9664\u4e86 Println \u548c Printf \u51fd\u6570\uff0c\u5176\u5b83\u7684\u81f4\u547d\u6027\u51fd\u6570\u90fd\u4f1a\u5728\u5199\u5b8c\u65e5\u5fd7\u4fe1\u606f\u540e\u8c03\u7528 os.Exit(1) \uff0c\u90a3\u4e9b\u9000\u51fa\u51fd\u6570\u4e5f\u662f\u5982\u6b64\u3002\u800c Panic \u6548\u679c\u7684\u51fd\u6570\u4f1a\u5728\u5199\u5b8c\u65e5\u5fd7\u4fe1\u606f\u540e\u8c03\u7528 panic() \uff1b\u53ef\u4ee5\u5728\u7a0b\u5e8f\u5fc5\u987b\u4e2d\u6b62\u6216\u53d1\u751f\u4e86\u4e34\u754c\u9519\u8bef\u65f6\u4f7f\u7528\u5b83\u4eec\uff0c\u5c31\u50cf\u5f53 web \u670d\u52a1\u5668\u4e0d\u80fd\u542f\u52a8\u65f6\u90a3\u6837\uff08\u53c2\u89c1 15.4 \u8282 \u4e2d\u7684\u4f8b\u5b50\uff09\u3002 log \u5305\u7528\u90a3\u4e9b\u65b9\u6cd5 (methods) \u5b9a\u4e49\u4e86\u4e00\u4e2a Logger \u63a5\u53e3\u7c7b\u578b\uff0c\u5982\u679c\u4f60\u60f3\u81ea\u5b9a\u4e49\u65e5\u5fd7\u7cfb\u7edf\u7684\u8bdd\u53ef\u4ee5\u53c2\u8003 http://golang.org/pkg/log/#Logger \u3002 \u8fd9\u662f\u4e00\u4e2a\u5c55\u793a panic() \uff0c defer \u548c recover() \u600e\u4e48\u7ed3\u5408\u4f7f\u7528\u7684\u5b8c\u6574\u4f8b\u5b50\uff1a \u793a\u4f8b 13.3 panic_recover.go \uff1a // panic_recover.go package main import ( \"fmt\" ) func badCall () { panic ( \"bad end\" ) } func test () { defer func () { if e := recover (); e != nil { fmt . Printf ( \"Panicing %s\\r\\n\" , e ) } }() badCall () fmt . Printf ( \"After bad call\\r\\n\" ) // <-- would not reach } func main () { fmt . Printf ( \"Calling test\\r\\n\" ) test () fmt . Printf ( \"Test completed\\r\\n\" ) } \u8f93\u51fa\uff1a Calling test Panicing bad end Test completed defer - panic() - recover() \u5728\u67d0\u79cd\u610f\u4e49\u4e0a\u4e5f\u662f\u4e00\u79cd\u50cf if \uff0c for \u8fd9\u6837\u7684\u63a7\u5236\u6d41\u673a\u5236\u3002 Go \u6807\u51c6\u5e93\u4e2d\u8bb8\u591a\u5730\u65b9\u90fd\u7528\u4e86\u8fd9\u4e2a\u673a\u5236\uff0c\u4f8b\u5982\uff0c json \u5305\u4e2d\u7684\u89e3\u7801\u548c regexp \u5305\u4e2d\u7684 Complie() \u51fd\u6570\u3002Go \u5e93\u7684\u539f\u5219\u662f\u5373\u4f7f\u5728\u5305\u7684\u5185\u90e8\u4f7f\u7528\u4e86 panic() \uff0c\u5728\u5b83\u7684\u5bf9\u5916\u63a5\u53e3 (API) \u4e2d\u4e5f\u5fc5\u987b\u7528 recover() \u5904\u7406\u6210\u663e\u5f0f\u8fd4\u56de\u7684\u9519\u8bef\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u9519\u8fd0\u884c\u65f6\u5f02\u5e38\u548c panic \u4e0b\u4e00\u8282\uff1a \u81ea\u5b9a\u4e49\u5305\u4e2d\u7684\u9519\u8bef\u5904\u7406\u548c panicking","title":"13.3 \u4ece panic \u4e2d\u6062\u590d\uff08Recover\uff09"},{"location":"13.3/#133-panic-recover","text":"\u6b63\u5982\u540d\u5b57\u4e00\u6837\uff0c\u8fd9\u4e2a ( recover() ) \u5185\u5efa\u51fd\u6570\u88ab\u7528\u4e8e\u4ece panic \u6216\u9519\u8bef\u573a\u666f\u4e2d\u6062\u590d\uff1a\u8ba9\u7a0b\u5e8f\u53ef\u4ee5\u4ece panicking \u91cd\u65b0\u83b7\u5f97\u63a7\u5236\u6743\uff0c\u505c\u6b62\u7ec8\u6b62\u8fc7\u7a0b\u8fdb\u800c\u6062\u590d\u6b63\u5e38\u6267\u884c\u3002 recover \u53ea\u80fd\u5728 defer \u4fee\u9970\u7684\u51fd\u6570\uff08\u53c2\u89c1 6.4 \u8282 \uff09\u4e2d\u4f7f\u7528\uff1a\u7528\u4e8e\u53d6\u5f97 panic() \u8c03\u7528\u4e2d\u4f20\u9012\u8fc7\u6765\u7684\u9519\u8bef\u503c\uff0c\u5982\u679c\u662f\u6b63\u5e38\u6267\u884c\uff0c\u8c03\u7528 recover() \u4f1a\u8fd4\u56de nil \uff0c\u4e14\u6ca1\u6709\u5176\u5b83\u6548\u679c\u3002 \u603b\u7ed3 \uff1a panic() \u4f1a\u5bfc\u81f4\u6808\u88ab\u5c55\u5f00\u76f4\u5230 defer \u4fee\u9970\u7684 recover() \u88ab\u8c03\u7528\u6216\u8005\u7a0b\u5e8f\u4e2d\u6b62\u3002 \u4e0b\u9762\u4f8b\u5b50\u4e2d\u7684 protect() \u51fd\u6570\u8c03\u7528\u51fd\u6570\u53c2\u6570 g \u6765\u4fdd\u62a4\u8c03\u7528\u8005\u9632\u6b62\u4ece g \u4e2d\u629b\u51fa\u7684\u8fd0\u884c\u65f6 panic\uff0c\u5e76\u5c55\u793a panic \u4e2d\u7684\u4fe1\u606f\uff1a func protect ( g func ()) { defer func () { log . Println ( \"done\" ) // Println executes normally even if there is a panic if err := recover (); err != nil { log . Printf ( \"run time panic: %v\" , err ) } }() log . Println ( \"start\" ) g () // possible runtime-error } \u8fd9\u8ddf Java \u548c .NET \u8fd9\u6837\u7684\u8bed\u8a00\u4e2d\u7684 catch \u5757\u7c7b\u4f3c\u3002 log \u5305\u5b9e\u73b0\u4e86\u7b80\u5355\u7684\u65e5\u5fd7\u529f\u80fd\uff1a\u9ed8\u8ba4\u7684 log \u5bf9\u8c61\u5411\u6807\u51c6\u9519\u8bef\u8f93\u51fa\u4e2d\u5199\u5165\u5e76\u6253\u5370\u6bcf\u6761\u65e5\u5fd7\u4fe1\u606f\u7684\u65e5\u671f\u548c\u65f6\u95f4\u3002\u9664\u4e86 Println \u548c Printf \u51fd\u6570\uff0c\u5176\u5b83\u7684\u81f4\u547d\u6027\u51fd\u6570\u90fd\u4f1a\u5728\u5199\u5b8c\u65e5\u5fd7\u4fe1\u606f\u540e\u8c03\u7528 os.Exit(1) \uff0c\u90a3\u4e9b\u9000\u51fa\u51fd\u6570\u4e5f\u662f\u5982\u6b64\u3002\u800c Panic \u6548\u679c\u7684\u51fd\u6570\u4f1a\u5728\u5199\u5b8c\u65e5\u5fd7\u4fe1\u606f\u540e\u8c03\u7528 panic() \uff1b\u53ef\u4ee5\u5728\u7a0b\u5e8f\u5fc5\u987b\u4e2d\u6b62\u6216\u53d1\u751f\u4e86\u4e34\u754c\u9519\u8bef\u65f6\u4f7f\u7528\u5b83\u4eec\uff0c\u5c31\u50cf\u5f53 web \u670d\u52a1\u5668\u4e0d\u80fd\u542f\u52a8\u65f6\u90a3\u6837\uff08\u53c2\u89c1 15.4 \u8282 \u4e2d\u7684\u4f8b\u5b50\uff09\u3002 log \u5305\u7528\u90a3\u4e9b\u65b9\u6cd5 (methods) \u5b9a\u4e49\u4e86\u4e00\u4e2a Logger \u63a5\u53e3\u7c7b\u578b\uff0c\u5982\u679c\u4f60\u60f3\u81ea\u5b9a\u4e49\u65e5\u5fd7\u7cfb\u7edf\u7684\u8bdd\u53ef\u4ee5\u53c2\u8003 http://golang.org/pkg/log/#Logger \u3002 \u8fd9\u662f\u4e00\u4e2a\u5c55\u793a panic() \uff0c defer \u548c recover() \u600e\u4e48\u7ed3\u5408\u4f7f\u7528\u7684\u5b8c\u6574\u4f8b\u5b50\uff1a \u793a\u4f8b 13.3 panic_recover.go \uff1a // panic_recover.go package main import ( \"fmt\" ) func badCall () { panic ( \"bad end\" ) } func test () { defer func () { if e := recover (); e != nil { fmt . Printf ( \"Panicing %s\\r\\n\" , e ) } }() badCall () fmt . Printf ( \"After bad call\\r\\n\" ) // <-- would not reach } func main () { fmt . Printf ( \"Calling test\\r\\n\" ) test () fmt . Printf ( \"Test completed\\r\\n\" ) } \u8f93\u51fa\uff1a Calling test Panicing bad end Test completed defer - panic() - recover() \u5728\u67d0\u79cd\u610f\u4e49\u4e0a\u4e5f\u662f\u4e00\u79cd\u50cf if \uff0c for \u8fd9\u6837\u7684\u63a7\u5236\u6d41\u673a\u5236\u3002 Go \u6807\u51c6\u5e93\u4e2d\u8bb8\u591a\u5730\u65b9\u90fd\u7528\u4e86\u8fd9\u4e2a\u673a\u5236\uff0c\u4f8b\u5982\uff0c json \u5305\u4e2d\u7684\u89e3\u7801\u548c regexp \u5305\u4e2d\u7684 Complie() \u51fd\u6570\u3002Go \u5e93\u7684\u539f\u5219\u662f\u5373\u4f7f\u5728\u5305\u7684\u5185\u90e8\u4f7f\u7528\u4e86 panic() \uff0c\u5728\u5b83\u7684\u5bf9\u5916\u63a5\u53e3 (API) \u4e2d\u4e5f\u5fc5\u987b\u7528 recover() \u5904\u7406\u6210\u663e\u5f0f\u8fd4\u56de\u7684\u9519\u8bef\u3002","title":"13.3 \u4ece panic \u4e2d\u6062\u590d (recover)"},{"location":"13.3/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u9519\u8fd0\u884c\u65f6\u5f02\u5e38\u548c panic \u4e0b\u4e00\u8282\uff1a \u81ea\u5b9a\u4e49\u5305\u4e2d\u7684\u9519\u8bef\u5904\u7406\u548c panicking","title":"\u94fe\u63a5"},{"location":"13.4/","text":"13.4 \u81ea\u5b9a\u4e49\u5305\u4e2d\u7684\u9519\u8bef\u5904\u7406\u548c panicking \u00b6 \u8fd9\u662f\u6240\u6709\u81ea\u5b9a\u4e49\u5305\u5b9e\u73b0\u8005\u5e94\u8be5\u9075\u5b88\u7684\u6700\u4f73\u5b9e\u8df5\uff1a 1\uff09 \u5728\u5305\u5185\u90e8\uff0c\u603b\u662f\u5e94\u8be5\u4ece panic \u4e2d recover \uff1a\u4e0d\u5141\u8bb8\u663e\u5f0f\u7684\u8d85\u51fa\u5305\u8303\u56f4\u7684 panic() 2\uff09 \u5411\u5305\u7684\u8c03\u7528\u8005\u8fd4\u56de\u9519\u8bef\u503c\uff08\u800c\u4e0d\u662f panic\uff09\u3002 \u5728\u5305\u5185\u90e8\uff0c\u7279\u522b\u662f\u5728\u975e\u5bfc\u51fa\u51fd\u6570\u4e2d\u6709\u5f88\u6df1\u5c42\u6b21\u7684\u5d4c\u5957\u8c03\u7528\u65f6\uff0c\u5c06 panic \u8f6c\u6362\u6210 error \u6765\u544a\u8bc9\u8c03\u7528\u65b9\u4e3a\u4f55\u51fa\u9519\uff0c\u662f\u5f88\u5b9e\u7528\u7684\uff08\u4e14\u63d0\u9ad8\u4e86\u4ee3\u7801\u53ef\u8bfb\u6027\uff09\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u5219\u5f88\u597d\u5730\u9610\u8ff0\u4e86\u8fd9\u4e00\u70b9\u3002\u6211\u4eec\u6709\u4e00\u4e2a\u7b80\u5355\u7684 parse \u5305\uff08\u793a\u4f8b 13.4\uff09\u7528\u6765\u628a\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u89e3\u6790\u4e3a\u6574\u6570\u5207\u7247\uff1b\u8fd9\u4e2a\u5305\u6709\u81ea\u5df1\u7279\u6b8a\u7684 ParseError \u3002 \u5f53\u6ca1\u6709\u4e1c\u897f\u9700\u8981\u8f6c\u6362\u6216\u8005\u8f6c\u6362\u6210\u6574\u6570\u5931\u8d25\u65f6\uff0c\u8fd9\u4e2a\u5305\u4f1a panic() \uff08\u5728\u51fd\u6570 fields2numbers() \u4e2d\uff09\u3002\u4f46\u662f\u53ef\u5bfc\u51fa\u7684 Parse() \u51fd\u6570\u4f1a\u4ece panic() \u4e2d recover() \u5e76\u7528\u6240\u6709\u8fd9\u4e9b\u4fe1\u606f\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u7ed9\u8c03\u7528\u8005\u3002\u4e3a\u4e86\u6f14\u793a\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5728 panic_recover.go \u4e2d \u8c03\u7528\u4e86 parse \u5305\uff08\u793a\u4f8b 13.5\uff09\uff1b\u4e0d\u53ef\u89e3\u6790\u7684\u5b57\u7b26\u4e32\u4f1a\u5bfc\u81f4\u9519\u8bef\u5e76\u88ab\u6253\u5370\u51fa\u6765\u3002 \u793a\u4f8b 13.4 parse.go \uff1a // parse.go package parse import ( \"fmt\" \"strings\" \"strconv\" ) // A ParseError indicates an error in converting a word into an integer. type ParseError struct { Index int // The index into the space-separated list of words. Word string // The word that generated the parse error. Err error // The raw error that precipitated this error, if any. } // String returns a human-readable error message. func ( e * ParseError ) String () string { return fmt . Sprintf ( \"pkg parse: error parsing %q as int\" , e . Word ) } // Parse parses the space-separated words in in put as integers. func Parse ( input string ) ( numbers [] int , err error ) { defer func () { if r := recover (); r != nil { var ok bool err , ok = r .( error ) if ! ok { err = fmt . Errorf ( \"pkg: %v\" , r ) } } }() fields := strings . Fields ( input ) numbers = fields2numbers ( fields ) return } func fields2numbers ( fields [] string ) ( numbers [] int ) { if len ( fields ) == 0 { panic ( \"no words to parse\" ) } for idx , field := range fields { num , err := strconv . Atoi ( field ) if err != nil { panic ( & ParseError { idx , field , err }) } numbers = append ( numbers , num ) } return } \u793a\u4f8b 13.5 panic_package.go \uff1a // panic_package.go package main import ( \"fmt\" \"./parse/parse\" ) func main () { var examples = [] string { \"1 2 3 4 5\" , \"100 50 25 12.5 6.25\" , \"2 + 2 = 4\" , \"1st class\" , \"\" , } for _ , ex := range examples { fmt . Printf ( \"Parsing %q:\\n \" , ex ) nums , err := parse . Parse ( ex ) if err != nil { fmt . Println ( err ) // here String() method from ParseError is used continue } fmt . Println ( nums ) } } \u8f93\u51fa\uff1a Parsing \"1 2 3 4 5\": [1 2 3 4 5] Parsing \"100 50 25 12.5 6.25\": pkg: pkg parse: error parsing \"12.5\" as int Parsing \"2 + 2 = 4\": pkg: pkg parse: error parsing \"+\" as int Parsing \"1st class\": pkg: pkg parse: error parsing \"1st\" as int Parsing \"\": pkg: no words to parse \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4ece panic \u4e2d\u6062\u590d (recover) \u4e0b\u4e00\u8282\uff1a \u4e00\u79cd\u7528\u95ed\u5305\u5904\u7406\u9519\u8bef\u7684\u6a21\u5f0f","title":"13.4 \u81ea\u5b9a\u4e49\u5305\u4e2d\u7684\u9519\u8bef\u5904\u7406\u548c panicking"},{"location":"13.4/#134-panicking","text":"\u8fd9\u662f\u6240\u6709\u81ea\u5b9a\u4e49\u5305\u5b9e\u73b0\u8005\u5e94\u8be5\u9075\u5b88\u7684\u6700\u4f73\u5b9e\u8df5\uff1a 1\uff09 \u5728\u5305\u5185\u90e8\uff0c\u603b\u662f\u5e94\u8be5\u4ece panic \u4e2d recover \uff1a\u4e0d\u5141\u8bb8\u663e\u5f0f\u7684\u8d85\u51fa\u5305\u8303\u56f4\u7684 panic() 2\uff09 \u5411\u5305\u7684\u8c03\u7528\u8005\u8fd4\u56de\u9519\u8bef\u503c\uff08\u800c\u4e0d\u662f panic\uff09\u3002 \u5728\u5305\u5185\u90e8\uff0c\u7279\u522b\u662f\u5728\u975e\u5bfc\u51fa\u51fd\u6570\u4e2d\u6709\u5f88\u6df1\u5c42\u6b21\u7684\u5d4c\u5957\u8c03\u7528\u65f6\uff0c\u5c06 panic \u8f6c\u6362\u6210 error \u6765\u544a\u8bc9\u8c03\u7528\u65b9\u4e3a\u4f55\u51fa\u9519\uff0c\u662f\u5f88\u5b9e\u7528\u7684\uff08\u4e14\u63d0\u9ad8\u4e86\u4ee3\u7801\u53ef\u8bfb\u6027\uff09\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u5219\u5f88\u597d\u5730\u9610\u8ff0\u4e86\u8fd9\u4e00\u70b9\u3002\u6211\u4eec\u6709\u4e00\u4e2a\u7b80\u5355\u7684 parse \u5305\uff08\u793a\u4f8b 13.4\uff09\u7528\u6765\u628a\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u89e3\u6790\u4e3a\u6574\u6570\u5207\u7247\uff1b\u8fd9\u4e2a\u5305\u6709\u81ea\u5df1\u7279\u6b8a\u7684 ParseError \u3002 \u5f53\u6ca1\u6709\u4e1c\u897f\u9700\u8981\u8f6c\u6362\u6216\u8005\u8f6c\u6362\u6210\u6574\u6570\u5931\u8d25\u65f6\uff0c\u8fd9\u4e2a\u5305\u4f1a panic() \uff08\u5728\u51fd\u6570 fields2numbers() \u4e2d\uff09\u3002\u4f46\u662f\u53ef\u5bfc\u51fa\u7684 Parse() \u51fd\u6570\u4f1a\u4ece panic() \u4e2d recover() \u5e76\u7528\u6240\u6709\u8fd9\u4e9b\u4fe1\u606f\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u7ed9\u8c03\u7528\u8005\u3002\u4e3a\u4e86\u6f14\u793a\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5728 panic_recover.go \u4e2d \u8c03\u7528\u4e86 parse \u5305\uff08\u793a\u4f8b 13.5\uff09\uff1b\u4e0d\u53ef\u89e3\u6790\u7684\u5b57\u7b26\u4e32\u4f1a\u5bfc\u81f4\u9519\u8bef\u5e76\u88ab\u6253\u5370\u51fa\u6765\u3002 \u793a\u4f8b 13.4 parse.go \uff1a // parse.go package parse import ( \"fmt\" \"strings\" \"strconv\" ) // A ParseError indicates an error in converting a word into an integer. type ParseError struct { Index int // The index into the space-separated list of words. Word string // The word that generated the parse error. Err error // The raw error that precipitated this error, if any. } // String returns a human-readable error message. func ( e * ParseError ) String () string { return fmt . Sprintf ( \"pkg parse: error parsing %q as int\" , e . Word ) } // Parse parses the space-separated words in in put as integers. func Parse ( input string ) ( numbers [] int , err error ) { defer func () { if r := recover (); r != nil { var ok bool err , ok = r .( error ) if ! ok { err = fmt . Errorf ( \"pkg: %v\" , r ) } } }() fields := strings . Fields ( input ) numbers = fields2numbers ( fields ) return } func fields2numbers ( fields [] string ) ( numbers [] int ) { if len ( fields ) == 0 { panic ( \"no words to parse\" ) } for idx , field := range fields { num , err := strconv . Atoi ( field ) if err != nil { panic ( & ParseError { idx , field , err }) } numbers = append ( numbers , num ) } return } \u793a\u4f8b 13.5 panic_package.go \uff1a // panic_package.go package main import ( \"fmt\" \"./parse/parse\" ) func main () { var examples = [] string { \"1 2 3 4 5\" , \"100 50 25 12.5 6.25\" , \"2 + 2 = 4\" , \"1st class\" , \"\" , } for _ , ex := range examples { fmt . Printf ( \"Parsing %q:\\n \" , ex ) nums , err := parse . Parse ( ex ) if err != nil { fmt . Println ( err ) // here String() method from ParseError is used continue } fmt . Println ( nums ) } } \u8f93\u51fa\uff1a Parsing \"1 2 3 4 5\": [1 2 3 4 5] Parsing \"100 50 25 12.5 6.25\": pkg: pkg parse: error parsing \"12.5\" as int Parsing \"2 + 2 = 4\": pkg: pkg parse: error parsing \"+\" as int Parsing \"1st class\": pkg: pkg parse: error parsing \"1st\" as int Parsing \"\": pkg: no words to parse","title":"13.4 \u81ea\u5b9a\u4e49\u5305\u4e2d\u7684\u9519\u8bef\u5904\u7406\u548c panicking"},{"location":"13.4/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4ece panic \u4e2d\u6062\u590d (recover) \u4e0b\u4e00\u8282\uff1a \u4e00\u79cd\u7528\u95ed\u5305\u5904\u7406\u9519\u8bef\u7684\u6a21\u5f0f","title":"\u94fe\u63a5"},{"location":"13.5/","text":"13.5 \u4e00\u79cd\u7528\u95ed\u5305\u5904\u7406\u9519\u8bef\u7684\u6a21\u5f0f \u00b6 \u6bcf\u5f53\u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u6211\u4eec\u5e94\u8be5\u68c0\u67e5\u662f\u5426\u6709\u9519\u8bef\u53d1\u751f\uff1a\u4f46\u662f\u8fd9\u4f1a\u5bfc\u81f4\u91cd\u590d\u4e4f\u5473\u7684\u4ee3\u7801\u3002\u7ed3\u5408 defer/panic/recover \u673a\u5236\u548c\u95ed\u5305\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u6211\u4eec\u9a6c\u4e0a\u8981\u8ba8\u8bba\u7684\u66f4\u52a0\u4f18\u96c5\u7684\u6a21\u5f0f\u3002\u4e0d\u8fc7\u8fd9\u4e2a\u6a21\u5f0f\u53ea\u6709\u5f53\u6240\u6709\u7684\u51fd\u6570\u90fd\u662f\u540c\u4e00\u79cd\u7b7e\u540d\u65f6\u53ef\u7528\uff0c\u8fd9\u6837\u5c31\u6709\u76f8\u5f53\u5927\u7684\u9650\u5236\u3002\u4e00\u4e2a\u5f88\u597d\u7684\u4f7f\u7528\u5b83\u7684\u4f8b\u5b50\u662f web \u5e94\u7528\uff0c\u6240\u6709\u7684\u5904\u7406\u51fd\u6570\u90fd\u662f\u4e0b\u9762\u8fd9\u6837\uff1a func handler1 ( w http . ResponseWriter , r * http . Request ) { ... } \u5047\u8bbe\u6240\u6709\u7684\u51fd\u6570\u90fd\u6709\u8fd9\u6837\u7684\u7b7e\u540d\uff1a func f ( a type1 , b type2 ) \u53c2\u6570\u7684\u6570\u91cf\u548c\u7c7b\u578b\u662f\u4e0d\u76f8\u5173\u7684\u3002 \u6211\u4eec\u7ed9\u8fd9\u4e2a\u7c7b\u578b\u4e00\u4e2a\u540d\u5b57\uff1a fType1 = func f ( a type1 , b type2 ) \u5728\u6211\u4eec\u7684\u6a21\u5f0f\u4e2d\u4f7f\u7528\u4e86\u4e24\u4e2a\u5e2e\u52a9\u51fd\u6570\uff1a 1\uff09 check() \uff1a\u8fd9\u662f\u7528\u6765\u68c0\u67e5\u662f\u5426\u6709\u9519\u8bef\u548c panic \u53d1\u751f\u7684\u51fd\u6570\uff1a func check ( err error ) { if err != nil { panic ( err ) } } 2\uff09 errorhandler() \uff1a\u8fd9\u662f\u4e00\u4e2a\u5305\u88c5\u51fd\u6570\u3002\u63a5\u6536\u4e00\u4e2a fType1 \u7c7b\u578b\u7684\u51fd\u6570 fn \u5e76\u8fd4\u56de\u4e00\u4e2a\u8c03\u7528 fn \u7684\u51fd\u6570\u3002\u91cc\u9762\u5c31\u5305\u542b\u6709 defer/recover \u673a\u5236\uff0c\u8fd9\u5728 13.3 \u8282 \u4e2d\u6709\u76f8\u5e94\u63cf\u8ff0\u3002 func errorHandler ( fn fType1 ) fType1 { return func ( a type1 , b type2 ) { defer func () { if err , ok := recover ().( error ); ok { log . Printf ( \"run time panic: %v\" , err ) } }() fn ( a , b ) } } \u5f53\u9519\u8bef\u53d1\u751f\u65f6\u4f1a recover \u5e76\u6253\u5370\u5728\u65e5\u5fd7\u4e2d\uff1b\u9664\u4e86\u7b80\u5355\u7684\u6253\u5370\uff0c\u5e94\u7528\u4e5f\u53ef\u4ee5\u7528 template \u5305\uff08\u53c2\u89c1 15.7 \u8282 \uff09\u4e3a\u7528\u6237\u751f\u6210\u81ea\u5b9a\u4e49\u7684\u8f93\u51fa\u3002 check() \u51fd\u6570\u4f1a\u5728\u6240\u6709\u7684\u88ab\u8c03\u51fd\u6570\u4e2d\u8c03\u7528\uff0c\u50cf\u8fd9\u6837\uff1a func f1 ( a type1 , b type2 ) { ... f , _ , err := // call function/method check ( err ) t , err := // call function/method check ( err ) _ , err2 := // call function/method check ( err2 ) ... } \u901a\u8fc7\u8fd9\u79cd\u673a\u5236\uff0c\u6240\u6709\u7684\u9519\u8bef\u90fd\u4f1a\u88ab recover\uff0c\u5e76\u4e14\u8c03\u7528\u51fd\u6570\u540e\u7684\u9519\u8bef\u68c0\u67e5\u4ee3\u7801\u4e5f\u88ab\u7b80\u5316\u4e3a\u8c03\u7528 check(err) \u5373\u53ef\u3002\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0c\u4e0d\u540c\u7684\u9519\u8bef\u5904\u7406\u5fc5\u987b\u5bf9\u5e94\u4e0d\u540c\u7684\u51fd\u6570\u7c7b\u578b\uff1b\u5b83\u4eec\uff08\u9519\u8bef\u5904\u7406\uff09\u53ef\u80fd\u88ab\u9690\u85cf\u5728\u9519\u8bef\u5904\u7406\u5305\u5185\u90e8\u3002\u53ef\u9009\u7684\u66f4\u52a0\u901a\u7528\u7684\u65b9\u5f0f\u662f\u7528\u4e00\u4e2a\u7a7a\u63a5\u53e3\u7c7b\u578b\u7684\u5207\u7247\u4f5c\u4e3a\u53c2\u6570\u548c\u8fd4\u56de\u503c\u3002 \u6211\u4eec\u4f1a\u5728 15.5 \u8282 \u7684 web \u5e94\u7528\u4e2d\u4f7f\u7528\u8fd9\u79cd\u6a21\u5f0f\u3002 \u7ec3\u4e60 13.1 \uff1a recover_dividebyzero.go \u7528\u793a\u4f8b 13.3 \u4e2d\u7684\u7f16\u7801\u6a21\u5f0f\u901a\u8fc7\u6574\u6570\u9664\u4ee5 0 \u89e6\u53d1\u4e00\u4e2a\u8fd0\u884c\u65f6 panic\u3002 \u7ec3\u4e60 13.2 \uff1a panic_defer.go \u9605\u8bfb\u4e0b\u9762\u7684\u5b8c\u6574\u7a0b\u5e8f\u3002\u4e0d\u8981\u6267\u884c\u5b83\uff0c\u5199\u51fa\u7a0b\u5e8f\u7684\u8f93\u51fa\u7ed3\u679c\u3002\u7136\u540e\u7f16\u8bd1\u6267\u884c\u5e76\u9a8c\u8bc1\u4f60\u7684\u9884\u60f3\u3002 // panic_defer.go package main import \"fmt\" func main () { f () fmt . Println ( \"Returned normally from f.\" ) } func f () { defer func () { if r := recover (); r != nil { fmt . Println ( \"Recovered in f\" , r ) } }() fmt . Println ( \"Calling g.\" ) g ( 0 ) fmt . Println ( \"Returned normally from g.\" ) } func g ( i int ) { if i > 3 { fmt . Println ( \"Panicking!\" ) panic ( fmt . Sprintf ( \"%v\" , i )) } defer fmt . Println ( \"Defer in g\" , i ) fmt . Println ( \"Printing in g\" , i ) g ( i + 1 ) } \u8f93\u51fa\uff1a Calling g. Printing in g 0 Printing in g 1 Printing in g 2 Printing in g 3 Panicking! Defer in g 3 Defer in g 2 Defer in g 1 Defer in g 0 Recovered in f 4 Returned normally from f. \u7ec3\u4e60 13.3 \uff1a panic_defer_convint.go \u5199\u4e00\u4e2a ConvertInt64ToInt() \u51fd\u6570\u628a int64 \u503c\u8f6c\u6362\u4e3a int \u503c\uff0c\u5982\u679c\u53d1\u751f\u9519\u8bef\uff08\u63d0\u793a\uff1a\u53c2\u89c1 4.5.2.1 \u8282 \uff09\u5c31 panic() \u3002\u7136\u540e\u5728\u51fd\u6570 IntFromInt64 \u4e2d\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u5e76 recover() \uff0c\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u548c\u4e00\u4e2a\u9519\u8bef\u3002\u8bf7\u6d4b\u8bd5\u8fd9\u4e2a\u51fd\u6570\uff01 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u81ea\u5b9a\u4e49\u5305\u4e2d\u7684\u9519\u8bef\u5904\u7406\u548c panicking \u4e0b\u4e00\u8282\uff1a \u542f\u52a8\u5916\u90e8\u547d\u4ee4\u548c\u7a0b\u5e8f","title":"13.5 \u4e00\u79cd\u7528\u95ed\u5305\u5904\u7406\u9519\u8bef\u7684\u6a21\u5f0f"},{"location":"13.5/#135","text":"\u6bcf\u5f53\u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u6211\u4eec\u5e94\u8be5\u68c0\u67e5\u662f\u5426\u6709\u9519\u8bef\u53d1\u751f\uff1a\u4f46\u662f\u8fd9\u4f1a\u5bfc\u81f4\u91cd\u590d\u4e4f\u5473\u7684\u4ee3\u7801\u3002\u7ed3\u5408 defer/panic/recover \u673a\u5236\u548c\u95ed\u5305\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u6211\u4eec\u9a6c\u4e0a\u8981\u8ba8\u8bba\u7684\u66f4\u52a0\u4f18\u96c5\u7684\u6a21\u5f0f\u3002\u4e0d\u8fc7\u8fd9\u4e2a\u6a21\u5f0f\u53ea\u6709\u5f53\u6240\u6709\u7684\u51fd\u6570\u90fd\u662f\u540c\u4e00\u79cd\u7b7e\u540d\u65f6\u53ef\u7528\uff0c\u8fd9\u6837\u5c31\u6709\u76f8\u5f53\u5927\u7684\u9650\u5236\u3002\u4e00\u4e2a\u5f88\u597d\u7684\u4f7f\u7528\u5b83\u7684\u4f8b\u5b50\u662f web \u5e94\u7528\uff0c\u6240\u6709\u7684\u5904\u7406\u51fd\u6570\u90fd\u662f\u4e0b\u9762\u8fd9\u6837\uff1a func handler1 ( w http . ResponseWriter , r * http . Request ) { ... } \u5047\u8bbe\u6240\u6709\u7684\u51fd\u6570\u90fd\u6709\u8fd9\u6837\u7684\u7b7e\u540d\uff1a func f ( a type1 , b type2 ) \u53c2\u6570\u7684\u6570\u91cf\u548c\u7c7b\u578b\u662f\u4e0d\u76f8\u5173\u7684\u3002 \u6211\u4eec\u7ed9\u8fd9\u4e2a\u7c7b\u578b\u4e00\u4e2a\u540d\u5b57\uff1a fType1 = func f ( a type1 , b type2 ) \u5728\u6211\u4eec\u7684\u6a21\u5f0f\u4e2d\u4f7f\u7528\u4e86\u4e24\u4e2a\u5e2e\u52a9\u51fd\u6570\uff1a 1\uff09 check() \uff1a\u8fd9\u662f\u7528\u6765\u68c0\u67e5\u662f\u5426\u6709\u9519\u8bef\u548c panic \u53d1\u751f\u7684\u51fd\u6570\uff1a func check ( err error ) { if err != nil { panic ( err ) } } 2\uff09 errorhandler() \uff1a\u8fd9\u662f\u4e00\u4e2a\u5305\u88c5\u51fd\u6570\u3002\u63a5\u6536\u4e00\u4e2a fType1 \u7c7b\u578b\u7684\u51fd\u6570 fn \u5e76\u8fd4\u56de\u4e00\u4e2a\u8c03\u7528 fn \u7684\u51fd\u6570\u3002\u91cc\u9762\u5c31\u5305\u542b\u6709 defer/recover \u673a\u5236\uff0c\u8fd9\u5728 13.3 \u8282 \u4e2d\u6709\u76f8\u5e94\u63cf\u8ff0\u3002 func errorHandler ( fn fType1 ) fType1 { return func ( a type1 , b type2 ) { defer func () { if err , ok := recover ().( error ); ok { log . Printf ( \"run time panic: %v\" , err ) } }() fn ( a , b ) } } \u5f53\u9519\u8bef\u53d1\u751f\u65f6\u4f1a recover \u5e76\u6253\u5370\u5728\u65e5\u5fd7\u4e2d\uff1b\u9664\u4e86\u7b80\u5355\u7684\u6253\u5370\uff0c\u5e94\u7528\u4e5f\u53ef\u4ee5\u7528 template \u5305\uff08\u53c2\u89c1 15.7 \u8282 \uff09\u4e3a\u7528\u6237\u751f\u6210\u81ea\u5b9a\u4e49\u7684\u8f93\u51fa\u3002 check() \u51fd\u6570\u4f1a\u5728\u6240\u6709\u7684\u88ab\u8c03\u51fd\u6570\u4e2d\u8c03\u7528\uff0c\u50cf\u8fd9\u6837\uff1a func f1 ( a type1 , b type2 ) { ... f , _ , err := // call function/method check ( err ) t , err := // call function/method check ( err ) _ , err2 := // call function/method check ( err2 ) ... } \u901a\u8fc7\u8fd9\u79cd\u673a\u5236\uff0c\u6240\u6709\u7684\u9519\u8bef\u90fd\u4f1a\u88ab recover\uff0c\u5e76\u4e14\u8c03\u7528\u51fd\u6570\u540e\u7684\u9519\u8bef\u68c0\u67e5\u4ee3\u7801\u4e5f\u88ab\u7b80\u5316\u4e3a\u8c03\u7528 check(err) \u5373\u53ef\u3002\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0c\u4e0d\u540c\u7684\u9519\u8bef\u5904\u7406\u5fc5\u987b\u5bf9\u5e94\u4e0d\u540c\u7684\u51fd\u6570\u7c7b\u578b\uff1b\u5b83\u4eec\uff08\u9519\u8bef\u5904\u7406\uff09\u53ef\u80fd\u88ab\u9690\u85cf\u5728\u9519\u8bef\u5904\u7406\u5305\u5185\u90e8\u3002\u53ef\u9009\u7684\u66f4\u52a0\u901a\u7528\u7684\u65b9\u5f0f\u662f\u7528\u4e00\u4e2a\u7a7a\u63a5\u53e3\u7c7b\u578b\u7684\u5207\u7247\u4f5c\u4e3a\u53c2\u6570\u548c\u8fd4\u56de\u503c\u3002 \u6211\u4eec\u4f1a\u5728 15.5 \u8282 \u7684 web \u5e94\u7528\u4e2d\u4f7f\u7528\u8fd9\u79cd\u6a21\u5f0f\u3002 \u7ec3\u4e60 13.1 \uff1a recover_dividebyzero.go \u7528\u793a\u4f8b 13.3 \u4e2d\u7684\u7f16\u7801\u6a21\u5f0f\u901a\u8fc7\u6574\u6570\u9664\u4ee5 0 \u89e6\u53d1\u4e00\u4e2a\u8fd0\u884c\u65f6 panic\u3002 \u7ec3\u4e60 13.2 \uff1a panic_defer.go \u9605\u8bfb\u4e0b\u9762\u7684\u5b8c\u6574\u7a0b\u5e8f\u3002\u4e0d\u8981\u6267\u884c\u5b83\uff0c\u5199\u51fa\u7a0b\u5e8f\u7684\u8f93\u51fa\u7ed3\u679c\u3002\u7136\u540e\u7f16\u8bd1\u6267\u884c\u5e76\u9a8c\u8bc1\u4f60\u7684\u9884\u60f3\u3002 // panic_defer.go package main import \"fmt\" func main () { f () fmt . Println ( \"Returned normally from f.\" ) } func f () { defer func () { if r := recover (); r != nil { fmt . Println ( \"Recovered in f\" , r ) } }() fmt . Println ( \"Calling g.\" ) g ( 0 ) fmt . Println ( \"Returned normally from g.\" ) } func g ( i int ) { if i > 3 { fmt . Println ( \"Panicking!\" ) panic ( fmt . Sprintf ( \"%v\" , i )) } defer fmt . Println ( \"Defer in g\" , i ) fmt . Println ( \"Printing in g\" , i ) g ( i + 1 ) } \u8f93\u51fa\uff1a Calling g. Printing in g 0 Printing in g 1 Printing in g 2 Printing in g 3 Panicking! Defer in g 3 Defer in g 2 Defer in g 1 Defer in g 0 Recovered in f 4 Returned normally from f. \u7ec3\u4e60 13.3 \uff1a panic_defer_convint.go \u5199\u4e00\u4e2a ConvertInt64ToInt() \u51fd\u6570\u628a int64 \u503c\u8f6c\u6362\u4e3a int \u503c\uff0c\u5982\u679c\u53d1\u751f\u9519\u8bef\uff08\u63d0\u793a\uff1a\u53c2\u89c1 4.5.2.1 \u8282 \uff09\u5c31 panic() \u3002\u7136\u540e\u5728\u51fd\u6570 IntFromInt64 \u4e2d\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u5e76 recover() \uff0c\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u548c\u4e00\u4e2a\u9519\u8bef\u3002\u8bf7\u6d4b\u8bd5\u8fd9\u4e2a\u51fd\u6570\uff01","title":"13.5 \u4e00\u79cd\u7528\u95ed\u5305\u5904\u7406\u9519\u8bef\u7684\u6a21\u5f0f"},{"location":"13.5/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u81ea\u5b9a\u4e49\u5305\u4e2d\u7684\u9519\u8bef\u5904\u7406\u548c panicking \u4e0b\u4e00\u8282\uff1a \u542f\u52a8\u5916\u90e8\u547d\u4ee4\u548c\u7a0b\u5e8f","title":"\u94fe\u63a5"},{"location":"13.6/","text":"13.6 \u542f\u52a8\u5916\u90e8\u547d\u4ee4\u548c\u7a0b\u5e8f \u00b6 os \u5305\u6709\u4e00\u4e2a StartProcess \u51fd\u6570\u53ef\u4ee5\u8c03\u7528\u6216\u542f\u52a8\u5916\u90e8\u7cfb\u7edf\u547d\u4ee4\u548c\u4e8c\u8fdb\u5236\u53ef\u6267\u884c\u6587\u4ef6\uff1b\u5b83\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8981\u8fd0\u884c\u7684\u8fdb\u7a0b\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7528\u6765\u4f20\u9012\u9009\u9879\u6216\u53c2\u6570\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u542b\u6709\u7cfb\u7edf\u73af\u5883\u57fa\u672c\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\u3002 \u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u88ab\u542f\u52a8\u8fdb\u7a0b\u7684 id (pid)\uff0c\u6216\u8005\u542f\u52a8\u5931\u8d25\u8fd4\u56de\u9519\u8bef\u3002 exec \u5305\u4e2d\u4e5f\u6709\u540c\u6837\u529f\u80fd\u7684\u66f4\u7b80\u5355\u7684\u7ed3\u6784\u4f53\u548c\u51fd\u6570\uff1b\u4e3b\u8981\u662f exec.Command(name string, arg ...string) \u548c Run() \u3002\u9996\u5148\u9700\u8981\u7528\u7cfb\u7edf\u547d\u4ee4\u6216\u53ef\u6267\u884c\u6587\u4ef6\u7684\u540d\u5b57\u521b\u5efa\u4e00\u4e2a Command \u5bf9\u8c61\uff0c\u7136\u540e\u7528\u8fd9\u4e2a\u5bf9\u8c61\u4f5c\u4e3a\u63a5\u6536\u8005\u8c03\u7528 Run() \u3002\u4e0b\u9762\u7684\u7a0b\u5e8f\uff08\u56e0\u4e3a\u662f\u6267\u884c Linux \u547d\u4ee4\uff0c\u53ea\u80fd\u5728 Linux \u4e0b\u9762\u8fd0\u884c\uff09\u6f14\u793a\u4e86\u5b83\u4eec\u7684\u4f7f\u7528\uff1a \u793a\u4f8b 13.6 exec.go \uff1a // exec.go package main import ( \"fmt\" \"os/exec\" \"os\" ) func main () { // 1) os.StartProcess // /*********************/ /* Linux: */ env := os . Environ () procAttr := & os . ProcAttr { Env : env , Files : [] * os . File { os . Stdin , os . Stdout , os . Stderr , }, } // 1st example: list files pid , err := os . StartProcess ( \"/bin/ls\" , [] string { \"ls\" , \"-l\" }, procAttr ) if err != nil { fmt . Printf ( \"Error %v starting process!\" , err ) // os . Exit ( 1 ) } fmt . Printf ( \"The process id is %v\" , pid ) \u8f93\u51fa\uff1a The process id is & { 2054 0 } total 2056 - rwxr - xr - x 1 ivo ivo 1157555 2011 - 07 - 04 16 : 48 Mieken_exec - rw - r -- r -- 1 ivo ivo 2124 2011 - 07 - 04 16 : 48 Mieken_exec . go - rw - r -- r -- 1 ivo ivo 18528 2011 - 07 - 04 16 : 48 Mieken_exec_go_ .6 - rwxr - xr - x 1 ivo ivo 913920 2011 - 06 - 03 16 : 13 panic . exe - rw - r -- r -- 1 ivo ivo 180 2011 - 04 - 11 20 : 39 panic . go // 2nd example: show all processes pid , err = os . StartProcess ( \"/bin/ps\" , [] string { \"ps\" , \"-e\" , \"-opid,ppid,comm\" }, procAttr ) if err != nil { fmt . Printf ( \"Error %v starting process!\" , err ) // os . Exit ( 1 ) } fmt . Printf ( \"The process id is %v\" , pid ) // 2) exec.Run // /***************/ // Linux: OK, but not for ls ? // cmd := exec.Command(\"ls\", \"-l\") // no error, but doesn't show anything ? // cmd := exec.Command(\"ls\") // no error, but doesn't show anything ? cmd := exec . Command ( \"gedit\" ) // this opens a gedit-window err = cmd . Run () if err != nil { fmt . Printf ( \"Error %v executing command!\" , err ) os . Exit ( 1 ) } fmt . Printf ( \"The command is %v\" , cmd ) // The command is &{/bin/ls [ls -l] [] <nil> <nil> <nil> 0xf840000210 <nil> true [0xf84000ea50 0xf84000e9f0 0xf84000e9c0] [0xf84000ea50 0xf84000e9f0 0xf84000e9c0] [] [] 0xf8400128c0} } // in Windows: uitvoering: Error fork/exec /bin/ls: The system cannot find the path specified. starting process! \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4e00\u79cd\u7528\u95ed\u5305\u5904\u7406\u9519\u8bef\u7684\u6a21\u5f0f \u4e0b\u4e00\u8282\uff1a Go \u4e2d\u7684\u5355\u5143\u6d4b\u8bd5\u548c\u57fa\u51c6\u6d4b\u8bd5","title":"13.6 \u542f\u52a8\u5916\u90e8\u547d\u4ee4\u548c\u7a0b\u5e8f"},{"location":"13.6/#136","text":"os \u5305\u6709\u4e00\u4e2a StartProcess \u51fd\u6570\u53ef\u4ee5\u8c03\u7528\u6216\u542f\u52a8\u5916\u90e8\u7cfb\u7edf\u547d\u4ee4\u548c\u4e8c\u8fdb\u5236\u53ef\u6267\u884c\u6587\u4ef6\uff1b\u5b83\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8981\u8fd0\u884c\u7684\u8fdb\u7a0b\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7528\u6765\u4f20\u9012\u9009\u9879\u6216\u53c2\u6570\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u542b\u6709\u7cfb\u7edf\u73af\u5883\u57fa\u672c\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\u3002 \u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u88ab\u542f\u52a8\u8fdb\u7a0b\u7684 id (pid)\uff0c\u6216\u8005\u542f\u52a8\u5931\u8d25\u8fd4\u56de\u9519\u8bef\u3002 exec \u5305\u4e2d\u4e5f\u6709\u540c\u6837\u529f\u80fd\u7684\u66f4\u7b80\u5355\u7684\u7ed3\u6784\u4f53\u548c\u51fd\u6570\uff1b\u4e3b\u8981\u662f exec.Command(name string, arg ...string) \u548c Run() \u3002\u9996\u5148\u9700\u8981\u7528\u7cfb\u7edf\u547d\u4ee4\u6216\u53ef\u6267\u884c\u6587\u4ef6\u7684\u540d\u5b57\u521b\u5efa\u4e00\u4e2a Command \u5bf9\u8c61\uff0c\u7136\u540e\u7528\u8fd9\u4e2a\u5bf9\u8c61\u4f5c\u4e3a\u63a5\u6536\u8005\u8c03\u7528 Run() \u3002\u4e0b\u9762\u7684\u7a0b\u5e8f\uff08\u56e0\u4e3a\u662f\u6267\u884c Linux \u547d\u4ee4\uff0c\u53ea\u80fd\u5728 Linux \u4e0b\u9762\u8fd0\u884c\uff09\u6f14\u793a\u4e86\u5b83\u4eec\u7684\u4f7f\u7528\uff1a \u793a\u4f8b 13.6 exec.go \uff1a // exec.go package main import ( \"fmt\" \"os/exec\" \"os\" ) func main () { // 1) os.StartProcess // /*********************/ /* Linux: */ env := os . Environ () procAttr := & os . ProcAttr { Env : env , Files : [] * os . File { os . Stdin , os . Stdout , os . Stderr , }, } // 1st example: list files pid , err := os . StartProcess ( \"/bin/ls\" , [] string { \"ls\" , \"-l\" }, procAttr ) if err != nil { fmt . Printf ( \"Error %v starting process!\" , err ) // os . Exit ( 1 ) } fmt . Printf ( \"The process id is %v\" , pid ) \u8f93\u51fa\uff1a The process id is & { 2054 0 } total 2056 - rwxr - xr - x 1 ivo ivo 1157555 2011 - 07 - 04 16 : 48 Mieken_exec - rw - r -- r -- 1 ivo ivo 2124 2011 - 07 - 04 16 : 48 Mieken_exec . go - rw - r -- r -- 1 ivo ivo 18528 2011 - 07 - 04 16 : 48 Mieken_exec_go_ .6 - rwxr - xr - x 1 ivo ivo 913920 2011 - 06 - 03 16 : 13 panic . exe - rw - r -- r -- 1 ivo ivo 180 2011 - 04 - 11 20 : 39 panic . go // 2nd example: show all processes pid , err = os . StartProcess ( \"/bin/ps\" , [] string { \"ps\" , \"-e\" , \"-opid,ppid,comm\" }, procAttr ) if err != nil { fmt . Printf ( \"Error %v starting process!\" , err ) // os . Exit ( 1 ) } fmt . Printf ( \"The process id is %v\" , pid ) // 2) exec.Run // /***************/ // Linux: OK, but not for ls ? // cmd := exec.Command(\"ls\", \"-l\") // no error, but doesn't show anything ? // cmd := exec.Command(\"ls\") // no error, but doesn't show anything ? cmd := exec . Command ( \"gedit\" ) // this opens a gedit-window err = cmd . Run () if err != nil { fmt . Printf ( \"Error %v executing command!\" , err ) os . Exit ( 1 ) } fmt . Printf ( \"The command is %v\" , cmd ) // The command is &{/bin/ls [ls -l] [] <nil> <nil> <nil> 0xf840000210 <nil> true [0xf84000ea50 0xf84000e9f0 0xf84000e9c0] [0xf84000ea50 0xf84000e9f0 0xf84000e9c0] [] [] 0xf8400128c0} } // in Windows: uitvoering: Error fork/exec /bin/ls: The system cannot find the path specified. starting process!","title":"13.6 \u542f\u52a8\u5916\u90e8\u547d\u4ee4\u548c\u7a0b\u5e8f"},{"location":"13.6/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4e00\u79cd\u7528\u95ed\u5305\u5904\u7406\u9519\u8bef\u7684\u6a21\u5f0f \u4e0b\u4e00\u8282\uff1a Go \u4e2d\u7684\u5355\u5143\u6d4b\u8bd5\u548c\u57fa\u51c6\u6d4b\u8bd5","title":"\u94fe\u63a5"},{"location":"13.7/","text":"13.7 Go \u4e2d\u7684\u5355\u5143\u6d4b\u8bd5\u548c\u57fa\u51c6\u6d4b\u8bd5 \u00b6 \u9996\u5148\u6240\u6709\u7684\u5305\u90fd\u5e94\u8be5\u6709\u4e00\u5b9a\u7684\u5fc5\u8981\u6587\u6863\uff0c\u7136\u540e\u540c\u6837\u91cd\u8981\u7684\u662f\u5bf9\u5305\u7684\u6d4b\u8bd5\u3002 \u5728\u7b2c 3 \u7ae0\u4e2d\u63d0\u5230\u4e86 Go \u7684\u6d4b\u8bd5\u5de5\u5177 gotest\uff0c \u6211\u4eec\u5df2\u7ecf\u5728 9.8 \u8282 \u4e2d\u4f7f\u7528\u8fc7\u4e86\u3002\u8fd9\u91cc\u6211\u4eec\u4f1a\u7528\u66f4\u591a\u7684\u4f8b\u5b50\u8fdb\u884c\u8be6\u7ec6\u8bf4\u660e\u3002 \u540d\u4e3a testing \u7684\u5305\u88ab\u4e13\u95e8\u7528\u6765\u8fdb\u884c\u81ea\u52a8\u5316\u6d4b\u8bd5\uff0c\u65e5\u5fd7\u548c\u9519\u8bef\u62a5\u544a\u3002\u5e76\u4e14\u8fd8\u5305\u542b\u4e00\u4e9b\u57fa\u51c6\u6d4b\u8bd5\u51fd\u6570\u7684\u529f\u80fd\u3002 \u5907\u6ce8\uff1a gotest \u662f Unix bash \u811a\u672c\uff0c\u6240\u4ee5\u5728 Windows \u4e0b\u4f60\u9700\u8981\u914d\u7f6e MINGW \u73af\u5883\uff08\u53c2\u89c1 2.5 \u8282 \uff09\uff1b\u5728 Windows \u73af\u5883\u4e0b\u628a\u6240\u6709\u7684 pkg/linux_amd64 \u66ff\u6362\u6210 pkg/windows\u3002 \u5bf9\u4e00\u4e2a\u5305\u505a\uff08\u5355\u5143\uff09\u6d4b\u8bd5\uff0c\u9700\u8981\u5199\u4e00\u4e9b\u53ef\u4ee5\u9891\u7e41\uff08\u6bcf\u6b21\u66f4\u65b0\u540e\uff09\u6267\u884c\u7684\u5c0f\u5757\u6d4b\u8bd5\u5355\u5143\u6765\u68c0\u67e5\u4ee3\u7801\u7684\u6b63\u786e\u6027\u3002\u4e8e\u662f\u6211\u4eec\u5fc5\u987b\u5199\u4e00\u4e9b Go \u6e90\u6587\u4ef6\u6765\u6d4b\u8bd5\u4ee3\u7801\u3002\u6d4b\u8bd5\u7a0b\u5e8f\u5fc5\u987b\u5c5e\u4e8e\u88ab\u6d4b\u8bd5\u7684\u5305\uff0c\u5e76\u4e14\u6587\u4ef6\u540d\u6ee1\u8db3\u8fd9\u79cd\u5f62\u5f0f *_test.go \uff0c\u6240\u4ee5\u6d4b\u8bd5\u4ee3\u7801\u548c\u5305\u4e2d\u7684\u4e1a\u52a1\u4ee3\u7801\u662f\u5206\u5f00\u7684\u3002 _test \u7a0b\u5e8f\u4e0d\u4f1a\u88ab\u666e\u901a\u7684 Go \u7f16\u8bd1\u5668\u7f16\u8bd1\uff0c\u6240\u4ee5\u5f53\u653e\u5e94\u7528\u90e8\u7f72\u5230\u751f\u4ea7\u73af\u5883\u65f6\u5b83\u4eec\u4e0d\u4f1a\u88ab\u90e8\u7f72\uff1b\u53ea\u6709 gotest \u4f1a\u7f16\u8bd1\u6240\u6709\u7684\u7a0b\u5e8f\uff1a\u666e\u901a\u7a0b\u5e8f\u548c\u6d4b\u8bd5\u7a0b\u5e8f\u3002 \u6d4b\u8bd5\u6587\u4ef6\u4e2d\u5fc5\u987b\u5bfc\u5165 \"testing\" \u5305\uff0c\u5e76\u5199\u4e00\u4e9b\u540d\u5b57\u4ee5 TestZzz \u6253\u5934\u7684\u5168\u5c40\u51fd\u6570\uff0c\u8fd9\u91cc\u7684 Zzz \u662f\u88ab\u6d4b\u8bd5\u51fd\u6570\u7684\u5b57\u6bcd\u63cf\u8ff0\uff0c\u5982 TestFmtInterface() \uff0c TestPayEmployees() \u7b49\u3002 \u6d4b\u8bd5\u51fd\u6570\u5fc5\u987b\u6709\u8fd9\u79cd\u5f62\u5f0f\u7684\u5934\u90e8\uff1a func TestAbcde ( t * testing . T ) T \u662f\u4f20\u7ed9\u6d4b\u8bd5\u51fd\u6570\u7684\u7ed3\u6784\u7c7b\u578b\uff0c\u7528\u6765\u7ba1\u7406\u6d4b\u8bd5\u72b6\u6001\uff0c\u652f\u6301\u683c\u5f0f\u5316\u6d4b\u8bd5\u65e5\u5fd7\uff0c\u5982 t.Log \uff0c t.Error \uff0c t.ErrorF \u7b49\u3002\u5728\u51fd\u6570\u7684\u7ed3\u5c3e\u628a\u8f93\u51fa\u8ddf\u60f3\u8981\u7684\u7ed3\u679c\u5bf9\u6bd4\uff0c\u5982\u679c\u4e0d\u7b49\u5c31\u6253\u5370\u4e00\u4e2a\u9519\u8bef\uff0c\u6210\u529f\u7684\u6d4b\u8bd5\u5219\u76f4\u63a5\u8fd4\u56de\u3002 \u7528\u4e0b\u9762\u8fd9\u4e9b\u51fd\u6570\u6765\u901a\u77e5\u6d4b\u8bd5\u5931\u8d25\uff1a 1\uff09 func (t *T) Fail() \u6807\u8bb0\u6d4b\u8bd5\u51fd\u6570\u4e3a\u5931\u8d25\uff0c\u7136\u540e\u7ee7\u7eed\u6267\u884c\uff08\u5269\u4e0b\u7684\u6d4b\u8bd5\uff09\u3002 2\uff09 func (t *T) FailNow() \u6807\u8bb0\u6d4b\u8bd5\u51fd\u6570\u4e3a\u5931\u8d25\u5e76\u4e2d\u6b62\u6267\u884c\uff1b\u6587\u4ef6\u4e2d\u522b\u7684\u6d4b\u8bd5\u4e5f\u88ab\u7565\u8fc7\uff0c\u7ee7\u7eed\u6267\u884c\u4e0b\u4e00\u4e2a\u6587\u4ef6\u3002 3\uff09 func (t *T) Log(args ...interface{}) args \u88ab\u7528\u9ed8\u8ba4\u7684\u683c\u5f0f\u683c\u5f0f\u5316\u5e76\u6253\u5370\u5230\u9519\u8bef\u65e5\u5fd7\u4e2d\u3002 4\uff09 func (t *T) Fatal(args ...interface{}) \u7ed3\u5408 \u5148\u6267\u884c 3\uff09\uff0c\u7136\u540e\u6267\u884c 2\uff09\u7684\u6548\u679c\u3002 \u8fd0\u884c go test \u6765\u7f16\u8bd1\u6d4b\u8bd5\u7a0b\u5e8f\uff0c\u5e76\u6267\u884c\u7a0b\u5e8f\u4e2d\u6240\u6709\u7684 TestZZZ \u51fd\u6570\u3002\u5982\u679c\u6240\u6709\u7684\u6d4b\u8bd5\u90fd\u901a\u8fc7\u4f1a\u6253\u5370\u51fa PASS \u3002 gotest \u53ef\u4ee5\u63a5\u6536\u4e00\u4e2a\u6216\u591a\u4e2a\u51fd\u6570\u7a0b\u5e8f\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u6307\u5b9a\u4e00\u4e9b\u9009\u9879\u3002 \u7ed3\u5408 --chatty \u6216 -v \u9009\u9879\uff0c\u6bcf\u4e2a\u6267\u884c\u7684\u6d4b\u8bd5\u51fd\u6570\u4ee5\u53ca\u6d4b\u8bd5\u72b6\u6001\u4f1a\u88ab\u6253\u5370\u3002 \u4f8b\u5982\uff1a go test fmt_test.go --chatty === RUN fmt.TestFlagParser --- PASS: fmt.TestFlagParser === RUN fmt.TestArrayPrinter --- PASS: fmt.TestArrayPrinter ... testing \u5305\u4e2d\u6709\u4e00\u4e9b\u7c7b\u578b\u548c\u51fd\u6570\u53ef\u4ee5\u7528\u6765\u505a\u7b80\u5355\u7684\u57fa\u51c6\u6d4b\u8bd5\uff1b\u6d4b\u8bd5\u4ee3\u7801\u4e2d\u5fc5\u987b\u5305\u542b\u4ee5 BenchmarkZzz \u6253\u5934\u7684\u51fd\u6570\u5e76\u63a5\u6536\u4e00\u4e2a *testing.B \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u6bd4\u5982\uff1a func BenchmarkReverse ( b * testing . B ) { ... } \u547d\u4ee4 go test \u2013test.bench=.* \u4f1a\u8fd0\u884c\u6240\u6709\u7684\u57fa\u51c6\u6d4b\u8bd5\u51fd\u6570\uff1b\u4ee3\u7801\u4e2d\u7684\u51fd\u6570\u4f1a\u88ab\u8c03\u7528 N \u6b21\uff08 N \u662f\u975e\u5e38\u5927\u7684\u6570\uff0c\u5982 N = 1000000 \uff09\uff0c\u5e76\u5c55\u793a N \u7684\u503c\u548c\u51fd\u6570\u6267\u884c\u7684\u5e73\u5747\u65f6\u95f4\uff0c\u5355\u4f4d\u4e3a ns\uff08\u7eb3\u79d2\uff0cns/op\uff09\u3002\u5982\u679c\u662f\u7528 testing.Benchmark() \u8c03\u7528\u8fd9\u4e9b\u51fd\u6570\uff0c\u76f4\u63a5\u8fd0\u884c\u7a0b\u5e8f\u5373\u53ef\u3002 \u5177\u4f53\u53ef\u4ee5\u53c2\u89c1 14.16 \u8282 \u4e2d\u7528 goroutines \u8fd0\u884c\u57fa\u51c6\u6d4b\u8bd5\u7684\u4f8b\u5b50\u4ee5\u53ca\u7ec3\u4e60 13.4\uff1a string_reverse_test.go \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u542f\u52a8\u5916\u90e8\u547d\u4ee4\u548c\u7a0b\u5e8f \u4e0b\u4e00\u8282\uff1a \u6d4b\u8bd5\u7684\u5177\u4f53\u4f8b\u5b50","title":"13.7 Go \u4e2d\u7684\u5355\u5143\u6d4b\u8bd5\u548c\u57fa\u51c6\u6d4b\u8bd5"},{"location":"13.7/#137-go","text":"\u9996\u5148\u6240\u6709\u7684\u5305\u90fd\u5e94\u8be5\u6709\u4e00\u5b9a\u7684\u5fc5\u8981\u6587\u6863\uff0c\u7136\u540e\u540c\u6837\u91cd\u8981\u7684\u662f\u5bf9\u5305\u7684\u6d4b\u8bd5\u3002 \u5728\u7b2c 3 \u7ae0\u4e2d\u63d0\u5230\u4e86 Go \u7684\u6d4b\u8bd5\u5de5\u5177 gotest\uff0c \u6211\u4eec\u5df2\u7ecf\u5728 9.8 \u8282 \u4e2d\u4f7f\u7528\u8fc7\u4e86\u3002\u8fd9\u91cc\u6211\u4eec\u4f1a\u7528\u66f4\u591a\u7684\u4f8b\u5b50\u8fdb\u884c\u8be6\u7ec6\u8bf4\u660e\u3002 \u540d\u4e3a testing \u7684\u5305\u88ab\u4e13\u95e8\u7528\u6765\u8fdb\u884c\u81ea\u52a8\u5316\u6d4b\u8bd5\uff0c\u65e5\u5fd7\u548c\u9519\u8bef\u62a5\u544a\u3002\u5e76\u4e14\u8fd8\u5305\u542b\u4e00\u4e9b\u57fa\u51c6\u6d4b\u8bd5\u51fd\u6570\u7684\u529f\u80fd\u3002 \u5907\u6ce8\uff1a gotest \u662f Unix bash \u811a\u672c\uff0c\u6240\u4ee5\u5728 Windows \u4e0b\u4f60\u9700\u8981\u914d\u7f6e MINGW \u73af\u5883\uff08\u53c2\u89c1 2.5 \u8282 \uff09\uff1b\u5728 Windows \u73af\u5883\u4e0b\u628a\u6240\u6709\u7684 pkg/linux_amd64 \u66ff\u6362\u6210 pkg/windows\u3002 \u5bf9\u4e00\u4e2a\u5305\u505a\uff08\u5355\u5143\uff09\u6d4b\u8bd5\uff0c\u9700\u8981\u5199\u4e00\u4e9b\u53ef\u4ee5\u9891\u7e41\uff08\u6bcf\u6b21\u66f4\u65b0\u540e\uff09\u6267\u884c\u7684\u5c0f\u5757\u6d4b\u8bd5\u5355\u5143\u6765\u68c0\u67e5\u4ee3\u7801\u7684\u6b63\u786e\u6027\u3002\u4e8e\u662f\u6211\u4eec\u5fc5\u987b\u5199\u4e00\u4e9b Go \u6e90\u6587\u4ef6\u6765\u6d4b\u8bd5\u4ee3\u7801\u3002\u6d4b\u8bd5\u7a0b\u5e8f\u5fc5\u987b\u5c5e\u4e8e\u88ab\u6d4b\u8bd5\u7684\u5305\uff0c\u5e76\u4e14\u6587\u4ef6\u540d\u6ee1\u8db3\u8fd9\u79cd\u5f62\u5f0f *_test.go \uff0c\u6240\u4ee5\u6d4b\u8bd5\u4ee3\u7801\u548c\u5305\u4e2d\u7684\u4e1a\u52a1\u4ee3\u7801\u662f\u5206\u5f00\u7684\u3002 _test \u7a0b\u5e8f\u4e0d\u4f1a\u88ab\u666e\u901a\u7684 Go \u7f16\u8bd1\u5668\u7f16\u8bd1\uff0c\u6240\u4ee5\u5f53\u653e\u5e94\u7528\u90e8\u7f72\u5230\u751f\u4ea7\u73af\u5883\u65f6\u5b83\u4eec\u4e0d\u4f1a\u88ab\u90e8\u7f72\uff1b\u53ea\u6709 gotest \u4f1a\u7f16\u8bd1\u6240\u6709\u7684\u7a0b\u5e8f\uff1a\u666e\u901a\u7a0b\u5e8f\u548c\u6d4b\u8bd5\u7a0b\u5e8f\u3002 \u6d4b\u8bd5\u6587\u4ef6\u4e2d\u5fc5\u987b\u5bfc\u5165 \"testing\" \u5305\uff0c\u5e76\u5199\u4e00\u4e9b\u540d\u5b57\u4ee5 TestZzz \u6253\u5934\u7684\u5168\u5c40\u51fd\u6570\uff0c\u8fd9\u91cc\u7684 Zzz \u662f\u88ab\u6d4b\u8bd5\u51fd\u6570\u7684\u5b57\u6bcd\u63cf\u8ff0\uff0c\u5982 TestFmtInterface() \uff0c TestPayEmployees() \u7b49\u3002 \u6d4b\u8bd5\u51fd\u6570\u5fc5\u987b\u6709\u8fd9\u79cd\u5f62\u5f0f\u7684\u5934\u90e8\uff1a func TestAbcde ( t * testing . T ) T \u662f\u4f20\u7ed9\u6d4b\u8bd5\u51fd\u6570\u7684\u7ed3\u6784\u7c7b\u578b\uff0c\u7528\u6765\u7ba1\u7406\u6d4b\u8bd5\u72b6\u6001\uff0c\u652f\u6301\u683c\u5f0f\u5316\u6d4b\u8bd5\u65e5\u5fd7\uff0c\u5982 t.Log \uff0c t.Error \uff0c t.ErrorF \u7b49\u3002\u5728\u51fd\u6570\u7684\u7ed3\u5c3e\u628a\u8f93\u51fa\u8ddf\u60f3\u8981\u7684\u7ed3\u679c\u5bf9\u6bd4\uff0c\u5982\u679c\u4e0d\u7b49\u5c31\u6253\u5370\u4e00\u4e2a\u9519\u8bef\uff0c\u6210\u529f\u7684\u6d4b\u8bd5\u5219\u76f4\u63a5\u8fd4\u56de\u3002 \u7528\u4e0b\u9762\u8fd9\u4e9b\u51fd\u6570\u6765\u901a\u77e5\u6d4b\u8bd5\u5931\u8d25\uff1a 1\uff09 func (t *T) Fail() \u6807\u8bb0\u6d4b\u8bd5\u51fd\u6570\u4e3a\u5931\u8d25\uff0c\u7136\u540e\u7ee7\u7eed\u6267\u884c\uff08\u5269\u4e0b\u7684\u6d4b\u8bd5\uff09\u3002 2\uff09 func (t *T) FailNow() \u6807\u8bb0\u6d4b\u8bd5\u51fd\u6570\u4e3a\u5931\u8d25\u5e76\u4e2d\u6b62\u6267\u884c\uff1b\u6587\u4ef6\u4e2d\u522b\u7684\u6d4b\u8bd5\u4e5f\u88ab\u7565\u8fc7\uff0c\u7ee7\u7eed\u6267\u884c\u4e0b\u4e00\u4e2a\u6587\u4ef6\u3002 3\uff09 func (t *T) Log(args ...interface{}) args \u88ab\u7528\u9ed8\u8ba4\u7684\u683c\u5f0f\u683c\u5f0f\u5316\u5e76\u6253\u5370\u5230\u9519\u8bef\u65e5\u5fd7\u4e2d\u3002 4\uff09 func (t *T) Fatal(args ...interface{}) \u7ed3\u5408 \u5148\u6267\u884c 3\uff09\uff0c\u7136\u540e\u6267\u884c 2\uff09\u7684\u6548\u679c\u3002 \u8fd0\u884c go test \u6765\u7f16\u8bd1\u6d4b\u8bd5\u7a0b\u5e8f\uff0c\u5e76\u6267\u884c\u7a0b\u5e8f\u4e2d\u6240\u6709\u7684 TestZZZ \u51fd\u6570\u3002\u5982\u679c\u6240\u6709\u7684\u6d4b\u8bd5\u90fd\u901a\u8fc7\u4f1a\u6253\u5370\u51fa PASS \u3002 gotest \u53ef\u4ee5\u63a5\u6536\u4e00\u4e2a\u6216\u591a\u4e2a\u51fd\u6570\u7a0b\u5e8f\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u6307\u5b9a\u4e00\u4e9b\u9009\u9879\u3002 \u7ed3\u5408 --chatty \u6216 -v \u9009\u9879\uff0c\u6bcf\u4e2a\u6267\u884c\u7684\u6d4b\u8bd5\u51fd\u6570\u4ee5\u53ca\u6d4b\u8bd5\u72b6\u6001\u4f1a\u88ab\u6253\u5370\u3002 \u4f8b\u5982\uff1a go test fmt_test.go --chatty === RUN fmt.TestFlagParser --- PASS: fmt.TestFlagParser === RUN fmt.TestArrayPrinter --- PASS: fmt.TestArrayPrinter ... testing \u5305\u4e2d\u6709\u4e00\u4e9b\u7c7b\u578b\u548c\u51fd\u6570\u53ef\u4ee5\u7528\u6765\u505a\u7b80\u5355\u7684\u57fa\u51c6\u6d4b\u8bd5\uff1b\u6d4b\u8bd5\u4ee3\u7801\u4e2d\u5fc5\u987b\u5305\u542b\u4ee5 BenchmarkZzz \u6253\u5934\u7684\u51fd\u6570\u5e76\u63a5\u6536\u4e00\u4e2a *testing.B \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u6bd4\u5982\uff1a func BenchmarkReverse ( b * testing . B ) { ... } \u547d\u4ee4 go test \u2013test.bench=.* \u4f1a\u8fd0\u884c\u6240\u6709\u7684\u57fa\u51c6\u6d4b\u8bd5\u51fd\u6570\uff1b\u4ee3\u7801\u4e2d\u7684\u51fd\u6570\u4f1a\u88ab\u8c03\u7528 N \u6b21\uff08 N \u662f\u975e\u5e38\u5927\u7684\u6570\uff0c\u5982 N = 1000000 \uff09\uff0c\u5e76\u5c55\u793a N \u7684\u503c\u548c\u51fd\u6570\u6267\u884c\u7684\u5e73\u5747\u65f6\u95f4\uff0c\u5355\u4f4d\u4e3a ns\uff08\u7eb3\u79d2\uff0cns/op\uff09\u3002\u5982\u679c\u662f\u7528 testing.Benchmark() \u8c03\u7528\u8fd9\u4e9b\u51fd\u6570\uff0c\u76f4\u63a5\u8fd0\u884c\u7a0b\u5e8f\u5373\u53ef\u3002 \u5177\u4f53\u53ef\u4ee5\u53c2\u89c1 14.16 \u8282 \u4e2d\u7528 goroutines \u8fd0\u884c\u57fa\u51c6\u6d4b\u8bd5\u7684\u4f8b\u5b50\u4ee5\u53ca\u7ec3\u4e60 13.4\uff1a string_reverse_test.go","title":"13.7 Go \u4e2d\u7684\u5355\u5143\u6d4b\u8bd5\u548c\u57fa\u51c6\u6d4b\u8bd5"},{"location":"13.7/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u542f\u52a8\u5916\u90e8\u547d\u4ee4\u548c\u7a0b\u5e8f \u4e0b\u4e00\u8282\uff1a \u6d4b\u8bd5\u7684\u5177\u4f53\u4f8b\u5b50","title":"\u94fe\u63a5"},{"location":"13.8/","text":"13.8 \u6d4b\u8bd5\u7684\u5177\u4f53\u4f8b\u5b50 \u00b6 \u5728\u7ec3\u4e60 9.4 \u4e2d\u4f60\u5199\u4e86\u4e00\u4e2a\u53eb main_oddeven.go \u7684\u7a0b\u5e8f\u7528\u6765\u6d4b\u8bd5\u524d 100 \u4e2a\u6574\u6570\u662f\u5426\u662f\u5076\u6570\u3002\u8fd9\u4e2a\u51fd\u6570\u5c5e\u4e8e even \u5305\u3002 \u4e0b\u9762\u662f\u4e00\u79cd\u53ef\u80fd\u7684\u65b9\u6848\uff1a \u793a\u4f8b 13.7 even_main.go \uff1a package main import ( \"fmt\" \"even/even\" ) func main () { for i := 0 ; i <= 100 ; i ++ { fmt . Printf ( \"Is the integer %d even? %v\\n\" , i , even . Even ( i )) } } \u4e0a\u9762\u4f7f\u7528\u4e86 even.go \u4e2d\u7684 even \u5305\uff1a \u793a\u4f8b 13.8 even/even.go \uff1a package even func Even ( i int ) bool { // Exported function return i % 2 == 0 } func Odd ( i int ) bool { // Exported function return i % 2 != 0 } \u5728 even \u5305\u7684\u8def\u5f84\u4e0b\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a oddeven_test.go \u7684\u6d4b\u8bd5\u7a0b\u5e8f\uff1a \u793a\u4f8b 13.9 even/oddeven_test.go \uff1a package even import \"testing\" func TestEven ( t * testing . T ) { if ! Even ( 10 ) { t . Log ( \" 10 must be even!\" ) t . Fail () } if Even ( 7 ) { t . Log ( \" 7 is not even!\" ) t . Fail () } } func TestOdd ( t * testing . T ) { if ! Odd ( 11 ) { t . Log ( \" 11 must be odd!\" ) t . Fail () } if Odd ( 10 ) { t . Log ( \" 10 is not odd!\" ) t . Fail () } } \u7531\u4e8e\u6d4b\u8bd5\u9700\u8981\u5177\u4f53\u7684\u8f93\u5165\u7528\u4f8b\u4e14\u4e0d\u53ef\u80fd\u6d4b\u8bd5\u5230\u6240\u6709\u7684\u7528\u4f8b\uff08\u975e\u5e38\u50cf\u4e00\u4e2a\u65e0\u7a77\u7684\u6570\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u5bf9\u8981\u4f7f\u7528\u7684\u6d4b\u8bd5\u7528\u4f8b\u601d\u8003\u518d\u4e09\u3002 \u81f3\u5c11\u5e94\u8be5\u5305\u62ec\uff1a \u6b63\u5e38\u7684\u7528\u4f8b \u53cd\u9762\u7684\u7528\u4f8b\uff08\u9519\u8bef\u7684\u8f93\u5165\uff0c\u5982\u7528\u8d1f\u6570\u6216\u5b57\u6bcd\u4ee3\u66ff\u6570\u5b57\uff0c\u6ca1\u6709\u8f93\u5165\u7b49\uff09 \u8fb9\u754c\u68c0\u67e5\u7528\u4f8b\uff08\u5982\u679c\u53c2\u6570\u7684\u53d6\u503c\u8303\u56f4\u662f 0 \u5230 1000\uff0c\u68c0\u67e5 0 \u548c 1000 \u7684\u60c5\u51b5\uff09 \u53ef\u4ee5\u76f4\u63a5\u6267\u884c go install \u5b89\u88c5 even \u6216\u8005\u521b\u5efa\u4e00\u4e2a \u4ee5\u4e0b\u5185\u5bb9\u7684 Makefile\uff1a include $( GOROOT ) /src/Make.inc TARG = even GOFILES = \\ even.go \\ include $( GOROOT ) /src/Make.pkg \u7136\u540e\u6267\u884c make\uff08\u6216 gomake\uff09\u547d\u4ee4\u6765\u6784\u5efa\u5f52\u6863\u6587\u4ef6 even.a \u6d4b\u8bd5\u4ee3\u7801\u4e0d\u80fd\u5728 GOFILES \u53c2\u6570\u4e2d\u5f15\u7528\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u5e0c\u671b\u751f\u6210\u7684\u7a0b\u5e8f\u4e2d\u6709\u6d4b\u8bd5\u4ee3\u7801\u3002\u5982\u679c\u5305\u542b\u4e86\u6d4b\u8bd5\u4ee3\u7801\uff0cgo test \u4f1a\u7ed9\u51fa\u9519\u8bef\u63d0\u793a\uff01go test \u4f1a\u751f\u6210\u4e00\u4e2a\u5355\u72ec\u7684\u5305\u542b\u6d4b\u8bd5\u4ee3\u7801\u7684 _test \u7a0b\u5e8f\u3002 \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u7528\u547d\u4ee4\uff1a go test \uff08\u6216 make test \uff09\u6765\u6d4b\u8bd5 even \u5305\u3002 \u56e0\u4e3a\u793a\u4f8b 13.5 \u4e2d\u7684\u6d4b\u8bd5\u51fd\u6570\u4e0d\u4f1a\u8c03\u7528 t.Log \u548c t.Fail\uff0c\u6240\u4ee5\u4f1a\u5f97\u5230\u4e00\u4e2a PASS \u7684\u7ed3\u679c\u3002\u5728\u8fd9\u4e2a\u7b80\u5355\u4f8b\u5b50\u4e2d\u4e00\u5207\u90fd\u6b63\u5e38\u6267\u884c\u3002 \u4e3a\u4e86\u770b\u5230\u5931\u8d25\u65f6\u7684\u8f93\u51fa\uff0c\u628a\u51fd\u6570 TestEven() \u6539\u4e3a\uff1a func TestEven ( t * testing . T ) { if Even ( 10 ) { t . Log ( \"Everything OK: 10 is even, just a test to see failed output!\" ) t . Fail () } } \u73b0\u5728\u4f1a\u8c03\u7528 t.Log \u548c t.Fail\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5982\u4e0b\uff1a --- FAIL : even . TestEven ( 0.00 seconds ) Everything OK : 10 is even , just a test to see failed output ! FAIL \u7ec3\u4e60 13.4\uff1a string_reverse_test.go \u4e3a\u7ec3\u4e60 7.14 string_reverse.go \u5199\u4e00\u4e2a\u5355\u5143\u6d4b\u8bd5\u3002 \u628a string_reverse \u653e\u5230\u81ea\u5df1\u7684\u5305 strev \u4e2d\uff0c\u53ea\u5305\u542b\u4e00\u4e2a\u53ef\u5bfc\u51fa\u51fd\u6570 Reverse() \u3002 \u5b9e\u73b0\u5e76\u6d4b\u8bd5\u5b83\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Go \u4e2d\u7684\u5355\u5143\u6d4b\u8bd5\u548c\u57fa\u51c6\u6d4b\u8bd5 \u4e0b\u4e00\u8282\uff1a \u7528\uff08\u6d4b\u8bd5\u6570\u636e\uff09\u8868\u9a71\u52a8\u6d4b\u8bd5","title":"13.8 \u6d4b\u8bd5\u7684\u5177\u4f53\u4f8b\u5b50"},{"location":"13.8/#138","text":"\u5728\u7ec3\u4e60 9.4 \u4e2d\u4f60\u5199\u4e86\u4e00\u4e2a\u53eb main_oddeven.go \u7684\u7a0b\u5e8f\u7528\u6765\u6d4b\u8bd5\u524d 100 \u4e2a\u6574\u6570\u662f\u5426\u662f\u5076\u6570\u3002\u8fd9\u4e2a\u51fd\u6570\u5c5e\u4e8e even \u5305\u3002 \u4e0b\u9762\u662f\u4e00\u79cd\u53ef\u80fd\u7684\u65b9\u6848\uff1a \u793a\u4f8b 13.7 even_main.go \uff1a package main import ( \"fmt\" \"even/even\" ) func main () { for i := 0 ; i <= 100 ; i ++ { fmt . Printf ( \"Is the integer %d even? %v\\n\" , i , even . Even ( i )) } } \u4e0a\u9762\u4f7f\u7528\u4e86 even.go \u4e2d\u7684 even \u5305\uff1a \u793a\u4f8b 13.8 even/even.go \uff1a package even func Even ( i int ) bool { // Exported function return i % 2 == 0 } func Odd ( i int ) bool { // Exported function return i % 2 != 0 } \u5728 even \u5305\u7684\u8def\u5f84\u4e0b\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a oddeven_test.go \u7684\u6d4b\u8bd5\u7a0b\u5e8f\uff1a \u793a\u4f8b 13.9 even/oddeven_test.go \uff1a package even import \"testing\" func TestEven ( t * testing . T ) { if ! Even ( 10 ) { t . Log ( \" 10 must be even!\" ) t . Fail () } if Even ( 7 ) { t . Log ( \" 7 is not even!\" ) t . Fail () } } func TestOdd ( t * testing . T ) { if ! Odd ( 11 ) { t . Log ( \" 11 must be odd!\" ) t . Fail () } if Odd ( 10 ) { t . Log ( \" 10 is not odd!\" ) t . Fail () } } \u7531\u4e8e\u6d4b\u8bd5\u9700\u8981\u5177\u4f53\u7684\u8f93\u5165\u7528\u4f8b\u4e14\u4e0d\u53ef\u80fd\u6d4b\u8bd5\u5230\u6240\u6709\u7684\u7528\u4f8b\uff08\u975e\u5e38\u50cf\u4e00\u4e2a\u65e0\u7a77\u7684\u6570\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u5bf9\u8981\u4f7f\u7528\u7684\u6d4b\u8bd5\u7528\u4f8b\u601d\u8003\u518d\u4e09\u3002 \u81f3\u5c11\u5e94\u8be5\u5305\u62ec\uff1a \u6b63\u5e38\u7684\u7528\u4f8b \u53cd\u9762\u7684\u7528\u4f8b\uff08\u9519\u8bef\u7684\u8f93\u5165\uff0c\u5982\u7528\u8d1f\u6570\u6216\u5b57\u6bcd\u4ee3\u66ff\u6570\u5b57\uff0c\u6ca1\u6709\u8f93\u5165\u7b49\uff09 \u8fb9\u754c\u68c0\u67e5\u7528\u4f8b\uff08\u5982\u679c\u53c2\u6570\u7684\u53d6\u503c\u8303\u56f4\u662f 0 \u5230 1000\uff0c\u68c0\u67e5 0 \u548c 1000 \u7684\u60c5\u51b5\uff09 \u53ef\u4ee5\u76f4\u63a5\u6267\u884c go install \u5b89\u88c5 even \u6216\u8005\u521b\u5efa\u4e00\u4e2a \u4ee5\u4e0b\u5185\u5bb9\u7684 Makefile\uff1a include $( GOROOT ) /src/Make.inc TARG = even GOFILES = \\ even.go \\ include $( GOROOT ) /src/Make.pkg \u7136\u540e\u6267\u884c make\uff08\u6216 gomake\uff09\u547d\u4ee4\u6765\u6784\u5efa\u5f52\u6863\u6587\u4ef6 even.a \u6d4b\u8bd5\u4ee3\u7801\u4e0d\u80fd\u5728 GOFILES \u53c2\u6570\u4e2d\u5f15\u7528\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u5e0c\u671b\u751f\u6210\u7684\u7a0b\u5e8f\u4e2d\u6709\u6d4b\u8bd5\u4ee3\u7801\u3002\u5982\u679c\u5305\u542b\u4e86\u6d4b\u8bd5\u4ee3\u7801\uff0cgo test \u4f1a\u7ed9\u51fa\u9519\u8bef\u63d0\u793a\uff01go test \u4f1a\u751f\u6210\u4e00\u4e2a\u5355\u72ec\u7684\u5305\u542b\u6d4b\u8bd5\u4ee3\u7801\u7684 _test \u7a0b\u5e8f\u3002 \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u7528\u547d\u4ee4\uff1a go test \uff08\u6216 make test \uff09\u6765\u6d4b\u8bd5 even \u5305\u3002 \u56e0\u4e3a\u793a\u4f8b 13.5 \u4e2d\u7684\u6d4b\u8bd5\u51fd\u6570\u4e0d\u4f1a\u8c03\u7528 t.Log \u548c t.Fail\uff0c\u6240\u4ee5\u4f1a\u5f97\u5230\u4e00\u4e2a PASS \u7684\u7ed3\u679c\u3002\u5728\u8fd9\u4e2a\u7b80\u5355\u4f8b\u5b50\u4e2d\u4e00\u5207\u90fd\u6b63\u5e38\u6267\u884c\u3002 \u4e3a\u4e86\u770b\u5230\u5931\u8d25\u65f6\u7684\u8f93\u51fa\uff0c\u628a\u51fd\u6570 TestEven() \u6539\u4e3a\uff1a func TestEven ( t * testing . T ) { if Even ( 10 ) { t . Log ( \"Everything OK: 10 is even, just a test to see failed output!\" ) t . Fail () } } \u73b0\u5728\u4f1a\u8c03\u7528 t.Log \u548c t.Fail\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5982\u4e0b\uff1a --- FAIL : even . TestEven ( 0.00 seconds ) Everything OK : 10 is even , just a test to see failed output ! FAIL \u7ec3\u4e60 13.4\uff1a string_reverse_test.go \u4e3a\u7ec3\u4e60 7.14 string_reverse.go \u5199\u4e00\u4e2a\u5355\u5143\u6d4b\u8bd5\u3002 \u628a string_reverse \u653e\u5230\u81ea\u5df1\u7684\u5305 strev \u4e2d\uff0c\u53ea\u5305\u542b\u4e00\u4e2a\u53ef\u5bfc\u51fa\u51fd\u6570 Reverse() \u3002 \u5b9e\u73b0\u5e76\u6d4b\u8bd5\u5b83\u3002","title":"13.8 \u6d4b\u8bd5\u7684\u5177\u4f53\u4f8b\u5b50"},{"location":"13.8/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Go \u4e2d\u7684\u5355\u5143\u6d4b\u8bd5\u548c\u57fa\u51c6\u6d4b\u8bd5 \u4e0b\u4e00\u8282\uff1a \u7528\uff08\u6d4b\u8bd5\u6570\u636e\uff09\u8868\u9a71\u52a8\u6d4b\u8bd5","title":"\u94fe\u63a5"},{"location":"13.9/","text":"13.9 \u7528\uff08\u6d4b\u8bd5\u6570\u636e\uff09\u8868\u9a71\u52a8\u6d4b\u8bd5 \u00b6 \u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801\u65f6\uff0c\u4e00\u4e2a\u8f83\u597d\u7684\u529e\u6cd5\u662f\u628a\u6d4b\u8bd5\u7684\u8f93\u5165\u6570\u636e\u548c\u671f\u671b\u7684\u7ed3\u679c\u5199\u5728\u4e00\u8d77\u7ec4\u6210\u4e00\u4e2a\u6570\u636e\u8868\uff1a\u8868\u4e2d\u7684\u6bcf\u6761\u8bb0\u5f55\u90fd\u662f\u4e00\u4e2a\u542b\u6709\u8f93\u5165\u548c\u671f\u671b\u503c\u7684\u5b8c\u6574\u6d4b\u8bd5\u7528\u4f8b\uff0c\u6709\u65f6\u8fd8\u53ef\u4ee5\u7ed3\u5408\u50cf\u6d4b\u8bd5\u540d\u5b57\u8fd9\u6837\u7684\u989d\u5916\u4fe1\u606f\u6765\u8ba9\u6d4b\u8bd5\u8f93\u51fa\u66f4\u591a\u7684\u4fe1\u606f\u3002 \u5b9e\u9645\u6d4b\u8bd5\u65f6\u7b80\u5355\u8fed\u4ee3\u8868\u4e2d\u7684\u6bcf\u6761\u8bb0\u5f55\uff0c\u5e76\u6267\u884c\u5fc5\u8981\u7684\u6d4b\u8bd5\u3002\u8fd9\u5728\u7ec3\u4e60 13.4 \u4e2d\u6709\u5177\u4f53\u7684\u5e94\u7528\u3002 \u53ef\u4ee5\u62bd\u8c61\u4e3a\u4e0b\u9762\u7684\u4ee3\u7801\u6bb5\uff1a var tests = [] struct { // Test table in string out string }{ { \"in1\" , \"exp1\" }, { \"in2\" , \"exp2\" }, { \"in3\" , \"exp3\" }, ... } func TestFunction ( t * testing . T ) { for i , tt := range tests { s := FuncToBeTested ( tt . in ) if s != tt . out { t . Errorf ( \"%d. %q => %q, wanted: %q\" , i , tt . in , s , tt . out ) } } } \u5982\u679c\u5927\u90e8\u5206\u51fd\u6570\u90fd\u53ef\u4ee5\u5199\u6210\u8fd9\u79cd\u5f62\u5f0f\uff0c\u90a3\u4e48\u5199\u4e00\u4e2a\u5e2e\u52a9\u51fd\u6570 verify() \u5bf9\u5b9e\u9645\u6d4b\u8bd5\u4f1a\u5f88\u6709\u5e2e\u52a9\uff1a func verify ( t * testing . T , testnum int , testcase , input , output , expected string ) { if expected != output { t . Errorf ( \"%d. %s with input = %s: output %s != %s\" , testnum , testcase , input , output , expected ) } } TestFunction() \u5219\u53d8\u4e3a\uff1a func TestFunction ( t * testing . T ) { for i , tt := range tests { s := FuncToBeTested ( tt . in ) verify ( t , i , \"FuncToBeTested: \" , tt . in , s , tt . out ) } } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6d4b\u8bd5\u7684\u5177\u4f53\u4f8b\u5b50 \u4e0b\u4e00\u8282\uff1a \u6027\u80fd\u8c03\u8bd5\uff1a\u5206\u6790\u5e76\u4f18\u5316 Go \u7a0b\u5e8f","title":"13.9 \u7528\uff08\u6d4b\u8bd5\u6570\u636e\uff09\u8868\u9a71\u52a8\u6d4b\u8bd5"},{"location":"13.9/#139","text":"\u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801\u65f6\uff0c\u4e00\u4e2a\u8f83\u597d\u7684\u529e\u6cd5\u662f\u628a\u6d4b\u8bd5\u7684\u8f93\u5165\u6570\u636e\u548c\u671f\u671b\u7684\u7ed3\u679c\u5199\u5728\u4e00\u8d77\u7ec4\u6210\u4e00\u4e2a\u6570\u636e\u8868\uff1a\u8868\u4e2d\u7684\u6bcf\u6761\u8bb0\u5f55\u90fd\u662f\u4e00\u4e2a\u542b\u6709\u8f93\u5165\u548c\u671f\u671b\u503c\u7684\u5b8c\u6574\u6d4b\u8bd5\u7528\u4f8b\uff0c\u6709\u65f6\u8fd8\u53ef\u4ee5\u7ed3\u5408\u50cf\u6d4b\u8bd5\u540d\u5b57\u8fd9\u6837\u7684\u989d\u5916\u4fe1\u606f\u6765\u8ba9\u6d4b\u8bd5\u8f93\u51fa\u66f4\u591a\u7684\u4fe1\u606f\u3002 \u5b9e\u9645\u6d4b\u8bd5\u65f6\u7b80\u5355\u8fed\u4ee3\u8868\u4e2d\u7684\u6bcf\u6761\u8bb0\u5f55\uff0c\u5e76\u6267\u884c\u5fc5\u8981\u7684\u6d4b\u8bd5\u3002\u8fd9\u5728\u7ec3\u4e60 13.4 \u4e2d\u6709\u5177\u4f53\u7684\u5e94\u7528\u3002 \u53ef\u4ee5\u62bd\u8c61\u4e3a\u4e0b\u9762\u7684\u4ee3\u7801\u6bb5\uff1a var tests = [] struct { // Test table in string out string }{ { \"in1\" , \"exp1\" }, { \"in2\" , \"exp2\" }, { \"in3\" , \"exp3\" }, ... } func TestFunction ( t * testing . T ) { for i , tt := range tests { s := FuncToBeTested ( tt . in ) if s != tt . out { t . Errorf ( \"%d. %q => %q, wanted: %q\" , i , tt . in , s , tt . out ) } } } \u5982\u679c\u5927\u90e8\u5206\u51fd\u6570\u90fd\u53ef\u4ee5\u5199\u6210\u8fd9\u79cd\u5f62\u5f0f\uff0c\u90a3\u4e48\u5199\u4e00\u4e2a\u5e2e\u52a9\u51fd\u6570 verify() \u5bf9\u5b9e\u9645\u6d4b\u8bd5\u4f1a\u5f88\u6709\u5e2e\u52a9\uff1a func verify ( t * testing . T , testnum int , testcase , input , output , expected string ) { if expected != output { t . Errorf ( \"%d. %s with input = %s: output %s != %s\" , testnum , testcase , input , output , expected ) } } TestFunction() \u5219\u53d8\u4e3a\uff1a func TestFunction ( t * testing . T ) { for i , tt := range tests { s := FuncToBeTested ( tt . in ) verify ( t , i , \"FuncToBeTested: \" , tt . in , s , tt . out ) } }","title":"13.9 \u7528\uff08\u6d4b\u8bd5\u6570\u636e\uff09\u8868\u9a71\u52a8\u6d4b\u8bd5"},{"location":"13.9/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6d4b\u8bd5\u7684\u5177\u4f53\u4f8b\u5b50 \u4e0b\u4e00\u8282\uff1a \u6027\u80fd\u8c03\u8bd5\uff1a\u5206\u6790\u5e76\u4f18\u5316 Go \u7a0b\u5e8f","title":"\u94fe\u63a5"},{"location":"14.0/","text":"14.0 \u534f\u7a0b (goroutine) \u4e0e\u901a\u9053 (channel) \u00b6 \u4f5c\u4e3a\u4e00\u95e8 21 \u4e16\u7eaa\u7684\u8bed\u8a00\uff0cGo \u539f\u751f\u652f\u6301\u5e94\u7528\u4e4b\u95f4\u7684\u901a\u4fe1\uff08\u7f51\u7edc\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\uff0c\u5206\u5e03\u5f0f\u8ba1\u7b97\uff0c\u53c2\u89c1 \u7b2c 15 \u7ae0 \u548c\u7a0b\u5e8f\u7684\u5e76\u53d1\u3002\u7a0b\u5e8f\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u5904\u7406\u5668\u548c\u8ba1\u7b97\u673a\u4e0a\u540c\u65f6\u6267\u884c\u4e0d\u540c\u7684\u4ee3\u7801\u6bb5\u3002Go \u8bed\u8a00\u4e3a\u6784\u5efa\u5e76\u53d1\u7a0b\u5e8f\u7684\u57fa\u672c\u4ee3\u7801\u5757\u662f\u534f\u7a0b (goroutine) \u4e0e\u901a\u9053 (channel)\u3002\u4ed6\u4eec\u9700\u8981\u8bed\u8a00\uff0c\u7f16\u8bd1\u5668\uff0c\u548c runtime \u7684\u652f\u6301\u3002Go \u8bed\u8a00\u63d0\u4f9b\u7684\u5783\u573e\u56de\u6536\u5668\u5bf9\u5e76\u53d1\u7f16\u7a0b\u81f3\u5173\u91cd\u8981\u3002 \u4e0d\u8981\u901a\u8fc7\u5171\u4eab\u5185\u5b58\u6765\u901a\u4fe1\uff0c\u800c\u901a\u8fc7\u901a\u4fe1\u6765\u5171\u4eab\u5185\u5b58\u3002 \u901a\u4fe1\u5f3a\u5236\u534f\u4f5c\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6027\u80fd\u8c03\u8bd5\uff1a\u5206\u6790\u5e76\u4f18\u5316 Go \u7a0b\u5e8f \u4e0b\u4e00\u8282\uff1a \u5e76\u53d1\u3001\u5e76\u884c\u548c\u534f\u7a0b","title":"14.0 \u534f\u7a0b (goroutine) \u4e0e\u901a\u9053 (channel)"},{"location":"14.0/#140-goroutine-channel","text":"\u4f5c\u4e3a\u4e00\u95e8 21 \u4e16\u7eaa\u7684\u8bed\u8a00\uff0cGo \u539f\u751f\u652f\u6301\u5e94\u7528\u4e4b\u95f4\u7684\u901a\u4fe1\uff08\u7f51\u7edc\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\uff0c\u5206\u5e03\u5f0f\u8ba1\u7b97\uff0c\u53c2\u89c1 \u7b2c 15 \u7ae0 \u548c\u7a0b\u5e8f\u7684\u5e76\u53d1\u3002\u7a0b\u5e8f\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u5904\u7406\u5668\u548c\u8ba1\u7b97\u673a\u4e0a\u540c\u65f6\u6267\u884c\u4e0d\u540c\u7684\u4ee3\u7801\u6bb5\u3002Go \u8bed\u8a00\u4e3a\u6784\u5efa\u5e76\u53d1\u7a0b\u5e8f\u7684\u57fa\u672c\u4ee3\u7801\u5757\u662f\u534f\u7a0b (goroutine) \u4e0e\u901a\u9053 (channel)\u3002\u4ed6\u4eec\u9700\u8981\u8bed\u8a00\uff0c\u7f16\u8bd1\u5668\uff0c\u548c runtime \u7684\u652f\u6301\u3002Go \u8bed\u8a00\u63d0\u4f9b\u7684\u5783\u573e\u56de\u6536\u5668\u5bf9\u5e76\u53d1\u7f16\u7a0b\u81f3\u5173\u91cd\u8981\u3002 \u4e0d\u8981\u901a\u8fc7\u5171\u4eab\u5185\u5b58\u6765\u901a\u4fe1\uff0c\u800c\u901a\u8fc7\u901a\u4fe1\u6765\u5171\u4eab\u5185\u5b58\u3002 \u901a\u4fe1\u5f3a\u5236\u534f\u4f5c\u3002","title":"14.0 \u534f\u7a0b (goroutine) \u4e0e\u901a\u9053 (channel)"},{"location":"14.0/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6027\u80fd\u8c03\u8bd5\uff1a\u5206\u6790\u5e76\u4f18\u5316 Go \u7a0b\u5e8f \u4e0b\u4e00\u8282\uff1a \u5e76\u53d1\u3001\u5e76\u884c\u548c\u534f\u7a0b","title":"\u94fe\u63a5"},{"location":"14.1/","text":"14.1 \u5e76\u53d1\u3001\u5e76\u884c\u548c\u534f\u7a0b \u00b6 14.1.1 \u4ec0\u4e48\u662f\u534f\u7a0b \u00b6 \u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u662f\u8fd0\u884c\u5728\u673a\u5668\u4e0a\u7684\u4e00\u4e2a\u8fdb\u7a0b\uff1b\u8fdb\u7a0b\u662f\u4e00\u4e2a\u8fd0\u884c\u5728\u81ea\u5df1\u5185\u5b58\u5730\u5740\u7a7a\u95f4\u91cc\u7684\u72ec\u7acb\u6267\u884c\u4f53\u3002\u4e00\u4e2a\u8fdb\u7a0b\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u7ebf\u7a0b\u7ec4\u6210\uff0c\u8fd9\u4e9b\u7ebf\u7a0b\u5176\u5b9e\u662f\u5171\u4eab\u540c\u4e00\u4e2a\u5185\u5b58\u5730\u5740\u7a7a\u95f4\u7684\u4e00\u8d77\u5de5\u4f5c\u7684\u6267\u884c\u4f53\u3002\u51e0\u4e4e\u6240\u6709'\u6b63\u5f0f'\u7684\u7a0b\u5e8f\u90fd\u662f\u591a\u7ebf\u7a0b\u7684\uff0c\u4ee5\u4fbf\u8ba9\u7528\u6237\u6216\u8ba1\u7b97\u673a\u4e0d\u5fc5\u7b49\u5f85\uff0c\u6216\u8005\u80fd\u591f\u540c\u65f6\u670d\u52a1\u591a\u4e2a\u8bf7\u6c42\uff08\u5982 Web \u670d\u52a1\u5668\uff09\uff0c\u6216\u589e\u52a0\u6027\u80fd\u548c\u541e\u5410\u91cf\uff08\u4f8b\u5982\uff0c\u901a\u8fc7\u5bf9\u4e0d\u540c\u7684\u6570\u636e\u96c6\u5e76\u884c\u6267\u884c\u4ee3\u7801\uff09\u3002\u4e00\u4e2a\u5e76\u53d1\u7a0b\u5e8f\u53ef\u4ee5\u5728\u4e00\u4e2a\u5904\u7406\u5668\u6216\u8005\u5185\u6838\u4e0a\u4f7f\u7528\u591a\u4e2a\u7ebf\u7a0b\u6765\u6267\u884c\u4efb\u52a1\uff0c\u4f46\u662f\u53ea\u6709\u540c\u4e00\u4e2a\u7a0b\u5e8f\u5728\u67d0\u4e2a\u65f6\u95f4\u70b9\u540c\u65f6\u8fd0\u884c\u5728\u591a\u6838\u6216\u8005\u591a\u5904\u7406\u5668\u4e0a\u624d\u662f\u771f\u6b63\u7684\u5e76\u884c\u3002 \u5e76\u884c\u662f\u4e00\u79cd\u901a\u8fc7\u4f7f\u7528\u591a\u5904\u7406\u5668\u4ee5\u63d0\u9ad8\u901f\u5ea6\u7684\u80fd\u529b\u3002\u6240\u4ee5\u5e76\u53d1\u7a0b\u5e8f\u53ef\u4ee5\u662f\u5e76\u884c\u7684\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u662f\u3002 \u516c\u8ba4\u7684\uff0c\u4f7f\u7528\u591a\u7ebf\u7a0b\u7684\u5e94\u7528\u96be\u4ee5\u505a\u5230\u51c6\u786e\uff0c\u6700\u4e3b\u8981\u7684\u95ee\u9898\u662f\u5185\u5b58\u4e2d\u7684\u6570\u636e\u5171\u4eab\uff0c\u5b83\u4eec\u4f1a\u88ab\u591a\u7ebf\u7a0b\u4ee5\u65e0\u6cd5\u9884\u77e5\u7684\u65b9\u5f0f\u8fdb\u884c\u64cd\u4f5c\uff0c\u5bfc\u81f4\u4e00\u4e9b\u65e0\u6cd5\u91cd\u73b0\u6216\u8005\u968f\u673a\u7684\u7ed3\u679c\uff08\u79f0\u4f5c*\u7ade\u6001*\uff09\u3002 \u4e0d\u8981\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\u6216\u8005\u5171\u4eab\u5185\u5b58\uff0c\u5b83\u4eec\u4f1a\u7ed9\u4f60\u7684\u4ee3\u7801\u5728\u5e76\u53d1\u8fd0\u7b97\u7684\u65f6\u5019\u5e26\u6765\u5371\u9669\u3002 \u89e3\u51b3\u4e4b\u9053\u5728\u4e8e\u540c\u6b65\u4e0d\u540c\u7684\u7ebf\u7a0b\uff0c\u5bf9\u6570\u636e\u52a0\u9501\uff0c\u8fd9\u6837\u540c\u65f6\u5c31\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u53d8\u66f4\u6570\u636e\u3002\u5728 Go \u7684\u6807\u51c6\u5e93 sync \u4e2d\u6709\u4e00\u4e9b\u5de5\u5177\u7528\u6765\u5728\u4f4e\u7ea7\u522b\u7684\u4ee3\u7801\u4e2d\u5b9e\u73b0\u52a0\u9501\uff1b\u6211\u4eec\u5728\u7b2c 9.3 \u8282\u4e2d\u8ba8\u8bba\u8fc7\u8fd9\u4e2a\u95ee\u9898\u3002\u4e0d\u8fc7\u8fc7\u53bb\u7684\u8f6f\u4ef6\u5f00\u53d1\u7ecf\u9a8c\u544a\u8bc9\u6211\u4eec\u8fd9\u4f1a\u5e26\u6765\u66f4\u9ad8\u7684\u590d\u6742\u5ea6\uff0c\u66f4\u5bb9\u6613\u4f7f\u4ee3\u7801\u51fa\u9519\u4ee5\u53ca\u66f4\u4f4e\u7684\u6027\u80fd\uff0c\u6240\u4ee5\u8fd9\u4e2a\u7ecf\u5178\u7684\u65b9\u6cd5\u660e\u663e\u4e0d\u518d\u9002\u5408\u73b0\u4ee3\u591a\u6838/\u591a\u5904\u7406\u5668\u7f16\u7a0b\uff1a thread-per-connection \u6a21\u578b\u4e0d\u591f\u6709\u6548\u3002 Go \u66f4\u503e\u5411\u4e8e\u5176\u4ed6\u7684\u65b9\u5f0f\uff0c\u5728\u8bf8\u591a\u6bd4\u8f83\u5408\u9002\u7684\u8303\u5f0f\u4e2d\uff0c\u6709\u4e2a\u88ab\u79f0\u4f5c Communicating Sequential Processes\uff08\u987a\u5e8f\u901a\u4fe1\u5904\u7406\uff09 \uff08CSP, C. Hoare \u53d1\u660e\u7684\uff09\u8fd8\u6709\u4e00\u4e2a\u53eb\u505a message passing-model\uff08\u6d88\u606f\u4f20\u9012\uff09 \uff08\u5df2\u7ecf\u8fd0\u7528\u5728\u4e86\u5176\u4ed6\u8bed\u8a00\u4e2d\uff0c\u6bd4\u5982 Erlang\uff09\u3002 \u5728 Go \u4e2d\uff0c\u5e94\u7528\u7a0b\u5e8f\u5e76\u53d1\u5904\u7406\u7684\u90e8\u5206\u88ab\u79f0\u4f5c goroutines\uff08\u534f\u7a0b\uff09 \uff0c\u5b83\u53ef\u4ee5\u8fdb\u884c\u66f4\u6709\u6548\u7684\u5e76\u53d1\u8fd0\u7b97\u3002\u5728\u534f\u7a0b\u548c\u64cd\u4f5c\u7cfb\u7edf\u7ebf\u7a0b\u4e4b\u95f4\u5e76\u65e0\u4e00\u5bf9\u4e00\u7684\u5173\u7cfb\uff1a\u534f\u7a0b\u662f\u6839\u636e\u4e00\u4e2a\u6216\u591a\u4e2a\u7ebf\u7a0b\u7684\u53ef\u7528\u6027\uff0c\u6620\u5c04\uff08\u591a\u8def\u590d\u7528\uff0c\u6267\u884c\u4e8e\uff09\u5728\u4ed6\u4eec\u4e4b\u4e0a\u7684\uff1b\u534f\u7a0b\u8c03\u5ea6\u5668\u5728 Go \u8fd0\u884c\u65f6\u5f88\u597d\u7684\u5b8c\u6210\u4e86\u8fd9\u4e2a\u5de5\u4f5c\u3002 \u534f\u7a0b\u5de5\u4f5c\u5728\u76f8\u540c\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\uff0c\u6240\u4ee5\u5171\u4eab\u5185\u5b58\u7684\u65b9\u5f0f\u4e00\u5b9a\u662f\u540c\u6b65\u7684\uff1b\u8fd9\u4e2a\u53ef\u4ee5\u4f7f\u7528 sync \u5305\u6765\u5b9e\u73b0\uff08\u53c2\u89c1\u7b2c 9.3 \u8282\uff09\uff0c\u4e0d\u8fc7\u6211\u4eec\u5f88\u4e0d\u9f13\u52b1\u8fd9\u6837\u505a\uff1aGo \u4f7f\u7528 channels \u6765\u540c\u6b65\u534f\u7a0b\uff08\u53ef\u4ee5\u53c2\u89c1\u7b2c 14.2 \u8282\u7b49\u7ae0\u8282\uff09 \u5f53\u7cfb\u7edf\u8c03\u7528\uff08\u6bd4\u5982\u7b49\u5f85 I/O\uff09\u963b\u585e\u534f\u7a0b\u65f6\uff0c\u5176\u4ed6\u534f\u7a0b\u4f1a\u7ee7\u7eed\u5728\u5176\u4ed6\u7ebf\u7a0b\u4e0a\u5de5\u4f5c\u3002\u534f\u7a0b\u7684\u8bbe\u8ba1\u9690\u85cf\u4e86\u8bb8\u591a\u7ebf\u7a0b\u521b\u5efa\u548c\u7ba1\u7406\u65b9\u9762\u7684\u590d\u6742\u5de5\u4f5c\u3002 \u534f\u7a0b\u662f\u8f7b\u91cf\u7684\uff0c\u6bd4\u7ebf\u7a0b\u66f4\u8f7b\u3002\u5b83\u4eec\u75d5\u8ff9\u975e\u5e38\u4e0d\u660e\u663e\uff08\u4f7f\u7528\u5c11\u91cf\u7684\u5185\u5b58\u548c\u8d44\u6e90\uff09\uff1a\u4f7f\u7528 4K \u7684\u6808\u5185\u5b58\u5c31\u53ef\u4ee5\u5728\u5806\u4e2d\u521b\u5efa\u5b83\u4eec\u3002\u56e0\u4e3a\u521b\u5efa\u975e\u5e38\u5ec9\u4ef7\uff0c\u5fc5\u8981\u7684\u65f6\u5019\u53ef\u4ee5\u8f7b\u677e\u521b\u5efa\u5e76\u8fd0\u884c\u5927\u91cf\u7684\u534f\u7a0b\uff08\u5728\u540c\u4e00\u4e2a\u5730\u5740\u7a7a\u95f4\u4e2d 100,000 \u4e2a\u8fde\u7eed\u7684\u534f\u7a0b\uff09\u3002\u5e76\u4e14\u5b83\u4eec\u5bf9\u6808\u8fdb\u884c\u4e86\u5206\u5272\uff0c\u4ece\u800c\u52a8\u6001\u7684\u589e\u52a0\uff08\u6216\u7f29\u51cf\uff09\u5185\u5b58\u7684\u4f7f\u7528\uff1b\u6808\u7684\u7ba1\u7406\u662f\u81ea\u52a8\u7684\uff0c\u4f46\u4e0d\u662f\u7531\u5783\u573e\u56de\u6536\u5668\u7ba1\u7406\u7684\uff0c\u800c\u662f\u5728\u534f\u7a0b\u9000\u51fa\u540e\u81ea\u52a8\u91ca\u653e\u3002 \u534f\u7a0b\u53ef\u4ee5\u8fd0\u884c\u5728\u591a\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u7ebf\u7a0b\u4e4b\u95f4\uff0c\u4e5f\u53ef\u4ee5\u8fd0\u884c\u5728\u7ebf\u7a0b\u4e4b\u5185\uff0c\u8ba9\u4f60\u53ef\u4ee5\u5f88\u5c0f\u7684\u5185\u5b58\u5360\u7528\u5c31\u53ef\u4ee5\u5904\u7406\u5927\u91cf\u7684\u4efb\u52a1\u3002\u7531\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u7ebf\u7a0b\u4e0a\u7684\u534f\u7a0b\u65f6\u95f4\u7247\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5c11\u91cf\u7684\u64cd\u4f5c\u7cfb\u7edf\u7ebf\u7a0b\u5c31\u80fd\u62e5\u6709\u4efb\u610f\u591a\u4e2a\u63d0\u4f9b\u670d\u52a1\u7684\u534f\u7a0b\uff0c\u800c\u4e14 Go \u8fd0\u884c\u65f6\u53ef\u4ee5\u806a\u660e\u7684\u610f\u8bc6\u5230\u54ea\u4e9b\u534f\u7a0b\u88ab\u963b\u585e\u4e86\uff0c\u6682\u65f6\u6401\u7f6e\u5b83\u4eec\u5e76\u5904\u7406\u5176\u4ed6\u534f\u7a0b\u3002 \u5b58\u5728\u4e24\u79cd\u5e76\u53d1\u65b9\u5f0f\uff1a\u786e\u5b9a\u6027\u7684\uff08\u660e\u786e\u5b9a\u4e49\u6392\u5e8f\uff09\u548c\u975e\u786e\u5b9a\u6027\u7684\uff08\u52a0\u9501/\u4e92\u65a5\u4ece\u800c\u672a\u5b9a\u4e49\u6392\u5e8f\uff09\u3002Go \u7684\u534f\u7a0b\u548c\u901a\u9053\u7406\u6240\u5f53\u7136\u7684\u652f\u6301\u786e\u5b9a\u6027\u7684\u5e76\u53d1\u65b9\u5f0f\uff08\u4f8b\u5982\u901a\u9053\u5177\u6709\u4e00\u4e2a sender \u548c\u4e00\u4e2a receiver\uff09\u3002\u6211\u4eec\u4f1a\u5728\u7b2c 14.7 \u8282\u4e2d\u4f7f\u7528\u4e00\u4e2a\u5e38\u89c1\u7684\u7b97\u6cd5\u95ee\u9898\uff08\u5de5\u4eba\u95ee\u9898\uff09\u6765\u5bf9\u6bd4\u4e24\u79cd\u5904\u7406\u65b9\u5f0f\u3002 \u534f\u7a0b\u662f\u901a\u8fc7\u4f7f\u7528\u5173\u952e\u5b57 go \u8c03\u7528\uff08\u6267\u884c\uff09\u4e00\u4e2a\u51fd\u6570\u6216\u8005\u65b9\u6cd5\u6765\u5b9e\u73b0\u7684\uff08\u4e5f\u53ef\u4ee5\u662f\u533f\u540d\u6216\u8005 lambda \u51fd\u6570\uff09\u3002\u8fd9\u6837\u4f1a\u5728\u5f53\u524d\u7684\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u5f00\u59cb\u4e00\u4e2a\u540c\u65f6\u8fdb\u884c\u7684\u51fd\u6570\uff0c\u5728\u76f8\u540c\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\u5e76\u4e14\u5206\u914d\u4e86\u72ec\u7acb\u7684\u6808\uff0c\u6bd4\u5982\uff1a go sum(bigArray) \uff0c\u5728\u540e\u53f0\u8ba1\u7b97\u603b\u548c\u3002 \u534f\u7a0b\u7684\u6808\u4f1a\u6839\u636e\u9700\u8981\u8fdb\u884c\u4f38\u7f29\uff0c\u4e0d\u51fa\u73b0\u6808\u6ea2\u51fa\uff1b\u5f00\u53d1\u8005\u4e0d\u9700\u8981\u5173\u5fc3\u6808\u7684\u5927\u5c0f\u3002\u5f53\u534f\u7a0b\u7ed3\u675f\u7684\u65f6\u5019\uff0c\u5b83\u4f1a\u9759\u9ed8\u9000\u51fa\uff1a\u7528\u6765\u542f\u52a8\u8fd9\u4e2a\u534f\u7a0b\u7684\u51fd\u6570\u4e0d\u4f1a\u5f97\u5230\u4efb\u4f55\u7684\u8fd4\u56de\u503c\u3002 \u4efb\u4f55 Go \u7a0b\u5e8f\u90fd\u5fc5\u987b\u6709\u7684 main() \u51fd\u6570\u4e5f\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u4e2a\u534f\u7a0b\uff0c\u5c3d\u7ba1\u5b83\u5e76\u6ca1\u6709\u901a\u8fc7 go \u6765\u542f\u52a8\u3002\u534f\u7a0b\u53ef\u4ee5\u5728\u7a0b\u5e8f\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\u4e2d\u8fd0\u884c\uff08\u5728 init() \u51fd\u6570\u4e2d\uff09\u3002 \u5728\u4e00\u4e2a\u534f\u7a0b\u4e2d\uff0c\u6bd4\u5982\u5b83\u9700\u8981\u8fdb\u884c\u975e\u5e38\u5bc6\u96c6\u7684\u8fd0\u7b97\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd0\u7b97\u5faa\u73af\u4e2d\u5468\u671f\u7684\u4f7f\u7528 runtime.Gosched() \uff1a\u8fd9\u4f1a\u8ba9\u51fa\u5904\u7406\u5668\uff0c\u5141\u8bb8\u8fd0\u884c\u5176\u4ed6\u534f\u7a0b\uff1b\u5b83\u5e76\u4e0d\u4f1a\u4f7f\u5f53\u524d\u534f\u7a0b\u6302\u8d77\uff0c\u6240\u4ee5\u5b83\u4f1a\u81ea\u52a8\u6062\u590d\u6267\u884c\u3002\u4f7f\u7528 Gosched() \u53ef\u4ee5\u4f7f\u8ba1\u7b97\u5747\u5300\u5206\u5e03\uff0c\u4f7f\u901a\u4fe1\u4e0d\u81f3\u4e8e\u8fdf\u8fdf\u5f97\u4e0d\u5230\u54cd\u5e94\u3002 14.1.2 \u5e76\u53d1\u548c\u5e76\u884c\u7684\u5dee\u5f02 \u00b6 Go \u7684\u5e76\u53d1\u539f\u8bed\u63d0\u4f9b\u4e86\u826f\u597d\u7684\u5e76\u53d1\u8bbe\u8ba1\u57fa\u7840\uff1a\u8868\u8fbe\u7a0b\u5e8f\u7ed3\u6784\u4ee5\u4fbf\u8868\u793a\u72ec\u7acb\u5730\u6267\u884c\u7684\u52a8\u4f5c\uff1b\u6240\u4ee5 Go \u7684\u91cd\u70b9\u4e0d\u5728\u4e8e\u5e76\u884c\u7684\u9996\u8981\u4f4d\u7f6e\uff1a\u5e76\u53d1\u7a0b\u5e8f\u53ef\u80fd\u662f\u5e76\u884c\u7684\uff0c\u4e5f\u53ef\u80fd\u4e0d\u662f\u3002\u5e76\u884c\u662f\u4e00\u79cd\u901a\u8fc7\u4f7f\u7528\u591a\u5904\u7406\u5668\u4ee5\u63d0\u9ad8\u901f\u5ea6\u7684\u80fd\u529b\u3002\u4f46\u5f80\u5f80\u662f\uff0c\u4e00\u4e2a\u8bbe\u8ba1\u826f\u597d\u7684\u5e76\u53d1\u7a0b\u5e8f\u5728\u5e76\u884c\u65b9\u9762\u7684\u8868\u73b0\u4e5f\u975e\u5e38\u51fa\u8272\u3002 \u5728\u5f53\u524d\u7684\u8fd0\u884c\u65f6\uff082012 \u5e74\u4e00\u6708\uff09\u5b9e\u73b0\u4e2d\uff0cGo \u9ed8\u8ba4\u6ca1\u6709\u5e76\u884c\u6307\u4ee4\uff0c\u53ea\u6709\u4e00\u4e2a\u72ec\u7acb\u7684\u6838\u5fc3\u6216\u5904\u7406\u5668\u88ab\u4e13\u95e8\u7528\u4e8e Go \u7a0b\u5e8f\uff0c\u4e0d\u8bba\u5b83\u542f\u52a8\u4e86\u591a\u5c11\u4e2a\u534f\u7a0b\uff1b\u6240\u4ee5\u8fd9\u4e9b\u534f\u7a0b\u662f\u5e76\u53d1\u8fd0\u884c\u7684\uff0c\u4f46\u4ed6\u4eec\u4e0d\u662f\u5e76\u884c\u8fd0\u884c\u7684\uff1a\u540c\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a\u534f\u7a0b\u4f1a\u5904\u5728\u8fd0\u884c\u72b6\u6001\u3002 \u8fd9\u4e2a\u60c5\u51b5\u5728\u4ee5\u540e\u53ef\u80fd\u4f1a\u53d1\u751f\u6539\u53d8\uff0c\u4e0d\u8fc7\u5c4a\u65f6\uff0c\u4e3a\u4e86\u4f7f\u4f60\u7684\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u6838\u5fc3\u8fd0\u884c\uff0c\u8fd9\u65f6\u534f\u7a0b\u5c31\u771f\u6b63\u7684\u662f\u5e76\u884c\u8fd0\u884c\u4e86\uff0c\u4f60\u5fc5\u987b\u4f7f\u7528 GOMAXPROCS \u53d8\u91cf\u3002 \u8fd9\u4f1a\u544a\u8bc9\u8fd0\u884c\u65f6\u6709\u591a\u5c11\u4e2a\u534f\u7a0b\u540c\u65f6\u6267\u884c\u3002 \u5e76\u4e14\u53ea\u6709 gc \u7f16\u8bd1\u5668\u771f\u6b63\u5b9e\u73b0\u4e86\u534f\u7a0b\uff0c\u9002\u5f53\u7684\u628a\u534f\u7a0b\u6620\u5c04\u5230\u64cd\u4f5c\u7cfb\u7edf\u7ebf\u7a0b\u3002\u4f7f\u7528 gccgo \u7f16\u8bd1\u5668\uff0c\u4f1a\u4e3a\u6bcf\u4e00\u4e2a\u534f\u7a0b\u521b\u5efa\u64cd\u4f5c\u7cfb\u7edf\u7ebf\u7a0b\u3002 14.1.3 \u4f7f\u7528 GOMAXPROCS \u00b6 \u5728 gc \u7f16\u8bd1\u5668\u4e0b\uff086g \u6216\u8005 8g\uff09\u4f60\u5fc5\u987b\u8bbe\u7f6e GOMAXPROCS \u4e3a\u4e00\u4e2a\u5927\u4e8e\u9ed8\u8ba4\u503c 1 \u7684\u6570\u503c\u6765\u5141\u8bb8\u8fd0\u884c\u65f6\u652f\u6301\u4f7f\u7528\u591a\u4e8e 1 \u4e2a\u7684\u64cd\u4f5c\u7cfb\u7edf\u7ebf\u7a0b\uff0c\u6240\u6709\u7684\u534f\u7a0b\u90fd\u4f1a\u5171\u4eab\u540c\u4e00\u4e2a\u7ebf\u7a0b\u9664\u975e\u5c06 GOMAXPROCS \u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u5927\u4e8e 1 \u7684\u6570\u3002\u5f53 GOMAXPROCS \u5927\u4e8e 1 \u65f6\uff0c\u4f1a\u6709\u4e00\u4e2a\u7ebf\u7a0b\u6c60\u7ba1\u7406\u8bb8\u591a\u7684\u7ebf\u7a0b\u3002\u901a\u8fc7 gccgo \u7f16\u8bd1\u5668 GOMAXPROCS \u6709\u6548\u7684\u4e0e\u8fd0\u884c\u4e2d\u7684\u534f\u7a0b\u6570\u91cf\u76f8\u7b49\u3002\u5047\u8bbe n \u662f\u673a\u5668\u4e0a\u5904\u7406\u5668\u6216\u8005\u6838\u5fc3\u7684\u6570\u91cf\u3002\u5982\u679c\u4f60\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf GOMAXPROCS>=n \uff0c\u6216\u8005\u6267\u884c runtime.GOMAXPROCS(n) \uff0c\u63a5\u4e0b\u6765\u534f\u7a0b\u4f1a\u88ab\u5206\u5272\uff08\u5206\u6563\uff09\u5230 n \u4e2a\u5904\u7406\u5668\u4e0a\u3002\u66f4\u591a\u7684\u5904\u7406\u5668\u5e76\u4e0d\u610f\u5473\u7740\u6027\u80fd\u7684\u7ebf\u6027\u63d0\u5347\u3002\u6709\u8fd9\u6837\u4e00\u4e2a\u7ecf\u9a8c\u6cd5\u5219\uff0c\u5bf9\u4e8e n \u4e2a\u6838\u5fc3\u7684\u60c5\u51b5\u8bbe\u7f6e GOMAXPROCS \u4e3a n-1 \u4ee5\u83b7\u5f97\u6700\u4f73\u6027\u80fd\uff0c\u4e5f\u540c\u6837\u9700\u8981\u9075\u5b88\u8fd9\u6761\u89c4\u5219\uff1a\u534f\u7a0b\u7684\u6570\u91cf > 1 + GOMAXPROCS > 1\u3002 \u6240\u4ee5\u5982\u679c\u5728\u67d0\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a\u534f\u7a0b\u5728\u6267\u884c\uff0c\u4e0d\u8981\u8bbe\u7f6e GOMAXPROCS \uff01 \u8fd8\u6709\u4e00\u4e9b\u901a\u8fc7\u5b9e\u9a8c\u89c2\u5bdf\u5230\u7684\u73b0\u8c61\uff1a\u5728\u4e00\u53f0 1 \u9897 CPU \u7684\u7b14\u8bb0\u672c\u7535\u8111\u4e0a\uff0c\u589e\u52a0 GOMAXPROCS \u5230 9 \u4f1a\u5e26\u6765\u6027\u80fd\u63d0\u5347\u3002\u5728\u4e00\u53f0 32 \u6838\u7684\u673a\u5668\u4e0a\uff0c\u8bbe\u7f6e GOMAXPROCS=8 \u4f1a\u8fbe\u5230\u6700\u597d\u7684\u6027\u80fd\uff0c\u5728\u6d4b\u8bd5\u73af\u5883\u4e2d\uff0c\u66f4\u9ad8\u7684\u6570\u503c\u65e0\u6cd5\u63d0\u5347\u6027\u80fd\u3002\u5982\u679c\u8bbe\u7f6e\u4e00\u4e2a\u5f88\u5927\u7684 GOMAXPROCS \u53ea\u4f1a\u5e26\u6765\u8f7b\u5fae\u7684\u6027\u80fd\u4e0b\u964d\uff1b\u8bbe\u7f6e GOMAXPROCS=100 \uff0c\u4f7f\u7528 top \u547d\u4ee4\u548c H \u9009\u9879\u67e5\u770b\u5230\u53ea\u6709 7 \u4e2a\u6d3b\u52a8\u7684\u7ebf\u7a0b\u3002 \u589e\u52a0 GOMAXPROCS \u7684\u6570\u503c\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u5e76\u53d1\u8ba1\u7b97\u662f\u6709\u597d\u5904\u7684\uff1b \u8bf7\u770b goroutine_select2.go \u603b\u7ed3\uff1a GOMAXPROCS \u7b49\u540c\u4e8e\uff08\u5e76\u53d1\u7684\uff09\u7ebf\u7a0b\u6570\u91cf\uff0c\u5728\u4e00\u53f0\u6838\u5fc3\u6570\u591a\u4e8e 1 \u4e2a\u7684\u673a\u5668\u4e0a\uff0c\u4f1a\u5c3d\u53ef\u80fd\u6709\u7b49\u540c\u4e8e\u6838\u5fc3\u6570\u7684\u7ebf\u7a0b\u5728\u5e76\u884c\u8fd0\u884c\u3002 14.1.4 \u5982\u4f55\u7528\u547d\u4ee4\u884c\u6307\u5b9a\u4f7f\u7528\u7684\u6838\u5fc3\u6570\u91cf \u00b6 \u4f7f\u7528 flags \u5305\uff0c\u5982\u4e0b\uff1a var numCores = flag . Int ( \"n\" , 2 , \"number of CPU cores to use\" ) \u5728 main() \u4e2d\uff1a flag . Parse () runtime . GOMAXPROCS ( * numCores ) \u534f\u7a0b\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 runtime.Goexit() \u6765\u505c\u6b62\uff0c\u5c3d\u7ba1\u8fd9\u6837\u505a\u51e0\u4e4e\u6ca1\u6709\u5fc5\u8981\u3002 \u793a\u4f8b 14.1- goroutine1.go \u4ecb\u7ecd\u4e86\u6982\u5ff5\uff1a package main import ( \"fmt\" \"time\" ) func main () { fmt . Println ( \"In main()\" ) go longWait () go shortWait () fmt . Println ( \"About to sleep in main()\" ) // sleep works with a Duration in nanoseconds (ns) ! time . Sleep ( 10 * 1e9 ) fmt . Println ( \"At the end of main()\" ) } func longWait () { fmt . Println ( \"Beginning longWait()\" ) time . Sleep ( 5 * 1e9 ) // sleep for 5 seconds fmt . Println ( \"End of longWait()\" ) } func shortWait () { fmt . Println ( \"Beginning shortWait()\" ) time . Sleep ( 2 * 1e9 ) // sleep for 2 seconds fmt . Println ( \"End of shortWait()\" ) } \u8f93\u51fa\uff1a In main() About to sleep in main() Beginning longWait() Beginning shortWait() End of shortWait() End of longWait() At the end of main() // after 10s main() \uff0c longWait() \u548c shortWait() \u4e09\u4e2a\u51fd\u6570\u4f5c\u4e3a\u72ec\u7acb\u7684\u5904\u7406\u5355\u5143\u6309\u987a\u5e8f\u542f\u52a8\uff0c\u7136\u540e\u5f00\u59cb\u5e76\u884c\u8fd0\u884c\u3002\u6bcf\u4e00\u4e2a\u51fd\u6570\u90fd\u5728\u8fd0\u884c\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u9636\u6bb5\u8f93\u51fa\u4e86\u6d88\u606f\u3002\u4e3a\u4e86\u6a21\u62df\u4ed6\u4eec\u8fd0\u7b97\u7684\u65f6\u95f4\u6d88\u8017\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 time \u5305\u4e2d\u7684 Sleep \u51fd\u6570\u3002 Sleep() \u53ef\u4ee5\u6309\u7167\u6307\u5b9a\u7684\u65f6\u95f4\u6765\u6682\u505c\u51fd\u6570\u6216\u534f\u7a0b\u7684\u6267\u884c\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86\u7eb3\u79d2\uff08 ns \uff0c\u7b26\u53f7 1e9 \u8868\u793a 1 \u4e58 10 \u7684 9 \u6b21\u65b9\uff0c e =\u6307\u6570\uff09\u3002 \u4ed6\u4eec\u6309\u7167\u6211\u4eec\u671f\u671b\u7684\u987a\u5e8f\u6253\u5370\u51fa\u4e86\u6d88\u606f\uff0c\u51e0\u4e4e\u90fd\u4e00\u6837\uff0c\u53ef\u662f\u6211\u4eec\u660e\u767d\u8fd9\u662f\u6a21\u62df\u51fa\u6765\u7684\uff0c\u4ee5\u5e76\u884c\u7684\u65b9\u5f0f\u3002\u6211\u4eec\u8ba9 main() \u51fd\u6570\u6682\u505c 10 \u79d2\u4ece\u800c\u786e\u5b9a\u5b83\u4f1a\u5728\u53e6\u5916\u4e24\u4e2a\u534f\u7a0b\u4e4b\u540e\u7ed3\u675f\u3002\u5982\u679c\u4e0d\u8fd9\u6837\uff08\u5982\u679c\u6211\u4eec\u8ba9 main() \u51fd\u6570\u505c\u6b62 4 \u79d2\uff09\uff0c main() \u4f1a\u63d0\u524d\u7ed3\u675f\uff0c longWait() \u5219\u65e0\u6cd5\u5b8c\u6210\u3002\u5982\u679c\u6211\u4eec\u4e0d\u5728 main() \u4e2d\u7b49\u5f85\uff0c\u534f\u7a0b\u4f1a\u968f\u7740\u7a0b\u5e8f\u7684\u7ed3\u675f\u800c\u6d88\u4ea1\u3002 \u5f53 main() \u51fd\u6570\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u7a0b\u5e8f\u9000\u51fa\uff1a\u5b83\u4e0d\u4f1a\u7b49\u5f85\u4efb\u4f55\u5176\u4ed6\u975e main \u534f\u7a0b\u7684\u7ed3\u675f\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5728\u670d\u52a1\u5668\u7a0b\u5e8f\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u8bf7\u6c42\u90fd\u4f1a\u542f\u52a8\u4e00\u4e2a\u534f\u7a0b\u6765\u5904\u7406\uff0c server() \u51fd\u6570\u5fc5\u987b\u4fdd\u6301\u8fd0\u884c\u72b6\u6001\u3002\u901a\u5e38\u4f7f\u7528\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u6765\u8fbe\u5230\u8fd9\u6837\u7684\u76ee\u7684\u3002 \u53e6\u5916\uff0c\u534f\u7a0b\u662f\u72ec\u7acb\u7684\u5904\u7406\u5355\u5143\uff0c\u4e00\u65e6\u9646\u7eed\u542f\u52a8\u4e00\u4e9b\u534f\u7a0b\uff0c\u4f60\u65e0\u6cd5\u786e\u5b9a\u4ed6\u4eec\u662f\u4ec0\u4e48\u65f6\u5019\u771f\u6b63\u5f00\u59cb\u6267\u884c\u7684\u3002\u4f60\u7684\u4ee3\u7801\u903b\u8f91\u5fc5\u987b\u72ec\u7acb\u4e8e\u534f\u7a0b\u8c03\u7528\u7684\u987a\u5e8f\u3002 \u4e3a\u4e86\u5bf9\u6bd4\u4f7f\u7528\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u8fde\u7eed\u8c03\u7528\u7684\u60c5\u51b5\uff0c\u79fb\u9664 go \u5173\u952e\u5b57\uff0c\u91cd\u65b0\u8fd0\u884c\u7a0b\u5e8f\u3002 \u73b0\u5728\u8f93\u51fa\uff1a In main() Beginning longWait() End of longWait() Beginning shortWait() End of shortWait() About to sleep in main() At the end of main() // after 17 s \u534f\u7a0b\u66f4\u6709\u7528\u7684\u4e00\u4e2a\u4f8b\u5b50\u5e94\u8be5\u662f\u5728\u4e00\u4e2a\u975e\u5e38\u957f\u7684\u6570\u7ec4\u4e2d\u67e5\u627e\u4e00\u4e2a\u5143\u7d20\u3002 \u5c06\u6570\u7ec4\u5206\u5272\u4e3a\u82e5\u5e72\u4e2a\u4e0d\u91cd\u590d\u7684\u5207\u7247\uff0c\u7136\u540e\u7ed9\u6bcf\u4e00\u4e2a\u5207\u7247\u542f\u52a8\u4e00\u4e2a\u534f\u7a0b\u8fdb\u884c\u67e5\u627e\u8ba1\u7b97\u3002\u8fd9\u6837\u8bb8\u591a\u5e76\u884c\u7684\u534f\u7a0b\u53ef\u4ee5\u7528\u6765\u8fdb\u884c\u67e5\u627e\u4efb\u52a1\uff0c\u6574\u4f53\u7684\u67e5\u627e\u65f6\u95f4\u4f1a\u7f29\u77ed\uff08\u9664\u4ee5\u534f\u7a0b\u7684\u6570\u91cf\uff09\u3002 14.1.5 Go \u534f\u7a0b (goroutines) \u548c\u534f\u7a0b (coroutines) \u00b6 \uff08\u8bd1\u8005\u6ce8\uff1a\u6807\u9898\u4e2d\u7684\u201cGo\u534f\u7a0b (goroutines)\u201d\u5373\u662f 14 \u7ae0\u8bb2\u7684\u534f\u7a0b\uff0c\u6307\u7684\u662f Go \u8bed\u8a00\u4e2d\u7684\u534f\u7a0b\u3002\u800c\u201c\u534f\u7a0b(coroutines)\u201d\u6307\u7684\u662f\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u534f\u7a0b\u6982\u5ff5\uff0c\u4ec5\u5728\u672c\u8282\u51fa\u73b0\u3002\uff09 \u5728\u5176\u4ed6\u8bed\u8a00\u4e2d\uff0c\u6bd4\u5982 C#\uff0cLua \u6216\u8005 Python \u90fd\u6709\u534f\u7a0b\u7684\u6982\u5ff5\u3002\u8fd9\u4e2a\u540d\u5b57\u8868\u660e\u5b83\u548c Go \u534f\u7a0b\u6709\u4e9b\u76f8\u4f3c\uff0c\u4e0d\u8fc7\u6709\u4e24\u70b9\u4e0d\u540c\uff1a Go \u534f\u7a0b\u610f\u5473\u7740\u5e76\u884c\uff08\u6216\u8005\u53ef\u4ee5\u4ee5\u5e76\u884c\u7684\u65b9\u5f0f\u90e8\u7f72\uff09\uff0c\u534f\u7a0b\u4e00\u822c\u6765\u8bf4\u4e0d\u662f\u8fd9\u6837\u7684 Go \u534f\u7a0b\u901a\u8fc7\u901a\u9053\u6765\u901a\u4fe1\uff1b\u534f\u7a0b\u901a\u8fc7\u8ba9\u51fa\u548c\u6062\u590d\u64cd\u4f5c\u6765\u901a\u4fe1 Go \u534f\u7a0b\u6bd4\u534f\u7a0b\u66f4\u5f3a\u5927\uff0c\u4e5f\u5f88\u5bb9\u6613\u4ece\u534f\u7a0b\u7684\u903b\u8f91\u590d\u7528\u5230 Go \u534f\u7a0b\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u534f\u7a0b (goroutine) \u4e0e\u901a\u9053 (channel) \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528\u901a\u9053\u8fdb\u884c\u534f\u7a0b\u95f4\u901a\u4fe1","title":"14.1 \u5e76\u53d1\u3001\u5e76\u884c\u548c\u534f\u7a0b"},{"location":"14.1/#141","text":"","title":"14.1 \u5e76\u53d1\u3001\u5e76\u884c\u548c\u534f\u7a0b"},{"location":"14.1/#1411","text":"\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u662f\u8fd0\u884c\u5728\u673a\u5668\u4e0a\u7684\u4e00\u4e2a\u8fdb\u7a0b\uff1b\u8fdb\u7a0b\u662f\u4e00\u4e2a\u8fd0\u884c\u5728\u81ea\u5df1\u5185\u5b58\u5730\u5740\u7a7a\u95f4\u91cc\u7684\u72ec\u7acb\u6267\u884c\u4f53\u3002\u4e00\u4e2a\u8fdb\u7a0b\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u7ebf\u7a0b\u7ec4\u6210\uff0c\u8fd9\u4e9b\u7ebf\u7a0b\u5176\u5b9e\u662f\u5171\u4eab\u540c\u4e00\u4e2a\u5185\u5b58\u5730\u5740\u7a7a\u95f4\u7684\u4e00\u8d77\u5de5\u4f5c\u7684\u6267\u884c\u4f53\u3002\u51e0\u4e4e\u6240\u6709'\u6b63\u5f0f'\u7684\u7a0b\u5e8f\u90fd\u662f\u591a\u7ebf\u7a0b\u7684\uff0c\u4ee5\u4fbf\u8ba9\u7528\u6237\u6216\u8ba1\u7b97\u673a\u4e0d\u5fc5\u7b49\u5f85\uff0c\u6216\u8005\u80fd\u591f\u540c\u65f6\u670d\u52a1\u591a\u4e2a\u8bf7\u6c42\uff08\u5982 Web \u670d\u52a1\u5668\uff09\uff0c\u6216\u589e\u52a0\u6027\u80fd\u548c\u541e\u5410\u91cf\uff08\u4f8b\u5982\uff0c\u901a\u8fc7\u5bf9\u4e0d\u540c\u7684\u6570\u636e\u96c6\u5e76\u884c\u6267\u884c\u4ee3\u7801\uff09\u3002\u4e00\u4e2a\u5e76\u53d1\u7a0b\u5e8f\u53ef\u4ee5\u5728\u4e00\u4e2a\u5904\u7406\u5668\u6216\u8005\u5185\u6838\u4e0a\u4f7f\u7528\u591a\u4e2a\u7ebf\u7a0b\u6765\u6267\u884c\u4efb\u52a1\uff0c\u4f46\u662f\u53ea\u6709\u540c\u4e00\u4e2a\u7a0b\u5e8f\u5728\u67d0\u4e2a\u65f6\u95f4\u70b9\u540c\u65f6\u8fd0\u884c\u5728\u591a\u6838\u6216\u8005\u591a\u5904\u7406\u5668\u4e0a\u624d\u662f\u771f\u6b63\u7684\u5e76\u884c\u3002 \u5e76\u884c\u662f\u4e00\u79cd\u901a\u8fc7\u4f7f\u7528\u591a\u5904\u7406\u5668\u4ee5\u63d0\u9ad8\u901f\u5ea6\u7684\u80fd\u529b\u3002\u6240\u4ee5\u5e76\u53d1\u7a0b\u5e8f\u53ef\u4ee5\u662f\u5e76\u884c\u7684\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u662f\u3002 \u516c\u8ba4\u7684\uff0c\u4f7f\u7528\u591a\u7ebf\u7a0b\u7684\u5e94\u7528\u96be\u4ee5\u505a\u5230\u51c6\u786e\uff0c\u6700\u4e3b\u8981\u7684\u95ee\u9898\u662f\u5185\u5b58\u4e2d\u7684\u6570\u636e\u5171\u4eab\uff0c\u5b83\u4eec\u4f1a\u88ab\u591a\u7ebf\u7a0b\u4ee5\u65e0\u6cd5\u9884\u77e5\u7684\u65b9\u5f0f\u8fdb\u884c\u64cd\u4f5c\uff0c\u5bfc\u81f4\u4e00\u4e9b\u65e0\u6cd5\u91cd\u73b0\u6216\u8005\u968f\u673a\u7684\u7ed3\u679c\uff08\u79f0\u4f5c*\u7ade\u6001*\uff09\u3002 \u4e0d\u8981\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\u6216\u8005\u5171\u4eab\u5185\u5b58\uff0c\u5b83\u4eec\u4f1a\u7ed9\u4f60\u7684\u4ee3\u7801\u5728\u5e76\u53d1\u8fd0\u7b97\u7684\u65f6\u5019\u5e26\u6765\u5371\u9669\u3002 \u89e3\u51b3\u4e4b\u9053\u5728\u4e8e\u540c\u6b65\u4e0d\u540c\u7684\u7ebf\u7a0b\uff0c\u5bf9\u6570\u636e\u52a0\u9501\uff0c\u8fd9\u6837\u540c\u65f6\u5c31\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u53d8\u66f4\u6570\u636e\u3002\u5728 Go \u7684\u6807\u51c6\u5e93 sync \u4e2d\u6709\u4e00\u4e9b\u5de5\u5177\u7528\u6765\u5728\u4f4e\u7ea7\u522b\u7684\u4ee3\u7801\u4e2d\u5b9e\u73b0\u52a0\u9501\uff1b\u6211\u4eec\u5728\u7b2c 9.3 \u8282\u4e2d\u8ba8\u8bba\u8fc7\u8fd9\u4e2a\u95ee\u9898\u3002\u4e0d\u8fc7\u8fc7\u53bb\u7684\u8f6f\u4ef6\u5f00\u53d1\u7ecf\u9a8c\u544a\u8bc9\u6211\u4eec\u8fd9\u4f1a\u5e26\u6765\u66f4\u9ad8\u7684\u590d\u6742\u5ea6\uff0c\u66f4\u5bb9\u6613\u4f7f\u4ee3\u7801\u51fa\u9519\u4ee5\u53ca\u66f4\u4f4e\u7684\u6027\u80fd\uff0c\u6240\u4ee5\u8fd9\u4e2a\u7ecf\u5178\u7684\u65b9\u6cd5\u660e\u663e\u4e0d\u518d\u9002\u5408\u73b0\u4ee3\u591a\u6838/\u591a\u5904\u7406\u5668\u7f16\u7a0b\uff1a thread-per-connection \u6a21\u578b\u4e0d\u591f\u6709\u6548\u3002 Go \u66f4\u503e\u5411\u4e8e\u5176\u4ed6\u7684\u65b9\u5f0f\uff0c\u5728\u8bf8\u591a\u6bd4\u8f83\u5408\u9002\u7684\u8303\u5f0f\u4e2d\uff0c\u6709\u4e2a\u88ab\u79f0\u4f5c Communicating Sequential Processes\uff08\u987a\u5e8f\u901a\u4fe1\u5904\u7406\uff09 \uff08CSP, C. Hoare \u53d1\u660e\u7684\uff09\u8fd8\u6709\u4e00\u4e2a\u53eb\u505a message passing-model\uff08\u6d88\u606f\u4f20\u9012\uff09 \uff08\u5df2\u7ecf\u8fd0\u7528\u5728\u4e86\u5176\u4ed6\u8bed\u8a00\u4e2d\uff0c\u6bd4\u5982 Erlang\uff09\u3002 \u5728 Go \u4e2d\uff0c\u5e94\u7528\u7a0b\u5e8f\u5e76\u53d1\u5904\u7406\u7684\u90e8\u5206\u88ab\u79f0\u4f5c goroutines\uff08\u534f\u7a0b\uff09 \uff0c\u5b83\u53ef\u4ee5\u8fdb\u884c\u66f4\u6709\u6548\u7684\u5e76\u53d1\u8fd0\u7b97\u3002\u5728\u534f\u7a0b\u548c\u64cd\u4f5c\u7cfb\u7edf\u7ebf\u7a0b\u4e4b\u95f4\u5e76\u65e0\u4e00\u5bf9\u4e00\u7684\u5173\u7cfb\uff1a\u534f\u7a0b\u662f\u6839\u636e\u4e00\u4e2a\u6216\u591a\u4e2a\u7ebf\u7a0b\u7684\u53ef\u7528\u6027\uff0c\u6620\u5c04\uff08\u591a\u8def\u590d\u7528\uff0c\u6267\u884c\u4e8e\uff09\u5728\u4ed6\u4eec\u4e4b\u4e0a\u7684\uff1b\u534f\u7a0b\u8c03\u5ea6\u5668\u5728 Go \u8fd0\u884c\u65f6\u5f88\u597d\u7684\u5b8c\u6210\u4e86\u8fd9\u4e2a\u5de5\u4f5c\u3002 \u534f\u7a0b\u5de5\u4f5c\u5728\u76f8\u540c\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\uff0c\u6240\u4ee5\u5171\u4eab\u5185\u5b58\u7684\u65b9\u5f0f\u4e00\u5b9a\u662f\u540c\u6b65\u7684\uff1b\u8fd9\u4e2a\u53ef\u4ee5\u4f7f\u7528 sync \u5305\u6765\u5b9e\u73b0\uff08\u53c2\u89c1\u7b2c 9.3 \u8282\uff09\uff0c\u4e0d\u8fc7\u6211\u4eec\u5f88\u4e0d\u9f13\u52b1\u8fd9\u6837\u505a\uff1aGo \u4f7f\u7528 channels \u6765\u540c\u6b65\u534f\u7a0b\uff08\u53ef\u4ee5\u53c2\u89c1\u7b2c 14.2 \u8282\u7b49\u7ae0\u8282\uff09 \u5f53\u7cfb\u7edf\u8c03\u7528\uff08\u6bd4\u5982\u7b49\u5f85 I/O\uff09\u963b\u585e\u534f\u7a0b\u65f6\uff0c\u5176\u4ed6\u534f\u7a0b\u4f1a\u7ee7\u7eed\u5728\u5176\u4ed6\u7ebf\u7a0b\u4e0a\u5de5\u4f5c\u3002\u534f\u7a0b\u7684\u8bbe\u8ba1\u9690\u85cf\u4e86\u8bb8\u591a\u7ebf\u7a0b\u521b\u5efa\u548c\u7ba1\u7406\u65b9\u9762\u7684\u590d\u6742\u5de5\u4f5c\u3002 \u534f\u7a0b\u662f\u8f7b\u91cf\u7684\uff0c\u6bd4\u7ebf\u7a0b\u66f4\u8f7b\u3002\u5b83\u4eec\u75d5\u8ff9\u975e\u5e38\u4e0d\u660e\u663e\uff08\u4f7f\u7528\u5c11\u91cf\u7684\u5185\u5b58\u548c\u8d44\u6e90\uff09\uff1a\u4f7f\u7528 4K \u7684\u6808\u5185\u5b58\u5c31\u53ef\u4ee5\u5728\u5806\u4e2d\u521b\u5efa\u5b83\u4eec\u3002\u56e0\u4e3a\u521b\u5efa\u975e\u5e38\u5ec9\u4ef7\uff0c\u5fc5\u8981\u7684\u65f6\u5019\u53ef\u4ee5\u8f7b\u677e\u521b\u5efa\u5e76\u8fd0\u884c\u5927\u91cf\u7684\u534f\u7a0b\uff08\u5728\u540c\u4e00\u4e2a\u5730\u5740\u7a7a\u95f4\u4e2d 100,000 \u4e2a\u8fde\u7eed\u7684\u534f\u7a0b\uff09\u3002\u5e76\u4e14\u5b83\u4eec\u5bf9\u6808\u8fdb\u884c\u4e86\u5206\u5272\uff0c\u4ece\u800c\u52a8\u6001\u7684\u589e\u52a0\uff08\u6216\u7f29\u51cf\uff09\u5185\u5b58\u7684\u4f7f\u7528\uff1b\u6808\u7684\u7ba1\u7406\u662f\u81ea\u52a8\u7684\uff0c\u4f46\u4e0d\u662f\u7531\u5783\u573e\u56de\u6536\u5668\u7ba1\u7406\u7684\uff0c\u800c\u662f\u5728\u534f\u7a0b\u9000\u51fa\u540e\u81ea\u52a8\u91ca\u653e\u3002 \u534f\u7a0b\u53ef\u4ee5\u8fd0\u884c\u5728\u591a\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u7ebf\u7a0b\u4e4b\u95f4\uff0c\u4e5f\u53ef\u4ee5\u8fd0\u884c\u5728\u7ebf\u7a0b\u4e4b\u5185\uff0c\u8ba9\u4f60\u53ef\u4ee5\u5f88\u5c0f\u7684\u5185\u5b58\u5360\u7528\u5c31\u53ef\u4ee5\u5904\u7406\u5927\u91cf\u7684\u4efb\u52a1\u3002\u7531\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u7ebf\u7a0b\u4e0a\u7684\u534f\u7a0b\u65f6\u95f4\u7247\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5c11\u91cf\u7684\u64cd\u4f5c\u7cfb\u7edf\u7ebf\u7a0b\u5c31\u80fd\u62e5\u6709\u4efb\u610f\u591a\u4e2a\u63d0\u4f9b\u670d\u52a1\u7684\u534f\u7a0b\uff0c\u800c\u4e14 Go \u8fd0\u884c\u65f6\u53ef\u4ee5\u806a\u660e\u7684\u610f\u8bc6\u5230\u54ea\u4e9b\u534f\u7a0b\u88ab\u963b\u585e\u4e86\uff0c\u6682\u65f6\u6401\u7f6e\u5b83\u4eec\u5e76\u5904\u7406\u5176\u4ed6\u534f\u7a0b\u3002 \u5b58\u5728\u4e24\u79cd\u5e76\u53d1\u65b9\u5f0f\uff1a\u786e\u5b9a\u6027\u7684\uff08\u660e\u786e\u5b9a\u4e49\u6392\u5e8f\uff09\u548c\u975e\u786e\u5b9a\u6027\u7684\uff08\u52a0\u9501/\u4e92\u65a5\u4ece\u800c\u672a\u5b9a\u4e49\u6392\u5e8f\uff09\u3002Go \u7684\u534f\u7a0b\u548c\u901a\u9053\u7406\u6240\u5f53\u7136\u7684\u652f\u6301\u786e\u5b9a\u6027\u7684\u5e76\u53d1\u65b9\u5f0f\uff08\u4f8b\u5982\u901a\u9053\u5177\u6709\u4e00\u4e2a sender \u548c\u4e00\u4e2a receiver\uff09\u3002\u6211\u4eec\u4f1a\u5728\u7b2c 14.7 \u8282\u4e2d\u4f7f\u7528\u4e00\u4e2a\u5e38\u89c1\u7684\u7b97\u6cd5\u95ee\u9898\uff08\u5de5\u4eba\u95ee\u9898\uff09\u6765\u5bf9\u6bd4\u4e24\u79cd\u5904\u7406\u65b9\u5f0f\u3002 \u534f\u7a0b\u662f\u901a\u8fc7\u4f7f\u7528\u5173\u952e\u5b57 go \u8c03\u7528\uff08\u6267\u884c\uff09\u4e00\u4e2a\u51fd\u6570\u6216\u8005\u65b9\u6cd5\u6765\u5b9e\u73b0\u7684\uff08\u4e5f\u53ef\u4ee5\u662f\u533f\u540d\u6216\u8005 lambda \u51fd\u6570\uff09\u3002\u8fd9\u6837\u4f1a\u5728\u5f53\u524d\u7684\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u5f00\u59cb\u4e00\u4e2a\u540c\u65f6\u8fdb\u884c\u7684\u51fd\u6570\uff0c\u5728\u76f8\u540c\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\u5e76\u4e14\u5206\u914d\u4e86\u72ec\u7acb\u7684\u6808\uff0c\u6bd4\u5982\uff1a go sum(bigArray) \uff0c\u5728\u540e\u53f0\u8ba1\u7b97\u603b\u548c\u3002 \u534f\u7a0b\u7684\u6808\u4f1a\u6839\u636e\u9700\u8981\u8fdb\u884c\u4f38\u7f29\uff0c\u4e0d\u51fa\u73b0\u6808\u6ea2\u51fa\uff1b\u5f00\u53d1\u8005\u4e0d\u9700\u8981\u5173\u5fc3\u6808\u7684\u5927\u5c0f\u3002\u5f53\u534f\u7a0b\u7ed3\u675f\u7684\u65f6\u5019\uff0c\u5b83\u4f1a\u9759\u9ed8\u9000\u51fa\uff1a\u7528\u6765\u542f\u52a8\u8fd9\u4e2a\u534f\u7a0b\u7684\u51fd\u6570\u4e0d\u4f1a\u5f97\u5230\u4efb\u4f55\u7684\u8fd4\u56de\u503c\u3002 \u4efb\u4f55 Go \u7a0b\u5e8f\u90fd\u5fc5\u987b\u6709\u7684 main() \u51fd\u6570\u4e5f\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u4e2a\u534f\u7a0b\uff0c\u5c3d\u7ba1\u5b83\u5e76\u6ca1\u6709\u901a\u8fc7 go \u6765\u542f\u52a8\u3002\u534f\u7a0b\u53ef\u4ee5\u5728\u7a0b\u5e8f\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\u4e2d\u8fd0\u884c\uff08\u5728 init() \u51fd\u6570\u4e2d\uff09\u3002 \u5728\u4e00\u4e2a\u534f\u7a0b\u4e2d\uff0c\u6bd4\u5982\u5b83\u9700\u8981\u8fdb\u884c\u975e\u5e38\u5bc6\u96c6\u7684\u8fd0\u7b97\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd0\u7b97\u5faa\u73af\u4e2d\u5468\u671f\u7684\u4f7f\u7528 runtime.Gosched() \uff1a\u8fd9\u4f1a\u8ba9\u51fa\u5904\u7406\u5668\uff0c\u5141\u8bb8\u8fd0\u884c\u5176\u4ed6\u534f\u7a0b\uff1b\u5b83\u5e76\u4e0d\u4f1a\u4f7f\u5f53\u524d\u534f\u7a0b\u6302\u8d77\uff0c\u6240\u4ee5\u5b83\u4f1a\u81ea\u52a8\u6062\u590d\u6267\u884c\u3002\u4f7f\u7528 Gosched() \u53ef\u4ee5\u4f7f\u8ba1\u7b97\u5747\u5300\u5206\u5e03\uff0c\u4f7f\u901a\u4fe1\u4e0d\u81f3\u4e8e\u8fdf\u8fdf\u5f97\u4e0d\u5230\u54cd\u5e94\u3002","title":"14.1.1 \u4ec0\u4e48\u662f\u534f\u7a0b"},{"location":"14.1/#1412","text":"Go \u7684\u5e76\u53d1\u539f\u8bed\u63d0\u4f9b\u4e86\u826f\u597d\u7684\u5e76\u53d1\u8bbe\u8ba1\u57fa\u7840\uff1a\u8868\u8fbe\u7a0b\u5e8f\u7ed3\u6784\u4ee5\u4fbf\u8868\u793a\u72ec\u7acb\u5730\u6267\u884c\u7684\u52a8\u4f5c\uff1b\u6240\u4ee5 Go \u7684\u91cd\u70b9\u4e0d\u5728\u4e8e\u5e76\u884c\u7684\u9996\u8981\u4f4d\u7f6e\uff1a\u5e76\u53d1\u7a0b\u5e8f\u53ef\u80fd\u662f\u5e76\u884c\u7684\uff0c\u4e5f\u53ef\u80fd\u4e0d\u662f\u3002\u5e76\u884c\u662f\u4e00\u79cd\u901a\u8fc7\u4f7f\u7528\u591a\u5904\u7406\u5668\u4ee5\u63d0\u9ad8\u901f\u5ea6\u7684\u80fd\u529b\u3002\u4f46\u5f80\u5f80\u662f\uff0c\u4e00\u4e2a\u8bbe\u8ba1\u826f\u597d\u7684\u5e76\u53d1\u7a0b\u5e8f\u5728\u5e76\u884c\u65b9\u9762\u7684\u8868\u73b0\u4e5f\u975e\u5e38\u51fa\u8272\u3002 \u5728\u5f53\u524d\u7684\u8fd0\u884c\u65f6\uff082012 \u5e74\u4e00\u6708\uff09\u5b9e\u73b0\u4e2d\uff0cGo \u9ed8\u8ba4\u6ca1\u6709\u5e76\u884c\u6307\u4ee4\uff0c\u53ea\u6709\u4e00\u4e2a\u72ec\u7acb\u7684\u6838\u5fc3\u6216\u5904\u7406\u5668\u88ab\u4e13\u95e8\u7528\u4e8e Go \u7a0b\u5e8f\uff0c\u4e0d\u8bba\u5b83\u542f\u52a8\u4e86\u591a\u5c11\u4e2a\u534f\u7a0b\uff1b\u6240\u4ee5\u8fd9\u4e9b\u534f\u7a0b\u662f\u5e76\u53d1\u8fd0\u884c\u7684\uff0c\u4f46\u4ed6\u4eec\u4e0d\u662f\u5e76\u884c\u8fd0\u884c\u7684\uff1a\u540c\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a\u534f\u7a0b\u4f1a\u5904\u5728\u8fd0\u884c\u72b6\u6001\u3002 \u8fd9\u4e2a\u60c5\u51b5\u5728\u4ee5\u540e\u53ef\u80fd\u4f1a\u53d1\u751f\u6539\u53d8\uff0c\u4e0d\u8fc7\u5c4a\u65f6\uff0c\u4e3a\u4e86\u4f7f\u4f60\u7684\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u6838\u5fc3\u8fd0\u884c\uff0c\u8fd9\u65f6\u534f\u7a0b\u5c31\u771f\u6b63\u7684\u662f\u5e76\u884c\u8fd0\u884c\u4e86\uff0c\u4f60\u5fc5\u987b\u4f7f\u7528 GOMAXPROCS \u53d8\u91cf\u3002 \u8fd9\u4f1a\u544a\u8bc9\u8fd0\u884c\u65f6\u6709\u591a\u5c11\u4e2a\u534f\u7a0b\u540c\u65f6\u6267\u884c\u3002 \u5e76\u4e14\u53ea\u6709 gc \u7f16\u8bd1\u5668\u771f\u6b63\u5b9e\u73b0\u4e86\u534f\u7a0b\uff0c\u9002\u5f53\u7684\u628a\u534f\u7a0b\u6620\u5c04\u5230\u64cd\u4f5c\u7cfb\u7edf\u7ebf\u7a0b\u3002\u4f7f\u7528 gccgo \u7f16\u8bd1\u5668\uff0c\u4f1a\u4e3a\u6bcf\u4e00\u4e2a\u534f\u7a0b\u521b\u5efa\u64cd\u4f5c\u7cfb\u7edf\u7ebf\u7a0b\u3002","title":"14.1.2 \u5e76\u53d1\u548c\u5e76\u884c\u7684\u5dee\u5f02"},{"location":"14.1/#1413-gomaxprocs","text":"\u5728 gc \u7f16\u8bd1\u5668\u4e0b\uff086g \u6216\u8005 8g\uff09\u4f60\u5fc5\u987b\u8bbe\u7f6e GOMAXPROCS \u4e3a\u4e00\u4e2a\u5927\u4e8e\u9ed8\u8ba4\u503c 1 \u7684\u6570\u503c\u6765\u5141\u8bb8\u8fd0\u884c\u65f6\u652f\u6301\u4f7f\u7528\u591a\u4e8e 1 \u4e2a\u7684\u64cd\u4f5c\u7cfb\u7edf\u7ebf\u7a0b\uff0c\u6240\u6709\u7684\u534f\u7a0b\u90fd\u4f1a\u5171\u4eab\u540c\u4e00\u4e2a\u7ebf\u7a0b\u9664\u975e\u5c06 GOMAXPROCS \u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u5927\u4e8e 1 \u7684\u6570\u3002\u5f53 GOMAXPROCS \u5927\u4e8e 1 \u65f6\uff0c\u4f1a\u6709\u4e00\u4e2a\u7ebf\u7a0b\u6c60\u7ba1\u7406\u8bb8\u591a\u7684\u7ebf\u7a0b\u3002\u901a\u8fc7 gccgo \u7f16\u8bd1\u5668 GOMAXPROCS \u6709\u6548\u7684\u4e0e\u8fd0\u884c\u4e2d\u7684\u534f\u7a0b\u6570\u91cf\u76f8\u7b49\u3002\u5047\u8bbe n \u662f\u673a\u5668\u4e0a\u5904\u7406\u5668\u6216\u8005\u6838\u5fc3\u7684\u6570\u91cf\u3002\u5982\u679c\u4f60\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf GOMAXPROCS>=n \uff0c\u6216\u8005\u6267\u884c runtime.GOMAXPROCS(n) \uff0c\u63a5\u4e0b\u6765\u534f\u7a0b\u4f1a\u88ab\u5206\u5272\uff08\u5206\u6563\uff09\u5230 n \u4e2a\u5904\u7406\u5668\u4e0a\u3002\u66f4\u591a\u7684\u5904\u7406\u5668\u5e76\u4e0d\u610f\u5473\u7740\u6027\u80fd\u7684\u7ebf\u6027\u63d0\u5347\u3002\u6709\u8fd9\u6837\u4e00\u4e2a\u7ecf\u9a8c\u6cd5\u5219\uff0c\u5bf9\u4e8e n \u4e2a\u6838\u5fc3\u7684\u60c5\u51b5\u8bbe\u7f6e GOMAXPROCS \u4e3a n-1 \u4ee5\u83b7\u5f97\u6700\u4f73\u6027\u80fd\uff0c\u4e5f\u540c\u6837\u9700\u8981\u9075\u5b88\u8fd9\u6761\u89c4\u5219\uff1a\u534f\u7a0b\u7684\u6570\u91cf > 1 + GOMAXPROCS > 1\u3002 \u6240\u4ee5\u5982\u679c\u5728\u67d0\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a\u534f\u7a0b\u5728\u6267\u884c\uff0c\u4e0d\u8981\u8bbe\u7f6e GOMAXPROCS \uff01 \u8fd8\u6709\u4e00\u4e9b\u901a\u8fc7\u5b9e\u9a8c\u89c2\u5bdf\u5230\u7684\u73b0\u8c61\uff1a\u5728\u4e00\u53f0 1 \u9897 CPU \u7684\u7b14\u8bb0\u672c\u7535\u8111\u4e0a\uff0c\u589e\u52a0 GOMAXPROCS \u5230 9 \u4f1a\u5e26\u6765\u6027\u80fd\u63d0\u5347\u3002\u5728\u4e00\u53f0 32 \u6838\u7684\u673a\u5668\u4e0a\uff0c\u8bbe\u7f6e GOMAXPROCS=8 \u4f1a\u8fbe\u5230\u6700\u597d\u7684\u6027\u80fd\uff0c\u5728\u6d4b\u8bd5\u73af\u5883\u4e2d\uff0c\u66f4\u9ad8\u7684\u6570\u503c\u65e0\u6cd5\u63d0\u5347\u6027\u80fd\u3002\u5982\u679c\u8bbe\u7f6e\u4e00\u4e2a\u5f88\u5927\u7684 GOMAXPROCS \u53ea\u4f1a\u5e26\u6765\u8f7b\u5fae\u7684\u6027\u80fd\u4e0b\u964d\uff1b\u8bbe\u7f6e GOMAXPROCS=100 \uff0c\u4f7f\u7528 top \u547d\u4ee4\u548c H \u9009\u9879\u67e5\u770b\u5230\u53ea\u6709 7 \u4e2a\u6d3b\u52a8\u7684\u7ebf\u7a0b\u3002 \u589e\u52a0 GOMAXPROCS \u7684\u6570\u503c\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u5e76\u53d1\u8ba1\u7b97\u662f\u6709\u597d\u5904\u7684\uff1b \u8bf7\u770b goroutine_select2.go \u603b\u7ed3\uff1a GOMAXPROCS \u7b49\u540c\u4e8e\uff08\u5e76\u53d1\u7684\uff09\u7ebf\u7a0b\u6570\u91cf\uff0c\u5728\u4e00\u53f0\u6838\u5fc3\u6570\u591a\u4e8e 1 \u4e2a\u7684\u673a\u5668\u4e0a\uff0c\u4f1a\u5c3d\u53ef\u80fd\u6709\u7b49\u540c\u4e8e\u6838\u5fc3\u6570\u7684\u7ebf\u7a0b\u5728\u5e76\u884c\u8fd0\u884c\u3002","title":"14.1.3 \u4f7f\u7528 GOMAXPROCS"},{"location":"14.1/#1414","text":"\u4f7f\u7528 flags \u5305\uff0c\u5982\u4e0b\uff1a var numCores = flag . Int ( \"n\" , 2 , \"number of CPU cores to use\" ) \u5728 main() \u4e2d\uff1a flag . Parse () runtime . GOMAXPROCS ( * numCores ) \u534f\u7a0b\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 runtime.Goexit() \u6765\u505c\u6b62\uff0c\u5c3d\u7ba1\u8fd9\u6837\u505a\u51e0\u4e4e\u6ca1\u6709\u5fc5\u8981\u3002 \u793a\u4f8b 14.1- goroutine1.go \u4ecb\u7ecd\u4e86\u6982\u5ff5\uff1a package main import ( \"fmt\" \"time\" ) func main () { fmt . Println ( \"In main()\" ) go longWait () go shortWait () fmt . Println ( \"About to sleep in main()\" ) // sleep works with a Duration in nanoseconds (ns) ! time . Sleep ( 10 * 1e9 ) fmt . Println ( \"At the end of main()\" ) } func longWait () { fmt . Println ( \"Beginning longWait()\" ) time . Sleep ( 5 * 1e9 ) // sleep for 5 seconds fmt . Println ( \"End of longWait()\" ) } func shortWait () { fmt . Println ( \"Beginning shortWait()\" ) time . Sleep ( 2 * 1e9 ) // sleep for 2 seconds fmt . Println ( \"End of shortWait()\" ) } \u8f93\u51fa\uff1a In main() About to sleep in main() Beginning longWait() Beginning shortWait() End of shortWait() End of longWait() At the end of main() // after 10s main() \uff0c longWait() \u548c shortWait() \u4e09\u4e2a\u51fd\u6570\u4f5c\u4e3a\u72ec\u7acb\u7684\u5904\u7406\u5355\u5143\u6309\u987a\u5e8f\u542f\u52a8\uff0c\u7136\u540e\u5f00\u59cb\u5e76\u884c\u8fd0\u884c\u3002\u6bcf\u4e00\u4e2a\u51fd\u6570\u90fd\u5728\u8fd0\u884c\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u9636\u6bb5\u8f93\u51fa\u4e86\u6d88\u606f\u3002\u4e3a\u4e86\u6a21\u62df\u4ed6\u4eec\u8fd0\u7b97\u7684\u65f6\u95f4\u6d88\u8017\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 time \u5305\u4e2d\u7684 Sleep \u51fd\u6570\u3002 Sleep() \u53ef\u4ee5\u6309\u7167\u6307\u5b9a\u7684\u65f6\u95f4\u6765\u6682\u505c\u51fd\u6570\u6216\u534f\u7a0b\u7684\u6267\u884c\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86\u7eb3\u79d2\uff08 ns \uff0c\u7b26\u53f7 1e9 \u8868\u793a 1 \u4e58 10 \u7684 9 \u6b21\u65b9\uff0c e =\u6307\u6570\uff09\u3002 \u4ed6\u4eec\u6309\u7167\u6211\u4eec\u671f\u671b\u7684\u987a\u5e8f\u6253\u5370\u51fa\u4e86\u6d88\u606f\uff0c\u51e0\u4e4e\u90fd\u4e00\u6837\uff0c\u53ef\u662f\u6211\u4eec\u660e\u767d\u8fd9\u662f\u6a21\u62df\u51fa\u6765\u7684\uff0c\u4ee5\u5e76\u884c\u7684\u65b9\u5f0f\u3002\u6211\u4eec\u8ba9 main() \u51fd\u6570\u6682\u505c 10 \u79d2\u4ece\u800c\u786e\u5b9a\u5b83\u4f1a\u5728\u53e6\u5916\u4e24\u4e2a\u534f\u7a0b\u4e4b\u540e\u7ed3\u675f\u3002\u5982\u679c\u4e0d\u8fd9\u6837\uff08\u5982\u679c\u6211\u4eec\u8ba9 main() \u51fd\u6570\u505c\u6b62 4 \u79d2\uff09\uff0c main() \u4f1a\u63d0\u524d\u7ed3\u675f\uff0c longWait() \u5219\u65e0\u6cd5\u5b8c\u6210\u3002\u5982\u679c\u6211\u4eec\u4e0d\u5728 main() \u4e2d\u7b49\u5f85\uff0c\u534f\u7a0b\u4f1a\u968f\u7740\u7a0b\u5e8f\u7684\u7ed3\u675f\u800c\u6d88\u4ea1\u3002 \u5f53 main() \u51fd\u6570\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u7a0b\u5e8f\u9000\u51fa\uff1a\u5b83\u4e0d\u4f1a\u7b49\u5f85\u4efb\u4f55\u5176\u4ed6\u975e main \u534f\u7a0b\u7684\u7ed3\u675f\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5728\u670d\u52a1\u5668\u7a0b\u5e8f\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u8bf7\u6c42\u90fd\u4f1a\u542f\u52a8\u4e00\u4e2a\u534f\u7a0b\u6765\u5904\u7406\uff0c server() \u51fd\u6570\u5fc5\u987b\u4fdd\u6301\u8fd0\u884c\u72b6\u6001\u3002\u901a\u5e38\u4f7f\u7528\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u6765\u8fbe\u5230\u8fd9\u6837\u7684\u76ee\u7684\u3002 \u53e6\u5916\uff0c\u534f\u7a0b\u662f\u72ec\u7acb\u7684\u5904\u7406\u5355\u5143\uff0c\u4e00\u65e6\u9646\u7eed\u542f\u52a8\u4e00\u4e9b\u534f\u7a0b\uff0c\u4f60\u65e0\u6cd5\u786e\u5b9a\u4ed6\u4eec\u662f\u4ec0\u4e48\u65f6\u5019\u771f\u6b63\u5f00\u59cb\u6267\u884c\u7684\u3002\u4f60\u7684\u4ee3\u7801\u903b\u8f91\u5fc5\u987b\u72ec\u7acb\u4e8e\u534f\u7a0b\u8c03\u7528\u7684\u987a\u5e8f\u3002 \u4e3a\u4e86\u5bf9\u6bd4\u4f7f\u7528\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u8fde\u7eed\u8c03\u7528\u7684\u60c5\u51b5\uff0c\u79fb\u9664 go \u5173\u952e\u5b57\uff0c\u91cd\u65b0\u8fd0\u884c\u7a0b\u5e8f\u3002 \u73b0\u5728\u8f93\u51fa\uff1a In main() Beginning longWait() End of longWait() Beginning shortWait() End of shortWait() About to sleep in main() At the end of main() // after 17 s \u534f\u7a0b\u66f4\u6709\u7528\u7684\u4e00\u4e2a\u4f8b\u5b50\u5e94\u8be5\u662f\u5728\u4e00\u4e2a\u975e\u5e38\u957f\u7684\u6570\u7ec4\u4e2d\u67e5\u627e\u4e00\u4e2a\u5143\u7d20\u3002 \u5c06\u6570\u7ec4\u5206\u5272\u4e3a\u82e5\u5e72\u4e2a\u4e0d\u91cd\u590d\u7684\u5207\u7247\uff0c\u7136\u540e\u7ed9\u6bcf\u4e00\u4e2a\u5207\u7247\u542f\u52a8\u4e00\u4e2a\u534f\u7a0b\u8fdb\u884c\u67e5\u627e\u8ba1\u7b97\u3002\u8fd9\u6837\u8bb8\u591a\u5e76\u884c\u7684\u534f\u7a0b\u53ef\u4ee5\u7528\u6765\u8fdb\u884c\u67e5\u627e\u4efb\u52a1\uff0c\u6574\u4f53\u7684\u67e5\u627e\u65f6\u95f4\u4f1a\u7f29\u77ed\uff08\u9664\u4ee5\u534f\u7a0b\u7684\u6570\u91cf\uff09\u3002","title":"14.1.4 \u5982\u4f55\u7528\u547d\u4ee4\u884c\u6307\u5b9a\u4f7f\u7528\u7684\u6838\u5fc3\u6570\u91cf"},{"location":"14.1/#1415-go-goroutines-coroutines","text":"\uff08\u8bd1\u8005\u6ce8\uff1a\u6807\u9898\u4e2d\u7684\u201cGo\u534f\u7a0b (goroutines)\u201d\u5373\u662f 14 \u7ae0\u8bb2\u7684\u534f\u7a0b\uff0c\u6307\u7684\u662f Go \u8bed\u8a00\u4e2d\u7684\u534f\u7a0b\u3002\u800c\u201c\u534f\u7a0b(coroutines)\u201d\u6307\u7684\u662f\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u534f\u7a0b\u6982\u5ff5\uff0c\u4ec5\u5728\u672c\u8282\u51fa\u73b0\u3002\uff09 \u5728\u5176\u4ed6\u8bed\u8a00\u4e2d\uff0c\u6bd4\u5982 C#\uff0cLua \u6216\u8005 Python \u90fd\u6709\u534f\u7a0b\u7684\u6982\u5ff5\u3002\u8fd9\u4e2a\u540d\u5b57\u8868\u660e\u5b83\u548c Go \u534f\u7a0b\u6709\u4e9b\u76f8\u4f3c\uff0c\u4e0d\u8fc7\u6709\u4e24\u70b9\u4e0d\u540c\uff1a Go \u534f\u7a0b\u610f\u5473\u7740\u5e76\u884c\uff08\u6216\u8005\u53ef\u4ee5\u4ee5\u5e76\u884c\u7684\u65b9\u5f0f\u90e8\u7f72\uff09\uff0c\u534f\u7a0b\u4e00\u822c\u6765\u8bf4\u4e0d\u662f\u8fd9\u6837\u7684 Go \u534f\u7a0b\u901a\u8fc7\u901a\u9053\u6765\u901a\u4fe1\uff1b\u534f\u7a0b\u901a\u8fc7\u8ba9\u51fa\u548c\u6062\u590d\u64cd\u4f5c\u6765\u901a\u4fe1 Go \u534f\u7a0b\u6bd4\u534f\u7a0b\u66f4\u5f3a\u5927\uff0c\u4e5f\u5f88\u5bb9\u6613\u4ece\u534f\u7a0b\u7684\u903b\u8f91\u590d\u7528\u5230 Go \u534f\u7a0b\u3002","title":"14.1.5 Go \u534f\u7a0b (goroutines) \u548c\u534f\u7a0b (coroutines)"},{"location":"14.1/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u534f\u7a0b (goroutine) \u4e0e\u901a\u9053 (channel) \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528\u901a\u9053\u8fdb\u884c\u534f\u7a0b\u95f4\u901a\u4fe1","title":"\u94fe\u63a5"},{"location":"14.10/","text":"14.10 \u590d\u7528 \u00b6 14.10.1 \u5178\u578b\u7684\u5ba2\u6237\u7aef/\u670d\u52a1\u5668\uff08C/S\uff09\u6a21\u5f0f \u00b6 \u5ba2\u6237\u7aef-\u670d\u52a1\u5668\u5e94\u7528\u6b63\u662f goroutines \u548c channels \u7684\u4eae\u70b9\u6240\u5728\u3002 \u5ba2\u6237\u7aef (Client) \u53ef\u4ee5\u662f\u8fd0\u884c\u5728\u4efb\u610f\u8bbe\u5907\u4e0a\u7684\u4efb\u610f\u7a0b\u5e8f\uff0c\u5b83\u4f1a\u6309\u9700\u53d1\u9001\u8bf7\u6c42 (request) \u81f3\u670d\u52a1\u5668\u3002\u670d\u52a1\u5668 (Server) \u63a5\u6536\u5230\u8fd9\u4e2a\u8bf7\u6c42\u540e\u5f00\u59cb\u76f8\u5e94\u7684\u5de5\u4f5c\uff0c\u7136\u540e\u518d\u5c06\u54cd\u5e94 (response) \u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002\u5178\u578b\u60c5\u51b5\u4e0b\u4e00\u822c\u662f\u591a\u4e2a\u5ba2\u6237\u7aef\uff08\u5373\u591a\u4e2a\u8bf7\u6c42\uff09\u5bf9\u5e94\u4e00\u4e2a\uff08\u6216\u5c11\u91cf\uff09\u670d\u52a1\u5668\u3002\u4f8b\u5982\u6211\u4eec\u65e5\u5e38\u4f7f\u7528\u7684\u6d4f\u89c8\u5668\u5ba2\u6237\u7aef\uff0c\u5176\u529f\u80fd\u5c31\u662f\u5411\u670d\u52a1\u5668\u8bf7\u6c42\u7f51\u9875\u3002\u800c Web \u670d\u52a1\u5668\u5219\u4f1a\u5411\u6d4f\u89c8\u5668\u54cd\u5e94\u7f51\u9875\u6570\u636e\u3002 \u4f7f\u7528 Go \u7684\u670d\u52a1\u5668\u901a\u5e38\u4f1a\u5728\u534f\u7a0b\u4e2d\u6267\u884c\u5411\u5ba2\u6237\u7aef\u7684\u54cd\u5e94\uff0c\u6545\u800c\u4f1a\u5bf9\u6bcf\u4e00\u4e2a\u5ba2\u6237\u7aef\u8bf7\u6c42\u542f\u52a8\u4e00\u4e2a\u534f\u7a0b\u3002\u4e00\u4e2a\u5e38\u7528\u7684\u64cd\u4f5c\u65b9\u6cd5\u662f\u5ba2\u6237\u7aef\u8bf7\u6c42\u81ea\u8eab\u4e2d\u5305\u542b\u4e00\u4e2a\u901a\u9053\uff0c\u800c\u670d\u52a1\u5668\u5219\u5411\u8fd9\u4e2a\u901a\u9053\u53d1\u9001\u54cd\u5e94\u3002 \u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a Request \u7ed3\u6784\uff0c\u5176\u4e2d\u5185\u5d4c\u4e86\u4e00\u4e2a replyc \u901a\u9053\u3002 type Request struct { a , b int replyc chan int // reply channel inside the Request } \u6216\u8005\u66f4\u901a\u4fd7\u7684\uff1a type Reply struct { ... } type Request struct { arg1 , arg2 , arg3 some_type replyc chan * Reply } \u63a5\u4e0b\u6765\u5148\u4f7f\u7528\u7b80\u5355\u7684\u5f62\u5f0f,\u670d\u52a1\u5668\u4f1a\u4e3a\u6bcf\u4e00\u4e2a\u8bf7\u6c42\u542f\u52a8\u4e00\u4e2a\u534f\u7a0b\u5e76\u5728\u5176\u4e2d\u6267\u884c run() \u51fd\u6570\uff0c\u6b64\u4e3e\u4f1a\u5c06\u7c7b\u578b\u4e3a binOp \u7684 op \u64cd\u4f5c\u8fd4\u56de\u7684 int \u503c\u53d1\u9001\u5230 replyc \u901a\u9053\u3002 type binOp func ( a , b int ) int func run ( op binOp , req * Request ) { req . replyc <- op ( req . a , req . b ) } server() \u534f\u7a0b\u4f1a\u65e0\u9650\u5faa\u73af\u4ee5\u4ece chan *Request \u63a5\u6536\u8bf7\u6c42\uff0c\u5e76\u4e14\u4e3a\u4e86\u907f\u514d\u88ab\u957f\u65f6\u95f4\u64cd\u4f5c\u6240\u5835\u585e\uff0c\u5b83\u5c06\u4e3a\u6bcf\u4e00\u4e2a\u8bf7\u6c42\u542f\u52a8\u4e00\u4e2a\u534f\u7a0b\u6765\u505a\u5177\u4f53\u7684\u5de5\u4f5c\uff1a func server ( op binOp , service chan * Request ) { for { req := <- service ; // requests arrive here // start goroutine for request: go run ( op , req ); // don\u2019t wait for op to complete } } server() \u672c\u8eab\u5219\u662f\u4ee5\u534f\u7a0b\u7684\u65b9\u5f0f\u5728 startServer() \u51fd\u6570\u4e2d\u542f\u52a8\uff1a func startServer ( op binOp ) chan * Request { reqChan := make ( chan * Request ); go server ( op , reqChan ); return reqChan ; } startServer() \u5219\u4f1a\u5728 main \u534f\u7a0b\u4e2d\u88ab\u8c03\u7528\u3002 \u5728\u4ee5\u4e0b\u6d4b\u8bd5\u4f8b\u5b50\u4e2d\uff0c100 \u4e2a\u8bf7\u6c42\u4f1a\u88ab\u53d1\u9001\u5230\u670d\u52a1\u5668\uff0c\u53ea\u6709\u5b83\u4eec\u5168\u90e8\u88ab\u9001\u8fbe\u540e\u6211\u4eec\u624d\u4f1a\u6309\u76f8\u53cd\u7684\u987a\u5e8f\u68c0\u67e5\u54cd\u5e94\uff1a func main () { adder := startServer ( func ( a , b int ) int { return a + b }) const N = 100 var reqs [ N ] Request for i := 0 ; i < N ; i ++ { req := & reqs [ i ] req . a = i req . b = i + N req . replyc = make ( chan int ) adder <- req // adder is a channel of requests } // checks: for i := N - 1 ; i >= 0 ; i -- { // doesn\u2019t matter what order if <- reqs [ i ]. replyc != N + 2 * i { fmt . Println ( \u201c fail at \u201d , i ) } else { fmt . Println ( \u201c Request \u201c , i , \u201c is ok ! \u201d ) } } fmt . Println ( \u201c done \u201d ) } \u8fd9\u4e9b\u4ee3\u7801\u53ef\u4ee5\u5728 multiplex_server.go \u627e\u5230 \u8f93\u51fa\uff1a Request 99 is ok! Request 98 is ok! ... Request 1 is ok! Request 0 is ok! done \u8fd9\u4e2a\u7a0b\u5e8f\u4ec5\u542f\u52a8\u4e86 100 \u4e2a\u534f\u7a0b\u3002\u7136\u800c\u5373\u4f7f\u6267\u884c 100,000 \u4e2a\u534f\u7a0b\u6211\u4eec\u4e5f\u80fd\u5728\u6570\u79d2\u5185\u770b\u5230\u5b83\u5b8c\u6210\u3002\u8fd9\u8bf4\u660e\u4e86 Go \u7684\u534f\u7a0b\u662f\u5982\u4f55\u7684\u8f7b\u91cf\uff1a\u5982\u679c\u6211\u4eec\u542f\u52a8\u76f8\u540c\u6570\u91cf\u7684\u771f\u5b9e\u7684\u7ebf\u7a0b\uff0c\u7a0b\u5e8f\u65e9\u5c31\u5d29\u6e83\u4e86\u3002 \u793a\u4f8b\uff1a 14.14- multiplex_server.go package main import \"fmt\" type Request struct { a , b int replyc chan int // reply channel inside the Request } type binOp func ( a , b int ) int func run ( op binOp , req * Request ) { req . replyc <- op ( req . a , req . b ) } func server ( op binOp , service chan * Request ) { for { req := <- service // requests arrive here // start goroutine for request: go run ( op , req ) // don't wait for op } } func startServer ( op binOp ) chan * Request { reqChan := make ( chan * Request ) go server ( op , reqChan ) return reqChan } func main () { adder := startServer ( func ( a , b int ) int { return a + b }) const N = 100 var reqs [ N ] Request for i := 0 ; i < N ; i ++ { req := & reqs [ i ] req . a = i req . b = i + N req . replyc = make ( chan int ) adder <- req } // checks: for i := N - 1 ; i >= 0 ; i -- { // doesn't matter what order if <- reqs [ i ]. replyc != N + 2 * i { fmt . Println ( \"fail at\" , i ) } else { fmt . Println ( \"Request \" , i , \" is ok!\" ) } } fmt . Println ( \"done\" ) } 14.10.2 \u5378\u8f7d (Teardown)\uff1a\u901a\u8fc7\u4fe1\u53f7\u901a\u9053\u5173\u95ed\u670d\u52a1\u5668 \u00b6 \u5728\u4e0a\u4e00\u4e2a\u7248\u672c\u4e2d server() \u5728 main() \u51fd\u6570\u8fd4\u56de\u540e\u5e76\u6ca1\u6709\u5b8c\u5168\u5173\u95ed\uff0c\u800c\u88ab\u5f3a\u5236\u7ed3\u675f\u4e86\u3002\u4e3a\u4e86\u6539\u8fdb\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u9000\u51fa\u901a\u9053\u7ed9 server() \uff1a func startServer ( op binOp ) ( service chan * Request , quit chan bool ) { service = make ( chan * Request ) quit = make ( chan bool ) go server ( op , service , quit ) return service , quit } server() \u51fd\u6570\u73b0\u5728\u5219\u4f7f\u7528 select \u5728 service \u901a\u9053\u548c quit \u901a\u9053\u4e4b\u95f4\u505a\u51fa\u9009\u62e9\uff1a func server ( op binOp , service chan * request , quit chan bool ) { for { select { case req := <- service : go run ( op , req ) case <- quit : return } } } \u5f53 quit \u901a\u9053\u63a5\u6536\u5230\u4e00\u4e2a true \u503c\u65f6\uff0c server \u5c31\u4f1a\u8fd4\u56de\u5e76\u7ed3\u675f\u3002 \u5728 main() \u51fd\u6570\u4e2d\u6211\u4eec\u505a\u51fa\u5982\u4e0b\u66f4\u6539\uff1a adder , quit := startServer ( func ( a , b int ) int { return a + b }) \u5728 main() \u51fd\u6570\u7684\u7ed3\u5c3e\u5904\u6211\u4eec\u653e\u5165\u8fd9\u4e00\u884c\uff1a quit <- true \u5b8c\u6574\u7684\u4ee3\u7801\u5728 multiplex_server2.go \uff0c\u8f93\u51fa\u548c\u4e0a\u4e00\u4e2a\u7248\u672c\u662f\u4e00\u6837\u7684\u3002 \u793a\u4f8b\uff1a 14.15- multiplex_server2.go package main import \"fmt\" type Request struct { a , b int replyc chan int // reply channel inside the Request } type binOp func ( a , b int ) int func run ( op binOp , req * Request ) { req . replyc <- op ( req . a , req . b ) } func server ( op binOp , service chan * Request , quit chan bool ) { for { select { case req := <- service : go run ( op , req ) case <- quit : return } } } func startServer ( op binOp ) ( service chan * Request , quit chan bool ) { service = make ( chan * Request ) quit = make ( chan bool ) go server ( op , service , quit ) return service , quit } func main () { adder , quit := startServer ( func ( a , b int ) int { return a + b }) const N = 100 var reqs [ N ] Request for i := 0 ; i < N ; i ++ { req := & reqs [ i ] req . a = i req . b = i + N req . replyc = make ( chan int ) adder <- req } // checks: for i := N - 1 ; i >= 0 ; i -- { // doesn't matter what order if <- reqs [ i ]. replyc != N + 2 * i { fmt . Println ( \"fail at\" , i ) } else { fmt . Println ( \"Request \" , i , \" is ok!\" ) } } quit <- true fmt . Println ( \"done\" ) } \u7ec3\u4e60 14.13 multiplex_server3.go \uff1a\u4f7f\u7528\u4e4b\u524d\u7684\u4f8b\u5b50\uff0c\u7f16\u5199\u4e00\u4e2a\u5728 Request \u7ed3\u6784\u4e0a\u5e26\u6709 String() \u65b9\u6cd5\u7684\u7248\u672c\uff0c\u5b83\u80fd\u51b3\u5b9a\u670d\u52a1\u5668\u5982\u4f55\u8f93\u51fa\uff1b\u5e76\u4f7f\u7528\u4ee5\u4e0b\u4e24\u4e2a\u8bf7\u6c42\u6765\u6d4b\u8bd5\u8fd9\u4e2a\u7a0b\u5e8f\uff1a req1 := & Request { 3 , 4 , make ( chan int )} req2 := & Request { 150 , 250 , make ( chan int )} ... // show the output fmt . Println ( req1 , \"\\n\" , req2 ) \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5b9e\u73b0 Futures \u6a21\u5f0f \u4e0b\u4e00\u8282\uff1a \u9650\u5236\u540c\u65f6\u5904\u7406\u7684\u8bf7\u6c42\u6570","title":"14.10 \u590d\u7528"},{"location":"14.10/#1410","text":"","title":"14.10 \u590d\u7528"},{"location":"14.10/#14101-cs","text":"\u5ba2\u6237\u7aef-\u670d\u52a1\u5668\u5e94\u7528\u6b63\u662f goroutines \u548c channels \u7684\u4eae\u70b9\u6240\u5728\u3002 \u5ba2\u6237\u7aef (Client) \u53ef\u4ee5\u662f\u8fd0\u884c\u5728\u4efb\u610f\u8bbe\u5907\u4e0a\u7684\u4efb\u610f\u7a0b\u5e8f\uff0c\u5b83\u4f1a\u6309\u9700\u53d1\u9001\u8bf7\u6c42 (request) \u81f3\u670d\u52a1\u5668\u3002\u670d\u52a1\u5668 (Server) \u63a5\u6536\u5230\u8fd9\u4e2a\u8bf7\u6c42\u540e\u5f00\u59cb\u76f8\u5e94\u7684\u5de5\u4f5c\uff0c\u7136\u540e\u518d\u5c06\u54cd\u5e94 (response) \u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002\u5178\u578b\u60c5\u51b5\u4e0b\u4e00\u822c\u662f\u591a\u4e2a\u5ba2\u6237\u7aef\uff08\u5373\u591a\u4e2a\u8bf7\u6c42\uff09\u5bf9\u5e94\u4e00\u4e2a\uff08\u6216\u5c11\u91cf\uff09\u670d\u52a1\u5668\u3002\u4f8b\u5982\u6211\u4eec\u65e5\u5e38\u4f7f\u7528\u7684\u6d4f\u89c8\u5668\u5ba2\u6237\u7aef\uff0c\u5176\u529f\u80fd\u5c31\u662f\u5411\u670d\u52a1\u5668\u8bf7\u6c42\u7f51\u9875\u3002\u800c Web \u670d\u52a1\u5668\u5219\u4f1a\u5411\u6d4f\u89c8\u5668\u54cd\u5e94\u7f51\u9875\u6570\u636e\u3002 \u4f7f\u7528 Go \u7684\u670d\u52a1\u5668\u901a\u5e38\u4f1a\u5728\u534f\u7a0b\u4e2d\u6267\u884c\u5411\u5ba2\u6237\u7aef\u7684\u54cd\u5e94\uff0c\u6545\u800c\u4f1a\u5bf9\u6bcf\u4e00\u4e2a\u5ba2\u6237\u7aef\u8bf7\u6c42\u542f\u52a8\u4e00\u4e2a\u534f\u7a0b\u3002\u4e00\u4e2a\u5e38\u7528\u7684\u64cd\u4f5c\u65b9\u6cd5\u662f\u5ba2\u6237\u7aef\u8bf7\u6c42\u81ea\u8eab\u4e2d\u5305\u542b\u4e00\u4e2a\u901a\u9053\uff0c\u800c\u670d\u52a1\u5668\u5219\u5411\u8fd9\u4e2a\u901a\u9053\u53d1\u9001\u54cd\u5e94\u3002 \u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a Request \u7ed3\u6784\uff0c\u5176\u4e2d\u5185\u5d4c\u4e86\u4e00\u4e2a replyc \u901a\u9053\u3002 type Request struct { a , b int replyc chan int // reply channel inside the Request } \u6216\u8005\u66f4\u901a\u4fd7\u7684\uff1a type Reply struct { ... } type Request struct { arg1 , arg2 , arg3 some_type replyc chan * Reply } \u63a5\u4e0b\u6765\u5148\u4f7f\u7528\u7b80\u5355\u7684\u5f62\u5f0f,\u670d\u52a1\u5668\u4f1a\u4e3a\u6bcf\u4e00\u4e2a\u8bf7\u6c42\u542f\u52a8\u4e00\u4e2a\u534f\u7a0b\u5e76\u5728\u5176\u4e2d\u6267\u884c run() \u51fd\u6570\uff0c\u6b64\u4e3e\u4f1a\u5c06\u7c7b\u578b\u4e3a binOp \u7684 op \u64cd\u4f5c\u8fd4\u56de\u7684 int \u503c\u53d1\u9001\u5230 replyc \u901a\u9053\u3002 type binOp func ( a , b int ) int func run ( op binOp , req * Request ) { req . replyc <- op ( req . a , req . b ) } server() \u534f\u7a0b\u4f1a\u65e0\u9650\u5faa\u73af\u4ee5\u4ece chan *Request \u63a5\u6536\u8bf7\u6c42\uff0c\u5e76\u4e14\u4e3a\u4e86\u907f\u514d\u88ab\u957f\u65f6\u95f4\u64cd\u4f5c\u6240\u5835\u585e\uff0c\u5b83\u5c06\u4e3a\u6bcf\u4e00\u4e2a\u8bf7\u6c42\u542f\u52a8\u4e00\u4e2a\u534f\u7a0b\u6765\u505a\u5177\u4f53\u7684\u5de5\u4f5c\uff1a func server ( op binOp , service chan * Request ) { for { req := <- service ; // requests arrive here // start goroutine for request: go run ( op , req ); // don\u2019t wait for op to complete } } server() \u672c\u8eab\u5219\u662f\u4ee5\u534f\u7a0b\u7684\u65b9\u5f0f\u5728 startServer() \u51fd\u6570\u4e2d\u542f\u52a8\uff1a func startServer ( op binOp ) chan * Request { reqChan := make ( chan * Request ); go server ( op , reqChan ); return reqChan ; } startServer() \u5219\u4f1a\u5728 main \u534f\u7a0b\u4e2d\u88ab\u8c03\u7528\u3002 \u5728\u4ee5\u4e0b\u6d4b\u8bd5\u4f8b\u5b50\u4e2d\uff0c100 \u4e2a\u8bf7\u6c42\u4f1a\u88ab\u53d1\u9001\u5230\u670d\u52a1\u5668\uff0c\u53ea\u6709\u5b83\u4eec\u5168\u90e8\u88ab\u9001\u8fbe\u540e\u6211\u4eec\u624d\u4f1a\u6309\u76f8\u53cd\u7684\u987a\u5e8f\u68c0\u67e5\u54cd\u5e94\uff1a func main () { adder := startServer ( func ( a , b int ) int { return a + b }) const N = 100 var reqs [ N ] Request for i := 0 ; i < N ; i ++ { req := & reqs [ i ] req . a = i req . b = i + N req . replyc = make ( chan int ) adder <- req // adder is a channel of requests } // checks: for i := N - 1 ; i >= 0 ; i -- { // doesn\u2019t matter what order if <- reqs [ i ]. replyc != N + 2 * i { fmt . Println ( \u201c fail at \u201d , i ) } else { fmt . Println ( \u201c Request \u201c , i , \u201c is ok ! \u201d ) } } fmt . Println ( \u201c done \u201d ) } \u8fd9\u4e9b\u4ee3\u7801\u53ef\u4ee5\u5728 multiplex_server.go \u627e\u5230 \u8f93\u51fa\uff1a Request 99 is ok! Request 98 is ok! ... Request 1 is ok! Request 0 is ok! done \u8fd9\u4e2a\u7a0b\u5e8f\u4ec5\u542f\u52a8\u4e86 100 \u4e2a\u534f\u7a0b\u3002\u7136\u800c\u5373\u4f7f\u6267\u884c 100,000 \u4e2a\u534f\u7a0b\u6211\u4eec\u4e5f\u80fd\u5728\u6570\u79d2\u5185\u770b\u5230\u5b83\u5b8c\u6210\u3002\u8fd9\u8bf4\u660e\u4e86 Go \u7684\u534f\u7a0b\u662f\u5982\u4f55\u7684\u8f7b\u91cf\uff1a\u5982\u679c\u6211\u4eec\u542f\u52a8\u76f8\u540c\u6570\u91cf\u7684\u771f\u5b9e\u7684\u7ebf\u7a0b\uff0c\u7a0b\u5e8f\u65e9\u5c31\u5d29\u6e83\u4e86\u3002 \u793a\u4f8b\uff1a 14.14- multiplex_server.go package main import \"fmt\" type Request struct { a , b int replyc chan int // reply channel inside the Request } type binOp func ( a , b int ) int func run ( op binOp , req * Request ) { req . replyc <- op ( req . a , req . b ) } func server ( op binOp , service chan * Request ) { for { req := <- service // requests arrive here // start goroutine for request: go run ( op , req ) // don't wait for op } } func startServer ( op binOp ) chan * Request { reqChan := make ( chan * Request ) go server ( op , reqChan ) return reqChan } func main () { adder := startServer ( func ( a , b int ) int { return a + b }) const N = 100 var reqs [ N ] Request for i := 0 ; i < N ; i ++ { req := & reqs [ i ] req . a = i req . b = i + N req . replyc = make ( chan int ) adder <- req } // checks: for i := N - 1 ; i >= 0 ; i -- { // doesn't matter what order if <- reqs [ i ]. replyc != N + 2 * i { fmt . Println ( \"fail at\" , i ) } else { fmt . Println ( \"Request \" , i , \" is ok!\" ) } } fmt . Println ( \"done\" ) }","title":"14.10.1 \u5178\u578b\u7684\u5ba2\u6237\u7aef/\u670d\u52a1\u5668\uff08C/S\uff09\u6a21\u5f0f"},{"location":"14.10/#14102-teardown","text":"\u5728\u4e0a\u4e00\u4e2a\u7248\u672c\u4e2d server() \u5728 main() \u51fd\u6570\u8fd4\u56de\u540e\u5e76\u6ca1\u6709\u5b8c\u5168\u5173\u95ed\uff0c\u800c\u88ab\u5f3a\u5236\u7ed3\u675f\u4e86\u3002\u4e3a\u4e86\u6539\u8fdb\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u9000\u51fa\u901a\u9053\u7ed9 server() \uff1a func startServer ( op binOp ) ( service chan * Request , quit chan bool ) { service = make ( chan * Request ) quit = make ( chan bool ) go server ( op , service , quit ) return service , quit } server() \u51fd\u6570\u73b0\u5728\u5219\u4f7f\u7528 select \u5728 service \u901a\u9053\u548c quit \u901a\u9053\u4e4b\u95f4\u505a\u51fa\u9009\u62e9\uff1a func server ( op binOp , service chan * request , quit chan bool ) { for { select { case req := <- service : go run ( op , req ) case <- quit : return } } } \u5f53 quit \u901a\u9053\u63a5\u6536\u5230\u4e00\u4e2a true \u503c\u65f6\uff0c server \u5c31\u4f1a\u8fd4\u56de\u5e76\u7ed3\u675f\u3002 \u5728 main() \u51fd\u6570\u4e2d\u6211\u4eec\u505a\u51fa\u5982\u4e0b\u66f4\u6539\uff1a adder , quit := startServer ( func ( a , b int ) int { return a + b }) \u5728 main() \u51fd\u6570\u7684\u7ed3\u5c3e\u5904\u6211\u4eec\u653e\u5165\u8fd9\u4e00\u884c\uff1a quit <- true \u5b8c\u6574\u7684\u4ee3\u7801\u5728 multiplex_server2.go \uff0c\u8f93\u51fa\u548c\u4e0a\u4e00\u4e2a\u7248\u672c\u662f\u4e00\u6837\u7684\u3002 \u793a\u4f8b\uff1a 14.15- multiplex_server2.go package main import \"fmt\" type Request struct { a , b int replyc chan int // reply channel inside the Request } type binOp func ( a , b int ) int func run ( op binOp , req * Request ) { req . replyc <- op ( req . a , req . b ) } func server ( op binOp , service chan * Request , quit chan bool ) { for { select { case req := <- service : go run ( op , req ) case <- quit : return } } } func startServer ( op binOp ) ( service chan * Request , quit chan bool ) { service = make ( chan * Request ) quit = make ( chan bool ) go server ( op , service , quit ) return service , quit } func main () { adder , quit := startServer ( func ( a , b int ) int { return a + b }) const N = 100 var reqs [ N ] Request for i := 0 ; i < N ; i ++ { req := & reqs [ i ] req . a = i req . b = i + N req . replyc = make ( chan int ) adder <- req } // checks: for i := N - 1 ; i >= 0 ; i -- { // doesn't matter what order if <- reqs [ i ]. replyc != N + 2 * i { fmt . Println ( \"fail at\" , i ) } else { fmt . Println ( \"Request \" , i , \" is ok!\" ) } } quit <- true fmt . Println ( \"done\" ) } \u7ec3\u4e60 14.13 multiplex_server3.go \uff1a\u4f7f\u7528\u4e4b\u524d\u7684\u4f8b\u5b50\uff0c\u7f16\u5199\u4e00\u4e2a\u5728 Request \u7ed3\u6784\u4e0a\u5e26\u6709 String() \u65b9\u6cd5\u7684\u7248\u672c\uff0c\u5b83\u80fd\u51b3\u5b9a\u670d\u52a1\u5668\u5982\u4f55\u8f93\u51fa\uff1b\u5e76\u4f7f\u7528\u4ee5\u4e0b\u4e24\u4e2a\u8bf7\u6c42\u6765\u6d4b\u8bd5\u8fd9\u4e2a\u7a0b\u5e8f\uff1a req1 := & Request { 3 , 4 , make ( chan int )} req2 := & Request { 150 , 250 , make ( chan int )} ... // show the output fmt . Println ( req1 , \"\\n\" , req2 )","title":"14.10.2 \u5378\u8f7d (Teardown)\uff1a\u901a\u8fc7\u4fe1\u53f7\u901a\u9053\u5173\u95ed\u670d\u52a1\u5668"},{"location":"14.10/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5b9e\u73b0 Futures \u6a21\u5f0f \u4e0b\u4e00\u8282\uff1a \u9650\u5236\u540c\u65f6\u5904\u7406\u7684\u8bf7\u6c42\u6570","title":"\u94fe\u63a5"},{"location":"14.11/","text":"14.11 \u9650\u5236\u540c\u65f6\u5904\u7406\u7684\u8bf7\u6c42\u6570 \u00b6 \u4f7f\u7528\u5e26\u7f13\u51b2\u533a\u7684\u901a\u9053\u5f88\u5bb9\u6613\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff08\u53c2\u89c1 14.2.5 \uff09\uff0c\u5176\u7f13\u51b2\u533a\u5bb9\u91cf\u5c31\u662f\u540c\u65f6\u5904\u7406\u8bf7\u6c42\u7684\u6700\u5927\u6570\u91cf\u3002\u7a0b\u5e8f max_tasks.go \u867d\u7136\u6ca1\u6709\u505a\u4ec0\u4e48\u6709\u7528\u7684\u4e8b\u4f46\u662f\u5374\u5305\u542b\u4e86\u8fd9\u4e2a\u6280\u5de7\uff1a\u8d85\u8fc7 MAXREQS \u7684\u8bf7\u6c42\u5c06\u4e0d\u4f1a\u88ab\u540c\u65f6\u5904\u7406\uff0c\u56e0\u4e3a\u5f53\u4fe1\u53f7\u901a\u9053\u8868\u793a\u7f13\u51b2\u533a\u5df2\u6ee1\u65f6 handle() \u51fd\u6570\u4f1a\u963b\u585e\u4e14\u4e0d\u518d\u5904\u7406\u5176\u4ed6\u8bf7\u6c42\uff0c\u76f4\u5230\u67d0\u4e2a\u8bf7\u6c42\u4ece sem \u4e2d\u88ab\u79fb\u9664\u3002 sem \u5c31\u50cf\u4e00\u4e2a\u4fe1\u53f7\u91cf\uff0c\u8fd9\u4e00\u4e13\u4e1a\u672f\u8bed\u7528\u4e8e\u5728\u7a0b\u5e8f\u4e2d\u8868\u793a\u7279\u5b9a\u6761\u4ef6\u7684\u6807\u5fd7\u53d8\u91cf\u3002 \u793a\u4f8b\uff1a14.16- max_tasks.go package main const MAXREQS = 50 var sem = make ( chan int , MAXREQS ) type Request struct { a , b int replyc chan int } func process ( r * Request ) { // do something } func handle ( r * Request ) { sem <- 1 // doesn't matter what we put in it process ( r ) <- sem // one empty place in the buffer: the next request can start } func server ( service chan * Request ) { for { request := <- service go handle ( request ) } } func main () { service := make ( chan * Request ) go server ( service ) } \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u7f13\u51b2\u901a\u9053\uff08\u901a\u9053\u88ab\u7528\u4f5c\u4fe1\u53f7\u91cf\uff09\u4f7f\u534f\u7a0b\u540c\u6b65\u5176\u5bf9\u8be5\u8d44\u6e90\u7684\u4f7f\u7528\uff0c\u4ece\u800c\u5145\u5206\u5229\u7528\u6709\u9650\u7684\u8d44\u6e90\uff08\u5982\u5185\u5b58\uff09\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u590d\u7528 \u4e0b\u4e00\u8282\uff1a \u94fe\u5f0f\u534f\u7a0b","title":"14.11 \u9650\u5236\u540c\u65f6\u5904\u7406\u7684\u8bf7\u6c42\u6570"},{"location":"14.11/#1411","text":"\u4f7f\u7528\u5e26\u7f13\u51b2\u533a\u7684\u901a\u9053\u5f88\u5bb9\u6613\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff08\u53c2\u89c1 14.2.5 \uff09\uff0c\u5176\u7f13\u51b2\u533a\u5bb9\u91cf\u5c31\u662f\u540c\u65f6\u5904\u7406\u8bf7\u6c42\u7684\u6700\u5927\u6570\u91cf\u3002\u7a0b\u5e8f max_tasks.go \u867d\u7136\u6ca1\u6709\u505a\u4ec0\u4e48\u6709\u7528\u7684\u4e8b\u4f46\u662f\u5374\u5305\u542b\u4e86\u8fd9\u4e2a\u6280\u5de7\uff1a\u8d85\u8fc7 MAXREQS \u7684\u8bf7\u6c42\u5c06\u4e0d\u4f1a\u88ab\u540c\u65f6\u5904\u7406\uff0c\u56e0\u4e3a\u5f53\u4fe1\u53f7\u901a\u9053\u8868\u793a\u7f13\u51b2\u533a\u5df2\u6ee1\u65f6 handle() \u51fd\u6570\u4f1a\u963b\u585e\u4e14\u4e0d\u518d\u5904\u7406\u5176\u4ed6\u8bf7\u6c42\uff0c\u76f4\u5230\u67d0\u4e2a\u8bf7\u6c42\u4ece sem \u4e2d\u88ab\u79fb\u9664\u3002 sem \u5c31\u50cf\u4e00\u4e2a\u4fe1\u53f7\u91cf\uff0c\u8fd9\u4e00\u4e13\u4e1a\u672f\u8bed\u7528\u4e8e\u5728\u7a0b\u5e8f\u4e2d\u8868\u793a\u7279\u5b9a\u6761\u4ef6\u7684\u6807\u5fd7\u53d8\u91cf\u3002 \u793a\u4f8b\uff1a14.16- max_tasks.go package main const MAXREQS = 50 var sem = make ( chan int , MAXREQS ) type Request struct { a , b int replyc chan int } func process ( r * Request ) { // do something } func handle ( r * Request ) { sem <- 1 // doesn't matter what we put in it process ( r ) <- sem // one empty place in the buffer: the next request can start } func server ( service chan * Request ) { for { request := <- service go handle ( request ) } } func main () { service := make ( chan * Request ) go server ( service ) } \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u7f13\u51b2\u901a\u9053\uff08\u901a\u9053\u88ab\u7528\u4f5c\u4fe1\u53f7\u91cf\uff09\u4f7f\u534f\u7a0b\u540c\u6b65\u5176\u5bf9\u8be5\u8d44\u6e90\u7684\u4f7f\u7528\uff0c\u4ece\u800c\u5145\u5206\u5229\u7528\u6709\u9650\u7684\u8d44\u6e90\uff08\u5982\u5185\u5b58\uff09\u3002","title":"14.11 \u9650\u5236\u540c\u65f6\u5904\u7406\u7684\u8bf7\u6c42\u6570"},{"location":"14.11/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u590d\u7528 \u4e0b\u4e00\u8282\uff1a \u94fe\u5f0f\u534f\u7a0b","title":"\u94fe\u63a5"},{"location":"14.12/","text":"14.12 \u94fe\u5f0f\u534f\u7a0b \u00b6 \u4e0b\u9762\u7684\u6f14\u793a\u7a0b\u5e8f chaining.go \u518d\u6b21\u5c55\u793a\u4e86\u542f\u52a8\u5de8\u91cf\u7684 Go \u534f\u7a0b\u662f\u591a\u4e48\u5bb9\u6613\u3002\u8fd9\u4e9b\u534f\u7a0b\u5df2\u5168\u90e8\u5728 main() \u51fd\u6570\u4e2d\u7684 for \u5faa\u73af\u91cc\u542f\u52a8\u3002\u5f53\u5faa\u73af\u5b8c\u6210\u4e4b\u540e\uff0c\u4e00\u4e2a 0 \u88ab\u5199\u5165\u5230\u6700\u53f3\u8fb9\u7684\u901a\u9053\u91cc\uff0c\u4e8e\u662f 100,000 \u4e2a\u534f\u7a0b\u5f00\u59cb\u6267\u884c\uff0c\u63a5\u7740 1000000 \u8fd9\u4e2a\u7ed3\u679c\u4f1a\u5728 1.5 \u79d2\u4e4b\u5185\u88ab\u6253\u5370\u51fa\u6765\u3002 \u8fd9\u4e2a\u7a0b\u5e8f\u540c\u65f6\u4e5f\u5c55\u793a\u4e86\u5982\u4f55\u901a\u8fc7 flag.Int \u6765\u89e3\u6790\u547d\u4ee4\u884c\u4e2d\u7684\u53c2\u6570\u4ee5\u6307\u5b9a\u534f\u7a0b\u6570\u91cf\uff0c\u4f8b\u5982\uff1a chaining -n=7000 \u4f1a\u751f\u6210 7000 \u4e2a\u534f\u7a0b\u3002 \u793a\u4f8b 14.17- chaining.go package main import ( \"flag\" \"fmt\" ) var ngoroutine = flag . Int ( \"n\" , 100000 , \"how many goroutines\" ) func f ( left , right chan int ) { left <- 1 + <- right } func main () { flag . Parse () leftmost := make ( chan int ) var left , right chan int = nil , leftmost for i := 0 ; i < * ngoroutine ; i ++ { left , right = right , make ( chan int ) go f ( left , right ) } right <- 0 // bang! x := <- leftmost // wait for completion fmt . Println ( x ) // 100000, about 1.5 s } \uff08 \u8bd1\u8005\u6ce8\uff1a\u539f\u672c\u8ba4\u4e3a leftmost \u7684\u7ed3\u679c\u4e3a 1 \uff0c\u8ba4\u4e3a\u53ea\u5728\u6700\u521d\u505a\u4e86\u4e00\u6b21\u8d4b\u503c\uff0c\u5b9e\u9645\u7ed3\u679c\u4e3a 100000 \uff08\u65e0\u7f13\u5b58\u4fe1\u9053\u5177\u6709\u540c\u6b65\u963b\u585e\u7684\u7279\u6027\uff09 \u4e3b\u7ebf\u7a0b\u7684 right <- 0 \uff0cright \u4e0d\u662f\u6700\u521d\u5faa\u73af\u7684\u90a3\u4e2a right \uff0c\u800c\u662f\u6700\u7ec8\u5faa\u73af\u7684 right for \u5faa\u73af\u4e2d\u6700\u521d\u7684 go f(left, right) \u56e0\u4e3a\u6ca1\u6709\u53d1\u9001\u8005\u4e00\u76f4\u5904\u4e8e\u7b49\u5f85\u72b6\u6001 \u5f53\u4e3b\u7ebf\u7a0b\u7684 right <- 0 \u6267\u884c\u65f6\uff0c\u7c7b\u4f3c\u4e8e\u9012\u5f52\u51fd\u6570\u5728\u6700\u5185\u5c42\u4ea7\u751f\u8fd4\u56de\u503c\u4e00\u822c \uff09 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u9650\u5236\u540c\u65f6\u5904\u7406\u7684\u8bf7\u6c42\u6570 \u4e0b\u4e00\u8282\uff1a \u5728\u591a\u6838\u5fc3\u4e0a\u5e76\u884c\u8ba1\u7b97","title":"14.12 \u94fe\u5f0f\u534f\u7a0b"},{"location":"14.12/#1412","text":"\u4e0b\u9762\u7684\u6f14\u793a\u7a0b\u5e8f chaining.go \u518d\u6b21\u5c55\u793a\u4e86\u542f\u52a8\u5de8\u91cf\u7684 Go \u534f\u7a0b\u662f\u591a\u4e48\u5bb9\u6613\u3002\u8fd9\u4e9b\u534f\u7a0b\u5df2\u5168\u90e8\u5728 main() \u51fd\u6570\u4e2d\u7684 for \u5faa\u73af\u91cc\u542f\u52a8\u3002\u5f53\u5faa\u73af\u5b8c\u6210\u4e4b\u540e\uff0c\u4e00\u4e2a 0 \u88ab\u5199\u5165\u5230\u6700\u53f3\u8fb9\u7684\u901a\u9053\u91cc\uff0c\u4e8e\u662f 100,000 \u4e2a\u534f\u7a0b\u5f00\u59cb\u6267\u884c\uff0c\u63a5\u7740 1000000 \u8fd9\u4e2a\u7ed3\u679c\u4f1a\u5728 1.5 \u79d2\u4e4b\u5185\u88ab\u6253\u5370\u51fa\u6765\u3002 \u8fd9\u4e2a\u7a0b\u5e8f\u540c\u65f6\u4e5f\u5c55\u793a\u4e86\u5982\u4f55\u901a\u8fc7 flag.Int \u6765\u89e3\u6790\u547d\u4ee4\u884c\u4e2d\u7684\u53c2\u6570\u4ee5\u6307\u5b9a\u534f\u7a0b\u6570\u91cf\uff0c\u4f8b\u5982\uff1a chaining -n=7000 \u4f1a\u751f\u6210 7000 \u4e2a\u534f\u7a0b\u3002 \u793a\u4f8b 14.17- chaining.go package main import ( \"flag\" \"fmt\" ) var ngoroutine = flag . Int ( \"n\" , 100000 , \"how many goroutines\" ) func f ( left , right chan int ) { left <- 1 + <- right } func main () { flag . Parse () leftmost := make ( chan int ) var left , right chan int = nil , leftmost for i := 0 ; i < * ngoroutine ; i ++ { left , right = right , make ( chan int ) go f ( left , right ) } right <- 0 // bang! x := <- leftmost // wait for completion fmt . Println ( x ) // 100000, about 1.5 s } \uff08 \u8bd1\u8005\u6ce8\uff1a\u539f\u672c\u8ba4\u4e3a leftmost \u7684\u7ed3\u679c\u4e3a 1 \uff0c\u8ba4\u4e3a\u53ea\u5728\u6700\u521d\u505a\u4e86\u4e00\u6b21\u8d4b\u503c\uff0c\u5b9e\u9645\u7ed3\u679c\u4e3a 100000 \uff08\u65e0\u7f13\u5b58\u4fe1\u9053\u5177\u6709\u540c\u6b65\u963b\u585e\u7684\u7279\u6027\uff09 \u4e3b\u7ebf\u7a0b\u7684 right <- 0 \uff0cright \u4e0d\u662f\u6700\u521d\u5faa\u73af\u7684\u90a3\u4e2a right \uff0c\u800c\u662f\u6700\u7ec8\u5faa\u73af\u7684 right for \u5faa\u73af\u4e2d\u6700\u521d\u7684 go f(left, right) \u56e0\u4e3a\u6ca1\u6709\u53d1\u9001\u8005\u4e00\u76f4\u5904\u4e8e\u7b49\u5f85\u72b6\u6001 \u5f53\u4e3b\u7ebf\u7a0b\u7684 right <- 0 \u6267\u884c\u65f6\uff0c\u7c7b\u4f3c\u4e8e\u9012\u5f52\u51fd\u6570\u5728\u6700\u5185\u5c42\u4ea7\u751f\u8fd4\u56de\u503c\u4e00\u822c \uff09","title":"14.12 \u94fe\u5f0f\u534f\u7a0b"},{"location":"14.12/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u9650\u5236\u540c\u65f6\u5904\u7406\u7684\u8bf7\u6c42\u6570 \u4e0b\u4e00\u8282\uff1a \u5728\u591a\u6838\u5fc3\u4e0a\u5e76\u884c\u8ba1\u7b97","title":"\u94fe\u63a5"},{"location":"14.13/","text":"14.13 \u5728\u591a\u6838\u5fc3\u4e0a\u5e76\u884c\u8ba1\u7b97 \u00b6 \u5047\u8bbe\u6211\u4eec\u6709 NCPU \u4e2a CPU \u6838\u5fc3\uff1a const NCPU = 4 //\u5bf9\u5e94\u4e00\u4e2a\u56db\u6838\u5904\u7406\u5668 \u7136\u540e\u6211\u4eec\u60f3\u628a\u8ba1\u7b97\u91cf\u5206\u6210 NCPU \u4e2a\u90e8\u5206\uff0c\u6bcf\u4e00\u4e2a\u90e8\u5206\u90fd\u548c\u5176\u4ed6\u90e8\u5206\u5e76\u884c\u8fd0\u884c\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4ee3\u7801\u6240\u793a\u7684\u65b9\u5f0f\u5b8c\u6210\uff08\u6211\u4eec\u4e14\u7701\u7565\u5177\u4f53\u53c2\u6570\uff09 func DoAll (){ sem := make ( chan int , NCPU ) // Buffering optional but sensible for i := 0 ; i < NCPU ; i ++ { go DoPart ( sem ) } // Drain the channel sem, waiting for NCPU tasks to complete for i := 0 ; i < NCPU ; i ++ { <- sem // wait for one task to complete } // All done. } func DoPart ( sem chan int ) { // do the part of the computation sem <- 1 // signal that this piece is done } func main () { runtime . GOMAXPROCS ( NCPU ) // runtime.GOMAXPROCS = NCPU DoAll () } DoAll() \u51fd\u6570\u521b\u5efa\u4e86\u4e00\u4e2a sem \u901a\u9053\uff0c\u6bcf\u4e2a\u5e76\u884c\u8ba1\u7b97\u90fd\u5c06\u5728\u5bf9\u5176\u53d1\u9001\u5b8c\u6210\u4fe1\u53f7\uff1b\u5728\u4e00\u4e2a for \u5faa\u73af\u4e2d NCPU \u4e2a\u534f\u7a0b\u88ab\u542f\u52a8\u4e86\uff0c\u6bcf\u4e2a\u534f\u7a0b\u4f1a\u627f\u62c5 1/NCPU \u7684\u5de5\u4f5c\u91cf\u3002\u6bcf\u4e00\u4e2a DoPart() \u534f\u7a0b\u90fd\u4f1a\u5411 sem \u901a\u9053\u53d1\u9001\u5b8c\u6210\u4fe1\u53f7\u3002 DoAll() \u4f1a\u5728 for \u5faa\u73af\u4e2d\u7b49\u5f85 NCPU \u4e2a\u534f\u7a0b\u5b8c\u6210\uff1a sem \u901a\u9053\u5c31\u50cf\u4e00\u4e2a\u4fe1\u53f7\u91cf\uff0c\u8fd9\u4efd\u4ee3\u7801\u5c55\u793a\u4e86\u4e00\u4e2a\u7ecf\u5178\u7684\u4fe1\u53f7\u91cf\u6a21\u5f0f\u3002\uff08\u53c2\u89c1 14.2.7 \uff09 \u5728\u4ee5\u4e0a\u8fd0\u884c\u6a21\u578b\u4e2d\uff0c\u60a8\u8fd8\u9700\u5c06 GOMAXPROCS \u8bbe\u7f6e\u4e3a NCPU \uff08\u53c2\u89c1 14.1.3 \uff09\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u534f\u7a0b\u94fe \u4e0b\u4e00\u8282\uff1a \u5e76\u884c\u5316\u5927\u91cf\u6570\u636e\u7684\u8ba1\u7b97","title":"14.13 \u5728\u591a\u6838\u5fc3\u4e0a\u5e76\u884c\u8ba1\u7b97"},{"location":"14.13/#1413","text":"\u5047\u8bbe\u6211\u4eec\u6709 NCPU \u4e2a CPU \u6838\u5fc3\uff1a const NCPU = 4 //\u5bf9\u5e94\u4e00\u4e2a\u56db\u6838\u5904\u7406\u5668 \u7136\u540e\u6211\u4eec\u60f3\u628a\u8ba1\u7b97\u91cf\u5206\u6210 NCPU \u4e2a\u90e8\u5206\uff0c\u6bcf\u4e00\u4e2a\u90e8\u5206\u90fd\u548c\u5176\u4ed6\u90e8\u5206\u5e76\u884c\u8fd0\u884c\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4ee3\u7801\u6240\u793a\u7684\u65b9\u5f0f\u5b8c\u6210\uff08\u6211\u4eec\u4e14\u7701\u7565\u5177\u4f53\u53c2\u6570\uff09 func DoAll (){ sem := make ( chan int , NCPU ) // Buffering optional but sensible for i := 0 ; i < NCPU ; i ++ { go DoPart ( sem ) } // Drain the channel sem, waiting for NCPU tasks to complete for i := 0 ; i < NCPU ; i ++ { <- sem // wait for one task to complete } // All done. } func DoPart ( sem chan int ) { // do the part of the computation sem <- 1 // signal that this piece is done } func main () { runtime . GOMAXPROCS ( NCPU ) // runtime.GOMAXPROCS = NCPU DoAll () } DoAll() \u51fd\u6570\u521b\u5efa\u4e86\u4e00\u4e2a sem \u901a\u9053\uff0c\u6bcf\u4e2a\u5e76\u884c\u8ba1\u7b97\u90fd\u5c06\u5728\u5bf9\u5176\u53d1\u9001\u5b8c\u6210\u4fe1\u53f7\uff1b\u5728\u4e00\u4e2a for \u5faa\u73af\u4e2d NCPU \u4e2a\u534f\u7a0b\u88ab\u542f\u52a8\u4e86\uff0c\u6bcf\u4e2a\u534f\u7a0b\u4f1a\u627f\u62c5 1/NCPU \u7684\u5de5\u4f5c\u91cf\u3002\u6bcf\u4e00\u4e2a DoPart() \u534f\u7a0b\u90fd\u4f1a\u5411 sem \u901a\u9053\u53d1\u9001\u5b8c\u6210\u4fe1\u53f7\u3002 DoAll() \u4f1a\u5728 for \u5faa\u73af\u4e2d\u7b49\u5f85 NCPU \u4e2a\u534f\u7a0b\u5b8c\u6210\uff1a sem \u901a\u9053\u5c31\u50cf\u4e00\u4e2a\u4fe1\u53f7\u91cf\uff0c\u8fd9\u4efd\u4ee3\u7801\u5c55\u793a\u4e86\u4e00\u4e2a\u7ecf\u5178\u7684\u4fe1\u53f7\u91cf\u6a21\u5f0f\u3002\uff08\u53c2\u89c1 14.2.7 \uff09 \u5728\u4ee5\u4e0a\u8fd0\u884c\u6a21\u578b\u4e2d\uff0c\u60a8\u8fd8\u9700\u5c06 GOMAXPROCS \u8bbe\u7f6e\u4e3a NCPU \uff08\u53c2\u89c1 14.1.3 \uff09\u3002","title":"14.13 \u5728\u591a\u6838\u5fc3\u4e0a\u5e76\u884c\u8ba1\u7b97"},{"location":"14.13/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u534f\u7a0b\u94fe \u4e0b\u4e00\u8282\uff1a \u5e76\u884c\u5316\u5927\u91cf\u6570\u636e\u7684\u8ba1\u7b97","title":"\u94fe\u63a5"},{"location":"14.14/","text":"14.14 \u5e76\u884c\u5316\u5927\u91cf\u6570\u636e\u7684\u8ba1\u7b97 \u00b6 \u5047\u8bbe\u6211\u4eec\u9700\u8981\u5904\u7406\u4e00\u4e9b\u6570\u91cf\u5de8\u5927\u4e14\u4e92\u4e0d\u76f8\u5173\u7684\u6570\u636e\u9879\uff0c\u5b83\u4eec\u4ece\u4e00\u4e2a in \u901a\u9053\u88ab\u4f20\u9012\u8fdb\u6765\uff0c\u5f53\u6211\u4eec\u5904\u7406\u5b8c\u4ee5\u540e\u53c8\u8981\u5c06\u5b83\u4eec\u653e\u5165\u53e6\u4e00\u4e2a out \u901a\u9053\uff0c\u5c31\u50cf\u4e00\u4e2a\u5de5\u5382\u6d41\u6c34\u7ebf\u4e00\u6837\u3002\u5904\u7406\u6bcf\u4e2a\u6570\u636e\u9879\u4e5f\u53ef\u80fd\u5305\u542b\u8bb8\u591a\u6b65\u9aa4\uff1a Preprocess\uff08\u9884\u5904\u7406\uff09 / StepA\uff08\u6b65\u9aa4A\uff09 / StepB\uff08\u6b65\u9aa4B\uff09 / ... / PostProcess\uff08\u540e\u5904\u7406\uff09 \u4e00\u4e2a\u5178\u578b\u7684\u7528\u4e8e\u89e3\u51b3\u6309\u987a\u5e8f\u6267\u884c\u6bcf\u4e2a\u6b65\u9aa4\u7684\u987a\u5e8f\u6d41\u6c34\u7ebf\u7b97\u6cd5\u53ef\u4ee5\u5199\u6210\u4e0b\u9762\u8fd9\u6837\uff1a func SerialProcessData ( in <- chan * Data , out chan <- * Data ) { for data := range in { tmpA := PreprocessData ( data ) tmpB := ProcessStepA ( tmpA ) tmpC := ProcessStepB ( tmpB ) out <- PostProcessData ( tmpC ) } } \u4e00\u6b21\u53ea\u6267\u884c\u4e00\u4e2a\u6b65\u9aa4\uff0c\u5e76\u4e14\u6309\u987a\u5e8f\u5904\u7406\u6bcf\u4e2a\u9879\u76ee\uff1a\u5728\u7b2c 1 \u4e2a\u9879\u76ee\u6ca1\u6709\u88ab PostProcessData() \u5e76\u653e\u5165 out \u901a\u9053\u4e4b\u524d\u7edd\u4e0d\u4f1a\u5904\u7406\u7b2c 2 \u4e2a\u9879\u76ee\u3002 \u5982\u679c\u4f60\u4ed4\u7ec6\u60f3\u60f3\uff0c\u4f60\u5f88\u5feb\u5c31\u4f1a\u53d1\u73b0\u8fd9\u5c06\u4f1a\u9020\u6210\u5de8\u5927\u7684\u65f6\u95f4\u6d6a\u8d39\u3002 \u4e00\u4e2a\u66f4\u9ad8\u6548\u7684\u8ba1\u7b97\u65b9\u5f0f\u662f\u8ba9\u6bcf\u4e00\u4e2a\u5904\u7406\u6b65\u9aa4\u4f5c\u4e3a\u4e00\u4e2a\u534f\u7a0b\u72ec\u7acb\u5de5\u4f5c\u3002\u6bcf\u4e00\u4e2a\u6b65\u9aa4\u4ece\u4e0a\u4e00\u6b65\u7684\u8f93\u51fa\u901a\u9053\u4e2d\u83b7\u5f97\u8f93\u5165\u6570\u636e\u3002\u8fd9\u79cd\u65b9\u5f0f\u4ec5\u6709\u6781\u5c11\u6570\u65f6\u95f4\u4f1a\u88ab\u6d6a\u8d39\uff0c\u800c\u5927\u90e8\u5206\u65f6\u95f4\u6240\u6709\u7684\u6b65\u9aa4\u90fd\u5728\u4e00\u76f4\u6267\u884c\u4e2d\uff1a func ParallelProcessData ( in <- chan * Data , out chan <- * Data ) { // make channels: preOut := make ( chan * Data , 100 ) stepAOut := make ( chan * Data , 100 ) stepBOut := make ( chan * Data , 100 ) stepCOut := make ( chan * Data , 100 ) // start parallel computations: go PreprocessData ( in , preOut ) go ProcessStepA ( preOut , StepAOut ) go ProcessStepB ( StepAOut , StepBOut ) go ProcessStepC ( StepBOut , StepCOut ) go PostProcessData ( StepCOut , out ) } \u901a\u9053\u7684\u7f13\u51b2\u533a\u5927\u5c0f\u53ef\u4ee5\u7528\u6765\u8fdb\u4e00\u6b65\u4f18\u5316\u6574\u4e2a\u8fc7\u7a0b\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5728\u591a\u6838\u5fc3\u4e0a\u5e76\u884c\u8ba1\u7b97 \u4e0b\u4e00\u8282\uff1a \u6f0f\u6876\u7b97\u6cd5","title":"14.14 \u5e76\u884c\u5316\u5927\u91cf\u6570\u636e\u7684\u8ba1\u7b97"},{"location":"14.14/#1414","text":"\u5047\u8bbe\u6211\u4eec\u9700\u8981\u5904\u7406\u4e00\u4e9b\u6570\u91cf\u5de8\u5927\u4e14\u4e92\u4e0d\u76f8\u5173\u7684\u6570\u636e\u9879\uff0c\u5b83\u4eec\u4ece\u4e00\u4e2a in \u901a\u9053\u88ab\u4f20\u9012\u8fdb\u6765\uff0c\u5f53\u6211\u4eec\u5904\u7406\u5b8c\u4ee5\u540e\u53c8\u8981\u5c06\u5b83\u4eec\u653e\u5165\u53e6\u4e00\u4e2a out \u901a\u9053\uff0c\u5c31\u50cf\u4e00\u4e2a\u5de5\u5382\u6d41\u6c34\u7ebf\u4e00\u6837\u3002\u5904\u7406\u6bcf\u4e2a\u6570\u636e\u9879\u4e5f\u53ef\u80fd\u5305\u542b\u8bb8\u591a\u6b65\u9aa4\uff1a Preprocess\uff08\u9884\u5904\u7406\uff09 / StepA\uff08\u6b65\u9aa4A\uff09 / StepB\uff08\u6b65\u9aa4B\uff09 / ... / PostProcess\uff08\u540e\u5904\u7406\uff09 \u4e00\u4e2a\u5178\u578b\u7684\u7528\u4e8e\u89e3\u51b3\u6309\u987a\u5e8f\u6267\u884c\u6bcf\u4e2a\u6b65\u9aa4\u7684\u987a\u5e8f\u6d41\u6c34\u7ebf\u7b97\u6cd5\u53ef\u4ee5\u5199\u6210\u4e0b\u9762\u8fd9\u6837\uff1a func SerialProcessData ( in <- chan * Data , out chan <- * Data ) { for data := range in { tmpA := PreprocessData ( data ) tmpB := ProcessStepA ( tmpA ) tmpC := ProcessStepB ( tmpB ) out <- PostProcessData ( tmpC ) } } \u4e00\u6b21\u53ea\u6267\u884c\u4e00\u4e2a\u6b65\u9aa4\uff0c\u5e76\u4e14\u6309\u987a\u5e8f\u5904\u7406\u6bcf\u4e2a\u9879\u76ee\uff1a\u5728\u7b2c 1 \u4e2a\u9879\u76ee\u6ca1\u6709\u88ab PostProcessData() \u5e76\u653e\u5165 out \u901a\u9053\u4e4b\u524d\u7edd\u4e0d\u4f1a\u5904\u7406\u7b2c 2 \u4e2a\u9879\u76ee\u3002 \u5982\u679c\u4f60\u4ed4\u7ec6\u60f3\u60f3\uff0c\u4f60\u5f88\u5feb\u5c31\u4f1a\u53d1\u73b0\u8fd9\u5c06\u4f1a\u9020\u6210\u5de8\u5927\u7684\u65f6\u95f4\u6d6a\u8d39\u3002 \u4e00\u4e2a\u66f4\u9ad8\u6548\u7684\u8ba1\u7b97\u65b9\u5f0f\u662f\u8ba9\u6bcf\u4e00\u4e2a\u5904\u7406\u6b65\u9aa4\u4f5c\u4e3a\u4e00\u4e2a\u534f\u7a0b\u72ec\u7acb\u5de5\u4f5c\u3002\u6bcf\u4e00\u4e2a\u6b65\u9aa4\u4ece\u4e0a\u4e00\u6b65\u7684\u8f93\u51fa\u901a\u9053\u4e2d\u83b7\u5f97\u8f93\u5165\u6570\u636e\u3002\u8fd9\u79cd\u65b9\u5f0f\u4ec5\u6709\u6781\u5c11\u6570\u65f6\u95f4\u4f1a\u88ab\u6d6a\u8d39\uff0c\u800c\u5927\u90e8\u5206\u65f6\u95f4\u6240\u6709\u7684\u6b65\u9aa4\u90fd\u5728\u4e00\u76f4\u6267\u884c\u4e2d\uff1a func ParallelProcessData ( in <- chan * Data , out chan <- * Data ) { // make channels: preOut := make ( chan * Data , 100 ) stepAOut := make ( chan * Data , 100 ) stepBOut := make ( chan * Data , 100 ) stepCOut := make ( chan * Data , 100 ) // start parallel computations: go PreprocessData ( in , preOut ) go ProcessStepA ( preOut , StepAOut ) go ProcessStepB ( StepAOut , StepBOut ) go ProcessStepC ( StepBOut , StepCOut ) go PostProcessData ( StepCOut , out ) } \u901a\u9053\u7684\u7f13\u51b2\u533a\u5927\u5c0f\u53ef\u4ee5\u7528\u6765\u8fdb\u4e00\u6b65\u4f18\u5316\u6574\u4e2a\u8fc7\u7a0b\u3002","title":"14.14 \u5e76\u884c\u5316\u5927\u91cf\u6570\u636e\u7684\u8ba1\u7b97"},{"location":"14.14/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5728\u591a\u6838\u5fc3\u4e0a\u5e76\u884c\u8ba1\u7b97 \u4e0b\u4e00\u8282\uff1a \u6f0f\u6876\u7b97\u6cd5","title":"\u94fe\u63a5"},{"location":"14.15/","text":"14.15 \u6f0f\u6876\u7b97\u6cd5 \u00b6 \uff08\u8bd1\u8005\u6ce8\uff1a\u7ffb\u8bd1\u9075\u7167\u539f\u6587\uff0c\u4f46\u662f\u5bf9\u4e8e\u5b8c\u5168\u6ca1\u542c\u8fc7\u8fd9\u4e2a\u7b97\u6cd5\u7684\u4eba\u6765\u8bf4\u6bd4\u8f83\u6666\u6da9\uff0c\u8bf7\u914d\u5408\u4ee3\u7801\u7247\u6bb5\u7406\u89e3\uff09 \u8003\u8651\u4ee5\u4e0b\u7684\u5ba2\u6237\u7aef-\u670d\u52a1\u5668\u7ed3\u6784\uff1a\u5ba2\u6237\u7aef\u534f\u7a0b\u6267\u884c\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u4ece\u67d0\u4e2a\u6e90\u5934\uff08\u4e5f\u8bb8\u662f\u7f51\u7edc\uff09\u63a5\u6536\u6570\u636e\uff1b\u6570\u636e\u8bfb\u53d6\u5230 Buffer \u7c7b\u578b\u7684\u7f13\u51b2\u533a\u3002\u4e3a\u4e86\u907f\u514d\u5206\u914d\u8fc7\u591a\u7684\u7f13\u51b2\u533a\u4ee5\u53ca\u91ca\u653e\u7f13\u51b2\u533a\uff0c\u5b83\u4fdd\u7559\u4e86\u4e00\u4efd\u7a7a\u95f2\u7f13\u51b2\u533a\u5217\u8868\uff0c\u5e76\u4e14\u4f7f\u7528\u4e00\u4e2a\u7f13\u51b2\u901a\u9053\u6765\u8868\u793a\u8fd9\u4e2a\u5217\u8868\uff1a var freeList = make(chan *Buffer,100) \u8fd9\u4e2a\u53ef\u91cd\u7528\u7684\u7f13\u51b2\u533a\u961f\u5217 ( freeList ) \u4e0e\u670d\u52a1\u5668\u662f\u5171\u4eab\u7684\u3002 \u5f53\u63a5\u6536\u6570\u636e\u65f6\uff0c\u5ba2\u6237\u7aef\u5c1d\u8bd5\u4ece freeList \u83b7\u53d6\u7f13\u51b2\u533a\uff1b\u4f46\u5982\u679c\u6b64\u65f6\u901a\u9053\u4e3a\u7a7a\uff0c\u5219\u4f1a\u5206\u914d\u65b0\u7684\u7f13\u51b2\u533a\u3002\u4e00\u65e6\u6d88\u606f\u88ab\u52a0\u8f7d\u540e\uff0c\u5b83\u5c06\u88ab\u53d1\u9001\u5230\u670d\u52a1\u5668\u4e0a\u7684 serverChan \u901a\u9053\uff1a var serverChan = make ( chan * Buffer ) \u4ee5\u4e0b\u662f\u5ba2\u6237\u7aef\u7684\u7b97\u6cd5\u4ee3\u7801\uff1a func client () { for { var b * Buffer // Grab a buffer if available; allocate if not select { case b = <- freeList : // Got one; nothing more to do default : // None free, so allocate a new one b = new ( Buffer ) } loadInto ( b ) // Read next message from the network serverChan <- b // Send to server } } \u670d\u52a1\u5668\u7684\u5faa\u73af\u5219\u63a5\u6536\u6bcf\u4e00\u6761\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u6d88\u606f\u5e76\u5904\u7406\u5b83\uff0c\u4e4b\u540e\u5c1d\u8bd5\u5c06\u7f13\u51b2\u8fd4\u56de\u7ed9\u5171\u4eab\u7684\u7a7a\u95f2\u7f13\u51b2\u533a\uff1a func server () { for { b := <- serverChan // Wait for work. process ( b ) // Reuse buffer if there's room. select { case freeList <- b : // Reuse buffer if free slot on freeList; nothing more to do default : // Free list full, just carry on: the buffer is 'dropped' } } } \u4f46\u662f\u8fd9\u79cd\u65b9\u6cd5\u5728 freeList \u901a\u9053\u5df2\u6ee1\u7684\u65f6\u5019\u662f\u884c\u4e0d\u901a\u7684\uff0c\u56e0\u4e3a\u65e0\u6cd5\u653e\u5165\u7a7a\u95f2 freeList \u901a\u9053\u7684\u7f13\u51b2\u533a\u4f1a\u88ab\u201c\u4e22\u5230\u5730\u4e0a\u201d\u7531\u5783\u573e\u6536\u96c6\u5668\u56de\u6536\uff08\u6545\u540d\uff1a\u6f0f\u6876\u7b97\u6cd5\uff09\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5e76\u884c\u5316\u5927\u91cf\u6570\u636e\u7684\u8ba1\u7b97 \u4e0b\u4e00\u8282\uff1a \u5bf9 Go \u534f\u7a0b\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5","title":"14.15 \u6f0f\u6876\u7b97\u6cd5"},{"location":"14.15/#1415","text":"\uff08\u8bd1\u8005\u6ce8\uff1a\u7ffb\u8bd1\u9075\u7167\u539f\u6587\uff0c\u4f46\u662f\u5bf9\u4e8e\u5b8c\u5168\u6ca1\u542c\u8fc7\u8fd9\u4e2a\u7b97\u6cd5\u7684\u4eba\u6765\u8bf4\u6bd4\u8f83\u6666\u6da9\uff0c\u8bf7\u914d\u5408\u4ee3\u7801\u7247\u6bb5\u7406\u89e3\uff09 \u8003\u8651\u4ee5\u4e0b\u7684\u5ba2\u6237\u7aef-\u670d\u52a1\u5668\u7ed3\u6784\uff1a\u5ba2\u6237\u7aef\u534f\u7a0b\u6267\u884c\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u4ece\u67d0\u4e2a\u6e90\u5934\uff08\u4e5f\u8bb8\u662f\u7f51\u7edc\uff09\u63a5\u6536\u6570\u636e\uff1b\u6570\u636e\u8bfb\u53d6\u5230 Buffer \u7c7b\u578b\u7684\u7f13\u51b2\u533a\u3002\u4e3a\u4e86\u907f\u514d\u5206\u914d\u8fc7\u591a\u7684\u7f13\u51b2\u533a\u4ee5\u53ca\u91ca\u653e\u7f13\u51b2\u533a\uff0c\u5b83\u4fdd\u7559\u4e86\u4e00\u4efd\u7a7a\u95f2\u7f13\u51b2\u533a\u5217\u8868\uff0c\u5e76\u4e14\u4f7f\u7528\u4e00\u4e2a\u7f13\u51b2\u901a\u9053\u6765\u8868\u793a\u8fd9\u4e2a\u5217\u8868\uff1a var freeList = make(chan *Buffer,100) \u8fd9\u4e2a\u53ef\u91cd\u7528\u7684\u7f13\u51b2\u533a\u961f\u5217 ( freeList ) \u4e0e\u670d\u52a1\u5668\u662f\u5171\u4eab\u7684\u3002 \u5f53\u63a5\u6536\u6570\u636e\u65f6\uff0c\u5ba2\u6237\u7aef\u5c1d\u8bd5\u4ece freeList \u83b7\u53d6\u7f13\u51b2\u533a\uff1b\u4f46\u5982\u679c\u6b64\u65f6\u901a\u9053\u4e3a\u7a7a\uff0c\u5219\u4f1a\u5206\u914d\u65b0\u7684\u7f13\u51b2\u533a\u3002\u4e00\u65e6\u6d88\u606f\u88ab\u52a0\u8f7d\u540e\uff0c\u5b83\u5c06\u88ab\u53d1\u9001\u5230\u670d\u52a1\u5668\u4e0a\u7684 serverChan \u901a\u9053\uff1a var serverChan = make ( chan * Buffer ) \u4ee5\u4e0b\u662f\u5ba2\u6237\u7aef\u7684\u7b97\u6cd5\u4ee3\u7801\uff1a func client () { for { var b * Buffer // Grab a buffer if available; allocate if not select { case b = <- freeList : // Got one; nothing more to do default : // None free, so allocate a new one b = new ( Buffer ) } loadInto ( b ) // Read next message from the network serverChan <- b // Send to server } } \u670d\u52a1\u5668\u7684\u5faa\u73af\u5219\u63a5\u6536\u6bcf\u4e00\u6761\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u6d88\u606f\u5e76\u5904\u7406\u5b83\uff0c\u4e4b\u540e\u5c1d\u8bd5\u5c06\u7f13\u51b2\u8fd4\u56de\u7ed9\u5171\u4eab\u7684\u7a7a\u95f2\u7f13\u51b2\u533a\uff1a func server () { for { b := <- serverChan // Wait for work. process ( b ) // Reuse buffer if there's room. select { case freeList <- b : // Reuse buffer if free slot on freeList; nothing more to do default : // Free list full, just carry on: the buffer is 'dropped' } } } \u4f46\u662f\u8fd9\u79cd\u65b9\u6cd5\u5728 freeList \u901a\u9053\u5df2\u6ee1\u7684\u65f6\u5019\u662f\u884c\u4e0d\u901a\u7684\uff0c\u56e0\u4e3a\u65e0\u6cd5\u653e\u5165\u7a7a\u95f2 freeList \u901a\u9053\u7684\u7f13\u51b2\u533a\u4f1a\u88ab\u201c\u4e22\u5230\u5730\u4e0a\u201d\u7531\u5783\u573e\u6536\u96c6\u5668\u56de\u6536\uff08\u6545\u540d\uff1a\u6f0f\u6876\u7b97\u6cd5\uff09\u3002","title":"14.15 \u6f0f\u6876\u7b97\u6cd5"},{"location":"14.15/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5e76\u884c\u5316\u5927\u91cf\u6570\u636e\u7684\u8ba1\u7b97 \u4e0b\u4e00\u8282\uff1a \u5bf9 Go \u534f\u7a0b\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5","title":"\u94fe\u63a5"},{"location":"14.16/","text":"14.16 \u5bf9 Go \u534f\u7a0b\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5 \u00b6 \u5728 13.7 \u8282 \u6211\u4eec\u63d0\u5230\u4e86\u5728 Go \u8bed\u8a00\u4e2d\u5bf9\u4f60\u7684\u51fd\u6570\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5\u3002\u5728\u6b64\u6211\u4eec\u5c06\u5176\u5e94\u7528\u5230\u4e00\u4e2a\u7528\u534f\u7a0b\u5411\u901a\u9053\u5199\u5165\u6574\u6570\u518d\u8bfb\u51fa\u7684\u5b9e\u4f8b\u4e2d\u3002\u8fd9\u4e2a\u51fd\u6570\u5c06\u901a\u8fc7 testing.Benchmark() \u8c03\u7528 N \u6b21\uff08\u4f8b\u5982\uff1a N = 1,000,000 \uff09\uff0c BenchMarkResult \u6709\u4e00\u4e2a String() \u65b9\u6cd5\u6765\u8f93\u51fa\u5176\u7ed3\u679c\u3002 N \u7684\u503c\u5c06\u7531 gotest \u6765\u5224\u65ad\u5e76\u53d6\u5f97\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u6570\u5b57\uff0c\u4ee5\u83b7\u5f97\u5408\u7406\u7684\u57fa\u51c6\u6d4b\u8bd5\u7ed3\u679c\u3002\u5f53\u7136\u540c\u6837\u7684\u57fa\u51c6\u6d4b\u8bd5\u65b9\u6cd5\u4e5f\u9002\u7528\u4e8e\u666e\u901a\u51fd\u6570\u3002 \u5982\u679c\u4f60\u60f3\u6392\u9664\u6307\u5b9a\u90e8\u5206\u7684\u4ee3\u7801\u6216\u8005\u66f4\u5177\u4f53\u7684\u6307\u5b9a\u8981\u6d4b\u8bd5\u7684\u90e8\u5206\uff0c\u53ef\u4ee5\u4f7f\u7528 testing.B.startTimer() \u548c testing.B.stopTimer() \u6765\u5f00\u59cb\u6216\u7ed3\u675f\u8ba1\u65f6\u5668\u3002\u57fa\u51c6\u6d4b\u8bd5\u53ea\u6709\u5728\u6240\u6709\u7684\u6d4b\u8bd5\u901a\u8fc7\u540e\u624d\u80fd\u8fd0\u884c\uff01 \u793a\u4f8b\uff1a14.18- benchmark_channels.go package main import ( \"fmt\" \"testing\" ) func main () { fmt . Println ( \" sync\" , testing . Benchmark ( BenchmarkChannelSync ). String ()) fmt . Println ( \"buffered\" , testing . Benchmark ( BenchmarkChannelBuffered ). String ()) } func BenchmarkChannelSync ( b * testing . B ) { ch := make ( chan int ) go func () { for i := 0 ; i < b . N ; i ++ { ch <- i } close ( ch ) }() for range ch { } } func BenchmarkChannelBuffered ( b * testing . B ) { ch := make ( chan int , 128 ) go func () { for i := 0 ; i < b . N ; i ++ { ch <- i } close ( ch ) }() for range ch { } } \u8f93\u51fa\uff1a Output:Windows: N Time 1 op Operations per sec sync 1000000 2443 ns/op --> 409 332 / s buffered 1000000 4850 ns/op --> 810 477 / s Linux: \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6f0f\u6876\u7b97\u6cd5 \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528\u901a\u9053\u5e76\u53d1\u8bbf\u95ee\u5bf9\u8c61","title":"14.16 \u5bf9 Go \u534f\u7a0b\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5"},{"location":"14.16/#1416-go","text":"\u5728 13.7 \u8282 \u6211\u4eec\u63d0\u5230\u4e86\u5728 Go \u8bed\u8a00\u4e2d\u5bf9\u4f60\u7684\u51fd\u6570\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5\u3002\u5728\u6b64\u6211\u4eec\u5c06\u5176\u5e94\u7528\u5230\u4e00\u4e2a\u7528\u534f\u7a0b\u5411\u901a\u9053\u5199\u5165\u6574\u6570\u518d\u8bfb\u51fa\u7684\u5b9e\u4f8b\u4e2d\u3002\u8fd9\u4e2a\u51fd\u6570\u5c06\u901a\u8fc7 testing.Benchmark() \u8c03\u7528 N \u6b21\uff08\u4f8b\u5982\uff1a N = 1,000,000 \uff09\uff0c BenchMarkResult \u6709\u4e00\u4e2a String() \u65b9\u6cd5\u6765\u8f93\u51fa\u5176\u7ed3\u679c\u3002 N \u7684\u503c\u5c06\u7531 gotest \u6765\u5224\u65ad\u5e76\u53d6\u5f97\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u6570\u5b57\uff0c\u4ee5\u83b7\u5f97\u5408\u7406\u7684\u57fa\u51c6\u6d4b\u8bd5\u7ed3\u679c\u3002\u5f53\u7136\u540c\u6837\u7684\u57fa\u51c6\u6d4b\u8bd5\u65b9\u6cd5\u4e5f\u9002\u7528\u4e8e\u666e\u901a\u51fd\u6570\u3002 \u5982\u679c\u4f60\u60f3\u6392\u9664\u6307\u5b9a\u90e8\u5206\u7684\u4ee3\u7801\u6216\u8005\u66f4\u5177\u4f53\u7684\u6307\u5b9a\u8981\u6d4b\u8bd5\u7684\u90e8\u5206\uff0c\u53ef\u4ee5\u4f7f\u7528 testing.B.startTimer() \u548c testing.B.stopTimer() \u6765\u5f00\u59cb\u6216\u7ed3\u675f\u8ba1\u65f6\u5668\u3002\u57fa\u51c6\u6d4b\u8bd5\u53ea\u6709\u5728\u6240\u6709\u7684\u6d4b\u8bd5\u901a\u8fc7\u540e\u624d\u80fd\u8fd0\u884c\uff01 \u793a\u4f8b\uff1a14.18- benchmark_channels.go package main import ( \"fmt\" \"testing\" ) func main () { fmt . Println ( \" sync\" , testing . Benchmark ( BenchmarkChannelSync ). String ()) fmt . Println ( \"buffered\" , testing . Benchmark ( BenchmarkChannelBuffered ). String ()) } func BenchmarkChannelSync ( b * testing . B ) { ch := make ( chan int ) go func () { for i := 0 ; i < b . N ; i ++ { ch <- i } close ( ch ) }() for range ch { } } func BenchmarkChannelBuffered ( b * testing . B ) { ch := make ( chan int , 128 ) go func () { for i := 0 ; i < b . N ; i ++ { ch <- i } close ( ch ) }() for range ch { } } \u8f93\u51fa\uff1a Output:Windows: N Time 1 op Operations per sec sync 1000000 2443 ns/op --> 409 332 / s buffered 1000000 4850 ns/op --> 810 477 / s Linux:","title":"14.16 \u5bf9 Go \u534f\u7a0b\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5"},{"location":"14.16/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6f0f\u6876\u7b97\u6cd5 \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528\u901a\u9053\u5e76\u53d1\u8bbf\u95ee\u5bf9\u8c61","title":"\u94fe\u63a5"},{"location":"14.17/","text":"14.17 \u4f7f\u7528\u901a\u9053\u5e76\u53d1\u8bbf\u95ee\u5bf9\u8c61 \u00b6 \u4e3a\u4e86\u4fdd\u62a4\u5bf9\u8c61\u88ab\u5e76\u53d1\u8bbf\u95ee\u4fee\u6539\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u534f\u7a0b\u5728\u540e\u53f0\u987a\u5e8f\u6267\u884c\u533f\u540d\u51fd\u6570\u6765\u66ff\u4ee3\u4f7f\u7528\u540c\u6b65\u4e92\u65a5\u9501\u3002\u5728\u4e0b\u9762\u7684\u7a0b\u5e8f\u4e2d\u6211\u4eec\u6709\u4e00\u4e2a\u7c7b\u578b Person \u4e2d\u5305\u542b\u4e00\u4e2a\u5b57\u6bb5 chF \uff0c\u8fd9\u662f\u4e00\u4e2a\u7528\u4e8e\u5b58\u653e\u533f\u540d\u51fd\u6570\u7684\u901a\u9053\u3002 \u8fd9\u4e2a\u7ed3\u6784\u5728\u6784\u9020\u51fd\u6570 NewPerson() \u4e2d\u521d\u59cb\u5316\u7684\u540c\u65f6\u4f1a\u542f\u52a8\u4e00\u4e2a\u540e\u53f0\u534f\u7a0b backend() \u3002 backend() \u65b9\u6cd5\u4f1a\u5728\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u4e2d\u6267\u884c chF \u4e2d\u653e\u7f6e\u7684\u6240\u6709\u51fd\u6570\uff0c\u6709\u6548\u5730\u5c06\u5b83\u4eec\u5e8f\u5217\u5316\u4ece\u800c\u63d0\u4f9b\u4e86\u5b89\u5168\u7684\u5e76\u53d1\u8bbf\u95ee\u3002\u66f4\u6539\u548c\u8bfb\u53d6 salary \u7684\u65b9\u6cd5\u4f1a\u901a\u8fc7\u5c06\u4e00\u4e2a\u533f\u540d\u51fd\u6570\u5199\u5165 chF \u901a\u9053\u4e2d\uff0c\u7136\u540e\u8ba9 backend() \u6309\u987a\u5e8f\u6267\u884c\u4ee5\u8fbe\u5230\u5176\u76ee\u7684\u3002\u9700\u6ce8\u610f\u7684\u662f Salary() \u65b9\u6cd5\u521b\u5efa\u7684\u95ed\u5305\u51fd\u6570\u662f\u5982\u4f55\u5c06 fChan \u901a\u9053\u5305\u542b\u5728\u5176\u4e2d\u7684\u3002 \u5f53\u7136\uff0c\u8fd9\u662f\u4e00\u4e2a\u7b80\u5316\u7684\u4f8b\u5b50\uff0c\u5b83\u4e0d\u5e94\u8be5\u88ab\u7528\u5728\u8fd9\u79cd\u6848\u4f8b\u4e0b\u3002\u4f46\u662f\u5b83\u5374\u5411\u6211\u4eec\u5c55\u793a\u4e86\u5728\u66f4\u590d\u6742\u7684\u573a\u666f\u4e2d\u8be5\u5982\u4f55\u89e3\u51b3\u8fd9\u79cd\u95ee\u9898\u3002 \u793a\u4f8b\uff1a14.19- conc_access.go package main import ( \"fmt\" \"strconv\" ) type Person struct { Name string salary float64 chF chan func () } func NewPerson ( name string , salary float64 ) * Person { p := & Person { name , salary , make ( chan func ())} go p . backend () return p } func ( p * Person ) backend () { for f := range p . chF { f () } } // Set salary. func ( p * Person ) SetSalary ( sal float64 ) { p . chF <- func () { p . salary = sal } } // Retrieve salary. func ( p * Person ) Salary () float64 { fChan := make ( chan float64 ) p . chF <- func () { fChan <- p . salary } return <- fChan } func ( p * Person ) String () string { return \"Person - name is: \" + p . Name + \" - salary is: \" + strconv . FormatFloat ( p . Salary (), 'f' , 2 , 64 ) } func main () { bs := NewPerson ( \"Smith Bill\" , 2500.5 ) fmt . Println ( bs ) bs . SetSalary ( 4000.25 ) fmt . Println ( \"Salary changed:\" ) fmt . Println ( bs ) } \u8f93\u51fa\uff1a Person - name is: Smith Bill - salary is: 2500.50 Salary changed: Person - name is: Smith Bill - salary is: 4000.25 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5bf9Go\u534f\u7a0b\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5 \u4e0b\u4e00\u7ae0\uff1a \u7f51\u7edc\uff0c\u6a21\u677f\u548c\u7f51\u9875\u5e94\u7528","title":"14.17 \u4f7f\u7528\u901a\u9053\u5e76\u53d1\u8bbf\u95ee\u5bf9\u8c61"},{"location":"14.17/#1417","text":"\u4e3a\u4e86\u4fdd\u62a4\u5bf9\u8c61\u88ab\u5e76\u53d1\u8bbf\u95ee\u4fee\u6539\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u534f\u7a0b\u5728\u540e\u53f0\u987a\u5e8f\u6267\u884c\u533f\u540d\u51fd\u6570\u6765\u66ff\u4ee3\u4f7f\u7528\u540c\u6b65\u4e92\u65a5\u9501\u3002\u5728\u4e0b\u9762\u7684\u7a0b\u5e8f\u4e2d\u6211\u4eec\u6709\u4e00\u4e2a\u7c7b\u578b Person \u4e2d\u5305\u542b\u4e00\u4e2a\u5b57\u6bb5 chF \uff0c\u8fd9\u662f\u4e00\u4e2a\u7528\u4e8e\u5b58\u653e\u533f\u540d\u51fd\u6570\u7684\u901a\u9053\u3002 \u8fd9\u4e2a\u7ed3\u6784\u5728\u6784\u9020\u51fd\u6570 NewPerson() \u4e2d\u521d\u59cb\u5316\u7684\u540c\u65f6\u4f1a\u542f\u52a8\u4e00\u4e2a\u540e\u53f0\u534f\u7a0b backend() \u3002 backend() \u65b9\u6cd5\u4f1a\u5728\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u4e2d\u6267\u884c chF \u4e2d\u653e\u7f6e\u7684\u6240\u6709\u51fd\u6570\uff0c\u6709\u6548\u5730\u5c06\u5b83\u4eec\u5e8f\u5217\u5316\u4ece\u800c\u63d0\u4f9b\u4e86\u5b89\u5168\u7684\u5e76\u53d1\u8bbf\u95ee\u3002\u66f4\u6539\u548c\u8bfb\u53d6 salary \u7684\u65b9\u6cd5\u4f1a\u901a\u8fc7\u5c06\u4e00\u4e2a\u533f\u540d\u51fd\u6570\u5199\u5165 chF \u901a\u9053\u4e2d\uff0c\u7136\u540e\u8ba9 backend() \u6309\u987a\u5e8f\u6267\u884c\u4ee5\u8fbe\u5230\u5176\u76ee\u7684\u3002\u9700\u6ce8\u610f\u7684\u662f Salary() \u65b9\u6cd5\u521b\u5efa\u7684\u95ed\u5305\u51fd\u6570\u662f\u5982\u4f55\u5c06 fChan \u901a\u9053\u5305\u542b\u5728\u5176\u4e2d\u7684\u3002 \u5f53\u7136\uff0c\u8fd9\u662f\u4e00\u4e2a\u7b80\u5316\u7684\u4f8b\u5b50\uff0c\u5b83\u4e0d\u5e94\u8be5\u88ab\u7528\u5728\u8fd9\u79cd\u6848\u4f8b\u4e0b\u3002\u4f46\u662f\u5b83\u5374\u5411\u6211\u4eec\u5c55\u793a\u4e86\u5728\u66f4\u590d\u6742\u7684\u573a\u666f\u4e2d\u8be5\u5982\u4f55\u89e3\u51b3\u8fd9\u79cd\u95ee\u9898\u3002 \u793a\u4f8b\uff1a14.19- conc_access.go package main import ( \"fmt\" \"strconv\" ) type Person struct { Name string salary float64 chF chan func () } func NewPerson ( name string , salary float64 ) * Person { p := & Person { name , salary , make ( chan func ())} go p . backend () return p } func ( p * Person ) backend () { for f := range p . chF { f () } } // Set salary. func ( p * Person ) SetSalary ( sal float64 ) { p . chF <- func () { p . salary = sal } } // Retrieve salary. func ( p * Person ) Salary () float64 { fChan := make ( chan float64 ) p . chF <- func () { fChan <- p . salary } return <- fChan } func ( p * Person ) String () string { return \"Person - name is: \" + p . Name + \" - salary is: \" + strconv . FormatFloat ( p . Salary (), 'f' , 2 , 64 ) } func main () { bs := NewPerson ( \"Smith Bill\" , 2500.5 ) fmt . Println ( bs ) bs . SetSalary ( 4000.25 ) fmt . Println ( \"Salary changed:\" ) fmt . Println ( bs ) } \u8f93\u51fa\uff1a Person - name is: Smith Bill - salary is: 2500.50 Salary changed: Person - name is: Smith Bill - salary is: 4000.25","title":"14.17 \u4f7f\u7528\u901a\u9053\u5e76\u53d1\u8bbf\u95ee\u5bf9\u8c61"},{"location":"14.17/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5bf9Go\u534f\u7a0b\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5 \u4e0b\u4e00\u7ae0\uff1a \u7f51\u7edc\uff0c\u6a21\u677f\u548c\u7f51\u9875\u5e94\u7528","title":"\u94fe\u63a5"},{"location":"14.2/","text":"14.2 \u534f\u7a0b\u95f4\u7684\u4fe1\u9053 \u00b6 14.2.1 \u6982\u5ff5 \u00b6 \u5728\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u534f\u7a0b\u662f\u72ec\u7acb\u6267\u884c\u7684\uff0c\u4ed6\u4eec\u4e4b\u95f4\u6ca1\u6709\u901a\u4fe1\u3002\u4ed6\u4eec\u5fc5\u987b\u901a\u4fe1\u624d\u4f1a\u53d8\u5f97\u66f4\u6709\u7528\uff1a\u5f7c\u6b64\u4e4b\u95f4\u53d1\u9001\u548c\u63a5\u6536\u4fe1\u606f\u5e76\u4e14\u534f\u8c03/\u540c\u6b65\u4ed6\u4eec\u7684\u5de5\u4f5c\u3002\u534f\u7a0b\u53ef\u4ee5\u4f7f\u7528\u5171\u4eab\u53d8\u91cf\u6765\u901a\u4fe1\uff0c\u4f46\u662f\u5f88\u4e0d\u63d0\u5021\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u8fd9\u79cd\u65b9\u5f0f\u7ed9\u6240\u6709\u7684\u5171\u4eab\u5185\u5b58\u7684\u591a\u7ebf\u7a0b\u90fd\u5e26\u6765\u4e86\u56f0\u96be\u3002 \u800c Go \u6709\u4e00\u79cd\u7279\u6b8a\u7684\u7c7b\u578b\uff0c \u901a\u9053\uff08channel\uff09 \uff0c\u5c31\u50cf\u4e00\u4e2a\u53ef\u4ee5\u7528\u4e8e\u53d1\u9001\u7c7b\u578b\u5316\u6570\u636e\u7684\u7ba1\u9053\uff0c\u7531\u5176\u8d1f\u8d23\u534f\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1\uff0c\u4ece\u800c\u907f\u5f00\u6240\u6709\u7531\u5171\u4eab\u5185\u5b58\u5bfc\u81f4\u7684\u9677\u9631\uff1b\u8fd9\u79cd\u901a\u8fc7\u901a\u9053\u8fdb\u884c\u901a\u4fe1\u7684\u65b9\u5f0f\u4fdd\u8bc1\u4e86\u540c\u6b65\u6027\u3002\u6570\u636e\u5728\u901a\u9053\u4e2d\u8fdb\u884c\u4f20\u9012\uff1a \u5728\u4efb\u4f55\u7ed9\u5b9a\u65f6\u95f4\uff0c\u4e00\u4e2a\u6570\u636e\u88ab\u8bbe\u8ba1\u4e3a\u53ea\u6709\u4e00\u4e2a\u534f\u7a0b\u53ef\u4ee5\u5bf9\u5176\u8bbf\u95ee\uff0c\u6240\u4ee5\u4e0d\u4f1a\u53d1\u751f\u6570\u636e\u7ade\u4e89\u3002 \u6570\u636e\u7684\u6240\u6709\u6743\uff08\u53ef\u4ee5\u8bfb\u5199\u6570\u636e\u7684\u80fd\u529b\uff09\u4e5f\u56e0\u6b64\u88ab\u4f20\u9012\u3002 \u5de5\u5382\u7684\u4f20\u9001\u5e26\u662f\u4e2a\u5f88\u6709\u7528\u7684\u4f8b\u5b50\u3002\u4e00\u4e2a\u673a\u5668\uff08\u751f\u4ea7\u8005\u534f\u7a0b\uff09\u5728\u4f20\u9001\u5e26\u4e0a\u653e\u7f6e\u7269\u54c1\uff0c\u53e6\u5916\u4e00\u4e2a\u673a\u5668\uff08\u6d88\u8d39\u8005\u534f\u7a0b\uff09\u62ff\u5230\u7269\u54c1\u5e76\u6253\u5305\u3002 \u901a\u9053\u670d\u52a1\u4e8e\u901a\u4fe1\u7684\u4e24\u4e2a\u76ee\u7684\uff1a\u503c\u7684\u4ea4\u6362\uff0c\u540c\u6b65\u7684\uff0c\u4fdd\u8bc1\u4e86\u4e24\u4e2a\u8ba1\u7b97\uff08\u534f\u7a0b\uff09\u4efb\u4f55\u65f6\u5019\u90fd\u662f\u53ef\u77e5\u72b6\u6001\u3002 \u901a\u5e38\u4f7f\u7528\u8fd9\u6837\u7684\u683c\u5f0f\u6765\u58f0\u660e\u901a\u9053\uff1a var identifier chan datatype \u672a\u521d\u59cb\u5316\u7684\u901a\u9053\u7684\u503c\u662f nil \u3002 \u6240\u4ee5\u901a\u9053\u53ea\u80fd\u4f20\u8f93\u4e00\u79cd\u7c7b\u578b\u7684\u6570\u636e\uff0c\u6bd4\u5982 chan int \u6216\u8005 chan string \uff0c\u6240\u6709\u7684\u7c7b\u578b\u90fd\u53ef\u4ee5\u7528\u4e8e\u901a\u9053\uff0c\u7a7a\u63a5\u53e3 interface{} \u4e5f\u53ef\u4ee5\uff0c\u751a\u81f3\u53ef\u4ee5\uff08\u6709\u65f6\u975e\u5e38\u6709\u7528\uff09\u521b\u5efa\u901a\u9053\u7684\u901a\u9053\u3002 \u901a\u9053\u5b9e\u9645\u4e0a\u662f\u7c7b\u578b\u5316\u6d88\u606f\u7684\u961f\u5217\uff1a\u4f7f\u6570\u636e\u5f97\u4ee5\u4f20\u8f93\u3002\u5b83\u662f\u5148\u8fdb\u5148\u51fa(FIFO) \u7684\u7ed3\u6784\u6240\u4ee5\u53ef\u4ee5\u4fdd\u8bc1\u53d1\u9001\u7ed9\u4ed6\u4eec\u7684\u5143\u7d20\u7684\u987a\u5e8f\uff08\u6709\u4e9b\u4eba\u77e5\u9053\uff0c\u901a\u9053\u53ef\u4ee5\u6bd4\u4f5c Unix shells \u4e2d\u7684\u53cc\u5411\u7ba1\u9053 (two-way pipe) \uff09\u3002\u901a\u9053\u4e5f\u662f\u5f15\u7528\u7c7b\u578b\uff0c\u6240\u4ee5\u6211\u4eec\u4f7f\u7528 make() \u51fd\u6570\u6765\u7ed9\u5b83\u5206\u914d\u5185\u5b58\u3002\u8fd9\u91cc\u5148\u58f0\u660e\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\u901a\u9053 ch1\uff0c\u7136\u540e\u521b\u5efa\u4e86\u5b83\uff08\u5b9e\u4f8b\u5316\uff09\uff1a var ch1 chan string ch1 = make ( chan string ) \u5f53\u7136\u53ef\u4ee5\u66f4\u77ed\uff1a ch1 := make(chan string) \u3002 \u8fd9\u91cc\u6211\u4eec\u6784\u5efa\u4e00\u4e2a int \u901a\u9053\u7684\u901a\u9053\uff1a chanOfChans := make(chan chan int) \u3002 \u6216\u8005\u51fd\u6570\u901a\u9053\uff1a funcChan := make(chan func()) \uff08\u76f8\u5173\u793a\u4f8b\u8bf7\u770b\u7b2c 14.17 \u8282\uff09\u3002 \u6240\u4ee5\u901a\u9053\u662f\u7b2c\u4e00\u7c7b\u5bf9\u8c61\uff1a\u53ef\u4ee5\u5b58\u50a8\u5728\u53d8\u91cf\u4e2d\uff0c\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570\u4f20\u9012\uff0c\u4ece\u51fd\u6570\u8fd4\u56de\u4ee5\u53ca\u901a\u8fc7\u901a\u9053\u53d1\u9001\u5b83\u4eec\u81ea\u8eab\u3002\u53e6\u5916\u5b83\u4eec\u662f\u7c7b\u578b\u5316\u7684\uff0c\u5141\u8bb8\u7c7b\u578b\u68c0\u67e5\uff0c\u6bd4\u5982\u5c1d\u8bd5\u4f7f\u7528\u6574\u6570\u901a\u9053\u53d1\u9001\u4e00\u4e2a\u6307\u9488\u3002 14.2.2 \u901a\u4fe1\u64cd\u4f5c\u7b26 <- \u00b6 \u8fd9\u4e2a\u64cd\u4f5c\u7b26\u76f4\u89c2\u7684\u6807\u793a\u4e86\u6570\u636e\u7684\u4f20\u8f93\uff1a\u4fe1\u606f\u6309\u7167\u7bad\u5934\u7684\u65b9\u5411\u6d41\u52a8\u3002 \u6d41\u5411\u901a\u9053\uff08\u53d1\u9001\uff09 ch <- int1 \u8868\u793a\uff1a\u7528\u901a\u9053 ch \u53d1\u9001\u53d8\u91cf int1 \uff08\u53cc\u76ee\u8fd0\u7b97\u7b26\uff0c\u4e2d\u7f00 = \u53d1\u9001\uff09 \u4ece\u901a\u9053\u6d41\u51fa\uff08\u63a5\u6536\uff09\uff0c\u4e09\u79cd\u65b9\u5f0f\uff1a int2 = <- ch \u8868\u793a\uff1a\u53d8\u91cf int2 \u4ece\u901a\u9053 ch\uff08\u4e00\u5143\u8fd0\u7b97\u7684\u524d\u7f00\u64cd\u4f5c\u7b26\uff0c\u524d\u7f00 = \u63a5\u6536\uff09\u63a5\u6536\u6570\u636e\uff08\u83b7\u53d6\u65b0\u503c\uff09\uff1b\u5047\u8bbe int2 \u5df2\u7ecf\u58f0\u660e\u8fc7\u4e86\uff0c\u5982\u679c\u6ca1\u6709\u7684\u8bdd\u53ef\u4ee5\u5199\u6210\uff1a int2 := <- ch \u3002 <- ch \u53ef\u4ee5\u5355\u72ec\u8c03\u7528\u83b7\u53d6\u901a\u9053\u7684\uff08\u4e0b\u4e00\u4e2a\uff09\u503c\uff0c\u5f53\u524d\u503c\u4f1a\u88ab\u4e22\u5f03\uff0c\u4f46\u662f\u53ef\u4ee5\u7528\u6765\u9a8c\u8bc1\uff0c\u6240\u4ee5\u4ee5\u4e0b\u4ee3\u7801\u662f\u5408\u6cd5\u7684\uff1a if <- ch != 1000 { ... } \u540c\u4e00\u4e2a\u64cd\u4f5c\u7b26 <- \u65e2\u7528\u4e8e**\u53d1\u9001**\u4e5f\u7528\u4e8e**\u63a5\u6536**\uff0c\u4f46 Go \u4f1a\u6839\u636e\u64cd\u4f5c\u5bf9\u8c61\u5f04\u660e\u767d\u8be5\u5e72\u4ec0\u4e48 \u3002\u867d\u975e\u5f3a\u5236\u8981\u6c42\uff0c\u4f46\u4e3a\u4e86\u53ef\u8bfb\u6027\u901a\u9053\u7684\u547d\u540d\u901a\u5e38\u4ee5 ch \u5f00\u5934\u6216\u8005\u5305\u542b chan \u3002\u901a\u9053\u7684\u53d1\u9001\u548c\u63a5\u6536\u90fd\u662f\u539f\u5b50\u64cd\u4f5c\uff1a\u5b83\u4eec\u603b\u662f\u4e92\u4e0d\u5e72\u6270\u5730\u5b8c\u6210\u3002\u4e0b\u9762\u7684\u793a\u4f8b\u5c55\u793a\u4e86\u901a\u4fe1\u64cd\u4f5c\u7b26\u7684\u4f7f\u7528\u3002 \u793a\u4f8b 14.2- goroutine2.go package main import ( \"fmt\" \"time\" ) func main () { ch := make ( chan string ) go sendData ( ch ) go getData ( ch ) time . Sleep ( 1e9 ) } func sendData ( ch chan string ) { ch <- \"Washington\" ch <- \"Tripoli\" ch <- \"London\" ch <- \"Beijing\" ch <- \"Tokyo\" } func getData ( ch chan string ) { var input string // time.Sleep(2e9) for { input = <- ch fmt . Printf ( \"%s \" , input ) } } \u8f93\u51fa\uff1a Washington Tripoli London Beijing tokyo main() \u51fd\u6570\u4e2d\u542f\u52a8\u4e86\u4e24\u4e2a\u534f\u7a0b\uff1a sendData() \u901a\u8fc7\u901a\u9053 ch \u53d1\u9001\u4e86 5 \u4e2a\u5b57\u7b26\u4e32\uff0c getData() \u6309\u987a\u5e8f\u63a5\u6536\u5b83\u4eec\u5e76\u6253\u5370\u51fa\u6765\u3002 \u5982\u679c 2 \u4e2a\u534f\u7a0b\u9700\u8981\u901a\u4fe1\uff0c\u4f60\u5fc5\u987b\u7ed9\u4ed6\u4eec\u540c\u4e00\u4e2a\u901a\u9053\u4f5c\u4e3a\u53c2\u6570\u624d\u884c\u3002 \u5c1d\u8bd5\u4e00\u4e0b\u5982\u679c\u6ce8\u91ca\u6389 time.Sleep(1e9) \u4f1a\u5982\u4f55\u3002 \u6211\u4eec\u53d1\u73b0\u534f\u7a0b\u4e4b\u95f4\u7684\u540c\u6b65\u975e\u5e38\u91cd\u8981\uff1a main() \u7b49\u5f85\u4e86 1 \u79d2\u8ba9\u4e24\u4e2a\u534f\u7a0b\u5b8c\u6210\uff0c\u5982\u679c\u4e0d\u8fd9\u6837\uff0c sendData() \u5c31\u6ca1\u6709\u673a\u4f1a\u8f93\u51fa\u3002 getData() \u4f7f\u7528\u4e86\u65e0\u9650\u5faa\u73af\uff1a\u5b83\u968f\u7740 sendData() \u7684\u53d1\u9001\u5b8c\u6210\u548c ch \u53d8\u7a7a\u4e5f\u7ed3\u675f\u4e86\u3002 \u5982\u679c\u6211\u4eec\u79fb\u9664\u4e00\u4e2a\u6216\u6240\u6709 go \u5173\u952e\u5b57\uff0c\u7a0b\u5e8f\u65e0\u6cd5\u8fd0\u884c\uff0cGo \u8fd0\u884c\u65f6\u4f1a\u629b\u51fa panic\uff1a ---- Error run E:/Go/Goboek/code examples/chapter 14/goroutine2.exe with code Crashed ---- Program exited with code -2147483645: panic: all goroutines are asleep-deadlock! \u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\uff1f\u8fd0\u884c\u65f6 (runtime) \u4f1a\u68c0\u67e5\u6240\u6709\u7684\u534f\u7a0b\uff08\u50cf\u672c\u4f8b\u4e2d\u53ea\u6709\u4e00\u4e2a\uff09\u662f\u5426\u5728\u7b49\u5f85\u7740\u4ec0\u4e48\u4e1c\u897f\uff08\u53ef\u4ece\u67d0\u4e2a\u901a\u9053\u8bfb\u53d6\u6216\u8005\u5199\u5165\u67d0\u4e2a\u901a\u9053\uff09\uff0c\u8fd9\u610f\u5473\u7740\u7a0b\u5e8f\u5c06\u65e0\u6cd5\u7ee7\u7eed\u6267\u884c\u3002\u8fd9\u662f\u6b7b\u9501 (deadlock) \u7684\u4e00\u79cd\u5f62\u5f0f\uff0c\u800c\u8fd0\u884c\u65f6 (runtime) \u53ef\u4ee5\u4e3a\u6211\u4eec\u68c0\u6d4b\u5230\u8fd9\u79cd\u60c5\u51b5\u3002 \u6ce8\u610f\uff1a\u4e0d\u8981\u4f7f\u7528\u6253\u5370\u72b6\u6001\u6765\u8868\u660e\u901a\u9053\u7684\u53d1\u9001\u548c\u63a5\u6536\u987a\u5e8f\uff1a\u7531\u4e8e\u6253\u5370\u72b6\u6001\u548c\u901a\u9053\u5b9e\u9645\u53d1\u751f\u8bfb\u5199\u7684\u65f6\u95f4\u5ef6\u8fdf\u4f1a\u5bfc\u81f4\u548c\u771f\u5b9e\u53d1\u751f\u7684\u987a\u5e8f\u4e0d\u540c\u3002 \u7ec3\u4e60 14.4\uff1a\u89e3\u91ca\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u5982\u679c\u5728\u51fd\u6570 getData() \u7684\u4e00\u5f00\u59cb\u63d2\u5165 time.Sleep(2e9) \uff0c\u4e0d\u4f1a\u51fa\u73b0\u9519\u8bef\u4f46\u4e5f\u6ca1\u6709\u8f93\u51fa\u5462\u3002 14.2.3 \u901a\u9053\u963b\u585e \u00b6 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u901a\u4fe1\u662f\u540c\u6b65\u4e14\u65e0\u7f13\u51b2\u7684\uff1a\u5728\u6709\u63a5\u53d7\u8005\u63a5\u6536\u6570\u636e\u4e4b\u524d\uff0c\u53d1\u9001\u4e0d\u4f1a\u7ed3\u675f\u3002\u53ef\u4ee5\u60f3\u8c61\u4e00\u4e2a\u65e0\u7f13\u51b2\u7684\u901a\u9053\u5728\u6ca1\u6709\u7a7a\u95f4\u6765\u4fdd\u5b58\u6570\u636e\u7684\u65f6\u5019\uff1a\u5fc5\u987b\u8981\u4e00\u4e2a\u63a5\u6536\u8005\u51c6\u5907\u597d\u63a5\u6536\u901a\u9053\u7684\u6570\u636e\u7136\u540e\u53d1\u9001\u8005\u53ef\u4ee5\u76f4\u63a5\u628a\u6570\u636e\u53d1\u9001\u7ed9\u63a5\u6536\u8005\u3002\u6240\u4ee5\u901a\u9053\u7684\u53d1\u9001/\u63a5\u6536\u64cd\u4f5c\u5728\u5bf9\u65b9\u51c6\u5907\u597d\u4e4b\u524d\u662f\u963b\u585e\u7684\uff1a 1\uff09\u5bf9\u4e8e\u540c\u4e00\u4e2a\u901a\u9053\uff0c\u53d1\u9001\u64cd\u4f5c\uff08\u534f\u7a0b\u6216\u8005\u51fd\u6570\u4e2d\u7684\uff09\uff0c\u5728\u63a5\u6536\u8005\u51c6\u5907\u597d\u4e4b\u524d\u662f\u963b\u585e\u7684\uff1a\u5982\u679c ch \u4e2d\u7684\u6570\u636e\u65e0\u4eba\u63a5\u6536\uff0c\u5c31\u65e0\u6cd5\u518d\u7ed9\u901a\u9053\u4f20\u5165\u5176\u4ed6\u6570\u636e\uff1a\u65b0\u7684\u8f93\u5165\u65e0\u6cd5\u5728\u901a\u9053\u975e\u7a7a\u7684\u60c5\u51b5\u4e0b\u4f20\u5165\u3002\u6240\u4ee5\u53d1\u9001\u64cd\u4f5c\u4f1a\u7b49\u5f85 ch \u518d\u6b21\u53d8\u4e3a\u53ef\u7528\u72b6\u6001\uff1a\u5c31\u662f\u901a\u9053\u503c\u88ab\u63a5\u6536\u65f6\uff08\u53ef\u4ee5\u4f20\u5165\u53d8\u91cf\uff09\u3002 2\uff09\u5bf9\u4e8e\u540c\u4e00\u4e2a\u901a\u9053\uff0c\u63a5\u6536\u64cd\u4f5c\u662f\u963b\u585e\u7684\uff08\u534f\u7a0b\u6216\u51fd\u6570\u4e2d\u7684\uff09\uff0c\u76f4\u5230\u53d1\u9001\u8005\u53ef\u7528\uff1a\u5982\u679c\u901a\u9053\u4e2d\u6ca1\u6709\u6570\u636e\uff0c\u63a5\u6536\u8005\u5c31\u963b\u585e\u4e86\u3002 \u5c3d\u7ba1\u8fd9\u770b\u4e0a\u53bb\u662f\u975e\u5e38\u4e25\u683c\u7684\u7ea6\u675f\uff0c\u5b9e\u9645\u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u5de5\u4f5c\u7684\u5f88\u4e0d\u9519\u3002 \u7a0b\u5e8f channel_block.go \u9a8c\u8bc1\u4e86\u4ee5\u4e0a\u7406\u8bba\uff0c\u4e00\u4e2a\u534f\u7a0b\u5728\u65e0\u9650\u5faa\u73af\u4e2d\u7ed9\u901a\u9053\u53d1\u9001\u6574\u6570\u6570\u636e\u3002\u4e0d\u8fc7\u56e0\u4e3a\u6ca1\u6709\u63a5\u6536\u8005\uff0c\u53ea\u8f93\u51fa\u4e86\u4e00\u4e2a\u6570\u5b57 0 \u3002 \u793a\u4f8b 14.3- channel_block.go package main import \"fmt\" func main () { ch1 := make ( chan int ) go pump ( ch1 ) // pump hangs fmt . Println ( <- ch1 ) // prints only 0 } func pump ( ch chan int ) { for i := 0 ; ; i ++ { ch <- i } } \u8f93\u51fa\uff1a 0 pump() \u51fd\u6570\u4e3a\u901a\u9053\u63d0\u4f9b\u6570\u503c\uff0c\u4e5f\u88ab\u53eb\u505a\u751f\u4ea7\u8005\u3002 \u4e3a\u901a\u9053\u89e3\u9664\u963b\u585e\u5b9a\u4e49\u4e86 suck() \u51fd\u6570\u6765\u5728\u65e0\u9650\u5faa\u73af\u4e2d\u8bfb\u53d6\u901a\u9053\uff0c\u53c2\u89c1\u793a\u4f8b 14.4- channel_block2.go \uff1a func suck ( ch chan int ) { for { fmt . Println ( <- ch ) } } \u5728 main() \u4e2d\u4f7f\u7528\u534f\u7a0b\u5f00\u59cb\u5b83\uff1a go pump ( ch1 ) go suck ( ch1 ) time . Sleep ( 1e9 ) \u7ed9\u7a0b\u5e8f 1 \u79d2\u7684\u65f6\u95f4\u6765\u8fd0\u884c\uff1a\u8f93\u51fa\u4e86\u4e0a\u4e07\u4e2a\u6574\u6570\u3002 \u7ec3\u4e60 14.1\uff1a channel_block3.go \uff1a\u5199\u4e00\u4e2a\u901a\u9053\u8bc1\u660e\u5b83\u7684\u963b\u585e\u6027\uff0c\u5f00\u542f\u4e00\u4e2a\u534f\u7a0b\u63a5\u6536\u901a\u9053\u7684\u6570\u636e\uff0c\u6301\u7eed 15 \u79d2\uff0c\u7136\u540e\u7ed9\u901a\u9053\u653e\u5165\u4e00\u4e2a\u503c\u3002\u5728\u4e0d\u540c\u7684\u9636\u6bb5\u6253\u5370\u6d88\u606f\u5e76\u89c2\u5bdf\u8f93\u51fa\u3002 14.2.4 \u901a\u8fc7\u4e00\u4e2a\uff08\u6216\u591a\u4e2a\uff09\u901a\u9053\u4ea4\u6362\u6570\u636e\u8fdb\u884c\u534f\u7a0b\u540c\u6b65\u3002 \u00b6 \u901a\u4fe1\u662f\u4e00\u79cd\u540c\u6b65\u5f62\u5f0f\uff1a\u901a\u8fc7\u901a\u9053\uff0c\u4e24\u4e2a\u534f\u7a0b\u5728\u901a\u4fe1\uff08\u534f\u7a0b\u4f1a\u5408\uff09\u4e2d\u67d0\u523b\u540c\u6b65\u4ea4\u6362\u6570\u636e\u3002\u65e0\u7f13\u51b2\u901a\u9053\u6210\u4e3a\u4e86\u591a\u4e2a\u534f\u7a0b\u540c\u6b65\u7684\u5b8c\u7f8e\u5de5\u5177\u3002 \u751a\u81f3\u53ef\u4ee5\u5728\u901a\u9053\u4e24\u7aef\u4e92\u76f8\u963b\u585e\u5bf9\u65b9\uff0c\u5f62\u6210\u4e86\u53eb\u505a**\u6b7b\u9501**\u7684\u72b6\u6001\u3002Go \u8fd0\u884c\u65f6\u4f1a\u68c0\u67e5\u5e76 panic() \uff0c\u505c\u6b62\u7a0b\u5e8f\u3002\u6b7b\u9501\u51e0\u4e4e\u5b8c\u5168\u662f\u7531\u7cdf\u7cd5\u7684\u8bbe\u8ba1\u5bfc\u81f4\u7684\u3002 \u65e0\u7f13\u51b2\u901a\u9053\u4f1a\u88ab\u963b\u585e\u3002\u8bbe\u8ba1\u65e0\u963b\u585e\u7684\u7a0b\u5e8f\u53ef\u4ee5\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u6216\u8005\u4f7f\u7528\u5e26\u7f13\u51b2\u7684\u901a\u9053\u3002 \u7ec3\u4e60 14.2\uff1a blocking.go \u89e3\u91ca\u4e3a\u4ec0\u4e48\u4e0b\u8fb9\u8fd9\u4e2a\u7a0b\u5e8f\u4f1a\u5bfc\u81f4 panic\uff1a\u6240\u6709\u7684\u534f\u7a0b\u90fd\u4f11\u7720\u4e86 - \u6b7b\u9501\uff01 package main import ( \"fmt\" ) func f1 ( in chan int ) { fmt . Println ( <- in ) } func main () { out := make ( chan int ) out <- 2 go f1 ( out ) } 14.2.5 \u540c\u6b65\u901a\u9053-\u4f7f\u7528\u5e26\u7f13\u51b2\u7684\u901a\u9053 \u00b6 \u4e00\u4e2a\u65e0\u7f13\u51b2\u901a\u9053\u53ea\u80fd\u5305\u542b 1 \u4e2a\u5143\u7d20\uff0c\u6709\u65f6\u663e\u5f97\u5f88\u5c40\u9650\u3002\u6211\u4eec\u7ed9\u901a\u9053\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7f13\u5b58\uff0c\u53ef\u4ee5\u5728\u6269\u5c55\u7684 make \u547d\u4ee4\u4e2d\u8bbe\u7f6e\u5b83\u7684\u5bb9\u91cf\uff0c\u5982\u4e0b\uff1a buf := 100 ch1 := make ( chan string , buf ) buf \u662f\u901a\u9053\u53ef\u4ee5\u540c\u65f6\u5bb9\u7eb3\u7684\u5143\u7d20\uff08\u8fd9\u91cc\u662f string \uff09\u4e2a\u6570 \u5728\u7f13\u51b2\u6ee1\u8f7d\uff08\u7f13\u51b2\u88ab\u5168\u90e8\u4f7f\u7528\uff09\u4e4b\u524d\uff0c\u7ed9\u4e00\u4e2a\u5e26\u7f13\u51b2\u7684\u901a\u9053\u53d1\u9001\u6570\u636e\u662f\u4e0d\u4f1a\u963b\u585e\u7684\uff0c\u800c\u4ece\u901a\u9053\u8bfb\u53d6\u6570\u636e\u4e5f\u4e0d\u4f1a\u963b\u585e\uff0c\u76f4\u5230\u7f13\u51b2\u7a7a\u4e86\u3002 \u7f13\u51b2\u5bb9\u91cf\u548c\u7c7b\u578b\u65e0\u5173\uff0c\u6240\u4ee5\u53ef\u4ee5\uff08\u5c3d\u7ba1\u53ef\u80fd\u5bfc\u81f4\u5371\u9669\uff09\u7ed9\u4e00\u4e9b\u901a\u9053\u8bbe\u7f6e\u4e0d\u540c\u7684\u5bb9\u91cf\uff0c\u53ea\u8981\u4ed6\u4eec\u62e5\u6709\u540c\u6837\u7684\u5143\u7d20\u7c7b\u578b\u3002\u5185\u7f6e\u7684 cap() \u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u7f13\u51b2\u533a\u7684\u5bb9\u91cf\u3002 \u5982\u679c\u5bb9\u91cf\u5927\u4e8e 0\uff0c\u901a\u9053\u5c31\u662f\u5f02\u6b65\u7684\u4e86\uff1a\u7f13\u51b2\u6ee1\u8f7d\uff08\u53d1\u9001\uff09\u6216\u53d8\u7a7a\uff08\u63a5\u6536\uff09\u4e4b\u524d\u901a\u4fe1\u4e0d\u4f1a\u963b\u585e\uff0c\u5143\u7d20\u4f1a\u6309\u7167\u53d1\u9001\u7684\u987a\u5e8f\u88ab\u63a5\u6536\u3002\u5982\u679c\u5bb9\u91cf\u662f 0 \u6216\u8005\u672a\u8bbe\u7f6e\uff0c\u901a\u4fe1\u4ec5\u5728\u6536\u53d1\u53cc\u65b9\u51c6\u5907\u597d\u7684\u60c5\u51b5\u4e0b\u624d\u53ef\u4ee5\u6210\u529f\u3002 \u540c\u6b65\uff1a ch :=make(chan type, value) value == 0 -> synchronous , unbuffered \uff08\u963b\u585e\uff09 value > 0 -> asynchronous , buffered\uff08\u975e\u963b\u585e\uff09\u53d6\u51b3\u4e8e value \u5143\u7d20 \u82e5\u4f7f\u7528\u901a\u9053\u7684\u7f13\u51b2\uff0c\u4f60\u7684\u7a0b\u5e8f\u4f1a\u5728\u201c\u8bf7\u6c42\u201d\u6fc0\u589e\u7684\u65f6\u5019\u8868\u73b0\u66f4\u597d\uff1a\u66f4\u5177\u5f39\u6027\uff0c\u4e13\u4e1a\u672f\u8bed\u53eb\uff1a\u66f4\u5177\u6709\u4f38\u7f29\u6027(scalable)\u3002\u5728\u8bbe\u8ba1\u7b97\u6cd5\u65f6\u9996\u5148\u8003\u8651\u4f7f\u7528\u65e0\u7f13\u51b2\u901a\u9053\uff0c\u53ea\u5728\u4e0d\u786e\u5b9a\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u7f13\u51b2\u3002 \u7ec3\u4e60 14.3\uff1a channel_buffer.go \uff1a\u7ed9 channel_block3.go \u7684\u901a\u9053\u589e\u52a0\u7f13\u51b2\u5e76\u89c2\u5bdf\u8f93\u51fa\u6709\u4f55\u4e0d\u540c\u3002 14.2.6 \u534f\u7a0b\u4e2d\u7528\u901a\u9053\u8f93\u51fa\u7ed3\u679c \u00b6 \u4e3a\u4e86\u77e5\u9053\u8ba1\u7b97\u4f55\u65f6\u5b8c\u6210\uff0c\u53ef\u4ee5\u901a\u8fc7\u4fe1\u9053\u56de\u62a5\u3002\u5728\u4f8b\u5b50 go sum(bigArray) \u4e2d\uff0c\u8981\u8fd9\u6837\u5199\uff1a ch := make ( chan int ) go sum ( bigArray , ch ) // bigArray puts the calculated sum on ch // .. do something else for a while sum := <- ch // wait for, and retrieve the sum \u4e5f\u53ef\u4ee5\u4f7f\u7528\u901a\u9053\u6765\u8fbe\u5230\u540c\u6b65\u7684\u76ee\u7684\uff0c\u8fd9\u4e2a\u5f88\u6709\u6548\u7684\u7528\u6cd5\u5728\u4f20\u7edf\u8ba1\u7b97\u673a\u4e2d\u79f0\u4e3a\u4fe1\u53f7\u91cf (semaphore)\u3002\u6216\u8005\u6362\u4e2a\u65b9\u5f0f\uff1a\u901a\u8fc7\u901a\u9053\u53d1\u9001\u4fe1\u53f7\u544a\u77e5\u5904\u7406\u5df2\u7ecf\u5b8c\u6210\uff08\u5728\u534f\u7a0b\u4e2d\uff09\u3002 \u5728\u5176\u4ed6\u534f\u7a0b\u8fd0\u884c\u65f6\u8ba9 main \u7a0b\u5e8f\u65e0\u9650\u963b\u585e\u7684\u901a\u5e38\u505a\u6cd5\u662f\u5728 main() \u51fd\u6570\u7684\u6700\u540e\u653e\u7f6e\u4e00\u4e2a select {} \u3002 \u4e5f\u53ef\u4ee5\u4f7f\u7528\u901a\u9053\u8ba9 main \u7a0b\u5e8f\u7b49\u5f85\u534f\u7a0b\u5b8c\u6210\uff0c\u5c31\u662f\u6240\u8c13\u7684\u4fe1\u53f7\u91cf\u6a21\u5f0f\uff0c\u6211\u4eec\u4f1a\u5728\u63a5\u4e0b\u6765\u7684\u90e8\u5206\u8ba8\u8bba\u3002 14.2.7 \u4fe1\u53f7\u91cf\u6a21\u5f0f \u00b6 \u4e0b\u8fb9\u7684\u7247\u6bb5\u9610\u660e\uff1a\u534f\u7a0b\u901a\u8fc7\u5728\u901a\u9053 ch \u4e2d\u653e\u7f6e\u4e00\u4e2a\u503c\u6765\u5904\u7406\u7ed3\u675f\u7684\u4fe1\u53f7\u3002 main() \u534f\u7a0b\u7b49\u5f85 <-ch \u76f4\u5230\u4ece\u4e2d\u83b7\u53d6\u5230\u503c\u3002 \u6211\u4eec\u671f\u671b\u4ece\u8fd9\u4e2a\u901a\u9053\u4e2d\u83b7\u53d6\u8fd4\u56de\u7684\u7ed3\u679c\uff0c\u50cf\u8fd9\u6837\uff1a func compute ( ch chan int ){ ch <- someComputation () // when it completes, signal on the channel. } func main (){ ch := make ( chan int ) // allocate a channel. go compute ( ch ) // start something in a goroutines doSomethingElseForAWhile () result := <- ch } \u8fd9\u4e2a\u4fe1\u53f7\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u7684\uff0c\u4e0d\u8fd4\u56de\u7ed3\u679c\uff0c\u6bd4\u5982\u4e0b\u9762\u8fd9\u4e2a\u534f\u7a0b\u4e2d\u7684\u533f\u540d\u51fd\u6570 (lambda) \u534f\u7a0b\uff1a ch := make ( chan int ) go func (){ // doSomething ch <- 1 // Send a signal; value does not matter }() doSomethingElseForAWhile () <- ch // Wait for goroutine to finish; discard sent value. \u6216\u8005\u7b49\u5f85\u4e24\u4e2a\u534f\u7a0b\u5b8c\u6210\uff0c\u6bcf\u4e00\u4e2a\u90fd\u4f1a\u5bf9\u5207\u7247 s \u7684\u4e00\u90e8\u5206\u8fdb\u884c\u6392\u5e8f\uff0c\u7247\u6bb5\u5982\u4e0b\uff1a done := make ( chan bool ) // doSort is a lambda function, so a closure which knows the channel done: doSort := func ( s [] int ){ sort ( s ) done <- true } i := pivot ( s ) go doSort ( s [: i ]) go doSort ( s [ i :]) <- done <- done \u4e0b\u8fb9\u7684\u4ee3\u7801\uff0c\u7528\u5b8c\u6574\u7684\u4fe1\u53f7\u91cf\u6a21\u5f0f\u5bf9\u957f\u5ea6\u4e3a N \u7684 float64 \u5207\u7247\u8fdb\u884c\u4e86 N \u4e2a doSomething() \u8ba1\u7b97\u5e76\u540c\u65f6\u5b8c\u6210\uff0c\u901a\u9053 sem \u5206\u914d\u4e86\u76f8\u540c\u7684\u957f\u5ea6\uff08\u4e14\u5305\u542b\u7a7a\u63a5\u53e3\u7c7b\u578b\u7684\u5143\u7d20\uff09\uff0c\u5f85\u6240\u6709\u7684\u8ba1\u7b97\u90fd\u5b8c\u6210\u540e\uff0c\u53d1\u9001\u4fe1\u53f7\uff08\u901a\u8fc7\u653e\u5165\u503c\uff09\u3002\u5728\u5faa\u73af\u4e2d\u4ece\u901a\u9053 sem \u4e0d\u505c\u7684\u63a5\u6536\u6570\u636e\u6765\u7b49\u5f85\u6240\u6709\u7684\u534f\u7a0b\u5b8c\u6210\u3002 type Empty interface {} var empty Empty ... data := make ([] float64 , N ) res := make ([] float64 , N ) sem := make ( chan Empty , N ) ... for i , xi := range data { go func ( i int , xi float64 ) { res [ i ] = doSomething ( i , xi ) sem <- empty } ( i , xi ) } // wait for goroutines to finish for i := 0 ; i < N ; i ++ { <- sem } \u6ce8\u610f\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u95ed\u5408\u51fd\u6570\u7684\u7528\u6cd5\uff1a i \u3001 xi \u90fd\u662f\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u95ed\u5408\u51fd\u6570\u7684\uff0c\u8fd9\u4e00\u505a\u6cd5\u4f7f\u5f97\u6bcf\u4e2a\u534f\u7a0b\uff08\u8bd1\u8005\u6ce8\uff1a\u5728\u5176\u542f\u52a8\u65f6\uff09\u83b7\u5f97\u4e00\u4efd i \u548c xi \u7684\u5355\u72ec\u62f7\u8d1d\uff0c\u4ece\u800c\u5411\u95ed\u5408\u51fd\u6570\u5185\u90e8\u5c4f\u853d\u4e86\u5916\u5c42\u5faa\u73af\u4e2d\u7684 i \u548c xi \u53d8\u91cf\uff1b\u5426\u5219\uff0c for \u5faa\u73af\u7684\u4e0b\u4e00\u6b21\u8fed\u4ee3\u4f1a\u66f4\u65b0\u6240\u6709\u534f\u7a0b\u4e2d i \u548c xi \u7684\u503c\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5207\u7247 res \u6ca1\u6709\u4f20\u5165\u95ed\u5408\u51fd\u6570\uff0c\u56e0\u4e3a\u534f\u7a0b\u4e0d\u9700\u8981 res \u7684\u5355\u72ec\u62f7\u8d1d\u3002\u5207\u7247 res \u4e5f\u5728\u95ed\u5408\u51fd\u6570\u4e2d\u4f46\u5e76\u4e0d\u662f\u53c2\u6570\u3002 14.2.8 \u5b9e\u73b0\u5e76\u884c\u7684 for \u5faa\u73af \u00b6 \u5728\u4e0a\u4e00\u90e8\u5206\u7ae0\u8282 14.2.7 \u7684\u4ee3\u7801\u7247\u6bb5\u4e2d\uff1a for \u5faa\u73af\u7684\u6bcf\u4e00\u4e2a\u8fed\u4ee3\u662f\u5e76\u884c\u5b8c\u6210\u7684\uff1a for i , v := range data { go func ( i int , v float64 ) { doSomething ( i , v ) ... } ( i , v ) } \u5728 for \u5faa\u73af\u4e2d\u5e76\u884c\u8ba1\u7b97\u8fed\u4ee3\u53ef\u80fd\u5e26\u6765\u5f88\u597d\u7684\u6027\u80fd\u63d0\u5347\u3002\u4e0d\u8fc7\u6240\u6709\u7684\u8fed\u4ee3\u90fd\u5fc5\u987b\u662f\u72ec\u7acb\u5b8c\u6210\u7684\u3002\u6709\u4e9b\u8bed\u8a00\u6bd4\u5982 Fortress \u6216\u8005\u5176\u4ed6\u5e76\u884c\u6846\u67b6\u4ee5\u4e0d\u540c\u7684\u7ed3\u6784\u5b9e\u73b0\u4e86\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5728 Go \u4e2d\u7528\u534f\u7a0b\u5b9e\u73b0\u8d77\u6765\u975e\u5e38\u5bb9\u6613\uff1a 14.2.9 \u7528\u5e26\u7f13\u51b2\u901a\u9053\u5b9e\u73b0\u4e00\u4e2a\u4fe1\u53f7\u91cf \u00b6 \u4fe1\u53f7\u91cf\u662f\u5b9e\u73b0\u4e92\u65a5\u9501\uff08\u6392\u5916\u9501\uff09\u5e38\u89c1\u7684\u540c\u6b65\u673a\u5236\uff0c\u9650\u5236\u5bf9\u8d44\u6e90\u7684\u8bbf\u95ee\uff0c\u89e3\u51b3\u8bfb\u5199\u95ee\u9898\uff0c\u6bd4\u5982\u6ca1\u6709\u5b9e\u73b0\u4fe1\u53f7\u91cf\u7684 sync \u7684 Go \u5305\uff0c\u4f7f\u7528\u5e26\u7f13\u51b2\u7684\u901a\u9053\u53ef\u4ee5\u8f7b\u677e\u5b9e\u73b0\uff1a \u5e26\u7f13\u51b2\u901a\u9053\u7684\u5bb9\u91cf\u548c\u8981\u540c\u6b65\u7684\u8d44\u6e90\u5bb9\u91cf\u76f8\u540c \u901a\u9053\u7684\u957f\u5ea6\uff08\u5f53\u524d\u5b58\u653e\u7684\u5143\u7d20\u4e2a\u6570\uff09\u4e0e\u5f53\u524d\u8d44\u6e90\u88ab\u4f7f\u7528\u7684\u6570\u91cf\u76f8\u540c \u5bb9\u91cf\u51cf\u53bb\u901a\u9053\u7684\u957f\u5ea6\u5c31\u662f\u672a\u5904\u7406\u7684\u8d44\u6e90\u4e2a\u6570\uff08\u6807\u51c6\u4fe1\u53f7\u91cf\u7684\u6574\u6570\u503c\uff09 \u4e0d\u7528\u7ba1\u901a\u9053\u4e2d\u5b58\u653e\u7684\u662f\u4ec0\u4e48\uff0c\u53ea\u5173\u6ce8\u957f\u5ea6\uff1b\u56e0\u6b64\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u957f\u5ea6\u53ef\u53d8\u4f46\u5bb9\u91cf\u4e3a 0\uff08\u5b57\u8282\uff09\u7684\u901a\u9053\uff1a type Empty interface {} type semaphore chan Empty \u5c06\u53ef\u7528\u8d44\u6e90\u7684\u6570\u91cf N \u6765\u521d\u59cb\u5316\u4fe1\u53f7\u91cf semaphore \uff1a sem = make(semaphore, N) \u7136\u540e\u76f4\u63a5\u5bf9\u4fe1\u53f7\u91cf\u8fdb\u884c\u64cd\u4f5c\uff1a // acquire n resources func ( s semaphore ) P ( n int ) { e := new ( Empty ) for i := 0 ; i < n ; i ++ { s <- e } } // release n resources func ( s semaphore ) V ( n int ) { for i := 0 ; i < n ; i ++ { <- s } } \u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u4e00\u4e2a\u4e92\u65a5\u7684\u4f8b\u5b50\uff1a /* mutexes */ func ( s semaphore ) Lock () { s . P ( 1 ) } func ( s semaphore ) Unlock (){ s . V ( 1 ) } /* signal-wait */ func ( s semaphore ) Wait ( n int ) { s . P ( n ) } func ( s semaphore ) Signal () { s . V ( 1 ) } \u7ec3\u4e60 14.5\uff1a gosum.go \uff1a\u7528\u8fd9\u79cd\u4e60\u60ef\u7528\u6cd5\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u5f00\u542f\u4e00\u4e2a\u534f\u7a0b\u6765\u8ba1\u7b97 2 \u4e2a\u6574\u6570\u7684\u548c\u5e76\u7b49\u5f85\u8ba1\u7b97\u7ed3\u679c\u5e76\u6253\u5370\u51fa\u6765\u3002 \u7ec3\u4e60 14.6\uff1a producer_consumer.go \uff1a\u7528\u8fd9\u79cd\u4e60\u60ef\u7528\u6cd5\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u6709\u4e24\u4e2a\u534f\u7a0b\uff0c\u7b2c\u4e00\u4e2a\u63d0\u4f9b\u6570\u5b57 0\uff0c10\uff0c20\uff0c...\uff0c90 \u5e76\u5c06\u4ed6\u4eec\u653e\u5165\u901a\u9053\uff0c\u7b2c\u4e8c\u4e2a\u534f\u7a0b\u4ece\u901a\u9053\u4e2d\u8bfb\u53d6\u5e76\u6253\u5370\u3002 main() \u7b49\u5f85\u4e24\u4e2a\u534f\u7a0b\u5b8c\u6210\u540e\u518d\u7ed3\u675f\u3002 \u4e60\u60ef\u7528\u6cd5\uff1a\u901a\u9053\u5de5\u5382\u6a21\u5f0f \u7f16\u7a0b\u4e2d\u5e38\u89c1\u7684\u53e6\u5916\u4e00\u79cd\u6a21\u5f0f\u5982\u4e0b\uff1a\u4e0d\u5c06\u901a\u9053\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u534f\u7a0b\uff0c\u800c\u7528\u51fd\u6570\u6765\u751f\u6210\u4e00\u4e2a\u901a\u9053\u5e76\u8fd4\u56de\uff08\u5de5\u5382\u89d2\u8272\uff09\uff1b\u51fd\u6570\u5185\u6709\u4e2a\u533f\u540d\u51fd\u6570\u88ab\u534f\u7a0b\u8c03\u7528\u3002 \u5728 channel_block2.go \u52a0\u5165\u8fd9\u79cd\u6a21\u5f0f\u4fbf\u6709\u4e86\u793a\u4f8b 14.5- channel_idiom.go \uff1a package main import ( \"fmt\" \"time\" ) func main () { stream := pump () go suck ( stream ) time . Sleep ( 1e9 ) } func pump () chan int { ch := make ( chan int ) go func () { for i := 0 ; ; i ++ { ch <- i } }() return ch } func suck ( ch chan int ) { for { fmt . Println ( <- ch ) } } 14.2.10 \u7ed9\u901a\u9053\u4f7f\u7528 for \u5faa\u73af \u00b6 for \u5faa\u73af\u7684 range \u8bed\u53e5\u53ef\u4ee5\u7528\u5728\u901a\u9053 ch \u4e0a\uff0c\u4fbf\u53ef\u4ee5\u4ece\u901a\u9053\u4e2d\u83b7\u53d6\u503c\uff0c\u50cf\u8fd9\u6837\uff1a for v := range ch { fmt . Printf ( \"The value is %v\\n\" , v ) } \u5b83\u4ece\u6307\u5b9a\u901a\u9053\u4e2d\u8bfb\u53d6\u6570\u636e\u76f4\u5230\u901a\u9053\u5173\u95ed\uff0c\u624d\u7ee7\u7eed\u6267\u884c\u4e0b\u8fb9\u7684\u4ee3\u7801\u3002\u5f88\u660e\u663e\uff0c\u53e6\u5916\u4e00\u4e2a\u534f\u7a0b\u5fc5\u987b\u5199\u5165 ch \uff08\u4e0d\u7136\u4ee3\u7801\u5c31\u963b\u585e\u5728 for \u5faa\u73af\u4e86\uff09\uff0c\u800c\u4e14\u5fc5\u987b\u5728\u5199\u5165\u5b8c\u6210\u540e\u624d\u5173\u95ed\u3002 suck() \u51fd\u6570\u53ef\u4ee5\u8fd9\u6837\u5199\uff0c\u4e14\u5728\u534f\u7a0b\u4e2d\u8c03\u7528\u8fd9\u4e2a\u52a8\u4f5c\uff0c\u7a0b\u5e8f\u53d8\u6210\u4e86\u8fd9\u6837\uff1a \u793a\u4f8b 14.6- channel_idiom2.go \uff1a package main import ( \"fmt\" \"time\" ) func main () { suck ( pump ()) time . Sleep ( 1e9 ) } func pump () chan int { ch := make ( chan int ) go func () { for i := 0 ; ; i ++ { ch <- i } }() return ch } func suck ( ch chan int ) { go func () { for v := range ch { fmt . Println ( v ) } }() } \u4e60\u60ef\u7528\u6cd5\uff1a\u901a\u9053\u8fed\u4ee3\u5668\u6a21\u5f0f \u8fd9\u4e2a\u6a21\u5f0f\u7528\u5230\u4e86\u540e\u8fb9 14.6 \u7ae0 \u793a\u4f8b producer_consumer.go \u7684\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u6a21\u5f0f\u3002\u901a\u5e38\uff0c\u9700\u8981\u4ece\u5305\u542b\u4e86\u5730\u5740\u7d22\u5f15\u5b57\u6bb5 items \u7684\u5bb9\u5668\u7ed9\u901a\u9053\u586b\u5165\u5143\u7d20\u3002\u4e3a\u5bb9\u5668\u7684\u7c7b\u578b\u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5 Iter() \uff0c\u8fd4\u56de\u4e00\u4e2a\u53ea\u8bfb\u7684\u901a\u9053\uff08\u53c2\u89c1\u7b2c 14.2.11 \u8282\uff09 items \uff0c\u5982\u4e0b\uff1a func ( c * container ) Iter () <- chan item { ch := make ( chan item ) go func () { for i := 0 ; i < c . Len (); i ++ { // or use a for-range loop ch <- c . items [ i ] } } () return ch } \u5728\u534f\u7a0b\u91cc\uff0c\u4e00\u4e2a for \u5faa\u73af\u8fed\u4ee3\u5bb9\u5668 c \u4e2d\u7684\u5143\u7d20\uff08\u5bf9\u4e8e\u6811\u6216\u56fe\u7684\u7b97\u6cd5\uff0c\u8fd9\u79cd\u7b80\u5355\u7684 for \u5faa\u73af\u53ef\u4ee5\u66ff\u6362\u4e3a\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff09\u3002 \u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u7684\u4ee3\u7801\u53ef\u4ee5\u8fd9\u6837\u8fed\u4ee3\u5bb9\u5668\uff1a for x := range container . Iter () { ... } \u5176\u8fd0\u884c\u5728\u81ea\u5df1\u542f\u52a8\u7684\u534f\u7a0b\u4e2d\uff0c\u6240\u4ee5\u4e0a\u8fb9\u7684\u8fed\u4ee3\u7528\u5230\u4e86\u4e00\u4e2a\u901a\u9053\u548c\u4e24\u4e2a\u534f\u7a0b\uff08\u53ef\u80fd\u8fd0\u884c\u5728\u4e0d\u540c\u7684\u7ebf\u7a0b\u4e0a\uff09\u3002 \u8fd9\u6837\u6211\u4eec\u5c31\u6709\u4e86\u4e00\u4e2a\u5178\u578b\u7684\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u6a21\u5f0f\u3002\u5982\u679c\u5728\u7a0b\u5e8f\u7ed3\u675f\u4e4b\u524d\uff0c\u5411\u901a\u9053\u5199\u503c\u7684\u534f\u7a0b\u672a\u5b8c\u6210\u5de5\u4f5c\uff0c\u5219\u8fd9\u4e2a\u534f\u7a0b\u4e0d\u4f1a\u88ab\u5783\u573e\u56de\u6536\uff1b\u8fd9\u662f\u8bbe\u8ba1\u4f7f\u7136\u3002\u8fd9\u79cd\u770b\u8d77\u6765\u5e76\u4e0d\u7b26\u5408\u9884\u671f\u7684\u884c\u4e3a\u6b63\u662f\u7531\u901a\u9053\u8fd9\u79cd\u7ebf\u7a0b\u5b89\u5168\u7684\u901a\u4fe1\u65b9\u5f0f\u6240\u5bfc\u81f4\u7684\u3002\u5982\u6b64\u4e00\u6765\uff0c\u4e00\u4e2a\u534f\u7a0b\u4e3a\u4e86\u5199\u5165\u4e00\u4e2a\u6c38\u8fdc\u65e0\u4eba\u8bfb\u53d6\u7684\u901a\u9053\u800c\u88ab\u6302\u8d77\u5c31\u6210\u4e86\u4e00\u4e2a bug \uff0c\u800c\u5e76\u975e\u4f60\u9884\u60f3\u4e2d\u7684\u90a3\u6837\u88ab\u6084\u6084\u56de\u6536\u6389 (garbage-collected) \u4e86\u3002 \u4e60\u60ef\u7528\u6cd5\uff1a\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u5f0f \u5047\u8bbe\u4f60\u6709 Produce() \u51fd\u6570\u6765\u4ea7\u751f Consume() \u51fd\u6570\u9700\u8981\u7684\u503c\u3002\u5b83\u4eec\u90fd\u53ef\u4ee5\u8fd0\u884c\u5728\u72ec\u7acb\u7684\u534f\u7a0b\u4e2d\uff0c\u751f\u4ea7\u8005\u5728\u901a\u9053\u4e2d\u653e\u5165\u7ed9\u6d88\u8d39\u8005\u8bfb\u53d6\u7684\u503c\u3002\u6574\u4e2a\u5904\u7406\u8fc7\u7a0b\u53ef\u4ee5\u66ff\u6362\u4e3a\u65e0\u9650\u5faa\u73af\uff1a for { Consume ( Produce ()) } 14.2.11 \u901a\u9053\u7684\u65b9\u5411 \u00b6 \u901a\u9053\u7c7b\u578b\u53ef\u4ee5\u7528\u6ce8\u89e3\u6765\u8868\u793a\u5b83\u53ea\u53d1\u9001\u6216\u8005\u53ea\u63a5\u6536\uff1a var send_only chan <- int // channel can only receive data var recv_only <- chan int // channel can only send data \u53ea\u63a5\u6536\u7684\u901a\u9053 ( <-chan T ) \u65e0\u6cd5\u5173\u95ed\uff0c\u56e0\u4e3a\u5173\u95ed\u901a\u9053\u662f\u53d1\u9001\u8005\u7528\u6765\u8868\u793a\u4e0d\u518d\u7ed9\u901a\u9053\u53d1\u9001\u503c\u4e86\uff0c\u6240\u4ee5\u5bf9\u53ea\u63a5\u6536\u901a\u9053\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002\u901a\u9053\u521b\u5efa\u7684\u65f6\u5019\u90fd\u662f\u53cc\u5411\u7684\uff0c\u4f46\u4e5f\u53ef\u4ee5\u5206\u914d\u7ed9\u6709\u65b9\u5411\u7684\u901a\u9053\u53d8\u91cf\uff0c\u5c31\u50cf\u4ee5\u4e0b\u4ee3\u7801\uff1a var c = make ( chan int ) // bidirectional go source ( c ) go sink ( c ) func source ( ch chan <- int ){ for { ch <- 1 } } func sink ( ch <- chan int ) { for { <- ch } } \u4e60\u60ef\u7528\u6cd5\uff1a\u7ba1\u9053\u548c\u9009\u62e9\u5668\u6a21\u5f0f \u66f4\u5177\u4f53\u7684\u4f8b\u5b50\u8fd8\u6709\u534f\u7a0b\u5904\u7406\u5b83\u4ece\u901a\u9053\u63a5\u6536\u7684\u6570\u636e\u5e76\u53d1\u9001\u7ed9\u8f93\u51fa\u901a\u9053\uff1a sendChan := make ( chan int ) receiveChan := make ( chan string ) go processChannel ( sendChan , receiveChan ) func processChannel ( in <- chan int , out chan <- string ) { for inValue := range in { result := ... /// processing inValue out <- result } } \u901a\u8fc7\u4f7f\u7528\u65b9\u5411\u6ce8\u89e3\u6765\u9650\u5236\u534f\u7a0b\u5bf9\u901a\u9053\u7684\u64cd\u4f5c\u3002 \u8fd9\u91cc\u6709\u4e00\u4e2a\u6765\u81ea Go \u6307\u5bfc\u7684\u5f88\u8d5e\u7684\u4f8b\u5b50\uff0c\u6253\u5370\u4e86\u8f93\u51fa\u7684\u7d20\u6570\uff0c\u4f7f\u7528\u9009\u62e9\u5668\uff08\u2018\u7b5b\u2019\uff09\u4f5c\u4e3a\u5b83\u7684\u7b97\u6cd5\u3002\u6bcf\u4e2a prime \u90fd\u6709\u4e00\u4e2a\u9009\u62e9\u5668\uff0c\u5982\u4e0b\u56fe\uff1a \u7248\u672c1\uff1a\u793a\u4f8b 14.7- sieve1.go // Copyright 2009 The Go Authors. All rights reserved. // Use of this source code is governed by a BSD-style // license that can be found in the LICENSE file.package main package main import \"fmt\" // Send the sequence 2, 3, 4, ... to channel 'ch'. func generate ( ch chan int ) { for i := 2 ; ; i ++ { ch <- i // Send 'i' to channel 'ch'. } } // Copy the values from channel 'in' to channel 'out', // removing those divisible by 'prime'. func filter ( in , out chan int , prime int ) { for { i := <- in // Receive value of new variable 'i' from 'in'. if i % prime != 0 { out <- i // Send 'i' to channel 'out'. } } } // The prime sieve: Daisy-chain filter processes together. func main () { ch := make ( chan int ) // Create a new channel. go generate ( ch ) // Start generate() as a goroutine. for { prime := <- ch fmt . Print ( prime , \" \" ) ch1 := make ( chan int ) go filter ( ch , ch1 , prime ) ch = ch1 } } \u534f\u7a0b filter(in, out chan int, prime int) \u62f7\u8d1d\u6574\u6570\u5230\u8f93\u51fa\u901a\u9053\uff0c\u4e22\u5f03\u6389\u53ef\u4ee5\u88ab prime \u6574\u9664\u7684\u6570\u5b57\u3002\u7136\u540e\u6bcf\u4e2a prime \u53c8\u5f00\u542f\u4e86\u4e00\u4e2a\u65b0\u7684\u534f\u7a0b\uff0c\u751f\u6210\u5668\u548c\u9009\u62e9\u5668\u5e76\u53d1\u8bf7\u6c42\u3002 \u8f93\u51fa\uff1au7b2c\u4e8c\u4e2a\u7248\u672c\u5f15\u5165\u4e86\u4e0a\u8fb9\u7684\u4e60\u60ef\u7528\u6cd5\uff1a\u51fd\u6570 sieve() \u3001 generate() \u548c filter() \u90fd\u662f\u5de5\u5382\uff1b\u5b83\u4eec\u521b\u5efa\u901a\u9053\u5e76\u8fd4\u56de\uff0c\u800c\u4e14\u4f7f\u7528\u4e86\u534f\u7a0b\u7684 lambda \u51fd\u6570\u3002 main() \u51fd\u6570\u73b0\u5728\u77ed\u5c0f\u6e05\u6670\uff1a\u5b83\u8c03\u7528 sieve() \u8fd4\u56de\u4e86\u5305\u542b\u7d20\u6570\u7684\u901a\u9053\uff0c\u7136\u540e\u901a\u8fc7 fmt.Println(<-primes) \u6253\u5370\u51fa\u6765\u3002 \u7248\u672c2\uff1a\u793a\u4f8b 14.8- sieve2.go // Copyright 2009 The Go Authors. All rights reserved. // Use of this source code is governed by a BSD-style // license that can be found in the LICENSE file. package main import ( \"fmt\" ) // Send the sequence 2, 3, 4, ... to returned channel func generate () chan int { ch := make ( chan int ) go func () { for i := 2 ; ; i ++ { ch <- i } }() return ch } // Filter out input values divisible by 'prime', send rest to returned channel func filter ( in chan int , prime int ) chan int { out := make ( chan int ) go func () { for { if i := <- in ; i % prime != 0 { out <- i } } }() return out } func sieve () chan int { out := make ( chan int ) go func () { ch := generate () for { prime := <- ch ch = filter ( ch , prime ) out <- prime } }() return out } func main () { primes := sieve () for { fmt . Println ( <- primes ) } } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5e76\u53d1\u3001\u5e76\u884c\u548c\u534f\u7a0b \u4e0b\u4e00\u8282\uff1a \u534f\u7a0b\u540c\u6b65\uff1a\u5173\u95ed\u901a\u9053-\u6d4b\u8bd5\u963b\u585e\u7684\u901a\u9053","title":"14.2 \u534f\u7a0b\u95f4\u7684\u4fe1\u9053"},{"location":"14.2/#142","text":"","title":"14.2 \u534f\u7a0b\u95f4\u7684\u4fe1\u9053"},{"location":"14.2/#1421","text":"\u5728\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u534f\u7a0b\u662f\u72ec\u7acb\u6267\u884c\u7684\uff0c\u4ed6\u4eec\u4e4b\u95f4\u6ca1\u6709\u901a\u4fe1\u3002\u4ed6\u4eec\u5fc5\u987b\u901a\u4fe1\u624d\u4f1a\u53d8\u5f97\u66f4\u6709\u7528\uff1a\u5f7c\u6b64\u4e4b\u95f4\u53d1\u9001\u548c\u63a5\u6536\u4fe1\u606f\u5e76\u4e14\u534f\u8c03/\u540c\u6b65\u4ed6\u4eec\u7684\u5de5\u4f5c\u3002\u534f\u7a0b\u53ef\u4ee5\u4f7f\u7528\u5171\u4eab\u53d8\u91cf\u6765\u901a\u4fe1\uff0c\u4f46\u662f\u5f88\u4e0d\u63d0\u5021\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u8fd9\u79cd\u65b9\u5f0f\u7ed9\u6240\u6709\u7684\u5171\u4eab\u5185\u5b58\u7684\u591a\u7ebf\u7a0b\u90fd\u5e26\u6765\u4e86\u56f0\u96be\u3002 \u800c Go \u6709\u4e00\u79cd\u7279\u6b8a\u7684\u7c7b\u578b\uff0c \u901a\u9053\uff08channel\uff09 \uff0c\u5c31\u50cf\u4e00\u4e2a\u53ef\u4ee5\u7528\u4e8e\u53d1\u9001\u7c7b\u578b\u5316\u6570\u636e\u7684\u7ba1\u9053\uff0c\u7531\u5176\u8d1f\u8d23\u534f\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1\uff0c\u4ece\u800c\u907f\u5f00\u6240\u6709\u7531\u5171\u4eab\u5185\u5b58\u5bfc\u81f4\u7684\u9677\u9631\uff1b\u8fd9\u79cd\u901a\u8fc7\u901a\u9053\u8fdb\u884c\u901a\u4fe1\u7684\u65b9\u5f0f\u4fdd\u8bc1\u4e86\u540c\u6b65\u6027\u3002\u6570\u636e\u5728\u901a\u9053\u4e2d\u8fdb\u884c\u4f20\u9012\uff1a \u5728\u4efb\u4f55\u7ed9\u5b9a\u65f6\u95f4\uff0c\u4e00\u4e2a\u6570\u636e\u88ab\u8bbe\u8ba1\u4e3a\u53ea\u6709\u4e00\u4e2a\u534f\u7a0b\u53ef\u4ee5\u5bf9\u5176\u8bbf\u95ee\uff0c\u6240\u4ee5\u4e0d\u4f1a\u53d1\u751f\u6570\u636e\u7ade\u4e89\u3002 \u6570\u636e\u7684\u6240\u6709\u6743\uff08\u53ef\u4ee5\u8bfb\u5199\u6570\u636e\u7684\u80fd\u529b\uff09\u4e5f\u56e0\u6b64\u88ab\u4f20\u9012\u3002 \u5de5\u5382\u7684\u4f20\u9001\u5e26\u662f\u4e2a\u5f88\u6709\u7528\u7684\u4f8b\u5b50\u3002\u4e00\u4e2a\u673a\u5668\uff08\u751f\u4ea7\u8005\u534f\u7a0b\uff09\u5728\u4f20\u9001\u5e26\u4e0a\u653e\u7f6e\u7269\u54c1\uff0c\u53e6\u5916\u4e00\u4e2a\u673a\u5668\uff08\u6d88\u8d39\u8005\u534f\u7a0b\uff09\u62ff\u5230\u7269\u54c1\u5e76\u6253\u5305\u3002 \u901a\u9053\u670d\u52a1\u4e8e\u901a\u4fe1\u7684\u4e24\u4e2a\u76ee\u7684\uff1a\u503c\u7684\u4ea4\u6362\uff0c\u540c\u6b65\u7684\uff0c\u4fdd\u8bc1\u4e86\u4e24\u4e2a\u8ba1\u7b97\uff08\u534f\u7a0b\uff09\u4efb\u4f55\u65f6\u5019\u90fd\u662f\u53ef\u77e5\u72b6\u6001\u3002 \u901a\u5e38\u4f7f\u7528\u8fd9\u6837\u7684\u683c\u5f0f\u6765\u58f0\u660e\u901a\u9053\uff1a var identifier chan datatype \u672a\u521d\u59cb\u5316\u7684\u901a\u9053\u7684\u503c\u662f nil \u3002 \u6240\u4ee5\u901a\u9053\u53ea\u80fd\u4f20\u8f93\u4e00\u79cd\u7c7b\u578b\u7684\u6570\u636e\uff0c\u6bd4\u5982 chan int \u6216\u8005 chan string \uff0c\u6240\u6709\u7684\u7c7b\u578b\u90fd\u53ef\u4ee5\u7528\u4e8e\u901a\u9053\uff0c\u7a7a\u63a5\u53e3 interface{} \u4e5f\u53ef\u4ee5\uff0c\u751a\u81f3\u53ef\u4ee5\uff08\u6709\u65f6\u975e\u5e38\u6709\u7528\uff09\u521b\u5efa\u901a\u9053\u7684\u901a\u9053\u3002 \u901a\u9053\u5b9e\u9645\u4e0a\u662f\u7c7b\u578b\u5316\u6d88\u606f\u7684\u961f\u5217\uff1a\u4f7f\u6570\u636e\u5f97\u4ee5\u4f20\u8f93\u3002\u5b83\u662f\u5148\u8fdb\u5148\u51fa(FIFO) \u7684\u7ed3\u6784\u6240\u4ee5\u53ef\u4ee5\u4fdd\u8bc1\u53d1\u9001\u7ed9\u4ed6\u4eec\u7684\u5143\u7d20\u7684\u987a\u5e8f\uff08\u6709\u4e9b\u4eba\u77e5\u9053\uff0c\u901a\u9053\u53ef\u4ee5\u6bd4\u4f5c Unix shells \u4e2d\u7684\u53cc\u5411\u7ba1\u9053 (two-way pipe) \uff09\u3002\u901a\u9053\u4e5f\u662f\u5f15\u7528\u7c7b\u578b\uff0c\u6240\u4ee5\u6211\u4eec\u4f7f\u7528 make() \u51fd\u6570\u6765\u7ed9\u5b83\u5206\u914d\u5185\u5b58\u3002\u8fd9\u91cc\u5148\u58f0\u660e\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\u901a\u9053 ch1\uff0c\u7136\u540e\u521b\u5efa\u4e86\u5b83\uff08\u5b9e\u4f8b\u5316\uff09\uff1a var ch1 chan string ch1 = make ( chan string ) \u5f53\u7136\u53ef\u4ee5\u66f4\u77ed\uff1a ch1 := make(chan string) \u3002 \u8fd9\u91cc\u6211\u4eec\u6784\u5efa\u4e00\u4e2a int \u901a\u9053\u7684\u901a\u9053\uff1a chanOfChans := make(chan chan int) \u3002 \u6216\u8005\u51fd\u6570\u901a\u9053\uff1a funcChan := make(chan func()) \uff08\u76f8\u5173\u793a\u4f8b\u8bf7\u770b\u7b2c 14.17 \u8282\uff09\u3002 \u6240\u4ee5\u901a\u9053\u662f\u7b2c\u4e00\u7c7b\u5bf9\u8c61\uff1a\u53ef\u4ee5\u5b58\u50a8\u5728\u53d8\u91cf\u4e2d\uff0c\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570\u4f20\u9012\uff0c\u4ece\u51fd\u6570\u8fd4\u56de\u4ee5\u53ca\u901a\u8fc7\u901a\u9053\u53d1\u9001\u5b83\u4eec\u81ea\u8eab\u3002\u53e6\u5916\u5b83\u4eec\u662f\u7c7b\u578b\u5316\u7684\uff0c\u5141\u8bb8\u7c7b\u578b\u68c0\u67e5\uff0c\u6bd4\u5982\u5c1d\u8bd5\u4f7f\u7528\u6574\u6570\u901a\u9053\u53d1\u9001\u4e00\u4e2a\u6307\u9488\u3002","title":"14.2.1 \u6982\u5ff5"},{"location":"14.2/#1422-","text":"\u8fd9\u4e2a\u64cd\u4f5c\u7b26\u76f4\u89c2\u7684\u6807\u793a\u4e86\u6570\u636e\u7684\u4f20\u8f93\uff1a\u4fe1\u606f\u6309\u7167\u7bad\u5934\u7684\u65b9\u5411\u6d41\u52a8\u3002 \u6d41\u5411\u901a\u9053\uff08\u53d1\u9001\uff09 ch <- int1 \u8868\u793a\uff1a\u7528\u901a\u9053 ch \u53d1\u9001\u53d8\u91cf int1 \uff08\u53cc\u76ee\u8fd0\u7b97\u7b26\uff0c\u4e2d\u7f00 = \u53d1\u9001\uff09 \u4ece\u901a\u9053\u6d41\u51fa\uff08\u63a5\u6536\uff09\uff0c\u4e09\u79cd\u65b9\u5f0f\uff1a int2 = <- ch \u8868\u793a\uff1a\u53d8\u91cf int2 \u4ece\u901a\u9053 ch\uff08\u4e00\u5143\u8fd0\u7b97\u7684\u524d\u7f00\u64cd\u4f5c\u7b26\uff0c\u524d\u7f00 = \u63a5\u6536\uff09\u63a5\u6536\u6570\u636e\uff08\u83b7\u53d6\u65b0\u503c\uff09\uff1b\u5047\u8bbe int2 \u5df2\u7ecf\u58f0\u660e\u8fc7\u4e86\uff0c\u5982\u679c\u6ca1\u6709\u7684\u8bdd\u53ef\u4ee5\u5199\u6210\uff1a int2 := <- ch \u3002 <- ch \u53ef\u4ee5\u5355\u72ec\u8c03\u7528\u83b7\u53d6\u901a\u9053\u7684\uff08\u4e0b\u4e00\u4e2a\uff09\u503c\uff0c\u5f53\u524d\u503c\u4f1a\u88ab\u4e22\u5f03\uff0c\u4f46\u662f\u53ef\u4ee5\u7528\u6765\u9a8c\u8bc1\uff0c\u6240\u4ee5\u4ee5\u4e0b\u4ee3\u7801\u662f\u5408\u6cd5\u7684\uff1a if <- ch != 1000 { ... } \u540c\u4e00\u4e2a\u64cd\u4f5c\u7b26 <- \u65e2\u7528\u4e8e**\u53d1\u9001**\u4e5f\u7528\u4e8e**\u63a5\u6536**\uff0c\u4f46 Go \u4f1a\u6839\u636e\u64cd\u4f5c\u5bf9\u8c61\u5f04\u660e\u767d\u8be5\u5e72\u4ec0\u4e48 \u3002\u867d\u975e\u5f3a\u5236\u8981\u6c42\uff0c\u4f46\u4e3a\u4e86\u53ef\u8bfb\u6027\u901a\u9053\u7684\u547d\u540d\u901a\u5e38\u4ee5 ch \u5f00\u5934\u6216\u8005\u5305\u542b chan \u3002\u901a\u9053\u7684\u53d1\u9001\u548c\u63a5\u6536\u90fd\u662f\u539f\u5b50\u64cd\u4f5c\uff1a\u5b83\u4eec\u603b\u662f\u4e92\u4e0d\u5e72\u6270\u5730\u5b8c\u6210\u3002\u4e0b\u9762\u7684\u793a\u4f8b\u5c55\u793a\u4e86\u901a\u4fe1\u64cd\u4f5c\u7b26\u7684\u4f7f\u7528\u3002 \u793a\u4f8b 14.2- goroutine2.go package main import ( \"fmt\" \"time\" ) func main () { ch := make ( chan string ) go sendData ( ch ) go getData ( ch ) time . Sleep ( 1e9 ) } func sendData ( ch chan string ) { ch <- \"Washington\" ch <- \"Tripoli\" ch <- \"London\" ch <- \"Beijing\" ch <- \"Tokyo\" } func getData ( ch chan string ) { var input string // time.Sleep(2e9) for { input = <- ch fmt . Printf ( \"%s \" , input ) } } \u8f93\u51fa\uff1a Washington Tripoli London Beijing tokyo main() \u51fd\u6570\u4e2d\u542f\u52a8\u4e86\u4e24\u4e2a\u534f\u7a0b\uff1a sendData() \u901a\u8fc7\u901a\u9053 ch \u53d1\u9001\u4e86 5 \u4e2a\u5b57\u7b26\u4e32\uff0c getData() \u6309\u987a\u5e8f\u63a5\u6536\u5b83\u4eec\u5e76\u6253\u5370\u51fa\u6765\u3002 \u5982\u679c 2 \u4e2a\u534f\u7a0b\u9700\u8981\u901a\u4fe1\uff0c\u4f60\u5fc5\u987b\u7ed9\u4ed6\u4eec\u540c\u4e00\u4e2a\u901a\u9053\u4f5c\u4e3a\u53c2\u6570\u624d\u884c\u3002 \u5c1d\u8bd5\u4e00\u4e0b\u5982\u679c\u6ce8\u91ca\u6389 time.Sleep(1e9) \u4f1a\u5982\u4f55\u3002 \u6211\u4eec\u53d1\u73b0\u534f\u7a0b\u4e4b\u95f4\u7684\u540c\u6b65\u975e\u5e38\u91cd\u8981\uff1a main() \u7b49\u5f85\u4e86 1 \u79d2\u8ba9\u4e24\u4e2a\u534f\u7a0b\u5b8c\u6210\uff0c\u5982\u679c\u4e0d\u8fd9\u6837\uff0c sendData() \u5c31\u6ca1\u6709\u673a\u4f1a\u8f93\u51fa\u3002 getData() \u4f7f\u7528\u4e86\u65e0\u9650\u5faa\u73af\uff1a\u5b83\u968f\u7740 sendData() \u7684\u53d1\u9001\u5b8c\u6210\u548c ch \u53d8\u7a7a\u4e5f\u7ed3\u675f\u4e86\u3002 \u5982\u679c\u6211\u4eec\u79fb\u9664\u4e00\u4e2a\u6216\u6240\u6709 go \u5173\u952e\u5b57\uff0c\u7a0b\u5e8f\u65e0\u6cd5\u8fd0\u884c\uff0cGo \u8fd0\u884c\u65f6\u4f1a\u629b\u51fa panic\uff1a ---- Error run E:/Go/Goboek/code examples/chapter 14/goroutine2.exe with code Crashed ---- Program exited with code -2147483645: panic: all goroutines are asleep-deadlock! \u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\uff1f\u8fd0\u884c\u65f6 (runtime) \u4f1a\u68c0\u67e5\u6240\u6709\u7684\u534f\u7a0b\uff08\u50cf\u672c\u4f8b\u4e2d\u53ea\u6709\u4e00\u4e2a\uff09\u662f\u5426\u5728\u7b49\u5f85\u7740\u4ec0\u4e48\u4e1c\u897f\uff08\u53ef\u4ece\u67d0\u4e2a\u901a\u9053\u8bfb\u53d6\u6216\u8005\u5199\u5165\u67d0\u4e2a\u901a\u9053\uff09\uff0c\u8fd9\u610f\u5473\u7740\u7a0b\u5e8f\u5c06\u65e0\u6cd5\u7ee7\u7eed\u6267\u884c\u3002\u8fd9\u662f\u6b7b\u9501 (deadlock) \u7684\u4e00\u79cd\u5f62\u5f0f\uff0c\u800c\u8fd0\u884c\u65f6 (runtime) \u53ef\u4ee5\u4e3a\u6211\u4eec\u68c0\u6d4b\u5230\u8fd9\u79cd\u60c5\u51b5\u3002 \u6ce8\u610f\uff1a\u4e0d\u8981\u4f7f\u7528\u6253\u5370\u72b6\u6001\u6765\u8868\u660e\u901a\u9053\u7684\u53d1\u9001\u548c\u63a5\u6536\u987a\u5e8f\uff1a\u7531\u4e8e\u6253\u5370\u72b6\u6001\u548c\u901a\u9053\u5b9e\u9645\u53d1\u751f\u8bfb\u5199\u7684\u65f6\u95f4\u5ef6\u8fdf\u4f1a\u5bfc\u81f4\u548c\u771f\u5b9e\u53d1\u751f\u7684\u987a\u5e8f\u4e0d\u540c\u3002 \u7ec3\u4e60 14.4\uff1a\u89e3\u91ca\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u5982\u679c\u5728\u51fd\u6570 getData() \u7684\u4e00\u5f00\u59cb\u63d2\u5165 time.Sleep(2e9) \uff0c\u4e0d\u4f1a\u51fa\u73b0\u9519\u8bef\u4f46\u4e5f\u6ca1\u6709\u8f93\u51fa\u5462\u3002","title":"14.2.2 \u901a\u4fe1\u64cd\u4f5c\u7b26 &lt;-"},{"location":"14.2/#1423","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u901a\u4fe1\u662f\u540c\u6b65\u4e14\u65e0\u7f13\u51b2\u7684\uff1a\u5728\u6709\u63a5\u53d7\u8005\u63a5\u6536\u6570\u636e\u4e4b\u524d\uff0c\u53d1\u9001\u4e0d\u4f1a\u7ed3\u675f\u3002\u53ef\u4ee5\u60f3\u8c61\u4e00\u4e2a\u65e0\u7f13\u51b2\u7684\u901a\u9053\u5728\u6ca1\u6709\u7a7a\u95f4\u6765\u4fdd\u5b58\u6570\u636e\u7684\u65f6\u5019\uff1a\u5fc5\u987b\u8981\u4e00\u4e2a\u63a5\u6536\u8005\u51c6\u5907\u597d\u63a5\u6536\u901a\u9053\u7684\u6570\u636e\u7136\u540e\u53d1\u9001\u8005\u53ef\u4ee5\u76f4\u63a5\u628a\u6570\u636e\u53d1\u9001\u7ed9\u63a5\u6536\u8005\u3002\u6240\u4ee5\u901a\u9053\u7684\u53d1\u9001/\u63a5\u6536\u64cd\u4f5c\u5728\u5bf9\u65b9\u51c6\u5907\u597d\u4e4b\u524d\u662f\u963b\u585e\u7684\uff1a 1\uff09\u5bf9\u4e8e\u540c\u4e00\u4e2a\u901a\u9053\uff0c\u53d1\u9001\u64cd\u4f5c\uff08\u534f\u7a0b\u6216\u8005\u51fd\u6570\u4e2d\u7684\uff09\uff0c\u5728\u63a5\u6536\u8005\u51c6\u5907\u597d\u4e4b\u524d\u662f\u963b\u585e\u7684\uff1a\u5982\u679c ch \u4e2d\u7684\u6570\u636e\u65e0\u4eba\u63a5\u6536\uff0c\u5c31\u65e0\u6cd5\u518d\u7ed9\u901a\u9053\u4f20\u5165\u5176\u4ed6\u6570\u636e\uff1a\u65b0\u7684\u8f93\u5165\u65e0\u6cd5\u5728\u901a\u9053\u975e\u7a7a\u7684\u60c5\u51b5\u4e0b\u4f20\u5165\u3002\u6240\u4ee5\u53d1\u9001\u64cd\u4f5c\u4f1a\u7b49\u5f85 ch \u518d\u6b21\u53d8\u4e3a\u53ef\u7528\u72b6\u6001\uff1a\u5c31\u662f\u901a\u9053\u503c\u88ab\u63a5\u6536\u65f6\uff08\u53ef\u4ee5\u4f20\u5165\u53d8\u91cf\uff09\u3002 2\uff09\u5bf9\u4e8e\u540c\u4e00\u4e2a\u901a\u9053\uff0c\u63a5\u6536\u64cd\u4f5c\u662f\u963b\u585e\u7684\uff08\u534f\u7a0b\u6216\u51fd\u6570\u4e2d\u7684\uff09\uff0c\u76f4\u5230\u53d1\u9001\u8005\u53ef\u7528\uff1a\u5982\u679c\u901a\u9053\u4e2d\u6ca1\u6709\u6570\u636e\uff0c\u63a5\u6536\u8005\u5c31\u963b\u585e\u4e86\u3002 \u5c3d\u7ba1\u8fd9\u770b\u4e0a\u53bb\u662f\u975e\u5e38\u4e25\u683c\u7684\u7ea6\u675f\uff0c\u5b9e\u9645\u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u5de5\u4f5c\u7684\u5f88\u4e0d\u9519\u3002 \u7a0b\u5e8f channel_block.go \u9a8c\u8bc1\u4e86\u4ee5\u4e0a\u7406\u8bba\uff0c\u4e00\u4e2a\u534f\u7a0b\u5728\u65e0\u9650\u5faa\u73af\u4e2d\u7ed9\u901a\u9053\u53d1\u9001\u6574\u6570\u6570\u636e\u3002\u4e0d\u8fc7\u56e0\u4e3a\u6ca1\u6709\u63a5\u6536\u8005\uff0c\u53ea\u8f93\u51fa\u4e86\u4e00\u4e2a\u6570\u5b57 0 \u3002 \u793a\u4f8b 14.3- channel_block.go package main import \"fmt\" func main () { ch1 := make ( chan int ) go pump ( ch1 ) // pump hangs fmt . Println ( <- ch1 ) // prints only 0 } func pump ( ch chan int ) { for i := 0 ; ; i ++ { ch <- i } } \u8f93\u51fa\uff1a 0 pump() \u51fd\u6570\u4e3a\u901a\u9053\u63d0\u4f9b\u6570\u503c\uff0c\u4e5f\u88ab\u53eb\u505a\u751f\u4ea7\u8005\u3002 \u4e3a\u901a\u9053\u89e3\u9664\u963b\u585e\u5b9a\u4e49\u4e86 suck() \u51fd\u6570\u6765\u5728\u65e0\u9650\u5faa\u73af\u4e2d\u8bfb\u53d6\u901a\u9053\uff0c\u53c2\u89c1\u793a\u4f8b 14.4- channel_block2.go \uff1a func suck ( ch chan int ) { for { fmt . Println ( <- ch ) } } \u5728 main() \u4e2d\u4f7f\u7528\u534f\u7a0b\u5f00\u59cb\u5b83\uff1a go pump ( ch1 ) go suck ( ch1 ) time . Sleep ( 1e9 ) \u7ed9\u7a0b\u5e8f 1 \u79d2\u7684\u65f6\u95f4\u6765\u8fd0\u884c\uff1a\u8f93\u51fa\u4e86\u4e0a\u4e07\u4e2a\u6574\u6570\u3002 \u7ec3\u4e60 14.1\uff1a channel_block3.go \uff1a\u5199\u4e00\u4e2a\u901a\u9053\u8bc1\u660e\u5b83\u7684\u963b\u585e\u6027\uff0c\u5f00\u542f\u4e00\u4e2a\u534f\u7a0b\u63a5\u6536\u901a\u9053\u7684\u6570\u636e\uff0c\u6301\u7eed 15 \u79d2\uff0c\u7136\u540e\u7ed9\u901a\u9053\u653e\u5165\u4e00\u4e2a\u503c\u3002\u5728\u4e0d\u540c\u7684\u9636\u6bb5\u6253\u5370\u6d88\u606f\u5e76\u89c2\u5bdf\u8f93\u51fa\u3002","title":"14.2.3 \u901a\u9053\u963b\u585e"},{"location":"14.2/#1424","text":"\u901a\u4fe1\u662f\u4e00\u79cd\u540c\u6b65\u5f62\u5f0f\uff1a\u901a\u8fc7\u901a\u9053\uff0c\u4e24\u4e2a\u534f\u7a0b\u5728\u901a\u4fe1\uff08\u534f\u7a0b\u4f1a\u5408\uff09\u4e2d\u67d0\u523b\u540c\u6b65\u4ea4\u6362\u6570\u636e\u3002\u65e0\u7f13\u51b2\u901a\u9053\u6210\u4e3a\u4e86\u591a\u4e2a\u534f\u7a0b\u540c\u6b65\u7684\u5b8c\u7f8e\u5de5\u5177\u3002 \u751a\u81f3\u53ef\u4ee5\u5728\u901a\u9053\u4e24\u7aef\u4e92\u76f8\u963b\u585e\u5bf9\u65b9\uff0c\u5f62\u6210\u4e86\u53eb\u505a**\u6b7b\u9501**\u7684\u72b6\u6001\u3002Go \u8fd0\u884c\u65f6\u4f1a\u68c0\u67e5\u5e76 panic() \uff0c\u505c\u6b62\u7a0b\u5e8f\u3002\u6b7b\u9501\u51e0\u4e4e\u5b8c\u5168\u662f\u7531\u7cdf\u7cd5\u7684\u8bbe\u8ba1\u5bfc\u81f4\u7684\u3002 \u65e0\u7f13\u51b2\u901a\u9053\u4f1a\u88ab\u963b\u585e\u3002\u8bbe\u8ba1\u65e0\u963b\u585e\u7684\u7a0b\u5e8f\u53ef\u4ee5\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u6216\u8005\u4f7f\u7528\u5e26\u7f13\u51b2\u7684\u901a\u9053\u3002 \u7ec3\u4e60 14.2\uff1a blocking.go \u89e3\u91ca\u4e3a\u4ec0\u4e48\u4e0b\u8fb9\u8fd9\u4e2a\u7a0b\u5e8f\u4f1a\u5bfc\u81f4 panic\uff1a\u6240\u6709\u7684\u534f\u7a0b\u90fd\u4f11\u7720\u4e86 - \u6b7b\u9501\uff01 package main import ( \"fmt\" ) func f1 ( in chan int ) { fmt . Println ( <- in ) } func main () { out := make ( chan int ) out <- 2 go f1 ( out ) }","title":"14.2.4 \u901a\u8fc7\u4e00\u4e2a\uff08\u6216\u591a\u4e2a\uff09\u901a\u9053\u4ea4\u6362\u6570\u636e\u8fdb\u884c\u534f\u7a0b\u540c\u6b65\u3002"},{"location":"14.2/#1425-","text":"\u4e00\u4e2a\u65e0\u7f13\u51b2\u901a\u9053\u53ea\u80fd\u5305\u542b 1 \u4e2a\u5143\u7d20\uff0c\u6709\u65f6\u663e\u5f97\u5f88\u5c40\u9650\u3002\u6211\u4eec\u7ed9\u901a\u9053\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7f13\u5b58\uff0c\u53ef\u4ee5\u5728\u6269\u5c55\u7684 make \u547d\u4ee4\u4e2d\u8bbe\u7f6e\u5b83\u7684\u5bb9\u91cf\uff0c\u5982\u4e0b\uff1a buf := 100 ch1 := make ( chan string , buf ) buf \u662f\u901a\u9053\u53ef\u4ee5\u540c\u65f6\u5bb9\u7eb3\u7684\u5143\u7d20\uff08\u8fd9\u91cc\u662f string \uff09\u4e2a\u6570 \u5728\u7f13\u51b2\u6ee1\u8f7d\uff08\u7f13\u51b2\u88ab\u5168\u90e8\u4f7f\u7528\uff09\u4e4b\u524d\uff0c\u7ed9\u4e00\u4e2a\u5e26\u7f13\u51b2\u7684\u901a\u9053\u53d1\u9001\u6570\u636e\u662f\u4e0d\u4f1a\u963b\u585e\u7684\uff0c\u800c\u4ece\u901a\u9053\u8bfb\u53d6\u6570\u636e\u4e5f\u4e0d\u4f1a\u963b\u585e\uff0c\u76f4\u5230\u7f13\u51b2\u7a7a\u4e86\u3002 \u7f13\u51b2\u5bb9\u91cf\u548c\u7c7b\u578b\u65e0\u5173\uff0c\u6240\u4ee5\u53ef\u4ee5\uff08\u5c3d\u7ba1\u53ef\u80fd\u5bfc\u81f4\u5371\u9669\uff09\u7ed9\u4e00\u4e9b\u901a\u9053\u8bbe\u7f6e\u4e0d\u540c\u7684\u5bb9\u91cf\uff0c\u53ea\u8981\u4ed6\u4eec\u62e5\u6709\u540c\u6837\u7684\u5143\u7d20\u7c7b\u578b\u3002\u5185\u7f6e\u7684 cap() \u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u7f13\u51b2\u533a\u7684\u5bb9\u91cf\u3002 \u5982\u679c\u5bb9\u91cf\u5927\u4e8e 0\uff0c\u901a\u9053\u5c31\u662f\u5f02\u6b65\u7684\u4e86\uff1a\u7f13\u51b2\u6ee1\u8f7d\uff08\u53d1\u9001\uff09\u6216\u53d8\u7a7a\uff08\u63a5\u6536\uff09\u4e4b\u524d\u901a\u4fe1\u4e0d\u4f1a\u963b\u585e\uff0c\u5143\u7d20\u4f1a\u6309\u7167\u53d1\u9001\u7684\u987a\u5e8f\u88ab\u63a5\u6536\u3002\u5982\u679c\u5bb9\u91cf\u662f 0 \u6216\u8005\u672a\u8bbe\u7f6e\uff0c\u901a\u4fe1\u4ec5\u5728\u6536\u53d1\u53cc\u65b9\u51c6\u5907\u597d\u7684\u60c5\u51b5\u4e0b\u624d\u53ef\u4ee5\u6210\u529f\u3002 \u540c\u6b65\uff1a ch :=make(chan type, value) value == 0 -> synchronous , unbuffered \uff08\u963b\u585e\uff09 value > 0 -> asynchronous , buffered\uff08\u975e\u963b\u585e\uff09\u53d6\u51b3\u4e8e value \u5143\u7d20 \u82e5\u4f7f\u7528\u901a\u9053\u7684\u7f13\u51b2\uff0c\u4f60\u7684\u7a0b\u5e8f\u4f1a\u5728\u201c\u8bf7\u6c42\u201d\u6fc0\u589e\u7684\u65f6\u5019\u8868\u73b0\u66f4\u597d\uff1a\u66f4\u5177\u5f39\u6027\uff0c\u4e13\u4e1a\u672f\u8bed\u53eb\uff1a\u66f4\u5177\u6709\u4f38\u7f29\u6027(scalable)\u3002\u5728\u8bbe\u8ba1\u7b97\u6cd5\u65f6\u9996\u5148\u8003\u8651\u4f7f\u7528\u65e0\u7f13\u51b2\u901a\u9053\uff0c\u53ea\u5728\u4e0d\u786e\u5b9a\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u7f13\u51b2\u3002 \u7ec3\u4e60 14.3\uff1a channel_buffer.go \uff1a\u7ed9 channel_block3.go \u7684\u901a\u9053\u589e\u52a0\u7f13\u51b2\u5e76\u89c2\u5bdf\u8f93\u51fa\u6709\u4f55\u4e0d\u540c\u3002","title":"14.2.5 \u540c\u6b65\u901a\u9053-\u4f7f\u7528\u5e26\u7f13\u51b2\u7684\u901a\u9053"},{"location":"14.2/#1426","text":"\u4e3a\u4e86\u77e5\u9053\u8ba1\u7b97\u4f55\u65f6\u5b8c\u6210\uff0c\u53ef\u4ee5\u901a\u8fc7\u4fe1\u9053\u56de\u62a5\u3002\u5728\u4f8b\u5b50 go sum(bigArray) \u4e2d\uff0c\u8981\u8fd9\u6837\u5199\uff1a ch := make ( chan int ) go sum ( bigArray , ch ) // bigArray puts the calculated sum on ch // .. do something else for a while sum := <- ch // wait for, and retrieve the sum \u4e5f\u53ef\u4ee5\u4f7f\u7528\u901a\u9053\u6765\u8fbe\u5230\u540c\u6b65\u7684\u76ee\u7684\uff0c\u8fd9\u4e2a\u5f88\u6709\u6548\u7684\u7528\u6cd5\u5728\u4f20\u7edf\u8ba1\u7b97\u673a\u4e2d\u79f0\u4e3a\u4fe1\u53f7\u91cf (semaphore)\u3002\u6216\u8005\u6362\u4e2a\u65b9\u5f0f\uff1a\u901a\u8fc7\u901a\u9053\u53d1\u9001\u4fe1\u53f7\u544a\u77e5\u5904\u7406\u5df2\u7ecf\u5b8c\u6210\uff08\u5728\u534f\u7a0b\u4e2d\uff09\u3002 \u5728\u5176\u4ed6\u534f\u7a0b\u8fd0\u884c\u65f6\u8ba9 main \u7a0b\u5e8f\u65e0\u9650\u963b\u585e\u7684\u901a\u5e38\u505a\u6cd5\u662f\u5728 main() \u51fd\u6570\u7684\u6700\u540e\u653e\u7f6e\u4e00\u4e2a select {} \u3002 \u4e5f\u53ef\u4ee5\u4f7f\u7528\u901a\u9053\u8ba9 main \u7a0b\u5e8f\u7b49\u5f85\u534f\u7a0b\u5b8c\u6210\uff0c\u5c31\u662f\u6240\u8c13\u7684\u4fe1\u53f7\u91cf\u6a21\u5f0f\uff0c\u6211\u4eec\u4f1a\u5728\u63a5\u4e0b\u6765\u7684\u90e8\u5206\u8ba8\u8bba\u3002","title":"14.2.6 \u534f\u7a0b\u4e2d\u7528\u901a\u9053\u8f93\u51fa\u7ed3\u679c"},{"location":"14.2/#1427","text":"\u4e0b\u8fb9\u7684\u7247\u6bb5\u9610\u660e\uff1a\u534f\u7a0b\u901a\u8fc7\u5728\u901a\u9053 ch \u4e2d\u653e\u7f6e\u4e00\u4e2a\u503c\u6765\u5904\u7406\u7ed3\u675f\u7684\u4fe1\u53f7\u3002 main() \u534f\u7a0b\u7b49\u5f85 <-ch \u76f4\u5230\u4ece\u4e2d\u83b7\u53d6\u5230\u503c\u3002 \u6211\u4eec\u671f\u671b\u4ece\u8fd9\u4e2a\u901a\u9053\u4e2d\u83b7\u53d6\u8fd4\u56de\u7684\u7ed3\u679c\uff0c\u50cf\u8fd9\u6837\uff1a func compute ( ch chan int ){ ch <- someComputation () // when it completes, signal on the channel. } func main (){ ch := make ( chan int ) // allocate a channel. go compute ( ch ) // start something in a goroutines doSomethingElseForAWhile () result := <- ch } \u8fd9\u4e2a\u4fe1\u53f7\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u7684\uff0c\u4e0d\u8fd4\u56de\u7ed3\u679c\uff0c\u6bd4\u5982\u4e0b\u9762\u8fd9\u4e2a\u534f\u7a0b\u4e2d\u7684\u533f\u540d\u51fd\u6570 (lambda) \u534f\u7a0b\uff1a ch := make ( chan int ) go func (){ // doSomething ch <- 1 // Send a signal; value does not matter }() doSomethingElseForAWhile () <- ch // Wait for goroutine to finish; discard sent value. \u6216\u8005\u7b49\u5f85\u4e24\u4e2a\u534f\u7a0b\u5b8c\u6210\uff0c\u6bcf\u4e00\u4e2a\u90fd\u4f1a\u5bf9\u5207\u7247 s \u7684\u4e00\u90e8\u5206\u8fdb\u884c\u6392\u5e8f\uff0c\u7247\u6bb5\u5982\u4e0b\uff1a done := make ( chan bool ) // doSort is a lambda function, so a closure which knows the channel done: doSort := func ( s [] int ){ sort ( s ) done <- true } i := pivot ( s ) go doSort ( s [: i ]) go doSort ( s [ i :]) <- done <- done \u4e0b\u8fb9\u7684\u4ee3\u7801\uff0c\u7528\u5b8c\u6574\u7684\u4fe1\u53f7\u91cf\u6a21\u5f0f\u5bf9\u957f\u5ea6\u4e3a N \u7684 float64 \u5207\u7247\u8fdb\u884c\u4e86 N \u4e2a doSomething() \u8ba1\u7b97\u5e76\u540c\u65f6\u5b8c\u6210\uff0c\u901a\u9053 sem \u5206\u914d\u4e86\u76f8\u540c\u7684\u957f\u5ea6\uff08\u4e14\u5305\u542b\u7a7a\u63a5\u53e3\u7c7b\u578b\u7684\u5143\u7d20\uff09\uff0c\u5f85\u6240\u6709\u7684\u8ba1\u7b97\u90fd\u5b8c\u6210\u540e\uff0c\u53d1\u9001\u4fe1\u53f7\uff08\u901a\u8fc7\u653e\u5165\u503c\uff09\u3002\u5728\u5faa\u73af\u4e2d\u4ece\u901a\u9053 sem \u4e0d\u505c\u7684\u63a5\u6536\u6570\u636e\u6765\u7b49\u5f85\u6240\u6709\u7684\u534f\u7a0b\u5b8c\u6210\u3002 type Empty interface {} var empty Empty ... data := make ([] float64 , N ) res := make ([] float64 , N ) sem := make ( chan Empty , N ) ... for i , xi := range data { go func ( i int , xi float64 ) { res [ i ] = doSomething ( i , xi ) sem <- empty } ( i , xi ) } // wait for goroutines to finish for i := 0 ; i < N ; i ++ { <- sem } \u6ce8\u610f\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u95ed\u5408\u51fd\u6570\u7684\u7528\u6cd5\uff1a i \u3001 xi \u90fd\u662f\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u95ed\u5408\u51fd\u6570\u7684\uff0c\u8fd9\u4e00\u505a\u6cd5\u4f7f\u5f97\u6bcf\u4e2a\u534f\u7a0b\uff08\u8bd1\u8005\u6ce8\uff1a\u5728\u5176\u542f\u52a8\u65f6\uff09\u83b7\u5f97\u4e00\u4efd i \u548c xi \u7684\u5355\u72ec\u62f7\u8d1d\uff0c\u4ece\u800c\u5411\u95ed\u5408\u51fd\u6570\u5185\u90e8\u5c4f\u853d\u4e86\u5916\u5c42\u5faa\u73af\u4e2d\u7684 i \u548c xi \u53d8\u91cf\uff1b\u5426\u5219\uff0c for \u5faa\u73af\u7684\u4e0b\u4e00\u6b21\u8fed\u4ee3\u4f1a\u66f4\u65b0\u6240\u6709\u534f\u7a0b\u4e2d i \u548c xi \u7684\u503c\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5207\u7247 res \u6ca1\u6709\u4f20\u5165\u95ed\u5408\u51fd\u6570\uff0c\u56e0\u4e3a\u534f\u7a0b\u4e0d\u9700\u8981 res \u7684\u5355\u72ec\u62f7\u8d1d\u3002\u5207\u7247 res \u4e5f\u5728\u95ed\u5408\u51fd\u6570\u4e2d\u4f46\u5e76\u4e0d\u662f\u53c2\u6570\u3002","title":"14.2.7 \u4fe1\u53f7\u91cf\u6a21\u5f0f"},{"location":"14.2/#1428-for","text":"\u5728\u4e0a\u4e00\u90e8\u5206\u7ae0\u8282 14.2.7 \u7684\u4ee3\u7801\u7247\u6bb5\u4e2d\uff1a for \u5faa\u73af\u7684\u6bcf\u4e00\u4e2a\u8fed\u4ee3\u662f\u5e76\u884c\u5b8c\u6210\u7684\uff1a for i , v := range data { go func ( i int , v float64 ) { doSomething ( i , v ) ... } ( i , v ) } \u5728 for \u5faa\u73af\u4e2d\u5e76\u884c\u8ba1\u7b97\u8fed\u4ee3\u53ef\u80fd\u5e26\u6765\u5f88\u597d\u7684\u6027\u80fd\u63d0\u5347\u3002\u4e0d\u8fc7\u6240\u6709\u7684\u8fed\u4ee3\u90fd\u5fc5\u987b\u662f\u72ec\u7acb\u5b8c\u6210\u7684\u3002\u6709\u4e9b\u8bed\u8a00\u6bd4\u5982 Fortress \u6216\u8005\u5176\u4ed6\u5e76\u884c\u6846\u67b6\u4ee5\u4e0d\u540c\u7684\u7ed3\u6784\u5b9e\u73b0\u4e86\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5728 Go \u4e2d\u7528\u534f\u7a0b\u5b9e\u73b0\u8d77\u6765\u975e\u5e38\u5bb9\u6613\uff1a","title":"14.2.8 \u5b9e\u73b0\u5e76\u884c\u7684 for \u5faa\u73af"},{"location":"14.2/#1429","text":"\u4fe1\u53f7\u91cf\u662f\u5b9e\u73b0\u4e92\u65a5\u9501\uff08\u6392\u5916\u9501\uff09\u5e38\u89c1\u7684\u540c\u6b65\u673a\u5236\uff0c\u9650\u5236\u5bf9\u8d44\u6e90\u7684\u8bbf\u95ee\uff0c\u89e3\u51b3\u8bfb\u5199\u95ee\u9898\uff0c\u6bd4\u5982\u6ca1\u6709\u5b9e\u73b0\u4fe1\u53f7\u91cf\u7684 sync \u7684 Go \u5305\uff0c\u4f7f\u7528\u5e26\u7f13\u51b2\u7684\u901a\u9053\u53ef\u4ee5\u8f7b\u677e\u5b9e\u73b0\uff1a \u5e26\u7f13\u51b2\u901a\u9053\u7684\u5bb9\u91cf\u548c\u8981\u540c\u6b65\u7684\u8d44\u6e90\u5bb9\u91cf\u76f8\u540c \u901a\u9053\u7684\u957f\u5ea6\uff08\u5f53\u524d\u5b58\u653e\u7684\u5143\u7d20\u4e2a\u6570\uff09\u4e0e\u5f53\u524d\u8d44\u6e90\u88ab\u4f7f\u7528\u7684\u6570\u91cf\u76f8\u540c \u5bb9\u91cf\u51cf\u53bb\u901a\u9053\u7684\u957f\u5ea6\u5c31\u662f\u672a\u5904\u7406\u7684\u8d44\u6e90\u4e2a\u6570\uff08\u6807\u51c6\u4fe1\u53f7\u91cf\u7684\u6574\u6570\u503c\uff09 \u4e0d\u7528\u7ba1\u901a\u9053\u4e2d\u5b58\u653e\u7684\u662f\u4ec0\u4e48\uff0c\u53ea\u5173\u6ce8\u957f\u5ea6\uff1b\u56e0\u6b64\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u957f\u5ea6\u53ef\u53d8\u4f46\u5bb9\u91cf\u4e3a 0\uff08\u5b57\u8282\uff09\u7684\u901a\u9053\uff1a type Empty interface {} type semaphore chan Empty \u5c06\u53ef\u7528\u8d44\u6e90\u7684\u6570\u91cf N \u6765\u521d\u59cb\u5316\u4fe1\u53f7\u91cf semaphore \uff1a sem = make(semaphore, N) \u7136\u540e\u76f4\u63a5\u5bf9\u4fe1\u53f7\u91cf\u8fdb\u884c\u64cd\u4f5c\uff1a // acquire n resources func ( s semaphore ) P ( n int ) { e := new ( Empty ) for i := 0 ; i < n ; i ++ { s <- e } } // release n resources func ( s semaphore ) V ( n int ) { for i := 0 ; i < n ; i ++ { <- s } } \u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u4e00\u4e2a\u4e92\u65a5\u7684\u4f8b\u5b50\uff1a /* mutexes */ func ( s semaphore ) Lock () { s . P ( 1 ) } func ( s semaphore ) Unlock (){ s . V ( 1 ) } /* signal-wait */ func ( s semaphore ) Wait ( n int ) { s . P ( n ) } func ( s semaphore ) Signal () { s . V ( 1 ) } \u7ec3\u4e60 14.5\uff1a gosum.go \uff1a\u7528\u8fd9\u79cd\u4e60\u60ef\u7528\u6cd5\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u5f00\u542f\u4e00\u4e2a\u534f\u7a0b\u6765\u8ba1\u7b97 2 \u4e2a\u6574\u6570\u7684\u548c\u5e76\u7b49\u5f85\u8ba1\u7b97\u7ed3\u679c\u5e76\u6253\u5370\u51fa\u6765\u3002 \u7ec3\u4e60 14.6\uff1a producer_consumer.go \uff1a\u7528\u8fd9\u79cd\u4e60\u60ef\u7528\u6cd5\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u6709\u4e24\u4e2a\u534f\u7a0b\uff0c\u7b2c\u4e00\u4e2a\u63d0\u4f9b\u6570\u5b57 0\uff0c10\uff0c20\uff0c...\uff0c90 \u5e76\u5c06\u4ed6\u4eec\u653e\u5165\u901a\u9053\uff0c\u7b2c\u4e8c\u4e2a\u534f\u7a0b\u4ece\u901a\u9053\u4e2d\u8bfb\u53d6\u5e76\u6253\u5370\u3002 main() \u7b49\u5f85\u4e24\u4e2a\u534f\u7a0b\u5b8c\u6210\u540e\u518d\u7ed3\u675f\u3002 \u4e60\u60ef\u7528\u6cd5\uff1a\u901a\u9053\u5de5\u5382\u6a21\u5f0f \u7f16\u7a0b\u4e2d\u5e38\u89c1\u7684\u53e6\u5916\u4e00\u79cd\u6a21\u5f0f\u5982\u4e0b\uff1a\u4e0d\u5c06\u901a\u9053\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u534f\u7a0b\uff0c\u800c\u7528\u51fd\u6570\u6765\u751f\u6210\u4e00\u4e2a\u901a\u9053\u5e76\u8fd4\u56de\uff08\u5de5\u5382\u89d2\u8272\uff09\uff1b\u51fd\u6570\u5185\u6709\u4e2a\u533f\u540d\u51fd\u6570\u88ab\u534f\u7a0b\u8c03\u7528\u3002 \u5728 channel_block2.go \u52a0\u5165\u8fd9\u79cd\u6a21\u5f0f\u4fbf\u6709\u4e86\u793a\u4f8b 14.5- channel_idiom.go \uff1a package main import ( \"fmt\" \"time\" ) func main () { stream := pump () go suck ( stream ) time . Sleep ( 1e9 ) } func pump () chan int { ch := make ( chan int ) go func () { for i := 0 ; ; i ++ { ch <- i } }() return ch } func suck ( ch chan int ) { for { fmt . Println ( <- ch ) } }","title":"14.2.9 \u7528\u5e26\u7f13\u51b2\u901a\u9053\u5b9e\u73b0\u4e00\u4e2a\u4fe1\u53f7\u91cf"},{"location":"14.2/#14210-for","text":"for \u5faa\u73af\u7684 range \u8bed\u53e5\u53ef\u4ee5\u7528\u5728\u901a\u9053 ch \u4e0a\uff0c\u4fbf\u53ef\u4ee5\u4ece\u901a\u9053\u4e2d\u83b7\u53d6\u503c\uff0c\u50cf\u8fd9\u6837\uff1a for v := range ch { fmt . Printf ( \"The value is %v\\n\" , v ) } \u5b83\u4ece\u6307\u5b9a\u901a\u9053\u4e2d\u8bfb\u53d6\u6570\u636e\u76f4\u5230\u901a\u9053\u5173\u95ed\uff0c\u624d\u7ee7\u7eed\u6267\u884c\u4e0b\u8fb9\u7684\u4ee3\u7801\u3002\u5f88\u660e\u663e\uff0c\u53e6\u5916\u4e00\u4e2a\u534f\u7a0b\u5fc5\u987b\u5199\u5165 ch \uff08\u4e0d\u7136\u4ee3\u7801\u5c31\u963b\u585e\u5728 for \u5faa\u73af\u4e86\uff09\uff0c\u800c\u4e14\u5fc5\u987b\u5728\u5199\u5165\u5b8c\u6210\u540e\u624d\u5173\u95ed\u3002 suck() \u51fd\u6570\u53ef\u4ee5\u8fd9\u6837\u5199\uff0c\u4e14\u5728\u534f\u7a0b\u4e2d\u8c03\u7528\u8fd9\u4e2a\u52a8\u4f5c\uff0c\u7a0b\u5e8f\u53d8\u6210\u4e86\u8fd9\u6837\uff1a \u793a\u4f8b 14.6- channel_idiom2.go \uff1a package main import ( \"fmt\" \"time\" ) func main () { suck ( pump ()) time . Sleep ( 1e9 ) } func pump () chan int { ch := make ( chan int ) go func () { for i := 0 ; ; i ++ { ch <- i } }() return ch } func suck ( ch chan int ) { go func () { for v := range ch { fmt . Println ( v ) } }() } \u4e60\u60ef\u7528\u6cd5\uff1a\u901a\u9053\u8fed\u4ee3\u5668\u6a21\u5f0f \u8fd9\u4e2a\u6a21\u5f0f\u7528\u5230\u4e86\u540e\u8fb9 14.6 \u7ae0 \u793a\u4f8b producer_consumer.go \u7684\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u6a21\u5f0f\u3002\u901a\u5e38\uff0c\u9700\u8981\u4ece\u5305\u542b\u4e86\u5730\u5740\u7d22\u5f15\u5b57\u6bb5 items \u7684\u5bb9\u5668\u7ed9\u901a\u9053\u586b\u5165\u5143\u7d20\u3002\u4e3a\u5bb9\u5668\u7684\u7c7b\u578b\u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5 Iter() \uff0c\u8fd4\u56de\u4e00\u4e2a\u53ea\u8bfb\u7684\u901a\u9053\uff08\u53c2\u89c1\u7b2c 14.2.11 \u8282\uff09 items \uff0c\u5982\u4e0b\uff1a func ( c * container ) Iter () <- chan item { ch := make ( chan item ) go func () { for i := 0 ; i < c . Len (); i ++ { // or use a for-range loop ch <- c . items [ i ] } } () return ch } \u5728\u534f\u7a0b\u91cc\uff0c\u4e00\u4e2a for \u5faa\u73af\u8fed\u4ee3\u5bb9\u5668 c \u4e2d\u7684\u5143\u7d20\uff08\u5bf9\u4e8e\u6811\u6216\u56fe\u7684\u7b97\u6cd5\uff0c\u8fd9\u79cd\u7b80\u5355\u7684 for \u5faa\u73af\u53ef\u4ee5\u66ff\u6362\u4e3a\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff09\u3002 \u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u7684\u4ee3\u7801\u53ef\u4ee5\u8fd9\u6837\u8fed\u4ee3\u5bb9\u5668\uff1a for x := range container . Iter () { ... } \u5176\u8fd0\u884c\u5728\u81ea\u5df1\u542f\u52a8\u7684\u534f\u7a0b\u4e2d\uff0c\u6240\u4ee5\u4e0a\u8fb9\u7684\u8fed\u4ee3\u7528\u5230\u4e86\u4e00\u4e2a\u901a\u9053\u548c\u4e24\u4e2a\u534f\u7a0b\uff08\u53ef\u80fd\u8fd0\u884c\u5728\u4e0d\u540c\u7684\u7ebf\u7a0b\u4e0a\uff09\u3002 \u8fd9\u6837\u6211\u4eec\u5c31\u6709\u4e86\u4e00\u4e2a\u5178\u578b\u7684\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u6a21\u5f0f\u3002\u5982\u679c\u5728\u7a0b\u5e8f\u7ed3\u675f\u4e4b\u524d\uff0c\u5411\u901a\u9053\u5199\u503c\u7684\u534f\u7a0b\u672a\u5b8c\u6210\u5de5\u4f5c\uff0c\u5219\u8fd9\u4e2a\u534f\u7a0b\u4e0d\u4f1a\u88ab\u5783\u573e\u56de\u6536\uff1b\u8fd9\u662f\u8bbe\u8ba1\u4f7f\u7136\u3002\u8fd9\u79cd\u770b\u8d77\u6765\u5e76\u4e0d\u7b26\u5408\u9884\u671f\u7684\u884c\u4e3a\u6b63\u662f\u7531\u901a\u9053\u8fd9\u79cd\u7ebf\u7a0b\u5b89\u5168\u7684\u901a\u4fe1\u65b9\u5f0f\u6240\u5bfc\u81f4\u7684\u3002\u5982\u6b64\u4e00\u6765\uff0c\u4e00\u4e2a\u534f\u7a0b\u4e3a\u4e86\u5199\u5165\u4e00\u4e2a\u6c38\u8fdc\u65e0\u4eba\u8bfb\u53d6\u7684\u901a\u9053\u800c\u88ab\u6302\u8d77\u5c31\u6210\u4e86\u4e00\u4e2a bug \uff0c\u800c\u5e76\u975e\u4f60\u9884\u60f3\u4e2d\u7684\u90a3\u6837\u88ab\u6084\u6084\u56de\u6536\u6389 (garbage-collected) \u4e86\u3002 \u4e60\u60ef\u7528\u6cd5\uff1a\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u5f0f \u5047\u8bbe\u4f60\u6709 Produce() \u51fd\u6570\u6765\u4ea7\u751f Consume() \u51fd\u6570\u9700\u8981\u7684\u503c\u3002\u5b83\u4eec\u90fd\u53ef\u4ee5\u8fd0\u884c\u5728\u72ec\u7acb\u7684\u534f\u7a0b\u4e2d\uff0c\u751f\u4ea7\u8005\u5728\u901a\u9053\u4e2d\u653e\u5165\u7ed9\u6d88\u8d39\u8005\u8bfb\u53d6\u7684\u503c\u3002\u6574\u4e2a\u5904\u7406\u8fc7\u7a0b\u53ef\u4ee5\u66ff\u6362\u4e3a\u65e0\u9650\u5faa\u73af\uff1a for { Consume ( Produce ()) }","title":"14.2.10 \u7ed9\u901a\u9053\u4f7f\u7528 for \u5faa\u73af"},{"location":"14.2/#14211","text":"\u901a\u9053\u7c7b\u578b\u53ef\u4ee5\u7528\u6ce8\u89e3\u6765\u8868\u793a\u5b83\u53ea\u53d1\u9001\u6216\u8005\u53ea\u63a5\u6536\uff1a var send_only chan <- int // channel can only receive data var recv_only <- chan int // channel can only send data \u53ea\u63a5\u6536\u7684\u901a\u9053 ( <-chan T ) \u65e0\u6cd5\u5173\u95ed\uff0c\u56e0\u4e3a\u5173\u95ed\u901a\u9053\u662f\u53d1\u9001\u8005\u7528\u6765\u8868\u793a\u4e0d\u518d\u7ed9\u901a\u9053\u53d1\u9001\u503c\u4e86\uff0c\u6240\u4ee5\u5bf9\u53ea\u63a5\u6536\u901a\u9053\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002\u901a\u9053\u521b\u5efa\u7684\u65f6\u5019\u90fd\u662f\u53cc\u5411\u7684\uff0c\u4f46\u4e5f\u53ef\u4ee5\u5206\u914d\u7ed9\u6709\u65b9\u5411\u7684\u901a\u9053\u53d8\u91cf\uff0c\u5c31\u50cf\u4ee5\u4e0b\u4ee3\u7801\uff1a var c = make ( chan int ) // bidirectional go source ( c ) go sink ( c ) func source ( ch chan <- int ){ for { ch <- 1 } } func sink ( ch <- chan int ) { for { <- ch } } \u4e60\u60ef\u7528\u6cd5\uff1a\u7ba1\u9053\u548c\u9009\u62e9\u5668\u6a21\u5f0f \u66f4\u5177\u4f53\u7684\u4f8b\u5b50\u8fd8\u6709\u534f\u7a0b\u5904\u7406\u5b83\u4ece\u901a\u9053\u63a5\u6536\u7684\u6570\u636e\u5e76\u53d1\u9001\u7ed9\u8f93\u51fa\u901a\u9053\uff1a sendChan := make ( chan int ) receiveChan := make ( chan string ) go processChannel ( sendChan , receiveChan ) func processChannel ( in <- chan int , out chan <- string ) { for inValue := range in { result := ... /// processing inValue out <- result } } \u901a\u8fc7\u4f7f\u7528\u65b9\u5411\u6ce8\u89e3\u6765\u9650\u5236\u534f\u7a0b\u5bf9\u901a\u9053\u7684\u64cd\u4f5c\u3002 \u8fd9\u91cc\u6709\u4e00\u4e2a\u6765\u81ea Go \u6307\u5bfc\u7684\u5f88\u8d5e\u7684\u4f8b\u5b50\uff0c\u6253\u5370\u4e86\u8f93\u51fa\u7684\u7d20\u6570\uff0c\u4f7f\u7528\u9009\u62e9\u5668\uff08\u2018\u7b5b\u2019\uff09\u4f5c\u4e3a\u5b83\u7684\u7b97\u6cd5\u3002\u6bcf\u4e2a prime \u90fd\u6709\u4e00\u4e2a\u9009\u62e9\u5668\uff0c\u5982\u4e0b\u56fe\uff1a \u7248\u672c1\uff1a\u793a\u4f8b 14.7- sieve1.go // Copyright 2009 The Go Authors. All rights reserved. // Use of this source code is governed by a BSD-style // license that can be found in the LICENSE file.package main package main import \"fmt\" // Send the sequence 2, 3, 4, ... to channel 'ch'. func generate ( ch chan int ) { for i := 2 ; ; i ++ { ch <- i // Send 'i' to channel 'ch'. } } // Copy the values from channel 'in' to channel 'out', // removing those divisible by 'prime'. func filter ( in , out chan int , prime int ) { for { i := <- in // Receive value of new variable 'i' from 'in'. if i % prime != 0 { out <- i // Send 'i' to channel 'out'. } } } // The prime sieve: Daisy-chain filter processes together. func main () { ch := make ( chan int ) // Create a new channel. go generate ( ch ) // Start generate() as a goroutine. for { prime := <- ch fmt . Print ( prime , \" \" ) ch1 := make ( chan int ) go filter ( ch , ch1 , prime ) ch = ch1 } } \u534f\u7a0b filter(in, out chan int, prime int) \u62f7\u8d1d\u6574\u6570\u5230\u8f93\u51fa\u901a\u9053\uff0c\u4e22\u5f03\u6389\u53ef\u4ee5\u88ab prime \u6574\u9664\u7684\u6570\u5b57\u3002\u7136\u540e\u6bcf\u4e2a prime \u53c8\u5f00\u542f\u4e86\u4e00\u4e2a\u65b0\u7684\u534f\u7a0b\uff0c\u751f\u6210\u5668\u548c\u9009\u62e9\u5668\u5e76\u53d1\u8bf7\u6c42\u3002 \u8f93\u51fa\uff1au7b2c\u4e8c\u4e2a\u7248\u672c\u5f15\u5165\u4e86\u4e0a\u8fb9\u7684\u4e60\u60ef\u7528\u6cd5\uff1a\u51fd\u6570 sieve() \u3001 generate() \u548c filter() \u90fd\u662f\u5de5\u5382\uff1b\u5b83\u4eec\u521b\u5efa\u901a\u9053\u5e76\u8fd4\u56de\uff0c\u800c\u4e14\u4f7f\u7528\u4e86\u534f\u7a0b\u7684 lambda \u51fd\u6570\u3002 main() \u51fd\u6570\u73b0\u5728\u77ed\u5c0f\u6e05\u6670\uff1a\u5b83\u8c03\u7528 sieve() \u8fd4\u56de\u4e86\u5305\u542b\u7d20\u6570\u7684\u901a\u9053\uff0c\u7136\u540e\u901a\u8fc7 fmt.Println(<-primes) \u6253\u5370\u51fa\u6765\u3002 \u7248\u672c2\uff1a\u793a\u4f8b 14.8- sieve2.go // Copyright 2009 The Go Authors. All rights reserved. // Use of this source code is governed by a BSD-style // license that can be found in the LICENSE file. package main import ( \"fmt\" ) // Send the sequence 2, 3, 4, ... to returned channel func generate () chan int { ch := make ( chan int ) go func () { for i := 2 ; ; i ++ { ch <- i } }() return ch } // Filter out input values divisible by 'prime', send rest to returned channel func filter ( in chan int , prime int ) chan int { out := make ( chan int ) go func () { for { if i := <- in ; i % prime != 0 { out <- i } } }() return out } func sieve () chan int { out := make ( chan int ) go func () { ch := generate () for { prime := <- ch ch = filter ( ch , prime ) out <- prime } }() return out } func main () { primes := sieve () for { fmt . Println ( <- primes ) } }","title":"14.2.11 \u901a\u9053\u7684\u65b9\u5411"},{"location":"14.2/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5e76\u53d1\u3001\u5e76\u884c\u548c\u534f\u7a0b \u4e0b\u4e00\u8282\uff1a \u534f\u7a0b\u540c\u6b65\uff1a\u5173\u95ed\u901a\u9053-\u6d4b\u8bd5\u963b\u585e\u7684\u901a\u9053","title":"\u94fe\u63a5"},{"location":"14.3/","text":"14.3 \u534f\u7a0b\u7684\u540c\u6b65\uff1a\u5173\u95ed\u901a\u9053-\u6d4b\u8bd5\u963b\u585e\u7684\u901a\u9053 \u00b6 \u901a\u9053\u53ef\u4ee5\u88ab\u663e\u5f0f\u7684\u5173\u95ed\uff1b\u5c3d\u7ba1\u5b83\u4eec\u548c\u6587\u4ef6\u4e0d\u540c\uff1a\u4e0d\u5fc5\u6bcf\u6b21\u90fd\u5173\u95ed\u3002\u53ea\u6709\u5728\u5f53\u9700\u8981\u544a\u8bc9\u63a5\u6536\u8005\u4e0d\u4f1a\u518d\u63d0\u4f9b\u65b0\u7684\u503c\u7684\u65f6\u5019\uff0c\u624d\u9700\u8981\u5173\u95ed\u901a\u9053\u3002\u53ea\u6709\u53d1\u9001\u8005\u9700\u8981\u5173\u95ed\u901a\u9053\uff0c\u63a5\u6536\u8005\u6c38\u8fdc\u4e0d\u4f1a\u9700\u8981\u3002 \u7ee7\u7eed\u770b\u793a\u4f8b goroutine2.go \uff08\u793a\u4f8b 14.2\uff09\uff1a\u6211\u4eec\u5982\u4f55\u5728\u901a\u9053\u7684 sendData() \u5b8c\u6210\u7684\u65f6\u5019\u53d1\u9001\u4e00\u4e2a\u4fe1\u53f7\uff0c getData() \u53c8\u5982\u4f55\u68c0\u6d4b\u5230\u901a\u9053\u662f\u5426\u5173\u95ed\u6216\u963b\u585e\uff1f \u7b2c\u4e00\u4e2a\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570 close(ch) \u6765\u5b8c\u6210\uff1a\u8fd9\u4e2a\u5c06\u901a\u9053\u6807\u8bb0\u4e3a\u65e0\u6cd5\u901a\u8fc7\u53d1\u9001\u64cd\u4f5c <- \u63a5\u53d7\u66f4\u591a\u7684\u503c\uff1b\u7ed9\u5df2\u7ecf\u5173\u95ed\u7684\u901a\u9053\u53d1\u9001\u6216\u8005\u518d\u6b21\u5173\u95ed\u90fd\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6\u7684 panic() \u3002\u5728\u521b\u5efa\u4e00\u4e2a\u901a\u9053\u540e\u4f7f\u7528 defer \u8bed\u53e5\u662f\u4e2a\u4e0d\u9519\u7684\u529e\u6cd5\uff08\u7c7b\u4f3c\u8fd9\u79cd\u60c5\u51b5\uff09\uff1a ch := make ( chan float64 ) defer close ( ch ) \u7b2c\u4e8c\u4e2a\u95ee\u9898\u53ef\u4ee5\u4f7f\u7528\u9017\u53f7 ok \u6a21\u5f0f\u7528\u6765\u68c0\u6d4b\u901a\u9053\u662f\u5426\u88ab\u5173\u95ed\u3002 \u5982\u4f55\u6765\u68c0\u6d4b\u53ef\u4ee5\u6536\u5230\u6ca1\u6709\u88ab\u963b\u585e\uff08\u6216\u8005\u901a\u9053\u6ca1\u6709\u88ab\u5173\u95ed\uff09\uff1f v , ok := <- ch // ok is true if v received value \u901a\u5e38\u548c if \u8bed\u53e5\u4e00\u8d77\u4f7f\u7528\uff1a if v , ok := <- ch ; ok { process ( v ) } \u6216\u8005\u5728 for \u5faa\u73af\u4e2d\u63a5\u6536\u7684\u65f6\u5019\uff0c\u5f53\u5173\u95ed\u7684\u65f6\u5019\u4f7f\u7528 break \uff1a v , ok := <- ch if ! ok { break } process ( v ) \u800c\u68c0\u6d4b\u901a\u9053\u5f53\u524d\u662f\u5426\u963b\u585e\uff0c\u9700\u8981\u4f7f\u7528 select \uff08\u53c2\u89c1\u7b2c 14.4 \u8282\uff09\u3002 select { case v , ok := <- ch : if ok { process ( v ) } else { fmt . Println ( \"The channel is closed\" ) } default : fmt . Println ( \"The channel is blocked\" ) } \u5728\u793a\u4f8b\u7a0b\u5e8f 14.2 \u4e2d\u4f7f\u7528\u8fd9\u4e9b\u53ef\u4ee5\u6539\u8fdb\u4e3a\u7248\u672c goroutine3.go \uff0c\u8f93\u51fa\u76f8\u540c\u3002 \u5b9e\u73b0\u975e\u963b\u585e\u901a\u9053\u7684\u8bfb\u53d6\uff0c\u9700\u8981\u4f7f\u7528 select \uff08\u53c2\u89c1\u7b2c 14.4 \u8282\uff09\u3002 \u793a\u4f8b 14.9- goroutine3.go \uff1a package main import \"fmt\" func main () { ch := make ( chan string ) go sendData ( ch ) getData ( ch ) } func sendData ( ch chan string ) { ch <- \"Washington\" ch <- \"Tripoli\" ch <- \"London\" ch <- \"Beijing\" ch <- \"Tokio\" close ( ch ) } func getData ( ch chan string ) { for { input , open := <- ch if ! open { break } fmt . Printf ( \"%s \" , input ) } } \u6539\u53d8\u4e86\u4ee5\u4e0b\u4ee3\u7801\uff1a \u73b0\u5728\u53ea\u6709 sendData() \u662f\u534f\u7a0b\uff0c getData() \u548c main() \u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\uff1a go sendData ( ch ) getData ( ch ) \u5728 sendData() \u51fd\u6570\u7684\u6700\u540e\uff0c\u5173\u95ed\u4e86\u901a\u9053\uff1a func sendData ( ch chan string ) { ch <- \"Washington\" ch <- \"Tripoli\" ch <- \"London\" ch <- \"Beijing\" ch <- \"Tokio\" close ( ch ) } \u5728 for \u5faa\u73af\u7684 getData() \u4e2d\uff0c\u5728\u6bcf\u6b21\u63a5\u6536\u901a\u9053\u7684\u6570\u636e\u4e4b\u524d\u90fd\u4f7f\u7528 if !open \u6765\u68c0\u6d4b\uff1a for { input , open := <- ch if ! open { break } fmt . Printf ( \"%s \" , input ) } \u4f7f\u7528 for-range \u8bed\u53e5\u6765\u8bfb\u53d6\u901a\u9053\u662f\u66f4\u597d\u7684\u529e\u6cd5\uff0c\u56e0\u4e3a\u8fd9\u4f1a\u81ea\u52a8\u68c0\u6d4b\u901a\u9053\u662f\u5426\u5173\u95ed\uff1a for input := range ch { process ( input ) } \u963b\u585e\u548c\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u6a21\u5f0f\uff1a \u5728 \u7b2c 14.2.10 \u8282 \u7684\u901a\u9053\u8fed\u4ee3\u5668\u4e2d\uff0c\u4e24\u4e2a\u534f\u7a0b\u7ecf\u5e38\u662f\u4e00\u4e2a\u963b\u585e\u53e6\u5916\u4e00\u4e2a\u3002\u5982\u679c\u7a0b\u5e8f\u5de5\u4f5c\u5728\u591a\u6838\u5fc3\u7684\u673a\u5668\u4e0a\uff0c\u5927\u90e8\u5206\u65f6\u95f4\u53ea\u7528\u5230\u4e86\u4e00\u4e2a\u5904\u7406\u5668\u3002\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u5e26\u7f13\u51b2\uff08\u7f13\u51b2\u7a7a\u95f4\u5927\u4e8e 0\uff09\u7684\u901a\u9053\u6765\u6539\u5584\u3002\u6bd4\u5982\uff0c\u7f13\u51b2\u5927\u5c0f\u4e3a 100\uff0c\u8fed\u4ee3\u5668\u5728\u963b\u585e\u4e4b\u524d\uff0c\u81f3\u5c11\u53ef\u4ee5\u4ece\u5bb9\u5668\u83b7\u5f97 100 \u4e2a\u5143\u7d20\u3002\u5982\u679c\u6d88\u8d39\u8005\u534f\u7a0b\u5728\u72ec\u7acb\u7684\u5185\u6838\u8fd0\u884c\uff0c\u5c31\u6709\u53ef\u80fd\u8ba9\u534f\u7a0b\u4e0d\u4f1a\u51fa\u73b0\u963b\u585e\u3002 \u7531\u4e8e\u5bb9\u5668\u4e2d\u5143\u7d20\u7684\u6570\u91cf\u901a\u5e38\u662f\u5df2\u77e5\u7684\uff0c\u9700\u8981\u8ba9\u901a\u9053\u6709\u8db3\u591f\u7684\u5bb9\u91cf\u653e\u7f6e\u6240\u6709\u7684\u5143\u7d20\u3002\u8fd9\u6837\uff0c\u8fed\u4ee3\u5668\u5c31\u4e0d\u4f1a\u963b\u585e\uff08\u5c3d\u7ba1\u6d88\u8d39\u8005\u534f\u7a0b\u4ecd\u7136\u53ef\u80fd\u963b\u585e\uff09\u3002\u7136\u800c\uff0c\u8fd9\u5b9e\u9645\u4e0a\u52a0\u500d\u4e86\u8fed\u4ee3\u5bb9\u5668\u6240\u9700\u8981\u7684\u5185\u5b58\u4f7f\u7528\u91cf\uff0c\u6240\u4ee5\u901a\u9053\u7684\u5bb9\u91cf\u9700\u8981\u9650\u5236\u4e00\u4e0b\u6700\u5927\u503c\u3002\u8bb0\u5f55\u8fd0\u884c\u65f6\u95f4\u548c\u6027\u80fd\u6d4b\u8bd5\u53ef\u4ee5\u5e2e\u52a9\u4f60\u627e\u5230\u6700\u5c0f\u7684\u7f13\u5b58\u5bb9\u91cf\u5e26\u6765\u6700\u597d\u7684\u6027\u80fd\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u534f\u7a0b\u95f4\u7684\u4fe1\u9053 \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528 select \u5207\u6362\u534f\u7a0b","title":"14.3 \u534f\u7a0b\u7684\u540c\u6b65\uff1a\u5173\u95ed\u901a\u9053-\u6d4b\u8bd5\u963b\u585e\u7684\u901a\u9053"},{"location":"14.3/#143-","text":"\u901a\u9053\u53ef\u4ee5\u88ab\u663e\u5f0f\u7684\u5173\u95ed\uff1b\u5c3d\u7ba1\u5b83\u4eec\u548c\u6587\u4ef6\u4e0d\u540c\uff1a\u4e0d\u5fc5\u6bcf\u6b21\u90fd\u5173\u95ed\u3002\u53ea\u6709\u5728\u5f53\u9700\u8981\u544a\u8bc9\u63a5\u6536\u8005\u4e0d\u4f1a\u518d\u63d0\u4f9b\u65b0\u7684\u503c\u7684\u65f6\u5019\uff0c\u624d\u9700\u8981\u5173\u95ed\u901a\u9053\u3002\u53ea\u6709\u53d1\u9001\u8005\u9700\u8981\u5173\u95ed\u901a\u9053\uff0c\u63a5\u6536\u8005\u6c38\u8fdc\u4e0d\u4f1a\u9700\u8981\u3002 \u7ee7\u7eed\u770b\u793a\u4f8b goroutine2.go \uff08\u793a\u4f8b 14.2\uff09\uff1a\u6211\u4eec\u5982\u4f55\u5728\u901a\u9053\u7684 sendData() \u5b8c\u6210\u7684\u65f6\u5019\u53d1\u9001\u4e00\u4e2a\u4fe1\u53f7\uff0c getData() \u53c8\u5982\u4f55\u68c0\u6d4b\u5230\u901a\u9053\u662f\u5426\u5173\u95ed\u6216\u963b\u585e\uff1f \u7b2c\u4e00\u4e2a\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570 close(ch) \u6765\u5b8c\u6210\uff1a\u8fd9\u4e2a\u5c06\u901a\u9053\u6807\u8bb0\u4e3a\u65e0\u6cd5\u901a\u8fc7\u53d1\u9001\u64cd\u4f5c <- \u63a5\u53d7\u66f4\u591a\u7684\u503c\uff1b\u7ed9\u5df2\u7ecf\u5173\u95ed\u7684\u901a\u9053\u53d1\u9001\u6216\u8005\u518d\u6b21\u5173\u95ed\u90fd\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6\u7684 panic() \u3002\u5728\u521b\u5efa\u4e00\u4e2a\u901a\u9053\u540e\u4f7f\u7528 defer \u8bed\u53e5\u662f\u4e2a\u4e0d\u9519\u7684\u529e\u6cd5\uff08\u7c7b\u4f3c\u8fd9\u79cd\u60c5\u51b5\uff09\uff1a ch := make ( chan float64 ) defer close ( ch ) \u7b2c\u4e8c\u4e2a\u95ee\u9898\u53ef\u4ee5\u4f7f\u7528\u9017\u53f7 ok \u6a21\u5f0f\u7528\u6765\u68c0\u6d4b\u901a\u9053\u662f\u5426\u88ab\u5173\u95ed\u3002 \u5982\u4f55\u6765\u68c0\u6d4b\u53ef\u4ee5\u6536\u5230\u6ca1\u6709\u88ab\u963b\u585e\uff08\u6216\u8005\u901a\u9053\u6ca1\u6709\u88ab\u5173\u95ed\uff09\uff1f v , ok := <- ch // ok is true if v received value \u901a\u5e38\u548c if \u8bed\u53e5\u4e00\u8d77\u4f7f\u7528\uff1a if v , ok := <- ch ; ok { process ( v ) } \u6216\u8005\u5728 for \u5faa\u73af\u4e2d\u63a5\u6536\u7684\u65f6\u5019\uff0c\u5f53\u5173\u95ed\u7684\u65f6\u5019\u4f7f\u7528 break \uff1a v , ok := <- ch if ! ok { break } process ( v ) \u800c\u68c0\u6d4b\u901a\u9053\u5f53\u524d\u662f\u5426\u963b\u585e\uff0c\u9700\u8981\u4f7f\u7528 select \uff08\u53c2\u89c1\u7b2c 14.4 \u8282\uff09\u3002 select { case v , ok := <- ch : if ok { process ( v ) } else { fmt . Println ( \"The channel is closed\" ) } default : fmt . Println ( \"The channel is blocked\" ) } \u5728\u793a\u4f8b\u7a0b\u5e8f 14.2 \u4e2d\u4f7f\u7528\u8fd9\u4e9b\u53ef\u4ee5\u6539\u8fdb\u4e3a\u7248\u672c goroutine3.go \uff0c\u8f93\u51fa\u76f8\u540c\u3002 \u5b9e\u73b0\u975e\u963b\u585e\u901a\u9053\u7684\u8bfb\u53d6\uff0c\u9700\u8981\u4f7f\u7528 select \uff08\u53c2\u89c1\u7b2c 14.4 \u8282\uff09\u3002 \u793a\u4f8b 14.9- goroutine3.go \uff1a package main import \"fmt\" func main () { ch := make ( chan string ) go sendData ( ch ) getData ( ch ) } func sendData ( ch chan string ) { ch <- \"Washington\" ch <- \"Tripoli\" ch <- \"London\" ch <- \"Beijing\" ch <- \"Tokio\" close ( ch ) } func getData ( ch chan string ) { for { input , open := <- ch if ! open { break } fmt . Printf ( \"%s \" , input ) } } \u6539\u53d8\u4e86\u4ee5\u4e0b\u4ee3\u7801\uff1a \u73b0\u5728\u53ea\u6709 sendData() \u662f\u534f\u7a0b\uff0c getData() \u548c main() \u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\uff1a go sendData ( ch ) getData ( ch ) \u5728 sendData() \u51fd\u6570\u7684\u6700\u540e\uff0c\u5173\u95ed\u4e86\u901a\u9053\uff1a func sendData ( ch chan string ) { ch <- \"Washington\" ch <- \"Tripoli\" ch <- \"London\" ch <- \"Beijing\" ch <- \"Tokio\" close ( ch ) } \u5728 for \u5faa\u73af\u7684 getData() \u4e2d\uff0c\u5728\u6bcf\u6b21\u63a5\u6536\u901a\u9053\u7684\u6570\u636e\u4e4b\u524d\u90fd\u4f7f\u7528 if !open \u6765\u68c0\u6d4b\uff1a for { input , open := <- ch if ! open { break } fmt . Printf ( \"%s \" , input ) } \u4f7f\u7528 for-range \u8bed\u53e5\u6765\u8bfb\u53d6\u901a\u9053\u662f\u66f4\u597d\u7684\u529e\u6cd5\uff0c\u56e0\u4e3a\u8fd9\u4f1a\u81ea\u52a8\u68c0\u6d4b\u901a\u9053\u662f\u5426\u5173\u95ed\uff1a for input := range ch { process ( input ) } \u963b\u585e\u548c\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u6a21\u5f0f\uff1a \u5728 \u7b2c 14.2.10 \u8282 \u7684\u901a\u9053\u8fed\u4ee3\u5668\u4e2d\uff0c\u4e24\u4e2a\u534f\u7a0b\u7ecf\u5e38\u662f\u4e00\u4e2a\u963b\u585e\u53e6\u5916\u4e00\u4e2a\u3002\u5982\u679c\u7a0b\u5e8f\u5de5\u4f5c\u5728\u591a\u6838\u5fc3\u7684\u673a\u5668\u4e0a\uff0c\u5927\u90e8\u5206\u65f6\u95f4\u53ea\u7528\u5230\u4e86\u4e00\u4e2a\u5904\u7406\u5668\u3002\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u5e26\u7f13\u51b2\uff08\u7f13\u51b2\u7a7a\u95f4\u5927\u4e8e 0\uff09\u7684\u901a\u9053\u6765\u6539\u5584\u3002\u6bd4\u5982\uff0c\u7f13\u51b2\u5927\u5c0f\u4e3a 100\uff0c\u8fed\u4ee3\u5668\u5728\u963b\u585e\u4e4b\u524d\uff0c\u81f3\u5c11\u53ef\u4ee5\u4ece\u5bb9\u5668\u83b7\u5f97 100 \u4e2a\u5143\u7d20\u3002\u5982\u679c\u6d88\u8d39\u8005\u534f\u7a0b\u5728\u72ec\u7acb\u7684\u5185\u6838\u8fd0\u884c\uff0c\u5c31\u6709\u53ef\u80fd\u8ba9\u534f\u7a0b\u4e0d\u4f1a\u51fa\u73b0\u963b\u585e\u3002 \u7531\u4e8e\u5bb9\u5668\u4e2d\u5143\u7d20\u7684\u6570\u91cf\u901a\u5e38\u662f\u5df2\u77e5\u7684\uff0c\u9700\u8981\u8ba9\u901a\u9053\u6709\u8db3\u591f\u7684\u5bb9\u91cf\u653e\u7f6e\u6240\u6709\u7684\u5143\u7d20\u3002\u8fd9\u6837\uff0c\u8fed\u4ee3\u5668\u5c31\u4e0d\u4f1a\u963b\u585e\uff08\u5c3d\u7ba1\u6d88\u8d39\u8005\u534f\u7a0b\u4ecd\u7136\u53ef\u80fd\u963b\u585e\uff09\u3002\u7136\u800c\uff0c\u8fd9\u5b9e\u9645\u4e0a\u52a0\u500d\u4e86\u8fed\u4ee3\u5bb9\u5668\u6240\u9700\u8981\u7684\u5185\u5b58\u4f7f\u7528\u91cf\uff0c\u6240\u4ee5\u901a\u9053\u7684\u5bb9\u91cf\u9700\u8981\u9650\u5236\u4e00\u4e0b\u6700\u5927\u503c\u3002\u8bb0\u5f55\u8fd0\u884c\u65f6\u95f4\u548c\u6027\u80fd\u6d4b\u8bd5\u53ef\u4ee5\u5e2e\u52a9\u4f60\u627e\u5230\u6700\u5c0f\u7684\u7f13\u5b58\u5bb9\u91cf\u5e26\u6765\u6700\u597d\u7684\u6027\u80fd\u3002","title":"14.3 \u534f\u7a0b\u7684\u540c\u6b65\uff1a\u5173\u95ed\u901a\u9053-\u6d4b\u8bd5\u963b\u585e\u7684\u901a\u9053"},{"location":"14.3/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u534f\u7a0b\u95f4\u7684\u4fe1\u9053 \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528 select \u5207\u6362\u534f\u7a0b","title":"\u94fe\u63a5"},{"location":"14.4/","text":"14.4 \u4f7f\u7528 select \u5207\u6362\u534f\u7a0b \u00b6 \u4ece\u4e0d\u540c\u7684\u5e76\u53d1\u6267\u884c\u7684\u534f\u7a0b\u4e2d\u83b7\u53d6\u503c\u53ef\u4ee5\u901a\u8fc7\u5173\u952e\u5b57 select \u6765\u5b8c\u6210\uff0c\u5b83\u548c switch \u63a7\u5236\u8bed\u53e5\u975e\u5e38\u76f8\u4f3c\uff08 \u7ae0\u8282 5.3 \uff09\u4e5f\u88ab\u79f0\u4f5c\u901a\u4fe1\u5f00\u5173\uff1b\u5b83\u7684\u884c\u4e3a\u50cf\u662f\u201c\u4f60\u51c6\u5907\u597d\u4e86\u5417\u201d\u7684\u8f6e\u8be2\u673a\u5236\uff1b select \u76d1\u542c\u8fdb\u5165\u901a\u9053\u7684\u6570\u636e\uff0c\u4e5f\u53ef\u4ee5\u662f\u7528\u901a\u9053\u53d1\u9001\u503c\u7684\u65f6\u5019\u3002 select { case u := <- ch1 : ... case v := <- ch2 : ... ... default : // no value ready to be received ... } default \u8bed\u53e5\u662f\u53ef\u9009\u7684\uff1b fallthrough \u884c\u4e3a\uff0c\u548c\u666e\u901a\u7684 switch \u76f8\u4f3c\uff0c\u662f\u4e0d\u5141\u8bb8\u7684\u3002\u5728\u4efb\u4f55\u4e00\u4e2a case \u4e2d\u6267\u884c break \u6216\u8005 return \uff0cselect \u5c31\u7ed3\u675f\u4e86\u3002 select \u505a\u7684\u5c31\u662f\uff1a\u9009\u62e9\u5904\u7406\u5217\u51fa\u7684\u591a\u4e2a\u901a\u4fe1\u60c5\u51b5\u4e2d\u7684\u4e00\u4e2a\u3002 \u5982\u679c\u90fd\u963b\u585e\u4e86\uff0c\u4f1a\u7b49\u5f85\u76f4\u5230\u5176\u4e2d\u4e00\u4e2a\u53ef\u4ee5\u5904\u7406 \u5982\u679c\u591a\u4e2a\u53ef\u4ee5\u5904\u7406\uff0c\u968f\u673a\u9009\u62e9\u4e00\u4e2a \u5982\u679c\u6ca1\u6709\u901a\u9053\u64cd\u4f5c\u53ef\u4ee5\u5904\u7406\u5e76\u4e14\u5199\u4e86 default \u8bed\u53e5\uff0c\u5b83\u5c31\u4f1a\u6267\u884c\uff1a default \u6c38\u8fdc\u662f\u53ef\u8fd0\u884c\u7684\uff08\u8fd9\u5c31\u662f\u51c6\u5907\u597d\u4e86\uff0c\u53ef\u4ee5\u6267\u884c\uff09\u3002 \u5728 select \u4e2d\u4f7f\u7528\u53d1\u9001\u64cd\u4f5c\u5e76\u4e14\u6709 default \u53ef\u4ee5\u786e\u4fdd\u53d1\u9001\u4e0d\u88ab\u963b\u585e\uff01\u5982\u679c\u6ca1\u6709 default \uff0c select \u5c31\u4f1a\u4e00\u76f4\u963b\u585e\u3002 select \u8bed\u53e5\u5b9e\u73b0\u4e86\u4e00\u79cd\u76d1\u542c\u6a21\u5f0f\uff0c\u901a\u5e38\u7528\u5728\uff08\u65e0\u9650\uff09\u5faa\u73af\u4e2d\uff1b\u5728\u67d0\u79cd\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7 break \u8bed\u53e5\u4f7f\u5faa\u73af\u9000\u51fa\u3002 \u5728\u7a0b\u5e8f goroutine_select.go \u4e2d\u6709 2 \u4e2a\u901a\u9053 ch1 \u548c ch2 \uff0c\u4e09\u4e2a\u534f\u7a0b pump1() \u3001 pump2() \u548c suck() \u3002\u8fd9\u662f\u4e00\u4e2a\u5178\u578b\u7684\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u5f0f\u3002\u5728\u65e0\u9650\u5faa\u73af\u4e2d\uff0c ch1 \u548c ch2 \u901a\u8fc7 pump1() \u548c pump2() \u586b\u5145\u6574\u6570\uff1b suck() \u4e5f\u662f\u5728\u65e0\u9650\u5faa\u73af\u4e2d\u8f6e\u8be2\u8f93\u5165\u7684\uff0c\u901a\u8fc7 select \u8bed\u53e5\u83b7\u53d6 ch1 \u548c ch2 \u7684\u6574\u6570\u5e76\u8f93\u51fa\u3002\u9009\u62e9\u54ea\u4e00\u4e2a case \u53d6\u51b3\u4e8e\u54ea\u4e00\u4e2a\u901a\u9053\u6536\u5230\u4e86\u4fe1\u606f\u3002\u7a0b\u5e8f\u5728 main \u6267\u884c 1 \u79d2\u540e\u7ed3\u675f\u3002 \u793a\u4f8b 14.10- goroutine_select.go \uff1a package main import ( \"fmt\" \"time\" ) func main () { ch1 := make ( chan int ) ch2 := make ( chan int ) go pump1 ( ch1 ) go pump2 ( ch2 ) go suck ( ch1 , ch2 ) time . Sleep ( 1e9 ) } func pump1 ( ch chan int ) { for i := 0 ; ; i ++ { ch <- i * 2 } } func pump2 ( ch chan int ) { for i := 0 ; ; i ++ { ch <- i + 5 } } func suck ( ch1 , ch2 chan int ) { for { select { case v := <- ch1 : fmt . Printf ( \"Received on channel 1: %d\\n\" , v ) case v := <- ch2 : fmt . Printf ( \"Received on channel 2: %d\\n\" , v ) } } } \u8f93\u51fa\uff1a Received on channel 2: 5 Received on channel 2: 6 Received on channel 1: 0 Received on channel 2: 7 Received on channel 2: 8 Received on channel 2: 9 Received on channel 2: 10 Received on channel 1: 2 Received on channel 2: 11 ... Received on channel 2: 47404 Received on channel 1: 94346 Received on channel 1: 94348 \u4e00\u79d2\u5185\u7684\u8f93\u51fa\u975e\u5e38\u60ca\u4eba\uff0c\u5982\u679c\u6211\u4eec\u7ed9\u5b83\u8ba1\u6570 ( goroutine_select2.go )\uff0c\u5f97\u5230\u4e86 90000 \u4e2a\u5de6\u53f3\u7684\u6570\u5b57\u3002 \u7ec3\u4e60\uff1a \u00b6 \u7ec3\u4e60 14.7\uff1a a\uff09\u5728\u7ec3\u4e60 5.4 \u7684 for_loop.go \u4e2d\uff0c\u6709\u4e00\u4e2a\u5e38\u89c1\u7684 for \u5faa\u73af\u6253\u5370\u6570\u5b57\u3002\u5728\u51fd\u6570 tel() \u4e2d\u5b9e\u73b0\u4e00\u4e2a for \u5faa\u73af\uff0c\u7528\u534f\u7a0b\u5f00\u59cb\u8fd9\u4e2a\u51fd\u6570\u5e76\u5728\u5176\u4e2d\u7ed9\u901a\u9053\u53d1\u9001\u6570\u5b57\u3002 main() \u7ebf\u7a0b\u4ece\u901a\u9053\u4e2d\u83b7\u53d6\u5e76\u6253\u5370\u3002\u4e0d\u8981\u4f7f\u7528 time.Sleep() \u6765\u540c\u6b65\uff1a goroutine_panic.go b\uff09\u4e5f\u8bb8\u4f60\u7684\u65b9\u6848\u6709\u6548\uff0c\u4f46\u53ef\u80fd\u4f1a\u5f15\u53d1\u8fd0\u884c\u65f6\u7684 panic() \uff1a throw:all goroutines are asleep-deadlock! \u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\uff1f\u4f60\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1f goroutine_close.go c\uff09\u89e3\u51b3 a\uff09\u7684\u53e6\u5916\u4e00\u79cd\u65b9\u5f0f\uff1a\u4f7f\u7528\u4e00\u4e2a\u989d\u5916\u7684\u901a\u9053\u4f20\u9012\u7ed9\u534f\u7a0b\uff0c\u7136\u540e\u5728\u7ed3\u675f\u7684\u65f6\u5019\u968f\u4fbf\u653e\u70b9\u4ec0\u4e48\u8fdb\u53bb\u3002 main() \u7ebf\u7a0b\u68c0\u67e5\u662f\u5426\u6709\u6570\u636e\u53d1\u9001\u7ed9\u4e86\u8fd9\u4e2a\u901a\u9053\uff0c\u5982\u679c\u6709\u5c31\u505c\u6b62\uff1a goroutine_select.go \u7ec3\u4e60 14.8\uff1a \u4ece\u793a\u4f8b 6.13 fibonacci.go \u7684\u6590\u6ce2\u90a3\u5951\u7a0b\u5e8f\u5f00\u59cb\uff0c\u5236\u5b9a\u89e3\u51b3\u65b9\u6848\uff0c\u4f7f\u6590\u6ce2\u90a3\u5951\u5468\u671f\u8ba1\u7b97\u72ec\u7acb\u5230\u534f\u7a0b\u4e2d\uff0c\u5e76\u53ef\u4ee5\u628a\u7ed3\u679c\u53d1\u9001\u7ed9\u901a\u9053\u3002 \u7ed3\u675f\u7684\u65f6\u5019\u5173\u95ed\u901a\u9053\u3002 main() \u51fd\u6570\u8bfb\u53d6\u901a\u9053\u5e76\u6253\u5370\u7ed3\u679c\uff1a goFibonacci.go \u4f7f\u7528\u7ec3\u4e60 6.9 fibonacci2.go \u4e2d\u7684\u7b97\u6cd5\u5199\u4e00\u4e2a\u66f4\u77ed\u7684 gofibonacci2.go \u4f7f\u7528 select \u8bed\u53e5\u6765\u5199\uff0c\u5e76\u8ba9\u901a\u9053\u9000\u51fa ( gofibonacci_select.go ) \u6ce8\u610f\uff1a\u5f53\u7ed9\u7ed3\u679c\u8ba1\u65f6\u5e76\u548c 6.13 \u5bf9\u6bd4\u65f6\uff0c\u6211\u4eec\u53d1\u73b0\u4f7f\u7528\u901a\u9053\u901a\u4fe1\u7684\u6027\u80fd\u5f00\u9500\u6709\u8f7b\u5fae\u524a\u51cf\uff1b\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684\u7b97\u6cd5\u4f7f\u7528\u534f\u7a0b\u5e76\u975e\u6027\u80fd\u6700\u597d\u7684\u9009\u62e9\uff1b\u4f46\u662f gofibonacci3 \u65b9\u6848\u4f7f\u7528\u4e86 2 \u4e2a\u534f\u7a0b\u5e26\u6765\u4e86 3 \u500d\u7684\u63d0\u901f\u3002 \u7ec3\u4e60 14.9\uff1a \u505a\u4e00\u4e2a\u968f\u673a\u4f4d\u751f\u6210\u5668\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u63d0\u4f9b\u65e0\u9650\u7684\u968f\u673a 0 \u6216\u8005 1 \u7684\u5e8f\u5217\uff1a random_bitgen.go \u7ec3\u4e60 14.10\uff1a polar_to_cartesian.go \uff08\u8fd9\u662f\u4e00\u79cd\u7efc\u5408\u7ec3\u4e60\uff0c\u4f7f\u7528\u5230\u7b2c 4\u30019\u300111 \u7ae0\u548c\u672c\u7ae0\u7684\u5185\u5bb9\u3002\uff09\u5199\u4e00\u4e2a\u53ef\u4ea4\u4e92\u7684\u63a7\u5236\u53f0\u7a0b\u5e8f\uff0c\u8981\u6c42\u7528\u6237\u8f93\u5165\u4e8c\u4f4d\u5e73\u9762\u6781\u5750\u6807\u4e0a\u7684\u70b9\uff08\u534a\u5f84\u548c\u89d2\u5ea6\uff08\u5ea6\uff09\uff09\u3002\u8ba1\u7b97\u5bf9\u5e94\u7684\u7b1b\u5361\u5c14\u5750\u6807\u7cfb\u7684\u70b9\u7684 x \u548c y \u5e76\u8f93\u51fa\u3002\u4f7f\u7528\u6781\u5750\u6807\u548c\u7b1b\u5361\u5c14\u5750\u6807\u7684\u7ed3\u6784\u4f53\u3002 \u4f7f\u7528\u901a\u9053\u548c\u534f\u7a0b\uff1a channel1 \u7528\u6765\u63a5\u6536\u6781\u5750\u6807 channel2 \u7528\u6765\u63a5\u6536\u7b1b\u5361\u5c14\u5750\u6807 \u8f6c\u6362\u8fc7\u7a0b\u9700\u8981\u5728\u534f\u7a0b\u4e2d\u8fdb\u884c\uff0c\u4ece channel1 \u4e2d\u8bfb\u53d6\u7136\u540e\u53d1\u9001\u5230 channel2 \u3002\u5b9e\u9645\u4e0a\u505a\u8fd9\u79cd\u8ba1\u7b97\u4e0d\u63d0\u5021\u4f7f\u7528\u534f\u7a0b\u548c\u901a\u9053\uff0c\u4f46\u662f\u5982\u679c\u8fd0\u7b97\u91cf\u5f88\u5927\u5f88\u8017\u65f6\uff0c\u8fd9\u79cd\u65b9\u6848\u8bbe\u8ba1\u5c31\u975e\u5e38\u5408\u9002\u4e86\u3002 \u7ec3\u4e60 14.11\uff1a concurrent_pi.go / concurrent_pi2.go \u4f7f\u7528\u4ee5\u4e0b\u5e8f\u5217\u5728\u534f\u7a0b\u4e2d\u8ba1\u7b97 pi\uff1a\u5f00\u542f\u4e00\u4e2a\u534f\u7a0b\u6765\u8ba1\u7b97\u516c\u5f0f\u4e2d\u7684\u6bcf\u4e00\u9879\u5e76\u5c06\u7ed3\u679c\u653e\u5165\u901a\u9053\uff0c main() \u51fd\u6570\u6536\u96c6\u5e76\u7d2f\u52a0\u7ed3\u679c\uff0c\u6253\u5370\u51fa pi \u7684\u8fd1\u4f3c\u503c\u3002 \u8ba1\u7b97\u6267\u884c\u65f6\u95f4\uff08\u53c2\u89c1\u7b2c 6.11 \u8282\uff09 \u518d\u6b21\u58f0\u660e\u8fd9\u53ea\u662f\u4e3a\u4e86\u4e00\u8fb9\u7ec3\u4e60\u534f\u7a0b\u7684\u6982\u5ff5\u4e00\u8fb9\u627e\u70b9\u4e50\u5b50\u3002 \u5982\u679c\u4f60\u9700\u8981\u7684\u8bdd\u53ef\u4f7f\u7528 math.pi \u4e2d\u7684 Pi \uff1b\u800c\u4e14\u4e0d\u4f7f\u7528\u534f\u7a0b\u4f1a\u8fd0\u7b97\u7684\u66f4\u5feb\u3002\u4e00\u4e2a\u6025\u901f\u7248\u672c\uff1a\u4f7f\u7528 GOMAXPROCS \uff0c\u5f00\u542f\u548c GOMAXPROCS \u540c\u6837\u591a\u4e2a\u534f\u7a0b\u3002 \u4e60\u60ef\u7528\u6cd5\uff1a\u540e\u53f0\u670d\u52a1\u6a21\u5f0f \u670d\u52a1\u901a\u5e38\u662f\u662f\u7528\u540e\u53f0\u534f\u7a0b\u4e2d\u7684\u65e0\u9650\u5faa\u73af\u5b9e\u73b0\u7684\uff0c\u5728\u5faa\u73af\u4e2d\u4f7f\u7528 select \u83b7\u53d6\u5e76\u5904\u7406\u901a\u9053\u4e2d\u7684\u6570\u636e\uff1a // Backend goroutine. func backend () { for { select { case cmd := <- ch1 : // Handle ... case cmd := <- ch2 : ... case cmd := <- chStop : // stop server } } } \u5728\u7a0b\u5e8f\u7684\u5176\u4ed6\u5730\u65b9\u7ed9\u901a\u9053 ch1 \uff0c ch2 \u53d1\u9001\u6570\u636e\uff0c\u6bd4\u5982\uff1a\u901a\u9053 stop \u7528\u6765\u6e05\u7406\u7ed3\u675f\u670d\u52a1\u7a0b\u5e8f\u3002 \u53e6\u4e00\u79cd\u65b9\u5f0f\uff08\u4f46\u662f\u4e0d\u592a\u7075\u6d3b\uff09\u5c31\u662f\uff08\u5ba2\u6237\u7aef\uff09\u5728 chRequest \u4e0a\u63d0\u4ea4\u8bf7\u6c42\uff0c\u540e\u53f0\u534f\u7a0b\u5faa\u73af\u8fd9\u4e2a\u901a\u9053\uff0c\u4f7f\u7528 switch \u6839\u636e\u8bf7\u6c42\u7684\u884c\u4e3a\u6765\u5206\u522b\u5904\u7406\uff1a func backend () { for req := range chRequest { switch req . Subjext () { case A1 : // Handle case ... case A2 : // Handle case ... default : // Handle illegal request .. // ... } } } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u901a\u9053\u7684\u540c\u6b65\uff1a\u5173\u95ed\u901a\u9053-\u6d4b\u8bd5\u963b\u585e\u7684\u901a\u9053 \u4e0b\u4e00\u8282\uff1a \u901a\u9053\uff0c\u8d85\u65f6\u548c\u8ba1\u65f6\u5668\uff08Ticker\uff09","title":"14.4 \u4f7f\u7528 select \u5207\u6362\u534f\u7a0b"},{"location":"14.4/#144-select","text":"\u4ece\u4e0d\u540c\u7684\u5e76\u53d1\u6267\u884c\u7684\u534f\u7a0b\u4e2d\u83b7\u53d6\u503c\u53ef\u4ee5\u901a\u8fc7\u5173\u952e\u5b57 select \u6765\u5b8c\u6210\uff0c\u5b83\u548c switch \u63a7\u5236\u8bed\u53e5\u975e\u5e38\u76f8\u4f3c\uff08 \u7ae0\u8282 5.3 \uff09\u4e5f\u88ab\u79f0\u4f5c\u901a\u4fe1\u5f00\u5173\uff1b\u5b83\u7684\u884c\u4e3a\u50cf\u662f\u201c\u4f60\u51c6\u5907\u597d\u4e86\u5417\u201d\u7684\u8f6e\u8be2\u673a\u5236\uff1b select \u76d1\u542c\u8fdb\u5165\u901a\u9053\u7684\u6570\u636e\uff0c\u4e5f\u53ef\u4ee5\u662f\u7528\u901a\u9053\u53d1\u9001\u503c\u7684\u65f6\u5019\u3002 select { case u := <- ch1 : ... case v := <- ch2 : ... ... default : // no value ready to be received ... } default \u8bed\u53e5\u662f\u53ef\u9009\u7684\uff1b fallthrough \u884c\u4e3a\uff0c\u548c\u666e\u901a\u7684 switch \u76f8\u4f3c\uff0c\u662f\u4e0d\u5141\u8bb8\u7684\u3002\u5728\u4efb\u4f55\u4e00\u4e2a case \u4e2d\u6267\u884c break \u6216\u8005 return \uff0cselect \u5c31\u7ed3\u675f\u4e86\u3002 select \u505a\u7684\u5c31\u662f\uff1a\u9009\u62e9\u5904\u7406\u5217\u51fa\u7684\u591a\u4e2a\u901a\u4fe1\u60c5\u51b5\u4e2d\u7684\u4e00\u4e2a\u3002 \u5982\u679c\u90fd\u963b\u585e\u4e86\uff0c\u4f1a\u7b49\u5f85\u76f4\u5230\u5176\u4e2d\u4e00\u4e2a\u53ef\u4ee5\u5904\u7406 \u5982\u679c\u591a\u4e2a\u53ef\u4ee5\u5904\u7406\uff0c\u968f\u673a\u9009\u62e9\u4e00\u4e2a \u5982\u679c\u6ca1\u6709\u901a\u9053\u64cd\u4f5c\u53ef\u4ee5\u5904\u7406\u5e76\u4e14\u5199\u4e86 default \u8bed\u53e5\uff0c\u5b83\u5c31\u4f1a\u6267\u884c\uff1a default \u6c38\u8fdc\u662f\u53ef\u8fd0\u884c\u7684\uff08\u8fd9\u5c31\u662f\u51c6\u5907\u597d\u4e86\uff0c\u53ef\u4ee5\u6267\u884c\uff09\u3002 \u5728 select \u4e2d\u4f7f\u7528\u53d1\u9001\u64cd\u4f5c\u5e76\u4e14\u6709 default \u53ef\u4ee5\u786e\u4fdd\u53d1\u9001\u4e0d\u88ab\u963b\u585e\uff01\u5982\u679c\u6ca1\u6709 default \uff0c select \u5c31\u4f1a\u4e00\u76f4\u963b\u585e\u3002 select \u8bed\u53e5\u5b9e\u73b0\u4e86\u4e00\u79cd\u76d1\u542c\u6a21\u5f0f\uff0c\u901a\u5e38\u7528\u5728\uff08\u65e0\u9650\uff09\u5faa\u73af\u4e2d\uff1b\u5728\u67d0\u79cd\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7 break \u8bed\u53e5\u4f7f\u5faa\u73af\u9000\u51fa\u3002 \u5728\u7a0b\u5e8f goroutine_select.go \u4e2d\u6709 2 \u4e2a\u901a\u9053 ch1 \u548c ch2 \uff0c\u4e09\u4e2a\u534f\u7a0b pump1() \u3001 pump2() \u548c suck() \u3002\u8fd9\u662f\u4e00\u4e2a\u5178\u578b\u7684\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u5f0f\u3002\u5728\u65e0\u9650\u5faa\u73af\u4e2d\uff0c ch1 \u548c ch2 \u901a\u8fc7 pump1() \u548c pump2() \u586b\u5145\u6574\u6570\uff1b suck() \u4e5f\u662f\u5728\u65e0\u9650\u5faa\u73af\u4e2d\u8f6e\u8be2\u8f93\u5165\u7684\uff0c\u901a\u8fc7 select \u8bed\u53e5\u83b7\u53d6 ch1 \u548c ch2 \u7684\u6574\u6570\u5e76\u8f93\u51fa\u3002\u9009\u62e9\u54ea\u4e00\u4e2a case \u53d6\u51b3\u4e8e\u54ea\u4e00\u4e2a\u901a\u9053\u6536\u5230\u4e86\u4fe1\u606f\u3002\u7a0b\u5e8f\u5728 main \u6267\u884c 1 \u79d2\u540e\u7ed3\u675f\u3002 \u793a\u4f8b 14.10- goroutine_select.go \uff1a package main import ( \"fmt\" \"time\" ) func main () { ch1 := make ( chan int ) ch2 := make ( chan int ) go pump1 ( ch1 ) go pump2 ( ch2 ) go suck ( ch1 , ch2 ) time . Sleep ( 1e9 ) } func pump1 ( ch chan int ) { for i := 0 ; ; i ++ { ch <- i * 2 } } func pump2 ( ch chan int ) { for i := 0 ; ; i ++ { ch <- i + 5 } } func suck ( ch1 , ch2 chan int ) { for { select { case v := <- ch1 : fmt . Printf ( \"Received on channel 1: %d\\n\" , v ) case v := <- ch2 : fmt . Printf ( \"Received on channel 2: %d\\n\" , v ) } } } \u8f93\u51fa\uff1a Received on channel 2: 5 Received on channel 2: 6 Received on channel 1: 0 Received on channel 2: 7 Received on channel 2: 8 Received on channel 2: 9 Received on channel 2: 10 Received on channel 1: 2 Received on channel 2: 11 ... Received on channel 2: 47404 Received on channel 1: 94346 Received on channel 1: 94348 \u4e00\u79d2\u5185\u7684\u8f93\u51fa\u975e\u5e38\u60ca\u4eba\uff0c\u5982\u679c\u6211\u4eec\u7ed9\u5b83\u8ba1\u6570 ( goroutine_select2.go )\uff0c\u5f97\u5230\u4e86 90000 \u4e2a\u5de6\u53f3\u7684\u6570\u5b57\u3002","title":"14.4 \u4f7f\u7528 select \u5207\u6362\u534f\u7a0b"},{"location":"14.4/#_1","text":"\u7ec3\u4e60 14.7\uff1a a\uff09\u5728\u7ec3\u4e60 5.4 \u7684 for_loop.go \u4e2d\uff0c\u6709\u4e00\u4e2a\u5e38\u89c1\u7684 for \u5faa\u73af\u6253\u5370\u6570\u5b57\u3002\u5728\u51fd\u6570 tel() \u4e2d\u5b9e\u73b0\u4e00\u4e2a for \u5faa\u73af\uff0c\u7528\u534f\u7a0b\u5f00\u59cb\u8fd9\u4e2a\u51fd\u6570\u5e76\u5728\u5176\u4e2d\u7ed9\u901a\u9053\u53d1\u9001\u6570\u5b57\u3002 main() \u7ebf\u7a0b\u4ece\u901a\u9053\u4e2d\u83b7\u53d6\u5e76\u6253\u5370\u3002\u4e0d\u8981\u4f7f\u7528 time.Sleep() \u6765\u540c\u6b65\uff1a goroutine_panic.go b\uff09\u4e5f\u8bb8\u4f60\u7684\u65b9\u6848\u6709\u6548\uff0c\u4f46\u53ef\u80fd\u4f1a\u5f15\u53d1\u8fd0\u884c\u65f6\u7684 panic() \uff1a throw:all goroutines are asleep-deadlock! \u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\uff1f\u4f60\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1f goroutine_close.go c\uff09\u89e3\u51b3 a\uff09\u7684\u53e6\u5916\u4e00\u79cd\u65b9\u5f0f\uff1a\u4f7f\u7528\u4e00\u4e2a\u989d\u5916\u7684\u901a\u9053\u4f20\u9012\u7ed9\u534f\u7a0b\uff0c\u7136\u540e\u5728\u7ed3\u675f\u7684\u65f6\u5019\u968f\u4fbf\u653e\u70b9\u4ec0\u4e48\u8fdb\u53bb\u3002 main() \u7ebf\u7a0b\u68c0\u67e5\u662f\u5426\u6709\u6570\u636e\u53d1\u9001\u7ed9\u4e86\u8fd9\u4e2a\u901a\u9053\uff0c\u5982\u679c\u6709\u5c31\u505c\u6b62\uff1a goroutine_select.go \u7ec3\u4e60 14.8\uff1a \u4ece\u793a\u4f8b 6.13 fibonacci.go \u7684\u6590\u6ce2\u90a3\u5951\u7a0b\u5e8f\u5f00\u59cb\uff0c\u5236\u5b9a\u89e3\u51b3\u65b9\u6848\uff0c\u4f7f\u6590\u6ce2\u90a3\u5951\u5468\u671f\u8ba1\u7b97\u72ec\u7acb\u5230\u534f\u7a0b\u4e2d\uff0c\u5e76\u53ef\u4ee5\u628a\u7ed3\u679c\u53d1\u9001\u7ed9\u901a\u9053\u3002 \u7ed3\u675f\u7684\u65f6\u5019\u5173\u95ed\u901a\u9053\u3002 main() \u51fd\u6570\u8bfb\u53d6\u901a\u9053\u5e76\u6253\u5370\u7ed3\u679c\uff1a goFibonacci.go \u4f7f\u7528\u7ec3\u4e60 6.9 fibonacci2.go \u4e2d\u7684\u7b97\u6cd5\u5199\u4e00\u4e2a\u66f4\u77ed\u7684 gofibonacci2.go \u4f7f\u7528 select \u8bed\u53e5\u6765\u5199\uff0c\u5e76\u8ba9\u901a\u9053\u9000\u51fa ( gofibonacci_select.go ) \u6ce8\u610f\uff1a\u5f53\u7ed9\u7ed3\u679c\u8ba1\u65f6\u5e76\u548c 6.13 \u5bf9\u6bd4\u65f6\uff0c\u6211\u4eec\u53d1\u73b0\u4f7f\u7528\u901a\u9053\u901a\u4fe1\u7684\u6027\u80fd\u5f00\u9500\u6709\u8f7b\u5fae\u524a\u51cf\uff1b\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684\u7b97\u6cd5\u4f7f\u7528\u534f\u7a0b\u5e76\u975e\u6027\u80fd\u6700\u597d\u7684\u9009\u62e9\uff1b\u4f46\u662f gofibonacci3 \u65b9\u6848\u4f7f\u7528\u4e86 2 \u4e2a\u534f\u7a0b\u5e26\u6765\u4e86 3 \u500d\u7684\u63d0\u901f\u3002 \u7ec3\u4e60 14.9\uff1a \u505a\u4e00\u4e2a\u968f\u673a\u4f4d\u751f\u6210\u5668\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u63d0\u4f9b\u65e0\u9650\u7684\u968f\u673a 0 \u6216\u8005 1 \u7684\u5e8f\u5217\uff1a random_bitgen.go \u7ec3\u4e60 14.10\uff1a polar_to_cartesian.go \uff08\u8fd9\u662f\u4e00\u79cd\u7efc\u5408\u7ec3\u4e60\uff0c\u4f7f\u7528\u5230\u7b2c 4\u30019\u300111 \u7ae0\u548c\u672c\u7ae0\u7684\u5185\u5bb9\u3002\uff09\u5199\u4e00\u4e2a\u53ef\u4ea4\u4e92\u7684\u63a7\u5236\u53f0\u7a0b\u5e8f\uff0c\u8981\u6c42\u7528\u6237\u8f93\u5165\u4e8c\u4f4d\u5e73\u9762\u6781\u5750\u6807\u4e0a\u7684\u70b9\uff08\u534a\u5f84\u548c\u89d2\u5ea6\uff08\u5ea6\uff09\uff09\u3002\u8ba1\u7b97\u5bf9\u5e94\u7684\u7b1b\u5361\u5c14\u5750\u6807\u7cfb\u7684\u70b9\u7684 x \u548c y \u5e76\u8f93\u51fa\u3002\u4f7f\u7528\u6781\u5750\u6807\u548c\u7b1b\u5361\u5c14\u5750\u6807\u7684\u7ed3\u6784\u4f53\u3002 \u4f7f\u7528\u901a\u9053\u548c\u534f\u7a0b\uff1a channel1 \u7528\u6765\u63a5\u6536\u6781\u5750\u6807 channel2 \u7528\u6765\u63a5\u6536\u7b1b\u5361\u5c14\u5750\u6807 \u8f6c\u6362\u8fc7\u7a0b\u9700\u8981\u5728\u534f\u7a0b\u4e2d\u8fdb\u884c\uff0c\u4ece channel1 \u4e2d\u8bfb\u53d6\u7136\u540e\u53d1\u9001\u5230 channel2 \u3002\u5b9e\u9645\u4e0a\u505a\u8fd9\u79cd\u8ba1\u7b97\u4e0d\u63d0\u5021\u4f7f\u7528\u534f\u7a0b\u548c\u901a\u9053\uff0c\u4f46\u662f\u5982\u679c\u8fd0\u7b97\u91cf\u5f88\u5927\u5f88\u8017\u65f6\uff0c\u8fd9\u79cd\u65b9\u6848\u8bbe\u8ba1\u5c31\u975e\u5e38\u5408\u9002\u4e86\u3002 \u7ec3\u4e60 14.11\uff1a concurrent_pi.go / concurrent_pi2.go \u4f7f\u7528\u4ee5\u4e0b\u5e8f\u5217\u5728\u534f\u7a0b\u4e2d\u8ba1\u7b97 pi\uff1a\u5f00\u542f\u4e00\u4e2a\u534f\u7a0b\u6765\u8ba1\u7b97\u516c\u5f0f\u4e2d\u7684\u6bcf\u4e00\u9879\u5e76\u5c06\u7ed3\u679c\u653e\u5165\u901a\u9053\uff0c main() \u51fd\u6570\u6536\u96c6\u5e76\u7d2f\u52a0\u7ed3\u679c\uff0c\u6253\u5370\u51fa pi \u7684\u8fd1\u4f3c\u503c\u3002 \u8ba1\u7b97\u6267\u884c\u65f6\u95f4\uff08\u53c2\u89c1\u7b2c 6.11 \u8282\uff09 \u518d\u6b21\u58f0\u660e\u8fd9\u53ea\u662f\u4e3a\u4e86\u4e00\u8fb9\u7ec3\u4e60\u534f\u7a0b\u7684\u6982\u5ff5\u4e00\u8fb9\u627e\u70b9\u4e50\u5b50\u3002 \u5982\u679c\u4f60\u9700\u8981\u7684\u8bdd\u53ef\u4f7f\u7528 math.pi \u4e2d\u7684 Pi \uff1b\u800c\u4e14\u4e0d\u4f7f\u7528\u534f\u7a0b\u4f1a\u8fd0\u7b97\u7684\u66f4\u5feb\u3002\u4e00\u4e2a\u6025\u901f\u7248\u672c\uff1a\u4f7f\u7528 GOMAXPROCS \uff0c\u5f00\u542f\u548c GOMAXPROCS \u540c\u6837\u591a\u4e2a\u534f\u7a0b\u3002 \u4e60\u60ef\u7528\u6cd5\uff1a\u540e\u53f0\u670d\u52a1\u6a21\u5f0f \u670d\u52a1\u901a\u5e38\u662f\u662f\u7528\u540e\u53f0\u534f\u7a0b\u4e2d\u7684\u65e0\u9650\u5faa\u73af\u5b9e\u73b0\u7684\uff0c\u5728\u5faa\u73af\u4e2d\u4f7f\u7528 select \u83b7\u53d6\u5e76\u5904\u7406\u901a\u9053\u4e2d\u7684\u6570\u636e\uff1a // Backend goroutine. func backend () { for { select { case cmd := <- ch1 : // Handle ... case cmd := <- ch2 : ... case cmd := <- chStop : // stop server } } } \u5728\u7a0b\u5e8f\u7684\u5176\u4ed6\u5730\u65b9\u7ed9\u901a\u9053 ch1 \uff0c ch2 \u53d1\u9001\u6570\u636e\uff0c\u6bd4\u5982\uff1a\u901a\u9053 stop \u7528\u6765\u6e05\u7406\u7ed3\u675f\u670d\u52a1\u7a0b\u5e8f\u3002 \u53e6\u4e00\u79cd\u65b9\u5f0f\uff08\u4f46\u662f\u4e0d\u592a\u7075\u6d3b\uff09\u5c31\u662f\uff08\u5ba2\u6237\u7aef\uff09\u5728 chRequest \u4e0a\u63d0\u4ea4\u8bf7\u6c42\uff0c\u540e\u53f0\u534f\u7a0b\u5faa\u73af\u8fd9\u4e2a\u901a\u9053\uff0c\u4f7f\u7528 switch \u6839\u636e\u8bf7\u6c42\u7684\u884c\u4e3a\u6765\u5206\u522b\u5904\u7406\uff1a func backend () { for req := range chRequest { switch req . Subjext () { case A1 : // Handle case ... case A2 : // Handle case ... default : // Handle illegal request .. // ... } } }","title":"\u7ec3\u4e60\uff1a"},{"location":"14.4/#_2","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u901a\u9053\u7684\u540c\u6b65\uff1a\u5173\u95ed\u901a\u9053-\u6d4b\u8bd5\u963b\u585e\u7684\u901a\u9053 \u4e0b\u4e00\u8282\uff1a \u901a\u9053\uff0c\u8d85\u65f6\u548c\u8ba1\u65f6\u5668\uff08Ticker\uff09","title":"\u94fe\u63a5"},{"location":"14.5/","text":"14.5 \u901a\u9053\u3001\u8d85\u65f6\u548c\u8ba1\u65f6\u5668\uff08Ticker\uff09 \u00b6 time \u5305\u4e2d\u6709\u4e00\u4e9b\u6709\u8da3\u7684\u529f\u80fd\u53ef\u4ee5\u548c\u901a\u9053\u7ec4\u5408\u4f7f\u7528\u3002 \u5176\u4e2d\u5c31\u5305\u542b\u4e86 time.Ticker \u7ed3\u6784\u4f53\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u4ee5\u6307\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u91cd\u590d\u7684\u5411\u901a\u9053 C \u53d1\u9001\u65f6\u95f4\u503c\uff1a type Ticker struct { C <- chan Time // the channel on which the ticks are delivered. // contains filtered or unexported fields ... } \u65f6\u95f4\u95f4\u9694\u7684\u5355\u4f4d\u662f ns \uff08\u7eb3\u79d2\uff0c int64 \uff09\uff0c\u5728\u5de5\u5382\u51fd\u6570 time.NewTicker \u4e2d\u4ee5 Duration \u7c7b\u578b\u7684\u53c2\u6570\u4f20\u5165\uff1a func NewTicker(dur) *Ticker \u3002 \u5728\u534f\u7a0b\u5468\u671f\u6027\u7684\u6267\u884c\u4e00\u4e9b\u4e8b\u60c5\uff08\u6253\u5370\u72b6\u6001\u65e5\u5fd7\uff0c\u8f93\u51fa\uff0c\u8ba1\u7b97\u7b49\u7b49\uff09\u7684\u65f6\u5019\u975e\u5e38\u6709\u7528\u3002 \u8c03\u7528 Stop() \u4f7f\u8ba1\u65f6\u5668\u505c\u6b62\uff0c\u5728 defer \u8bed\u53e5\u4e2d\u4f7f\u7528\u3002\u8fd9\u4e9b\u90fd\u5f88\u597d\u5730\u9002\u5e94 select \u8bed\u53e5: ticker := time . NewTicker ( updateInterval ) defer ticker . Stop () ... select { case u := <- ch1 : ... case v := <- ch2 : ... case <- ticker . C : logState ( status ) // call some logging function logState default : // no value ready to be received ... } time.Tick() \u51fd\u6570\u58f0\u660e\u4e3a Tick(d Duration) <-chan Time \uff0c\u5f53\u4f60\u60f3\u8fd4\u56de\u4e00\u4e2a\u901a\u9053\u800c\u4e0d\u5fc5\u5173\u95ed\u5b83\u7684\u65f6\u5019\u8fd9\u4e2a\u51fd\u6570\u975e\u5e38\u6709\u7528\uff1a\u5b83\u4ee5 d \u4e3a\u5468\u671f\u7ed9\u8fd4\u56de\u7684\u901a\u9053\u53d1\u9001\u65f6\u95f4\uff0c d \u662f\u7eb3\u79d2\u6570\u3002\u5982\u679c\u9700\u8981\uff0c\u50cf\u4e0b\u8fb9\u7684\u4ee3\u7801\u4e00\u6837\uff0c\u53ef\u4ee5\u9650\u5236\u5904\u7406\u9891\u7387\uff08\u51fd\u6570 client.Call() \u662f\u4e00\u4e2a RPC \u8c03\u7528\uff0c\u8fd9\u91cc\u6682\u4e0d\u8d58\u8ff0\uff08\u53c2\u89c1\u7b2c 15.9 \u8282\uff09\uff09\uff1a import \"time\" rate_per_sec := 10 var dur Duration = 1e9 / rate_per_sec chRate := time . Tick ( dur ) // a tick every 1/10th of a second for req := range requests { <- chRate // rate limit our Service.Method RPC calls go client . Call ( \"Service.Method\" , req , ... ) } \u8fd9\u6837\u53ea\u4f1a\u6309\u7167\u6307\u5b9a\u9891\u7387\u5904\u7406\u8bf7\u6c42\uff1a chRate \u963b\u585e\u4e86\u66f4\u9ad8\u7684\u9891\u7387\u3002\u6bcf\u79d2\u5904\u7406\u7684\u9891\u7387\u53ef\u4ee5\u6839\u636e\u673a\u5668\u8d1f\u8f7d\uff08\u548c/\u6216\uff09\u8d44\u6e90\u7684\u60c5\u51b5\u800c\u589e\u52a0\u6216\u51cf\u5c11\u3002 \u95ee\u9898 14.1\uff1a\u6269\u5c55\u4e0a\u8fb9\u7684\u4ee3\u7801\uff0c\u601d\u8003\u5982\u4f55\u627f\u8f7d\u5468\u671f\u8bf7\u6c42\u6570\u7684\u66b4\u589e\uff08\u63d0\u793a\uff1a\u4f7f\u7528\u5e26\u7f13\u51b2\u901a\u9053\u548c\u8ba1\u65f6\u5668\u5bf9\u8c61\uff09\u3002 \u5b9a\u65f6\u5668 ( Timer ) \u7ed3\u6784\u4f53\u770b\u4e0a\u53bb\u548c\u8ba1\u65f6\u5668 ( Ticker ) \u7ed3\u6784\u4f53\u7684\u786e\u5f88\u50cf\uff08\u6784\u9020\u4e3a NewTimer(d Duration) \uff09\uff0c\u4f46\u662f\u5b83\u53ea\u53d1\u9001\u4e00\u6b21\u65f6\u95f4\uff0c\u5728 Dration d \u4e4b\u540e\u3002 \u8fd8\u6709 time.After(d) \u51fd\u6570\uff0c\u58f0\u660e\u5982\u4e0b\uff1a func After ( d Duration ) <- chan Time \u5728 Duration d \u4e4b\u540e\uff0c\u5f53\u524d\u65f6\u95f4\u88ab\u53d1\u5230\u8fd4\u56de\u7684\u901a\u9053\uff1b\u6240\u4ee5\u5b83\u548c NewTimer(d).C \u662f\u7b49\u4ef7\u7684\uff1b\u5b83\u7c7b\u4f3c Tick() \uff0c\u4f46\u662f After() \u53ea\u53d1\u9001\u4e00\u6b21\u65f6\u95f4\u3002\u4e0b\u8fb9\u6709\u4e2a\u5f88\u5177\u4f53\u7684\u793a\u4f8b\uff0c\u5f88\u597d\u7684\u9610\u660e\u4e86 select \u4e2d default \u7684\u4f5c\u7528\uff1a \u793a\u4f8b 14.11\uff1a timer_goroutine.go \uff1a package main import ( \"fmt\" \"time\" ) func main () { tick := time . Tick ( 1e8 ) boom := time . After ( 5e8 ) for { select { case <- tick : fmt . Println ( \"tick.\" ) case <- boom : fmt . Println ( \"BOOM!\" ) return default : fmt . Println ( \" .\" ) time . Sleep ( 5e7 ) } } } \u8f93\u51fa\uff1a . . tick. . . tick. . . tick. . . tick. . . tick. BOOM! \u4e60\u60ef\u7528\u6cd5\uff1a\u7b80\u5355\u8d85\u65f6\u6a21\u5f0f \u8981\u4ece\u901a\u9053 ch \u4e2d\u63a5\u6536\u6570\u636e\uff0c\u4f46\u662f\u6700\u591a\u7b49\u5f85 1 \u79d2\u3002\u5148\u521b\u5efa\u4e00\u4e2a\u4fe1\u53f7\u901a\u9053\uff0c\u7136\u540e\u542f\u52a8\u4e00\u4e2a lambda \u534f\u7a0b\uff0c\u534f\u7a0b\u5728\u7ed9\u901a\u9053\u53d1\u9001\u6570\u636e\u4e4b\u524d\u662f\u4f11\u7720\u7684\uff1a timeout := make ( chan bool , 1 ) go func () { time . Sleep ( 1e9 ) // one second timeout <- true }() \u7136\u540e\u4f7f\u7528 select \u8bed\u53e5\u63a5\u6536 ch \u6216\u8005 timeout \u7684\u6570\u636e\uff1a\u5982\u679c ch \u5728 1 \u79d2\u5185\u6ca1\u6709\u6536\u5230\u6570\u636e\uff0c\u5c31\u9009\u62e9\u5230\u4e86 time \u5206\u652f\u5e76\u653e\u5f03\u4e86 ch \u7684\u8bfb\u53d6\u3002 select { case <- ch : // a read from ch has occured case <- timeout : // the read from ch has timed out break } \u7b2c\u4e8c\u79cd\u5f62\u5f0f\uff1a\u53d6\u6d88\u8017\u65f6\u5f88\u957f\u7684\u540c\u6b65\u8c03\u7528 \u4e5f\u53ef\u4ee5\u4f7f\u7528 time.After() \u51fd\u6570\u66ff\u6362 timeout-channel \u3002\u53ef\u4ee5\u5728 select \u4e2d\u901a\u8fc7 time.After() \u53d1\u9001\u7684\u8d85\u65f6\u4fe1\u53f7\u6765\u505c\u6b62\u534f\u7a0b\u7684\u6267\u884c\u3002\u4ee5\u4e0b\u4ee3\u7801\uff0c\u5728 timeoutNs \u7eb3\u79d2\u540e\u6267\u884c select \u7684 timeout \u5206\u652f\u540e\uff0c\u6267\u884c client.Call \u7684\u534f\u7a0b\u4e5f\u968f\u4e4b\u7ed3\u675f\uff0c\u4e0d\u4f1a\u7ed9\u901a\u9053 ch \u8fd4\u56de\u503c\uff1a ch := make ( chan error , 1 ) go func () { ch <- client . Call ( \"Service.Method\" , args , & reply ) } () select { case resp := <- ch // use resp and reply case <- time . After ( timeoutNs ): // call timed out break } \u6ce8\u610f\u7f13\u51b2\u5927\u5c0f\u8bbe\u7f6e\u4e3a 1 \u662f\u5fc5\u8981\u7684\uff0c\u53ef\u4ee5\u907f\u514d\u534f\u7a0b\u6b7b\u9501\u4ee5\u53ca\u786e\u4fdd\u8d85\u65f6\u7684\u901a\u9053\u53ef\u4ee5\u88ab\u5783\u573e\u56de\u6536\u3002\u6b64\u5916\uff0c\u9700\u8981\u6ce8\u610f\u5728\u6709\u591a\u4e2a case \u7b26\u5408\u6761\u4ef6\u65f6\uff0c select \u5bf9 case \u7684\u9009\u62e9\u662f\u4f2a\u968f\u673a\u7684\uff0c\u5982\u679c\u4e0a\u9762\u7684\u4ee3\u7801\u7a0d\u4f5c\u4fee\u6539\u5982\u4e0b\uff0c\u5219 select \u8bed\u53e5\u53ef\u80fd\u4e0d\u4f1a\u5728\u5b9a\u65f6\u5668\u8d85\u65f6\u4fe1\u53f7\u5230\u6765\u65f6\u7acb\u523b\u9009\u4e2d time.After(timeoutNs) \u5bf9\u5e94\u7684 case \uff0c\u56e0\u6b64\u534f\u7a0b\u53ef\u80fd\u4e0d\u4f1a\u4e25\u683c\u6309\u7167\u5b9a\u65f6\u5668\u8bbe\u7f6e\u7684\u65f6\u95f4\u7ed3\u675f\u3002 ch := make ( chan int , 1 ) go func () { for { ch <- 1 } } () L : for { select { case <- ch : // do something case <- time . After ( timeoutNs ): // call timed out break L } } \u7b2c\u4e09\u79cd\u5f62\u5f0f\uff1a\u5047\u8bbe\u7a0b\u5e8f\u4ece\u591a\u4e2a\u590d\u5236\u7684\u6570\u636e\u5e93\u540c\u65f6\u8bfb\u53d6\u3002\u53ea\u9700\u8981\u4e00\u4e2a\u7b54\u6848\uff0c\u9700\u8981\u63a5\u6536\u9996\u5148\u5230\u8fbe\u7684\u7b54\u6848\uff0c Query \u51fd\u6570\u83b7\u53d6\u6570\u636e\u5e93\u7684\u8fde\u63a5\u5207\u7247\u5e76\u8bf7\u6c42\u3002\u5e76\u884c\u8bf7\u6c42\u6bcf\u4e00\u4e2a\u6570\u636e\u5e93\u5e76\u8fd4\u56de\u6536\u5230\u7684\u7b2c\u4e00\u4e2a\u54cd\u5e94\uff1a func Query ( conns [] Conn , query string ) Result { ch := make ( chan Result , 1 ) for _ , conn := range conns { go func ( c Conn ) { select { case ch <- c . DoQuery ( query ): default : } }( conn ) } return <- ch } \u518d\u6b21\u58f0\u660e\uff0c\u7ed3\u679c\u901a\u9053 ch \u5fc5\u987b\u662f\u5e26\u7f13\u51b2\u7684\uff1a\u4ee5\u4fdd\u8bc1\u7b2c\u4e00\u4e2a\u53d1\u9001\u8fdb\u6765\u7684\u6570\u636e\u6709\u5730\u65b9\u53ef\u4ee5\u5b58\u653e\uff0c\u786e\u4fdd\u653e\u5165\u7684\u9996\u4e2a\u6570\u636e\u603b\u4f1a\u6210\u529f\uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u5230\u8fbe\u7684\u503c\u4f1a\u88ab\u83b7\u53d6\u800c\u4e0e\u6267\u884c\u7684\u987a\u5e8f\u65e0\u5173\u3002\u6b63\u5728\u6267\u884c\u7684\u534f\u7a0b\u53ef\u4ee5\u603b\u662f\u53ef\u4ee5\u4f7f\u7528 runtime.Goexit() \u6765\u505c\u6b62\u3002 \u5728\u5e94\u7528\u4e2d\u7f13\u5b58\u6570\u636e\uff1a \u5e94\u7528\u7a0b\u5e8f\u4e2d\u7528\u5230\u4e86\u6765\u81ea\u6570\u636e\u5e93\uff08\u6216\u8005\u5e38\u89c1\u7684\u6570\u636e\u5b58\u50a8\uff09\u7684\u6570\u636e\u65f6\uff0c\u7ecf\u5e38\u4f1a\u628a\u6570\u636e\u7f13\u5b58\u5230\u5185\u5b58\u4e2d\uff0c\u56e0\u4e3a\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u6570\u636e\u7684\u64cd\u4f5c\u4ee3\u4ef7\u5f88\u9ad8\uff1b\u5982\u679c\u6570\u636e\u5e93\u4e2d\u7684\u503c\u4e0d\u53d1\u751f\u53d8\u5316\u5c31\u6ca1\u6709\u95ee\u9898\u3002\u4f46\u662f\u5982\u679c\u503c\u6709\u53d8\u5316\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u673a\u5236\u6765\u5468\u671f\u6027\u7684\u4ece\u6570\u636e\u5e93\u91cd\u65b0\u8bfb\u53d6\u8fd9\u4e9b\u503c\uff1a\u7f13\u5b58\u7684\u503c\u5c31\u4e0d\u53ef\u7528\uff08\u8fc7\u671f\uff09\u4e86\uff0c\u800c\u4e14\u6211\u4eec\u4e5f\u4e0d\u5e0c\u671b\u7528\u6237\u770b\u5230\u9648\u65e7\u7684\u6570\u636e\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f7f\u7528select\u5207\u6362\u534f\u7a0b \u4e0b\u4e00\u8282\uff1a \u534f\u7a0b\u548c\u6062\u590d\uff08recover\uff09","title":"14.5 \u901a\u9053\u3001\u8d85\u65f6\u548c\u8ba1\u65f6\u5668\uff08Ticker\uff09"},{"location":"14.5/#145-ticker","text":"time \u5305\u4e2d\u6709\u4e00\u4e9b\u6709\u8da3\u7684\u529f\u80fd\u53ef\u4ee5\u548c\u901a\u9053\u7ec4\u5408\u4f7f\u7528\u3002 \u5176\u4e2d\u5c31\u5305\u542b\u4e86 time.Ticker \u7ed3\u6784\u4f53\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u4ee5\u6307\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u91cd\u590d\u7684\u5411\u901a\u9053 C \u53d1\u9001\u65f6\u95f4\u503c\uff1a type Ticker struct { C <- chan Time // the channel on which the ticks are delivered. // contains filtered or unexported fields ... } \u65f6\u95f4\u95f4\u9694\u7684\u5355\u4f4d\u662f ns \uff08\u7eb3\u79d2\uff0c int64 \uff09\uff0c\u5728\u5de5\u5382\u51fd\u6570 time.NewTicker \u4e2d\u4ee5 Duration \u7c7b\u578b\u7684\u53c2\u6570\u4f20\u5165\uff1a func NewTicker(dur) *Ticker \u3002 \u5728\u534f\u7a0b\u5468\u671f\u6027\u7684\u6267\u884c\u4e00\u4e9b\u4e8b\u60c5\uff08\u6253\u5370\u72b6\u6001\u65e5\u5fd7\uff0c\u8f93\u51fa\uff0c\u8ba1\u7b97\u7b49\u7b49\uff09\u7684\u65f6\u5019\u975e\u5e38\u6709\u7528\u3002 \u8c03\u7528 Stop() \u4f7f\u8ba1\u65f6\u5668\u505c\u6b62\uff0c\u5728 defer \u8bed\u53e5\u4e2d\u4f7f\u7528\u3002\u8fd9\u4e9b\u90fd\u5f88\u597d\u5730\u9002\u5e94 select \u8bed\u53e5: ticker := time . NewTicker ( updateInterval ) defer ticker . Stop () ... select { case u := <- ch1 : ... case v := <- ch2 : ... case <- ticker . C : logState ( status ) // call some logging function logState default : // no value ready to be received ... } time.Tick() \u51fd\u6570\u58f0\u660e\u4e3a Tick(d Duration) <-chan Time \uff0c\u5f53\u4f60\u60f3\u8fd4\u56de\u4e00\u4e2a\u901a\u9053\u800c\u4e0d\u5fc5\u5173\u95ed\u5b83\u7684\u65f6\u5019\u8fd9\u4e2a\u51fd\u6570\u975e\u5e38\u6709\u7528\uff1a\u5b83\u4ee5 d \u4e3a\u5468\u671f\u7ed9\u8fd4\u56de\u7684\u901a\u9053\u53d1\u9001\u65f6\u95f4\uff0c d \u662f\u7eb3\u79d2\u6570\u3002\u5982\u679c\u9700\u8981\uff0c\u50cf\u4e0b\u8fb9\u7684\u4ee3\u7801\u4e00\u6837\uff0c\u53ef\u4ee5\u9650\u5236\u5904\u7406\u9891\u7387\uff08\u51fd\u6570 client.Call() \u662f\u4e00\u4e2a RPC \u8c03\u7528\uff0c\u8fd9\u91cc\u6682\u4e0d\u8d58\u8ff0\uff08\u53c2\u89c1\u7b2c 15.9 \u8282\uff09\uff09\uff1a import \"time\" rate_per_sec := 10 var dur Duration = 1e9 / rate_per_sec chRate := time . Tick ( dur ) // a tick every 1/10th of a second for req := range requests { <- chRate // rate limit our Service.Method RPC calls go client . Call ( \"Service.Method\" , req , ... ) } \u8fd9\u6837\u53ea\u4f1a\u6309\u7167\u6307\u5b9a\u9891\u7387\u5904\u7406\u8bf7\u6c42\uff1a chRate \u963b\u585e\u4e86\u66f4\u9ad8\u7684\u9891\u7387\u3002\u6bcf\u79d2\u5904\u7406\u7684\u9891\u7387\u53ef\u4ee5\u6839\u636e\u673a\u5668\u8d1f\u8f7d\uff08\u548c/\u6216\uff09\u8d44\u6e90\u7684\u60c5\u51b5\u800c\u589e\u52a0\u6216\u51cf\u5c11\u3002 \u95ee\u9898 14.1\uff1a\u6269\u5c55\u4e0a\u8fb9\u7684\u4ee3\u7801\uff0c\u601d\u8003\u5982\u4f55\u627f\u8f7d\u5468\u671f\u8bf7\u6c42\u6570\u7684\u66b4\u589e\uff08\u63d0\u793a\uff1a\u4f7f\u7528\u5e26\u7f13\u51b2\u901a\u9053\u548c\u8ba1\u65f6\u5668\u5bf9\u8c61\uff09\u3002 \u5b9a\u65f6\u5668 ( Timer ) \u7ed3\u6784\u4f53\u770b\u4e0a\u53bb\u548c\u8ba1\u65f6\u5668 ( Ticker ) \u7ed3\u6784\u4f53\u7684\u786e\u5f88\u50cf\uff08\u6784\u9020\u4e3a NewTimer(d Duration) \uff09\uff0c\u4f46\u662f\u5b83\u53ea\u53d1\u9001\u4e00\u6b21\u65f6\u95f4\uff0c\u5728 Dration d \u4e4b\u540e\u3002 \u8fd8\u6709 time.After(d) \u51fd\u6570\uff0c\u58f0\u660e\u5982\u4e0b\uff1a func After ( d Duration ) <- chan Time \u5728 Duration d \u4e4b\u540e\uff0c\u5f53\u524d\u65f6\u95f4\u88ab\u53d1\u5230\u8fd4\u56de\u7684\u901a\u9053\uff1b\u6240\u4ee5\u5b83\u548c NewTimer(d).C \u662f\u7b49\u4ef7\u7684\uff1b\u5b83\u7c7b\u4f3c Tick() \uff0c\u4f46\u662f After() \u53ea\u53d1\u9001\u4e00\u6b21\u65f6\u95f4\u3002\u4e0b\u8fb9\u6709\u4e2a\u5f88\u5177\u4f53\u7684\u793a\u4f8b\uff0c\u5f88\u597d\u7684\u9610\u660e\u4e86 select \u4e2d default \u7684\u4f5c\u7528\uff1a \u793a\u4f8b 14.11\uff1a timer_goroutine.go \uff1a package main import ( \"fmt\" \"time\" ) func main () { tick := time . Tick ( 1e8 ) boom := time . After ( 5e8 ) for { select { case <- tick : fmt . Println ( \"tick.\" ) case <- boom : fmt . Println ( \"BOOM!\" ) return default : fmt . Println ( \" .\" ) time . Sleep ( 5e7 ) } } } \u8f93\u51fa\uff1a . . tick. . . tick. . . tick. . . tick. . . tick. BOOM! \u4e60\u60ef\u7528\u6cd5\uff1a\u7b80\u5355\u8d85\u65f6\u6a21\u5f0f \u8981\u4ece\u901a\u9053 ch \u4e2d\u63a5\u6536\u6570\u636e\uff0c\u4f46\u662f\u6700\u591a\u7b49\u5f85 1 \u79d2\u3002\u5148\u521b\u5efa\u4e00\u4e2a\u4fe1\u53f7\u901a\u9053\uff0c\u7136\u540e\u542f\u52a8\u4e00\u4e2a lambda \u534f\u7a0b\uff0c\u534f\u7a0b\u5728\u7ed9\u901a\u9053\u53d1\u9001\u6570\u636e\u4e4b\u524d\u662f\u4f11\u7720\u7684\uff1a timeout := make ( chan bool , 1 ) go func () { time . Sleep ( 1e9 ) // one second timeout <- true }() \u7136\u540e\u4f7f\u7528 select \u8bed\u53e5\u63a5\u6536 ch \u6216\u8005 timeout \u7684\u6570\u636e\uff1a\u5982\u679c ch \u5728 1 \u79d2\u5185\u6ca1\u6709\u6536\u5230\u6570\u636e\uff0c\u5c31\u9009\u62e9\u5230\u4e86 time \u5206\u652f\u5e76\u653e\u5f03\u4e86 ch \u7684\u8bfb\u53d6\u3002 select { case <- ch : // a read from ch has occured case <- timeout : // the read from ch has timed out break } \u7b2c\u4e8c\u79cd\u5f62\u5f0f\uff1a\u53d6\u6d88\u8017\u65f6\u5f88\u957f\u7684\u540c\u6b65\u8c03\u7528 \u4e5f\u53ef\u4ee5\u4f7f\u7528 time.After() \u51fd\u6570\u66ff\u6362 timeout-channel \u3002\u53ef\u4ee5\u5728 select \u4e2d\u901a\u8fc7 time.After() \u53d1\u9001\u7684\u8d85\u65f6\u4fe1\u53f7\u6765\u505c\u6b62\u534f\u7a0b\u7684\u6267\u884c\u3002\u4ee5\u4e0b\u4ee3\u7801\uff0c\u5728 timeoutNs \u7eb3\u79d2\u540e\u6267\u884c select \u7684 timeout \u5206\u652f\u540e\uff0c\u6267\u884c client.Call \u7684\u534f\u7a0b\u4e5f\u968f\u4e4b\u7ed3\u675f\uff0c\u4e0d\u4f1a\u7ed9\u901a\u9053 ch \u8fd4\u56de\u503c\uff1a ch := make ( chan error , 1 ) go func () { ch <- client . Call ( \"Service.Method\" , args , & reply ) } () select { case resp := <- ch // use resp and reply case <- time . After ( timeoutNs ): // call timed out break } \u6ce8\u610f\u7f13\u51b2\u5927\u5c0f\u8bbe\u7f6e\u4e3a 1 \u662f\u5fc5\u8981\u7684\uff0c\u53ef\u4ee5\u907f\u514d\u534f\u7a0b\u6b7b\u9501\u4ee5\u53ca\u786e\u4fdd\u8d85\u65f6\u7684\u901a\u9053\u53ef\u4ee5\u88ab\u5783\u573e\u56de\u6536\u3002\u6b64\u5916\uff0c\u9700\u8981\u6ce8\u610f\u5728\u6709\u591a\u4e2a case \u7b26\u5408\u6761\u4ef6\u65f6\uff0c select \u5bf9 case \u7684\u9009\u62e9\u662f\u4f2a\u968f\u673a\u7684\uff0c\u5982\u679c\u4e0a\u9762\u7684\u4ee3\u7801\u7a0d\u4f5c\u4fee\u6539\u5982\u4e0b\uff0c\u5219 select \u8bed\u53e5\u53ef\u80fd\u4e0d\u4f1a\u5728\u5b9a\u65f6\u5668\u8d85\u65f6\u4fe1\u53f7\u5230\u6765\u65f6\u7acb\u523b\u9009\u4e2d time.After(timeoutNs) \u5bf9\u5e94\u7684 case \uff0c\u56e0\u6b64\u534f\u7a0b\u53ef\u80fd\u4e0d\u4f1a\u4e25\u683c\u6309\u7167\u5b9a\u65f6\u5668\u8bbe\u7f6e\u7684\u65f6\u95f4\u7ed3\u675f\u3002 ch := make ( chan int , 1 ) go func () { for { ch <- 1 } } () L : for { select { case <- ch : // do something case <- time . After ( timeoutNs ): // call timed out break L } } \u7b2c\u4e09\u79cd\u5f62\u5f0f\uff1a\u5047\u8bbe\u7a0b\u5e8f\u4ece\u591a\u4e2a\u590d\u5236\u7684\u6570\u636e\u5e93\u540c\u65f6\u8bfb\u53d6\u3002\u53ea\u9700\u8981\u4e00\u4e2a\u7b54\u6848\uff0c\u9700\u8981\u63a5\u6536\u9996\u5148\u5230\u8fbe\u7684\u7b54\u6848\uff0c Query \u51fd\u6570\u83b7\u53d6\u6570\u636e\u5e93\u7684\u8fde\u63a5\u5207\u7247\u5e76\u8bf7\u6c42\u3002\u5e76\u884c\u8bf7\u6c42\u6bcf\u4e00\u4e2a\u6570\u636e\u5e93\u5e76\u8fd4\u56de\u6536\u5230\u7684\u7b2c\u4e00\u4e2a\u54cd\u5e94\uff1a func Query ( conns [] Conn , query string ) Result { ch := make ( chan Result , 1 ) for _ , conn := range conns { go func ( c Conn ) { select { case ch <- c . DoQuery ( query ): default : } }( conn ) } return <- ch } \u518d\u6b21\u58f0\u660e\uff0c\u7ed3\u679c\u901a\u9053 ch \u5fc5\u987b\u662f\u5e26\u7f13\u51b2\u7684\uff1a\u4ee5\u4fdd\u8bc1\u7b2c\u4e00\u4e2a\u53d1\u9001\u8fdb\u6765\u7684\u6570\u636e\u6709\u5730\u65b9\u53ef\u4ee5\u5b58\u653e\uff0c\u786e\u4fdd\u653e\u5165\u7684\u9996\u4e2a\u6570\u636e\u603b\u4f1a\u6210\u529f\uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u5230\u8fbe\u7684\u503c\u4f1a\u88ab\u83b7\u53d6\u800c\u4e0e\u6267\u884c\u7684\u987a\u5e8f\u65e0\u5173\u3002\u6b63\u5728\u6267\u884c\u7684\u534f\u7a0b\u53ef\u4ee5\u603b\u662f\u53ef\u4ee5\u4f7f\u7528 runtime.Goexit() \u6765\u505c\u6b62\u3002 \u5728\u5e94\u7528\u4e2d\u7f13\u5b58\u6570\u636e\uff1a \u5e94\u7528\u7a0b\u5e8f\u4e2d\u7528\u5230\u4e86\u6765\u81ea\u6570\u636e\u5e93\uff08\u6216\u8005\u5e38\u89c1\u7684\u6570\u636e\u5b58\u50a8\uff09\u7684\u6570\u636e\u65f6\uff0c\u7ecf\u5e38\u4f1a\u628a\u6570\u636e\u7f13\u5b58\u5230\u5185\u5b58\u4e2d\uff0c\u56e0\u4e3a\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u6570\u636e\u7684\u64cd\u4f5c\u4ee3\u4ef7\u5f88\u9ad8\uff1b\u5982\u679c\u6570\u636e\u5e93\u4e2d\u7684\u503c\u4e0d\u53d1\u751f\u53d8\u5316\u5c31\u6ca1\u6709\u95ee\u9898\u3002\u4f46\u662f\u5982\u679c\u503c\u6709\u53d8\u5316\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u673a\u5236\u6765\u5468\u671f\u6027\u7684\u4ece\u6570\u636e\u5e93\u91cd\u65b0\u8bfb\u53d6\u8fd9\u4e9b\u503c\uff1a\u7f13\u5b58\u7684\u503c\u5c31\u4e0d\u53ef\u7528\uff08\u8fc7\u671f\uff09\u4e86\uff0c\u800c\u4e14\u6211\u4eec\u4e5f\u4e0d\u5e0c\u671b\u7528\u6237\u770b\u5230\u9648\u65e7\u7684\u6570\u636e\u3002","title":"14.5 \u901a\u9053\u3001\u8d85\u65f6\u548c\u8ba1\u65f6\u5668\uff08Ticker\uff09"},{"location":"14.5/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f7f\u7528select\u5207\u6362\u534f\u7a0b \u4e0b\u4e00\u8282\uff1a \u534f\u7a0b\u548c\u6062\u590d\uff08recover\uff09","title":"\u94fe\u63a5"},{"location":"14.6/","text":"14.6 \u534f\u7a0b\u548c\u6062\u590d (recover) \u00b6 \u4e00\u4e2a\u7528\u5230 recover() \u7684\u7a0b\u5e8f\uff08\u53c2\u89c1 \u7b2c 13.3 \u8282 \u505c\u6389\u4e86\u670d\u52a1\u5668\u5185\u90e8\u4e00\u4e2a\u5931\u8d25\u7684\u534f\u7a0b\u800c\u4e0d\u5f71\u54cd\u5176\u4ed6\u534f\u7a0b\u7684\u5de5\u4f5c\u3002 func server ( workChan <- chan * Work ) { for work := range workChan { go safelyDo ( work ) // start the goroutine for that work } } func safelyDo ( work * Work ) { defer func () { if err := recover (); err != nil { log . Printf ( \"Work failed with %s in %v\" , err , work ) } }() do ( work ) } \u4e0a\u8fb9\u7684\u4ee3\u7801\uff0c\u5982\u679c do(work) \u53d1\u751f panic() \uff0c\u9519\u8bef\u4f1a\u88ab\u8bb0\u5f55\u4e14\u534f\u7a0b\u4f1a\u9000\u51fa\u5e76\u91ca\u653e\uff0c\u800c\u5176\u4ed6\u534f\u7a0b\u4e0d\u53d7\u5f71\u54cd\u3002 \u56e0\u4e3a recover() \u603b\u662f\u8fd4\u56de nil \uff0c\u9664\u975e\u76f4\u63a5\u5728 defer \u4fee\u9970\u7684\u51fd\u6570\u4e2d\u8c03\u7528\uff0c defer \u4fee\u9970\u7684\u4ee3\u7801\u53ef\u4ee5\u8c03\u7528\u90a3\u4e9b\u81ea\u8eab\u53ef\u4ee5\u4f7f\u7528 panic() \u548c recover() \u907f\u514d\u5931\u8d25\u7684\u5e93\u4f8b\u7a0b\uff08\u5e93\u51fd\u6570\uff09\u3002\u4e3e\u4f8b\uff0c safelyDo() \u4e2d defer \u4fee\u9970\u7684\u51fd\u6570\u53ef\u80fd\u5728\u8c03\u7528 recover() \u4e4b\u524d\u5c31\u8c03\u7528\u4e86\u4e00\u4e2a logging() \u51fd\u6570\uff0cpanicking \u72b6\u6001\u4e0d\u4f1a\u5f71\u54cd logging() \u4ee3\u7801\u7684\u8fd0\u884c\u3002\u56e0\u4e3a\u52a0\u5165\u4e86\u6062\u590d\u6a21\u5f0f\uff0c\u51fd\u6570 do() \uff08\u4ee5\u53ca\u5b83\u8c03\u7528\u7684\u4efb\u4f55\u4e1c\u897f\uff09\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 panic() \u6765\u6446\u8131\u4e0d\u597d\u7684\u60c5\u51b5\u3002\u4f46\u662f\u6062\u590d\u662f\u5728 panicking \u7684\u534f\u7a0b\u5185\u90e8\u7684\uff1a\u4e0d\u80fd\u88ab\u53e6\u5916\u4e00\u4e2a\u534f\u7a0b\u6062\u590d\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u901a\u9053\uff0c\u8d85\u65f6\u548c\u8ba1\u65f6\u5668 \u4e0b\u4e00\u8282\uff1a \u5bf9\u6bd4\u65b0\u65e7\u6a21\u578b\uff1a\u4efb\u52a1\u548c\u5de5\u4f5c","title":"14.6 \u534f\u7a0b\u548c\u6062\u590d (recover)"},{"location":"14.6/#146-recover","text":"\u4e00\u4e2a\u7528\u5230 recover() \u7684\u7a0b\u5e8f\uff08\u53c2\u89c1 \u7b2c 13.3 \u8282 \u505c\u6389\u4e86\u670d\u52a1\u5668\u5185\u90e8\u4e00\u4e2a\u5931\u8d25\u7684\u534f\u7a0b\u800c\u4e0d\u5f71\u54cd\u5176\u4ed6\u534f\u7a0b\u7684\u5de5\u4f5c\u3002 func server ( workChan <- chan * Work ) { for work := range workChan { go safelyDo ( work ) // start the goroutine for that work } } func safelyDo ( work * Work ) { defer func () { if err := recover (); err != nil { log . Printf ( \"Work failed with %s in %v\" , err , work ) } }() do ( work ) } \u4e0a\u8fb9\u7684\u4ee3\u7801\uff0c\u5982\u679c do(work) \u53d1\u751f panic() \uff0c\u9519\u8bef\u4f1a\u88ab\u8bb0\u5f55\u4e14\u534f\u7a0b\u4f1a\u9000\u51fa\u5e76\u91ca\u653e\uff0c\u800c\u5176\u4ed6\u534f\u7a0b\u4e0d\u53d7\u5f71\u54cd\u3002 \u56e0\u4e3a recover() \u603b\u662f\u8fd4\u56de nil \uff0c\u9664\u975e\u76f4\u63a5\u5728 defer \u4fee\u9970\u7684\u51fd\u6570\u4e2d\u8c03\u7528\uff0c defer \u4fee\u9970\u7684\u4ee3\u7801\u53ef\u4ee5\u8c03\u7528\u90a3\u4e9b\u81ea\u8eab\u53ef\u4ee5\u4f7f\u7528 panic() \u548c recover() \u907f\u514d\u5931\u8d25\u7684\u5e93\u4f8b\u7a0b\uff08\u5e93\u51fd\u6570\uff09\u3002\u4e3e\u4f8b\uff0c safelyDo() \u4e2d defer \u4fee\u9970\u7684\u51fd\u6570\u53ef\u80fd\u5728\u8c03\u7528 recover() \u4e4b\u524d\u5c31\u8c03\u7528\u4e86\u4e00\u4e2a logging() \u51fd\u6570\uff0cpanicking \u72b6\u6001\u4e0d\u4f1a\u5f71\u54cd logging() \u4ee3\u7801\u7684\u8fd0\u884c\u3002\u56e0\u4e3a\u52a0\u5165\u4e86\u6062\u590d\u6a21\u5f0f\uff0c\u51fd\u6570 do() \uff08\u4ee5\u53ca\u5b83\u8c03\u7528\u7684\u4efb\u4f55\u4e1c\u897f\uff09\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 panic() \u6765\u6446\u8131\u4e0d\u597d\u7684\u60c5\u51b5\u3002\u4f46\u662f\u6062\u590d\u662f\u5728 panicking \u7684\u534f\u7a0b\u5185\u90e8\u7684\uff1a\u4e0d\u80fd\u88ab\u53e6\u5916\u4e00\u4e2a\u534f\u7a0b\u6062\u590d\u3002","title":"14.6 \u534f\u7a0b\u548c\u6062\u590d (recover)"},{"location":"14.6/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u901a\u9053\uff0c\u8d85\u65f6\u548c\u8ba1\u65f6\u5668 \u4e0b\u4e00\u8282\uff1a \u5bf9\u6bd4\u65b0\u65e7\u6a21\u578b\uff1a\u4efb\u52a1\u548c\u5de5\u4f5c","title":"\u94fe\u63a5"},{"location":"14.7/","text":"14.7 \u65b0\u65e7\u6a21\u578b\u5bf9\u6bd4\uff1a\u4efb\u52a1\u548c worker \u00b6 \u5047\u8bbe\u6211\u4eec\u9700\u8981\u5904\u7406\u5f88\u591a\u4efb\u52a1\uff1b\u4e00\u4e2a worker \u5904\u7406\u4e00\u9879\u4efb\u52a1\u3002\u4efb\u52a1\u53ef\u4ee5\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u7ed3\u6784\u4f53\uff08\u5177\u4f53\u7684\u7ec6\u8282\u5728\u8fd9\u91cc\u5e76\u4e0d\u91cd\u8981\uff09\uff1a type Task struct { // some state } \u65e7\u6a21\u5f0f\uff1a\u4f7f\u7528\u5171\u4eab\u5185\u5b58\u8fdb\u884c\u540c\u6b65 \u7531\u5404\u4e2a\u4efb\u52a1\u7ec4\u6210\u7684\u4efb\u52a1\u6c60\u5171\u4eab\u5185\u5b58\uff1b\u4e3a\u4e86\u540c\u6b65\u5404\u4e2a worker \u4ee5\u53ca\u907f\u514d\u8d44\u6e90\u7ade\u4e89\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u4efb\u52a1\u6c60\u8fdb\u884c\u52a0\u9501\u4fdd\u62a4\uff1a type Pool struct { Mu sync . Mutex Tasks [] * Task } sync.Mutex \uff08 \u53c2\u89c19.3 \uff09\u662f\u4e92\u65a5\u9501\uff1a\u5b83\u7528\u6765\u5728\u4ee3\u7801\u4e2d\u4fdd\u62a4\u4e34\u754c\u533a\u8d44\u6e90\uff1a\u540c\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a go \u534f\u7a0b (goroutine) \u53ef\u4ee5\u8fdb\u5165\u8be5\u4e34\u754c\u533a\u3002\u5982\u679c\u51fa\u73b0\u4e86\u540c\u4e00\u65f6\u95f4\u591a\u4e2a go \u534f\u7a0b\u90fd\u8fdb\u5165\u4e86\u8be5\u4e34\u754c\u533a\uff0c\u5219\u4f1a\u4ea7\u751f\u7ade\u4e89\uff1a Pool \u7ed3\u6784\u5c31\u4e0d\u80fd\u4fdd\u8bc1\u88ab\u6b63\u786e\u66f4\u65b0\u3002\u5728\u4f20\u7edf\u7684\u6a21\u5f0f\u4e2d\uff08\u7ecf\u5178\u7684\u9762\u5411\u5bf9\u8c61\u7684\u8bed\u8a00\u4e2d\u5e94\u7528\u5f97\u6bd4\u8f83\u591a\uff0c\u6bd4\u5982 C++\uff0cJAVA\uff0cC#\uff09\uff0cworker \u4ee3\u7801\u53ef\u80fd\u8fd9\u6837\u5199\uff1a func Worker ( pool * Pool ) { for { pool . Mu . Lock () // begin critical section: task := pool . Tasks [ 0 ] // take the first task pool . Tasks = pool . Tasks [ 1 :] // update the pool of tasks // end critical section pool . Mu . Unlock () process ( task ) } } \u8fd9\u4e9b worker \u6709\u8bb8\u591a\u90fd\u53ef\u4ee5\u5e76\u53d1\u6267\u884c\uff1b\u4ed6\u4eec\u53ef\u4ee5\u5728 go \u534f\u7a0b\u4e2d\u542f\u52a8\u3002\u4e00\u4e2a worker \u5148\u5c06 pool \u9501\u5b9a\uff0c\u4ece pool \u83b7\u53d6\u7b2c\u4e00\u9879\u4efb\u52a1\uff0c\u518d\u89e3\u9501\u548c\u5904\u7406\u4efb\u52a1\u3002\u52a0\u9501\u4fdd\u8bc1\u4e86\u540c\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a go \u534f\u7a0b\u53ef\u4ee5\u8fdb\u5165\u5230 pool \u4e2d\uff1a\u4e00\u9879\u4efb\u52a1\u6709\u4e14\u53ea\u80fd\u88ab\u8d4b\u4e88\u4e00\u4e2a worker \u3002\u5982\u679c\u4e0d\u52a0\u9501\uff0c\u5219\u5de5\u4f5c\u534f\u7a0b\u53ef\u80fd\u4f1a\u5728 task:=pool.Tasks[0] \u53d1\u751f\u5207\u6362\uff0c\u5bfc\u81f4 pool.Tasks=pool.Tasks[1:] \u7ed3\u679c\u5f02\u5e38\uff1a\u4e00\u4e9b worker \u83b7\u53d6\u4e0d\u5230\u4efb\u52a1\uff0c\u800c\u4e00\u4e9b\u4efb\u52a1\u53ef\u80fd\u88ab\u591a\u4e2a worker \u5f97\u5230\u3002\u52a0\u9501\u5b9e\u73b0\u540c\u6b65\u7684\u65b9\u5f0f\u5728\u5de5\u4f5c\u534f\u7a0b\u6bd4\u8f83\u5c11\u65f6\u53ef\u4ee5\u5de5\u4f5c\u5f97\u5f88\u597d\uff0c\u4f46\u662f\u5f53\u5de5\u4f5c\u534f\u7a0b\u6570\u91cf\u5f88\u5927\uff0c\u4efb\u52a1\u91cf\u4e5f\u5f88\u591a\u65f6\uff0c\u5904\u7406\u6548\u7387\u5c06\u4f1a\u56e0\u4e3a\u9891\u7e41\u7684\u52a0\u9501/\u89e3\u9501\u5f00\u9500\u800c\u964d\u4f4e\u3002\u5f53\u5de5\u4f5c\u534f\u7a0b\u6570\u589e\u52a0\u5230\u4e00\u4e2a\u9608\u503c\u65f6\uff0c\u7a0b\u5e8f\u6548\u7387\u4f1a\u6025\u5267\u4e0b\u964d\uff0c\u8fd9\u5c31\u6210\u4e3a\u4e86\u74f6\u9888\u3002 \u65b0\u6a21\u5f0f\uff1a\u4f7f\u7528\u901a\u9053 \u4f7f\u7528\u901a\u9053\u8fdb\u884c\u540c\u6b65\uff1a\u4f7f\u7528\u4e00\u4e2a\u901a\u9053\u63a5\u53d7\u9700\u8981\u5904\u7406\u7684\u4efb\u52a1\uff0c\u4e00\u4e2a\u901a\u9053\u63a5\u53d7\u5904\u7406\u5b8c\u6210\u7684\u4efb\u52a1\uff08\u53ca\u5176\u7ed3\u679c\uff09\u3002worker \u5728\u534f\u7a0b\u4e2d\u542f\u52a8\uff0c\u5176\u6570\u91cf N \u5e94\u8be5\u6839\u636e\u4efb\u52a1\u6570\u91cf\u8fdb\u884c\u8c03\u6574\u3002 \u4e3b\u7ebf\u7a0b\u626e\u6f14\u7740 Master \u8282\u70b9\u89d2\u8272\uff0c\u53ef\u80fd\u5199\u6210\u5982\u4e0b\u5f62\u5f0f\uff1a func main () { pending , done := make ( chan * Task ), make ( chan * Task ) go sendWork ( pending ) // put tasks with work on the channel for i := 0 ; i < N ; i ++ { // start N goroutines to do work go Worker ( pending , done ) } consumeWork ( done ) // continue with the processed tasks } worker \u7684\u903b\u8f91\u6bd4\u8f83\u7b80\u5355\uff1a\u4ece pending \u901a\u9053\u62ff\u4efb\u52a1\uff0c\u5904\u7406\u540e\u5c06\u5176\u653e\u5230 done \u901a\u9053\u4e2d\uff1a func Worker ( in , out chan * Task ) { for { t := <- in process ( t ) out <- t } } \u8fd9\u91cc\u5e76\u4e0d\u4f7f\u7528\u9501\uff1a\u4ece\u901a\u9053\u5f97\u5230\u65b0\u4efb\u52a1\u7684\u8fc7\u7a0b\u6ca1\u6709\u4efb\u4f55\u7ade\u4e89\u3002\u968f\u7740\u4efb\u52a1\u6570\u91cf\u589e\u52a0\uff0cworker \u6570\u91cf\u4e5f\u5e94\u8be5\u76f8\u5e94\u589e\u52a0\uff0c\u540c\u65f6\u6027\u80fd\u5e76\u4e0d\u4f1a\u50cf\u7b2c\u4e00\u79cd\u65b9\u5f0f\u90a3\u6837\u4e0b\u964d\u660e\u663e\u3002\u5728 pending \u901a\u9053\u4e2d\u5b58\u5728\u4e00\u4efd\u4efb\u52a1\u7684\u62f7\u8d1d\uff0c\u7b2c\u4e00\u4e2a worker \u4ece pending \u901a\u9053\u4e2d\u83b7\u5f97\u7b2c\u4e00\u4e2a\u4efb\u52a1\u5e76\u8fdb\u884c\u5904\u7406\uff0c\u8fd9\u91cc\u5e76\u4e0d\u5b58\u5728\u7ade\u4e89\uff08\u5bf9\u4e00\u4e2a\u901a\u9053\u8bfb\u6570\u636e\u548c\u5199\u6570\u636e\u7684\u6574\u4e2a\u8fc7\u7a0b\u662f\u539f\u5b50\u6027\u7684\uff1a\u53c2\u89c1 14.2.2 \uff09\u3002\u67d0\u4e00\u4e2a\u4efb\u52a1\u4f1a\u5728\u54ea\u4e00\u4e2a worker \u4e2d\u88ab\u6267\u884c\u662f\u4e0d\u53ef\u77e5\u7684\uff0c\u53cd\u8fc7\u6765\u4e5f\u662f\u3002worker \u6570\u91cf\u7684\u589e\u591a\u4e5f\u4f1a\u589e\u52a0\u901a\u4fe1\u7684\u5f00\u9500\uff0c\u8fd9\u4f1a\u5bf9\u6027\u80fd\u6709\u8f7b\u5fae\u7684\u5f71\u54cd\u3002 \u4ece\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u4e2d\u53ef\u80fd\u5f88\u96be\u770b\u51fa\u7b2c\u4e8c\u79cd\u6a21\u5f0f\u7684\u4f18\u52bf\uff0c\u4f46\u542b\u6709\u590d\u6742\u9501\u8fd0\u7528\u7684\u7a0b\u5e8f\u4e0d\u4ec5\u5728\u7f16\u5199\u4e0a\u663e\u5f97\u56f0\u96be\uff0c\u4e5f\u4e0d\u5bb9\u6613\u7f16\u5199\u6b63\u786e\uff0c\u4f7f\u7528\u7b2c\u4e8c\u79cd\u6a21\u5f0f\u7684\u8bdd\uff0c\u5c31\u65e0\u9700\u8003\u8651\u8fd9\u4e48\u590d\u6742\u7684\u4e1c\u897f\u4e86\u3002 \u56e0\u6b64\uff0c\u7b2c\u4e8c\u79cd\u6a21\u5f0f\u5bf9\u6bd4\u7b2c\u4e00\u79cd\u6a21\u5f0f\u800c\u8a00\uff0c\u4e0d\u4ec5\u6027\u80fd\u662f\u4e00\u4e2a\u4e3b\u8981\u4f18\u52bf\uff0c\u800c\u4e14\u8fd8\u6709\u4e2a\u66f4\u5927\u7684\u4f18\u52bf\uff1a\u4ee3\u7801\u663e\u5f97\u66f4\u6e05\u6670\u3001\u66f4\u4f18\u96c5\u3002\u4e00\u4e2a\u66f4\u7b26\u5408 go \u8bed\u8a00\u4e60\u60ef\u7684 worker \u5199\u6cd5\uff1a IDIOM: Use an in- and out-channel instead of locking func Worker ( in , out chan * Task ) { for { t := <- in process ( t ) out <- t } } \u5bf9\u4e8e\u4efb\u4f55\u53ef\u4ee5\u5efa\u6a21\u4e3a Master-Worker \u8303\u4f8b\u7684\u95ee\u9898\uff0c\u4e00\u4e2a\u7c7b\u4f3c\u4e8e worker \u4f7f\u7528\u901a\u9053\u8fdb\u884c\u901a\u4fe1\u548c\u4ea4\u4e92\u3001Master \u8fdb\u884c\u6574\u4f53\u534f\u8c03\u7684\u65b9\u6848\u90fd\u80fd\u5b8c\u7f8e\u89e3\u51b3\u3002\u5982\u679c\u7cfb\u7edf\u90e8\u7f72\u5728\u591a\u53f0\u673a\u5668\u4e0a\uff0c\u5404\u4e2a\u673a\u5668\u4e0a\u6267\u884c Worker \u534f\u7a0b\uff0cMaster \u548c Worker \u4e4b\u95f4\u4f7f\u7528 netchan \u6216\u8005 RPC \u8fdb\u884c\u901a\u4fe1\uff08\u53c2\u89c1 15 \u7ae0 \uff09\u3002 \u600e\u4e48\u9009\u62e9\u662f\u8be5\u4f7f\u7528\u9501\u8fd8\u662f\u901a\u9053\uff1f \u901a\u9053\u662f\u4e00\u4e2a\u8f83\u65b0\u7684\u6982\u5ff5\uff0c\u672c\u8282\u6211\u4eec\u7740\u91cd\u5f3a\u8c03\u4e86\u5728 go \u534f\u7a0b\u91cc\u901a\u9053\u7684\u4f7f\u7528\uff0c\u4f46\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u7ecf\u5178\u7684\u9501\u65b9\u6cd5\u5c31\u4e0d\u80fd\u4f7f\u7528\u3002go \u8bed\u8a00\u8ba9\u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u95ee\u9898\u8fdb\u884c\u9009\u62e9\uff1a\u521b\u5efa\u4e00\u4e2a\u4f18\u96c5\u3001\u7b80\u5355\u3001\u53ef\u8bfb\u6027\u5f3a\u3001\u5728\u5927\u591a\u6570\u573a\u666f\u6027\u80fd\u8868\u73b0\u90fd\u80fd\u5f88\u597d\u7684\u65b9\u6848\u3002\u5982\u679c\u4f60\u7684\u95ee\u9898\u9002\u5408\u4f7f\u7528\u9501\uff0c\u4e5f\u4e0d\u8981\u5fcc\u8bb3\u4f7f\u7528\u5b83\u3002go \u8bed\u8a00\u6ce8\u91cd\u5b9e\u7528\uff0c\u4ec0\u4e48\u65b9\u5f0f\u6700\u80fd\u89e3\u51b3\u4f60\u7684\u95ee\u9898\u5c31\u7528\u4ec0\u4e48\u65b9\u5f0f\uff0c\u800c\u4e0d\u662f\u5f3a\u8feb\u4f60\u4f7f\u7528\u4e00\u79cd\u7f16\u7801\u98ce\u683c\u3002\u4e0b\u9762\u5217\u51fa\u4e00\u4e2a\u666e\u904d\u7684\u7ecf\u9a8c\u6cd5\u5219\uff1a \u4f7f\u7528\u9501\u7684\u60c5\u666f\uff1a \u8bbf\u95ee\u5171\u4eab\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u7f13\u5b58\u4fe1\u606f \u4fdd\u5b58\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u548c\u72b6\u6001\u4fe1\u606f\u6570\u636e \u4f7f\u7528\u901a\u9053\u7684\u60c5\u666f\uff1a \u4e0e\u5f02\u6b65\u64cd\u4f5c\u7684\u7ed3\u679c\u8fdb\u884c\u4ea4\u4e92 \u5206\u53d1\u4efb\u52a1 \u4f20\u9012\u6570\u636e\u6240\u6709\u6743 \u5f53\u4f60\u53d1\u73b0\u4f60\u7684\u9501\u4f7f\u7528\u89c4\u5219\u53d8\u5f97\u5f88\u590d\u6742\u65f6\uff0c\u53ef\u4ee5\u53cd\u7701\u4f7f\u7528\u901a\u9053\u4f1a\u4e0d\u4f1a\u4f7f\u95ee\u9898\u53d8\u5f97\u7b80\u5355\u4e9b\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u534f\u7a0b\u548c\u6062\u590d\uff08recover\uff09 \u4e0b\u4e00\u8282\uff1a \u60f0\u6027\u751f\u6210\u5668\u5b9e\u73b0","title":"14.7 \u65b0\u65e7\u6a21\u578b\u5bf9\u6bd4\uff1a\u4efb\u52a1\u548c worker"},{"location":"14.7/#147-worker","text":"\u5047\u8bbe\u6211\u4eec\u9700\u8981\u5904\u7406\u5f88\u591a\u4efb\u52a1\uff1b\u4e00\u4e2a worker \u5904\u7406\u4e00\u9879\u4efb\u52a1\u3002\u4efb\u52a1\u53ef\u4ee5\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u7ed3\u6784\u4f53\uff08\u5177\u4f53\u7684\u7ec6\u8282\u5728\u8fd9\u91cc\u5e76\u4e0d\u91cd\u8981\uff09\uff1a type Task struct { // some state } \u65e7\u6a21\u5f0f\uff1a\u4f7f\u7528\u5171\u4eab\u5185\u5b58\u8fdb\u884c\u540c\u6b65 \u7531\u5404\u4e2a\u4efb\u52a1\u7ec4\u6210\u7684\u4efb\u52a1\u6c60\u5171\u4eab\u5185\u5b58\uff1b\u4e3a\u4e86\u540c\u6b65\u5404\u4e2a worker \u4ee5\u53ca\u907f\u514d\u8d44\u6e90\u7ade\u4e89\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u4efb\u52a1\u6c60\u8fdb\u884c\u52a0\u9501\u4fdd\u62a4\uff1a type Pool struct { Mu sync . Mutex Tasks [] * Task } sync.Mutex \uff08 \u53c2\u89c19.3 \uff09\u662f\u4e92\u65a5\u9501\uff1a\u5b83\u7528\u6765\u5728\u4ee3\u7801\u4e2d\u4fdd\u62a4\u4e34\u754c\u533a\u8d44\u6e90\uff1a\u540c\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a go \u534f\u7a0b (goroutine) \u53ef\u4ee5\u8fdb\u5165\u8be5\u4e34\u754c\u533a\u3002\u5982\u679c\u51fa\u73b0\u4e86\u540c\u4e00\u65f6\u95f4\u591a\u4e2a go \u534f\u7a0b\u90fd\u8fdb\u5165\u4e86\u8be5\u4e34\u754c\u533a\uff0c\u5219\u4f1a\u4ea7\u751f\u7ade\u4e89\uff1a Pool \u7ed3\u6784\u5c31\u4e0d\u80fd\u4fdd\u8bc1\u88ab\u6b63\u786e\u66f4\u65b0\u3002\u5728\u4f20\u7edf\u7684\u6a21\u5f0f\u4e2d\uff08\u7ecf\u5178\u7684\u9762\u5411\u5bf9\u8c61\u7684\u8bed\u8a00\u4e2d\u5e94\u7528\u5f97\u6bd4\u8f83\u591a\uff0c\u6bd4\u5982 C++\uff0cJAVA\uff0cC#\uff09\uff0cworker \u4ee3\u7801\u53ef\u80fd\u8fd9\u6837\u5199\uff1a func Worker ( pool * Pool ) { for { pool . Mu . Lock () // begin critical section: task := pool . Tasks [ 0 ] // take the first task pool . Tasks = pool . Tasks [ 1 :] // update the pool of tasks // end critical section pool . Mu . Unlock () process ( task ) } } \u8fd9\u4e9b worker \u6709\u8bb8\u591a\u90fd\u53ef\u4ee5\u5e76\u53d1\u6267\u884c\uff1b\u4ed6\u4eec\u53ef\u4ee5\u5728 go \u534f\u7a0b\u4e2d\u542f\u52a8\u3002\u4e00\u4e2a worker \u5148\u5c06 pool \u9501\u5b9a\uff0c\u4ece pool \u83b7\u53d6\u7b2c\u4e00\u9879\u4efb\u52a1\uff0c\u518d\u89e3\u9501\u548c\u5904\u7406\u4efb\u52a1\u3002\u52a0\u9501\u4fdd\u8bc1\u4e86\u540c\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a go \u534f\u7a0b\u53ef\u4ee5\u8fdb\u5165\u5230 pool \u4e2d\uff1a\u4e00\u9879\u4efb\u52a1\u6709\u4e14\u53ea\u80fd\u88ab\u8d4b\u4e88\u4e00\u4e2a worker \u3002\u5982\u679c\u4e0d\u52a0\u9501\uff0c\u5219\u5de5\u4f5c\u534f\u7a0b\u53ef\u80fd\u4f1a\u5728 task:=pool.Tasks[0] \u53d1\u751f\u5207\u6362\uff0c\u5bfc\u81f4 pool.Tasks=pool.Tasks[1:] \u7ed3\u679c\u5f02\u5e38\uff1a\u4e00\u4e9b worker \u83b7\u53d6\u4e0d\u5230\u4efb\u52a1\uff0c\u800c\u4e00\u4e9b\u4efb\u52a1\u53ef\u80fd\u88ab\u591a\u4e2a worker \u5f97\u5230\u3002\u52a0\u9501\u5b9e\u73b0\u540c\u6b65\u7684\u65b9\u5f0f\u5728\u5de5\u4f5c\u534f\u7a0b\u6bd4\u8f83\u5c11\u65f6\u53ef\u4ee5\u5de5\u4f5c\u5f97\u5f88\u597d\uff0c\u4f46\u662f\u5f53\u5de5\u4f5c\u534f\u7a0b\u6570\u91cf\u5f88\u5927\uff0c\u4efb\u52a1\u91cf\u4e5f\u5f88\u591a\u65f6\uff0c\u5904\u7406\u6548\u7387\u5c06\u4f1a\u56e0\u4e3a\u9891\u7e41\u7684\u52a0\u9501/\u89e3\u9501\u5f00\u9500\u800c\u964d\u4f4e\u3002\u5f53\u5de5\u4f5c\u534f\u7a0b\u6570\u589e\u52a0\u5230\u4e00\u4e2a\u9608\u503c\u65f6\uff0c\u7a0b\u5e8f\u6548\u7387\u4f1a\u6025\u5267\u4e0b\u964d\uff0c\u8fd9\u5c31\u6210\u4e3a\u4e86\u74f6\u9888\u3002 \u65b0\u6a21\u5f0f\uff1a\u4f7f\u7528\u901a\u9053 \u4f7f\u7528\u901a\u9053\u8fdb\u884c\u540c\u6b65\uff1a\u4f7f\u7528\u4e00\u4e2a\u901a\u9053\u63a5\u53d7\u9700\u8981\u5904\u7406\u7684\u4efb\u52a1\uff0c\u4e00\u4e2a\u901a\u9053\u63a5\u53d7\u5904\u7406\u5b8c\u6210\u7684\u4efb\u52a1\uff08\u53ca\u5176\u7ed3\u679c\uff09\u3002worker \u5728\u534f\u7a0b\u4e2d\u542f\u52a8\uff0c\u5176\u6570\u91cf N \u5e94\u8be5\u6839\u636e\u4efb\u52a1\u6570\u91cf\u8fdb\u884c\u8c03\u6574\u3002 \u4e3b\u7ebf\u7a0b\u626e\u6f14\u7740 Master \u8282\u70b9\u89d2\u8272\uff0c\u53ef\u80fd\u5199\u6210\u5982\u4e0b\u5f62\u5f0f\uff1a func main () { pending , done := make ( chan * Task ), make ( chan * Task ) go sendWork ( pending ) // put tasks with work on the channel for i := 0 ; i < N ; i ++ { // start N goroutines to do work go Worker ( pending , done ) } consumeWork ( done ) // continue with the processed tasks } worker \u7684\u903b\u8f91\u6bd4\u8f83\u7b80\u5355\uff1a\u4ece pending \u901a\u9053\u62ff\u4efb\u52a1\uff0c\u5904\u7406\u540e\u5c06\u5176\u653e\u5230 done \u901a\u9053\u4e2d\uff1a func Worker ( in , out chan * Task ) { for { t := <- in process ( t ) out <- t } } \u8fd9\u91cc\u5e76\u4e0d\u4f7f\u7528\u9501\uff1a\u4ece\u901a\u9053\u5f97\u5230\u65b0\u4efb\u52a1\u7684\u8fc7\u7a0b\u6ca1\u6709\u4efb\u4f55\u7ade\u4e89\u3002\u968f\u7740\u4efb\u52a1\u6570\u91cf\u589e\u52a0\uff0cworker \u6570\u91cf\u4e5f\u5e94\u8be5\u76f8\u5e94\u589e\u52a0\uff0c\u540c\u65f6\u6027\u80fd\u5e76\u4e0d\u4f1a\u50cf\u7b2c\u4e00\u79cd\u65b9\u5f0f\u90a3\u6837\u4e0b\u964d\u660e\u663e\u3002\u5728 pending \u901a\u9053\u4e2d\u5b58\u5728\u4e00\u4efd\u4efb\u52a1\u7684\u62f7\u8d1d\uff0c\u7b2c\u4e00\u4e2a worker \u4ece pending \u901a\u9053\u4e2d\u83b7\u5f97\u7b2c\u4e00\u4e2a\u4efb\u52a1\u5e76\u8fdb\u884c\u5904\u7406\uff0c\u8fd9\u91cc\u5e76\u4e0d\u5b58\u5728\u7ade\u4e89\uff08\u5bf9\u4e00\u4e2a\u901a\u9053\u8bfb\u6570\u636e\u548c\u5199\u6570\u636e\u7684\u6574\u4e2a\u8fc7\u7a0b\u662f\u539f\u5b50\u6027\u7684\uff1a\u53c2\u89c1 14.2.2 \uff09\u3002\u67d0\u4e00\u4e2a\u4efb\u52a1\u4f1a\u5728\u54ea\u4e00\u4e2a worker \u4e2d\u88ab\u6267\u884c\u662f\u4e0d\u53ef\u77e5\u7684\uff0c\u53cd\u8fc7\u6765\u4e5f\u662f\u3002worker \u6570\u91cf\u7684\u589e\u591a\u4e5f\u4f1a\u589e\u52a0\u901a\u4fe1\u7684\u5f00\u9500\uff0c\u8fd9\u4f1a\u5bf9\u6027\u80fd\u6709\u8f7b\u5fae\u7684\u5f71\u54cd\u3002 \u4ece\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u4e2d\u53ef\u80fd\u5f88\u96be\u770b\u51fa\u7b2c\u4e8c\u79cd\u6a21\u5f0f\u7684\u4f18\u52bf\uff0c\u4f46\u542b\u6709\u590d\u6742\u9501\u8fd0\u7528\u7684\u7a0b\u5e8f\u4e0d\u4ec5\u5728\u7f16\u5199\u4e0a\u663e\u5f97\u56f0\u96be\uff0c\u4e5f\u4e0d\u5bb9\u6613\u7f16\u5199\u6b63\u786e\uff0c\u4f7f\u7528\u7b2c\u4e8c\u79cd\u6a21\u5f0f\u7684\u8bdd\uff0c\u5c31\u65e0\u9700\u8003\u8651\u8fd9\u4e48\u590d\u6742\u7684\u4e1c\u897f\u4e86\u3002 \u56e0\u6b64\uff0c\u7b2c\u4e8c\u79cd\u6a21\u5f0f\u5bf9\u6bd4\u7b2c\u4e00\u79cd\u6a21\u5f0f\u800c\u8a00\uff0c\u4e0d\u4ec5\u6027\u80fd\u662f\u4e00\u4e2a\u4e3b\u8981\u4f18\u52bf\uff0c\u800c\u4e14\u8fd8\u6709\u4e2a\u66f4\u5927\u7684\u4f18\u52bf\uff1a\u4ee3\u7801\u663e\u5f97\u66f4\u6e05\u6670\u3001\u66f4\u4f18\u96c5\u3002\u4e00\u4e2a\u66f4\u7b26\u5408 go \u8bed\u8a00\u4e60\u60ef\u7684 worker \u5199\u6cd5\uff1a IDIOM: Use an in- and out-channel instead of locking func Worker ( in , out chan * Task ) { for { t := <- in process ( t ) out <- t } } \u5bf9\u4e8e\u4efb\u4f55\u53ef\u4ee5\u5efa\u6a21\u4e3a Master-Worker \u8303\u4f8b\u7684\u95ee\u9898\uff0c\u4e00\u4e2a\u7c7b\u4f3c\u4e8e worker \u4f7f\u7528\u901a\u9053\u8fdb\u884c\u901a\u4fe1\u548c\u4ea4\u4e92\u3001Master \u8fdb\u884c\u6574\u4f53\u534f\u8c03\u7684\u65b9\u6848\u90fd\u80fd\u5b8c\u7f8e\u89e3\u51b3\u3002\u5982\u679c\u7cfb\u7edf\u90e8\u7f72\u5728\u591a\u53f0\u673a\u5668\u4e0a\uff0c\u5404\u4e2a\u673a\u5668\u4e0a\u6267\u884c Worker \u534f\u7a0b\uff0cMaster \u548c Worker \u4e4b\u95f4\u4f7f\u7528 netchan \u6216\u8005 RPC \u8fdb\u884c\u901a\u4fe1\uff08\u53c2\u89c1 15 \u7ae0 \uff09\u3002 \u600e\u4e48\u9009\u62e9\u662f\u8be5\u4f7f\u7528\u9501\u8fd8\u662f\u901a\u9053\uff1f \u901a\u9053\u662f\u4e00\u4e2a\u8f83\u65b0\u7684\u6982\u5ff5\uff0c\u672c\u8282\u6211\u4eec\u7740\u91cd\u5f3a\u8c03\u4e86\u5728 go \u534f\u7a0b\u91cc\u901a\u9053\u7684\u4f7f\u7528\uff0c\u4f46\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u7ecf\u5178\u7684\u9501\u65b9\u6cd5\u5c31\u4e0d\u80fd\u4f7f\u7528\u3002go \u8bed\u8a00\u8ba9\u4f60\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u95ee\u9898\u8fdb\u884c\u9009\u62e9\uff1a\u521b\u5efa\u4e00\u4e2a\u4f18\u96c5\u3001\u7b80\u5355\u3001\u53ef\u8bfb\u6027\u5f3a\u3001\u5728\u5927\u591a\u6570\u573a\u666f\u6027\u80fd\u8868\u73b0\u90fd\u80fd\u5f88\u597d\u7684\u65b9\u6848\u3002\u5982\u679c\u4f60\u7684\u95ee\u9898\u9002\u5408\u4f7f\u7528\u9501\uff0c\u4e5f\u4e0d\u8981\u5fcc\u8bb3\u4f7f\u7528\u5b83\u3002go \u8bed\u8a00\u6ce8\u91cd\u5b9e\u7528\uff0c\u4ec0\u4e48\u65b9\u5f0f\u6700\u80fd\u89e3\u51b3\u4f60\u7684\u95ee\u9898\u5c31\u7528\u4ec0\u4e48\u65b9\u5f0f\uff0c\u800c\u4e0d\u662f\u5f3a\u8feb\u4f60\u4f7f\u7528\u4e00\u79cd\u7f16\u7801\u98ce\u683c\u3002\u4e0b\u9762\u5217\u51fa\u4e00\u4e2a\u666e\u904d\u7684\u7ecf\u9a8c\u6cd5\u5219\uff1a \u4f7f\u7528\u9501\u7684\u60c5\u666f\uff1a \u8bbf\u95ee\u5171\u4eab\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u7f13\u5b58\u4fe1\u606f \u4fdd\u5b58\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u548c\u72b6\u6001\u4fe1\u606f\u6570\u636e \u4f7f\u7528\u901a\u9053\u7684\u60c5\u666f\uff1a \u4e0e\u5f02\u6b65\u64cd\u4f5c\u7684\u7ed3\u679c\u8fdb\u884c\u4ea4\u4e92 \u5206\u53d1\u4efb\u52a1 \u4f20\u9012\u6570\u636e\u6240\u6709\u6743 \u5f53\u4f60\u53d1\u73b0\u4f60\u7684\u9501\u4f7f\u7528\u89c4\u5219\u53d8\u5f97\u5f88\u590d\u6742\u65f6\uff0c\u53ef\u4ee5\u53cd\u7701\u4f7f\u7528\u901a\u9053\u4f1a\u4e0d\u4f1a\u4f7f\u95ee\u9898\u53d8\u5f97\u7b80\u5355\u4e9b\u3002","title":"14.7 \u65b0\u65e7\u6a21\u578b\u5bf9\u6bd4\uff1a\u4efb\u52a1\u548c worker"},{"location":"14.7/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u534f\u7a0b\u548c\u6062\u590d\uff08recover\uff09 \u4e0b\u4e00\u8282\uff1a \u60f0\u6027\u751f\u6210\u5668\u5b9e\u73b0","title":"\u94fe\u63a5"},{"location":"14.8/","text":"14.8 \u60f0\u6027\u751f\u6210\u5668\u7684\u5b9e\u73b0 \u00b6 \u751f\u6210\u5668\u662f\u6307\u5f53\u88ab\u8c03\u7528\u65f6\u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u4e2d\u4e0b\u4e00\u4e2a\u503c\u7684\u51fd\u6570\uff0c\u4f8b\u5982\uff1a generateInteger () => 0 generateInteger () => 1 generateInteger () => 2 ... . \u751f\u6210\u5668\u6bcf\u6b21\u8fd4\u56de\u7684\u662f\u5e8f\u5217\u4e2d\u4e0b\u4e00\u4e2a\u503c\u800c\u975e\u6574\u4e2a\u5e8f\u5217\uff1b\u8fd9\u79cd\u7279\u6027\u4e5f\u79f0\u4e4b\u4e3a\u60f0\u6027\u6c42\u503c\uff1a\u53ea\u5728\u4f60\u9700\u8981\u65f6\u8fdb\u884c\u6c42\u503c\uff0c\u540c\u65f6\u4fdd\u7559\u76f8\u5173\u53d8\u91cf\u8d44\u6e90\uff08\u5185\u5b58\u548c CPU\uff09\uff1a\u8fd9\u662f\u4e00\u9879\u5728\u9700\u8981\u65f6\u5bf9\u8868\u8fbe\u5f0f\u8fdb\u884c\u6c42\u503c\u7684\u6280\u672f\u3002\u4f8b\u5982\uff0c\u751f\u6210\u4e00\u4e2a\u65e0\u9650\u6570\u91cf\u7684\u5076\u6570\u5e8f\u5217\uff1a\u8981\u4ea7\u751f\u8fd9\u6837\u4e00\u4e2a\u5e8f\u5217\u5e76\u4e14\u5728\u4e00\u4e2a\u4e00\u4e2a\u7684\u4f7f\u7528\u53ef\u80fd\u4f1a\u5f88\u56f0\u96be\uff0c\u800c\u4e14\u5185\u5b58\u4f1a\u6ea2\u51fa\uff01\u4f46\u662f\u4e00\u4e2a\u542b\u6709\u901a\u9053\u548c go \u534f\u7a0b\u7684\u51fd\u6570\u80fd\u8f7b\u6613\u5b9e\u73b0\u8fd9\u4e2a\u9700\u6c42\u3002 \u5728 14.12 \u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86\u4e00\u4e2a\u4f7f\u7528 int \u578b\u901a\u9053\u6765\u5b9e\u73b0\u7684\u751f\u6210\u5668\u3002\u901a\u9053\u88ab\u547d\u540d\u4e3a yield \u548c resume \uff0c\u8fd9\u4e9b\u8bcd\u7ecf\u5e38\u5728\u534f\u7a0b\u4ee3\u7801\u4e2d\u4f7f\u7528\u3002 \u793a\u4f8b 14.12 lazy_evaluation.go \uff1a package main import ( \"fmt\" ) var resume chan int func integers () chan int { yield := make ( chan int ) count := 0 go func () { for { yield <- count count ++ } }() return yield } func generateInteger () int { return <- resume } func main () { resume = integers () fmt . Println ( generateInteger ()) //=> 0 fmt . Println ( generateInteger ()) //=> 1 fmt . Println ( generateInteger ()) //=> 2 } \u6709\u4e00\u4e2a\u7ec6\u5fae\u7684\u533a\u522b\u662f\u4ece\u901a\u9053\u8bfb\u53d6\u7684\u503c\u53ef\u80fd\u4f1a\u662f\u7a0d\u65e9\u524d\u4ea7\u751f\u7684\uff0c\u5e76\u4e0d\u662f\u5728\u7a0b\u5e8f\u88ab\u8c03\u7528\u65f6\u751f\u6210\u7684\u3002\u5982\u679c\u786e\u5b9e\u9700\u8981\u8fd9\u6837\u7684\u884c\u4e3a\uff0c\u5c31\u5f97\u5b9e\u73b0\u4e00\u4e2a\u8bf7\u6c42\u54cd\u5e94\u673a\u5236\u3002\u5f53\u751f\u6210\u5668\u751f\u6210\u6570\u636e\u7684\u8fc7\u7a0b\u662f\u8ba1\u7b97\u5bc6\u96c6\u578b\u4e14\u5404\u4e2a\u7ed3\u679c\u7684\u987a\u5e8f\u5e76\u4e0d\u91cd\u8981\u65f6\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5c06\u751f\u6210\u5668\u653e\u5165\u5230 go \u534f\u7a0b\u5b9e\u73b0\u5e76\u884c\u5316\u3002\u4f46\u662f\u5f97\u5c0f\u5fc3\uff0c\u4f7f\u7528\u5927\u91cf\u7684 go \u534f\u7a0b\u7684\u5f00\u9500\u53ef\u80fd\u4f1a\u8d85\u8fc7\u5e26\u6765\u7684\u6027\u80fd\u589e\u76ca\u3002 \u8fd9\u4e9b\u539f\u5219\u53ef\u4ee5\u6982\u62ec\u4e3a\uff1a\u901a\u8fc7\u5de7\u5999\u5730\u4f7f\u7528\u7a7a\u63a5\u53e3\u3001\u95ed\u5305\u548c\u9ad8\u9636\u51fd\u6570\uff0c\u6211\u4eec\u80fd\u5b9e\u73b0\u4e00\u4e2a\u901a\u7528\u7684\u60f0\u6027\u751f\u4ea7\u5668\u7684\u5de5\u5382\u51fd\u6570 BuildLazyEvaluator \uff08\u8fd9\u4e2a\u5e94\u8be5\u653e\u5728\u4e00\u4e2a\u5de5\u5177\u5305\u4e2d\u5b9e\u73b0\uff09\u3002\u5de5\u5382\u51fd\u6570\u9700\u8981\u4e00\u4e2a\u51fd\u6570\u548c\u4e00\u4e2a\u521d\u59cb\u72b6\u6001\u4f5c\u4e3a\u8f93\u5165\u53c2\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u65e0\u53c2\u3001\u8fd4\u56de\u503c\u662f\u751f\u6210\u5e8f\u5217\u7684\u51fd\u6570\u3002\u4f20\u5165\u7684\u51fd\u6570\u9700\u8981\u8ba1\u7b97\u51fa\u4e0b\u4e00\u4e2a\u8fd4\u56de\u503c\u4ee5\u53ca\u4e0b\u4e00\u4e2a\u72b6\u6001\u53c2\u6570\u3002\u5728\u5de5\u5382\u51fd\u6570\u4e2d\uff0c\u521b\u5efa\u4e00\u4e2a\u901a\u9053\u548c\u65e0\u9650\u5faa\u73af\u7684 go \u534f\u7a0b\u3002\u8fd4\u56de\u503c\u88ab\u653e\u5230\u4e86\u8be5\u901a\u9053\u4e2d\uff0c\u8fd4\u56de\u51fd\u6570\u7a0d\u540e\u88ab\u8c03\u7528\u65f6\u4ece\u8be5\u901a\u9053\u4e2d\u53d6\u5f97\u8be5\u8fd4\u56de\u503c\u3002\u6bcf\u5f53\u53d6\u5f97\u4e00\u4e2a\u503c\u65f6\uff0c\u4e0b\u4e00\u4e2a\u503c\u5373\u88ab\u8ba1\u7b97\u3002\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a evenFunc \u51fd\u6570\uff0c\u5176\u662f\u4e00\u4e2a\u60f0\u6027\u751f\u6210\u51fd\u6570\uff1a\u5728 main() \u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u524d 10 \u4e2a\u5076\u6570\uff0c\u6bcf\u4e2a\u90fd\u662f\u901a\u8fc7\u8c03\u7528 even() \u51fd\u6570\u53d6\u5f97\u4e0b\u4e00\u4e2a\u503c\u7684\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5728 BuildLazyIntEvaluator \u51fd\u6570\u4e2d\u5177\u4f53\u5316\u6211\u4eec\u7684\u751f\u6210\u51fd\u6570\uff0c\u7136\u540e\u6211\u4eec\u80fd\u591f\u57fa\u4e8e\u6b64\u505a\u51fa\u5b9a\u4e49\u3002 \u793a\u4f8b 14.13 general_lazy_evalution1.go \uff1a package main import ( \"fmt\" ) type Any interface {} type EvalFunc func ( Any ) ( Any , Any ) func main () { evenFunc := func ( state Any ) ( Any , Any ) { os := state .( int ) ns := os + 2 return os , ns } even := BuildLazyIntEvaluator ( evenFunc , 0 ) for i := 0 ; i < 10 ; i ++ { fmt . Printf ( \"%vth even: %v\\n\" , i , even ()) } } func BuildLazyEvaluator ( evalFunc EvalFunc , initState Any ) func () Any { retValChan := make ( chan Any ) loopFunc := func () { var actState Any = initState var retVal Any for { retVal , actState = evalFunc ( actState ) retValChan <- retVal } } retFunc := func () Any { return <- retValChan } go loopFunc () return retFunc } func BuildLazyIntEvaluator ( evalFunc EvalFunc , initState Any ) func () int { ef := BuildLazyEvaluator ( evalFunc , initState ) return func () int { return ef ().( int ) } } \u8f93\u51fa\uff1a 0 th even : 0 1 th even : 2 2 th even : 4 3 th even : 6 4 th even : 8 5 th even : 10 6 th even : 12 7 th even : 14 8 th even : 16 9 th even : 18 \u7ec3\u4e6014.12\uff1a general_lazy_evaluation2.go \u901a\u8fc7\u4f7f\u7528 14.12 \u4e2d\u5de5\u5382\u51fd\u6570\u751f\u6210\u524d 10 \u4e2a\u6590\u6ce2\u90a3\u5951\u6570 \u63d0\u793a\uff1a\u56e0\u4e3a\u6590\u6ce2\u90a3\u5951\u6570\u589e\u957f\u5f88\u8fc5\u901f\uff0c\u4f7f\u7528 uint64 \u7c7b\u578b\u3002 \u6ce8\uff1a\u8fd9\u79cd\u8ba1\u7b97\u901a\u5e38\u88ab\u5b9a\u4e49\u4e3a\u9012\u5f52\u51fd\u6570\uff0c\u4f46\u662f\u5728\u6ca1\u6709\u5c3e\u9012\u5f52\u7684\u8bed\u8a00\u4e2d\uff0c\u4f8b\u5982 go \u8bed\u8a00\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6808\u6ea2\u51fa\uff0c\u4f46\u968f\u7740 go \u8bed\u8a00\u4e2d\u5806\u6808\u53ef\u6269\u5c55\u7684\u4f18\u5316\uff0c\u8fd9\u4e2a\u95ee\u9898\u5c31\u4e0d\u90a3\u4e48\u4e25\u91cd\u3002\u8fd9\u91cc\u7684\u8bc0\u7a8d\u662f\u4f7f\u7528\u4e86\u60f0\u6027\u6c42\u503c\u3002gccgo \u7f16\u8bd1\u5668\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4f1a\u5b9e\u73b0\u5c3e\u9012\u5f52\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u65b0\u65e7\u6a21\u578b\u5bf9\u6bd4\uff1a\u4efb\u52a1\u548cworker \u4e0b\u4e00\u8282\uff1a \u5b9e\u73b0 Futures \u6a21\u5f0f","title":"14.8 \u60f0\u6027\u751f\u6210\u5668\u7684\u5b9e\u73b0"},{"location":"14.8/#148","text":"\u751f\u6210\u5668\u662f\u6307\u5f53\u88ab\u8c03\u7528\u65f6\u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u4e2d\u4e0b\u4e00\u4e2a\u503c\u7684\u51fd\u6570\uff0c\u4f8b\u5982\uff1a generateInteger () => 0 generateInteger () => 1 generateInteger () => 2 ... . \u751f\u6210\u5668\u6bcf\u6b21\u8fd4\u56de\u7684\u662f\u5e8f\u5217\u4e2d\u4e0b\u4e00\u4e2a\u503c\u800c\u975e\u6574\u4e2a\u5e8f\u5217\uff1b\u8fd9\u79cd\u7279\u6027\u4e5f\u79f0\u4e4b\u4e3a\u60f0\u6027\u6c42\u503c\uff1a\u53ea\u5728\u4f60\u9700\u8981\u65f6\u8fdb\u884c\u6c42\u503c\uff0c\u540c\u65f6\u4fdd\u7559\u76f8\u5173\u53d8\u91cf\u8d44\u6e90\uff08\u5185\u5b58\u548c CPU\uff09\uff1a\u8fd9\u662f\u4e00\u9879\u5728\u9700\u8981\u65f6\u5bf9\u8868\u8fbe\u5f0f\u8fdb\u884c\u6c42\u503c\u7684\u6280\u672f\u3002\u4f8b\u5982\uff0c\u751f\u6210\u4e00\u4e2a\u65e0\u9650\u6570\u91cf\u7684\u5076\u6570\u5e8f\u5217\uff1a\u8981\u4ea7\u751f\u8fd9\u6837\u4e00\u4e2a\u5e8f\u5217\u5e76\u4e14\u5728\u4e00\u4e2a\u4e00\u4e2a\u7684\u4f7f\u7528\u53ef\u80fd\u4f1a\u5f88\u56f0\u96be\uff0c\u800c\u4e14\u5185\u5b58\u4f1a\u6ea2\u51fa\uff01\u4f46\u662f\u4e00\u4e2a\u542b\u6709\u901a\u9053\u548c go \u534f\u7a0b\u7684\u51fd\u6570\u80fd\u8f7b\u6613\u5b9e\u73b0\u8fd9\u4e2a\u9700\u6c42\u3002 \u5728 14.12 \u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86\u4e00\u4e2a\u4f7f\u7528 int \u578b\u901a\u9053\u6765\u5b9e\u73b0\u7684\u751f\u6210\u5668\u3002\u901a\u9053\u88ab\u547d\u540d\u4e3a yield \u548c resume \uff0c\u8fd9\u4e9b\u8bcd\u7ecf\u5e38\u5728\u534f\u7a0b\u4ee3\u7801\u4e2d\u4f7f\u7528\u3002 \u793a\u4f8b 14.12 lazy_evaluation.go \uff1a package main import ( \"fmt\" ) var resume chan int func integers () chan int { yield := make ( chan int ) count := 0 go func () { for { yield <- count count ++ } }() return yield } func generateInteger () int { return <- resume } func main () { resume = integers () fmt . Println ( generateInteger ()) //=> 0 fmt . Println ( generateInteger ()) //=> 1 fmt . Println ( generateInteger ()) //=> 2 } \u6709\u4e00\u4e2a\u7ec6\u5fae\u7684\u533a\u522b\u662f\u4ece\u901a\u9053\u8bfb\u53d6\u7684\u503c\u53ef\u80fd\u4f1a\u662f\u7a0d\u65e9\u524d\u4ea7\u751f\u7684\uff0c\u5e76\u4e0d\u662f\u5728\u7a0b\u5e8f\u88ab\u8c03\u7528\u65f6\u751f\u6210\u7684\u3002\u5982\u679c\u786e\u5b9e\u9700\u8981\u8fd9\u6837\u7684\u884c\u4e3a\uff0c\u5c31\u5f97\u5b9e\u73b0\u4e00\u4e2a\u8bf7\u6c42\u54cd\u5e94\u673a\u5236\u3002\u5f53\u751f\u6210\u5668\u751f\u6210\u6570\u636e\u7684\u8fc7\u7a0b\u662f\u8ba1\u7b97\u5bc6\u96c6\u578b\u4e14\u5404\u4e2a\u7ed3\u679c\u7684\u987a\u5e8f\u5e76\u4e0d\u91cd\u8981\u65f6\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5c06\u751f\u6210\u5668\u653e\u5165\u5230 go \u534f\u7a0b\u5b9e\u73b0\u5e76\u884c\u5316\u3002\u4f46\u662f\u5f97\u5c0f\u5fc3\uff0c\u4f7f\u7528\u5927\u91cf\u7684 go \u534f\u7a0b\u7684\u5f00\u9500\u53ef\u80fd\u4f1a\u8d85\u8fc7\u5e26\u6765\u7684\u6027\u80fd\u589e\u76ca\u3002 \u8fd9\u4e9b\u539f\u5219\u53ef\u4ee5\u6982\u62ec\u4e3a\uff1a\u901a\u8fc7\u5de7\u5999\u5730\u4f7f\u7528\u7a7a\u63a5\u53e3\u3001\u95ed\u5305\u548c\u9ad8\u9636\u51fd\u6570\uff0c\u6211\u4eec\u80fd\u5b9e\u73b0\u4e00\u4e2a\u901a\u7528\u7684\u60f0\u6027\u751f\u4ea7\u5668\u7684\u5de5\u5382\u51fd\u6570 BuildLazyEvaluator \uff08\u8fd9\u4e2a\u5e94\u8be5\u653e\u5728\u4e00\u4e2a\u5de5\u5177\u5305\u4e2d\u5b9e\u73b0\uff09\u3002\u5de5\u5382\u51fd\u6570\u9700\u8981\u4e00\u4e2a\u51fd\u6570\u548c\u4e00\u4e2a\u521d\u59cb\u72b6\u6001\u4f5c\u4e3a\u8f93\u5165\u53c2\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u65e0\u53c2\u3001\u8fd4\u56de\u503c\u662f\u751f\u6210\u5e8f\u5217\u7684\u51fd\u6570\u3002\u4f20\u5165\u7684\u51fd\u6570\u9700\u8981\u8ba1\u7b97\u51fa\u4e0b\u4e00\u4e2a\u8fd4\u56de\u503c\u4ee5\u53ca\u4e0b\u4e00\u4e2a\u72b6\u6001\u53c2\u6570\u3002\u5728\u5de5\u5382\u51fd\u6570\u4e2d\uff0c\u521b\u5efa\u4e00\u4e2a\u901a\u9053\u548c\u65e0\u9650\u5faa\u73af\u7684 go \u534f\u7a0b\u3002\u8fd4\u56de\u503c\u88ab\u653e\u5230\u4e86\u8be5\u901a\u9053\u4e2d\uff0c\u8fd4\u56de\u51fd\u6570\u7a0d\u540e\u88ab\u8c03\u7528\u65f6\u4ece\u8be5\u901a\u9053\u4e2d\u53d6\u5f97\u8be5\u8fd4\u56de\u503c\u3002\u6bcf\u5f53\u53d6\u5f97\u4e00\u4e2a\u503c\u65f6\uff0c\u4e0b\u4e00\u4e2a\u503c\u5373\u88ab\u8ba1\u7b97\u3002\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a evenFunc \u51fd\u6570\uff0c\u5176\u662f\u4e00\u4e2a\u60f0\u6027\u751f\u6210\u51fd\u6570\uff1a\u5728 main() \u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u524d 10 \u4e2a\u5076\u6570\uff0c\u6bcf\u4e2a\u90fd\u662f\u901a\u8fc7\u8c03\u7528 even() \u51fd\u6570\u53d6\u5f97\u4e0b\u4e00\u4e2a\u503c\u7684\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5728 BuildLazyIntEvaluator \u51fd\u6570\u4e2d\u5177\u4f53\u5316\u6211\u4eec\u7684\u751f\u6210\u51fd\u6570\uff0c\u7136\u540e\u6211\u4eec\u80fd\u591f\u57fa\u4e8e\u6b64\u505a\u51fa\u5b9a\u4e49\u3002 \u793a\u4f8b 14.13 general_lazy_evalution1.go \uff1a package main import ( \"fmt\" ) type Any interface {} type EvalFunc func ( Any ) ( Any , Any ) func main () { evenFunc := func ( state Any ) ( Any , Any ) { os := state .( int ) ns := os + 2 return os , ns } even := BuildLazyIntEvaluator ( evenFunc , 0 ) for i := 0 ; i < 10 ; i ++ { fmt . Printf ( \"%vth even: %v\\n\" , i , even ()) } } func BuildLazyEvaluator ( evalFunc EvalFunc , initState Any ) func () Any { retValChan := make ( chan Any ) loopFunc := func () { var actState Any = initState var retVal Any for { retVal , actState = evalFunc ( actState ) retValChan <- retVal } } retFunc := func () Any { return <- retValChan } go loopFunc () return retFunc } func BuildLazyIntEvaluator ( evalFunc EvalFunc , initState Any ) func () int { ef := BuildLazyEvaluator ( evalFunc , initState ) return func () int { return ef ().( int ) } } \u8f93\u51fa\uff1a 0 th even : 0 1 th even : 2 2 th even : 4 3 th even : 6 4 th even : 8 5 th even : 10 6 th even : 12 7 th even : 14 8 th even : 16 9 th even : 18 \u7ec3\u4e6014.12\uff1a general_lazy_evaluation2.go \u901a\u8fc7\u4f7f\u7528 14.12 \u4e2d\u5de5\u5382\u51fd\u6570\u751f\u6210\u524d 10 \u4e2a\u6590\u6ce2\u90a3\u5951\u6570 \u63d0\u793a\uff1a\u56e0\u4e3a\u6590\u6ce2\u90a3\u5951\u6570\u589e\u957f\u5f88\u8fc5\u901f\uff0c\u4f7f\u7528 uint64 \u7c7b\u578b\u3002 \u6ce8\uff1a\u8fd9\u79cd\u8ba1\u7b97\u901a\u5e38\u88ab\u5b9a\u4e49\u4e3a\u9012\u5f52\u51fd\u6570\uff0c\u4f46\u662f\u5728\u6ca1\u6709\u5c3e\u9012\u5f52\u7684\u8bed\u8a00\u4e2d\uff0c\u4f8b\u5982 go \u8bed\u8a00\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6808\u6ea2\u51fa\uff0c\u4f46\u968f\u7740 go \u8bed\u8a00\u4e2d\u5806\u6808\u53ef\u6269\u5c55\u7684\u4f18\u5316\uff0c\u8fd9\u4e2a\u95ee\u9898\u5c31\u4e0d\u90a3\u4e48\u4e25\u91cd\u3002\u8fd9\u91cc\u7684\u8bc0\u7a8d\u662f\u4f7f\u7528\u4e86\u60f0\u6027\u6c42\u503c\u3002gccgo \u7f16\u8bd1\u5668\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4f1a\u5b9e\u73b0\u5c3e\u9012\u5f52\u3002","title":"14.8 \u60f0\u6027\u751f\u6210\u5668\u7684\u5b9e\u73b0"},{"location":"14.8/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u65b0\u65e7\u6a21\u578b\u5bf9\u6bd4\uff1a\u4efb\u52a1\u548cworker \u4e0b\u4e00\u8282\uff1a \u5b9e\u73b0 Futures \u6a21\u5f0f","title":"\u94fe\u63a5"},{"location":"14.9/","text":"14.9 \u5b9e\u73b0 Futures \u6a21\u5f0f \u00b6 \u6240\u8c13 Futures \u5c31\u662f\u6307\uff1a\u6709\u65f6\u5019\u5728\u4f60\u4f7f\u7528\u67d0\u4e00\u4e2a\u503c\u4e4b\u524d\u9700\u8981\u5148\u5bf9\u5176\u8fdb\u884c\u8ba1\u7b97\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u5c31\u53ef\u4ee5\u5728\u53e6\u4e00\u4e2a\u5904\u7406\u5668\u4e0a\u8fdb\u884c\u8be5\u503c\u7684\u8ba1\u7b97\uff0c\u5230\u4f7f\u7528\u65f6\uff0c\u8be5\u503c\u5c31\u5df2\u7ecf\u8ba1\u7b97\u5b8c\u6bd5\u4e86\u3002 Futures \u6a21\u5f0f\u901a\u8fc7\u95ed\u5305\u548c\u901a\u9053\u53ef\u4ee5\u5f88\u5bb9\u6613\u5b9e\u73b0\uff0c\u7c7b\u4f3c\u4e8e\u751f\u6210\u5668\uff0c\u4e0d\u540c\u5730\u65b9\u5728\u4e8e Futures \u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 \u53c2\u8003\u6761\u76ee\u6587\u732e\u7ed9\u51fa\u4e86\u4e00\u4e2a\u5f88\u7cbe\u5f69\u7684\u4f8b\u5b50\uff1a\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u77e9\u9635\u7c7b\u578b\uff0c\u6211\u4eec\u9700\u8981\u8ba1\u7b97\u4e24\u4e2a\u77e9\u9635 A \u548c B \u4e58\u79ef\u7684\u9006\uff0c\u9996\u5148\u6211\u4eec\u901a\u8fc7\u51fd\u6570 Inverse(M) \u5206\u522b\u5bf9\u5176\u8fdb\u884c\u6c42\u9006\u8fd0\u7b97\uff0c\u518d\u5c06\u7ed3\u679c\u76f8\u4e58\u3002\u5982\u4e0b\u51fd\u6570 InverseProduct() \u5b9e\u73b0\u4e86\u5982\u4e0a\u8fc7\u7a0b\uff1a func InverseProduct ( a Matrix , b Matrix ) { a_inv := Inverse ( a ) b_inv := Inverse ( b ) return Product ( a_inv , b_inv ) } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c a \u548c b \u7684\u6c42\u9006\u77e9\u9635\u9700\u8981\u5148\u88ab\u8ba1\u7b97\u3002\u90a3\u4e48\u4e3a\u4ec0\u4e48\u5728\u8ba1\u7b97 b \u7684\u9006\u77e9\u9635\u65f6\uff0c\u9700\u8981\u7b49\u5f85 a \u7684\u9006\u8ba1\u7b97\u5b8c\u6210\u5462\uff1f\u663e\u7136\u4e0d\u5fc5\u8981\uff0c\u8fd9\u4e24\u4e2a\u6c42\u9006\u8fd0\u7b97\u5176\u5b9e\u53ef\u4ee5\u5e76\u884c\u6267\u884c\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8c03\u7528 Product() \u51fd\u6570\u53ea\u9700\u8981\u7b49\u5230 a_inv \u548c b_inv \u7684\u8ba1\u7b97\u5b8c\u6210\u3002\u5982\u4e0b\u4ee3\u7801\u5b9e\u73b0\u4e86\u5e76\u884c\u8ba1\u7b97\u65b9\u5f0f\uff1a func InverseProduct ( a Matrix , b Matrix ) { a_inv_future := InverseFuture ( a ) // start as a goroutine b_inv_future := InverseFuture ( b ) // start as a goroutine a_inv := <- a_inv_future b_inv := <- b_inv_future return Product ( a_inv , b_inv ) } InverseFuture() \u51fd\u6570\u4ee5 goroutine \u7684\u5f62\u5f0f\u8d77\u4e86\u4e00\u4e2a\u95ed\u5305\uff0c\u8be5\u95ed\u5305\u4f1a\u5c06\u77e9\u9635\u6c42\u9006\u7ed3\u679c\u653e\u5165\u5230 future \u901a\u9053\u4e2d\uff1a func InverseFuture ( a Matrix ) chan Matrix { future := make ( chan Matrix ) go func () { future <- Inverse ( a ) }() return future } \u5f53\u5f00\u53d1\u4e00\u4e2a\u8ba1\u7b97\u5bc6\u96c6\u578b\u5e93\u65f6\uff0c\u4f7f\u7528 Futures \u6a21\u5f0f\u8bbe\u8ba1 API \u63a5\u53e3\u662f\u5f88\u6709\u610f\u4e49\u7684\u3002\u5728\u4f60\u7684\u5305\u4f7f\u7528 Futures \u6a21\u5f0f\uff0c\u4e14\u80fd\u4fdd\u6301\u53cb\u597d\u7684 API \u63a5\u53e3\u3002\u6b64\u5916\uff0cFutures \u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u5f02\u6b65\u7684 API \u66b4\u9732\u51fa\u6765\u3002\u8fd9\u6837\u4f60\u53ef\u4ee5\u4ee5\u6700\u5c0f\u7684\u6210\u672c\u5c06\u5305\u4e2d\u7684\u5e76\u884c\u8ba1\u7b97\u79fb\u5230\u7528\u6237\u4ee3\u7801\u4e2d\u3002\uff08\u53c2\u89c1\u53c2\u8003\u6587\u4ef6 18\uff1a http://www.golangpatterns.info/concurrency/futures \uff09 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u60f0\u6027\u751f\u6210\u5668\u7684\u5b9e\u73b0 \u4e0b\u4e00\u8282\uff1a \u590d\u7528","title":"14.9 \u5b9e\u73b0 Futures \u6a21\u5f0f"},{"location":"14.9/#149-futures","text":"\u6240\u8c13 Futures \u5c31\u662f\u6307\uff1a\u6709\u65f6\u5019\u5728\u4f60\u4f7f\u7528\u67d0\u4e00\u4e2a\u503c\u4e4b\u524d\u9700\u8981\u5148\u5bf9\u5176\u8fdb\u884c\u8ba1\u7b97\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u5c31\u53ef\u4ee5\u5728\u53e6\u4e00\u4e2a\u5904\u7406\u5668\u4e0a\u8fdb\u884c\u8be5\u503c\u7684\u8ba1\u7b97\uff0c\u5230\u4f7f\u7528\u65f6\uff0c\u8be5\u503c\u5c31\u5df2\u7ecf\u8ba1\u7b97\u5b8c\u6bd5\u4e86\u3002 Futures \u6a21\u5f0f\u901a\u8fc7\u95ed\u5305\u548c\u901a\u9053\u53ef\u4ee5\u5f88\u5bb9\u6613\u5b9e\u73b0\uff0c\u7c7b\u4f3c\u4e8e\u751f\u6210\u5668\uff0c\u4e0d\u540c\u5730\u65b9\u5728\u4e8e Futures \u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 \u53c2\u8003\u6761\u76ee\u6587\u732e\u7ed9\u51fa\u4e86\u4e00\u4e2a\u5f88\u7cbe\u5f69\u7684\u4f8b\u5b50\uff1a\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u77e9\u9635\u7c7b\u578b\uff0c\u6211\u4eec\u9700\u8981\u8ba1\u7b97\u4e24\u4e2a\u77e9\u9635 A \u548c B \u4e58\u79ef\u7684\u9006\uff0c\u9996\u5148\u6211\u4eec\u901a\u8fc7\u51fd\u6570 Inverse(M) \u5206\u522b\u5bf9\u5176\u8fdb\u884c\u6c42\u9006\u8fd0\u7b97\uff0c\u518d\u5c06\u7ed3\u679c\u76f8\u4e58\u3002\u5982\u4e0b\u51fd\u6570 InverseProduct() \u5b9e\u73b0\u4e86\u5982\u4e0a\u8fc7\u7a0b\uff1a func InverseProduct ( a Matrix , b Matrix ) { a_inv := Inverse ( a ) b_inv := Inverse ( b ) return Product ( a_inv , b_inv ) } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c a \u548c b \u7684\u6c42\u9006\u77e9\u9635\u9700\u8981\u5148\u88ab\u8ba1\u7b97\u3002\u90a3\u4e48\u4e3a\u4ec0\u4e48\u5728\u8ba1\u7b97 b \u7684\u9006\u77e9\u9635\u65f6\uff0c\u9700\u8981\u7b49\u5f85 a \u7684\u9006\u8ba1\u7b97\u5b8c\u6210\u5462\uff1f\u663e\u7136\u4e0d\u5fc5\u8981\uff0c\u8fd9\u4e24\u4e2a\u6c42\u9006\u8fd0\u7b97\u5176\u5b9e\u53ef\u4ee5\u5e76\u884c\u6267\u884c\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8c03\u7528 Product() \u51fd\u6570\u53ea\u9700\u8981\u7b49\u5230 a_inv \u548c b_inv \u7684\u8ba1\u7b97\u5b8c\u6210\u3002\u5982\u4e0b\u4ee3\u7801\u5b9e\u73b0\u4e86\u5e76\u884c\u8ba1\u7b97\u65b9\u5f0f\uff1a func InverseProduct ( a Matrix , b Matrix ) { a_inv_future := InverseFuture ( a ) // start as a goroutine b_inv_future := InverseFuture ( b ) // start as a goroutine a_inv := <- a_inv_future b_inv := <- b_inv_future return Product ( a_inv , b_inv ) } InverseFuture() \u51fd\u6570\u4ee5 goroutine \u7684\u5f62\u5f0f\u8d77\u4e86\u4e00\u4e2a\u95ed\u5305\uff0c\u8be5\u95ed\u5305\u4f1a\u5c06\u77e9\u9635\u6c42\u9006\u7ed3\u679c\u653e\u5165\u5230 future \u901a\u9053\u4e2d\uff1a func InverseFuture ( a Matrix ) chan Matrix { future := make ( chan Matrix ) go func () { future <- Inverse ( a ) }() return future } \u5f53\u5f00\u53d1\u4e00\u4e2a\u8ba1\u7b97\u5bc6\u96c6\u578b\u5e93\u65f6\uff0c\u4f7f\u7528 Futures \u6a21\u5f0f\u8bbe\u8ba1 API \u63a5\u53e3\u662f\u5f88\u6709\u610f\u4e49\u7684\u3002\u5728\u4f60\u7684\u5305\u4f7f\u7528 Futures \u6a21\u5f0f\uff0c\u4e14\u80fd\u4fdd\u6301\u53cb\u597d\u7684 API \u63a5\u53e3\u3002\u6b64\u5916\uff0cFutures \u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u5f02\u6b65\u7684 API \u66b4\u9732\u51fa\u6765\u3002\u8fd9\u6837\u4f60\u53ef\u4ee5\u4ee5\u6700\u5c0f\u7684\u6210\u672c\u5c06\u5305\u4e2d\u7684\u5e76\u884c\u8ba1\u7b97\u79fb\u5230\u7528\u6237\u4ee3\u7801\u4e2d\u3002\uff08\u53c2\u89c1\u53c2\u8003\u6587\u4ef6 18\uff1a http://www.golangpatterns.info/concurrency/futures \uff09","title":"14.9 \u5b9e\u73b0 Futures \u6a21\u5f0f"},{"location":"14.9/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u60f0\u6027\u751f\u6210\u5668\u7684\u5b9e\u73b0 \u4e0b\u4e00\u8282\uff1a \u590d\u7528","title":"\u94fe\u63a5"},{"location":"15.0/","text":"15.0 \u7f51\u7edc\u3001\u6a21\u677f\u4e0e\u7f51\u9875\u5e94\u7528 \u00b6 Go \u5728\u7f16\u5199 web \u5e94\u7528\u65b9\u9762\u975e\u5e38\u5f97\u529b\u3002\u56e0\u4e3a\u76ee\u524d\u5b83\u8fd8\u6ca1\u6709 GUI\uff08Graphic User Interface \u5373\u56fe\u5f62\u5316\u7528\u6237\u754c\u9762\uff09\u7684\u6846\u67b6\uff0c\u901a\u8fc7\u6587\u672c\u6216\u8005\u6a21\u677f\u5c55\u73b0\u7684 html \u9875\u9762\u662f\u76ee\u524d Go \u7f16\u5199\u754c\u9762\u5e94\u7528\u7a0b\u5e8f\u7684\u552f\u4e00\u65b9\u5f0f\u3002\uff08 \u8bd1\u8005\u6ce8\uff1a\u5b9e\u9645\u4e0a\u5728\u7ffb\u8bd1\u7684\u65f6\u5019\uff0c\u5df2\u7ecf\u6709\u4e86\u4e00\u4e9b\u4e0d\u592a\u6210\u719f\u7684 GUI \u5e93\uff0c\u4f8b\u5982\uff1ago ui \u3002 \uff09 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f7f\u7528\u901a\u9053\u5e76\u53d1\u8bbf\u95ee\u5bf9\u8c61 \u4e0b\u4e00\u8282\uff1a tcp \u670d\u52a1\u5668","title":"15.0 \u7f51\u7edc\u3001\u6a21\u677f\u4e0e\u7f51\u9875\u5e94\u7528"},{"location":"15.0/#150","text":"Go \u5728\u7f16\u5199 web \u5e94\u7528\u65b9\u9762\u975e\u5e38\u5f97\u529b\u3002\u56e0\u4e3a\u76ee\u524d\u5b83\u8fd8\u6ca1\u6709 GUI\uff08Graphic User Interface \u5373\u56fe\u5f62\u5316\u7528\u6237\u754c\u9762\uff09\u7684\u6846\u67b6\uff0c\u901a\u8fc7\u6587\u672c\u6216\u8005\u6a21\u677f\u5c55\u73b0\u7684 html \u9875\u9762\u662f\u76ee\u524d Go \u7f16\u5199\u754c\u9762\u5e94\u7528\u7a0b\u5e8f\u7684\u552f\u4e00\u65b9\u5f0f\u3002\uff08 \u8bd1\u8005\u6ce8\uff1a\u5b9e\u9645\u4e0a\u5728\u7ffb\u8bd1\u7684\u65f6\u5019\uff0c\u5df2\u7ecf\u6709\u4e86\u4e00\u4e9b\u4e0d\u592a\u6210\u719f\u7684 GUI \u5e93\uff0c\u4f8b\u5982\uff1ago ui \u3002 \uff09","title":"15.0 \u7f51\u7edc\u3001\u6a21\u677f\u4e0e\u7f51\u9875\u5e94\u7528"},{"location":"15.0/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f7f\u7528\u901a\u9053\u5e76\u53d1\u8bbf\u95ee\u5bf9\u8c61 \u4e0b\u4e00\u8282\uff1a tcp \u670d\u52a1\u5668","title":"\u94fe\u63a5"},{"location":"15.1/","text":"15.1 tcp \u670d\u52a1\u5668 \u00b6 \u8fd9\u90e8\u5206\u6211\u4eec\u5c06\u4f7f\u7528 TCP \u534f\u8bae\u548c\u5728 14 \u7ae0\u8bb2\u5230\u7684\u534f\u7a0b\u8303\u5f0f\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u5ba2\u6237\u7aef-\u670d\u52a1\u5668\u5e94\u7528\uff0c\u4e00\u4e2a (web) \u670d\u52a1\u5668\u5e94\u7528\u9700\u8981\u54cd\u5e94\u4f17\u591a\u5ba2\u6237\u7aef\u7684\u5e76\u53d1\u8bf7\u6c42\uff1aGo \u4f1a\u4e3a\u6bcf\u4e00\u4e2a\u5ba2\u6237\u7aef\u4ea7\u751f\u4e00\u4e2a\u534f\u7a0b\u7528\u6765\u5904\u7406\u8bf7\u6c42\u3002\u6211\u4eec\u9700\u8981\u4f7f\u7528 net \u5305\u4e2d\u7f51\u7edc\u901a\u4fe1\u7684\u529f\u80fd\u3002\u5b83\u5305\u542b\u4e86\u5904\u7406 TCP/IP \u4ee5\u53ca UDP \u534f\u8bae\u3001\u57df\u540d\u89e3\u6790\u7b49\u65b9\u6cd5\u3002 \u670d\u52a1\u5668\u7aef\u4ee3\u7801\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u6587\u4ef6\uff1a \u793a\u4f8b 15.1 server.go package main import ( \"fmt\" \"net\" ) func main () { fmt . Println ( \"Starting the server ...\" ) // \u521b\u5efa listener listener , err := net . Listen ( \"tcp\" , \"localhost:50000\" ) if err != nil { fmt . Println ( \"Error listening\" , err . Error ()) return //\u7ec8\u6b62\u7a0b\u5e8f } // \u76d1\u542c\u5e76\u63a5\u53d7\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u8fde\u63a5 for { conn , err := listener . Accept () if err != nil { fmt . Println ( \"Error accepting\" , err . Error ()) return // \u7ec8\u6b62\u7a0b\u5e8f } go doServerStuff ( conn ) } } func doServerStuff ( conn net . Conn ) { for { buf := make ([] byte , 512 ) len , err := conn . Read ( buf ) if err != nil { fmt . Println ( \"Error reading\" , err . Error ()) return //\u7ec8\u6b62\u7a0b\u5e8f } fmt . Printf ( \"Received data: %v\" , string ( buf [: len ])) } } \u5728 main() \u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a net.Listener \u7c7b\u578b\u7684\u53d8\u91cf listener \uff0c\u4ed6\u5b9e\u73b0\u4e86\u670d\u52a1\u5668\u7684\u57fa\u672c\u529f\u80fd\uff1a\u7528\u6765\u76d1\u542c\u548c\u63a5\u6536\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\uff08\u57fa\u4e8e TCP \u534f\u8bae\u4e0b\uff0c\u4f4d\u4e8e IP \u5730\u5740\u4e3a 127.0.0.1\u3001\u7aef\u53e3\u4e3a 50000 \u7684 localhost\uff09\u3002 Listen() \u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a error \u7c7b\u578b\u7684\u9519\u8bef\u53d8\u91cf\u3002\u7528\u4e00\u4e2a\u65e0\u9650 for \u5faa\u73af\u7684 listener.Accept() \u6765\u7b49\u5f85\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u3002\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u5c06\u4ea7\u751f\u4e00\u4e2a net.Conn \u7c7b\u578b\u7684\u8fde\u63a5\u53d8\u91cf\u3002\u7136\u540e\u4e00\u4e2a\u72ec\u7acb\u7684\u534f\u7a0b\u4f7f\u7528\u8fd9\u4e2a\u8fde\u63a5\u6267\u884c doServerStuff() \uff0c\u5f00\u59cb\u4f7f\u7528\u4e00\u4e2a 512 \u5b57\u8282\u7684\u7f13\u51b2 data \u6765\u8bfb\u53d6\u5ba2\u6237\u7aef\u53d1\u9001\u6765\u7684\u6570\u636e\uff0c\u5e76\u4e14\u628a\u5b83\u4eec\u6253\u5370\u5230\u670d\u52a1\u5668\u7684\u7ec8\u7aef\uff0c len() \u83b7\u53d6\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u6570\u636e\u5b57\u8282\u6570\uff1b\u5f53\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u6240\u6709\u6570\u636e\u90fd\u88ab\u8bfb\u53d6\u5b8c\u6210\u65f6\uff0c\u534f\u7a0b\u5c31\u7ed3\u675f\u4e86\u3002\u8fd9\u6bb5\u7a0b\u5e8f\u4f1a\u4e3a\u6bcf\u4e00\u4e2a\u5ba2\u6237\u7aef\u8fde\u63a5\u521b\u5efa\u4e00\u4e2a\u72ec\u7acb\u7684\u534f\u7a0b\u3002\u5fc5\u987b\u5148\u8fd0\u884c\u670d\u52a1\u5668\u4ee3\u7801\uff0c\u518d\u8fd0\u884c\u5ba2\u6237\u7aef\u4ee3\u7801\u3002 \u5ba2\u6237\u7aef\u4ee3\u7801\u5199\u5728\u53e6\u4e00\u4e2a\u6587\u4ef6 client.go \u4e2d\uff1a \u793a\u4f8b 15.2 client.go package main import ( \"bufio\" \"fmt\" \"net\" \"os\" \"strings\" ) func main () { //\u6253\u5f00\u8fde\u63a5: conn , err := net . Dial ( \"tcp\" , \"localhost:50000\" ) if err != nil { //\u7531\u4e8e\u76ee\u6807\u8ba1\u7b97\u673a\u79ef\u6781\u62d2\u7edd\u800c\u65e0\u6cd5\u521b\u5efa\u8fde\u63a5 fmt . Println ( \"Error dialing\" , err . Error ()) return // \u7ec8\u6b62\u7a0b\u5e8f } inputReader := bufio . NewReader ( os . Stdin ) fmt . Println ( \"First, what is your name?\" ) clientName , _ := inputReader . ReadString ( '\\n' ) // fmt.Printf(\"CLIENTNAME %s\", clientName) trimmedClient := strings . Trim ( clientName , \"\\r\\n\" ) // Windows \u5e73\u53f0\u4e0b\u7528 \"\\r\\n\"\uff0cLinux\u5e73\u53f0\u4e0b\u4f7f\u7528 \"\\n\" // \u7ed9\u670d\u52a1\u5668\u53d1\u9001\u4fe1\u606f\u76f4\u5230\u7a0b\u5e8f\u9000\u51fa\uff1a for { fmt . Println ( \"What to send to the server? Type Q to quit.\" ) input , _ := inputReader . ReadString ( '\\n' ) trimmedInput := strings . Trim ( input , \"\\r\\n\" ) // fmt.Printf(\"input:--%s--\", input) // fmt.Printf(\"trimmedInput:--%s--\", trimmedInput) if trimmedInput == \"Q\" { return } _ , err = conn . Write ([] byte ( trimmedClient + \" says: \" + trimmedInput )) } } \u5ba2\u6237\u7aef\u901a\u8fc7 net.Dial() \u521b\u5efa\u4e86\u4e00\u4e2a\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u8fde\u63a5\u3002 \u5b83\u901a\u8fc7\u65e0\u9650\u5faa\u73af\u4ece os.Stdin \u63a5\u6536\u6765\u81ea\u952e\u76d8\u7684\u8f93\u5165\uff0c\u76f4\u5230\u8f93\u5165\u4e86\u201cQ\u201d\u3002\u6ce8\u610f\u88c1\u526a \\r \u548c \\n \u5b57\u7b26\uff08\u4ec5 Windows \u5e73\u53f0\u9700\u8981\uff09\u3002\u88c1\u526a\u540e\u7684\u8f93\u5165\u88ab connection \u7684 Write() \u65b9\u6cd5\u53d1\u9001\u5230\u670d\u52a1\u5668\u3002 \u5f53\u7136\uff0c\u670d\u52a1\u5668\u5fc5\u987b\u5148\u542f\u52a8\u597d\uff0c\u5982\u679c\u670d\u52a1\u5668\u5e76\u672a\u5f00\u59cb\u76d1\u542c\uff0c\u5ba2\u6237\u7aef\u662f\u65e0\u6cd5\u6210\u529f\u8fde\u63a5\u7684\u3002 \u5982\u679c\u5728\u670d\u52a1\u5668\u6ca1\u6709\u5f00\u59cb\u76d1\u542c\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u5ba2\u6237\u7aef\u7a0b\u5e8f\uff0c\u5ba2\u6237\u7aef\u4f1a\u505c\u6b62\u5e76\u6253\u5370\u51fa\u4ee5\u4e0b\u9519\u8bef\u4fe1\u606f\uff1a dial tcp [::1]:xxxx: connectex: No connection could be made because the target machine actively refused it. \u6253\u5f00\u547d\u4ee4\u63d0\u793a\u7b26\u5e76\u8f6c\u5230\u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u4ee3\u7801\u6240\u5728\u7684\u76ee\u5f55\uff0c\u8f93\u5165 go run server.go \uff0c\u63a5\u4e0b\u6765\u63a7\u5236\u53f0\u51fa\u73b0\u4ee5\u4e0b\u4fe1\u606f\uff1a Starting the server ... \u5728 Windows \u7cfb\u7edf\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 CTRL+C \u505c\u6b62\u7a0b\u5e8f\u3002 \u7136\u540e\u5f00\u542f 2 \u4e2a\u6216\u8005 3 \u4e2a\u72ec\u7acb\u7684\u63a7\u5236\u53f0\u7a97\u53e3\uff0c\u5206\u522b\u542f\u52a8\u5ba2\u6237\u7aef\u7a0b\u5e8f \u4ee5\u4e0b\u662f\u670d\u52a1\u5668\u7684\u8f93\u51fa\uff1a Starting the Server ... Received data: IVO says: Hi Server, what's up ? Received data: CHRIS says: Are you busy server ? Received data: MARC says: Don't forget our appointment tomorrow ! \u5f53\u5ba2\u6237\u7aef\u8f93\u5165\u201cQ\u201d\u5e76\u7ed3\u675f\u7a0b\u5e8f\u65f6\uff0c\u670d\u52a1\u5668\u4f1a\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a Error reading WSARecv tcp 127.0.0.1:50000: The specified network name is no longer available. \u5728\u7f51\u7edc\u7f16\u7a0b\u4e2d net.Dial() \u51fd\u6570\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u4e00\u65e6\u4f60\u8fde\u63a5\u5230\u8fdc\u7a0b\u7cfb\u7edf\uff0c\u51fd\u6570\u5c31\u4f1a\u8fd4\u56de\u4e00\u4e2a Conn \u7c7b\u578b\u7684\u63a5\u53e3\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u53d1\u9001\u548c\u63a5\u6536\u6570\u636e\u3002 Dial() \u51fd\u6570\u7b80\u6d01\u5730\u62bd\u8c61\u4e86\u7f51\u7edc\u5c42\u548c\u4f20\u8f93\u5c42\u3002\u6240\u4ee5\u4e0d\u7ba1\u662f IPv4 \u8fd8\u662f IPv6\uff0cTCP \u6216\u8005 UDP \u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u516c\u7528\u63a5\u53e3\u3002 \u4ee5\u4e0b\u793a\u4f8b\u5148\u4f7f\u7528 TCP \u534f\u8bae\u8fde\u63a5\u8fdc\u7a0b 80 \u7aef\u53e3\uff0c\u7136\u540e\u4f7f\u7528 UDP \u534f\u8bae\u8fde\u63a5\uff0c\u6700\u540e\u4f7f\u7528 TCP \u534f\u8bae\u8fde\u63a5 IPv6 \u5730\u5740\uff1a \u793a\u4f8b 15.3 dial.go // make a connection with www.example.org: package main import ( \"fmt\" \"net\" \"os\" ) func main () { conn , err := net . Dial ( \"tcp\" , \"192.0.32.10:80\" ) // tcp ipv4 checkConnection ( conn , err ) conn , err = net . Dial ( \"udp\" , \"192.0.32.10:80\" ) // udp checkConnection ( conn , err ) conn , err = net . Dial ( \"tcp\" , \"[2620:0:2d0:200::10]:80\" ) // tcp ipv6 checkConnection ( conn , err ) } func checkConnection ( conn net . Conn , err error ) { if err != nil { fmt . Printf ( \"error %v connecting!\" , err ) os . Exit ( 1 ) } fmt . Printf ( \"Connection is made with %v\\n\" , conn ) } \u4e0b\u8fb9\u4e5f\u662f\u4e00\u4e2a\u4f7f\u7528 net \u5305\u4ece socket \u4e2d\u6253\u5f00\uff0c\u5199\u5165\uff0c\u8bfb\u53d6\u6570\u636e\u7684\u4f8b\u5b50\uff1a \u793a\u4f8b 15.4 socket.go package main import ( \"fmt\" \"io\" \"net\" ) func main () { var ( host = \"www.apache.org\" port = \"80\" remote = host + \":\" + port msg string = \"GET / \\n\" data = make ([] uint8 , 4096 ) read = true count = 0 ) // \u521b\u5efa\u4e00\u4e2a socket con , err := net . Dial ( \"tcp\" , remote ) // \u53d1\u9001\u6211\u4eec\u7684\u6d88\u606f\uff0c\u4e00\u4e2a http GET \u8bf7\u6c42 io . WriteString ( con , msg ) // \u8bfb\u53d6\u670d\u52a1\u5668\u7684\u54cd\u5e94 for read { count , err = con . Read ( data ) read = ( err == nil ) fmt . Printf ( string ( data [ 0 : count ])) } con . Close () } \u7ec3\u4e60 15.1 \u7f16\u5199\u65b0\u7248\u672c\u7684\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668 ( client1.go / server1.go )\uff1a \u589e\u52a0\u4e00\u4e2a\u68c0\u67e5\u9519\u8bef\u7684\u51fd\u6570 checkError(error) \uff1b\u8ba8\u8bba\u5982\u4e0b\u65b9\u6848\u7684\u5229\u5f0a\uff1a\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u91cd\u6784\u53ef\u80fd\u5e76\u6ca1\u6709\u90a3\u4e48\u7406\u60f3\uff1f\u770b\u770b\u5728 \u793a\u4f8b 15.14 \u4e2d\u5b83\u662f\u5982\u4f55\u88ab\u89e3\u51b3\u7684 \u4f7f\u5ba2\u6237\u7aef\u53ef\u4ee5\u901a\u8fc7\u53d1\u9001\u4e00\u6761\u547d\u4ee4 SH \u6765\u5173\u95ed\u670d\u52a1\u5668 \u8ba9\u670d\u52a1\u5668\u53ef\u4ee5\u4fdd\u5b58\u5df2\u7ecf\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\u5217\u8868\uff08\u4ed6\u4eec\u7684\u540d\u5b57\uff09\uff1b\u5f53\u5ba2\u6237\u7aef\u53d1\u9001 WHO \u6307\u4ee4\u7684\u65f6\u5019\uff0c\u670d\u52a1\u5668\u5c06\u663e\u793a\u5982\u4e0b\u5217\u8868\uff1a This is the client list: 1:active, 0=inactive User IVO is 1 User MARC is 1 User CHRIS is 1 \u6ce8\u610f\uff1a\u5f53\u670d\u52a1\u5668\u8fd0\u884c\u7684\u65f6\u5019\uff0c\u4f60\u65e0\u6cd5\u7f16\u8bd1/\u8fde\u63a5\u540c\u4e00\u4e2a\u76ee\u5f55\u4e0b\u7684\u6e90\u7801\u6765\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u7248\u672c\uff0c\u56e0\u4e3a server.exe \u6b63\u5728\u88ab\u64cd\u4f5c\u7cfb\u7edf\u4f7f\u7528\u800c\u65e0\u6cd5\u88ab\u66ff\u6362\u6210\u65b0\u7684\u7248\u672c\u3002 \u4e0b\u8fb9\u8fd9\u4e2a\u7248\u672c\u7684 simple_tcp_server.go \u4ece\u5f88\u591a\u65b9\u9762\u4f18\u5316\u4e86\u7b2c\u4e00\u4e2a tcp \u670d\u52a1\u5668\u7684\u793a\u4f8b server.go \u5e76\u4e14\u62e5\u6709\u66f4\u597d\u7684\u7ed3\u6784\uff0c\u5b83\u53ea\u7528\u4e86 80 \u884c\u4ee3\u7801\uff01 \u793a\u4f8b 15.5 simple_tcp_server.go \uff1a // Simple multi-thread/multi-core TCP server. package main import ( \"flag\" \"fmt\" \"net\" \"os\" ) const maxRead = 25 func main () { flag . Parse () if flag . NArg () != 2 { panic ( \"usage: host port\" ) } hostAndPort := fmt . Sprintf ( \"%s:%s\" , flag . Arg ( 0 ), flag . Arg ( 1 )) listener := initServer ( hostAndPort ) for { conn , err := listener . Accept () checkError ( err , \"Accept: \" ) go connectionHandler ( conn ) } } func initServer ( hostAndPort string ) * net . TCPListener { serverAddr , err := net . ResolveTCPAddr ( \"tcp\" , hostAndPort ) checkError ( err , \"Resolving address:port failed: '\" + hostAndPort + \"'\" ) listener , err := net . ListenTCP ( \"tcp\" , serverAddr ) checkError ( err , \"ListenTCP: \" ) println ( \"Listening to: \" , listener . Addr (). String ()) return listener } func connectionHandler ( conn net . Conn ) { connFrom := conn . RemoteAddr (). String () println ( \"Connection from: \" , connFrom ) sayHello ( conn ) for { var ibuf [] byte = make ([] byte , maxRead + 1 ) length , err := conn . Read ( ibuf [ 0 : maxRead ]) ibuf [ maxRead ] = 0 // to prevent overflow switch err { case nil : handleMsg ( length , err , ibuf ) case os . EAGAIN : // try again continue default : goto DISCONNECT } } DISCONNECT : err := conn . Close () println ( \"Closed connection: \" , connFrom ) checkError ( err , \"Close: \" ) } func sayHello ( to net . Conn ) { obuf := [] byte { 'L' , 'e' , 't' , '\\'' , 's' , ' ' , 'G' , 'O' , '!' , '\\n' } wrote , err := to . Write ( obuf ) checkError ( err , \"Write: wrote \" + string ( wrote ) + \" bytes.\" ) } func handleMsg ( length int , err error , msg [] byte ) { if length > 0 { print ( \"<\" , length , \":\" ) for i := 0 ; ; i ++ { if msg [ i ] == 0 { break } fmt . Printf ( \"%c\" , msg [ i ]) } print ( \">\" ) } } func checkError ( error error , info string ) { if error != nil { panic ( \"ERROR: \" + info + \" \" + error . Error ()) // terminate program } } \uff08 \u8bd1\u8005\u6ce8\uff1a\u5e94\u8be5\u662f\u7531\u4e8e Go \u7248\u672c\u7684\u66f4\u65b0\uff0c\u4f1a\u63d0\u793a os.EAGAIN undefined\uff0c\u4fee\u6539\u540e\u7684\u4ee3\u7801\uff1a simple_tcp_server_v1.go \uff09 \u90fd\u6709\u54ea\u4e9b\u6539\u8fdb\uff1f \u670d\u52a1\u5668\u5730\u5740\u548c\u7aef\u53e3\u4e0d\u518d\u662f\u786c\u7f16\u7801\uff0c\u800c\u662f\u901a\u8fc7\u547d\u4ee4\u884c\u53c2\u6570\u4f20\u5165\uff0c\u5e76\u901a\u8fc7 flag \u5305\u6765\u8bfb\u53d6\u8fd9\u4e9b\u53c2\u6570\u3002\u8fd9\u91cc\u4f7f\u7528\u4e86 flag.NArg() \u68c0\u67e5\u662f\u5426\u6309\u7167\u671f\u671b\u4f20\u5165\u4e86 2 \u4e2a\u53c2\u6570\uff1a if flag . NArg () != 2 { panic ( \"usage: host port\" ) } \u4f20\u5165\u7684\u53c2\u6570\u901a\u8fc7 fmt.Sprintf() \u51fd\u6570\u683c\u5f0f\u5316\u6210\u5b57\u7b26\u4e32 hostAndPort := fmt . Sprintf ( \"%s:%s\" , flag . Arg ( 0 ), flag . Arg ( 1 )) * \u5728 initServer() \u51fd\u6570\u4e2d\u901a\u8fc7 net.ResolveTCPAddr() \u5f97\u5230\u4e86\u670d\u52a1\u5668\u5730\u5740\u548c\u7aef\u53e3\uff0c\u8fd9\u4e2a\u51fd\u6570\u6700\u7ec8\u8fd4\u56de\u4e86\u4e00\u4e2a *net.TCPListener * \u6bcf\u4e00\u4e2a\u8fde\u63a5\u90fd\u4f1a\u4ee5\u534f\u7a0b\u7684\u65b9\u5f0f\u8fd0\u884c connectionHandler() \u51fd\u6570\u3002\u51fd\u6570\u9996\u5148\u901a\u8fc7 conn.RemoteAddr() \u83b7\u53d6\u5230\u5ba2\u6237\u7aef\u7684\u5730\u5740\u5e76\u663e\u793a\u51fa\u6765 * \u5b83\u4f7f\u7528 conn.Write() \u53d1\u9001 Go \u63a8\u5e7f\u6d88\u606f\u7ed9\u5ba2\u6237\u7aef * \u5b83\u4f7f\u7528\u4e00\u4e2a 25 \u5b57\u8282\u7684\u7f13\u51b2\u8bfb\u53d6\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u6570\u636e\u5e76\u4e00\u4e00\u6253\u5370\u51fa\u6765\u3002\u5982\u679c\u8bfb\u53d6\u7684\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u9519\u8bef\uff0c\u4ee3\u7801\u4f1a\u8fdb\u5165 switch \u8bed\u53e5 default \u5206\u652f\uff0c\u9000\u51fa\u65e0\u9650\u5faa\u73af\u5e76\u5173\u95ed\u8fde\u63a5\u3002\u5982\u679c\u662f\u64cd\u4f5c\u7cfb\u7edf\u7684 EAGAIN \u9519\u8bef\uff0c\u5b83\u4f1a\u91cd\u8bd5\u3002 * \u6240\u6709\u7684\u9519\u8bef\u68c0\u67e5\u90fd\u88ab\u91cd\u6784\u5728\u72ec\u7acb\u7684\u51fd\u6570 checkError \u4e2d\uff0c\u5f53\u9519\u8bef\u4ea7\u751f\u65f6\uff0c\u5229\u7528\u9519\u8bef\u4e0a\u4e0b\u6587\u6765\u89e6\u53d1 panic\u3002 \u5728\u547d\u4ee4\u884c\u4e2d\u8f93\u5165 simple_tcp_server localhost 50000 \u6765\u542f\u52a8\u670d\u52a1\u5668\u7a0b\u5e8f\uff0c\u7136\u540e\u5728\u72ec\u7acb\u7684\u547d\u4ee4\u884c\u7a97\u53e3\u542f\u52a8\u4e00\u4e9b client.go \u7684\u5ba2\u6237\u7aef\u3002\u5f53\u6709\u4e24\u4e2a\u5ba2\u6237\u7aef\u8fde\u63a5\u7684\u60c5\u51b5\u4e0b\u670d\u52a1\u5668\u7684\u5178\u578b\u8f93\u51fa\u5982\u4e0b\uff0c\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6bcf\u4e2a\u5ba2\u6237\u7aef\u90fd\u6709\u81ea\u5df1\u7684\u5730\u5740\uff1a E:\\Go\\GoBoek\\code examples\\chapter 14>simple_tcp_server localhost 50000 Listening to: 127.0.0.1:50000 Connection from: 127.0.0.1:49346 <25:Ivo says: Hi server, do y><12:ou hear me ?> Connection from: 127.0.0.1:49347 <25:Marc says: Do you remembe><25:r our first meeting serve><2:r?> net.Error\uff1a net \u5305\u8fd4\u56de\u7684\u9519\u8bef\u7c7b\u578b\u9075\u5faa\u60ef\u4f8b\u4e3a error \uff0c\u4f46\u6709\u4e9b\u9519\u8bef\u5b9e\u73b0\u5305\u542b\u989d\u5916\u7684\u65b9\u6cd5\uff0c\u4ed6\u4eec\u88ab\u5b9a\u4e49\u4e3a net.Error \u63a5\u53e3\uff1a package net type Error interface { Timeout () bool // \u9519\u8bef\u662f\u5426\u8d85\u65f6 Temporary () bool // \u662f\u5426\u662f\u4e34\u65f6\u9519\u8bef } \u901a\u8fc7\u7c7b\u578b\u65ad\u8a00\uff0c\u5ba2\u6237\u7aef\u4ee3\u7801\u53ef\u4ee5\u6d4b\u8bd5 net.Error \uff0c\u4ece\u800c\u533a\u5206\u662f\u4e34\u65f6\u53d1\u751f\u7684\u8fd8\u662f\u5fc5\u7136\u4f1a\u51fa\u73b0\u7684\u9519\u8bef\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u4e00\u4e2a\u7f51\u7edc\u722c\u866b\u7a0b\u5e8f\u5728\u9047\u5230\u4e34\u65f6\u53d1\u751f\u7684\u9519\u8bef\u65f6\u53ef\u80fd\u4f1a\u4f11\u7720\u6216\u8005\u91cd\u8bd5\uff0c\u5982\u679c\u662f\u4e00\u4e2a\u5fc5\u7136\u53d1\u751f\u7684\u9519\u8bef\uff0c\u5219\u4ed6\u4f1a\u653e\u5f03\u7ee7\u7eed\u6267\u884c\u3002 // in a loop - some function returns an error err if nerr , ok := err .( net . Error ); ok && nerr . Temporary () { time . Sleep ( 1e9 ) continue // try again } if err != nil { log . Fatal ( err ) } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7f51\u7edc\u3001\u6a21\u7248\u4e0e\u7f51\u9875\u5e94\u7528 \u4e0b\u4e00\u8282\uff1a \u4e00\u4e2a\u7b80\u5355\u7684\u7f51\u9875\u670d\u52a1\u5668","title":"15.1 tcp \u670d\u52a1\u5668"},{"location":"15.1/#151-tcp","text":"\u8fd9\u90e8\u5206\u6211\u4eec\u5c06\u4f7f\u7528 TCP \u534f\u8bae\u548c\u5728 14 \u7ae0\u8bb2\u5230\u7684\u534f\u7a0b\u8303\u5f0f\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u5ba2\u6237\u7aef-\u670d\u52a1\u5668\u5e94\u7528\uff0c\u4e00\u4e2a (web) \u670d\u52a1\u5668\u5e94\u7528\u9700\u8981\u54cd\u5e94\u4f17\u591a\u5ba2\u6237\u7aef\u7684\u5e76\u53d1\u8bf7\u6c42\uff1aGo \u4f1a\u4e3a\u6bcf\u4e00\u4e2a\u5ba2\u6237\u7aef\u4ea7\u751f\u4e00\u4e2a\u534f\u7a0b\u7528\u6765\u5904\u7406\u8bf7\u6c42\u3002\u6211\u4eec\u9700\u8981\u4f7f\u7528 net \u5305\u4e2d\u7f51\u7edc\u901a\u4fe1\u7684\u529f\u80fd\u3002\u5b83\u5305\u542b\u4e86\u5904\u7406 TCP/IP \u4ee5\u53ca UDP \u534f\u8bae\u3001\u57df\u540d\u89e3\u6790\u7b49\u65b9\u6cd5\u3002 \u670d\u52a1\u5668\u7aef\u4ee3\u7801\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u6587\u4ef6\uff1a \u793a\u4f8b 15.1 server.go package main import ( \"fmt\" \"net\" ) func main () { fmt . Println ( \"Starting the server ...\" ) // \u521b\u5efa listener listener , err := net . Listen ( \"tcp\" , \"localhost:50000\" ) if err != nil { fmt . Println ( \"Error listening\" , err . Error ()) return //\u7ec8\u6b62\u7a0b\u5e8f } // \u76d1\u542c\u5e76\u63a5\u53d7\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u8fde\u63a5 for { conn , err := listener . Accept () if err != nil { fmt . Println ( \"Error accepting\" , err . Error ()) return // \u7ec8\u6b62\u7a0b\u5e8f } go doServerStuff ( conn ) } } func doServerStuff ( conn net . Conn ) { for { buf := make ([] byte , 512 ) len , err := conn . Read ( buf ) if err != nil { fmt . Println ( \"Error reading\" , err . Error ()) return //\u7ec8\u6b62\u7a0b\u5e8f } fmt . Printf ( \"Received data: %v\" , string ( buf [: len ])) } } \u5728 main() \u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a net.Listener \u7c7b\u578b\u7684\u53d8\u91cf listener \uff0c\u4ed6\u5b9e\u73b0\u4e86\u670d\u52a1\u5668\u7684\u57fa\u672c\u529f\u80fd\uff1a\u7528\u6765\u76d1\u542c\u548c\u63a5\u6536\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\uff08\u57fa\u4e8e TCP \u534f\u8bae\u4e0b\uff0c\u4f4d\u4e8e IP \u5730\u5740\u4e3a 127.0.0.1\u3001\u7aef\u53e3\u4e3a 50000 \u7684 localhost\uff09\u3002 Listen() \u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a error \u7c7b\u578b\u7684\u9519\u8bef\u53d8\u91cf\u3002\u7528\u4e00\u4e2a\u65e0\u9650 for \u5faa\u73af\u7684 listener.Accept() \u6765\u7b49\u5f85\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u3002\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u5c06\u4ea7\u751f\u4e00\u4e2a net.Conn \u7c7b\u578b\u7684\u8fde\u63a5\u53d8\u91cf\u3002\u7136\u540e\u4e00\u4e2a\u72ec\u7acb\u7684\u534f\u7a0b\u4f7f\u7528\u8fd9\u4e2a\u8fde\u63a5\u6267\u884c doServerStuff() \uff0c\u5f00\u59cb\u4f7f\u7528\u4e00\u4e2a 512 \u5b57\u8282\u7684\u7f13\u51b2 data \u6765\u8bfb\u53d6\u5ba2\u6237\u7aef\u53d1\u9001\u6765\u7684\u6570\u636e\uff0c\u5e76\u4e14\u628a\u5b83\u4eec\u6253\u5370\u5230\u670d\u52a1\u5668\u7684\u7ec8\u7aef\uff0c len() \u83b7\u53d6\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u6570\u636e\u5b57\u8282\u6570\uff1b\u5f53\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u6240\u6709\u6570\u636e\u90fd\u88ab\u8bfb\u53d6\u5b8c\u6210\u65f6\uff0c\u534f\u7a0b\u5c31\u7ed3\u675f\u4e86\u3002\u8fd9\u6bb5\u7a0b\u5e8f\u4f1a\u4e3a\u6bcf\u4e00\u4e2a\u5ba2\u6237\u7aef\u8fde\u63a5\u521b\u5efa\u4e00\u4e2a\u72ec\u7acb\u7684\u534f\u7a0b\u3002\u5fc5\u987b\u5148\u8fd0\u884c\u670d\u52a1\u5668\u4ee3\u7801\uff0c\u518d\u8fd0\u884c\u5ba2\u6237\u7aef\u4ee3\u7801\u3002 \u5ba2\u6237\u7aef\u4ee3\u7801\u5199\u5728\u53e6\u4e00\u4e2a\u6587\u4ef6 client.go \u4e2d\uff1a \u793a\u4f8b 15.2 client.go package main import ( \"bufio\" \"fmt\" \"net\" \"os\" \"strings\" ) func main () { //\u6253\u5f00\u8fde\u63a5: conn , err := net . Dial ( \"tcp\" , \"localhost:50000\" ) if err != nil { //\u7531\u4e8e\u76ee\u6807\u8ba1\u7b97\u673a\u79ef\u6781\u62d2\u7edd\u800c\u65e0\u6cd5\u521b\u5efa\u8fde\u63a5 fmt . Println ( \"Error dialing\" , err . Error ()) return // \u7ec8\u6b62\u7a0b\u5e8f } inputReader := bufio . NewReader ( os . Stdin ) fmt . Println ( \"First, what is your name?\" ) clientName , _ := inputReader . ReadString ( '\\n' ) // fmt.Printf(\"CLIENTNAME %s\", clientName) trimmedClient := strings . Trim ( clientName , \"\\r\\n\" ) // Windows \u5e73\u53f0\u4e0b\u7528 \"\\r\\n\"\uff0cLinux\u5e73\u53f0\u4e0b\u4f7f\u7528 \"\\n\" // \u7ed9\u670d\u52a1\u5668\u53d1\u9001\u4fe1\u606f\u76f4\u5230\u7a0b\u5e8f\u9000\u51fa\uff1a for { fmt . Println ( \"What to send to the server? Type Q to quit.\" ) input , _ := inputReader . ReadString ( '\\n' ) trimmedInput := strings . Trim ( input , \"\\r\\n\" ) // fmt.Printf(\"input:--%s--\", input) // fmt.Printf(\"trimmedInput:--%s--\", trimmedInput) if trimmedInput == \"Q\" { return } _ , err = conn . Write ([] byte ( trimmedClient + \" says: \" + trimmedInput )) } } \u5ba2\u6237\u7aef\u901a\u8fc7 net.Dial() \u521b\u5efa\u4e86\u4e00\u4e2a\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u8fde\u63a5\u3002 \u5b83\u901a\u8fc7\u65e0\u9650\u5faa\u73af\u4ece os.Stdin \u63a5\u6536\u6765\u81ea\u952e\u76d8\u7684\u8f93\u5165\uff0c\u76f4\u5230\u8f93\u5165\u4e86\u201cQ\u201d\u3002\u6ce8\u610f\u88c1\u526a \\r \u548c \\n \u5b57\u7b26\uff08\u4ec5 Windows \u5e73\u53f0\u9700\u8981\uff09\u3002\u88c1\u526a\u540e\u7684\u8f93\u5165\u88ab connection \u7684 Write() \u65b9\u6cd5\u53d1\u9001\u5230\u670d\u52a1\u5668\u3002 \u5f53\u7136\uff0c\u670d\u52a1\u5668\u5fc5\u987b\u5148\u542f\u52a8\u597d\uff0c\u5982\u679c\u670d\u52a1\u5668\u5e76\u672a\u5f00\u59cb\u76d1\u542c\uff0c\u5ba2\u6237\u7aef\u662f\u65e0\u6cd5\u6210\u529f\u8fde\u63a5\u7684\u3002 \u5982\u679c\u5728\u670d\u52a1\u5668\u6ca1\u6709\u5f00\u59cb\u76d1\u542c\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u5ba2\u6237\u7aef\u7a0b\u5e8f\uff0c\u5ba2\u6237\u7aef\u4f1a\u505c\u6b62\u5e76\u6253\u5370\u51fa\u4ee5\u4e0b\u9519\u8bef\u4fe1\u606f\uff1a dial tcp [::1]:xxxx: connectex: No connection could be made because the target machine actively refused it. \u6253\u5f00\u547d\u4ee4\u63d0\u793a\u7b26\u5e76\u8f6c\u5230\u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u4ee3\u7801\u6240\u5728\u7684\u76ee\u5f55\uff0c\u8f93\u5165 go run server.go \uff0c\u63a5\u4e0b\u6765\u63a7\u5236\u53f0\u51fa\u73b0\u4ee5\u4e0b\u4fe1\u606f\uff1a Starting the server ... \u5728 Windows \u7cfb\u7edf\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 CTRL+C \u505c\u6b62\u7a0b\u5e8f\u3002 \u7136\u540e\u5f00\u542f 2 \u4e2a\u6216\u8005 3 \u4e2a\u72ec\u7acb\u7684\u63a7\u5236\u53f0\u7a97\u53e3\uff0c\u5206\u522b\u542f\u52a8\u5ba2\u6237\u7aef\u7a0b\u5e8f \u4ee5\u4e0b\u662f\u670d\u52a1\u5668\u7684\u8f93\u51fa\uff1a Starting the Server ... Received data: IVO says: Hi Server, what's up ? Received data: CHRIS says: Are you busy server ? Received data: MARC says: Don't forget our appointment tomorrow ! \u5f53\u5ba2\u6237\u7aef\u8f93\u5165\u201cQ\u201d\u5e76\u7ed3\u675f\u7a0b\u5e8f\u65f6\uff0c\u670d\u52a1\u5668\u4f1a\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a Error reading WSARecv tcp 127.0.0.1:50000: The specified network name is no longer available. \u5728\u7f51\u7edc\u7f16\u7a0b\u4e2d net.Dial() \u51fd\u6570\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u4e00\u65e6\u4f60\u8fde\u63a5\u5230\u8fdc\u7a0b\u7cfb\u7edf\uff0c\u51fd\u6570\u5c31\u4f1a\u8fd4\u56de\u4e00\u4e2a Conn \u7c7b\u578b\u7684\u63a5\u53e3\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u53d1\u9001\u548c\u63a5\u6536\u6570\u636e\u3002 Dial() \u51fd\u6570\u7b80\u6d01\u5730\u62bd\u8c61\u4e86\u7f51\u7edc\u5c42\u548c\u4f20\u8f93\u5c42\u3002\u6240\u4ee5\u4e0d\u7ba1\u662f IPv4 \u8fd8\u662f IPv6\uff0cTCP \u6216\u8005 UDP \u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u516c\u7528\u63a5\u53e3\u3002 \u4ee5\u4e0b\u793a\u4f8b\u5148\u4f7f\u7528 TCP \u534f\u8bae\u8fde\u63a5\u8fdc\u7a0b 80 \u7aef\u53e3\uff0c\u7136\u540e\u4f7f\u7528 UDP \u534f\u8bae\u8fde\u63a5\uff0c\u6700\u540e\u4f7f\u7528 TCP \u534f\u8bae\u8fde\u63a5 IPv6 \u5730\u5740\uff1a \u793a\u4f8b 15.3 dial.go // make a connection with www.example.org: package main import ( \"fmt\" \"net\" \"os\" ) func main () { conn , err := net . Dial ( \"tcp\" , \"192.0.32.10:80\" ) // tcp ipv4 checkConnection ( conn , err ) conn , err = net . Dial ( \"udp\" , \"192.0.32.10:80\" ) // udp checkConnection ( conn , err ) conn , err = net . Dial ( \"tcp\" , \"[2620:0:2d0:200::10]:80\" ) // tcp ipv6 checkConnection ( conn , err ) } func checkConnection ( conn net . Conn , err error ) { if err != nil { fmt . Printf ( \"error %v connecting!\" , err ) os . Exit ( 1 ) } fmt . Printf ( \"Connection is made with %v\\n\" , conn ) } \u4e0b\u8fb9\u4e5f\u662f\u4e00\u4e2a\u4f7f\u7528 net \u5305\u4ece socket \u4e2d\u6253\u5f00\uff0c\u5199\u5165\uff0c\u8bfb\u53d6\u6570\u636e\u7684\u4f8b\u5b50\uff1a \u793a\u4f8b 15.4 socket.go package main import ( \"fmt\" \"io\" \"net\" ) func main () { var ( host = \"www.apache.org\" port = \"80\" remote = host + \":\" + port msg string = \"GET / \\n\" data = make ([] uint8 , 4096 ) read = true count = 0 ) // \u521b\u5efa\u4e00\u4e2a socket con , err := net . Dial ( \"tcp\" , remote ) // \u53d1\u9001\u6211\u4eec\u7684\u6d88\u606f\uff0c\u4e00\u4e2a http GET \u8bf7\u6c42 io . WriteString ( con , msg ) // \u8bfb\u53d6\u670d\u52a1\u5668\u7684\u54cd\u5e94 for read { count , err = con . Read ( data ) read = ( err == nil ) fmt . Printf ( string ( data [ 0 : count ])) } con . Close () } \u7ec3\u4e60 15.1 \u7f16\u5199\u65b0\u7248\u672c\u7684\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668 ( client1.go / server1.go )\uff1a \u589e\u52a0\u4e00\u4e2a\u68c0\u67e5\u9519\u8bef\u7684\u51fd\u6570 checkError(error) \uff1b\u8ba8\u8bba\u5982\u4e0b\u65b9\u6848\u7684\u5229\u5f0a\uff1a\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u91cd\u6784\u53ef\u80fd\u5e76\u6ca1\u6709\u90a3\u4e48\u7406\u60f3\uff1f\u770b\u770b\u5728 \u793a\u4f8b 15.14 \u4e2d\u5b83\u662f\u5982\u4f55\u88ab\u89e3\u51b3\u7684 \u4f7f\u5ba2\u6237\u7aef\u53ef\u4ee5\u901a\u8fc7\u53d1\u9001\u4e00\u6761\u547d\u4ee4 SH \u6765\u5173\u95ed\u670d\u52a1\u5668 \u8ba9\u670d\u52a1\u5668\u53ef\u4ee5\u4fdd\u5b58\u5df2\u7ecf\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\u5217\u8868\uff08\u4ed6\u4eec\u7684\u540d\u5b57\uff09\uff1b\u5f53\u5ba2\u6237\u7aef\u53d1\u9001 WHO \u6307\u4ee4\u7684\u65f6\u5019\uff0c\u670d\u52a1\u5668\u5c06\u663e\u793a\u5982\u4e0b\u5217\u8868\uff1a This is the client list: 1:active, 0=inactive User IVO is 1 User MARC is 1 User CHRIS is 1 \u6ce8\u610f\uff1a\u5f53\u670d\u52a1\u5668\u8fd0\u884c\u7684\u65f6\u5019\uff0c\u4f60\u65e0\u6cd5\u7f16\u8bd1/\u8fde\u63a5\u540c\u4e00\u4e2a\u76ee\u5f55\u4e0b\u7684\u6e90\u7801\u6765\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u7248\u672c\uff0c\u56e0\u4e3a server.exe \u6b63\u5728\u88ab\u64cd\u4f5c\u7cfb\u7edf\u4f7f\u7528\u800c\u65e0\u6cd5\u88ab\u66ff\u6362\u6210\u65b0\u7684\u7248\u672c\u3002 \u4e0b\u8fb9\u8fd9\u4e2a\u7248\u672c\u7684 simple_tcp_server.go \u4ece\u5f88\u591a\u65b9\u9762\u4f18\u5316\u4e86\u7b2c\u4e00\u4e2a tcp \u670d\u52a1\u5668\u7684\u793a\u4f8b server.go \u5e76\u4e14\u62e5\u6709\u66f4\u597d\u7684\u7ed3\u6784\uff0c\u5b83\u53ea\u7528\u4e86 80 \u884c\u4ee3\u7801\uff01 \u793a\u4f8b 15.5 simple_tcp_server.go \uff1a // Simple multi-thread/multi-core TCP server. package main import ( \"flag\" \"fmt\" \"net\" \"os\" ) const maxRead = 25 func main () { flag . Parse () if flag . NArg () != 2 { panic ( \"usage: host port\" ) } hostAndPort := fmt . Sprintf ( \"%s:%s\" , flag . Arg ( 0 ), flag . Arg ( 1 )) listener := initServer ( hostAndPort ) for { conn , err := listener . Accept () checkError ( err , \"Accept: \" ) go connectionHandler ( conn ) } } func initServer ( hostAndPort string ) * net . TCPListener { serverAddr , err := net . ResolveTCPAddr ( \"tcp\" , hostAndPort ) checkError ( err , \"Resolving address:port failed: '\" + hostAndPort + \"'\" ) listener , err := net . ListenTCP ( \"tcp\" , serverAddr ) checkError ( err , \"ListenTCP: \" ) println ( \"Listening to: \" , listener . Addr (). String ()) return listener } func connectionHandler ( conn net . Conn ) { connFrom := conn . RemoteAddr (). String () println ( \"Connection from: \" , connFrom ) sayHello ( conn ) for { var ibuf [] byte = make ([] byte , maxRead + 1 ) length , err := conn . Read ( ibuf [ 0 : maxRead ]) ibuf [ maxRead ] = 0 // to prevent overflow switch err { case nil : handleMsg ( length , err , ibuf ) case os . EAGAIN : // try again continue default : goto DISCONNECT } } DISCONNECT : err := conn . Close () println ( \"Closed connection: \" , connFrom ) checkError ( err , \"Close: \" ) } func sayHello ( to net . Conn ) { obuf := [] byte { 'L' , 'e' , 't' , '\\'' , 's' , ' ' , 'G' , 'O' , '!' , '\\n' } wrote , err := to . Write ( obuf ) checkError ( err , \"Write: wrote \" + string ( wrote ) + \" bytes.\" ) } func handleMsg ( length int , err error , msg [] byte ) { if length > 0 { print ( \"<\" , length , \":\" ) for i := 0 ; ; i ++ { if msg [ i ] == 0 { break } fmt . Printf ( \"%c\" , msg [ i ]) } print ( \">\" ) } } func checkError ( error error , info string ) { if error != nil { panic ( \"ERROR: \" + info + \" \" + error . Error ()) // terminate program } } \uff08 \u8bd1\u8005\u6ce8\uff1a\u5e94\u8be5\u662f\u7531\u4e8e Go \u7248\u672c\u7684\u66f4\u65b0\uff0c\u4f1a\u63d0\u793a os.EAGAIN undefined\uff0c\u4fee\u6539\u540e\u7684\u4ee3\u7801\uff1a simple_tcp_server_v1.go \uff09 \u90fd\u6709\u54ea\u4e9b\u6539\u8fdb\uff1f \u670d\u52a1\u5668\u5730\u5740\u548c\u7aef\u53e3\u4e0d\u518d\u662f\u786c\u7f16\u7801\uff0c\u800c\u662f\u901a\u8fc7\u547d\u4ee4\u884c\u53c2\u6570\u4f20\u5165\uff0c\u5e76\u901a\u8fc7 flag \u5305\u6765\u8bfb\u53d6\u8fd9\u4e9b\u53c2\u6570\u3002\u8fd9\u91cc\u4f7f\u7528\u4e86 flag.NArg() \u68c0\u67e5\u662f\u5426\u6309\u7167\u671f\u671b\u4f20\u5165\u4e86 2 \u4e2a\u53c2\u6570\uff1a if flag . NArg () != 2 { panic ( \"usage: host port\" ) } \u4f20\u5165\u7684\u53c2\u6570\u901a\u8fc7 fmt.Sprintf() \u51fd\u6570\u683c\u5f0f\u5316\u6210\u5b57\u7b26\u4e32 hostAndPort := fmt . Sprintf ( \"%s:%s\" , flag . Arg ( 0 ), flag . Arg ( 1 )) * \u5728 initServer() \u51fd\u6570\u4e2d\u901a\u8fc7 net.ResolveTCPAddr() \u5f97\u5230\u4e86\u670d\u52a1\u5668\u5730\u5740\u548c\u7aef\u53e3\uff0c\u8fd9\u4e2a\u51fd\u6570\u6700\u7ec8\u8fd4\u56de\u4e86\u4e00\u4e2a *net.TCPListener * \u6bcf\u4e00\u4e2a\u8fde\u63a5\u90fd\u4f1a\u4ee5\u534f\u7a0b\u7684\u65b9\u5f0f\u8fd0\u884c connectionHandler() \u51fd\u6570\u3002\u51fd\u6570\u9996\u5148\u901a\u8fc7 conn.RemoteAddr() \u83b7\u53d6\u5230\u5ba2\u6237\u7aef\u7684\u5730\u5740\u5e76\u663e\u793a\u51fa\u6765 * \u5b83\u4f7f\u7528 conn.Write() \u53d1\u9001 Go \u63a8\u5e7f\u6d88\u606f\u7ed9\u5ba2\u6237\u7aef * \u5b83\u4f7f\u7528\u4e00\u4e2a 25 \u5b57\u8282\u7684\u7f13\u51b2\u8bfb\u53d6\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u6570\u636e\u5e76\u4e00\u4e00\u6253\u5370\u51fa\u6765\u3002\u5982\u679c\u8bfb\u53d6\u7684\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u9519\u8bef\uff0c\u4ee3\u7801\u4f1a\u8fdb\u5165 switch \u8bed\u53e5 default \u5206\u652f\uff0c\u9000\u51fa\u65e0\u9650\u5faa\u73af\u5e76\u5173\u95ed\u8fde\u63a5\u3002\u5982\u679c\u662f\u64cd\u4f5c\u7cfb\u7edf\u7684 EAGAIN \u9519\u8bef\uff0c\u5b83\u4f1a\u91cd\u8bd5\u3002 * \u6240\u6709\u7684\u9519\u8bef\u68c0\u67e5\u90fd\u88ab\u91cd\u6784\u5728\u72ec\u7acb\u7684\u51fd\u6570 checkError \u4e2d\uff0c\u5f53\u9519\u8bef\u4ea7\u751f\u65f6\uff0c\u5229\u7528\u9519\u8bef\u4e0a\u4e0b\u6587\u6765\u89e6\u53d1 panic\u3002 \u5728\u547d\u4ee4\u884c\u4e2d\u8f93\u5165 simple_tcp_server localhost 50000 \u6765\u542f\u52a8\u670d\u52a1\u5668\u7a0b\u5e8f\uff0c\u7136\u540e\u5728\u72ec\u7acb\u7684\u547d\u4ee4\u884c\u7a97\u53e3\u542f\u52a8\u4e00\u4e9b client.go \u7684\u5ba2\u6237\u7aef\u3002\u5f53\u6709\u4e24\u4e2a\u5ba2\u6237\u7aef\u8fde\u63a5\u7684\u60c5\u51b5\u4e0b\u670d\u52a1\u5668\u7684\u5178\u578b\u8f93\u51fa\u5982\u4e0b\uff0c\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6bcf\u4e2a\u5ba2\u6237\u7aef\u90fd\u6709\u81ea\u5df1\u7684\u5730\u5740\uff1a E:\\Go\\GoBoek\\code examples\\chapter 14>simple_tcp_server localhost 50000 Listening to: 127.0.0.1:50000 Connection from: 127.0.0.1:49346 <25:Ivo says: Hi server, do y><12:ou hear me ?> Connection from: 127.0.0.1:49347 <25:Marc says: Do you remembe><25:r our first meeting serve><2:r?> net.Error\uff1a net \u5305\u8fd4\u56de\u7684\u9519\u8bef\u7c7b\u578b\u9075\u5faa\u60ef\u4f8b\u4e3a error \uff0c\u4f46\u6709\u4e9b\u9519\u8bef\u5b9e\u73b0\u5305\u542b\u989d\u5916\u7684\u65b9\u6cd5\uff0c\u4ed6\u4eec\u88ab\u5b9a\u4e49\u4e3a net.Error \u63a5\u53e3\uff1a package net type Error interface { Timeout () bool // \u9519\u8bef\u662f\u5426\u8d85\u65f6 Temporary () bool // \u662f\u5426\u662f\u4e34\u65f6\u9519\u8bef } \u901a\u8fc7\u7c7b\u578b\u65ad\u8a00\uff0c\u5ba2\u6237\u7aef\u4ee3\u7801\u53ef\u4ee5\u6d4b\u8bd5 net.Error \uff0c\u4ece\u800c\u533a\u5206\u662f\u4e34\u65f6\u53d1\u751f\u7684\u8fd8\u662f\u5fc5\u7136\u4f1a\u51fa\u73b0\u7684\u9519\u8bef\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u4e00\u4e2a\u7f51\u7edc\u722c\u866b\u7a0b\u5e8f\u5728\u9047\u5230\u4e34\u65f6\u53d1\u751f\u7684\u9519\u8bef\u65f6\u53ef\u80fd\u4f1a\u4f11\u7720\u6216\u8005\u91cd\u8bd5\uff0c\u5982\u679c\u662f\u4e00\u4e2a\u5fc5\u7136\u53d1\u751f\u7684\u9519\u8bef\uff0c\u5219\u4ed6\u4f1a\u653e\u5f03\u7ee7\u7eed\u6267\u884c\u3002 // in a loop - some function returns an error err if nerr , ok := err .( net . Error ); ok && nerr . Temporary () { time . Sleep ( 1e9 ) continue // try again } if err != nil { log . Fatal ( err ) }","title":"15.1 tcp \u670d\u52a1\u5668"},{"location":"15.1/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7f51\u7edc\u3001\u6a21\u7248\u4e0e\u7f51\u9875\u5e94\u7528 \u4e0b\u4e00\u8282\uff1a \u4e00\u4e2a\u7b80\u5355\u7684\u7f51\u9875\u670d\u52a1\u5668","title":"\u94fe\u63a5"},{"location":"15.10/","text":"15.10 \u57fa\u4e8e\u7f51\u7edc\u7684\u901a\u9053 netchan \u00b6 \u5907\u6ce8\uff1aGo \u56e2\u961f\u51b3\u5b9a\u6539\u8fdb\u5e76\u91cd\u65b0\u6253\u9020 netchan \u5305\u7684\u73b0\u6709\u7248\u672c\uff0c\u5b83\u5df2\u88ab\u79fb\u81f3 old/netchan \u3002 old/ \u76ee\u5f55\u7528\u4e8e\u5b58\u653e\u8fc7\u65f6\u7684\u5305\u4ee3\u7801\uff0c\u5b83\u4eec\u4e0d\u4f1a\u6210\u4e3a Go 1.x \u7684\u4e00\u90e8\u5206\u3002\u672c\u8282\u4ec5\u51fa\u4e8e\u5411\u540e\u517c\u5bb9\u6027\u8ba8\u8bba netchan \u5305\u7684\u6982\u5ff5\u3002 \u4e00\u9879\u548c rpc \u5bc6\u5207\u76f8\u5173\u7684\u6280\u672f\u662f\u57fa\u4e8e\u7f51\u7edc\u7684\u901a\u9053\u3002\u7c7b\u4f3c 14 \u7ae0 \u6240\u4f7f\u7528\u7684\u901a\u9053\u90fd\u662f\u672c\u5730\u7684\uff0c\u5b83\u4eec\u4ec5\u5b58\u5728\u4e8e\u88ab\u6267\u884c\u7684\u673a\u5668\u5185\u5b58\u7a7a\u95f4\u4e2d\u3002 netchan \u5305\u5b9e\u73b0\u4e86\u7c7b\u578b\u5b89\u5168\u7684\u7f51\u7edc\u5316\u901a\u9053\uff1a\u5b83\u5141\u8bb8\u4e00\u4e2a\u901a\u9053\u4e24\u7aef\u51fa\u73b0\u7531\u7f51\u7edc\u8fde\u63a5\u7684\u4e0d\u540c\u8ba1\u7b97\u673a\u3002\u5176\u5b9e\u73b0\u539f\u7406\u662f\uff0c\u5728\u5176\u4e2d\u4e00\u53f0\u673a\u5668\u4e0a\u5c06\u4f20\u8f93\u6570\u636e\u53d1\u9001\u5230\u901a\u9053\u4e2d\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u88ab\u53e6\u4e00\u53f0\u8ba1\u7b97\u673a\u4e0a\u540c\u7c7b\u578b\u7684\u901a\u9053\u63a5\u6536\u3002\u4e00\u4e2a\u5bfc\u51fa\u5668 ( exporter ) \u4f1a\u6309\u540d\u79f0\u53d1\u5e03\uff08\u4e00\u7ec4\uff09\u901a\u9053\u3002\u5bfc\u5165\u5668 ( importer ) \u8fde\u63a5\u5230\u5bfc\u51fa\u7684\u673a\u5668\uff0c\u5e76\u6309\u540d\u79f0\u5bfc\u5165\u8fd9\u4e9b\u901a\u9053\u3002\u4e4b\u540e\uff0c\u4e24\u53f0\u673a\u5668\u5c31\u53ef\u6309\u901a\u5e38\u7684\u65b9\u5f0f\u6765\u4f7f\u7528\u901a\u9053\u3002\u7f51\u7edc\u901a\u9053\u4e0d\u662f\u540c\u6b65\u7684\uff0c\u5b83\u4eec\u7c7b\u4f3c\u4e8e\u5e26\u7f13\u5b58\u7684\u901a\u9053\u3002 \u53d1\u9001\u7aef\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a exp , err := netchan . NewExporter ( \"tcp\" , \"netchanserver.mydomain.com:1234\" ) if err != nil { log . Fatalf ( \"Error making Exporter: %v\" , err ) } ch := make ( chan myType ) err := exp . Export ( \"sendmyType\" , ch , netchan . Send ) if err != nil { log . Fatalf ( \"Send Error: %v\" , err ) } \u63a5\u6536\u7aef\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a imp , err := netchan . NewImporter ( \"tcp\" , \"netchanserver.mydomain.com:1234\" ) if err != nil { log . Fatalf ( \"Error making Importer: %v\" , err ) } ch := make ( chan myType ) err = imp . Import ( \"sendmyType\" , ch , netchan . Receive ) if err != nil { log . Fatalf ( \"Receive Error: %v\" , err ) } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7528 rpc \u5b9e\u73b0\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528 \u4e0b\u4e00\u8282\uff1a \u4e0e websocket \u901a\u4fe1","title":"15.10 \u57fa\u4e8e\u7f51\u7edc\u7684\u901a\u9053 netchan"},{"location":"15.10/#1510-netchan","text":"\u5907\u6ce8\uff1aGo \u56e2\u961f\u51b3\u5b9a\u6539\u8fdb\u5e76\u91cd\u65b0\u6253\u9020 netchan \u5305\u7684\u73b0\u6709\u7248\u672c\uff0c\u5b83\u5df2\u88ab\u79fb\u81f3 old/netchan \u3002 old/ \u76ee\u5f55\u7528\u4e8e\u5b58\u653e\u8fc7\u65f6\u7684\u5305\u4ee3\u7801\uff0c\u5b83\u4eec\u4e0d\u4f1a\u6210\u4e3a Go 1.x \u7684\u4e00\u90e8\u5206\u3002\u672c\u8282\u4ec5\u51fa\u4e8e\u5411\u540e\u517c\u5bb9\u6027\u8ba8\u8bba netchan \u5305\u7684\u6982\u5ff5\u3002 \u4e00\u9879\u548c rpc \u5bc6\u5207\u76f8\u5173\u7684\u6280\u672f\u662f\u57fa\u4e8e\u7f51\u7edc\u7684\u901a\u9053\u3002\u7c7b\u4f3c 14 \u7ae0 \u6240\u4f7f\u7528\u7684\u901a\u9053\u90fd\u662f\u672c\u5730\u7684\uff0c\u5b83\u4eec\u4ec5\u5b58\u5728\u4e8e\u88ab\u6267\u884c\u7684\u673a\u5668\u5185\u5b58\u7a7a\u95f4\u4e2d\u3002 netchan \u5305\u5b9e\u73b0\u4e86\u7c7b\u578b\u5b89\u5168\u7684\u7f51\u7edc\u5316\u901a\u9053\uff1a\u5b83\u5141\u8bb8\u4e00\u4e2a\u901a\u9053\u4e24\u7aef\u51fa\u73b0\u7531\u7f51\u7edc\u8fde\u63a5\u7684\u4e0d\u540c\u8ba1\u7b97\u673a\u3002\u5176\u5b9e\u73b0\u539f\u7406\u662f\uff0c\u5728\u5176\u4e2d\u4e00\u53f0\u673a\u5668\u4e0a\u5c06\u4f20\u8f93\u6570\u636e\u53d1\u9001\u5230\u901a\u9053\u4e2d\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u88ab\u53e6\u4e00\u53f0\u8ba1\u7b97\u673a\u4e0a\u540c\u7c7b\u578b\u7684\u901a\u9053\u63a5\u6536\u3002\u4e00\u4e2a\u5bfc\u51fa\u5668 ( exporter ) \u4f1a\u6309\u540d\u79f0\u53d1\u5e03\uff08\u4e00\u7ec4\uff09\u901a\u9053\u3002\u5bfc\u5165\u5668 ( importer ) \u8fde\u63a5\u5230\u5bfc\u51fa\u7684\u673a\u5668\uff0c\u5e76\u6309\u540d\u79f0\u5bfc\u5165\u8fd9\u4e9b\u901a\u9053\u3002\u4e4b\u540e\uff0c\u4e24\u53f0\u673a\u5668\u5c31\u53ef\u6309\u901a\u5e38\u7684\u65b9\u5f0f\u6765\u4f7f\u7528\u901a\u9053\u3002\u7f51\u7edc\u901a\u9053\u4e0d\u662f\u540c\u6b65\u7684\uff0c\u5b83\u4eec\u7c7b\u4f3c\u4e8e\u5e26\u7f13\u5b58\u7684\u901a\u9053\u3002 \u53d1\u9001\u7aef\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a exp , err := netchan . NewExporter ( \"tcp\" , \"netchanserver.mydomain.com:1234\" ) if err != nil { log . Fatalf ( \"Error making Exporter: %v\" , err ) } ch := make ( chan myType ) err := exp . Export ( \"sendmyType\" , ch , netchan . Send ) if err != nil { log . Fatalf ( \"Send Error: %v\" , err ) } \u63a5\u6536\u7aef\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a imp , err := netchan . NewImporter ( \"tcp\" , \"netchanserver.mydomain.com:1234\" ) if err != nil { log . Fatalf ( \"Error making Importer: %v\" , err ) } ch := make ( chan myType ) err = imp . Import ( \"sendmyType\" , ch , netchan . Receive ) if err != nil { log . Fatalf ( \"Receive Error: %v\" , err ) }","title":"15.10 \u57fa\u4e8e\u7f51\u7edc\u7684\u901a\u9053 netchan"},{"location":"15.10/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7528 rpc \u5b9e\u73b0\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528 \u4e0b\u4e00\u8282\uff1a \u4e0e websocket \u901a\u4fe1","title":"\u94fe\u63a5"},{"location":"15.11/","text":"15.11 \u4e0e websocket \u901a\u4fe1 \u00b6 \u5907\u6ce8\uff1aGo \u56e2\u961f\u51b3\u5b9a\u4ece Go 1 \u8d77\uff0c\u5c06 websocket \u5305\u79fb\u51fa Go \u6807\u51c6\u5e93\uff0c\u8f6c\u79fb\u5230 code.google.com/p/go \u4e0b\u7684\u5b50\u9879\u76ee websocket \uff0c\u540c\u65f6\u9884\u8ba1\u8fd1\u671f\u5c06\u505a\u91cd\u5927\u66f4\u6539\u3002 import \"websocket\" \u8fd9\u884c\u8981\u6539\u6210\uff1a import websocket \"code.google.com/p/go/websocket\" \u4e0e http \u534f\u8bae\u76f8\u53cd\uff0cwebsocket \u662f\u901a\u8fc7\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u5bf9\u8bdd\uff0c\u5efa\u7acb\u7684\u57fa\u4e8e\u5355\u4e2a\u6301\u4e45\u8fde\u63a5\u7684\u534f\u8bae\u3002\u7136\u800c\u5728\u5176\u4ed6\u65b9\u9762\uff0c\u5176\u529f\u80fd\u51e0\u4e4e\u4e0e http \u76f8\u540c\u3002\u5728\u793a\u4f8b 15.24 \u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u5178\u578b\u7684 websocket \u670d\u52a1\u5668\uff0c\u4ed6\u4f1a\u81ea\u542f\u52a8\u5e76\u76d1\u542c websocket \u5ba2\u6237\u7aef\u7684\u8fde\u5165\u3002\u793a\u4f8b 15.25 \u6f14\u793a\u4e86 5 \u79d2\u540e\u4f1a\u7ec8\u6b62\u7684\u5ba2\u6237\u7aef\u4ee3\u7801\u3002\u5f53\u8fde\u63a5\u5230\u6765\u65f6\uff0c\u670d\u52a1\u5668\u5148\u6253\u5370 new connection \uff0c\u5f53\u5ba2\u6237\u7aef\u505c\u6b62\u65f6\uff0c\u670d\u52a1\u5668\u6253\u5370 EOF => closing connection \u3002 \u793a\u4f8b 15.24 websocket_server.go package main import ( \"fmt\" \"net/http\" \"websocket\" ) func server ( ws * websocket . Conn ) { fmt . Printf ( \"new connection\\n\" ) buf := make ([] byte , 100 ) for { if _ , err := ws . Read ( buf ); err != nil { fmt . Printf ( \"%s\" , err . Error ()) break } } fmt . Printf ( \" => closing connection\\n\" ) ws . Close () } func main () { http . Handle ( \"/websocket\" , websocket . Handler ( server )) err := http . ListenAndServe ( \":12345\" , nil ) if err != nil { panic ( \"ListenAndServe: \" + err . Error ()) } } \u793a\u4f8b 15.25 websocket_client.go package main import ( \"fmt\" \"time\" \"websocket\" ) func main () { ws , err := websocket . Dial ( \"ws://localhost:12345/websocket\" , \"\" , \"http://localhost/\" ) if err != nil { panic ( \"Dial: \" + err . Error ()) } go readFromServer ( ws ) time . Sleep ( 5e9 ) ws . Close () } func readFromServer ( ws * websocket . Conn ) { buf := make ([] byte , 1000 ) for { if _ , err := ws . Read ( buf ); err != nil { fmt . Printf ( \"%s\\n\" , err . Error ()) break } } } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u57fa\u4e8e\u7f51\u7edc\u7684\u901a\u9053 netchan \u4e0b\u4e00\u8282\uff1a \u7528 smtp \u53d1\u9001\u90ae\u4ef6","title":"15.11 \u4e0e websocket \u901a\u4fe1"},{"location":"15.11/#1511-websocket","text":"\u5907\u6ce8\uff1aGo \u56e2\u961f\u51b3\u5b9a\u4ece Go 1 \u8d77\uff0c\u5c06 websocket \u5305\u79fb\u51fa Go \u6807\u51c6\u5e93\uff0c\u8f6c\u79fb\u5230 code.google.com/p/go \u4e0b\u7684\u5b50\u9879\u76ee websocket \uff0c\u540c\u65f6\u9884\u8ba1\u8fd1\u671f\u5c06\u505a\u91cd\u5927\u66f4\u6539\u3002 import \"websocket\" \u8fd9\u884c\u8981\u6539\u6210\uff1a import websocket \"code.google.com/p/go/websocket\" \u4e0e http \u534f\u8bae\u76f8\u53cd\uff0cwebsocket \u662f\u901a\u8fc7\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u5bf9\u8bdd\uff0c\u5efa\u7acb\u7684\u57fa\u4e8e\u5355\u4e2a\u6301\u4e45\u8fde\u63a5\u7684\u534f\u8bae\u3002\u7136\u800c\u5728\u5176\u4ed6\u65b9\u9762\uff0c\u5176\u529f\u80fd\u51e0\u4e4e\u4e0e http \u76f8\u540c\u3002\u5728\u793a\u4f8b 15.24 \u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u5178\u578b\u7684 websocket \u670d\u52a1\u5668\uff0c\u4ed6\u4f1a\u81ea\u542f\u52a8\u5e76\u76d1\u542c websocket \u5ba2\u6237\u7aef\u7684\u8fde\u5165\u3002\u793a\u4f8b 15.25 \u6f14\u793a\u4e86 5 \u79d2\u540e\u4f1a\u7ec8\u6b62\u7684\u5ba2\u6237\u7aef\u4ee3\u7801\u3002\u5f53\u8fde\u63a5\u5230\u6765\u65f6\uff0c\u670d\u52a1\u5668\u5148\u6253\u5370 new connection \uff0c\u5f53\u5ba2\u6237\u7aef\u505c\u6b62\u65f6\uff0c\u670d\u52a1\u5668\u6253\u5370 EOF => closing connection \u3002 \u793a\u4f8b 15.24 websocket_server.go package main import ( \"fmt\" \"net/http\" \"websocket\" ) func server ( ws * websocket . Conn ) { fmt . Printf ( \"new connection\\n\" ) buf := make ([] byte , 100 ) for { if _ , err := ws . Read ( buf ); err != nil { fmt . Printf ( \"%s\" , err . Error ()) break } } fmt . Printf ( \" => closing connection\\n\" ) ws . Close () } func main () { http . Handle ( \"/websocket\" , websocket . Handler ( server )) err := http . ListenAndServe ( \":12345\" , nil ) if err != nil { panic ( \"ListenAndServe: \" + err . Error ()) } } \u793a\u4f8b 15.25 websocket_client.go package main import ( \"fmt\" \"time\" \"websocket\" ) func main () { ws , err := websocket . Dial ( \"ws://localhost:12345/websocket\" , \"\" , \"http://localhost/\" ) if err != nil { panic ( \"Dial: \" + err . Error ()) } go readFromServer ( ws ) time . Sleep ( 5e9 ) ws . Close () } func readFromServer ( ws * websocket . Conn ) { buf := make ([] byte , 1000 ) for { if _ , err := ws . Read ( buf ); err != nil { fmt . Printf ( \"%s\\n\" , err . Error ()) break } } }","title":"15.11 \u4e0e websocket \u901a\u4fe1"},{"location":"15.11/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u57fa\u4e8e\u7f51\u7edc\u7684\u901a\u9053 netchan \u4e0b\u4e00\u8282\uff1a \u7528 smtp \u53d1\u9001\u90ae\u4ef6","title":"\u94fe\u63a5"},{"location":"15.12/","text":"15.12 \u7528 smtp \u53d1\u9001\u90ae\u4ef6 \u00b6 smtp \u5305\u5b9e\u73b0\u4e86\u7528\u4e8e\u53d1\u9001\u90ae\u4ef6\u7684\u201c\u7b80\u5355\u90ae\u4ef6\u4f20\u8f93\u534f\u8bae\u201d\uff08Simple Mail Transfer Protocol\uff09\u3002\u5b83\u6709\u4e00\u4e2a Client \u7c7b\u578b\uff0c\u4ee3\u8868\u4e00\u4e2a\u8fde\u63a5\u5230 SMTP \u670d\u52a1\u5668\u7684\u5ba2\u6237\u7aef\uff1a Dial() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5df2\u8fde\u63a5\u5230 SMTP \u670d\u52a1\u5668\u7684\u5ba2\u6237\u7aef Client \u8bbe\u7f6e Mail \uff08from\uff0c\u5373\u53d1\u4ef6\u4eba\uff09\u548c Rcpt \uff08to\uff0c\u5373\u6536\u4ef6\u4eba\uff09 Data() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u7528\u4e8e\u5199\u5165\u6570\u636e\u7684 Writer \uff0c\u8fd9\u91cc\u5229\u7528 buf.WriteTo(wc) \u5199\u5165 \u793a\u4f8b 15.26 smtp.go package main import ( \"bytes\" \"log\" \"net/smtp\" ) func main () { // Connect to the remote SMTP server. client , err := smtp . Dial ( \"mail.example.com:25\" ) if err != nil { log . Fatal ( err ) } // Set the sender and recipient. client . Mail ( \"sender@example.org\" ) client . Rcpt ( \"recipient@example.net\" ) // Send the email body. wc , err := client . Data () if err != nil { log . Fatal ( err ) } defer wc . Close () buf := bytes . NewBufferString ( \"This is the email body.\" ) if _ , err = buf . WriteTo ( wc ); err != nil { log . Fatal ( err ) } } \u5982\u679c\u9700\u8981\u8ba4\u8bc1\uff0c\u6216\u6709\u591a\u4e2a\u6536\u4ef6\u4eba\u65f6\uff0c\u4e5f\u53ef\u4ee5\u7528 SendMail() \u51fd\u6570\u53d1\u9001\u3002\u5b83\u8fde\u63a5\u5230\u5730\u5740\u4e3a addr \u7684\u670d\u52a1\u5668\uff1b\u5982\u679c\u53ef\u4ee5\uff0c\u5207\u6362\u5230 TLS\uff08\u201c\u4f20\u8f93\u5c42\u5b89\u5168\u201d\u52a0\u5bc6\u548c\u8ba4\u8bc1\u534f\u8bae\uff09\uff0c\u5e76\u7528 PLAIN \u673a\u5236\u8ba4\u8bc1\uff1b\u7136\u540e\u4ee5 from \u4f5c\u4e3a\u53d1\u4ef6\u4eba\uff0c to \u4f5c\u4e3a\u6536\u4ef6\u4eba\u5217\u8868\uff0c msg \u4f5c\u4e3a\u90ae\u4ef6\u5185\u5bb9\uff0c\u53d1\u51fa\u4e00\u5c01\u90ae\u4ef6\uff1a func SendMail ( addr string , a Auth , from string , to [] string , msg [] byte ) error \u793a\u4f8b 15.27 smtp_auth.go package main import ( \"log\" \"net/smtp\" ) func main () { // Set up authentication information. auth := smtp . PlainAuth ( \"\" , \"user@example.com\" , \"password\" , \"mail.example.com\" , ) // Connect to the server, authenticate, set the sender and recipient, // and send the email all in one step. err := smtp . SendMail ( \"mail.example.com:25\" , auth , \"sender@example.org\" , [] string { \"recipient@example.net\" }, [] byte ( \"This is the email body.\" ), ) if err != nil { log . Fatal ( err ) } } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4e0e websocket \u901a\u4fe1 \u4e0b\u4e00\u7ae0\uff1a \u5e38\u89c1\u7684\u9677\u9631\u4e0e\u9519\u8bef","title":"15.12 \u7528 smtp \u53d1\u9001\u90ae\u4ef6"},{"location":"15.12/#1512-smtp","text":"smtp \u5305\u5b9e\u73b0\u4e86\u7528\u4e8e\u53d1\u9001\u90ae\u4ef6\u7684\u201c\u7b80\u5355\u90ae\u4ef6\u4f20\u8f93\u534f\u8bae\u201d\uff08Simple Mail Transfer Protocol\uff09\u3002\u5b83\u6709\u4e00\u4e2a Client \u7c7b\u578b\uff0c\u4ee3\u8868\u4e00\u4e2a\u8fde\u63a5\u5230 SMTP \u670d\u52a1\u5668\u7684\u5ba2\u6237\u7aef\uff1a Dial() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5df2\u8fde\u63a5\u5230 SMTP \u670d\u52a1\u5668\u7684\u5ba2\u6237\u7aef Client \u8bbe\u7f6e Mail \uff08from\uff0c\u5373\u53d1\u4ef6\u4eba\uff09\u548c Rcpt \uff08to\uff0c\u5373\u6536\u4ef6\u4eba\uff09 Data() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u7528\u4e8e\u5199\u5165\u6570\u636e\u7684 Writer \uff0c\u8fd9\u91cc\u5229\u7528 buf.WriteTo(wc) \u5199\u5165 \u793a\u4f8b 15.26 smtp.go package main import ( \"bytes\" \"log\" \"net/smtp\" ) func main () { // Connect to the remote SMTP server. client , err := smtp . Dial ( \"mail.example.com:25\" ) if err != nil { log . Fatal ( err ) } // Set the sender and recipient. client . Mail ( \"sender@example.org\" ) client . Rcpt ( \"recipient@example.net\" ) // Send the email body. wc , err := client . Data () if err != nil { log . Fatal ( err ) } defer wc . Close () buf := bytes . NewBufferString ( \"This is the email body.\" ) if _ , err = buf . WriteTo ( wc ); err != nil { log . Fatal ( err ) } } \u5982\u679c\u9700\u8981\u8ba4\u8bc1\uff0c\u6216\u6709\u591a\u4e2a\u6536\u4ef6\u4eba\u65f6\uff0c\u4e5f\u53ef\u4ee5\u7528 SendMail() \u51fd\u6570\u53d1\u9001\u3002\u5b83\u8fde\u63a5\u5230\u5730\u5740\u4e3a addr \u7684\u670d\u52a1\u5668\uff1b\u5982\u679c\u53ef\u4ee5\uff0c\u5207\u6362\u5230 TLS\uff08\u201c\u4f20\u8f93\u5c42\u5b89\u5168\u201d\u52a0\u5bc6\u548c\u8ba4\u8bc1\u534f\u8bae\uff09\uff0c\u5e76\u7528 PLAIN \u673a\u5236\u8ba4\u8bc1\uff1b\u7136\u540e\u4ee5 from \u4f5c\u4e3a\u53d1\u4ef6\u4eba\uff0c to \u4f5c\u4e3a\u6536\u4ef6\u4eba\u5217\u8868\uff0c msg \u4f5c\u4e3a\u90ae\u4ef6\u5185\u5bb9\uff0c\u53d1\u51fa\u4e00\u5c01\u90ae\u4ef6\uff1a func SendMail ( addr string , a Auth , from string , to [] string , msg [] byte ) error \u793a\u4f8b 15.27 smtp_auth.go package main import ( \"log\" \"net/smtp\" ) func main () { // Set up authentication information. auth := smtp . PlainAuth ( \"\" , \"user@example.com\" , \"password\" , \"mail.example.com\" , ) // Connect to the server, authenticate, set the sender and recipient, // and send the email all in one step. err := smtp . SendMail ( \"mail.example.com:25\" , auth , \"sender@example.org\" , [] string { \"recipient@example.net\" }, [] byte ( \"This is the email body.\" ), ) if err != nil { log . Fatal ( err ) } }","title":"15.12 \u7528 smtp \u53d1\u9001\u90ae\u4ef6"},{"location":"15.12/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4e0e websocket \u901a\u4fe1 \u4e0b\u4e00\u7ae0\uff1a \u5e38\u89c1\u7684\u9677\u9631\u4e0e\u9519\u8bef","title":"\u94fe\u63a5"},{"location":"15.2/","text":"15.2 \u4e00\u4e2a\u7b80\u5355\u7684 web \u670d\u52a1\u5668 \u00b6 http \u662f\u6bd4 tcp \u66f4\u9ad8\u5c42\u7684\u534f\u8bae\uff0c\u5b83\u63cf\u8ff0\u4e86\u7f51\u9875\u670d\u52a1\u5668\u5982\u4f55\u4e0e\u5ba2\u6237\u7aef\u6d4f\u89c8\u5668\u8fdb\u884c\u901a\u4fe1\u3002Go \u63d0\u4f9b\u4e86 net/http \u5305\uff0c\u6211\u4eec\u9a6c\u4e0a\u5c31\u6765\u770b\u4e0b\u3002\u5148\u4ece\u4e00\u4e9b\u7b80\u5355\u7684\u793a\u4f8b\u5f00\u59cb\uff0c\u9996\u5148\u7f16\u5199\u4e00\u4e2a\u201cHello world!\u201d\u7f51\u9875\u670d\u52a1\u5668\uff1a \u67e5\u770b\u793a\u4f8b 15.6 \u6211\u4eec\u5f15\u5165\u4e86 http \u5305\u5e76\u542f\u52a8\u4e86\u7f51\u9875\u670d\u52a1\u5668\uff0c\u548c 15.1 \u8282 \u7684 net.Listen(\"tcp\", \"localhost:50000\") \u51fd\u6570\u7684 tcp \u670d\u52a1\u5668\u662f\u7c7b\u4f3c\u7684\uff0c\u4f7f\u7528 http.ListenAndServe(\"localhost:8080\", nil) \u51fd\u6570\uff0c\u5982\u679c\u6210\u529f\u4f1a\u8fd4\u56de\u7a7a\uff0c\u5426\u5219\u4f1a\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\uff08\u5730\u5740 localhost \u90e8\u5206\u53ef\u4ee5\u7701\u7565\uff0c 8080 \u662f\u6307\u5b9a\u7684\u7aef\u53e3\u53f7\uff09\u3002 http.URL \u7528\u4e8e\u8868\u793a\u7f51\u9875\u5730\u5740\uff0c\u5176\u4e2d\u5b57\u7b26\u4e32\u5c5e\u6027 Path \u7528\u4e8e\u4fdd\u5b58 url \u7684\u8def\u5f84\uff1b http.Request \u63cf\u8ff0\u4e86\u5ba2\u6237\u7aef\u8bf7\u6c42\uff0c\u5185\u542b\u4e00\u4e2a URL \u5b57\u6bb5\u3002 \u5982\u679c req \u662f\u6765\u81ea html \u8868\u5355\u7684 POST \u7c7b\u578b\u8bf7\u6c42\uff0c \u201cvar1\u201d \u662f\u8be5\u8868\u5355\u4e2d\u4e00\u4e2a\u8f93\u5165\u57df\u7684\u540d\u79f0\uff0c\u90a3\u4e48\u7528\u6237\u8f93\u5165\u7684\u503c\u5c31\u53ef\u4ee5\u901a\u8fc7 Go \u4ee3\u7801 req.FormValue(\"var1\") \u83b7\u53d6\u5230\uff08\u89c1 15.4 \u8282 \uff09\u3002\u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\u662f\u5148\u6267\u884c request.ParseForm() \uff0c\u7136\u540e\u518d\u83b7\u53d6 request.Form[\"var1\"] \u7684\u7b2c\u4e00\u4e2a\u8fd4\u56de\u53c2\u6570\uff0c\u5c31\u50cf\u8fd9\u6837\uff1a var1 , found := request . Form [ \"var1\" ] \u7b2c\u4e8c\u4e2a\u53c2\u6570 found \u4e3a true \u3002\u5982\u679c var1 \u5e76\u672a\u51fa\u73b0\u5728\u8868\u5355\u4e2d\uff0c found \u5c31\u662f false \u3002 \u8868\u5355\u5c5e\u6027\u5b9e\u9645\u4e0a\u662f map[string][]string \u7c7b\u578b\u3002\u7f51\u9875\u670d\u52a1\u5668\u53d1\u9001\u4e00\u4e2a http.Response \u54cd\u5e94\uff0c\u5b83\u662f\u901a\u8fc7 http.ResponseWriter \u5bf9\u8c61\u8f93\u51fa\u7684\uff0c\u540e\u8005\u7ec4\u88c5\u4e86 HTTP \u670d\u52a1\u5668\u54cd\u5e94\uff0c\u901a\u8fc7\u5bf9\u5176\u5199\u5165\u5185\u5bb9\uff0c\u6211\u4eec\u5c31\u5c06\u6570\u636e\u53d1\u9001\u7ed9\u4e86 HTTP \u5ba2\u6237\u7aef\u3002 \u73b0\u5728\u6211\u4eec\u4ecd\u7136\u8981\u7f16\u5199\u7a0b\u5e8f\uff0c\u4ee5\u5b9e\u73b0\u670d\u52a1\u5668\u5fc5\u987b\u505a\u7684\u4e8b\uff0c\u5373\u5982\u4f55\u5904\u7406\u8bf7\u6c42\u3002\u8fd9\u662f\u901a\u8fc7 http.HandleFunc() \u51fd\u6570\u5b8c\u6210\u7684\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5f53\u6839\u8def\u5f84\u201c/\u201d\uff08url \u5730\u5740\u662f http://localhost:8080 \uff09\u88ab\u8bf7\u6c42\u7684\u65f6\u5019\uff08\u6216\u8005\u8fd9\u4e2a\u670d\u52a1\u5668\u4e0a\u7684\u5176\u4ed6\u4efb\u610f\u5730\u5740\uff09\uff0c HelloServer() \u51fd\u6570\u5c31\u88ab\u6267\u884c\u4e86\u3002\u8fd9\u4e2a\u51fd\u6570\u662f http.HandlerFunc \u7c7b\u578b\u7684\uff0c\u5b83\u4eec\u901a\u5e38\u88ab\u547d\u540d\u4e3a Prefhandler\uff0c\u548c\u67d0\u4e2a\u8def\u5f84\u524d\u7f00 Pref \u5339\u914d\u3002 http.HandleFunc \u6ce8\u518c\u4e86\u4e00\u4e2a\u5904\u7406\u51fd\u6570\uff08\u8fd9\u91cc\u662f HelloServer() \uff09\u6765\u5904\u7406\u5bf9\u5e94 / \u7684\u8bf7\u6c42\u3002 / \u53ef\u4ee5\u88ab\u66ff\u6362\u4e3a\u5176\u4ed6\u66f4\u7279\u5b9a\u7684 url\uff0c\u6bd4\u5982 /create \uff0c /edit \u7b49\u7b49\uff1b\u4f60\u53ef\u4ee5\u4e3a\u6bcf\u4e00\u4e2a\u7279\u5b9a\u7684 url \u5b9a\u4e49\u4e00\u4e2a\u5355\u72ec\u7684\u5904\u7406\u51fd\u6570\u3002\u8fd9\u4e2a\u51fd\u6570\u9700\u8981\u4e24\u4e2a\u53c2\u6570\uff1a\u7b2c\u4e00\u4e2a\u662f ReponseWriter \u7c7b\u578b\u7684 w \uff1b\u7b2c\u4e8c\u4e2a\u662f\u8bf7\u6c42 req \u3002\u7a0b\u5e8f\u5411 w \u5199\u5165\u4e86 Hello \u548c r.URL.Path[1:] \u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff1a\u672b\u5c3e\u7684 [1:] \u8868\u793a\u201c\u521b\u5efa\u4e00\u4e2a\u4ece\u7d22\u5f15\u4e3a 1 \u7684\u5b57\u7b26\u5230\u7ed3\u5c3e\u7684\u5b50\u5207\u7247\u201d\uff0c\u7528\u6765\u4e22\u5f03\u8def\u5f84\u5f00\u5934\u7684\u201c/\u201d\uff0c fmt.Fprintf() \u51fd\u6570\u5b8c\u6210\u4e86\u672c\u6b21\u5199\u5165\uff08\u89c1 12.8 \u8282 \uff09\uff1b\u53e6\u4e00\u79cd\u53ef\u884c\u7684\u5199\u6cd5\u662f io.WriteString(w, \"hello, world!\\n\") \u3002 \u603b\u7ed3\uff1a\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8bf7\u6c42\u7684\u8def\u5f84\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5f53\u8def\u5f84\u88ab\u8bf7\u6c42\u65f6\uff0c\u9700\u8981\u8c03\u7528\u7684\u5904\u7406\u51fd\u6570\u7684\u5f15\u7528\u3002 \u793a\u4f8b 15.6 hello_world_webserver.go \uff1a package main import ( \"fmt\" \"log\" \"net/http\" ) func HelloServer ( w http . ResponseWriter , req * http . Request ) { fmt . Println ( \"Inside HelloServer handler\" ) fmt . Fprintf ( w , \"Hello,\" + req . URL . Path [ 1 :]) } func main () { http . HandleFunc ( \"/\" , HelloServer ) err := http . ListenAndServe ( \"localhost:8080\" , nil ) if err != nil { log . Fatal ( \"ListenAndServe: \" , err . Error ()) } } \u4f7f\u7528\u547d\u4ee4\u884c\u542f\u52a8\u7a0b\u5e8f\uff0c\u4f1a\u6253\u5f00\u4e00\u4e2a\u547d\u4ee4\u7a97\u53e3\u663e\u793a\u5982\u4e0b\u6587\u5b57\uff1a Starting Process E:/Go/GoBoek/code_examples/chapter_14/hello_world_webserver.exe... \u7136\u540e\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u8f93\u5165 url \u5730\u5740\uff1a http://localhost:8080/world \uff0c\u6d4f\u89c8\u5668\u5c31\u4f1a\u51fa\u73b0\u6587\u5b57\uff1a Hello, world \uff0c\u7f51\u9875\u670d\u52a1\u5668\u4f1a\u54cd\u5e94\u4f60\u5728 :8080/ \u540e\u8fb9\u8f93\u5165\u7684\u5185\u5bb9\u3002 fmt.Println() \u5728\u670d\u52a1\u5668\u7aef\u63a7\u5236\u53f0\u6253\u5370\u72b6\u6001\uff1b\u5728\u6bcf\u4e2a\u5904\u7406\u51fd\u6570\u88ab\u8c03\u7528\u65f6\uff0c\u628a\u8bf7\u6c42\u8bb0\u5f55\u4e0b\u6765\u4e5f\u8bb8\u66f4\u4e3a\u6709\u7528\u3002 \u6ce8\uff1a 1\uff09\u524d\u4e24\u884c\uff08\u6ca1\u6709\u9519\u8bef\u5904\u7406\u4ee3\u7801\uff09\u53ef\u4ee5\u66ff\u6362\u6210\u4ee5\u4e0b\u5199\u6cd5\uff1a http . ListenAndServe ( \":8080\" , http . HandlerFunc ( HelloServer )) 2\uff09 fmt.Fprint() \u548c fmt.Fprintf() \u90fd\u662f\u53ef\u4ee5\u7528\u6765\u5199\u5165 http.ResponseWriter \u7684\u51fd\u6570\uff08\u4ed6\u4eec\u5b9e\u73b0\u4e86 io.Writer \uff09\u3002 \u6bd4\u5982\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 fmt . Fprintf ( w , \"<h1>%s</h1><div>%s</div>\" , title , body ) \u6765\u6784\u5efa\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u7f51\u9875\u5e76\u63d2\u5165 title \u548c body \u7684\u503c\u3002 \u5982\u679c\u4f60\u9700\u8981\u66f4\u591a\u590d\u6742\u7684\u66ff\u6362\uff0c\u4f7f\u7528\u6a21\u677f\u5305\uff08\u89c1 15.7\u8282 \uff09 3\uff09\u5982\u679c\u4f60\u9700\u8981\u4f7f\u7528\u5b89\u5168\u7684 https \u8fde\u63a5\uff0c\u4f7f\u7528 http.ListenAndServeTLS() \u4ee3\u66ff http.ListenAndServe() 4\uff09\u9664\u4e86 http.HandleFunc(\"/\", Hfunc) \uff0c\u5176\u4e2d\u7684 HFunc \u662f\u4e00\u4e2a\u5904\u7406\u51fd\u6570\uff0c\u7b7e\u540d\u4e3a\uff1a func HFunc ( w http . ResponseWriter , req * http . Request ) { ... } \u4e5f\u53ef\u4ee5\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\uff1a http.Handle(\"/\", http.HandlerFunc(HFunc)) HandlerFunc \u53ea\u662f\u5b9a\u4e49\u4e86\u4e0a\u8ff0 HFunc \u7b7e\u540d\u7684\u522b\u540d\uff1a type HandlerFunc func ( ResponseWriter , * Request ) \u5b83\u662f\u4e00\u4e2a\u53ef\u4ee5\u628a\u666e\u901a\u7684\u51fd\u6570\u5f53\u505a HTTP \u5904\u7406\u5668 ( Handler ) \u7684\u9002\u914d\u5668\u3002\u5982\u679c\u51fd\u6570 f \u58f0\u660e\u5f97\u5408\u9002\uff0c HandlerFunc(f) \u5c31\u662f\u4e00\u4e2a\u6267\u884c f \u51fd\u6570\u7684 Handler \u5bf9\u8c61\u3002 http.Handle() \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e5f\u53ef\u4ee5\u662f T \u7c7b\u578b\u7684\u5bf9\u8c61 obj \uff1a http.Handle(\"/\", obj) \u3002 \u5982\u679c T \u6709 ServeHTTP() \u65b9\u6cd5\uff0c\u90a3\u5c31\u5b9e\u73b0\u4e86 http \u7684 Handler \u63a5\u53e3\uff1a func ( obj * Typ ) ServeHTTP ( w http . ResponseWriter , req * http . Request ) { ... } \u8fd9\u4e2a\u7528\u6cd5\u4e5f\u5728 15.8 \u8282 Counter \u548c Chan \u7c7b\u578b\u4e0a\u4f7f\u7528\u3002\u53ea\u8981\u5b9e\u73b0\u4e86 http.Handler \uff0c http \u5305\u5c31\u53ef\u4ee5\u5904\u7406\u4efb\u4f55 HTTP \u8bf7\u6c42\u3002 \u7ec3\u4e60 15.2\uff1a webhello2.go \u7f16\u5199\u4e00\u4e2a\u7f51\u9875\u670d\u52a1\u5668\u76d1\u542c\u7aef\u53e3 9999\uff0c\u6709\u5982\u4e0b\u5904\u7406\u51fd\u6570\uff1a \u5f53\u8bf7\u6c42 http://localhost:9999/hello/Name \u65f6\uff0c\u54cd\u5e94\uff1a hello Name \uff08 Name \u9700\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u59d3\uff0c\u6bd4\u5982 Chris \u6216\u8005 Madeleine\uff09 \u5f53\u8bf7\u6c42 http://localhost:9999/shouthello/Name \u65f6\uff0c\u54cd\u5e94\uff1a hello NAME \u7ec3\u4e60 15.3\uff1a hello_server.go \u521b\u5efa\u4e00\u4e2a\u7a7a\u7ed3\u6784 hello \u5e76\u4e3a\u5b83\u5b9e\u73b0 http.Handler \u3002\u8fd0\u884c\u5e76\u6d4b\u8bd5\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a tcp \u670d\u52a1\u5668 \u4e0b\u4e00\u8282\uff1a \u8bbf\u95ee\u5e76\u8bfb\u53d6\u9875\u9762\u6570\u636e","title":"15.2 \u4e00\u4e2a\u7b80\u5355\u7684 web \u670d\u52a1\u5668"},{"location":"15.2/#152-web","text":"http \u662f\u6bd4 tcp \u66f4\u9ad8\u5c42\u7684\u534f\u8bae\uff0c\u5b83\u63cf\u8ff0\u4e86\u7f51\u9875\u670d\u52a1\u5668\u5982\u4f55\u4e0e\u5ba2\u6237\u7aef\u6d4f\u89c8\u5668\u8fdb\u884c\u901a\u4fe1\u3002Go \u63d0\u4f9b\u4e86 net/http \u5305\uff0c\u6211\u4eec\u9a6c\u4e0a\u5c31\u6765\u770b\u4e0b\u3002\u5148\u4ece\u4e00\u4e9b\u7b80\u5355\u7684\u793a\u4f8b\u5f00\u59cb\uff0c\u9996\u5148\u7f16\u5199\u4e00\u4e2a\u201cHello world!\u201d\u7f51\u9875\u670d\u52a1\u5668\uff1a \u67e5\u770b\u793a\u4f8b 15.6 \u6211\u4eec\u5f15\u5165\u4e86 http \u5305\u5e76\u542f\u52a8\u4e86\u7f51\u9875\u670d\u52a1\u5668\uff0c\u548c 15.1 \u8282 \u7684 net.Listen(\"tcp\", \"localhost:50000\") \u51fd\u6570\u7684 tcp \u670d\u52a1\u5668\u662f\u7c7b\u4f3c\u7684\uff0c\u4f7f\u7528 http.ListenAndServe(\"localhost:8080\", nil) \u51fd\u6570\uff0c\u5982\u679c\u6210\u529f\u4f1a\u8fd4\u56de\u7a7a\uff0c\u5426\u5219\u4f1a\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\uff08\u5730\u5740 localhost \u90e8\u5206\u53ef\u4ee5\u7701\u7565\uff0c 8080 \u662f\u6307\u5b9a\u7684\u7aef\u53e3\u53f7\uff09\u3002 http.URL \u7528\u4e8e\u8868\u793a\u7f51\u9875\u5730\u5740\uff0c\u5176\u4e2d\u5b57\u7b26\u4e32\u5c5e\u6027 Path \u7528\u4e8e\u4fdd\u5b58 url \u7684\u8def\u5f84\uff1b http.Request \u63cf\u8ff0\u4e86\u5ba2\u6237\u7aef\u8bf7\u6c42\uff0c\u5185\u542b\u4e00\u4e2a URL \u5b57\u6bb5\u3002 \u5982\u679c req \u662f\u6765\u81ea html \u8868\u5355\u7684 POST \u7c7b\u578b\u8bf7\u6c42\uff0c \u201cvar1\u201d \u662f\u8be5\u8868\u5355\u4e2d\u4e00\u4e2a\u8f93\u5165\u57df\u7684\u540d\u79f0\uff0c\u90a3\u4e48\u7528\u6237\u8f93\u5165\u7684\u503c\u5c31\u53ef\u4ee5\u901a\u8fc7 Go \u4ee3\u7801 req.FormValue(\"var1\") \u83b7\u53d6\u5230\uff08\u89c1 15.4 \u8282 \uff09\u3002\u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\u662f\u5148\u6267\u884c request.ParseForm() \uff0c\u7136\u540e\u518d\u83b7\u53d6 request.Form[\"var1\"] \u7684\u7b2c\u4e00\u4e2a\u8fd4\u56de\u53c2\u6570\uff0c\u5c31\u50cf\u8fd9\u6837\uff1a var1 , found := request . Form [ \"var1\" ] \u7b2c\u4e8c\u4e2a\u53c2\u6570 found \u4e3a true \u3002\u5982\u679c var1 \u5e76\u672a\u51fa\u73b0\u5728\u8868\u5355\u4e2d\uff0c found \u5c31\u662f false \u3002 \u8868\u5355\u5c5e\u6027\u5b9e\u9645\u4e0a\u662f map[string][]string \u7c7b\u578b\u3002\u7f51\u9875\u670d\u52a1\u5668\u53d1\u9001\u4e00\u4e2a http.Response \u54cd\u5e94\uff0c\u5b83\u662f\u901a\u8fc7 http.ResponseWriter \u5bf9\u8c61\u8f93\u51fa\u7684\uff0c\u540e\u8005\u7ec4\u88c5\u4e86 HTTP \u670d\u52a1\u5668\u54cd\u5e94\uff0c\u901a\u8fc7\u5bf9\u5176\u5199\u5165\u5185\u5bb9\uff0c\u6211\u4eec\u5c31\u5c06\u6570\u636e\u53d1\u9001\u7ed9\u4e86 HTTP \u5ba2\u6237\u7aef\u3002 \u73b0\u5728\u6211\u4eec\u4ecd\u7136\u8981\u7f16\u5199\u7a0b\u5e8f\uff0c\u4ee5\u5b9e\u73b0\u670d\u52a1\u5668\u5fc5\u987b\u505a\u7684\u4e8b\uff0c\u5373\u5982\u4f55\u5904\u7406\u8bf7\u6c42\u3002\u8fd9\u662f\u901a\u8fc7 http.HandleFunc() \u51fd\u6570\u5b8c\u6210\u7684\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5f53\u6839\u8def\u5f84\u201c/\u201d\uff08url \u5730\u5740\u662f http://localhost:8080 \uff09\u88ab\u8bf7\u6c42\u7684\u65f6\u5019\uff08\u6216\u8005\u8fd9\u4e2a\u670d\u52a1\u5668\u4e0a\u7684\u5176\u4ed6\u4efb\u610f\u5730\u5740\uff09\uff0c HelloServer() \u51fd\u6570\u5c31\u88ab\u6267\u884c\u4e86\u3002\u8fd9\u4e2a\u51fd\u6570\u662f http.HandlerFunc \u7c7b\u578b\u7684\uff0c\u5b83\u4eec\u901a\u5e38\u88ab\u547d\u540d\u4e3a Prefhandler\uff0c\u548c\u67d0\u4e2a\u8def\u5f84\u524d\u7f00 Pref \u5339\u914d\u3002 http.HandleFunc \u6ce8\u518c\u4e86\u4e00\u4e2a\u5904\u7406\u51fd\u6570\uff08\u8fd9\u91cc\u662f HelloServer() \uff09\u6765\u5904\u7406\u5bf9\u5e94 / \u7684\u8bf7\u6c42\u3002 / \u53ef\u4ee5\u88ab\u66ff\u6362\u4e3a\u5176\u4ed6\u66f4\u7279\u5b9a\u7684 url\uff0c\u6bd4\u5982 /create \uff0c /edit \u7b49\u7b49\uff1b\u4f60\u53ef\u4ee5\u4e3a\u6bcf\u4e00\u4e2a\u7279\u5b9a\u7684 url \u5b9a\u4e49\u4e00\u4e2a\u5355\u72ec\u7684\u5904\u7406\u51fd\u6570\u3002\u8fd9\u4e2a\u51fd\u6570\u9700\u8981\u4e24\u4e2a\u53c2\u6570\uff1a\u7b2c\u4e00\u4e2a\u662f ReponseWriter \u7c7b\u578b\u7684 w \uff1b\u7b2c\u4e8c\u4e2a\u662f\u8bf7\u6c42 req \u3002\u7a0b\u5e8f\u5411 w \u5199\u5165\u4e86 Hello \u548c r.URL.Path[1:] \u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff1a\u672b\u5c3e\u7684 [1:] \u8868\u793a\u201c\u521b\u5efa\u4e00\u4e2a\u4ece\u7d22\u5f15\u4e3a 1 \u7684\u5b57\u7b26\u5230\u7ed3\u5c3e\u7684\u5b50\u5207\u7247\u201d\uff0c\u7528\u6765\u4e22\u5f03\u8def\u5f84\u5f00\u5934\u7684\u201c/\u201d\uff0c fmt.Fprintf() \u51fd\u6570\u5b8c\u6210\u4e86\u672c\u6b21\u5199\u5165\uff08\u89c1 12.8 \u8282 \uff09\uff1b\u53e6\u4e00\u79cd\u53ef\u884c\u7684\u5199\u6cd5\u662f io.WriteString(w, \"hello, world!\\n\") \u3002 \u603b\u7ed3\uff1a\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8bf7\u6c42\u7684\u8def\u5f84\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5f53\u8def\u5f84\u88ab\u8bf7\u6c42\u65f6\uff0c\u9700\u8981\u8c03\u7528\u7684\u5904\u7406\u51fd\u6570\u7684\u5f15\u7528\u3002 \u793a\u4f8b 15.6 hello_world_webserver.go \uff1a package main import ( \"fmt\" \"log\" \"net/http\" ) func HelloServer ( w http . ResponseWriter , req * http . Request ) { fmt . Println ( \"Inside HelloServer handler\" ) fmt . Fprintf ( w , \"Hello,\" + req . URL . Path [ 1 :]) } func main () { http . HandleFunc ( \"/\" , HelloServer ) err := http . ListenAndServe ( \"localhost:8080\" , nil ) if err != nil { log . Fatal ( \"ListenAndServe: \" , err . Error ()) } } \u4f7f\u7528\u547d\u4ee4\u884c\u542f\u52a8\u7a0b\u5e8f\uff0c\u4f1a\u6253\u5f00\u4e00\u4e2a\u547d\u4ee4\u7a97\u53e3\u663e\u793a\u5982\u4e0b\u6587\u5b57\uff1a Starting Process E:/Go/GoBoek/code_examples/chapter_14/hello_world_webserver.exe... \u7136\u540e\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u8f93\u5165 url \u5730\u5740\uff1a http://localhost:8080/world \uff0c\u6d4f\u89c8\u5668\u5c31\u4f1a\u51fa\u73b0\u6587\u5b57\uff1a Hello, world \uff0c\u7f51\u9875\u670d\u52a1\u5668\u4f1a\u54cd\u5e94\u4f60\u5728 :8080/ \u540e\u8fb9\u8f93\u5165\u7684\u5185\u5bb9\u3002 fmt.Println() \u5728\u670d\u52a1\u5668\u7aef\u63a7\u5236\u53f0\u6253\u5370\u72b6\u6001\uff1b\u5728\u6bcf\u4e2a\u5904\u7406\u51fd\u6570\u88ab\u8c03\u7528\u65f6\uff0c\u628a\u8bf7\u6c42\u8bb0\u5f55\u4e0b\u6765\u4e5f\u8bb8\u66f4\u4e3a\u6709\u7528\u3002 \u6ce8\uff1a 1\uff09\u524d\u4e24\u884c\uff08\u6ca1\u6709\u9519\u8bef\u5904\u7406\u4ee3\u7801\uff09\u53ef\u4ee5\u66ff\u6362\u6210\u4ee5\u4e0b\u5199\u6cd5\uff1a http . ListenAndServe ( \":8080\" , http . HandlerFunc ( HelloServer )) 2\uff09 fmt.Fprint() \u548c fmt.Fprintf() \u90fd\u662f\u53ef\u4ee5\u7528\u6765\u5199\u5165 http.ResponseWriter \u7684\u51fd\u6570\uff08\u4ed6\u4eec\u5b9e\u73b0\u4e86 io.Writer \uff09\u3002 \u6bd4\u5982\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 fmt . Fprintf ( w , \"<h1>%s</h1><div>%s</div>\" , title , body ) \u6765\u6784\u5efa\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u7f51\u9875\u5e76\u63d2\u5165 title \u548c body \u7684\u503c\u3002 \u5982\u679c\u4f60\u9700\u8981\u66f4\u591a\u590d\u6742\u7684\u66ff\u6362\uff0c\u4f7f\u7528\u6a21\u677f\u5305\uff08\u89c1 15.7\u8282 \uff09 3\uff09\u5982\u679c\u4f60\u9700\u8981\u4f7f\u7528\u5b89\u5168\u7684 https \u8fde\u63a5\uff0c\u4f7f\u7528 http.ListenAndServeTLS() \u4ee3\u66ff http.ListenAndServe() 4\uff09\u9664\u4e86 http.HandleFunc(\"/\", Hfunc) \uff0c\u5176\u4e2d\u7684 HFunc \u662f\u4e00\u4e2a\u5904\u7406\u51fd\u6570\uff0c\u7b7e\u540d\u4e3a\uff1a func HFunc ( w http . ResponseWriter , req * http . Request ) { ... } \u4e5f\u53ef\u4ee5\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\uff1a http.Handle(\"/\", http.HandlerFunc(HFunc)) HandlerFunc \u53ea\u662f\u5b9a\u4e49\u4e86\u4e0a\u8ff0 HFunc \u7b7e\u540d\u7684\u522b\u540d\uff1a type HandlerFunc func ( ResponseWriter , * Request ) \u5b83\u662f\u4e00\u4e2a\u53ef\u4ee5\u628a\u666e\u901a\u7684\u51fd\u6570\u5f53\u505a HTTP \u5904\u7406\u5668 ( Handler ) \u7684\u9002\u914d\u5668\u3002\u5982\u679c\u51fd\u6570 f \u58f0\u660e\u5f97\u5408\u9002\uff0c HandlerFunc(f) \u5c31\u662f\u4e00\u4e2a\u6267\u884c f \u51fd\u6570\u7684 Handler \u5bf9\u8c61\u3002 http.Handle() \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e5f\u53ef\u4ee5\u662f T \u7c7b\u578b\u7684\u5bf9\u8c61 obj \uff1a http.Handle(\"/\", obj) \u3002 \u5982\u679c T \u6709 ServeHTTP() \u65b9\u6cd5\uff0c\u90a3\u5c31\u5b9e\u73b0\u4e86 http \u7684 Handler \u63a5\u53e3\uff1a func ( obj * Typ ) ServeHTTP ( w http . ResponseWriter , req * http . Request ) { ... } \u8fd9\u4e2a\u7528\u6cd5\u4e5f\u5728 15.8 \u8282 Counter \u548c Chan \u7c7b\u578b\u4e0a\u4f7f\u7528\u3002\u53ea\u8981\u5b9e\u73b0\u4e86 http.Handler \uff0c http \u5305\u5c31\u53ef\u4ee5\u5904\u7406\u4efb\u4f55 HTTP \u8bf7\u6c42\u3002 \u7ec3\u4e60 15.2\uff1a webhello2.go \u7f16\u5199\u4e00\u4e2a\u7f51\u9875\u670d\u52a1\u5668\u76d1\u542c\u7aef\u53e3 9999\uff0c\u6709\u5982\u4e0b\u5904\u7406\u51fd\u6570\uff1a \u5f53\u8bf7\u6c42 http://localhost:9999/hello/Name \u65f6\uff0c\u54cd\u5e94\uff1a hello Name \uff08 Name \u9700\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u59d3\uff0c\u6bd4\u5982 Chris \u6216\u8005 Madeleine\uff09 \u5f53\u8bf7\u6c42 http://localhost:9999/shouthello/Name \u65f6\uff0c\u54cd\u5e94\uff1a hello NAME \u7ec3\u4e60 15.3\uff1a hello_server.go \u521b\u5efa\u4e00\u4e2a\u7a7a\u7ed3\u6784 hello \u5e76\u4e3a\u5b83\u5b9e\u73b0 http.Handler \u3002\u8fd0\u884c\u5e76\u6d4b\u8bd5\u3002","title":"15.2 \u4e00\u4e2a\u7b80\u5355\u7684 web \u670d\u52a1\u5668"},{"location":"15.2/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a tcp \u670d\u52a1\u5668 \u4e0b\u4e00\u8282\uff1a \u8bbf\u95ee\u5e76\u8bfb\u53d6\u9875\u9762\u6570\u636e","title":"\u94fe\u63a5"},{"location":"15.3/","text":"15.3 \u8bbf\u95ee\u5e76\u8bfb\u53d6\u9875\u9762\u6570\u636e \u00b6 \u5728\u4e0b\u8fb9\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\uff0c\u6570\u7ec4\u4e2d\u7684 url \u90fd\u5c06\u88ab\u8bbf\u95ee\uff1a\u4f1a\u53d1\u9001\u4e00\u4e2a\u7b80\u5355\u7684 http.Head() \u8bf7\u6c42\u67e5\u770b\u8fd4\u56de\u503c\uff1b\u5b83\u7684\u58f0\u660e\u5982\u4e0b\uff1a func Head(url string) (r *Response, err error) \u8fd4\u56de\u7684\u54cd\u5e94 Response \u5176\u72b6\u6001\u7801\u4f1a\u88ab\u6253\u5370\u51fa\u6765\u3002 \u793a\u4f8b 15.7 poll_url.go \uff1a package main import ( \"fmt\" \"net/http\" ) var urls = [] string { \"http://www.google.com/\" , \"http://golang.org/\" , \"http://blog.golang.org/\" , } func main () { // Execute an HTTP HEAD request for all url's // and returns the HTTP status string or an error string. for _ , url := range urls { resp , err := http . Head ( url ) if err != nil { fmt . Println ( \"Error:\" , url , err ) } fmt . Println ( url , \": \" , resp . Status ) } } \u8f93\u51fa\u4e3a\uff1a http://www.google.com/ : 302 Found http://golang.org/ : 200 OK http://blog.golang.org/ : 200 OK \u8bd1\u8005\u6ce8 \u7531\u4e8e\u56fd\u5185\u7684\u7f51\u7edc\u73af\u5883\u73b0\u72b6\uff0c\u5f88\u6709\u53ef\u80fd\u89c1\u5230\u5982\u4e0b\u8d85\u65f6\u9519\u8bef\u63d0\u793a\uff1a \u200b Error: http://www.google.com/ Head http://www.google.com/ : dial tcp 216.58.221.100:80: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond. \u5728\u4e0b\u8fb9\u7684\u7a0b\u5e8f\u4e2d\u6211\u4eec\u4f7f\u7528 http.Get() \u83b7\u53d6\u5e76\u663e\u793a\u7f51\u9875\u5185\u5bb9\uff1b Get() \u8fd4\u56de\u503c\u4e2d\u7684 Body \u5c5e\u6027\u5305\u542b\u4e86\u7f51\u9875\u5185\u5bb9\uff0c\u7136\u540e\u6211\u4eec\u7528 ioutil.ReadAll() \u628a\u5b83\u8bfb\u51fa\u6765\uff1a \u793a\u4f8b 15.8 http_fetch.go \uff1a package main import ( \"fmt\" \"io/ioutil\" \"log\" \"net/http\" ) func main () { res , err := http . Get ( \"http://www.google.com\" ) checkError ( err ) data , err := ioutil . ReadAll ( res . Body ) checkError ( err ) fmt . Printf ( \"Got: %q\" , string ( data )) } func checkError ( err error ) { if err != nil { log . Fatalf ( \"Get : %v\" , err ) } } \u5f53\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u7f51\u7ad9\u65f6\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a checkError \u8f93\u51fa\u9519\u8bef\u7684\u4f8b\u5b50\uff1a 2011/09/30 11:24:15 Get: Get http://www.google.bex: dial tcp www.google.bex:80:GetHostByName: No such host is known. \u8bd1\u8005\u6ce8 \u548c\u4e0a\u4e00\u4e2a\u4f8b\u5b50\u76f8\u4f3c\uff0c\u4f60\u53ef\u4ee5\u628a google.com \u66f4\u6362\u4e3a\u4e00\u4e2a\u56fd\u5185\u53ef\u4ee5\u987a\u7545\u8bbf\u95ee\u7684\u7f51\u5740\u8fdb\u884c\u6d4b\u8bd5 \u5728\u4e0b\u8fb9\u7684\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u83b7\u53d6\u4e00\u4e2a Twitter \u7528\u6237\u7684\u72b6\u6001\uff0c\u901a\u8fc7 xml \u5305\u5c06\u8fd9\u4e2a\u72b6\u6001\u89e3\u6790\u6210\u4e3a\u4e00\u4e2a\u7ed3\u6784\uff1a \u793a\u4f8b 15.9 twitter_status.go package main import ( \"encoding/xml\" \"fmt\" \"net/http\" ) /*\u8fd9\u4e2a\u7ed3\u6784\u4f1a\u4fdd\u5b58\u89e3\u6790\u540e\u7684\u8fd4\u56de\u6570\u636e\u3002 \u4ed6\u4eec\u4f1a\u5f62\u6210\u6709\u5c42\u7ea7\u7684 XML\uff0c\u53ef\u4ee5\u5ffd\u7565\u4e00\u4e9b\u65e0\u7528\u7684\u6570\u636e*/ type Status struct { Text string } type User struct { XMLName xml . Name Status Status } func main () { // \u53d1\u8d77\u8bf7\u6c42\u67e5\u8be2\u63a8\u7279 Goodland \u7528\u6237\u7684\u72b6\u6001 response , _ := http . Get ( \"http://twitter.com/users/Googland.xml\" ) // \u521d\u59cb\u5316 XML \u8fd4\u56de\u503c\u7684\u7ed3\u6784 user := User { xml . Name { \"\" , \"user\" }, Status { \"\" }} // \u5c06 XML \u89e3\u6790\u4e3a\u6211\u4eec\u7684\u7ed3\u6784 xml . Unmarshal ( response . Body , & user ) fmt . Printf ( \"status: %s\" , user . Status . Text ) } \u8f93\u51fa\uff1a status: Robot cars invade California, on orders from Google: Google has been testing self-driving cars ... http://bit.ly/cbtpUN http://retwt.me/97p<exit code=\"0\" msg=\"process exited normally\"/> \u8bd1\u8005\u6ce8 \u548c\u4e0a\u8fb9\u7684\u793a\u4f8b\u76f8\u4f3c\uff0c\u4f60\u53ef\u80fd\u65e0\u6cd5\u83b7\u53d6\u5230 xml \u6570\u636e\uff0c\u53e6\u5916\u7531\u4e8e Go \u7248\u672c\u7684\u66f4\u65b0\uff0c xml.Unmarshal() \u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u9700\u662f []byte \u7c7b\u578b\uff0c\u800c\u65e0\u6cd5\u4f20\u5165 Body \u3002 \u6211\u4eec\u4f1a\u5728 15.4 \u8282 \u4e2d\u7528\u5230 http \u5305\u4e2d\u7684\u5176\u4ed6\u91cd\u8981\u7684\u51fd\u6570\uff1a http.Redirect(w ResponseWriter, r *Request, url string, code int) \uff1a\u8fd9\u4e2a\u51fd\u6570\u4f1a\u8ba9\u6d4f\u89c8\u5668\u91cd\u5b9a\u5411\u5230 url \uff08\u53ef\u4ee5\u662f\u57fa\u4e8e\u8bf7\u6c42 url \u7684\u76f8\u5bf9\u8def\u5f84\uff09\uff0c\u540c\u65f6\u6307\u5b9a\u72b6\u6001\u7801\u3002 http.NotFound(w ResponseWriter, r *Request) \uff1a\u8fd9\u4e2a\u51fd\u6570\u5c06\u8fd4\u56de\u7f51\u9875\u6ca1\u6709\u627e\u5230\uff0cHTTP 404 \u9519\u8bef\u3002 http.Error(w ResponseWriter, error string, code int) \uff1a\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u7279\u5b9a\u7684\u9519\u8bef\u4fe1\u606f\u548c HTTP \u4ee3\u7801\u3002 \u53e6\u4e00\u4e2a http.Request \u5bf9\u8c61 req \u7684\u91cd\u8981\u5c5e\u6027\uff1a req.Method \uff0c\u8fd9\u662f\u4e00\u4e2a\u5305\u542b GET \u6216 POST \u5b57\u7b26\u4e32\uff0c\u7528\u6765\u63cf\u8ff0\u7f51\u9875\u662f\u4ee5\u4f55\u79cd\u65b9\u5f0f\u88ab\u8bf7\u6c42\u7684\u3002 Go \u4e3a\u6240\u6709\u7684 HTTP \u72b6\u6001\u7801\u5b9a\u4e49\u4e86\u5e38\u91cf\uff0c\u6bd4\u5982\uff1a http . StatusContinue = 100 http . StatusOK = 200 http . StatusFound = 302 http . StatusBadRequest = 400 http . StatusUnauthorized = 401 http . StatusForbidden = 403 http . StatusNotFound = 404 http . StatusInternalServerError = 500 \u4f60\u53ef\u4ee5\u4f7f\u7528 w.header().Set(\"Content-Type\", \"../..\") \u8bbe\u7f6e\u5934\u4fe1\u606f\u3002 \u6bd4\u5982\u5728\u7f51\u9875\u5e94\u7528\u53d1\u9001 html \u5b57\u7b26\u4e32\u7684\u65f6\u5019\uff0c\u5728\u8f93\u51fa\u4e4b\u524d\u6267\u884c w.Header().Set(\"Content-Type\", \"text/html\") \uff08\u901a\u5e38\u4e0d\u662f\u5fc5\u8981\u7684\uff09\u3002 \u7ec3\u4e60 15.4\uff1a\u6269\u5c55 http_fetch.go \u4f7f\u4e4b\u53ef\u4ee5\u4ece\u63a7\u5236\u53f0\u8bfb\u53d6 url\uff0c\u4f7f\u7528 12.1 \u8282 \u5b66\u5230\u7684\u63a5\u6536\u63a7\u5236\u53f0\u8f93\u5165\u7684\u65b9\u6cd5 ( http_fetch2.go ) \u7ec3\u4e60 15.5\uff1a\u83b7\u53d6 json \u683c\u5f0f\u7684\u63a8\u7279\u72b6\u6001\uff0c\u5c31\u50cf\u793a\u4f8b 15.9 ( twitter_status_json.go ) \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4e00\u4e2a\u7b80\u5355\u7684\u7f51\u9875\u670d\u52a1\u5668 \u4e0b\u4e00\u8282\uff1a \u5199\u4e00\u4e2a\u7b80\u5355\u7684\u7f51\u9875\u5e94\u7528","title":"15.3 \u8bbf\u95ee\u5e76\u8bfb\u53d6\u9875\u9762\u6570\u636e"},{"location":"15.3/#153","text":"\u5728\u4e0b\u8fb9\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\uff0c\u6570\u7ec4\u4e2d\u7684 url \u90fd\u5c06\u88ab\u8bbf\u95ee\uff1a\u4f1a\u53d1\u9001\u4e00\u4e2a\u7b80\u5355\u7684 http.Head() \u8bf7\u6c42\u67e5\u770b\u8fd4\u56de\u503c\uff1b\u5b83\u7684\u58f0\u660e\u5982\u4e0b\uff1a func Head(url string) (r *Response, err error) \u8fd4\u56de\u7684\u54cd\u5e94 Response \u5176\u72b6\u6001\u7801\u4f1a\u88ab\u6253\u5370\u51fa\u6765\u3002 \u793a\u4f8b 15.7 poll_url.go \uff1a package main import ( \"fmt\" \"net/http\" ) var urls = [] string { \"http://www.google.com/\" , \"http://golang.org/\" , \"http://blog.golang.org/\" , } func main () { // Execute an HTTP HEAD request for all url's // and returns the HTTP status string or an error string. for _ , url := range urls { resp , err := http . Head ( url ) if err != nil { fmt . Println ( \"Error:\" , url , err ) } fmt . Println ( url , \": \" , resp . Status ) } } \u8f93\u51fa\u4e3a\uff1a http://www.google.com/ : 302 Found http://golang.org/ : 200 OK http://blog.golang.org/ : 200 OK \u8bd1\u8005\u6ce8 \u7531\u4e8e\u56fd\u5185\u7684\u7f51\u7edc\u73af\u5883\u73b0\u72b6\uff0c\u5f88\u6709\u53ef\u80fd\u89c1\u5230\u5982\u4e0b\u8d85\u65f6\u9519\u8bef\u63d0\u793a\uff1a \u200b Error: http://www.google.com/ Head http://www.google.com/ : dial tcp 216.58.221.100:80: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond. \u5728\u4e0b\u8fb9\u7684\u7a0b\u5e8f\u4e2d\u6211\u4eec\u4f7f\u7528 http.Get() \u83b7\u53d6\u5e76\u663e\u793a\u7f51\u9875\u5185\u5bb9\uff1b Get() \u8fd4\u56de\u503c\u4e2d\u7684 Body \u5c5e\u6027\u5305\u542b\u4e86\u7f51\u9875\u5185\u5bb9\uff0c\u7136\u540e\u6211\u4eec\u7528 ioutil.ReadAll() \u628a\u5b83\u8bfb\u51fa\u6765\uff1a \u793a\u4f8b 15.8 http_fetch.go \uff1a package main import ( \"fmt\" \"io/ioutil\" \"log\" \"net/http\" ) func main () { res , err := http . Get ( \"http://www.google.com\" ) checkError ( err ) data , err := ioutil . ReadAll ( res . Body ) checkError ( err ) fmt . Printf ( \"Got: %q\" , string ( data )) } func checkError ( err error ) { if err != nil { log . Fatalf ( \"Get : %v\" , err ) } } \u5f53\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u7f51\u7ad9\u65f6\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a checkError \u8f93\u51fa\u9519\u8bef\u7684\u4f8b\u5b50\uff1a 2011/09/30 11:24:15 Get: Get http://www.google.bex: dial tcp www.google.bex:80:GetHostByName: No such host is known. \u8bd1\u8005\u6ce8 \u548c\u4e0a\u4e00\u4e2a\u4f8b\u5b50\u76f8\u4f3c\uff0c\u4f60\u53ef\u4ee5\u628a google.com \u66f4\u6362\u4e3a\u4e00\u4e2a\u56fd\u5185\u53ef\u4ee5\u987a\u7545\u8bbf\u95ee\u7684\u7f51\u5740\u8fdb\u884c\u6d4b\u8bd5 \u5728\u4e0b\u8fb9\u7684\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u83b7\u53d6\u4e00\u4e2a Twitter \u7528\u6237\u7684\u72b6\u6001\uff0c\u901a\u8fc7 xml \u5305\u5c06\u8fd9\u4e2a\u72b6\u6001\u89e3\u6790\u6210\u4e3a\u4e00\u4e2a\u7ed3\u6784\uff1a \u793a\u4f8b 15.9 twitter_status.go package main import ( \"encoding/xml\" \"fmt\" \"net/http\" ) /*\u8fd9\u4e2a\u7ed3\u6784\u4f1a\u4fdd\u5b58\u89e3\u6790\u540e\u7684\u8fd4\u56de\u6570\u636e\u3002 \u4ed6\u4eec\u4f1a\u5f62\u6210\u6709\u5c42\u7ea7\u7684 XML\uff0c\u53ef\u4ee5\u5ffd\u7565\u4e00\u4e9b\u65e0\u7528\u7684\u6570\u636e*/ type Status struct { Text string } type User struct { XMLName xml . Name Status Status } func main () { // \u53d1\u8d77\u8bf7\u6c42\u67e5\u8be2\u63a8\u7279 Goodland \u7528\u6237\u7684\u72b6\u6001 response , _ := http . Get ( \"http://twitter.com/users/Googland.xml\" ) // \u521d\u59cb\u5316 XML \u8fd4\u56de\u503c\u7684\u7ed3\u6784 user := User { xml . Name { \"\" , \"user\" }, Status { \"\" }} // \u5c06 XML \u89e3\u6790\u4e3a\u6211\u4eec\u7684\u7ed3\u6784 xml . Unmarshal ( response . Body , & user ) fmt . Printf ( \"status: %s\" , user . Status . Text ) } \u8f93\u51fa\uff1a status: Robot cars invade California, on orders from Google: Google has been testing self-driving cars ... http://bit.ly/cbtpUN http://retwt.me/97p<exit code=\"0\" msg=\"process exited normally\"/> \u8bd1\u8005\u6ce8 \u548c\u4e0a\u8fb9\u7684\u793a\u4f8b\u76f8\u4f3c\uff0c\u4f60\u53ef\u80fd\u65e0\u6cd5\u83b7\u53d6\u5230 xml \u6570\u636e\uff0c\u53e6\u5916\u7531\u4e8e Go \u7248\u672c\u7684\u66f4\u65b0\uff0c xml.Unmarshal() \u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u9700\u662f []byte \u7c7b\u578b\uff0c\u800c\u65e0\u6cd5\u4f20\u5165 Body \u3002 \u6211\u4eec\u4f1a\u5728 15.4 \u8282 \u4e2d\u7528\u5230 http \u5305\u4e2d\u7684\u5176\u4ed6\u91cd\u8981\u7684\u51fd\u6570\uff1a http.Redirect(w ResponseWriter, r *Request, url string, code int) \uff1a\u8fd9\u4e2a\u51fd\u6570\u4f1a\u8ba9\u6d4f\u89c8\u5668\u91cd\u5b9a\u5411\u5230 url \uff08\u53ef\u4ee5\u662f\u57fa\u4e8e\u8bf7\u6c42 url \u7684\u76f8\u5bf9\u8def\u5f84\uff09\uff0c\u540c\u65f6\u6307\u5b9a\u72b6\u6001\u7801\u3002 http.NotFound(w ResponseWriter, r *Request) \uff1a\u8fd9\u4e2a\u51fd\u6570\u5c06\u8fd4\u56de\u7f51\u9875\u6ca1\u6709\u627e\u5230\uff0cHTTP 404 \u9519\u8bef\u3002 http.Error(w ResponseWriter, error string, code int) \uff1a\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u7279\u5b9a\u7684\u9519\u8bef\u4fe1\u606f\u548c HTTP \u4ee3\u7801\u3002 \u53e6\u4e00\u4e2a http.Request \u5bf9\u8c61 req \u7684\u91cd\u8981\u5c5e\u6027\uff1a req.Method \uff0c\u8fd9\u662f\u4e00\u4e2a\u5305\u542b GET \u6216 POST \u5b57\u7b26\u4e32\uff0c\u7528\u6765\u63cf\u8ff0\u7f51\u9875\u662f\u4ee5\u4f55\u79cd\u65b9\u5f0f\u88ab\u8bf7\u6c42\u7684\u3002 Go \u4e3a\u6240\u6709\u7684 HTTP \u72b6\u6001\u7801\u5b9a\u4e49\u4e86\u5e38\u91cf\uff0c\u6bd4\u5982\uff1a http . StatusContinue = 100 http . StatusOK = 200 http . StatusFound = 302 http . StatusBadRequest = 400 http . StatusUnauthorized = 401 http . StatusForbidden = 403 http . StatusNotFound = 404 http . StatusInternalServerError = 500 \u4f60\u53ef\u4ee5\u4f7f\u7528 w.header().Set(\"Content-Type\", \"../..\") \u8bbe\u7f6e\u5934\u4fe1\u606f\u3002 \u6bd4\u5982\u5728\u7f51\u9875\u5e94\u7528\u53d1\u9001 html \u5b57\u7b26\u4e32\u7684\u65f6\u5019\uff0c\u5728\u8f93\u51fa\u4e4b\u524d\u6267\u884c w.Header().Set(\"Content-Type\", \"text/html\") \uff08\u901a\u5e38\u4e0d\u662f\u5fc5\u8981\u7684\uff09\u3002 \u7ec3\u4e60 15.4\uff1a\u6269\u5c55 http_fetch.go \u4f7f\u4e4b\u53ef\u4ee5\u4ece\u63a7\u5236\u53f0\u8bfb\u53d6 url\uff0c\u4f7f\u7528 12.1 \u8282 \u5b66\u5230\u7684\u63a5\u6536\u63a7\u5236\u53f0\u8f93\u5165\u7684\u65b9\u6cd5 ( http_fetch2.go ) \u7ec3\u4e60 15.5\uff1a\u83b7\u53d6 json \u683c\u5f0f\u7684\u63a8\u7279\u72b6\u6001\uff0c\u5c31\u50cf\u793a\u4f8b 15.9 ( twitter_status_json.go )","title":"15.3 \u8bbf\u95ee\u5e76\u8bfb\u53d6\u9875\u9762\u6570\u636e"},{"location":"15.3/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4e00\u4e2a\u7b80\u5355\u7684\u7f51\u9875\u670d\u52a1\u5668 \u4e0b\u4e00\u8282\uff1a \u5199\u4e00\u4e2a\u7b80\u5355\u7684\u7f51\u9875\u5e94\u7528","title":"\u94fe\u63a5"},{"location":"15.4/","text":"15.4 \u5199\u4e00\u4e2a\u7b80\u5355\u7684\u7f51\u9875\u5e94\u7528 \u00b6 \u4e0b\u8fb9\u7684\u7a0b\u5e8f\u5728\u7aef\u53e3 8088 \u4e0a\u542f\u52a8\u4e86\u4e00\u4e2a\u7f51\u9875\u670d\u52a1\u5668\uff1b SimpleServer() \u4f1a\u5904\u7406 url/ test1 \u4f7f\u5b83\u5728\u6d4f\u89c8\u5668\u8f93\u51fa hello world \u3002 FormServer \u4f1a\u5904\u7406 url/ test2 \uff1a\u5982\u679c url \u6700\u521d\u7531\u6d4f\u89c8\u5668\u8bf7\u6c42\uff0c\u90a3\u4e48\u5b83\u662f\u4e00\u4e2a GET \u8bf7\u6c42\uff0c\u8fd4\u56de\u4e00\u4e2a form \u5e38\u91cf\uff0c\u5305\u542b\u4e86\u7b80\u5355\u7684 input \u8868\u5355\uff0c\u8fd9\u4e2a\u8868\u5355\u91cc\u6709\u4e00\u4e2a\u6587\u672c\u6846\u548c\u4e00\u4e2a\u63d0\u4ea4\u6309\u94ae\u3002\u5f53\u5728\u6587\u672c\u6846\u8f93\u5165\u4e00\u4e9b\u4e1c\u897f\u5e76\u70b9\u51fb\u63d0\u4ea4\u6309\u94ae\u7684\u65f6\u5019\uff0c\u4f1a\u53d1\u8d77\u4e00\u4e2a POST \u8bf7\u6c42\u3002 FormServer() \u4e2d\u7684\u4ee3\u7801\u7528\u5230\u4e86 switch \u6765\u533a\u5206\u4e24\u79cd\u60c5\u51b5\u3002\u8bf7\u6c42\u4e3a POST \u7c7b\u578b\u65f6\uff0c name \u5c5e\u6027\u4e3a inp \u7684\u6587\u672c\u6846\u7684\u5185\u5bb9\u53ef\u4ee5\u8fd9\u6837\u83b7\u53d6\uff1a request.FormValue(\"inp\") \u3002\u7136\u540e\u5c06\u5176\u5199\u56de\u6d4f\u89c8\u5668\u9875\u9762\u4e2d\u3002\u5728\u63a7\u5236\u53f0\u542f\u52a8\u7a0b\u5e8f\uff0c\u7136\u540e\u5230\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00 url http://localhost:8088/test2 \u6765\u6d4b\u8bd5\u8fd9\u4e2a\u7a0b\u5e8f\uff1a \u793a\u4f8b 15.10 simple_webserver.go package main import ( \"io\" \"net/http\" ) const form = ` <html><body> <form action=\"#\" method=\"post\" name=\"bar\"> <input type=\"text\" name=\"in\" /> <input type=\"submit\" value=\"submit\"/> </form> </body></html> ` /* handle a simple get request */ func SimpleServer ( w http . ResponseWriter , request * http . Request ) { io . WriteString ( w , \"<h1>hello, world</h1>\" ) } func FormServer ( w http . ResponseWriter , request * http . Request ) { w . Header (). Set ( \"Content-Type\" , \"text/html\" ) switch request . Method { case \"GET\" : /* display the form to the user */ io . WriteString ( w , form ) case \"POST\" : /* handle the form data, note that ParseForm must be called before we can extract form data */ //request.ParseForm(); //io.WriteString(w, request.Form[\"in\"][0]) io . WriteString ( w , request . FormValue ( \"in\" )) } } func main () { http . HandleFunc ( \"/test1\" , SimpleServer ) http . HandleFunc ( \"/test2\" , FormServer ) if err := http . ListenAndServe ( \":8088\" , nil ); err != nil { panic ( err ) } } \u6ce8\uff1a\u5f53\u4f7f\u7528\u5b57\u7b26\u4e32\u5e38\u91cf\u8868\u793a html \u6587\u672c\u7684\u65f6\u5019\uff0c\u5305\u542b <html><body>...</body></html> \u5bf9\u4e8e\u8ba9\u6d4f\u89c8\u5668\u5c06\u5b83\u8bc6\u522b\u4e3a html \u6587\u6863\u975e\u5e38\u91cd\u8981\u3002 \u66f4\u5b89\u5168\u7684\u505a\u6cd5\u662f\u5728\u5904\u7406\u51fd\u6570\u4e2d\uff0c\u5728\u5199\u5165\u8fd4\u56de\u5185\u5bb9\u4e4b\u524d\u5c06\u5934\u90e8\u7684 content-type \u8bbe\u7f6e\u4e3a text/html \uff1a w.Header().Set(\"Content-Type\", \"text/html\") \u3002 \"Content-Type\" \u4f1a\u8ba9\u6d4f\u89c8\u5668\u8ba4\u4e3a\u5b83\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570 http.DetectContentType([]byte(form)) \u6765\u5904\u7406\u6536\u5230\u7684\u6570\u636e\u3002 \u7ec3\u4e60 15.6 statistics.go \u7f16\u5199\u4e00\u4e2a\u7f51\u9875\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u8ba9\u7528\u6237\u8f93\u5165\u4e00\u8fde\u4e32\u7684\u6570\u5b57\u3002\u8ba1\u7b97\u51fa\u8fd9\u4e9b\u6570\u5b57\u7684\u5747\u503c\u548c\u4e2d\u503c\uff0c\u5e76\u4e14\u6253\u5370\u51fa\u6765\uff0c\u5c31\u50cf\u4e0b\u8fb9\u8fd9\u5f20\u622a\u56fe\u4e00\u6837\uff1a \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u8bbf\u95ee\u5e76\u8bfb\u53d6\u9875\u9762 \u4e0b\u4e00\u8282\uff1a \u786e\u4fdd\u7f51\u9875\u5e94\u7528\u5065\u58ee","title":"15.4 \u5199\u4e00\u4e2a\u7b80\u5355\u7684\u7f51\u9875\u5e94\u7528"},{"location":"15.4/#154","text":"\u4e0b\u8fb9\u7684\u7a0b\u5e8f\u5728\u7aef\u53e3 8088 \u4e0a\u542f\u52a8\u4e86\u4e00\u4e2a\u7f51\u9875\u670d\u52a1\u5668\uff1b SimpleServer() \u4f1a\u5904\u7406 url/ test1 \u4f7f\u5b83\u5728\u6d4f\u89c8\u5668\u8f93\u51fa hello world \u3002 FormServer \u4f1a\u5904\u7406 url/ test2 \uff1a\u5982\u679c url \u6700\u521d\u7531\u6d4f\u89c8\u5668\u8bf7\u6c42\uff0c\u90a3\u4e48\u5b83\u662f\u4e00\u4e2a GET \u8bf7\u6c42\uff0c\u8fd4\u56de\u4e00\u4e2a form \u5e38\u91cf\uff0c\u5305\u542b\u4e86\u7b80\u5355\u7684 input \u8868\u5355\uff0c\u8fd9\u4e2a\u8868\u5355\u91cc\u6709\u4e00\u4e2a\u6587\u672c\u6846\u548c\u4e00\u4e2a\u63d0\u4ea4\u6309\u94ae\u3002\u5f53\u5728\u6587\u672c\u6846\u8f93\u5165\u4e00\u4e9b\u4e1c\u897f\u5e76\u70b9\u51fb\u63d0\u4ea4\u6309\u94ae\u7684\u65f6\u5019\uff0c\u4f1a\u53d1\u8d77\u4e00\u4e2a POST \u8bf7\u6c42\u3002 FormServer() \u4e2d\u7684\u4ee3\u7801\u7528\u5230\u4e86 switch \u6765\u533a\u5206\u4e24\u79cd\u60c5\u51b5\u3002\u8bf7\u6c42\u4e3a POST \u7c7b\u578b\u65f6\uff0c name \u5c5e\u6027\u4e3a inp \u7684\u6587\u672c\u6846\u7684\u5185\u5bb9\u53ef\u4ee5\u8fd9\u6837\u83b7\u53d6\uff1a request.FormValue(\"inp\") \u3002\u7136\u540e\u5c06\u5176\u5199\u56de\u6d4f\u89c8\u5668\u9875\u9762\u4e2d\u3002\u5728\u63a7\u5236\u53f0\u542f\u52a8\u7a0b\u5e8f\uff0c\u7136\u540e\u5230\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00 url http://localhost:8088/test2 \u6765\u6d4b\u8bd5\u8fd9\u4e2a\u7a0b\u5e8f\uff1a \u793a\u4f8b 15.10 simple_webserver.go package main import ( \"io\" \"net/http\" ) const form = ` <html><body> <form action=\"#\" method=\"post\" name=\"bar\"> <input type=\"text\" name=\"in\" /> <input type=\"submit\" value=\"submit\"/> </form> </body></html> ` /* handle a simple get request */ func SimpleServer ( w http . ResponseWriter , request * http . Request ) { io . WriteString ( w , \"<h1>hello, world</h1>\" ) } func FormServer ( w http . ResponseWriter , request * http . Request ) { w . Header (). Set ( \"Content-Type\" , \"text/html\" ) switch request . Method { case \"GET\" : /* display the form to the user */ io . WriteString ( w , form ) case \"POST\" : /* handle the form data, note that ParseForm must be called before we can extract form data */ //request.ParseForm(); //io.WriteString(w, request.Form[\"in\"][0]) io . WriteString ( w , request . FormValue ( \"in\" )) } } func main () { http . HandleFunc ( \"/test1\" , SimpleServer ) http . HandleFunc ( \"/test2\" , FormServer ) if err := http . ListenAndServe ( \":8088\" , nil ); err != nil { panic ( err ) } } \u6ce8\uff1a\u5f53\u4f7f\u7528\u5b57\u7b26\u4e32\u5e38\u91cf\u8868\u793a html \u6587\u672c\u7684\u65f6\u5019\uff0c\u5305\u542b <html><body>...</body></html> \u5bf9\u4e8e\u8ba9\u6d4f\u89c8\u5668\u5c06\u5b83\u8bc6\u522b\u4e3a html \u6587\u6863\u975e\u5e38\u91cd\u8981\u3002 \u66f4\u5b89\u5168\u7684\u505a\u6cd5\u662f\u5728\u5904\u7406\u51fd\u6570\u4e2d\uff0c\u5728\u5199\u5165\u8fd4\u56de\u5185\u5bb9\u4e4b\u524d\u5c06\u5934\u90e8\u7684 content-type \u8bbe\u7f6e\u4e3a text/html \uff1a w.Header().Set(\"Content-Type\", \"text/html\") \u3002 \"Content-Type\" \u4f1a\u8ba9\u6d4f\u89c8\u5668\u8ba4\u4e3a\u5b83\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570 http.DetectContentType([]byte(form)) \u6765\u5904\u7406\u6536\u5230\u7684\u6570\u636e\u3002 \u7ec3\u4e60 15.6 statistics.go \u7f16\u5199\u4e00\u4e2a\u7f51\u9875\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u8ba9\u7528\u6237\u8f93\u5165\u4e00\u8fde\u4e32\u7684\u6570\u5b57\u3002\u8ba1\u7b97\u51fa\u8fd9\u4e9b\u6570\u5b57\u7684\u5747\u503c\u548c\u4e2d\u503c\uff0c\u5e76\u4e14\u6253\u5370\u51fa\u6765\uff0c\u5c31\u50cf\u4e0b\u8fb9\u8fd9\u5f20\u622a\u56fe\u4e00\u6837\uff1a","title":"15.4 \u5199\u4e00\u4e2a\u7b80\u5355\u7684\u7f51\u9875\u5e94\u7528"},{"location":"15.4/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u8bbf\u95ee\u5e76\u8bfb\u53d6\u9875\u9762 \u4e0b\u4e00\u8282\uff1a \u786e\u4fdd\u7f51\u9875\u5e94\u7528\u5065\u58ee","title":"\u94fe\u63a5"},{"location":"15.5/","text":"15.5 \u786e\u4fdd\u7f51\u9875\u5e94\u7528\u5065\u58ee \u00b6 \u5f53\u7f51\u9875\u5e94\u7528\u7684\u5904\u7406\u51fd\u6570\u53d1\u751f panic\uff0c\u670d\u52a1\u5668\u4f1a\u7b80\u5355\u5730\u7ec8\u6b62\u8fd0\u884c\u3002\u8fd9\u53ef\u4e0d\u5999\uff1a\u7f51\u9875\u670d\u52a1\u5668\u5fc5\u987b\u662f\u8db3\u591f\u5065\u58ee\u7684\u7a0b\u5e8f\uff0c\u80fd\u591f\u627f\u53d7\u4efb\u4f55\u53ef\u80fd\u7684\u7a81\u53d1\u95ee\u9898\u3002 \u9996\u5148\u80fd\u60f3\u5230\u7684\u662f\u5728\u6bcf\u4e2a\u5904\u7406\u51fd\u6570\u4e2d\u4f7f\u7528 defer / recover() \uff0c\u4e0d\u8fc7\u8fd9\u6837\u4f1a\u4ea7\u751f\u592a\u591a\u7684\u91cd\u590d\u4ee3\u7801\u3002 13.5 \u8282 \u4f7f\u7528\u95ed\u5305\u7684\u9519\u8bef\u5904\u7406\u6a21\u5f0f\u662f\u66f4\u4f18\u96c5\u7684\u65b9\u6848\u3002\u6211\u4eec\u628a\u8fd9\u79cd\u673a\u5236\u5e94\u7528\u5230\u524d\u4e00\u7ae0\u7684\u7b80\u5355\u7f51\u9875\u670d\u52a1\u5668\u4e0a\u3002\u5b9e\u9645\u4e0a\uff0c\u5b83\u53ef\u4ee5\u88ab\u7b80\u5355\u5730\u5e94\u7528\u5230\u4efb\u4f55\u7f51\u9875\u670d\u52a1\u5668\u7a0b\u5e8f\u4e2d\u3002 \u4e3a\u589e\u5f3a\u4ee3\u7801\u53ef\u8bfb\u6027\uff0c\u6211\u4eec\u4e3a\u9875\u9762\u5904\u7406\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u7c7b\u578b\uff1a type HandleFnc func ( http . ResponseWriter , * http . Request ) \u6211\u4eec\u7684\u9519\u8bef\u5904\u7406\u51fd\u6570\u5e94\u7528\u4e86 13.5 \u8282 \u7684\u6a21\u5f0f\uff0c\u53d8\u6210\u4e86\u4ee5\u4e0b\u7684 logPanics() \u51fd\u6570\uff1a func logPanics ( function HandleFnc ) HandleFnc { return func ( writer http . ResponseWriter , request * http . Request ) { defer func () { if x := recover (); x != nil { log . Printf ( \"[%v] caught panic: %v\" , request . RemoteAddr , x ) } }() function ( writer , request ) } } \u7136\u540e\u6211\u4eec\u7528 logPanics() \u6765\u5305\u88c5\u5bf9\u5904\u7406\u51fd\u6570\u7684\u8c03\u7528\uff1a http . HandleFunc ( \"/test1\" , logPanics ( SimpleServer )) http . HandleFunc ( \"/test2\" , logPanics ( FormServer )) \u5904\u7406\u51fd\u6570\u73b0\u5728\u53ef\u4ee5\u6062\u590d panic \u8c03\u7528\uff0c\u7c7b\u4f3c 13.5 \u8282 \u4e2d\u7684\u9519\u8bef\u68c0\u6d4b\u51fd\u6570\u3002\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a \u793a\u4f8b 15.11 robust_webserver.go package main import ( \"io\" \"log\" \"net/http\" ) const form = `<html><body><form action=\"#\" method=\"post\" name=\"bar\"> <input type=\"text\" name=\"in\"/> <input type=\"submit\" value=\"Submit\"/> </form></html></body>` type HandleFnc func ( http . ResponseWriter , * http . Request ) /* handle a simple get request */ func SimpleServer ( w http . ResponseWriter , request * http . Request ) { io . WriteString ( w , \"<h1>hello, world</h1>\" ) } /* handle a form, both the GET which displays the form and the POST which processes it.*/ func FormServer ( w http . ResponseWriter , request * http . Request ) { w . Header (). Set ( \"Content-Type\" , \"text/html\" ) switch request . Method { case \"GET\" : /* display the form to the user */ io . WriteString ( w , form ) case \"POST\" : /* handle the form data, note that ParseForm must be called before we can extract form data*/ //request.ParseForm(); //io.WriteString(w, request.Form[\"in\"][0]) io . WriteString ( w , request . FormValue ( \"in\" )) } } func main () { http . HandleFunc ( \"/test1\" , logPanics ( SimpleServer )) http . HandleFunc ( \"/test2\" , logPanics ( FormServer )) if err := http . ListenAndServe ( \":8088\" , nil ); err != nil { panic ( err ) } } func logPanics ( function HandleFnc ) HandleFnc { return func ( writer http . ResponseWriter , request * http . Request ) { defer func () { if x := recover (); x != nil { log . Printf ( \"[%v] caught panic: %v\" , request . RemoteAddr , x ) } }() function ( writer , request ) } } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5199\u4e00\u4e2a\u7b80\u5355\u7684\u7f51\u9875\u5e94\u7528 \u4e0b\u4e00\u8282\uff1a \u7528\u6a21\u677f\u7f16\u5199\u7f51\u9875\u5e94\u7528","title":"15.5 \u786e\u4fdd\u7f51\u9875\u5e94\u7528\u5065\u58ee"},{"location":"15.5/#155","text":"\u5f53\u7f51\u9875\u5e94\u7528\u7684\u5904\u7406\u51fd\u6570\u53d1\u751f panic\uff0c\u670d\u52a1\u5668\u4f1a\u7b80\u5355\u5730\u7ec8\u6b62\u8fd0\u884c\u3002\u8fd9\u53ef\u4e0d\u5999\uff1a\u7f51\u9875\u670d\u52a1\u5668\u5fc5\u987b\u662f\u8db3\u591f\u5065\u58ee\u7684\u7a0b\u5e8f\uff0c\u80fd\u591f\u627f\u53d7\u4efb\u4f55\u53ef\u80fd\u7684\u7a81\u53d1\u95ee\u9898\u3002 \u9996\u5148\u80fd\u60f3\u5230\u7684\u662f\u5728\u6bcf\u4e2a\u5904\u7406\u51fd\u6570\u4e2d\u4f7f\u7528 defer / recover() \uff0c\u4e0d\u8fc7\u8fd9\u6837\u4f1a\u4ea7\u751f\u592a\u591a\u7684\u91cd\u590d\u4ee3\u7801\u3002 13.5 \u8282 \u4f7f\u7528\u95ed\u5305\u7684\u9519\u8bef\u5904\u7406\u6a21\u5f0f\u662f\u66f4\u4f18\u96c5\u7684\u65b9\u6848\u3002\u6211\u4eec\u628a\u8fd9\u79cd\u673a\u5236\u5e94\u7528\u5230\u524d\u4e00\u7ae0\u7684\u7b80\u5355\u7f51\u9875\u670d\u52a1\u5668\u4e0a\u3002\u5b9e\u9645\u4e0a\uff0c\u5b83\u53ef\u4ee5\u88ab\u7b80\u5355\u5730\u5e94\u7528\u5230\u4efb\u4f55\u7f51\u9875\u670d\u52a1\u5668\u7a0b\u5e8f\u4e2d\u3002 \u4e3a\u589e\u5f3a\u4ee3\u7801\u53ef\u8bfb\u6027\uff0c\u6211\u4eec\u4e3a\u9875\u9762\u5904\u7406\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u7c7b\u578b\uff1a type HandleFnc func ( http . ResponseWriter , * http . Request ) \u6211\u4eec\u7684\u9519\u8bef\u5904\u7406\u51fd\u6570\u5e94\u7528\u4e86 13.5 \u8282 \u7684\u6a21\u5f0f\uff0c\u53d8\u6210\u4e86\u4ee5\u4e0b\u7684 logPanics() \u51fd\u6570\uff1a func logPanics ( function HandleFnc ) HandleFnc { return func ( writer http . ResponseWriter , request * http . Request ) { defer func () { if x := recover (); x != nil { log . Printf ( \"[%v] caught panic: %v\" , request . RemoteAddr , x ) } }() function ( writer , request ) } } \u7136\u540e\u6211\u4eec\u7528 logPanics() \u6765\u5305\u88c5\u5bf9\u5904\u7406\u51fd\u6570\u7684\u8c03\u7528\uff1a http . HandleFunc ( \"/test1\" , logPanics ( SimpleServer )) http . HandleFunc ( \"/test2\" , logPanics ( FormServer )) \u5904\u7406\u51fd\u6570\u73b0\u5728\u53ef\u4ee5\u6062\u590d panic \u8c03\u7528\uff0c\u7c7b\u4f3c 13.5 \u8282 \u4e2d\u7684\u9519\u8bef\u68c0\u6d4b\u51fd\u6570\u3002\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a \u793a\u4f8b 15.11 robust_webserver.go package main import ( \"io\" \"log\" \"net/http\" ) const form = `<html><body><form action=\"#\" method=\"post\" name=\"bar\"> <input type=\"text\" name=\"in\"/> <input type=\"submit\" value=\"Submit\"/> </form></html></body>` type HandleFnc func ( http . ResponseWriter , * http . Request ) /* handle a simple get request */ func SimpleServer ( w http . ResponseWriter , request * http . Request ) { io . WriteString ( w , \"<h1>hello, world</h1>\" ) } /* handle a form, both the GET which displays the form and the POST which processes it.*/ func FormServer ( w http . ResponseWriter , request * http . Request ) { w . Header (). Set ( \"Content-Type\" , \"text/html\" ) switch request . Method { case \"GET\" : /* display the form to the user */ io . WriteString ( w , form ) case \"POST\" : /* handle the form data, note that ParseForm must be called before we can extract form data*/ //request.ParseForm(); //io.WriteString(w, request.Form[\"in\"][0]) io . WriteString ( w , request . FormValue ( \"in\" )) } } func main () { http . HandleFunc ( \"/test1\" , logPanics ( SimpleServer )) http . HandleFunc ( \"/test2\" , logPanics ( FormServer )) if err := http . ListenAndServe ( \":8088\" , nil ); err != nil { panic ( err ) } } func logPanics ( function HandleFnc ) HandleFnc { return func ( writer http . ResponseWriter , request * http . Request ) { defer func () { if x := recover (); x != nil { log . Printf ( \"[%v] caught panic: %v\" , request . RemoteAddr , x ) } }() function ( writer , request ) } }","title":"15.5 \u786e\u4fdd\u7f51\u9875\u5e94\u7528\u5065\u58ee"},{"location":"15.5/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5199\u4e00\u4e2a\u7b80\u5355\u7684\u7f51\u9875\u5e94\u7528 \u4e0b\u4e00\u8282\uff1a \u7528\u6a21\u677f\u7f16\u5199\u7f51\u9875\u5e94\u7528","title":"\u94fe\u63a5"},{"location":"15.6/","text":"15.6 \u7528\u6a21\u677f\u7f16\u5199\u7f51\u9875\u5e94\u7528 \u00b6 \u4ee5\u4e0b\u7a0b\u5e8f\u662f\u7528 100 \u884c\u4ee5\u5185\u4ee3\u7801\u5b9e\u73b0\u53ef\u884c\u7684 wiki \u7f51\u9875\u5e94\u7528\uff0c\u5b83\u7531\u4e00\u7ec4\u9875\u9762\u7ec4\u6210\uff0c\u7528\u4e8e\u9605\u8bfb\u3001\u7f16\u8f91\u548c\u4fdd\u5b58\u3002\u5b83\u662f\u6765\u81ea Go \u7f51\u7ad9 codelab \u7684 wiki \u5236\u4f5c\u6559\u7a0b\uff0c\u6211\u6240\u77e5\u7684\u6700\u597d\u7684 Go \u6559\u7a0b\u4e4b\u4e00\uff0c\u975e\u5e38\u503c\u5f97\u8fdb\u884c\u5b8c\u6574\u7684\u5b9e\u9a8c\uff0c\u4ee5\u89c1\u8bc1\u5e76\u7406\u89e3\u7a0b\u5e8f\u662f\u5982\u4f55\u88ab\u6784\u5efa\u8d77\u6765\u7684\uff08 https://golang.org/doc/articles/wiki/ \uff09\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u4ee5\u81ea\u9876\u5411\u4e0b\u7684\u89c6\u89d2\uff0c\u4ece\u6574\u4f53\u4e0a\u7ed9\u51fa\u7a0b\u5e8f\u7684\u8865\u5145\u8bf4\u660e\u3002\u7a0b\u5e8f\u662f\u7f51\u9875\u670d\u52a1\u5668\uff0c\u5b83\u5fc5\u987b\u4ece\u547d\u4ee4\u884c\u542f\u52a8\uff0c\u76d1\u542c\u67d0\u4e2a\u7aef\u53e3\uff0c\u4f8b\u5982 8080\u3002\u6d4f\u89c8\u5668\u53ef\u4ee5\u901a\u8fc7\u8bf7\u6c42 URL \u9605\u8bfb wiki \u9875\u9762\u7684\u5185\u5bb9\uff0c\u4f8b\u5982\uff1a http://localhost:8080/view/page1 \u3002 \u63a5\u7740\uff0c\u9875\u9762\u7684\u6587\u672c\u5185\u5bb9\u4ece\u4e00\u4e2a\u6587\u4ef6\u4e2d\u8bfb\u53d6\uff0c\u5e76\u663e\u793a\u5728\u7f51\u9875\u4e2d\u3002\u5b83\u5305\u542b\u4e00\u4e2a\u8d85\u94fe\u63a5\uff0c\u6307\u5411\u7f16\u8f91\u9875\u9762\uff08 http://localhost:8080/edit/page1 \uff09\u3002\u7f16\u8f91\u9875\u9762\u5c06\u5185\u5bb9\u663e\u793a\u5728\u4e00\u4e2a\u6587\u672c\u57df\u4e2d\uff0c\u7528\u6237\u53ef\u4ee5\u66f4\u6539\u6587\u672c\uff0c\u70b9\u51fb\u201c\u4fdd\u5b58\u201d\u6309\u94ae\u4fdd\u5b58\u5230\u5bf9\u5e94\u7684\u6587\u4ef6\u4e2d\u3002\u7136\u540e\u56de\u5230\u9605\u8bfb\u9875\u9762\u663e\u793a\u66f4\u6539\u540e\u7684\u5185\u5bb9\u3002\u5982\u679c\u67d0\u4e2a\u88ab\u8bf7\u6c42\u9605\u8bfb\u7684\u9875\u9762\u4e0d\u5b58\u5728\uff08\u4f8b\u5982\uff1a http://localhost:8080/edit/page999 \uff09\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u4f5c\u51fa\u8bc6\u522b\uff0c\u7acb\u5373\u91cd\u5b9a\u5411\u5230\u7f16\u8f91\u9875\u9762\uff0c\u5982\u6b64\u65b0\u7684 wiki \u9875\u9762\u5c31\u53ef\u4ee5\u88ab\u521b\u5efa\u5e76\u4fdd\u5b58\u3002 wiki \u9875\u9762\u9700\u8981\u4e00\u4e2a\u6807\u9898\u548c\u6587\u672c\u5185\u5bb9\uff0c\u5b83\u5728\u7a0b\u5e8f\u4e2d\u88ab\u5efa\u6a21\u4e3a\u5982\u4e0b\u7ed3\u6784\u4f53\uff0cBody \u5b57\u6bb5\u5b58\u653e\u5185\u5bb9\uff0c\u7531\u5b57\u8282\u5207\u7247\u7ec4\u6210\u3002 type Page struct { Title string Body [] byte } \u4e3a\u4e86\u5728\u53ef\u6267\u884c\u7a0b\u5e8f\u4e4b\u5916\u7ef4\u62a4 wiki \u9875\u9762\u5185\u5bb9\uff0c\u6211\u4eec\u7b80\u5355\u5730\u4f7f\u7528\u4e86\u6587\u672c\u6587\u4ef6\u4f5c\u4e3a\u6301\u4e45\u5316\u5b58\u50a8\u3002\u7a0b\u5e8f\u3001\u5fc5\u8981\u7684\u6a21\u677f\u548c\u6587\u672c\u6587\u4ef6\u53ef\u4ee5\u5728 wiki \u4e2d\u627e\u5230\u3002 \u793a\u4f8b 15.12 wiki.go package main import ( \"net/http\" \"io/ioutil\" \"log\" \"regexp\" \"text/template\" ) const lenPath = len ( \"/view/\" ) var titleValidator = regexp . MustCompile ( \"^[a-zA-Z0-9]+$\" ) var templates = make ( map [ string ] * template . Template ) var err error type Page struct { Title string Body [] byte } func init () { for _ , tmpl := range [] string { \"edit\" , \"view\" } { templates [ tmpl ] = template . Must ( template . ParseFiles ( tmpl + \".html\" )) } } func main () { http . HandleFunc ( \"/view/\" , makeHandler ( viewHandler )) http . HandleFunc ( \"/edit/\" , makeHandler ( editHandler )) http . HandleFunc ( \"/save/\" , makeHandler ( saveHandler )) err := http . ListenAndServe ( \"localhost:8080\" , nil ) if err != nil { log . Fatal ( \"ListenAndServe: \" , err . Error ()) } } func makeHandler ( fn func ( http . ResponseWriter , * http . Request , string )) http . HandlerFunc { return func ( w http . ResponseWriter , r * http . Request ) { title := r . URL . Path [ lenPath :] if ! titleValidator . MatchString ( title ) { http . NotFound ( w , r ) return } fn ( w , r , title ) } } func viewHandler ( w http . ResponseWriter , r * http . Request , title string ) { p , err := load ( title ) if err != nil { // page not found http . Redirect ( w , r , \"/edit/\" + title , http . StatusFound ) return } renderTemplate ( w , \"view\" , p ) } func editHandler ( w http . ResponseWriter , r * http . Request , title string ) { p , err := load ( title ) if err != nil { p = & Page { Title : title } } renderTemplate ( w , \"edit\" , p ) } func saveHandler ( w http . ResponseWriter , r * http . Request , title string ) { body := r . FormValue ( \"body\" ) p := & Page { Title : title , Body : [] byte ( body )} err := p . save () if err != nil { http . Error ( w , err . Error (), http . StatusInternalServerError ) return } http . Redirect ( w , r , \"/view/\" + title , http . StatusFound ) } func renderTemplate ( w http . ResponseWriter , tmpl string , p * Page ) { err := templates [ tmpl ]. Execute ( w , p ) if err != nil { http . Error ( w , err . Error (), http . StatusInternalServerError ) } } func ( p * Page ) save () error { filename := p . Title + \".txt\" // file created with read-write permissions for the current user only return ioutil . WriteFile ( filename , p . Body , 0600 ) } func load ( title string ) ( * Page , error ) { filename := title + \".txt\" body , err := ioutil . ReadFile ( filename ) if err != nil { return nil , err } return & Page { Title : title , Body : body }, nil } \u8ba9\u6211\u4eec\u6765\u901a\u8bfb\u4ee3\u7801\uff1a \u9996\u5148\u5bfc\u5165\u5fc5\u8981\u7684\u5305\u3002\u7531\u4e8e\u6211\u4eec\u5728\u6784\u5efa\u7f51\u9875\u670d\u52a1\u5668\uff0c http \u5f53\u7136\u662f\u5fc5\u987b\u7684\u3002\u4e0d\u8fc7\u8fd8\u5bfc\u5165\u4e86 io/ioutil \u6765\u65b9\u4fbf\u5730\u8bfb\u5199\u6587\u4ef6\uff0c regexp \u7528\u4e8e\u9a8c\u8bc1\u8f93\u5165\u6807\u9898\uff0c\u4ee5\u53ca template \u6765\u52a8\u6001\u521b\u5efa html \u6587\u6863\u3002 \u4e3a\u907f\u514d\u9ed1\u5ba2\u6784\u9020\u7279\u6b8a\u8f93\u5165\u653b\u51fb\u670d\u52a1\u5668\uff0c\u6211\u4eec\u7528\u5982\u4e0b\u6b63\u5219\u8868\u8fbe\u5f0f\u68c0\u67e5\u7528\u6237\u5728\u6d4f\u89c8\u5668\u4e0a\u8f93\u5165\u7684 URL\uff08\u540c\u65f6\u4e5f\u662f wiki \u9875\u9762\u6807\u9898\uff09\uff1a var titleValidator = regexp . MustCompile ( \"^[a-zA-Z0-9]+$\" ) makeHandler \u4f1a\u7528\u5b83\u5bf9\u8bf7\u6c42\u7ba1\u63a7\u3002 \u5fc5\u987b\u6709\u4e00\u79cd\u673a\u5236\u628a Page \u7ed3\u6784\u4f53\u6570\u636e\u63d2\u5165\u5230\u7f51\u9875\u7684\u6807\u9898\u548c\u5185\u5bb9\u4e2d\uff0c\u53ef\u4ee5\u5229\u7528 template \u5305\u901a\u8fc7\u5982\u4e0b\u6b65\u9aa4\u5b8c\u6210\uff1a \u5148\u5728\u6587\u672c\u7f16\u8f91\u5668\u4e2d\u521b\u5efa html \u6a21\u677f\u6587\u4ef6\uff0c\u4f8b\u5982 view.html\uff1a < h1 > {{.Title |html}} </ h1 > < p > [ < a href = \"/edit/{{.Title |html}}\" > edit </ a > ] </ p > < div > {{printf \"%s\" .Body |html}} </ div > \u628a\u8981\u63d2\u5165\u7684\u6570\u636e\u7ed3\u6784\u5b57\u6bb5\u653e\u5728 {{ \u548c }} \u4e4b\u95f4\uff0c\u8fd9\u91cc\u662f\u628a Page \u7ed3\u6784\u4f53\u6570\u636e {{.Title |html}} \u548c {{printf \"%s\" .Body |html}} \u63d2\u5165\u9875\u9762\uff08\u5f53\u7136\u53ef\u4ee5\u662f\u975e\u5e38\u590d\u6742\u7684 html\uff0c\u4f46\u8fd9\u91cc\u5c3d\u53ef\u80fd\u5730\u7b80\u5316\u4e86\uff0c\u4ee5\u7a81\u51fa\u6a21\u677f\u7684\u539f\u7406\u3002\uff09\uff08 {{.Title |html}} \u548c {{printf \"%s\" .Body |html}} \u8bed\u6cd5\u8bf4\u660e\u8be6\u89c1\u540e\u7eed\u7ae0\u8282\uff09\u3002 template.Must(template.ParseFiles(tmpl + \".html\")) \u628a\u6a21\u677f\u6587\u4ef6\u8f6c\u6362\u4e3a *template.Template \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u4e3a\u4e86\u9ad8\u6548\uff0c\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u4ec5\u505a\u4e00\u6b21\u89e3\u6790\uff0c\u5728 init() \u51fd\u6570\u4e2d\u5904\u7406\u53ef\u4ee5\u65b9\u4fbf\u5730\u8fbe\u5230\u76ee\u7684\u3002\u6240\u6709\u6a21\u677f\u5bf9\u8c61\u90fd\u88ab\u4fdd\u6301\u5728\u5185\u5b58\u4e2d\uff0c\u5b58\u653e\u5728\u4ee5 html \u6587\u4ef6\u540d\u4f5c\u4e3a\u7d22\u5f15\u7684 map \u4e2d\uff1a templates = make ( map [ string ] * template . Template ) \u8fd9\u79cd\u6280\u672f\u88ab\u79f0\u4e3a*\u6a21\u677f\u7f13\u5b58*\uff0c\u662f\u63a8\u8350\u7684\u6700\u4f73\u5b9e\u8df5\u3002 \u4e3a\u4e86\u771f\u6b63\u4ece\u6a21\u677f\u548c\u7ed3\u6784\u4f53\u6784\u5efa\u51fa\u9875\u9762\uff0c\u5fc5\u987b\u4f7f\u7528\uff1a templates [ tmpl ]. Execute ( w , p ) \u5b83\u57fa\u4e8e\u6a21\u677f\u6267\u884c\uff0c\u7528 Page \u7ed3\u6784\u4f53\u5bf9\u8c61 p \u4f5c\u4e3a\u53c2\u6570\u5bf9\u6a21\u677f\u8fdb\u884c\u66ff\u6362\uff0c\u5e76\u5199\u5165 ResponseWriter \u5bf9\u8c61 w \u3002\u5fc5\u987b\u68c0\u67e5\u8be5\u65b9\u6cd5\u7684 error \u8fd4\u56de\u503c\uff0c\u4e07\u4e00\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u9519\u8bef\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u7528 http.Error() \u6765\u660e\u793a\u3002\u5728\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u8fd9\u6bb5\u4ee3\u7801\u4f1a\u88ab\u591a\u6b21\u8c03\u7528\uff0c\u6240\u4ee5\u628a\u5b83\u63d0\u53d6\u4e3a\u5355\u72ec\u7684\u51fd\u6570 renderTemplate() \u3002 \u5728 main() \u4e2d\u7f51\u9875\u670d\u52a1\u5668\u7528 ListenAndServe() \u542f\u52a8\u5e76\u76d1\u542c 8080 \u7aef\u53e3\u3002\u4f46\u6b63\u5982 15.2\u8282 \u90a3\u6837\uff0c\u9700\u8981\u5148\u4e3a\u7d27\u63a5\u5728 URL localhost:8080/ \u4e4b\u540e\uff0c \u4ee5 view , edit \u6216 save \u5f00\u5934\u7684 url \u8def\u5f84\u5b9a\u4e49\u4e00\u4e9b\u5904\u7406\u51fd\u6570\u3002\u5728\u5927\u591a\u6570\u7f51\u9875\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u8fd9\u5f62\u6210\u4e86\u4e00\u7cfb\u5217 URL \u8def\u5f84\u5230\u5904\u7406\u51fd\u6570\u7684\u6620\u5c04\uff0c\u7c7b\u4f3c\u4e8e Ruby \u548c Rails\uff0cDjango \u6216 ASP.NET MVC \u8fd9\u6837\u7684 MVC \u6846\u67b6\u4e2d\u7684\u8def\u7531\u8868\u3002\u8bf7\u6c42\u7684 URL \u4e0e\u8fd9\u4e9b\u8def\u5f84\u5c1d\u8bd5\u5339\u914d\uff0c\u8f83\u957f\u7684\u8def\u5f84\u88ab\u4f18\u5148\u5339\u914d\u3002\u5982\u4e0d\u4e0e\u4efb\u4f55\u8def\u5f84\u5339\u914d\uff0c\u5219\u8c03\u7528 / \u7684\u5904\u7406\u7a0b\u5e8f\u3002 \u5728\u6b64\u5b9a\u4e49\u4e86 3 \u4e2a\u5904\u7406\u51fd\u6570\uff0c\u7531\u4e8e\u5305\u542b\u91cd\u590d\u7684\u542f\u52a8\u4ee3\u7801\uff0c\u6211\u4eec\u5c06\u5176\u63d0\u53d6\u5230\u5355\u72ec\u7684 makeHandler() \u51fd\u6570\u4e2d\u3002\u8fd9\u662f\u4e00\u4e2a\u503c\u5f97\u7814\u7a76\u7684\u7279\u6b8a\u9ad8\u9636\u51fd\u6570\uff1a\u5176\u53c2\u6570\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u95ed\u5305\u51fd\u6570\uff1a func makeHandler ( fn func ( http . ResponseWriter , * http . Request , string )) http . HandlerFunc { return func ( w http . ResponseWriter , r * http . Request ) { title := r . URL . Path [ lenPath :] if ! titleValidator . MatchString ( title ) { http . NotFound ( w , r ) return } fn ( w , r , title ) } } - \u95ed\u5305\u5c01\u95ed\u4e86\u51fd\u6570\u53d8\u91cf fn \u6765\u6784\u9020\u5176\u8fd4\u56de\u503c\u3002\u4f46\u5728\u6b64\u4e4b\u524d\uff0c\u5b83\u5148\u7528 titleValidator.MatchString(title) \u9a8c\u8bc1\u8f93\u5165\u6807\u9898 title \u7684\u6709\u6548\u6027\u3002\u5982\u679c\u6807\u9898\u5305\u542b\u4e86\u5b57\u6bcd\u548c\u6570\u5b57\u4ee5\u5916\u7684\u5b57\u7b26\uff0c\u5c31\u89e6\u53d1 NotFound \u9519\u8bef\uff08\u4f8b\u5982\uff1a\u5c1d\u8bd5 localhost:8080/view/page++ \uff09\u3002 viewHandler \uff0c editHandler \u548c saveHandler \u90fd\u662f\u4f20\u5165 main() \u4e2d makeHandler \u7684\u53c2\u6570\uff0c\u7c7b\u578b\u5fc5\u987b\u90fd\u4e0e fn \u76f8\u540c\u3002 - viewHandler \u5c1d\u8bd5\u6309\u6807\u9898\u8bfb\u53d6\u6587\u672c\u6587\u4ef6\uff0c\u8fd9\u662f\u901a\u8fc7\u8c03\u7528 load() \u51fd\u6570\u5b8c\u6210\u7684\uff0c\u5b83\u4f1a\u6784\u5efa\u6587\u4ef6\u540d\u5e76\u7528 ioutil.ReadFile \u8bfb\u53d6\u5185\u5bb9\u3002\u5982\u679c\u6587\u4ef6\u5b58\u5728\uff0c\u5176\u5185\u5bb9\u4f1a\u5b58\u5165\u5b57\u7b26\u4e32\u4e2d\u3002\u4e00\u4e2a\u6307\u5411 Page \u7ed3\u6784\u4f53\u7684\u6307\u9488\u6309\u5b57\u9762\u91cf\u88ab\u521b\u5efa\uff1a &Page{Title: title, Body: body} \u3002 \u53e6\u5916\uff0c\u8be5\u503c\u548c\u8868\u793a\u6ca1\u6709 error \u7684 nil \u503c\u4e00\u8d77\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u3002\u7136\u540e\u5728 renderTemplate \u4e2d\u5c06\u8be5\u7ed3\u6784\u4f53\u4e0e\u6a21\u677f\u5bf9\u8c61\u6574\u5408\u3002 \u4e07\u4e00\u53d1\u751f\u9519\u8bef\uff0c\u4e5f\u5c31\u662f\u8bf4 wiki \u9875\u9762\u5728\u78c1\u76d8\u4e0a\u4e0d\u5b58\u5728\uff0c\u9519\u8bef\u4f1a\u88ab\u8fd4\u56de\u7ed9 viewHandler \uff0c\u6b64\u65f6\u4f1a\u81ea\u52a8\u91cd\u5b9a\u5411\uff0c\u8df3\u8f6c\u8bf7\u6c42\u5bf9\u5e94\u6807\u9898\u7684\u7f16\u8f91\u9875\u9762\u3002 editHandler \u57fa\u672c\u4e0a\u4e5f\u5dee\u4e0d\u591a\uff1a\u5c1d\u8bd5\u8bfb\u53d6\u6587\u4ef6\uff0c\u5982\u679c\u5b58\u5728\u5219\u7528\u201c\u7f16\u8f91\u201d\u6a21\u677f\u6765\u6e32\u67d3\uff1b\u4e07\u4e00\u53d1\u751f\u9519\u8bef\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5305\u542b\u6307\u5b9a\u6807\u9898\u7684 Page \u5bf9\u8c61\u5e76\u6e32\u67d3\u3002 \u5f53\u5728\u7f16\u8f91\u9875\u9762\u70b9\u51fb\u201c\u4fdd\u5b58\u201d\u6309\u94ae\u65f6\uff0c\u89e6\u53d1\u4fdd\u5b58\u9875\u9762\u5185\u5bb9\u7684\u52a8\u4f5c\u3002\u6309\u94ae\u987b\u653e\u5728 html \u8868\u5355\u4e2d\uff0c\u5b83\u5f00\u5934\u662f\u8fd9\u6837\u7684\uff1a < form action = \"/save/{{.Title |html}}\" method = \"POST\" > \u8fd9\u610f\u5473\u7740\uff0c\u5f53\u63d0\u4ea4\u8868\u5355\u5230\u7c7b\u4f3c http://localhost/save/{Title} \u8fd9\u6837\u7684 URL \u683c\u5f0f\u65f6\uff0c\u4e00\u4e2a POST \u8bf7\u6c42\u88ab\u53d1\u5f80\u7f51\u9875\u670d\u52a1\u5668\u3002\u9488\u5bf9\u8fd9\u6837\u7684 URL \u6211\u4eec\u5df2\u7ecf\u5b9a\u4e49\u597d\u4e86\u5904\u7406\u51fd\u6570\uff1a saveHandler() \u3002\u5728 request \u5bf9\u8c61\u4e0a\u8c03\u7528 FormValue() \u65b9\u6cd5\uff0c\u53ef\u4ee5\u63d0\u53d6\u540d\u79f0\u4e3a body \u7684\u6587\u672c\u57df\u5185\u5bb9\uff0c\u7528\u8fd9\u4e9b\u4fe1\u606f\u6784\u9020\u4e00\u4e2a Page \u5bf9\u8c61\uff0c\u7136\u540e\u5c1d\u8bd5\u901a\u8fc7\u8c03\u7528 save() \u65b9\u6cd5\u4fdd\u5b58\u5176\u5185\u5bb9\u3002\u4e07\u4e00\u8fd0\u884c\u5931\u8d25\uff0c\u6267\u884c http.Error \u4ee5\u5c06\u9519\u8bef\u663e\u793a\u5230\u6d4f\u89c8\u5668\u3002\u5982\u679c\u4fdd\u5b58\u6210\u529f\uff0c\u91cd\u5b9a\u5411\u6d4f\u89c8\u5668\u5230\u8be5\u9875\u7684\u9605\u8bfb\u9875\u9762\u3002 save() \u51fd\u6570\u975e\u5e38\u7b80\u5355\uff0c\u5229\u7528 ioutil.WriteFile() \uff0c\u5199\u5165 Page \u7ed3\u6784\u4f53\u7684 Body \u5b57\u6bb5\u5230\u6587\u4ef6 filename \u4e2d\uff0c\u4e4b\u540e\u4f1a\u88ab\u7528\u4e8e\u6a21\u677f\u66ff\u6362\u5360\u4f4d\u7b26 {{printf \"%s\" .Body |html}} \u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u786e\u4fdd\u7f51\u9875\u5e94\u7528\u5065\u58ee \u4e0b\u4e00\u8282\uff1a \u63a2\u7d22 template \u5305","title":"15.6 \u7528\u6a21\u677f\u7f16\u5199\u7f51\u9875\u5e94\u7528"},{"location":"15.6/#156","text":"\u4ee5\u4e0b\u7a0b\u5e8f\u662f\u7528 100 \u884c\u4ee5\u5185\u4ee3\u7801\u5b9e\u73b0\u53ef\u884c\u7684 wiki \u7f51\u9875\u5e94\u7528\uff0c\u5b83\u7531\u4e00\u7ec4\u9875\u9762\u7ec4\u6210\uff0c\u7528\u4e8e\u9605\u8bfb\u3001\u7f16\u8f91\u548c\u4fdd\u5b58\u3002\u5b83\u662f\u6765\u81ea Go \u7f51\u7ad9 codelab \u7684 wiki \u5236\u4f5c\u6559\u7a0b\uff0c\u6211\u6240\u77e5\u7684\u6700\u597d\u7684 Go \u6559\u7a0b\u4e4b\u4e00\uff0c\u975e\u5e38\u503c\u5f97\u8fdb\u884c\u5b8c\u6574\u7684\u5b9e\u9a8c\uff0c\u4ee5\u89c1\u8bc1\u5e76\u7406\u89e3\u7a0b\u5e8f\u662f\u5982\u4f55\u88ab\u6784\u5efa\u8d77\u6765\u7684\uff08 https://golang.org/doc/articles/wiki/ \uff09\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u4ee5\u81ea\u9876\u5411\u4e0b\u7684\u89c6\u89d2\uff0c\u4ece\u6574\u4f53\u4e0a\u7ed9\u51fa\u7a0b\u5e8f\u7684\u8865\u5145\u8bf4\u660e\u3002\u7a0b\u5e8f\u662f\u7f51\u9875\u670d\u52a1\u5668\uff0c\u5b83\u5fc5\u987b\u4ece\u547d\u4ee4\u884c\u542f\u52a8\uff0c\u76d1\u542c\u67d0\u4e2a\u7aef\u53e3\uff0c\u4f8b\u5982 8080\u3002\u6d4f\u89c8\u5668\u53ef\u4ee5\u901a\u8fc7\u8bf7\u6c42 URL \u9605\u8bfb wiki \u9875\u9762\u7684\u5185\u5bb9\uff0c\u4f8b\u5982\uff1a http://localhost:8080/view/page1 \u3002 \u63a5\u7740\uff0c\u9875\u9762\u7684\u6587\u672c\u5185\u5bb9\u4ece\u4e00\u4e2a\u6587\u4ef6\u4e2d\u8bfb\u53d6\uff0c\u5e76\u663e\u793a\u5728\u7f51\u9875\u4e2d\u3002\u5b83\u5305\u542b\u4e00\u4e2a\u8d85\u94fe\u63a5\uff0c\u6307\u5411\u7f16\u8f91\u9875\u9762\uff08 http://localhost:8080/edit/page1 \uff09\u3002\u7f16\u8f91\u9875\u9762\u5c06\u5185\u5bb9\u663e\u793a\u5728\u4e00\u4e2a\u6587\u672c\u57df\u4e2d\uff0c\u7528\u6237\u53ef\u4ee5\u66f4\u6539\u6587\u672c\uff0c\u70b9\u51fb\u201c\u4fdd\u5b58\u201d\u6309\u94ae\u4fdd\u5b58\u5230\u5bf9\u5e94\u7684\u6587\u4ef6\u4e2d\u3002\u7136\u540e\u56de\u5230\u9605\u8bfb\u9875\u9762\u663e\u793a\u66f4\u6539\u540e\u7684\u5185\u5bb9\u3002\u5982\u679c\u67d0\u4e2a\u88ab\u8bf7\u6c42\u9605\u8bfb\u7684\u9875\u9762\u4e0d\u5b58\u5728\uff08\u4f8b\u5982\uff1a http://localhost:8080/edit/page999 \uff09\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u4f5c\u51fa\u8bc6\u522b\uff0c\u7acb\u5373\u91cd\u5b9a\u5411\u5230\u7f16\u8f91\u9875\u9762\uff0c\u5982\u6b64\u65b0\u7684 wiki \u9875\u9762\u5c31\u53ef\u4ee5\u88ab\u521b\u5efa\u5e76\u4fdd\u5b58\u3002 wiki \u9875\u9762\u9700\u8981\u4e00\u4e2a\u6807\u9898\u548c\u6587\u672c\u5185\u5bb9\uff0c\u5b83\u5728\u7a0b\u5e8f\u4e2d\u88ab\u5efa\u6a21\u4e3a\u5982\u4e0b\u7ed3\u6784\u4f53\uff0cBody \u5b57\u6bb5\u5b58\u653e\u5185\u5bb9\uff0c\u7531\u5b57\u8282\u5207\u7247\u7ec4\u6210\u3002 type Page struct { Title string Body [] byte } \u4e3a\u4e86\u5728\u53ef\u6267\u884c\u7a0b\u5e8f\u4e4b\u5916\u7ef4\u62a4 wiki \u9875\u9762\u5185\u5bb9\uff0c\u6211\u4eec\u7b80\u5355\u5730\u4f7f\u7528\u4e86\u6587\u672c\u6587\u4ef6\u4f5c\u4e3a\u6301\u4e45\u5316\u5b58\u50a8\u3002\u7a0b\u5e8f\u3001\u5fc5\u8981\u7684\u6a21\u677f\u548c\u6587\u672c\u6587\u4ef6\u53ef\u4ee5\u5728 wiki \u4e2d\u627e\u5230\u3002 \u793a\u4f8b 15.12 wiki.go package main import ( \"net/http\" \"io/ioutil\" \"log\" \"regexp\" \"text/template\" ) const lenPath = len ( \"/view/\" ) var titleValidator = regexp . MustCompile ( \"^[a-zA-Z0-9]+$\" ) var templates = make ( map [ string ] * template . Template ) var err error type Page struct { Title string Body [] byte } func init () { for _ , tmpl := range [] string { \"edit\" , \"view\" } { templates [ tmpl ] = template . Must ( template . ParseFiles ( tmpl + \".html\" )) } } func main () { http . HandleFunc ( \"/view/\" , makeHandler ( viewHandler )) http . HandleFunc ( \"/edit/\" , makeHandler ( editHandler )) http . HandleFunc ( \"/save/\" , makeHandler ( saveHandler )) err := http . ListenAndServe ( \"localhost:8080\" , nil ) if err != nil { log . Fatal ( \"ListenAndServe: \" , err . Error ()) } } func makeHandler ( fn func ( http . ResponseWriter , * http . Request , string )) http . HandlerFunc { return func ( w http . ResponseWriter , r * http . Request ) { title := r . URL . Path [ lenPath :] if ! titleValidator . MatchString ( title ) { http . NotFound ( w , r ) return } fn ( w , r , title ) } } func viewHandler ( w http . ResponseWriter , r * http . Request , title string ) { p , err := load ( title ) if err != nil { // page not found http . Redirect ( w , r , \"/edit/\" + title , http . StatusFound ) return } renderTemplate ( w , \"view\" , p ) } func editHandler ( w http . ResponseWriter , r * http . Request , title string ) { p , err := load ( title ) if err != nil { p = & Page { Title : title } } renderTemplate ( w , \"edit\" , p ) } func saveHandler ( w http . ResponseWriter , r * http . Request , title string ) { body := r . FormValue ( \"body\" ) p := & Page { Title : title , Body : [] byte ( body )} err := p . save () if err != nil { http . Error ( w , err . Error (), http . StatusInternalServerError ) return } http . Redirect ( w , r , \"/view/\" + title , http . StatusFound ) } func renderTemplate ( w http . ResponseWriter , tmpl string , p * Page ) { err := templates [ tmpl ]. Execute ( w , p ) if err != nil { http . Error ( w , err . Error (), http . StatusInternalServerError ) } } func ( p * Page ) save () error { filename := p . Title + \".txt\" // file created with read-write permissions for the current user only return ioutil . WriteFile ( filename , p . Body , 0600 ) } func load ( title string ) ( * Page , error ) { filename := title + \".txt\" body , err := ioutil . ReadFile ( filename ) if err != nil { return nil , err } return & Page { Title : title , Body : body }, nil } \u8ba9\u6211\u4eec\u6765\u901a\u8bfb\u4ee3\u7801\uff1a \u9996\u5148\u5bfc\u5165\u5fc5\u8981\u7684\u5305\u3002\u7531\u4e8e\u6211\u4eec\u5728\u6784\u5efa\u7f51\u9875\u670d\u52a1\u5668\uff0c http \u5f53\u7136\u662f\u5fc5\u987b\u7684\u3002\u4e0d\u8fc7\u8fd8\u5bfc\u5165\u4e86 io/ioutil \u6765\u65b9\u4fbf\u5730\u8bfb\u5199\u6587\u4ef6\uff0c regexp \u7528\u4e8e\u9a8c\u8bc1\u8f93\u5165\u6807\u9898\uff0c\u4ee5\u53ca template \u6765\u52a8\u6001\u521b\u5efa html \u6587\u6863\u3002 \u4e3a\u907f\u514d\u9ed1\u5ba2\u6784\u9020\u7279\u6b8a\u8f93\u5165\u653b\u51fb\u670d\u52a1\u5668\uff0c\u6211\u4eec\u7528\u5982\u4e0b\u6b63\u5219\u8868\u8fbe\u5f0f\u68c0\u67e5\u7528\u6237\u5728\u6d4f\u89c8\u5668\u4e0a\u8f93\u5165\u7684 URL\uff08\u540c\u65f6\u4e5f\u662f wiki \u9875\u9762\u6807\u9898\uff09\uff1a var titleValidator = regexp . MustCompile ( \"^[a-zA-Z0-9]+$\" ) makeHandler \u4f1a\u7528\u5b83\u5bf9\u8bf7\u6c42\u7ba1\u63a7\u3002 \u5fc5\u987b\u6709\u4e00\u79cd\u673a\u5236\u628a Page \u7ed3\u6784\u4f53\u6570\u636e\u63d2\u5165\u5230\u7f51\u9875\u7684\u6807\u9898\u548c\u5185\u5bb9\u4e2d\uff0c\u53ef\u4ee5\u5229\u7528 template \u5305\u901a\u8fc7\u5982\u4e0b\u6b65\u9aa4\u5b8c\u6210\uff1a \u5148\u5728\u6587\u672c\u7f16\u8f91\u5668\u4e2d\u521b\u5efa html \u6a21\u677f\u6587\u4ef6\uff0c\u4f8b\u5982 view.html\uff1a < h1 > {{.Title |html}} </ h1 > < p > [ < a href = \"/edit/{{.Title |html}}\" > edit </ a > ] </ p > < div > {{printf \"%s\" .Body |html}} </ div > \u628a\u8981\u63d2\u5165\u7684\u6570\u636e\u7ed3\u6784\u5b57\u6bb5\u653e\u5728 {{ \u548c }} \u4e4b\u95f4\uff0c\u8fd9\u91cc\u662f\u628a Page \u7ed3\u6784\u4f53\u6570\u636e {{.Title |html}} \u548c {{printf \"%s\" .Body |html}} \u63d2\u5165\u9875\u9762\uff08\u5f53\u7136\u53ef\u4ee5\u662f\u975e\u5e38\u590d\u6742\u7684 html\uff0c\u4f46\u8fd9\u91cc\u5c3d\u53ef\u80fd\u5730\u7b80\u5316\u4e86\uff0c\u4ee5\u7a81\u51fa\u6a21\u677f\u7684\u539f\u7406\u3002\uff09\uff08 {{.Title |html}} \u548c {{printf \"%s\" .Body |html}} \u8bed\u6cd5\u8bf4\u660e\u8be6\u89c1\u540e\u7eed\u7ae0\u8282\uff09\u3002 template.Must(template.ParseFiles(tmpl + \".html\")) \u628a\u6a21\u677f\u6587\u4ef6\u8f6c\u6362\u4e3a *template.Template \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u4e3a\u4e86\u9ad8\u6548\uff0c\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u4ec5\u505a\u4e00\u6b21\u89e3\u6790\uff0c\u5728 init() \u51fd\u6570\u4e2d\u5904\u7406\u53ef\u4ee5\u65b9\u4fbf\u5730\u8fbe\u5230\u76ee\u7684\u3002\u6240\u6709\u6a21\u677f\u5bf9\u8c61\u90fd\u88ab\u4fdd\u6301\u5728\u5185\u5b58\u4e2d\uff0c\u5b58\u653e\u5728\u4ee5 html \u6587\u4ef6\u540d\u4f5c\u4e3a\u7d22\u5f15\u7684 map \u4e2d\uff1a templates = make ( map [ string ] * template . Template ) \u8fd9\u79cd\u6280\u672f\u88ab\u79f0\u4e3a*\u6a21\u677f\u7f13\u5b58*\uff0c\u662f\u63a8\u8350\u7684\u6700\u4f73\u5b9e\u8df5\u3002 \u4e3a\u4e86\u771f\u6b63\u4ece\u6a21\u677f\u548c\u7ed3\u6784\u4f53\u6784\u5efa\u51fa\u9875\u9762\uff0c\u5fc5\u987b\u4f7f\u7528\uff1a templates [ tmpl ]. Execute ( w , p ) \u5b83\u57fa\u4e8e\u6a21\u677f\u6267\u884c\uff0c\u7528 Page \u7ed3\u6784\u4f53\u5bf9\u8c61 p \u4f5c\u4e3a\u53c2\u6570\u5bf9\u6a21\u677f\u8fdb\u884c\u66ff\u6362\uff0c\u5e76\u5199\u5165 ResponseWriter \u5bf9\u8c61 w \u3002\u5fc5\u987b\u68c0\u67e5\u8be5\u65b9\u6cd5\u7684 error \u8fd4\u56de\u503c\uff0c\u4e07\u4e00\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u9519\u8bef\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u7528 http.Error() \u6765\u660e\u793a\u3002\u5728\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u8fd9\u6bb5\u4ee3\u7801\u4f1a\u88ab\u591a\u6b21\u8c03\u7528\uff0c\u6240\u4ee5\u628a\u5b83\u63d0\u53d6\u4e3a\u5355\u72ec\u7684\u51fd\u6570 renderTemplate() \u3002 \u5728 main() \u4e2d\u7f51\u9875\u670d\u52a1\u5668\u7528 ListenAndServe() \u542f\u52a8\u5e76\u76d1\u542c 8080 \u7aef\u53e3\u3002\u4f46\u6b63\u5982 15.2\u8282 \u90a3\u6837\uff0c\u9700\u8981\u5148\u4e3a\u7d27\u63a5\u5728 URL localhost:8080/ \u4e4b\u540e\uff0c \u4ee5 view , edit \u6216 save \u5f00\u5934\u7684 url \u8def\u5f84\u5b9a\u4e49\u4e00\u4e9b\u5904\u7406\u51fd\u6570\u3002\u5728\u5927\u591a\u6570\u7f51\u9875\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u8fd9\u5f62\u6210\u4e86\u4e00\u7cfb\u5217 URL \u8def\u5f84\u5230\u5904\u7406\u51fd\u6570\u7684\u6620\u5c04\uff0c\u7c7b\u4f3c\u4e8e Ruby \u548c Rails\uff0cDjango \u6216 ASP.NET MVC \u8fd9\u6837\u7684 MVC \u6846\u67b6\u4e2d\u7684\u8def\u7531\u8868\u3002\u8bf7\u6c42\u7684 URL \u4e0e\u8fd9\u4e9b\u8def\u5f84\u5c1d\u8bd5\u5339\u914d\uff0c\u8f83\u957f\u7684\u8def\u5f84\u88ab\u4f18\u5148\u5339\u914d\u3002\u5982\u4e0d\u4e0e\u4efb\u4f55\u8def\u5f84\u5339\u914d\uff0c\u5219\u8c03\u7528 / \u7684\u5904\u7406\u7a0b\u5e8f\u3002 \u5728\u6b64\u5b9a\u4e49\u4e86 3 \u4e2a\u5904\u7406\u51fd\u6570\uff0c\u7531\u4e8e\u5305\u542b\u91cd\u590d\u7684\u542f\u52a8\u4ee3\u7801\uff0c\u6211\u4eec\u5c06\u5176\u63d0\u53d6\u5230\u5355\u72ec\u7684 makeHandler() \u51fd\u6570\u4e2d\u3002\u8fd9\u662f\u4e00\u4e2a\u503c\u5f97\u7814\u7a76\u7684\u7279\u6b8a\u9ad8\u9636\u51fd\u6570\uff1a\u5176\u53c2\u6570\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u95ed\u5305\u51fd\u6570\uff1a func makeHandler ( fn func ( http . ResponseWriter , * http . Request , string )) http . HandlerFunc { return func ( w http . ResponseWriter , r * http . Request ) { title := r . URL . Path [ lenPath :] if ! titleValidator . MatchString ( title ) { http . NotFound ( w , r ) return } fn ( w , r , title ) } } - \u95ed\u5305\u5c01\u95ed\u4e86\u51fd\u6570\u53d8\u91cf fn \u6765\u6784\u9020\u5176\u8fd4\u56de\u503c\u3002\u4f46\u5728\u6b64\u4e4b\u524d\uff0c\u5b83\u5148\u7528 titleValidator.MatchString(title) \u9a8c\u8bc1\u8f93\u5165\u6807\u9898 title \u7684\u6709\u6548\u6027\u3002\u5982\u679c\u6807\u9898\u5305\u542b\u4e86\u5b57\u6bcd\u548c\u6570\u5b57\u4ee5\u5916\u7684\u5b57\u7b26\uff0c\u5c31\u89e6\u53d1 NotFound \u9519\u8bef\uff08\u4f8b\u5982\uff1a\u5c1d\u8bd5 localhost:8080/view/page++ \uff09\u3002 viewHandler \uff0c editHandler \u548c saveHandler \u90fd\u662f\u4f20\u5165 main() \u4e2d makeHandler \u7684\u53c2\u6570\uff0c\u7c7b\u578b\u5fc5\u987b\u90fd\u4e0e fn \u76f8\u540c\u3002 - viewHandler \u5c1d\u8bd5\u6309\u6807\u9898\u8bfb\u53d6\u6587\u672c\u6587\u4ef6\uff0c\u8fd9\u662f\u901a\u8fc7\u8c03\u7528 load() \u51fd\u6570\u5b8c\u6210\u7684\uff0c\u5b83\u4f1a\u6784\u5efa\u6587\u4ef6\u540d\u5e76\u7528 ioutil.ReadFile \u8bfb\u53d6\u5185\u5bb9\u3002\u5982\u679c\u6587\u4ef6\u5b58\u5728\uff0c\u5176\u5185\u5bb9\u4f1a\u5b58\u5165\u5b57\u7b26\u4e32\u4e2d\u3002\u4e00\u4e2a\u6307\u5411 Page \u7ed3\u6784\u4f53\u7684\u6307\u9488\u6309\u5b57\u9762\u91cf\u88ab\u521b\u5efa\uff1a &Page{Title: title, Body: body} \u3002 \u53e6\u5916\uff0c\u8be5\u503c\u548c\u8868\u793a\u6ca1\u6709 error \u7684 nil \u503c\u4e00\u8d77\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u3002\u7136\u540e\u5728 renderTemplate \u4e2d\u5c06\u8be5\u7ed3\u6784\u4f53\u4e0e\u6a21\u677f\u5bf9\u8c61\u6574\u5408\u3002 \u4e07\u4e00\u53d1\u751f\u9519\u8bef\uff0c\u4e5f\u5c31\u662f\u8bf4 wiki \u9875\u9762\u5728\u78c1\u76d8\u4e0a\u4e0d\u5b58\u5728\uff0c\u9519\u8bef\u4f1a\u88ab\u8fd4\u56de\u7ed9 viewHandler \uff0c\u6b64\u65f6\u4f1a\u81ea\u52a8\u91cd\u5b9a\u5411\uff0c\u8df3\u8f6c\u8bf7\u6c42\u5bf9\u5e94\u6807\u9898\u7684\u7f16\u8f91\u9875\u9762\u3002 editHandler \u57fa\u672c\u4e0a\u4e5f\u5dee\u4e0d\u591a\uff1a\u5c1d\u8bd5\u8bfb\u53d6\u6587\u4ef6\uff0c\u5982\u679c\u5b58\u5728\u5219\u7528\u201c\u7f16\u8f91\u201d\u6a21\u677f\u6765\u6e32\u67d3\uff1b\u4e07\u4e00\u53d1\u751f\u9519\u8bef\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5305\u542b\u6307\u5b9a\u6807\u9898\u7684 Page \u5bf9\u8c61\u5e76\u6e32\u67d3\u3002 \u5f53\u5728\u7f16\u8f91\u9875\u9762\u70b9\u51fb\u201c\u4fdd\u5b58\u201d\u6309\u94ae\u65f6\uff0c\u89e6\u53d1\u4fdd\u5b58\u9875\u9762\u5185\u5bb9\u7684\u52a8\u4f5c\u3002\u6309\u94ae\u987b\u653e\u5728 html \u8868\u5355\u4e2d\uff0c\u5b83\u5f00\u5934\u662f\u8fd9\u6837\u7684\uff1a < form action = \"/save/{{.Title |html}}\" method = \"POST\" > \u8fd9\u610f\u5473\u7740\uff0c\u5f53\u63d0\u4ea4\u8868\u5355\u5230\u7c7b\u4f3c http://localhost/save/{Title} \u8fd9\u6837\u7684 URL \u683c\u5f0f\u65f6\uff0c\u4e00\u4e2a POST \u8bf7\u6c42\u88ab\u53d1\u5f80\u7f51\u9875\u670d\u52a1\u5668\u3002\u9488\u5bf9\u8fd9\u6837\u7684 URL \u6211\u4eec\u5df2\u7ecf\u5b9a\u4e49\u597d\u4e86\u5904\u7406\u51fd\u6570\uff1a saveHandler() \u3002\u5728 request \u5bf9\u8c61\u4e0a\u8c03\u7528 FormValue() \u65b9\u6cd5\uff0c\u53ef\u4ee5\u63d0\u53d6\u540d\u79f0\u4e3a body \u7684\u6587\u672c\u57df\u5185\u5bb9\uff0c\u7528\u8fd9\u4e9b\u4fe1\u606f\u6784\u9020\u4e00\u4e2a Page \u5bf9\u8c61\uff0c\u7136\u540e\u5c1d\u8bd5\u901a\u8fc7\u8c03\u7528 save() \u65b9\u6cd5\u4fdd\u5b58\u5176\u5185\u5bb9\u3002\u4e07\u4e00\u8fd0\u884c\u5931\u8d25\uff0c\u6267\u884c http.Error \u4ee5\u5c06\u9519\u8bef\u663e\u793a\u5230\u6d4f\u89c8\u5668\u3002\u5982\u679c\u4fdd\u5b58\u6210\u529f\uff0c\u91cd\u5b9a\u5411\u6d4f\u89c8\u5668\u5230\u8be5\u9875\u7684\u9605\u8bfb\u9875\u9762\u3002 save() \u51fd\u6570\u975e\u5e38\u7b80\u5355\uff0c\u5229\u7528 ioutil.WriteFile() \uff0c\u5199\u5165 Page \u7ed3\u6784\u4f53\u7684 Body \u5b57\u6bb5\u5230\u6587\u4ef6 filename \u4e2d\uff0c\u4e4b\u540e\u4f1a\u88ab\u7528\u4e8e\u6a21\u677f\u66ff\u6362\u5360\u4f4d\u7b26 {{printf \"%s\" .Body |html}} \u3002","title":"15.6 \u7528\u6a21\u677f\u7f16\u5199\u7f51\u9875\u5e94\u7528"},{"location":"15.6/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u786e\u4fdd\u7f51\u9875\u5e94\u7528\u5065\u58ee \u4e0b\u4e00\u8282\uff1a \u63a2\u7d22 template \u5305","title":"\u94fe\u63a5"},{"location":"15.7/","text":"15.7 \u63a2\u7d22 template \u5305 \u00b6 \uff08 template \u5305\u7684\u6587\u6863\u53ef\u4ee5\u5728 https://golang.org/pkg/text/template/ \u627e\u5230\u3002\uff09 \u5728\u524d\u4e00\u7ae0\u8282\uff0c\u6211\u4eec\u4f7f\u7528 template \u5bf9\u8c61\u628a\u6570\u636e\u7ed3\u6784\u6574\u5408\u5230 HTML \u6a21\u677f\u4e2d\u3002\u8fd9\u9879\u6280\u672f\u786e\u5b9e\u5bf9\u7f51\u9875\u5e94\u7528\u7a0b\u5e8f\u975e\u5e38\u6709\u7528\uff0c\u7136\u800c\u6a21\u677f\u662f\u4e00\u9879\u66f4\u4e3a\u901a\u7528\u7684\u6280\u672f\u65b9\u6848\uff1a\u6570\u636e\u9a71\u52a8\u7684\u6a21\u677f\u88ab\u521b\u5efa\u51fa\u6765\uff0c\u4ee5\u751f\u6210\u6587\u672c\u8f93\u51fa\u3002HTML \u4ec5\u662f\u5176\u4e2d\u7684\u4e00\u79cd\u7279\u5b9a\u4f7f\u7528\u6848\u4f8b\u3002 \u6a21\u677f\u901a\u8fc7\u4e0e\u6570\u636e\u7ed3\u6784\u7684\u6574\u5408\u6765\u751f\u6210\uff0c\u901a\u5e38\u4e3a\u7ed3\u6784\u4f53\u6216\u5176\u5207\u7247\u3002\u5f53\u6570\u636e\u9879\u4f20\u9012\u7ed9 tmpl.Execute() \uff0c\u5b83\u7528\u5176\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u66ff\u6362\uff0c \u52a8\u6001\u5730\u91cd\u5199\u67d0\u4e00\u5c0f\u6bb5\u6587\u672c\u3002**\u53ea\u6709\u88ab\u5bfc\u51fa\u7684\u6570\u636e\u9879**\u624d\u53ef\u4ee5\u88ab\u6574\u5408\u8fdb\u6a21\u677f\u4e2d\u3002\u53ef\u4ee5\u5728 {{ \u548c }} \u4e2d\u52a0\u5165\u6570\u636e\u6c42\u503c\u6216\u63a7\u5236\u7ed3\u6784\u3002\u6570\u636e\u9879\u53ef\u4ee5\u662f\u503c\u6216\u6307\u9488\uff0c\u63a5\u53e3\u9690\u85cf\u4e86\u4ed6\u4eec\u7684\u5dee\u5f02\u3002 15.7.1 \u5b57\u6bb5\u66ff\u6362\uff1a {{.FieldName}} \u00b6 \u8981\u5728\u6a21\u677f\u4e2d\u5305\u542b\u67d0\u4e2a\u5b57\u6bb5\u7684\u5185\u5bb9\uff0c\u4f7f\u7528\u53cc\u82b1\u62ec\u53f7\u62ec\u8d77\u4ee5\u70b9 ( . ) \u5f00\u5934\u7684\u5b57\u6bb5\u540d\u3002\u4f8b\u5982\uff0c\u5047\u8bbe Name \u662f\u67d0\u4e2a\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\uff0c\u5176\u503c\u8981\u5728\u88ab\u6a21\u677f\u6574\u5408\u65f6\u66ff\u6362\uff0c\u5219\u5728\u6a21\u677f\u4e2d\u4f7f\u7528\u6587\u672c {{.Name}} \u3002\u5f53 Name \u662f map \u7684\u952e\u65f6\u8fd9\u4e48\u505a\u4e5f\u662f\u53ef\u884c\u7684\u3002\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Template \u5bf9\u8c61\uff0c\u8c03\u7528 template.New() \uff0c\u5176\u5b57\u7b26\u4e32\u53c2\u6570\u53ef\u4ee5\u6307\u5b9a\u6a21\u677f\u7684\u540d\u79f0\u3002\u6b63\u5982 15.5 \u8282 \u51fa\u73b0\u8fc7\u7684\uff0c Parse() \u65b9\u6cd5\u901a\u8fc7\u89e3\u6790\u6a21\u677f\u5b9a\u4e49\u5b57\u7b26\u4e32\uff0c\u751f\u6210\u6a21\u677f\u7684\u5185\u90e8\u8868\u793a\u3002\u5f53\u4f7f\u7528\u5305\u542b\u6a21\u677f\u5b9a\u4e49\u5b57\u7b26\u4e32\u7684\u6587\u4ef6\u65f6\uff0c\u5c06\u6587\u4ef6\u8def\u5f84\u4f20\u9012\u7ed9 ParseFiles() \u6765\u89e3\u6790\u3002\u89e3\u6790\u8fc7\u7a0b\u5982\u4ea7\u751f\u9519\u8bef\uff0c\u8fd9\u4e24\u4e2a\u51fd\u6570\u7b2c\u4e8c\u4e2a\u8fd4\u56de\u503c error != nil \u3002\u6700\u540e\u901a\u8fc7 Execute() \u65b9\u6cd5\uff0c\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u5185\u5bb9\u4e0e\u6a21\u677f\u6574\u5408\uff0c\u5e76\u5c06\u7ed3\u679c\u5199\u5165\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e2d\uff0c\u5176\u7c7b\u578b\u4e3a io.Writer \u3002\u518d\u4e00\u6b21\u5730\uff0c\u53ef\u80fd\u4f1a\u6709 error \u8fd4\u56de\u3002\u4ee5\u4e0b\u7a0b\u5e8f\u6f14\u793a\u4e86\u8fd9\u4e9b\u6b65\u9aa4\uff0c\u8f93\u51fa\u901a\u8fc7 os.Stdout() \u88ab\u5199\u5230\u63a7\u5236\u53f0\u3002 \u793a\u4f8b 15.13 template_field.go package main import ( \"fmt\" \"os\" \"text/template\" ) type Person struct { Name string nonExportedAgeField string } func main () { t := template . New ( \"hello\" ) t , _ = t . Parse ( \"hello {{.Name}}!\" ) p := Person { Name : \"Mary\" , nonExportedAgeField : \"31\" } if err := t . Execute ( os . Stdout , p ); err != nil { fmt . Println ( \"There was an error:\" , err . Error ()) } } \u8f93\u51fa\uff1a hello Mary! \u5982\u679c\u6570\u636e\u7ed3\u6784\u4e2d\u5305\u542b\u4e00\u4e2a\u672a\u5bfc\u51fa\u7684\u5b57\u6bb5\uff0c\u5f53\u6211\u4eec\u5c1d\u8bd5\u628a\u5b83\u6574\u5408\u5230\u7c7b\u4f3c\u8fd9\u6837\u7684\u5b9a\u4e49\u5b57\u7b26\u4e32\uff1a t , _ = t . Parse ( \"your age is {{.nonExportedAgeField}}!\" ) \u4f1a\u4ea7\u751f\u9519\u8bef\uff1a There was an error: template: nonexported template hello:1: can\u2019t evaluate field nonExportedAgeField in type main.Person. \u5982\u679c\u53ea\u662f\u60f3\u7b80\u5355\u5730\u628a Execute() \u65b9\u6cd5\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7528\u4e8e\u66ff\u6362\uff0c\u4f7f\u7528 {{.}} \u3002 \u5f53\u5728\u6d4f\u89c8\u5668\u73af\u5883\u4e2d\u8fdb\u884c\u8fd9\u4e9b\u6b65\u9aa4\uff0c\u5e94\u9996\u5148\u4f7f\u7528 html \u8fc7\u6ee4\u5668\u6765\u8fc7\u6ee4\u5185\u5bb9\uff0c\u4f8b\u5982 {{html .}} \uff0c \u6216\u8005\u5bf9 FieldName \u8fc7\u6ee4\uff1a {{ .FieldName |html }} \u3002 |html \u8fd9\u90e8\u5206\u4ee3\u7801\uff0c\u662f\u8bf7\u6c42\u6a21\u677f\u5f15\u64ce\u5728\u8f93\u51fa FieldName \u7684\u7ed3\u679c\u524d\u628a\u503c\u4f20\u9012\u7ed9 html \u683c\u5f0f\u5316\u5668\uff0c\u5b83\u4f1a\u6267\u884c HTML \u5b57\u7b26\u8f6c\u4e49\uff08\u4f8b\u5982\u628a > \u66ff\u6362\u4e3a &gt; \uff09\u3002\u8fd9\u53ef\u4ee5\u907f\u514d\u7528\u6237\u8f93\u5165\u6570\u636e\u7834\u574f HTML \u6587\u6863\u7ed3\u6784\u3002 15.7.2 \u9a8c\u8bc1\u6a21\u677f\u683c\u5f0f \u00b6 \u4e3a\u4e86\u786e\u4fdd\u6a21\u677f\u5b9a\u4e49\u8bed\u6cd5\u662f\u6b63\u786e\u7684\uff0c\u4f7f\u7528 Must() \u51fd\u6570\u5904\u7406 Parse \u7684\u8fd4\u56de\u7ed3\u679c\u3002\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d tOK \u662f\u6b63\u786e\u7684\u6a21\u677f\uff0c tErr \u9a8c\u8bc1\u65f6\u53d1\u751f\u9519\u8bef\uff0c\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6 panic\u3002 \u793a\u4f8b 15.14 template_validation.go package main import ( \"text/template\" \"fmt\" ) func main () { tOk := template . New ( \"ok\" ) //a valid template, so no panic with Must: template . Must ( tOk . Parse ( \"/* and a comment */ some static text: {{ .Name }}\" )) fmt . Println ( \"The first one parsed OK.\" ) fmt . Println ( \"The next one ought to fail.\" ) tErr := template . New ( \"error_template\" ) template . Must ( tErr . Parse ( \" some static text {{ .Name }\" )) } \u8f93\u51fa\uff1a The first one parsed OK. The next one ought to fail. panic: template: error_template:1: unexpected \"}\" in operand \u6a21\u677f\u8bed\u6cd5\u51fa\u73b0\u9519\u8bef\u6bd4\u8f83\u5c11\u89c1\uff0c\u53ef\u4ee5\u4f7f\u7528 13.3\u8282 \u6982\u62ec\u7684 defer/recover \u673a\u5236\u6765\u62a5\u544a\u5e76\u7ea0\u6b63\u9519\u8bef\u3002 \u5728\u4ee3\u7801\u4e2d\u5e38\u89c1\u5230\u8fd9 3 \u4e2a\u57fa\u672c\u51fd\u6570\u88ab\u4e32\u8054\u4f7f\u7528\uff1a var strTempl = template . Must ( template . New ( \"TName\" ). Parse ( strTemplateHTML )) \u7ec3\u4e60 15.7 template_validation_recover.go \u5728\u4e0a\u8ff0\u793a\u4f8b\u4ee3\u7801\u4e0a\u5b9e\u73b0 defer/recover \u673a\u5236\u3002 15.7.3 If-else \u00b6 \u8fd0\u884c Execute() \u4ea7\u751f\u7684\u7ed3\u679c\u6765\u81ea\u6a21\u677f\u7684\u8f93\u51fa\uff0c\u5b83\u5305\u542b\u9759\u6001\u6587\u672c\uff0c\u4ee5\u53ca\u88ab {{}} \u5305\u88f9\u7684\u79f0\u4e4b\u4e3a*\u7ba1\u9053*\u7684\u6587\u672c\u3002\u4f8b\u5982\uff0c\u8fd0\u884c\u8fd9\u6bb5\u4ee3\u7801\uff08\u793a\u4f8b 15.15 pipline1.go \uff09\uff1a t := template . New ( \"template test\" ) t = template . Must ( t . Parse ( \"This is just static text. \\n{{\\\"This is pipeline data - because it is evaluated within the double braces.\\\"}} {{`So is this, but within reverse quotes.`}}\\n\" )) t . Execute ( os . Stdout , nil ) \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a This is just static text. This is pipeline data\u2014because it is evaluated within the double braces. So is this, but within reverse quotes. \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5bf9\u7ba1\u9053\u6570\u636e\u7684\u8f93\u51fa\u7ed3\u679c\u7528 if-else-end \u8bbe\u7f6e\u6761\u4ef6\u7ea6\u675f\uff1a\u5982\u679c\u7ba1\u9053\u662f\u7a7a\u7684\uff0c\u7c7b\u4f3c\u4e8e\uff1a {{if ``}} Will not print. {{end}} \u90a3\u4e48 if \u6761\u4ef6\u7684\u6c42\u503c\u7ed3\u679c\u4e3a false \uff0c\u4e0d\u4f1a\u6709\u8f93\u51fa\u5185\u5bb9\u3002\u4f46\u5982\u679c\u662f\u8fd9\u6837\uff1a {{if `anything`}} Print IF part. {{else}} Print ELSE part.{{end}} \u4f1a\u8f93\u51fa Print IF part. \u3002\u4ee5\u4e0b\u7a0b\u5e8f\u6f14\u793a\u4e86\u8fd9\u70b9\uff1a \u793a\u4f8b 15.16 template_ifelse.go package main import ( \"os\" \"text/template\" ) func main () { tEmpty := template . New ( \"template test\" ) tEmpty = template . Must ( tEmpty . Parse ( \"Empty pipeline if demo: {{if ``}} Will not print. {{end}}\\n\" )) //empty pipeline following if tEmpty . Execute ( os . Stdout , nil ) tWithValue := template . New ( \"template test\" ) tWithValue = template . Must ( tWithValue . Parse ( \"Non empty pipeline if demo: {{if `anything`}} Will print. {{end}}\\n\" )) //non empty pipeline following if condition tWithValue . Execute ( os . Stdout , nil ) tIfElse := template . New ( \"template test\" ) tIfElse = template . Must ( tIfElse . Parse ( \"if-else demo: {{if `anything`}} Print IF part. {{else}} Print ELSE part.{{end}}\\n\" )) //non empty pipeline following if condition tIfElse . Execute ( os . Stdout , nil ) } \u8f93\u51fa\uff1a Empty pipeline if demo: Non empty pipeline if demo: Will print. if-else demo: Print IF part. 15.7.4 \u70b9\u53f7\u548c with-end \u00b6 \u70b9\u53f7 ( . ) \u53ef\u4ee5\u5728 Go \u6a21\u677f\u4e2d\u4f7f\u7528\uff1a\u5176\u503c {{.}} \u88ab\u8bbe\u7f6e\u4e3a\u5f53\u524d\u7ba1\u9053\u7684\u503c\u3002 with \u8bed\u53e5\u5c06\u70b9\u53f7\u8bbe\u4e3a\u7ba1\u9053\u7684\u503c\u3002\u5982\u679c\u7ba1\u9053\u662f\u7a7a\u7684\uff0c\u90a3\u4e48\u4e0d\u7ba1 with-end \u5757\u4e4b\u95f4\u6709\u4ec0\u4e48\uff0c\u90fd\u4f1a\u88ab\u5ffd\u7565\u3002\u5728\u88ab\u5d4c\u5957\u65f6\uff0c\u70b9\u53f7\u6839\u636e\u6700\u8fd1\u7684\u4f5c\u7528\u57df\u53d6\u5f97\u503c\u3002\u4ee5\u4e0b\u7a0b\u5e8f\u6f14\u793a\u4e86\u8fd9\u70b9\uff1a \u793a\u4f8b 15.17 template_with_end.go package main import ( \"os\" \"text/template\" ) func main () { t := template . New ( \"test\" ) t , _ = t . Parse ( \"{{with `hello`}}{{.}}{{end}}!\\n\" ) t . Execute ( os . Stdout , nil ) t , _ = t . Parse ( \"{{with `hello`}}{{.}} {{with `Mary`}}{{.}}{{end}}{{end}}!\\n\" ) t . Execute ( os . Stdout , nil ) } \u8f93\u51fa\uff1a hello! hello Mary! 15.7.5 \u6a21\u677f\u53d8\u91cf $ \u00b6 \u53ef\u4ee5\u5728\u6a21\u677f\u5185\u4e3a\u7ba1\u9053\u8bbe\u7f6e\u672c\u5730\u53d8\u91cf\uff0c\u53d8\u91cf\u540d\u4ee5 $ \u7b26\u53f7\u4f5c\u4e3a\u524d\u7f00\u3002\u53d8\u91cf\u540d\u53ea\u80fd\u5305\u542b\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\u3002\u4ee5\u4e0b\u793a\u4f8b\u4f7f\u7528\u4e86\u591a\u79cd\u5f62\u5f0f\u7684\u6709\u6548\u53d8\u91cf\u540d\u3002 \u793a\u4f8b 15.18 template_variables.go package main import ( \"os\" \"text/template\" ) func main () { t := template . New ( \"test\" ) t = template . Must ( t . Parse ( \"{{with $3 := `hello`}}{{$3}}{{end}}!\\n\" )) t . Execute ( os . Stdout , nil ) t = template . Must ( t . Parse ( \"{{with $x3 := `hola`}}{{$x3}}{{end}}!\\n\" )) t . Execute ( os . Stdout , nil ) t = template . Must ( t . Parse ( \"{{with $x_1 := `hey`}}{{$x_1}} {{.}} {{$x_1}}{{end}}!\\n\" )) t . Execute ( os . Stdout , nil ) } \u8f93\u51fa\uff1a hello! hola! hey hey hey! 15.7.6 range-end \u00b6 range-end \u7ed3\u6784\u683c\u5f0f\u4e3a\uff1a {{range pipeline}} T1 {{else}} T0 {{end}} \u3002 range \u88ab\u7528\u4e8e\u5728\u96c6\u5408\u4e0a\u8fed\u4ee3\uff1a\u7ba1\u9053\u7684\u503c\u5fc5\u987b\u662f\u6570\u7ec4\u3001\u5207\u7247\u6216 map \u3002\u5982\u679c\u7ba1\u9053\u7684\u503c\u957f\u5ea6\u4e3a\u96f6\uff0c\u70b9\u53f7\u7684\u503c\u4e0d\u53d7\u5f71\u54cd\uff0c\u4e14\u6267\u884c T0 \uff1b\u5426\u5219\uff0c\u70b9\u53f7\u88ab\u8bbe\u7f6e\u4e3a\u6570\u7ec4\u3001\u5207\u7247\u6216 map \u5185\u5143\u7d20\u7684\u503c\uff0c\u5e76\u6267\u884c T1 \u3002 \u5982\u679c\u6a21\u677f\u4e3a\uff1a {{range .}} {{.}} {{end}} \u90a3\u4e48\u6267\u884c\u4ee3\u7801\uff1a s := [] int { 1 , 2 , 3 , 4 } t . Execute ( os . Stdout , s ) \u4f1a\u8f93\u51fa\uff1a 1 2 3 4 \u5982\u9700\u66f4\u5b9e\u7528\u7684\u793a\u4f8b\uff0c\u8bf7\u53c2\u8003 20.7 \u8282 \uff0c\u6765\u81ea App Engine \u6570\u636e\u5e93\u7684\u6570\u636e\u901a\u8fc7\u6a21\u677f\u6765\u663e\u793a\uff1a {{range .}} {{with .Author}} < p >< b > {{html .}} </ b > wrote: </ p > {{else}} < p > An anonymous person wrote: </ p > {{end}} < pre > {{html .Content}} </ pre > < pre > {{html .Date}} </ pre > {{end}} \u8fd9\u91cc range . \u5728\u7ed3\u6784\u4f53\u5207\u7247\u4e0a\u8fed\u4ee3\uff0c\u6bcf\u6b21\u90fd\u5305\u542b Author \u3001 Content \u548c Date \u5b57\u6bb5\u3002 15.7.7 \u6a21\u677f\u9884\u5b9a\u4e49\u51fd\u6570 \u00b6 \u4e5f\u6709\u4e00\u4e9b\u53ef\u4ee5\u5728\u6a21\u677f\u4ee3\u7801\u4e2d\u4f7f\u7528\u7684\u9884\u5b9a\u4e49\u51fd\u6570\uff0c\u4f8b\u5982 printf() \u51fd\u6570\u5de5\u4f5c\u65b9\u5f0f\u7c7b\u4f3c\u4e8e fmt.Sprintf() \uff1a \u793a\u4f8b 15.19 predefined_functions.go package main import ( \"os\" \"text/template\" ) func main () { t := template . New ( \"test\" ) t = template . Must ( t . Parse ( \"{{with $x := `hello`}}{{printf `%s %s` $x `Mary`}}{{end}}!\\n\" )) t . Execute ( os . Stdout , nil ) } \u8f93\u51fa hello Mary! \u3002 \u9884\u5b9a\u4e49\u51fd\u6570\u4e5f\u5728 15.6 \u8282 \u4e2d\u4f7f\u7528\uff1a {{ printf \"%s\" .Body|html}} \uff0c\u5426\u5219\u5b57\u8282\u5207\u7247 Body \u4f1a\u4f5c\u4e3a\u6570\u5b57\u5e8f\u5217\u6253\u5370\u51fa\u6765\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7528\u6a21\u677f\u7f16\u5199\u7f51\u9875\u5e94\u7528 \u4e0b\u4e00\u8282\uff1a \u7cbe\u5de7\u7684\u591a\u529f\u80fd\u7f51\u9875\u670d\u52a1\u5668","title":"15.7 \u63a2\u7d22 template \u5305"},{"location":"15.7/#157-template","text":"\uff08 template \u5305\u7684\u6587\u6863\u53ef\u4ee5\u5728 https://golang.org/pkg/text/template/ \u627e\u5230\u3002\uff09 \u5728\u524d\u4e00\u7ae0\u8282\uff0c\u6211\u4eec\u4f7f\u7528 template \u5bf9\u8c61\u628a\u6570\u636e\u7ed3\u6784\u6574\u5408\u5230 HTML \u6a21\u677f\u4e2d\u3002\u8fd9\u9879\u6280\u672f\u786e\u5b9e\u5bf9\u7f51\u9875\u5e94\u7528\u7a0b\u5e8f\u975e\u5e38\u6709\u7528\uff0c\u7136\u800c\u6a21\u677f\u662f\u4e00\u9879\u66f4\u4e3a\u901a\u7528\u7684\u6280\u672f\u65b9\u6848\uff1a\u6570\u636e\u9a71\u52a8\u7684\u6a21\u677f\u88ab\u521b\u5efa\u51fa\u6765\uff0c\u4ee5\u751f\u6210\u6587\u672c\u8f93\u51fa\u3002HTML \u4ec5\u662f\u5176\u4e2d\u7684\u4e00\u79cd\u7279\u5b9a\u4f7f\u7528\u6848\u4f8b\u3002 \u6a21\u677f\u901a\u8fc7\u4e0e\u6570\u636e\u7ed3\u6784\u7684\u6574\u5408\u6765\u751f\u6210\uff0c\u901a\u5e38\u4e3a\u7ed3\u6784\u4f53\u6216\u5176\u5207\u7247\u3002\u5f53\u6570\u636e\u9879\u4f20\u9012\u7ed9 tmpl.Execute() \uff0c\u5b83\u7528\u5176\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u66ff\u6362\uff0c \u52a8\u6001\u5730\u91cd\u5199\u67d0\u4e00\u5c0f\u6bb5\u6587\u672c\u3002**\u53ea\u6709\u88ab\u5bfc\u51fa\u7684\u6570\u636e\u9879**\u624d\u53ef\u4ee5\u88ab\u6574\u5408\u8fdb\u6a21\u677f\u4e2d\u3002\u53ef\u4ee5\u5728 {{ \u548c }} \u4e2d\u52a0\u5165\u6570\u636e\u6c42\u503c\u6216\u63a7\u5236\u7ed3\u6784\u3002\u6570\u636e\u9879\u53ef\u4ee5\u662f\u503c\u6216\u6307\u9488\uff0c\u63a5\u53e3\u9690\u85cf\u4e86\u4ed6\u4eec\u7684\u5dee\u5f02\u3002","title":"15.7 \u63a2\u7d22 template \u5305"},{"location":"15.7/#1571-fieldname","text":"\u8981\u5728\u6a21\u677f\u4e2d\u5305\u542b\u67d0\u4e2a\u5b57\u6bb5\u7684\u5185\u5bb9\uff0c\u4f7f\u7528\u53cc\u82b1\u62ec\u53f7\u62ec\u8d77\u4ee5\u70b9 ( . ) \u5f00\u5934\u7684\u5b57\u6bb5\u540d\u3002\u4f8b\u5982\uff0c\u5047\u8bbe Name \u662f\u67d0\u4e2a\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\uff0c\u5176\u503c\u8981\u5728\u88ab\u6a21\u677f\u6574\u5408\u65f6\u66ff\u6362\uff0c\u5219\u5728\u6a21\u677f\u4e2d\u4f7f\u7528\u6587\u672c {{.Name}} \u3002\u5f53 Name \u662f map \u7684\u952e\u65f6\u8fd9\u4e48\u505a\u4e5f\u662f\u53ef\u884c\u7684\u3002\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Template \u5bf9\u8c61\uff0c\u8c03\u7528 template.New() \uff0c\u5176\u5b57\u7b26\u4e32\u53c2\u6570\u53ef\u4ee5\u6307\u5b9a\u6a21\u677f\u7684\u540d\u79f0\u3002\u6b63\u5982 15.5 \u8282 \u51fa\u73b0\u8fc7\u7684\uff0c Parse() \u65b9\u6cd5\u901a\u8fc7\u89e3\u6790\u6a21\u677f\u5b9a\u4e49\u5b57\u7b26\u4e32\uff0c\u751f\u6210\u6a21\u677f\u7684\u5185\u90e8\u8868\u793a\u3002\u5f53\u4f7f\u7528\u5305\u542b\u6a21\u677f\u5b9a\u4e49\u5b57\u7b26\u4e32\u7684\u6587\u4ef6\u65f6\uff0c\u5c06\u6587\u4ef6\u8def\u5f84\u4f20\u9012\u7ed9 ParseFiles() \u6765\u89e3\u6790\u3002\u89e3\u6790\u8fc7\u7a0b\u5982\u4ea7\u751f\u9519\u8bef\uff0c\u8fd9\u4e24\u4e2a\u51fd\u6570\u7b2c\u4e8c\u4e2a\u8fd4\u56de\u503c error != nil \u3002\u6700\u540e\u901a\u8fc7 Execute() \u65b9\u6cd5\uff0c\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u5185\u5bb9\u4e0e\u6a21\u677f\u6574\u5408\uff0c\u5e76\u5c06\u7ed3\u679c\u5199\u5165\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e2d\uff0c\u5176\u7c7b\u578b\u4e3a io.Writer \u3002\u518d\u4e00\u6b21\u5730\uff0c\u53ef\u80fd\u4f1a\u6709 error \u8fd4\u56de\u3002\u4ee5\u4e0b\u7a0b\u5e8f\u6f14\u793a\u4e86\u8fd9\u4e9b\u6b65\u9aa4\uff0c\u8f93\u51fa\u901a\u8fc7 os.Stdout() \u88ab\u5199\u5230\u63a7\u5236\u53f0\u3002 \u793a\u4f8b 15.13 template_field.go package main import ( \"fmt\" \"os\" \"text/template\" ) type Person struct { Name string nonExportedAgeField string } func main () { t := template . New ( \"hello\" ) t , _ = t . Parse ( \"hello {{.Name}}!\" ) p := Person { Name : \"Mary\" , nonExportedAgeField : \"31\" } if err := t . Execute ( os . Stdout , p ); err != nil { fmt . Println ( \"There was an error:\" , err . Error ()) } } \u8f93\u51fa\uff1a hello Mary! \u5982\u679c\u6570\u636e\u7ed3\u6784\u4e2d\u5305\u542b\u4e00\u4e2a\u672a\u5bfc\u51fa\u7684\u5b57\u6bb5\uff0c\u5f53\u6211\u4eec\u5c1d\u8bd5\u628a\u5b83\u6574\u5408\u5230\u7c7b\u4f3c\u8fd9\u6837\u7684\u5b9a\u4e49\u5b57\u7b26\u4e32\uff1a t , _ = t . Parse ( \"your age is {{.nonExportedAgeField}}!\" ) \u4f1a\u4ea7\u751f\u9519\u8bef\uff1a There was an error: template: nonexported template hello:1: can\u2019t evaluate field nonExportedAgeField in type main.Person. \u5982\u679c\u53ea\u662f\u60f3\u7b80\u5355\u5730\u628a Execute() \u65b9\u6cd5\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7528\u4e8e\u66ff\u6362\uff0c\u4f7f\u7528 {{.}} \u3002 \u5f53\u5728\u6d4f\u89c8\u5668\u73af\u5883\u4e2d\u8fdb\u884c\u8fd9\u4e9b\u6b65\u9aa4\uff0c\u5e94\u9996\u5148\u4f7f\u7528 html \u8fc7\u6ee4\u5668\u6765\u8fc7\u6ee4\u5185\u5bb9\uff0c\u4f8b\u5982 {{html .}} \uff0c \u6216\u8005\u5bf9 FieldName \u8fc7\u6ee4\uff1a {{ .FieldName |html }} \u3002 |html \u8fd9\u90e8\u5206\u4ee3\u7801\uff0c\u662f\u8bf7\u6c42\u6a21\u677f\u5f15\u64ce\u5728\u8f93\u51fa FieldName \u7684\u7ed3\u679c\u524d\u628a\u503c\u4f20\u9012\u7ed9 html \u683c\u5f0f\u5316\u5668\uff0c\u5b83\u4f1a\u6267\u884c HTML \u5b57\u7b26\u8f6c\u4e49\uff08\u4f8b\u5982\u628a > \u66ff\u6362\u4e3a &gt; \uff09\u3002\u8fd9\u53ef\u4ee5\u907f\u514d\u7528\u6237\u8f93\u5165\u6570\u636e\u7834\u574f HTML \u6587\u6863\u7ed3\u6784\u3002","title":"15.7.1 \u5b57\u6bb5\u66ff\u6362\uff1a{{.FieldName}}"},{"location":"15.7/#1572","text":"\u4e3a\u4e86\u786e\u4fdd\u6a21\u677f\u5b9a\u4e49\u8bed\u6cd5\u662f\u6b63\u786e\u7684\uff0c\u4f7f\u7528 Must() \u51fd\u6570\u5904\u7406 Parse \u7684\u8fd4\u56de\u7ed3\u679c\u3002\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d tOK \u662f\u6b63\u786e\u7684\u6a21\u677f\uff0c tErr \u9a8c\u8bc1\u65f6\u53d1\u751f\u9519\u8bef\uff0c\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6 panic\u3002 \u793a\u4f8b 15.14 template_validation.go package main import ( \"text/template\" \"fmt\" ) func main () { tOk := template . New ( \"ok\" ) //a valid template, so no panic with Must: template . Must ( tOk . Parse ( \"/* and a comment */ some static text: {{ .Name }}\" )) fmt . Println ( \"The first one parsed OK.\" ) fmt . Println ( \"The next one ought to fail.\" ) tErr := template . New ( \"error_template\" ) template . Must ( tErr . Parse ( \" some static text {{ .Name }\" )) } \u8f93\u51fa\uff1a The first one parsed OK. The next one ought to fail. panic: template: error_template:1: unexpected \"}\" in operand \u6a21\u677f\u8bed\u6cd5\u51fa\u73b0\u9519\u8bef\u6bd4\u8f83\u5c11\u89c1\uff0c\u53ef\u4ee5\u4f7f\u7528 13.3\u8282 \u6982\u62ec\u7684 defer/recover \u673a\u5236\u6765\u62a5\u544a\u5e76\u7ea0\u6b63\u9519\u8bef\u3002 \u5728\u4ee3\u7801\u4e2d\u5e38\u89c1\u5230\u8fd9 3 \u4e2a\u57fa\u672c\u51fd\u6570\u88ab\u4e32\u8054\u4f7f\u7528\uff1a var strTempl = template . Must ( template . New ( \"TName\" ). Parse ( strTemplateHTML )) \u7ec3\u4e60 15.7 template_validation_recover.go \u5728\u4e0a\u8ff0\u793a\u4f8b\u4ee3\u7801\u4e0a\u5b9e\u73b0 defer/recover \u673a\u5236\u3002","title":"15.7.2 \u9a8c\u8bc1\u6a21\u677f\u683c\u5f0f"},{"location":"15.7/#1573-if-else","text":"\u8fd0\u884c Execute() \u4ea7\u751f\u7684\u7ed3\u679c\u6765\u81ea\u6a21\u677f\u7684\u8f93\u51fa\uff0c\u5b83\u5305\u542b\u9759\u6001\u6587\u672c\uff0c\u4ee5\u53ca\u88ab {{}} \u5305\u88f9\u7684\u79f0\u4e4b\u4e3a*\u7ba1\u9053*\u7684\u6587\u672c\u3002\u4f8b\u5982\uff0c\u8fd0\u884c\u8fd9\u6bb5\u4ee3\u7801\uff08\u793a\u4f8b 15.15 pipline1.go \uff09\uff1a t := template . New ( \"template test\" ) t = template . Must ( t . Parse ( \"This is just static text. \\n{{\\\"This is pipeline data - because it is evaluated within the double braces.\\\"}} {{`So is this, but within reverse quotes.`}}\\n\" )) t . Execute ( os . Stdout , nil ) \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a This is just static text. This is pipeline data\u2014because it is evaluated within the double braces. So is this, but within reverse quotes. \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5bf9\u7ba1\u9053\u6570\u636e\u7684\u8f93\u51fa\u7ed3\u679c\u7528 if-else-end \u8bbe\u7f6e\u6761\u4ef6\u7ea6\u675f\uff1a\u5982\u679c\u7ba1\u9053\u662f\u7a7a\u7684\uff0c\u7c7b\u4f3c\u4e8e\uff1a {{if ``}} Will not print. {{end}} \u90a3\u4e48 if \u6761\u4ef6\u7684\u6c42\u503c\u7ed3\u679c\u4e3a false \uff0c\u4e0d\u4f1a\u6709\u8f93\u51fa\u5185\u5bb9\u3002\u4f46\u5982\u679c\u662f\u8fd9\u6837\uff1a {{if `anything`}} Print IF part. {{else}} Print ELSE part.{{end}} \u4f1a\u8f93\u51fa Print IF part. \u3002\u4ee5\u4e0b\u7a0b\u5e8f\u6f14\u793a\u4e86\u8fd9\u70b9\uff1a \u793a\u4f8b 15.16 template_ifelse.go package main import ( \"os\" \"text/template\" ) func main () { tEmpty := template . New ( \"template test\" ) tEmpty = template . Must ( tEmpty . Parse ( \"Empty pipeline if demo: {{if ``}} Will not print. {{end}}\\n\" )) //empty pipeline following if tEmpty . Execute ( os . Stdout , nil ) tWithValue := template . New ( \"template test\" ) tWithValue = template . Must ( tWithValue . Parse ( \"Non empty pipeline if demo: {{if `anything`}} Will print. {{end}}\\n\" )) //non empty pipeline following if condition tWithValue . Execute ( os . Stdout , nil ) tIfElse := template . New ( \"template test\" ) tIfElse = template . Must ( tIfElse . Parse ( \"if-else demo: {{if `anything`}} Print IF part. {{else}} Print ELSE part.{{end}}\\n\" )) //non empty pipeline following if condition tIfElse . Execute ( os . Stdout , nil ) } \u8f93\u51fa\uff1a Empty pipeline if demo: Non empty pipeline if demo: Will print. if-else demo: Print IF part.","title":"15.7.3 If-else"},{"location":"15.7/#1574-with-end","text":"\u70b9\u53f7 ( . ) \u53ef\u4ee5\u5728 Go \u6a21\u677f\u4e2d\u4f7f\u7528\uff1a\u5176\u503c {{.}} \u88ab\u8bbe\u7f6e\u4e3a\u5f53\u524d\u7ba1\u9053\u7684\u503c\u3002 with \u8bed\u53e5\u5c06\u70b9\u53f7\u8bbe\u4e3a\u7ba1\u9053\u7684\u503c\u3002\u5982\u679c\u7ba1\u9053\u662f\u7a7a\u7684\uff0c\u90a3\u4e48\u4e0d\u7ba1 with-end \u5757\u4e4b\u95f4\u6709\u4ec0\u4e48\uff0c\u90fd\u4f1a\u88ab\u5ffd\u7565\u3002\u5728\u88ab\u5d4c\u5957\u65f6\uff0c\u70b9\u53f7\u6839\u636e\u6700\u8fd1\u7684\u4f5c\u7528\u57df\u53d6\u5f97\u503c\u3002\u4ee5\u4e0b\u7a0b\u5e8f\u6f14\u793a\u4e86\u8fd9\u70b9\uff1a \u793a\u4f8b 15.17 template_with_end.go package main import ( \"os\" \"text/template\" ) func main () { t := template . New ( \"test\" ) t , _ = t . Parse ( \"{{with `hello`}}{{.}}{{end}}!\\n\" ) t . Execute ( os . Stdout , nil ) t , _ = t . Parse ( \"{{with `hello`}}{{.}} {{with `Mary`}}{{.}}{{end}}{{end}}!\\n\" ) t . Execute ( os . Stdout , nil ) } \u8f93\u51fa\uff1a hello! hello Mary!","title":"15.7.4 \u70b9\u53f7\u548c with-end"},{"location":"15.7/#1575","text":"\u53ef\u4ee5\u5728\u6a21\u677f\u5185\u4e3a\u7ba1\u9053\u8bbe\u7f6e\u672c\u5730\u53d8\u91cf\uff0c\u53d8\u91cf\u540d\u4ee5 $ \u7b26\u53f7\u4f5c\u4e3a\u524d\u7f00\u3002\u53d8\u91cf\u540d\u53ea\u80fd\u5305\u542b\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\u3002\u4ee5\u4e0b\u793a\u4f8b\u4f7f\u7528\u4e86\u591a\u79cd\u5f62\u5f0f\u7684\u6709\u6548\u53d8\u91cf\u540d\u3002 \u793a\u4f8b 15.18 template_variables.go package main import ( \"os\" \"text/template\" ) func main () { t := template . New ( \"test\" ) t = template . Must ( t . Parse ( \"{{with $3 := `hello`}}{{$3}}{{end}}!\\n\" )) t . Execute ( os . Stdout , nil ) t = template . Must ( t . Parse ( \"{{with $x3 := `hola`}}{{$x3}}{{end}}!\\n\" )) t . Execute ( os . Stdout , nil ) t = template . Must ( t . Parse ( \"{{with $x_1 := `hey`}}{{$x_1}} {{.}} {{$x_1}}{{end}}!\\n\" )) t . Execute ( os . Stdout , nil ) } \u8f93\u51fa\uff1a hello! hola! hey hey hey!","title":"15.7.5 \u6a21\u677f\u53d8\u91cf $"},{"location":"15.7/#1576-range-end","text":"range-end \u7ed3\u6784\u683c\u5f0f\u4e3a\uff1a {{range pipeline}} T1 {{else}} T0 {{end}} \u3002 range \u88ab\u7528\u4e8e\u5728\u96c6\u5408\u4e0a\u8fed\u4ee3\uff1a\u7ba1\u9053\u7684\u503c\u5fc5\u987b\u662f\u6570\u7ec4\u3001\u5207\u7247\u6216 map \u3002\u5982\u679c\u7ba1\u9053\u7684\u503c\u957f\u5ea6\u4e3a\u96f6\uff0c\u70b9\u53f7\u7684\u503c\u4e0d\u53d7\u5f71\u54cd\uff0c\u4e14\u6267\u884c T0 \uff1b\u5426\u5219\uff0c\u70b9\u53f7\u88ab\u8bbe\u7f6e\u4e3a\u6570\u7ec4\u3001\u5207\u7247\u6216 map \u5185\u5143\u7d20\u7684\u503c\uff0c\u5e76\u6267\u884c T1 \u3002 \u5982\u679c\u6a21\u677f\u4e3a\uff1a {{range .}} {{.}} {{end}} \u90a3\u4e48\u6267\u884c\u4ee3\u7801\uff1a s := [] int { 1 , 2 , 3 , 4 } t . Execute ( os . Stdout , s ) \u4f1a\u8f93\u51fa\uff1a 1 2 3 4 \u5982\u9700\u66f4\u5b9e\u7528\u7684\u793a\u4f8b\uff0c\u8bf7\u53c2\u8003 20.7 \u8282 \uff0c\u6765\u81ea App Engine \u6570\u636e\u5e93\u7684\u6570\u636e\u901a\u8fc7\u6a21\u677f\u6765\u663e\u793a\uff1a {{range .}} {{with .Author}} < p >< b > {{html .}} </ b > wrote: </ p > {{else}} < p > An anonymous person wrote: </ p > {{end}} < pre > {{html .Content}} </ pre > < pre > {{html .Date}} </ pre > {{end}} \u8fd9\u91cc range . \u5728\u7ed3\u6784\u4f53\u5207\u7247\u4e0a\u8fed\u4ee3\uff0c\u6bcf\u6b21\u90fd\u5305\u542b Author \u3001 Content \u548c Date \u5b57\u6bb5\u3002","title":"15.7.6 range-end"},{"location":"15.7/#1577","text":"\u4e5f\u6709\u4e00\u4e9b\u53ef\u4ee5\u5728\u6a21\u677f\u4ee3\u7801\u4e2d\u4f7f\u7528\u7684\u9884\u5b9a\u4e49\u51fd\u6570\uff0c\u4f8b\u5982 printf() \u51fd\u6570\u5de5\u4f5c\u65b9\u5f0f\u7c7b\u4f3c\u4e8e fmt.Sprintf() \uff1a \u793a\u4f8b 15.19 predefined_functions.go package main import ( \"os\" \"text/template\" ) func main () { t := template . New ( \"test\" ) t = template . Must ( t . Parse ( \"{{with $x := `hello`}}{{printf `%s %s` $x `Mary`}}{{end}}!\\n\" )) t . Execute ( os . Stdout , nil ) } \u8f93\u51fa hello Mary! \u3002 \u9884\u5b9a\u4e49\u51fd\u6570\u4e5f\u5728 15.6 \u8282 \u4e2d\u4f7f\u7528\uff1a {{ printf \"%s\" .Body|html}} \uff0c\u5426\u5219\u5b57\u8282\u5207\u7247 Body \u4f1a\u4f5c\u4e3a\u6570\u5b57\u5e8f\u5217\u6253\u5370\u51fa\u6765\u3002","title":"15.7.7 \u6a21\u677f\u9884\u5b9a\u4e49\u51fd\u6570"},{"location":"15.7/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7528\u6a21\u677f\u7f16\u5199\u7f51\u9875\u5e94\u7528 \u4e0b\u4e00\u8282\uff1a \u7cbe\u5de7\u7684\u591a\u529f\u80fd\u7f51\u9875\u670d\u52a1\u5668","title":"\u94fe\u63a5"},{"location":"15.8/","text":"15.8 \u7cbe\u5de7\u7684\u591a\u529f\u80fd\u7f51\u9875\u670d\u52a1\u5668 \u00b6 \u4e3a\u8fdb\u4e00\u6b65\u6df1\u5165\u7406\u89e3 http \u5305\u4ee5\u53ca\u5982\u4f55\u6784\u5efa\u7f51\u9875\u670d\u52a1\u5668\u529f\u80fd\uff0c\u8ba9\u6211\u4eec\u6765\u5b66\u4e60\u548c\u4f53\u4f1a\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a\u5148\u5217\u51fa\u4ee3\u7801\uff0c\u7136\u540e\u7ed9\u51fa\u4e0d\u540c\u529f\u80fd\u7684\u5b9e\u73b0\u65b9\u6cd5\uff0c\u7a0b\u5e8f\u8f93\u51fa\u663e\u793a\u5728\u8868\u683c\u4e2d\u3002 \u793a\u4f8b 15.20 elaborated_webserver.go package main import ( \"bytes\" \"expvar\" \"flag\" \"fmt\" \"io\" \"log\" \"net/http\" \"os\" \"strconv\" ) // hello world, the web server var helloRequests = expvar . NewInt ( \"hello-requests\" ) // flags: var webroot = flag . String ( \"root\" , \"/home/user\" , \"web root directory\" ) // simple flag server var booleanflag = flag . Bool ( \"boolean\" , true , \"another flag for testing\" ) // Simple counter server. POSTing to it will set the value. type Counter struct { n int } // a channel type Chan chan int func main () { flag . Parse () http . Handle ( \"/\" , http . HandlerFunc ( Logger )) http . Handle ( \"/go/hello\" , http . HandlerFunc ( HelloServer )) // The counter is published as a variable directly. ctr := new ( Counter ) expvar . Publish ( \"counter\" , ctr ) http . Handle ( \"/counter\" , ctr ) // http.Handle(\"/go/\", http.FileServer(http.Dir(\"/tmp\"))) // uses the OS filesystem http . Handle ( \"/go/\" , http . StripPrefix ( \"/go/\" , http . FileServer ( http . Dir ( * webroot )))) http . Handle ( \"/flags\" , http . HandlerFunc ( FlagServer )) http . Handle ( \"/args\" , http . HandlerFunc ( ArgServer )) http . Handle ( \"/chan\" , ChanCreate ()) http . Handle ( \"/date\" , http . HandlerFunc ( DateServer )) err := http . ListenAndServe ( \":12345\" , nil ) if err != nil { log . Panicln ( \"ListenAndServe:\" , err ) } } func Logger ( w http . ResponseWriter , req * http . Request ) { log . Print ( req . URL . String ()) w . WriteHeader ( 404 ) w . Write ([] byte ( \"oops\" )) } func HelloServer ( w http . ResponseWriter , req * http . Request ) { helloRequests . Add ( 1 ) io . WriteString ( w , \"hello, world!\\n\" ) } // This makes Counter satisfy the expvar.Var interface, so we can export // it directly. func ( ctr * Counter ) String () string { return fmt . Sprintf ( \"%d\" , ctr . n ) } func ( ctr * Counter ) ServeHTTP ( w http . ResponseWriter , req * http . Request ) { switch req . Method { case \"GET\" : // increment n ctr . n ++ case \"POST\" : // set n to posted value buf := new ( bytes . Buffer ) io . Copy ( buf , req . Body ) body := buf . String () if n , err := strconv . Atoi ( body ); err != nil { fmt . Fprintf ( w , \"bad POST: %v\\nbody: [%v]\\n\" , err , body ) } else { ctr . n = n fmt . Fprint ( w , \"counter reset\\n\" ) } } fmt . Fprintf ( w , \"counter = %d\\n\" , ctr . n ) } func FlagServer ( w http . ResponseWriter , req * http . Request ) { w . Header (). Set ( \"Content-Type\" , \"text/plain; charset=utf-8\" ) fmt . Fprint ( w , \"Flags:\\n\" ) flag . VisitAll ( func ( f * flag . Flag ) { if f . Value . String () != f . DefValue { fmt . Fprintf ( w , \"%s = %s [default = %s]\\n\" , f . Name , f . Value . String (), f . DefValue ) } else { fmt . Fprintf ( w , \"%s = %s\\n\" , f . Name , f . Value . String ()) } }) } // simple argument server func ArgServer ( w http . ResponseWriter , req * http . Request ) { for _ , s := range os . Args { fmt . Fprint ( w , s , \" \" ) } } func ChanCreate () Chan { c := make ( Chan ) go func ( c Chan ) { for x := 0 ; ; x ++ { c <- x } }( c ) return c } func ( ch Chan ) ServeHTTP ( w http . ResponseWriter , req * http . Request ) { io . WriteString ( w , fmt . Sprintf ( \"channel send #%d\\n\" , <- ch )) } // exec a program, redirecting output func DateServer ( rw http . ResponseWriter , req * http . Request ) { rw . Header (). Set ( \"Content-Type\" , \"text/plain; charset=utf-8\" ) r , w , err := os . Pipe () if err != nil { fmt . Fprintf ( rw , \"pipe: %s\\n\" , err ) return } p , err := os . StartProcess ( \"/bin/date\" , [] string { \"date\" }, & os . ProcAttr { Files : [] * os . File { nil , w , w }}) defer r . Close () w . Close () if err != nil { fmt . Fprintf ( rw , \"fork/exec: %s\\n\" , err ) return } defer p . Release () io . Copy ( rw , r ) wait , err := p . Wait () if err != nil { fmt . Fprintf ( rw , \"wait: %s\\n\" , err ) return } if ! wait . Exited () { fmt . Fprintf ( rw , \"date: %v\\n\" , wait ) return } } \u5904\u7406\u51fd\u6570 \u8c03\u7528 URL \u6d4f\u89c8\u5668\u83b7\u5f97\u54cd\u5e94 Logger() http://localhost:12345/ \uff08\u6839\uff09 oops Logger() \u5904\u7406\u51fd\u6570\u7528 w.WriteHeader(404) \u6765\u8f93\u51fa \u201c404 Not Found\u201d\u5934\u90e8\u3002 \u8fd9\u9879\u6280\u672f\u901a\u5e38\u5f88\u6709\u7528\uff0c\u65e0\u8bba\u4f55\u65f6\u670d\u52a1\u5668\u6267\u884c\u4ee3\u7801\u4ea7\u751f\u9519\u8bef\uff0c\u90fd\u53ef\u4ee5\u5e94\u7528\u7c7b\u4f3c\u8fd9\u6837\u7684\u4ee3\u7801\uff1a if err != nil { w . WriteHeader ( 400 ) return } \u53e6\u5916\u5229\u7528 logger \u5305\u7684\u51fd\u6570\uff0c\u9488\u5bf9\u6bcf\u4e2a\u8bf7\u6c42\u5728\u670d\u52a1\u5668\u7aef\u547d\u4ee4\u884c\u6253\u5370\u65e5\u671f\u3001\u65f6\u95f4\u548c URL\u3002 \u5904\u7406\u51fd\u6570 \u8c03\u7528 URL \u6d4f\u89c8\u5668\u83b7\u5f97\u54cd\u5e94 HelloServer() http://localhost:12345/go/hello hello, world! \u5305 expvar \u53ef\u4ee5\u521b\u5efa\uff08Int\uff0cFloat \u548c String \u7c7b\u578b\uff09\u53d8\u91cf\uff0c\u5e76\u5c06\u5b83\u4eec\u53d1\u5e03\u4e3a\u516c\u5171\u53d8\u91cf\u3002\u5b83\u4f1a\u5728 HTTP URL /debug/vars \u4e0a\u4ee5 JSON \u683c\u5f0f\u516c\u5e03\u3002\u901a\u5e38\u5b83\u88ab\u7528\u4e8e\u670d\u52a1\u5668\u64cd\u4f5c\u8ba1\u6570\u3002 helloRequests \u5c31\u662f\u8fd9\u6837\u4e00\u4e2a int64 \u53d8\u91cf\uff0c\u8be5\u5904\u7406\u51fd\u6570\u5bf9\u5176\u52a0 1\uff0c\u7136\u540e\u5199\u5165\u201chello world!\u201d\u5230\u6d4f\u89c8\u5668\u3002 \u5904\u7406\u51fd\u6570 \u8c03\u7528 URL \u6d4f\u89c8\u5668\u83b7\u5f97\u54cd\u5e94 Counter() http://localhost:12345/counter counter = 1 Counter() \u5237\u65b0\uff08GET \u8bf7\u6c42\uff09 counter = 2 \u8ba1\u6570\u5668\u5bf9\u8c61 ctr \u6709\u4e00\u4e2a String() \u65b9\u6cd5\uff0c\u6240\u4ee5\u5b83\u5b9e\u73b0\u4e86 expvar.Var \u63a5\u53e3\u3002\u8fd9\u4f7f\u5176\u53ef\u4ee5\u88ab\u53d1\u5e03\uff0c\u5c3d\u7ba1\u5b83\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u3002 ServeHTTP() \u51fd\u6570\u4f7f ctr \u6210\u4e3a\u5904\u7406\u5668\uff0c\u56e0\u4e3a\u5b83\u7684\u7b7e\u540d\u6b63\u786e\u5b9e\u73b0\u4e86 http.Handler \u63a5\u53e3\u3002 \u5904\u7406\u51fd\u6570 \u8c03\u7528 URL \u6d4f\u89c8\u5668\u83b7\u5f97\u54cd\u5e94 FileServer() http://localhost:12345/go/ggg.html 404 page not found FileServer(root FileSystem) Handler \u8fd4\u56de\u4e00\u4e2a\u5904\u7406\u5668\uff0c\u5b83\u4ee5 root \u4f5c\u4e3a\u6839\uff0c\u7528\u6587\u4ef6\u7cfb\u7edf\u7684\u5185\u5bb9\u54cd\u5e94 HTTP \u8bf7\u6c42\u3002\u8981\u83b7\u5f97\u64cd\u4f5c\u7cfb\u7edf\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u7528 http.Dir \uff0c\u4f8b\u5982\uff1a http . Handle ( \"/go/\" , http . FileServer ( http . Dir ( \"/tmp\" ))) \u5904\u7406\u51fd\u6570 \u8c03\u7528 URL \u6d4f\u89c8\u5668\u83b7\u5f97\u54cd\u5e94 FlagServer() http://localhost:12345/flags Flags: boolean = true root = /home/rsc \u8be5\u5904\u7406\u51fd\u6570\u4f7f\u7528\u4e86 flag \u5305\u3002 VisitAll() \u51fd\u6570\u8fed\u4ee3\u6240\u6709\u7684\u6807\u7b7e (flag)\uff0c\u6253\u5370\u5b83\u4eec\u7684\u540d\u79f0\u3001\u503c\u548c\u9ed8\u8ba4\u503c\uff08\u5f53\u4e0d\u540c\u4e8e\u201c\u503c\u201d\u65f6\uff09\u3002 \u5904\u7406\u51fd\u6570 \u8c03\u7528 URL \u6d4f\u89c8\u5668\u83b7\u5f97\u54cd\u5e94 ArgServer() http://localhost:12345/args ./elaborated_webserver.exe \u8be5\u5904\u7406\u51fd\u6570\u8fed\u4ee3 os.Args \u4ee5\u6253\u5370\u51fa\u6240\u6709\u7684\u547d\u4ee4\u884c\u53c2\u6570\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u5219\u53ea\u6709\u7a0b\u5e8f\u540d\u79f0\uff08\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u8def\u5f84\uff09\u4f1a\u88ab\u6253\u5370\u51fa\u6765\u3002 \u5904\u7406\u51fd\u6570 \u8c03\u7528 URL \u6d4f\u89c8\u5668\u83b7\u5f97\u54cd\u5e94 Channel() http://localhost:12345/chan channel send #1 Channel() \u5237\u65b0 channel send #2 \u6bcf\u5f53\u6709\u65b0\u8bf7\u6c42\u5230\u8fbe\uff0c\u901a\u9053\u7684 ServeHTTP() \u65b9\u6cd5\u4ece\u901a\u9053\u83b7\u53d6\u4e0b\u4e00\u4e2a\u6574\u6570\u5e76\u663e\u793a\u3002\u7531\u6b64\u53ef\u89c1\uff0c\u7f51\u9875\u670d\u52a1\u5668\u53ef\u4ee5\u4ece\u901a\u9053\u4e2d\u83b7\u53d6\u8981\u53d1\u9001\u7684\u54cd\u5e94\uff0c\u5b83\u53ef\u4ee5\u7531\u53e6\u4e00\u4e2a\u51fd\u6570\u4ea7\u751f\uff08\u751a\u81f3\u662f\u5ba2\u6237\u7aef\uff09\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u6b63\u662f\u4e00\u4e2a\u8fd9\u6837\u7684\u5904\u7406\u51fd\u6570\uff0c\u4f46\u4f1a\u5728 30 \u79d2\u540e\u8d85\u65f6\uff1a func ChanResponse ( w http . ResponseWriter , req * http . Request ) { timeout := make ( chan bool ) go func () { time . Sleep ( 30e9 ) timeout <- true }() select { case msg := <- messages : io . WriteString ( w , msg ) case stop := <- timeout : return } } \u5904\u7406\u51fd\u6570 \u8c03\u7528 URL \u6d4f\u89c8\u5668\u83b7\u5f97\u54cd\u5e94 DateServer() http://localhost:12345/date \u663e\u793a\u5f53\u524d\u65f6\u95f4\uff08\u7531\u4e8e\u662f\u8c03\u7528 /bin/date\uff0c\u4ec5\u5728 Unix \u4e0b\u6709\u6548\uff09 \u53ef\u80fd\u7684\u8f93\u51fa\uff1a Thu Sep 8 12:41:09 CEST 2011 \u3002 os.Pipe() \u8fd4\u56de\u4e00\u5bf9\u76f8\u5173\u8054\u7684 File \uff0c\u4ece r \u8bfb\u53d6\u6570\u636e\uff0c\u8fd4\u56de\u5df2\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u6765\u81ea\u4e8e w \u7684\u5199\u5165\u3002\u51fd\u6570\u8fd4\u56de\u8fd9\u4e24\u4e2a\u6587\u4ef6\u548c\u9519\u8bef\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff1a func Pipe () ( r * File , w * File , err error ) \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u63a2\u7d22 template \u5305 \u4e0b\u4e00\u8282\uff1a \u7528 rpc \u5b9e\u73b0\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528","title":"15.8 \u7cbe\u5de7\u7684\u591a\u529f\u80fd\u7f51\u9875\u670d\u52a1\u5668"},{"location":"15.8/#158","text":"\u4e3a\u8fdb\u4e00\u6b65\u6df1\u5165\u7406\u89e3 http \u5305\u4ee5\u53ca\u5982\u4f55\u6784\u5efa\u7f51\u9875\u670d\u52a1\u5668\u529f\u80fd\uff0c\u8ba9\u6211\u4eec\u6765\u5b66\u4e60\u548c\u4f53\u4f1a\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a\u5148\u5217\u51fa\u4ee3\u7801\uff0c\u7136\u540e\u7ed9\u51fa\u4e0d\u540c\u529f\u80fd\u7684\u5b9e\u73b0\u65b9\u6cd5\uff0c\u7a0b\u5e8f\u8f93\u51fa\u663e\u793a\u5728\u8868\u683c\u4e2d\u3002 \u793a\u4f8b 15.20 elaborated_webserver.go package main import ( \"bytes\" \"expvar\" \"flag\" \"fmt\" \"io\" \"log\" \"net/http\" \"os\" \"strconv\" ) // hello world, the web server var helloRequests = expvar . NewInt ( \"hello-requests\" ) // flags: var webroot = flag . String ( \"root\" , \"/home/user\" , \"web root directory\" ) // simple flag server var booleanflag = flag . Bool ( \"boolean\" , true , \"another flag for testing\" ) // Simple counter server. POSTing to it will set the value. type Counter struct { n int } // a channel type Chan chan int func main () { flag . Parse () http . Handle ( \"/\" , http . HandlerFunc ( Logger )) http . Handle ( \"/go/hello\" , http . HandlerFunc ( HelloServer )) // The counter is published as a variable directly. ctr := new ( Counter ) expvar . Publish ( \"counter\" , ctr ) http . Handle ( \"/counter\" , ctr ) // http.Handle(\"/go/\", http.FileServer(http.Dir(\"/tmp\"))) // uses the OS filesystem http . Handle ( \"/go/\" , http . StripPrefix ( \"/go/\" , http . FileServer ( http . Dir ( * webroot )))) http . Handle ( \"/flags\" , http . HandlerFunc ( FlagServer )) http . Handle ( \"/args\" , http . HandlerFunc ( ArgServer )) http . Handle ( \"/chan\" , ChanCreate ()) http . Handle ( \"/date\" , http . HandlerFunc ( DateServer )) err := http . ListenAndServe ( \":12345\" , nil ) if err != nil { log . Panicln ( \"ListenAndServe:\" , err ) } } func Logger ( w http . ResponseWriter , req * http . Request ) { log . Print ( req . URL . String ()) w . WriteHeader ( 404 ) w . Write ([] byte ( \"oops\" )) } func HelloServer ( w http . ResponseWriter , req * http . Request ) { helloRequests . Add ( 1 ) io . WriteString ( w , \"hello, world!\\n\" ) } // This makes Counter satisfy the expvar.Var interface, so we can export // it directly. func ( ctr * Counter ) String () string { return fmt . Sprintf ( \"%d\" , ctr . n ) } func ( ctr * Counter ) ServeHTTP ( w http . ResponseWriter , req * http . Request ) { switch req . Method { case \"GET\" : // increment n ctr . n ++ case \"POST\" : // set n to posted value buf := new ( bytes . Buffer ) io . Copy ( buf , req . Body ) body := buf . String () if n , err := strconv . Atoi ( body ); err != nil { fmt . Fprintf ( w , \"bad POST: %v\\nbody: [%v]\\n\" , err , body ) } else { ctr . n = n fmt . Fprint ( w , \"counter reset\\n\" ) } } fmt . Fprintf ( w , \"counter = %d\\n\" , ctr . n ) } func FlagServer ( w http . ResponseWriter , req * http . Request ) { w . Header (). Set ( \"Content-Type\" , \"text/plain; charset=utf-8\" ) fmt . Fprint ( w , \"Flags:\\n\" ) flag . VisitAll ( func ( f * flag . Flag ) { if f . Value . String () != f . DefValue { fmt . Fprintf ( w , \"%s = %s [default = %s]\\n\" , f . Name , f . Value . String (), f . DefValue ) } else { fmt . Fprintf ( w , \"%s = %s\\n\" , f . Name , f . Value . String ()) } }) } // simple argument server func ArgServer ( w http . ResponseWriter , req * http . Request ) { for _ , s := range os . Args { fmt . Fprint ( w , s , \" \" ) } } func ChanCreate () Chan { c := make ( Chan ) go func ( c Chan ) { for x := 0 ; ; x ++ { c <- x } }( c ) return c } func ( ch Chan ) ServeHTTP ( w http . ResponseWriter , req * http . Request ) { io . WriteString ( w , fmt . Sprintf ( \"channel send #%d\\n\" , <- ch )) } // exec a program, redirecting output func DateServer ( rw http . ResponseWriter , req * http . Request ) { rw . Header (). Set ( \"Content-Type\" , \"text/plain; charset=utf-8\" ) r , w , err := os . Pipe () if err != nil { fmt . Fprintf ( rw , \"pipe: %s\\n\" , err ) return } p , err := os . StartProcess ( \"/bin/date\" , [] string { \"date\" }, & os . ProcAttr { Files : [] * os . File { nil , w , w }}) defer r . Close () w . Close () if err != nil { fmt . Fprintf ( rw , \"fork/exec: %s\\n\" , err ) return } defer p . Release () io . Copy ( rw , r ) wait , err := p . Wait () if err != nil { fmt . Fprintf ( rw , \"wait: %s\\n\" , err ) return } if ! wait . Exited () { fmt . Fprintf ( rw , \"date: %v\\n\" , wait ) return } } \u5904\u7406\u51fd\u6570 \u8c03\u7528 URL \u6d4f\u89c8\u5668\u83b7\u5f97\u54cd\u5e94 Logger() http://localhost:12345/ \uff08\u6839\uff09 oops Logger() \u5904\u7406\u51fd\u6570\u7528 w.WriteHeader(404) \u6765\u8f93\u51fa \u201c404 Not Found\u201d\u5934\u90e8\u3002 \u8fd9\u9879\u6280\u672f\u901a\u5e38\u5f88\u6709\u7528\uff0c\u65e0\u8bba\u4f55\u65f6\u670d\u52a1\u5668\u6267\u884c\u4ee3\u7801\u4ea7\u751f\u9519\u8bef\uff0c\u90fd\u53ef\u4ee5\u5e94\u7528\u7c7b\u4f3c\u8fd9\u6837\u7684\u4ee3\u7801\uff1a if err != nil { w . WriteHeader ( 400 ) return } \u53e6\u5916\u5229\u7528 logger \u5305\u7684\u51fd\u6570\uff0c\u9488\u5bf9\u6bcf\u4e2a\u8bf7\u6c42\u5728\u670d\u52a1\u5668\u7aef\u547d\u4ee4\u884c\u6253\u5370\u65e5\u671f\u3001\u65f6\u95f4\u548c URL\u3002 \u5904\u7406\u51fd\u6570 \u8c03\u7528 URL \u6d4f\u89c8\u5668\u83b7\u5f97\u54cd\u5e94 HelloServer() http://localhost:12345/go/hello hello, world! \u5305 expvar \u53ef\u4ee5\u521b\u5efa\uff08Int\uff0cFloat \u548c String \u7c7b\u578b\uff09\u53d8\u91cf\uff0c\u5e76\u5c06\u5b83\u4eec\u53d1\u5e03\u4e3a\u516c\u5171\u53d8\u91cf\u3002\u5b83\u4f1a\u5728 HTTP URL /debug/vars \u4e0a\u4ee5 JSON \u683c\u5f0f\u516c\u5e03\u3002\u901a\u5e38\u5b83\u88ab\u7528\u4e8e\u670d\u52a1\u5668\u64cd\u4f5c\u8ba1\u6570\u3002 helloRequests \u5c31\u662f\u8fd9\u6837\u4e00\u4e2a int64 \u53d8\u91cf\uff0c\u8be5\u5904\u7406\u51fd\u6570\u5bf9\u5176\u52a0 1\uff0c\u7136\u540e\u5199\u5165\u201chello world!\u201d\u5230\u6d4f\u89c8\u5668\u3002 \u5904\u7406\u51fd\u6570 \u8c03\u7528 URL \u6d4f\u89c8\u5668\u83b7\u5f97\u54cd\u5e94 Counter() http://localhost:12345/counter counter = 1 Counter() \u5237\u65b0\uff08GET \u8bf7\u6c42\uff09 counter = 2 \u8ba1\u6570\u5668\u5bf9\u8c61 ctr \u6709\u4e00\u4e2a String() \u65b9\u6cd5\uff0c\u6240\u4ee5\u5b83\u5b9e\u73b0\u4e86 expvar.Var \u63a5\u53e3\u3002\u8fd9\u4f7f\u5176\u53ef\u4ee5\u88ab\u53d1\u5e03\uff0c\u5c3d\u7ba1\u5b83\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u3002 ServeHTTP() \u51fd\u6570\u4f7f ctr \u6210\u4e3a\u5904\u7406\u5668\uff0c\u56e0\u4e3a\u5b83\u7684\u7b7e\u540d\u6b63\u786e\u5b9e\u73b0\u4e86 http.Handler \u63a5\u53e3\u3002 \u5904\u7406\u51fd\u6570 \u8c03\u7528 URL \u6d4f\u89c8\u5668\u83b7\u5f97\u54cd\u5e94 FileServer() http://localhost:12345/go/ggg.html 404 page not found FileServer(root FileSystem) Handler \u8fd4\u56de\u4e00\u4e2a\u5904\u7406\u5668\uff0c\u5b83\u4ee5 root \u4f5c\u4e3a\u6839\uff0c\u7528\u6587\u4ef6\u7cfb\u7edf\u7684\u5185\u5bb9\u54cd\u5e94 HTTP \u8bf7\u6c42\u3002\u8981\u83b7\u5f97\u64cd\u4f5c\u7cfb\u7edf\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u7528 http.Dir \uff0c\u4f8b\u5982\uff1a http . Handle ( \"/go/\" , http . FileServer ( http . Dir ( \"/tmp\" ))) \u5904\u7406\u51fd\u6570 \u8c03\u7528 URL \u6d4f\u89c8\u5668\u83b7\u5f97\u54cd\u5e94 FlagServer() http://localhost:12345/flags Flags: boolean = true root = /home/rsc \u8be5\u5904\u7406\u51fd\u6570\u4f7f\u7528\u4e86 flag \u5305\u3002 VisitAll() \u51fd\u6570\u8fed\u4ee3\u6240\u6709\u7684\u6807\u7b7e (flag)\uff0c\u6253\u5370\u5b83\u4eec\u7684\u540d\u79f0\u3001\u503c\u548c\u9ed8\u8ba4\u503c\uff08\u5f53\u4e0d\u540c\u4e8e\u201c\u503c\u201d\u65f6\uff09\u3002 \u5904\u7406\u51fd\u6570 \u8c03\u7528 URL \u6d4f\u89c8\u5668\u83b7\u5f97\u54cd\u5e94 ArgServer() http://localhost:12345/args ./elaborated_webserver.exe \u8be5\u5904\u7406\u51fd\u6570\u8fed\u4ee3 os.Args \u4ee5\u6253\u5370\u51fa\u6240\u6709\u7684\u547d\u4ee4\u884c\u53c2\u6570\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u5219\u53ea\u6709\u7a0b\u5e8f\u540d\u79f0\uff08\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u8def\u5f84\uff09\u4f1a\u88ab\u6253\u5370\u51fa\u6765\u3002 \u5904\u7406\u51fd\u6570 \u8c03\u7528 URL \u6d4f\u89c8\u5668\u83b7\u5f97\u54cd\u5e94 Channel() http://localhost:12345/chan channel send #1 Channel() \u5237\u65b0 channel send #2 \u6bcf\u5f53\u6709\u65b0\u8bf7\u6c42\u5230\u8fbe\uff0c\u901a\u9053\u7684 ServeHTTP() \u65b9\u6cd5\u4ece\u901a\u9053\u83b7\u53d6\u4e0b\u4e00\u4e2a\u6574\u6570\u5e76\u663e\u793a\u3002\u7531\u6b64\u53ef\u89c1\uff0c\u7f51\u9875\u670d\u52a1\u5668\u53ef\u4ee5\u4ece\u901a\u9053\u4e2d\u83b7\u53d6\u8981\u53d1\u9001\u7684\u54cd\u5e94\uff0c\u5b83\u53ef\u4ee5\u7531\u53e6\u4e00\u4e2a\u51fd\u6570\u4ea7\u751f\uff08\u751a\u81f3\u662f\u5ba2\u6237\u7aef\uff09\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u6b63\u662f\u4e00\u4e2a\u8fd9\u6837\u7684\u5904\u7406\u51fd\u6570\uff0c\u4f46\u4f1a\u5728 30 \u79d2\u540e\u8d85\u65f6\uff1a func ChanResponse ( w http . ResponseWriter , req * http . Request ) { timeout := make ( chan bool ) go func () { time . Sleep ( 30e9 ) timeout <- true }() select { case msg := <- messages : io . WriteString ( w , msg ) case stop := <- timeout : return } } \u5904\u7406\u51fd\u6570 \u8c03\u7528 URL \u6d4f\u89c8\u5668\u83b7\u5f97\u54cd\u5e94 DateServer() http://localhost:12345/date \u663e\u793a\u5f53\u524d\u65f6\u95f4\uff08\u7531\u4e8e\u662f\u8c03\u7528 /bin/date\uff0c\u4ec5\u5728 Unix \u4e0b\u6709\u6548\uff09 \u53ef\u80fd\u7684\u8f93\u51fa\uff1a Thu Sep 8 12:41:09 CEST 2011 \u3002 os.Pipe() \u8fd4\u56de\u4e00\u5bf9\u76f8\u5173\u8054\u7684 File \uff0c\u4ece r \u8bfb\u53d6\u6570\u636e\uff0c\u8fd4\u56de\u5df2\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u6765\u81ea\u4e8e w \u7684\u5199\u5165\u3002\u51fd\u6570\u8fd4\u56de\u8fd9\u4e24\u4e2a\u6587\u4ef6\u548c\u9519\u8bef\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff1a func Pipe () ( r * File , w * File , err error )","title":"15.8 \u7cbe\u5de7\u7684\u591a\u529f\u80fd\u7f51\u9875\u670d\u52a1\u5668"},{"location":"15.8/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u63a2\u7d22 template \u5305 \u4e0b\u4e00\u8282\uff1a \u7528 rpc \u5b9e\u73b0\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528","title":"\u94fe\u63a5"},{"location":"15.9/","text":"15.9 \u7528 rpc \u5b9e\u73b0\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528 \u00b6 Go \u7a0b\u5e8f\u4e4b\u95f4\u53ef\u4ee5\u4f7f\u7528 net/rpc \u5305\u5b9e\u73b0\u76f8\u4e92\u901a\u4fe1\uff0c\u8fd9\u662f\u53e6\u4e00\u79cd\u5ba2\u6237\u7aef-\u670d\u52a1\u5668\u5e94\u7528\u573a\u666f\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u4fbf\u7684\u9014\u5f84\uff0c\u901a\u8fc7\u7f51\u7edc\u8fde\u63a5\u8c03\u7528\u8fdc\u7a0b\u51fd\u6570\u3002\u5f53\u7136\uff0c\u4ec5\u5f53\u7a0b\u5e8f\u8fd0\u884c\u5728\u4e0d\u540c\u673a\u5668\u4e0a\u65f6\uff0c\u8fd9\u9879\u6280\u672f\u624d\u5b9e\u7528\u3002 rpc \u5305\u5efa\u7acb\u5728 gob \u5305\u4e4b\u4e0a\uff08\u89c1 12.11 \u8282 \uff09\uff0c\u5b9e\u73b0\u4e86\u81ea\u52a8\u7f16\u7801/\u89e3\u7801\u4f20\u8f93\u7684\u8de8\u7f51\u7edc\u65b9\u6cd5\u8c03\u7528\u3002 \u670d\u52a1\u5668\u7aef\u9700\u8981\u6ce8\u518c\u4e00\u4e2a\u5bf9\u8c61\u5b9e\u4f8b\uff0c\u4e0e\u5176\u7c7b\u578b\u540d\u4e00\u8d77\uff0c\u4f7f\u4e4b\u6210\u4e3a\u4e00\u9879\u53ef\u89c1\u7684\u670d\u52a1\uff1a\u5b83\u5141\u8bb8\u8fdc\u7a0b\u5ba2\u6237\u7aef\u8de8\u8d8a\u7f51\u7edc\u6216\u5176\u4ed6 I/O \u8fde\u63a5\u8bbf\u95ee\u6b64\u5bf9\u8c61\u5df2\u5bfc\u51fa\u7684\u65b9\u6cd5\u3002\u603b\u4e4b\u5c31\u662f\u5728\u7f51\u7edc\u4e0a\u66b4\u9732\u7c7b\u578b\u7684\u65b9\u6cd5\u3002 rpc \u5305\u4f7f\u7528\u4e86 http \u548c tcp \u534f\u8bae\uff0c\u4ee5\u53ca\u7528\u4e8e\u6570\u636e\u4f20\u8f93\u7684 gob \u5305\u3002\u670d\u52a1\u5668\u7aef\u53ef\u4ee5\u6ce8\u518c\u591a\u4e2a\u4e0d\u540c\u7c7b\u578b\u7684\u5bf9\u8c61\uff08\u670d\u52a1\uff09\uff0c\u4f46\u540c\u4e00\u7c7b\u578b\u7684\u591a\u4e2a\u5bf9\u8c61\u4f1a\u4ea7\u751f\u9519\u8bef\u3002 \u6211\u4eec\u8ba8\u8bba\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u578b Args \u53ca\u5176\u65b9\u6cd5 Multiply() \uff0c\u5b8c\u7f8e\u5730\u7f6e\u4e8e\u5355\u72ec\u7684\u5305\u4e2d\u3002\u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u53ef\u80fd\u7684\u9519\u8bef\u3002 \u793a\u4f8b15.21 rpc_objects.go package rpc_objects import \"net\" type Args struct { N , M int } func ( t * Args ) Multiply ( args * Args , reply * int ) net . Error { * reply = args . N * args . M return nil } \uff08 \u8bd1\u6ce8\uff1aGo \u5f53\u524d\u7248\u672c\u8981\u6c42\u6b64\u65b9\u6cd5\u8fd4\u56de\u7c7b\u578b\u4e3a error \uff0c\u4ee5\u4e0a\u793a\u4f8b\u4e2d\u8fd4\u56de net.Error \u5df2\u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1\uff0c\u89c1\u66f4\u65b0\u540e\u7684 rpc_objects.go \u3002 \uff09 \u670d\u52a1\u5668\u7aef\u4ea7\u751f\u4e00\u4e2a rpc_objects.Args \u7c7b\u578b\u7684\u5bf9\u8c61 calc \uff0c\u5e76\u7528 rpc.Register(object) \u6ce8\u518c\u3002\u8c03\u7528 HandleHTTP() \uff0c\u7136\u540e\u7528 net.Listen \u5728\u6307\u5b9a\u7684\u5730\u5740\u4e0a\u542f\u52a8\u76d1\u542c\u3002\u4e5f\u53ef\u4ee5\u6309\u540d\u79f0\u6765\u6ce8\u518c\u5bf9\u8c61\uff0c\u4f8b\u5982\uff1a rpc.RegisterName(\"Calculator\", calc) \u3002 \u4ee5\u534f\u7a0b\u542f\u52a8 http.Serve(listener, nil) \u540e\uff0c\u4f1a\u4e3a\u6bcf\u4e00\u4e2a\u8fdb\u5165 listener \u7684 HTTP \u8fde\u63a5\u521b\u5efa\u65b0\u7684\u670d\u52a1\u7ebf\u7a0b\u3002\u6211\u4eec\u5fc5\u987b\u7528\u8bf8\u5982 time.Sleep(1000e9) \u6765\u4f7f\u670d\u52a1\u5668\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u4fdd\u6301\u8fd0\u884c\u72b6\u6001\u3002 \u793a\u4f8b 15.22 rpc_server.go package main import ( \"net/http\" \"log\" \"net\" \"net/rpc\" \"time\" \"./rpc_objects\" ) func main () { calc := new ( rpc_objects . Args ) rpc . Register ( calc ) rpc . HandleHTTP () listener , e := net . Listen ( \"tcp\" , \"localhost:1234\" ) if e != nil { log . Fatal ( \"Starting RPC-server -listen error:\" , e ) } go http . Serve ( listener , nil ) time . Sleep ( 1000e9 ) } \u8f93\u51fa\uff1a Starting Process E:/Go/GoBoek/code_examples/chapter_14/rpc_server.exe ... ** 5 \u79d2\u540e\uff1a ** End Process exit status 0 \u5ba2\u6237\u7aef\u5fc5\u987b\u77e5\u6653\u5bf9\u8c61\u7c7b\u578b\u53ca\u5176\u65b9\u6cd5\u7684\u5b9a\u4e49\u3002\u6267\u884c rpc.DialHTTP() \u8fde\u63a5\u5230\u670d\u52a1\u5668\u540e\uff0c\u5c31\u53ef\u4ee5\u7528 client.Call(\"Type.Method\", args, &reply) \u8c03\u7528\u8fdc\u7a0b\u5bf9\u8c61\u7684\u65b9\u6cd5\u3002 Type \u662f\u8fdc\u7a0b\u5bf9\u8c61\u7684\u7c7b\u578b\u540d\uff0c Method \u662f\u8981\u8c03\u7528\u7684\u65b9\u6cd5\uff0c args \u662f\u7528 Args \u7c7b\u578b\u521d\u59cb\u5316\u7684\u5bf9\u8c61\uff0c reply \u662f\u4e00\u4e2a\u5fc5\u987b\u4e8b\u5148\u58f0\u660e\u7684\u53d8\u91cf\uff0c\u65b9\u6cd5\u8c03\u7528\u4ea7\u751f\u7684\u7ed3\u679c\u5c06\u5b58\u5165\u5176\u4e2d\u3002 \u793a\u4f8b 15.23 rpc_client.go package main import ( \"fmt\" \"log\" \"net/rpc\" \"./rpc_objects\" ) const serverAddress = \"localhost\" func main () { client , err := rpc . DialHTTP ( \"tcp\" , serverAddress + \":1234\" ) if err != nil { log . Fatal ( \"Error dialing:\" , err ) } // Synchronous call args := & rpc_objects . Args { 7 , 8 } var reply int err = client . Call ( \"Args.Multiply\" , args , & reply ) if err != nil { log . Fatal ( \"Args error:\" , err ) } fmt . Printf ( \"Args: %d * %d = %d\" , args . N , args . M , reply ) } \u5148\u542f\u52a8\u670d\u52a1\u5668\uff0c\u518d\u8fd0\u884c\u5ba2\u6237\u7aef\uff0c\u7136\u540e\u5c31\u80fd\u5f97\u5230\u5982\u4e0b\u8f93\u51fa\u7ed3\u679c\uff1a Starting Process E:/Go/GoBoek/code_examples/chapter_14/rpc_client.exe ... Args: 7 * 8 = 56 End Process exit status 0 \u8be5\u8fdc\u7a0b\u8c03\u7528\u4ee5\u540c\u6b65\u65b9\u5f0f\u8fdb\u884c\uff0c\u5b83\u4f1a\u7b49\u5f85\u670d\u52a1\u5668\u8fd4\u56de\u7ed3\u679c\u3002\u4e5f\u53ef\u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\u5f02\u6b65\u5730\u6267\u884c\u8c03\u7528\uff1a call1 := client . Go ( \"Args.Multiply\" , args , & reply , nil ) replyCall := <- call1 . Done \u5982\u679c\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u503c\u4e3a nil \uff0c\u8c03\u7528\u5b8c\u6210\u540e\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u901a\u9053\u3002 \u5982\u679c\u4f60\u6709\u4e00\u4e2a\u4ee5 root \u7ba1\u7406\u5458\u8eab\u4efd\u8fd0\u884c\u7684 Go \u670d\u52a1\u5668\uff0c\u60f3\u8981\u4ee5\u4e0d\u540c\u7684\u7528\u6237\u8eab\u4efd\u8fd0\u884c\u67d0\u90e8\u5206\u4ee3\u7801\uff0cBrad Fitz \u5229\u7528 rpc \u5199\u7684 go-runas \u5305\u53ef\u4ee5\u5b8c\u6210\u4efb\u52a1\uff1a https://github.com/bradfitz/go-runas \u3002\u6211\u4eec\u5c06\u4f1a\u5728 19 \u7ae0 \u770b\u5230\u4e00\u4e2a\u5b8c\u6574\u7684\u9879\u76ee\uff0c\u5b83\u662f\u4e00\u4e2a\u4f7f\u7528\u4e86 rpc \u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7cbe\u5de7\u7684\u591a\u529f\u80fd\u7f51\u9875\u670d\u52a1\u5668 \u4e0b\u4e00\u8282\uff1a \u57fa\u4e8e\u7f51\u7edc\u7684\u901a\u9053 netchan","title":"15.9 \u7528 rpc \u5b9e\u73b0\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528"},{"location":"15.9/#159-rpc","text":"Go \u7a0b\u5e8f\u4e4b\u95f4\u53ef\u4ee5\u4f7f\u7528 net/rpc \u5305\u5b9e\u73b0\u76f8\u4e92\u901a\u4fe1\uff0c\u8fd9\u662f\u53e6\u4e00\u79cd\u5ba2\u6237\u7aef-\u670d\u52a1\u5668\u5e94\u7528\u573a\u666f\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u4fbf\u7684\u9014\u5f84\uff0c\u901a\u8fc7\u7f51\u7edc\u8fde\u63a5\u8c03\u7528\u8fdc\u7a0b\u51fd\u6570\u3002\u5f53\u7136\uff0c\u4ec5\u5f53\u7a0b\u5e8f\u8fd0\u884c\u5728\u4e0d\u540c\u673a\u5668\u4e0a\u65f6\uff0c\u8fd9\u9879\u6280\u672f\u624d\u5b9e\u7528\u3002 rpc \u5305\u5efa\u7acb\u5728 gob \u5305\u4e4b\u4e0a\uff08\u89c1 12.11 \u8282 \uff09\uff0c\u5b9e\u73b0\u4e86\u81ea\u52a8\u7f16\u7801/\u89e3\u7801\u4f20\u8f93\u7684\u8de8\u7f51\u7edc\u65b9\u6cd5\u8c03\u7528\u3002 \u670d\u52a1\u5668\u7aef\u9700\u8981\u6ce8\u518c\u4e00\u4e2a\u5bf9\u8c61\u5b9e\u4f8b\uff0c\u4e0e\u5176\u7c7b\u578b\u540d\u4e00\u8d77\uff0c\u4f7f\u4e4b\u6210\u4e3a\u4e00\u9879\u53ef\u89c1\u7684\u670d\u52a1\uff1a\u5b83\u5141\u8bb8\u8fdc\u7a0b\u5ba2\u6237\u7aef\u8de8\u8d8a\u7f51\u7edc\u6216\u5176\u4ed6 I/O \u8fde\u63a5\u8bbf\u95ee\u6b64\u5bf9\u8c61\u5df2\u5bfc\u51fa\u7684\u65b9\u6cd5\u3002\u603b\u4e4b\u5c31\u662f\u5728\u7f51\u7edc\u4e0a\u66b4\u9732\u7c7b\u578b\u7684\u65b9\u6cd5\u3002 rpc \u5305\u4f7f\u7528\u4e86 http \u548c tcp \u534f\u8bae\uff0c\u4ee5\u53ca\u7528\u4e8e\u6570\u636e\u4f20\u8f93\u7684 gob \u5305\u3002\u670d\u52a1\u5668\u7aef\u53ef\u4ee5\u6ce8\u518c\u591a\u4e2a\u4e0d\u540c\u7c7b\u578b\u7684\u5bf9\u8c61\uff08\u670d\u52a1\uff09\uff0c\u4f46\u540c\u4e00\u7c7b\u578b\u7684\u591a\u4e2a\u5bf9\u8c61\u4f1a\u4ea7\u751f\u9519\u8bef\u3002 \u6211\u4eec\u8ba8\u8bba\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u578b Args \u53ca\u5176\u65b9\u6cd5 Multiply() \uff0c\u5b8c\u7f8e\u5730\u7f6e\u4e8e\u5355\u72ec\u7684\u5305\u4e2d\u3002\u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u53ef\u80fd\u7684\u9519\u8bef\u3002 \u793a\u4f8b15.21 rpc_objects.go package rpc_objects import \"net\" type Args struct { N , M int } func ( t * Args ) Multiply ( args * Args , reply * int ) net . Error { * reply = args . N * args . M return nil } \uff08 \u8bd1\u6ce8\uff1aGo \u5f53\u524d\u7248\u672c\u8981\u6c42\u6b64\u65b9\u6cd5\u8fd4\u56de\u7c7b\u578b\u4e3a error \uff0c\u4ee5\u4e0a\u793a\u4f8b\u4e2d\u8fd4\u56de net.Error \u5df2\u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1\uff0c\u89c1\u66f4\u65b0\u540e\u7684 rpc_objects.go \u3002 \uff09 \u670d\u52a1\u5668\u7aef\u4ea7\u751f\u4e00\u4e2a rpc_objects.Args \u7c7b\u578b\u7684\u5bf9\u8c61 calc \uff0c\u5e76\u7528 rpc.Register(object) \u6ce8\u518c\u3002\u8c03\u7528 HandleHTTP() \uff0c\u7136\u540e\u7528 net.Listen \u5728\u6307\u5b9a\u7684\u5730\u5740\u4e0a\u542f\u52a8\u76d1\u542c\u3002\u4e5f\u53ef\u4ee5\u6309\u540d\u79f0\u6765\u6ce8\u518c\u5bf9\u8c61\uff0c\u4f8b\u5982\uff1a rpc.RegisterName(\"Calculator\", calc) \u3002 \u4ee5\u534f\u7a0b\u542f\u52a8 http.Serve(listener, nil) \u540e\uff0c\u4f1a\u4e3a\u6bcf\u4e00\u4e2a\u8fdb\u5165 listener \u7684 HTTP \u8fde\u63a5\u521b\u5efa\u65b0\u7684\u670d\u52a1\u7ebf\u7a0b\u3002\u6211\u4eec\u5fc5\u987b\u7528\u8bf8\u5982 time.Sleep(1000e9) \u6765\u4f7f\u670d\u52a1\u5668\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u4fdd\u6301\u8fd0\u884c\u72b6\u6001\u3002 \u793a\u4f8b 15.22 rpc_server.go package main import ( \"net/http\" \"log\" \"net\" \"net/rpc\" \"time\" \"./rpc_objects\" ) func main () { calc := new ( rpc_objects . Args ) rpc . Register ( calc ) rpc . HandleHTTP () listener , e := net . Listen ( \"tcp\" , \"localhost:1234\" ) if e != nil { log . Fatal ( \"Starting RPC-server -listen error:\" , e ) } go http . Serve ( listener , nil ) time . Sleep ( 1000e9 ) } \u8f93\u51fa\uff1a Starting Process E:/Go/GoBoek/code_examples/chapter_14/rpc_server.exe ... ** 5 \u79d2\u540e\uff1a ** End Process exit status 0 \u5ba2\u6237\u7aef\u5fc5\u987b\u77e5\u6653\u5bf9\u8c61\u7c7b\u578b\u53ca\u5176\u65b9\u6cd5\u7684\u5b9a\u4e49\u3002\u6267\u884c rpc.DialHTTP() \u8fde\u63a5\u5230\u670d\u52a1\u5668\u540e\uff0c\u5c31\u53ef\u4ee5\u7528 client.Call(\"Type.Method\", args, &reply) \u8c03\u7528\u8fdc\u7a0b\u5bf9\u8c61\u7684\u65b9\u6cd5\u3002 Type \u662f\u8fdc\u7a0b\u5bf9\u8c61\u7684\u7c7b\u578b\u540d\uff0c Method \u662f\u8981\u8c03\u7528\u7684\u65b9\u6cd5\uff0c args \u662f\u7528 Args \u7c7b\u578b\u521d\u59cb\u5316\u7684\u5bf9\u8c61\uff0c reply \u662f\u4e00\u4e2a\u5fc5\u987b\u4e8b\u5148\u58f0\u660e\u7684\u53d8\u91cf\uff0c\u65b9\u6cd5\u8c03\u7528\u4ea7\u751f\u7684\u7ed3\u679c\u5c06\u5b58\u5165\u5176\u4e2d\u3002 \u793a\u4f8b 15.23 rpc_client.go package main import ( \"fmt\" \"log\" \"net/rpc\" \"./rpc_objects\" ) const serverAddress = \"localhost\" func main () { client , err := rpc . DialHTTP ( \"tcp\" , serverAddress + \":1234\" ) if err != nil { log . Fatal ( \"Error dialing:\" , err ) } // Synchronous call args := & rpc_objects . Args { 7 , 8 } var reply int err = client . Call ( \"Args.Multiply\" , args , & reply ) if err != nil { log . Fatal ( \"Args error:\" , err ) } fmt . Printf ( \"Args: %d * %d = %d\" , args . N , args . M , reply ) } \u5148\u542f\u52a8\u670d\u52a1\u5668\uff0c\u518d\u8fd0\u884c\u5ba2\u6237\u7aef\uff0c\u7136\u540e\u5c31\u80fd\u5f97\u5230\u5982\u4e0b\u8f93\u51fa\u7ed3\u679c\uff1a Starting Process E:/Go/GoBoek/code_examples/chapter_14/rpc_client.exe ... Args: 7 * 8 = 56 End Process exit status 0 \u8be5\u8fdc\u7a0b\u8c03\u7528\u4ee5\u540c\u6b65\u65b9\u5f0f\u8fdb\u884c\uff0c\u5b83\u4f1a\u7b49\u5f85\u670d\u52a1\u5668\u8fd4\u56de\u7ed3\u679c\u3002\u4e5f\u53ef\u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\u5f02\u6b65\u5730\u6267\u884c\u8c03\u7528\uff1a call1 := client . Go ( \"Args.Multiply\" , args , & reply , nil ) replyCall := <- call1 . Done \u5982\u679c\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u503c\u4e3a nil \uff0c\u8c03\u7528\u5b8c\u6210\u540e\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u901a\u9053\u3002 \u5982\u679c\u4f60\u6709\u4e00\u4e2a\u4ee5 root \u7ba1\u7406\u5458\u8eab\u4efd\u8fd0\u884c\u7684 Go \u670d\u52a1\u5668\uff0c\u60f3\u8981\u4ee5\u4e0d\u540c\u7684\u7528\u6237\u8eab\u4efd\u8fd0\u884c\u67d0\u90e8\u5206\u4ee3\u7801\uff0cBrad Fitz \u5229\u7528 rpc \u5199\u7684 go-runas \u5305\u53ef\u4ee5\u5b8c\u6210\u4efb\u52a1\uff1a https://github.com/bradfitz/go-runas \u3002\u6211\u4eec\u5c06\u4f1a\u5728 19 \u7ae0 \u770b\u5230\u4e00\u4e2a\u5b8c\u6574\u7684\u9879\u76ee\uff0c\u5b83\u662f\u4e00\u4e2a\u4f7f\u7528\u4e86 rpc \u7684\u5e94\u7528\u7a0b\u5e8f\u3002","title":"15.9 \u7528 rpc \u5b9e\u73b0\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528"},{"location":"15.9/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7cbe\u5de7\u7684\u591a\u529f\u80fd\u7f51\u9875\u670d\u52a1\u5668 \u4e0b\u4e00\u8282\uff1a \u57fa\u4e8e\u7f51\u7edc\u7684\u901a\u9053 netchan","title":"\u94fe\u63a5"},{"location":"16.0/","text":"16.0 \u5e38\u89c1\u7684\u9677\u9631\u4e0e\u9519\u8bef \u00b6 \u5728\u4e4b\u524d\u7684\u5185\u5bb9\u4e2d\uff0c\u6709\u65f6\u5019\u4f7f\u7528 !!...!! \u6807\u8bb0\u8b66\u544a Go \u8bed\u8a00\u4e2d\u7684\u4e00\u4e9b\u9519\u8bef\u4f7f\u7528\u65b9\u5f0f\u3002\u5f53\u4f60\u5728\u7f16\u7a0b\u65f6\u5019\u9047\u5230\u7684\u4e00\u4e2a\u56f0\u96be\uff0c\u53ef\u4ee5\u786e\u5b9a\u672c\u4e66\u7279\u5b9a\u7684\u7ae0\u8282\u80fd\u627e\u5230\u7c7b\u4f3c\u7684\u4e3b\u9898\u3002\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u8fd9\u91cc\u5217\u51fa\u4e86\u4e00\u4e9b\u5e38\u89c1\u9677\u9631\uff0c\u4ee5\u4fbf\u4e8e\u4f60\u80fd\u53d1\u73b0\u66f4\u591a\u7684\u89e3\u91ca\u548c\u4f8b\u5b50\uff1a \u6c38\u8fdc\u4e0d\u8981\u4f7f\u7528\u5f62\u5982 var p*a \u58f0\u660e\u53d8\u91cf\uff0c\u8fd9\u4f1a\u6df7\u6dc6\u6307\u9488\u58f0\u660e\u548c\u4e58\u6cd5\u8fd0\u7b97\uff08\u53c2\u8003 4.9 \u5c0f\u8282 \uff09 \u6c38\u8fdc\u4e0d\u8981\u5728 for \u5faa\u73af\u81ea\u8eab\u4e2d\u6539\u53d8\u8ba1\u6570\u5668\u53d8\u91cf\uff08\u53c2\u8003 5.4 \u5c0f\u8282 \uff09 \u6c38\u8fdc\u4e0d\u8981\u5728 for-range \u5faa\u73af\u4e2d\u4f7f\u7528\u4e00\u4e2a\u503c\u53bb\u6539\u53d8\u81ea\u8eab\u7684\u503c\uff08\u53c2\u8003 5.4.4 \u5c0f\u8282 \uff09 \u6c38\u8fdc\u4e0d\u8981\u5c06 goto \u548c\u524d\u7f6e\u6807\u7b7e\u4e00\u8d77\u4f7f\u7528\uff08\u53c2\u8003 5.6 \u5c0f\u8282 \uff09 \u6c38\u8fdc\u4e0d\u8981\u5fd8\u8bb0\u5728\u51fd\u6570\u540d\uff08\u53c2\u8003 \u7b2c 6 \u7ae0 \uff09\u540e\u52a0\u62ec\u53f7 () \uff0c\u5c24\u5176\u662f\u8c03\u7528\u4e00\u4e2a\u5bf9\u8c61\u7684\u65b9\u6cd5\u6216\u8005\u4f7f\u7528\u533f\u540d\u51fd\u6570\u542f\u52a8\u4e00\u4e2a\u534f\u7a0b\u65f6 \u6c38\u8fdc\u4e0d\u8981\u4f7f\u7528 new() \u4e00\u4e2a map \uff0c\u4e00\u76f4\u4f7f\u7528 make() \uff08\u53c2\u8003 \u7b2c 8 \u7ae0 \uff09 \u5f53\u4e3a\u4e00\u4e2a\u7c7b\u578b\u5b9a\u4e49\u4e00\u4e2a String() \u65b9\u6cd5\u65f6\uff0c\u4e0d\u8981\u4f7f\u7528 fmt.Print \u6216\u8005\u7c7b\u4f3c\u7684\u4ee3\u7801\uff08\u53c2\u8003 10.7 \u5c0f\u8282 \uff09 \u6c38\u8fdc\u4e0d\u8981\u5fd8\u8bb0\u5f53\u7ec8\u6b62\u7f13\u5b58\u5199\u5165\u65f6\uff0c\u4f7f\u7528 Flush() \u51fd\u6570\uff08\u53c2\u8003 12.2.3 \u5c0f\u8282 \uff09 \u6c38\u8fdc\u4e0d\u8981\u5ffd\u7565\u9519\u8bef\u63d0\u793a\uff0c\u5ffd\u7565\u9519\u8bef\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\uff08\u53c2\u8003 13.1 \u5c0f\u8282 \uff09 \u4e0d\u8981\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\u6216\u8005\u5171\u4eab\u5185\u5b58\uff0c\u8fd9\u4f1a\u4f7f\u5e76\u53d1\u6267\u884c\u7684\u4ee3\u7801\u53d8\u5f97\u4e0d\u5b89\u5168\uff08\u53c2\u8003 14.1 \u5c0f\u8282 \uff09 println() \u51fd\u6570\u4ec5\u4ec5\u662f\u7528\u4e8e\u8c03\u8bd5\u7684\u76ee\u7684 \u6700\u4f73\u5b9e\u8df5\uff1a\u5bf9\u6bd4\u4ee5\u4e0b\u4f7f\u7528\u65b9\u5f0f\uff1a \u4f7f\u7528\u6b63\u786e\u7684\u65b9\u5f0f\u521d\u59cb\u5316\u4e00\u4e2a\u5143\u7d20\u662f\u5207\u7247\u7684\u6620\u5c04\uff0c\u4f8b\u5982 map[type]slice \uff08\u53c2\u8003 8.1.3 \u5c0f\u8282 \uff09 \u4e00\u76f4\u4f7f\u7528\u9017\u53f7 ok \u6a21\u5f0f\u6216\u8005 checked \u5f62\u5f0f\u4f5c\u4e3a\u7c7b\u578b\u65ad\u8a00\uff08\u53c2\u8003 11.3 \u5c0f\u8282 \uff09 \u4f7f\u7528\u4e00\u4e2a\u5de5\u5382\u51fd\u6570\u521b\u5efa\u5e76\u521d\u59cb\u5316\u81ea\u5df1\u5b9a\u4e49\u7c7b\u578b\uff08\u53c2\u8003 10.2 \u5c0f\u8282 - 18.4 \u5c0f\u8282 \uff09 \u4ec5\u5f53\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u65b9\u6cd5\u60f3\u6539\u53d8\u7ed3\u6784\u4f53\u65f6\uff0c\u4f7f\u7528\u7ed3\u6784\u4f53\u6307\u9488\u4f5c\u4e3a\u65b9\u6cd5\u7684\u63a5\u53d7\u8005\uff0c\u5426\u5219\u4f7f\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u503c\u7c7b\u578b 10.6.3 \u5c0f\u8282 \u672c\u7ae0\u4e3b\u8981\u6c47\u603b\u4e86 Go \u8bed\u8a00\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u6700\u5e38\u89c1\u7684\u9519\u8bef\u548c\u6ce8\u610f\u4e8b\u9879\u3002\u5728\u4e4b\u524d\u7684\u7ae0\u8282\u5df2\u7ecf\u6d89\u53ca\u5230\u4e86\u5b8c\u6574\u7684\u793a\u4f8b\u548c\u89e3\u91ca\uff0c\u4f60\u5e94\u8be5\u505a\u7684\u4e0d\u4ec5\u4ec5\u662f\u9605\u8bfb\u8fd9\u6bb5\u7684\u6807\u9898\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u7ae0\uff1a \u4f7f\u7528SMTP\uff08\u7b80\u5355\u90ae\u4ef6\u4f20\u8f93\u534f\u8bae\uff09\u53d1\u9001\u90ae\u4ef6 \u4e0b\u4e00\u8282\uff1a \u8bef\u7528\u77ed\u58f0\u660e\u5bfc\u81f4\u53d8\u91cf\u8986\u76d6","title":"16.0 \u5e38\u89c1\u7684\u9677\u9631\u4e0e\u9519\u8bef"},{"location":"16.0/#160","text":"\u5728\u4e4b\u524d\u7684\u5185\u5bb9\u4e2d\uff0c\u6709\u65f6\u5019\u4f7f\u7528 !!...!! \u6807\u8bb0\u8b66\u544a Go \u8bed\u8a00\u4e2d\u7684\u4e00\u4e9b\u9519\u8bef\u4f7f\u7528\u65b9\u5f0f\u3002\u5f53\u4f60\u5728\u7f16\u7a0b\u65f6\u5019\u9047\u5230\u7684\u4e00\u4e2a\u56f0\u96be\uff0c\u53ef\u4ee5\u786e\u5b9a\u672c\u4e66\u7279\u5b9a\u7684\u7ae0\u8282\u80fd\u627e\u5230\u7c7b\u4f3c\u7684\u4e3b\u9898\u3002\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u8fd9\u91cc\u5217\u51fa\u4e86\u4e00\u4e9b\u5e38\u89c1\u9677\u9631\uff0c\u4ee5\u4fbf\u4e8e\u4f60\u80fd\u53d1\u73b0\u66f4\u591a\u7684\u89e3\u91ca\u548c\u4f8b\u5b50\uff1a \u6c38\u8fdc\u4e0d\u8981\u4f7f\u7528\u5f62\u5982 var p*a \u58f0\u660e\u53d8\u91cf\uff0c\u8fd9\u4f1a\u6df7\u6dc6\u6307\u9488\u58f0\u660e\u548c\u4e58\u6cd5\u8fd0\u7b97\uff08\u53c2\u8003 4.9 \u5c0f\u8282 \uff09 \u6c38\u8fdc\u4e0d\u8981\u5728 for \u5faa\u73af\u81ea\u8eab\u4e2d\u6539\u53d8\u8ba1\u6570\u5668\u53d8\u91cf\uff08\u53c2\u8003 5.4 \u5c0f\u8282 \uff09 \u6c38\u8fdc\u4e0d\u8981\u5728 for-range \u5faa\u73af\u4e2d\u4f7f\u7528\u4e00\u4e2a\u503c\u53bb\u6539\u53d8\u81ea\u8eab\u7684\u503c\uff08\u53c2\u8003 5.4.4 \u5c0f\u8282 \uff09 \u6c38\u8fdc\u4e0d\u8981\u5c06 goto \u548c\u524d\u7f6e\u6807\u7b7e\u4e00\u8d77\u4f7f\u7528\uff08\u53c2\u8003 5.6 \u5c0f\u8282 \uff09 \u6c38\u8fdc\u4e0d\u8981\u5fd8\u8bb0\u5728\u51fd\u6570\u540d\uff08\u53c2\u8003 \u7b2c 6 \u7ae0 \uff09\u540e\u52a0\u62ec\u53f7 () \uff0c\u5c24\u5176\u662f\u8c03\u7528\u4e00\u4e2a\u5bf9\u8c61\u7684\u65b9\u6cd5\u6216\u8005\u4f7f\u7528\u533f\u540d\u51fd\u6570\u542f\u52a8\u4e00\u4e2a\u534f\u7a0b\u65f6 \u6c38\u8fdc\u4e0d\u8981\u4f7f\u7528 new() \u4e00\u4e2a map \uff0c\u4e00\u76f4\u4f7f\u7528 make() \uff08\u53c2\u8003 \u7b2c 8 \u7ae0 \uff09 \u5f53\u4e3a\u4e00\u4e2a\u7c7b\u578b\u5b9a\u4e49\u4e00\u4e2a String() \u65b9\u6cd5\u65f6\uff0c\u4e0d\u8981\u4f7f\u7528 fmt.Print \u6216\u8005\u7c7b\u4f3c\u7684\u4ee3\u7801\uff08\u53c2\u8003 10.7 \u5c0f\u8282 \uff09 \u6c38\u8fdc\u4e0d\u8981\u5fd8\u8bb0\u5f53\u7ec8\u6b62\u7f13\u5b58\u5199\u5165\u65f6\uff0c\u4f7f\u7528 Flush() \u51fd\u6570\uff08\u53c2\u8003 12.2.3 \u5c0f\u8282 \uff09 \u6c38\u8fdc\u4e0d\u8981\u5ffd\u7565\u9519\u8bef\u63d0\u793a\uff0c\u5ffd\u7565\u9519\u8bef\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\uff08\u53c2\u8003 13.1 \u5c0f\u8282 \uff09 \u4e0d\u8981\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\u6216\u8005\u5171\u4eab\u5185\u5b58\uff0c\u8fd9\u4f1a\u4f7f\u5e76\u53d1\u6267\u884c\u7684\u4ee3\u7801\u53d8\u5f97\u4e0d\u5b89\u5168\uff08\u53c2\u8003 14.1 \u5c0f\u8282 \uff09 println() \u51fd\u6570\u4ec5\u4ec5\u662f\u7528\u4e8e\u8c03\u8bd5\u7684\u76ee\u7684 \u6700\u4f73\u5b9e\u8df5\uff1a\u5bf9\u6bd4\u4ee5\u4e0b\u4f7f\u7528\u65b9\u5f0f\uff1a \u4f7f\u7528\u6b63\u786e\u7684\u65b9\u5f0f\u521d\u59cb\u5316\u4e00\u4e2a\u5143\u7d20\u662f\u5207\u7247\u7684\u6620\u5c04\uff0c\u4f8b\u5982 map[type]slice \uff08\u53c2\u8003 8.1.3 \u5c0f\u8282 \uff09 \u4e00\u76f4\u4f7f\u7528\u9017\u53f7 ok \u6a21\u5f0f\u6216\u8005 checked \u5f62\u5f0f\u4f5c\u4e3a\u7c7b\u578b\u65ad\u8a00\uff08\u53c2\u8003 11.3 \u5c0f\u8282 \uff09 \u4f7f\u7528\u4e00\u4e2a\u5de5\u5382\u51fd\u6570\u521b\u5efa\u5e76\u521d\u59cb\u5316\u81ea\u5df1\u5b9a\u4e49\u7c7b\u578b\uff08\u53c2\u8003 10.2 \u5c0f\u8282 - 18.4 \u5c0f\u8282 \uff09 \u4ec5\u5f53\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u65b9\u6cd5\u60f3\u6539\u53d8\u7ed3\u6784\u4f53\u65f6\uff0c\u4f7f\u7528\u7ed3\u6784\u4f53\u6307\u9488\u4f5c\u4e3a\u65b9\u6cd5\u7684\u63a5\u53d7\u8005\uff0c\u5426\u5219\u4f7f\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u503c\u7c7b\u578b 10.6.3 \u5c0f\u8282 \u672c\u7ae0\u4e3b\u8981\u6c47\u603b\u4e86 Go \u8bed\u8a00\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u6700\u5e38\u89c1\u7684\u9519\u8bef\u548c\u6ce8\u610f\u4e8b\u9879\u3002\u5728\u4e4b\u524d\u7684\u7ae0\u8282\u5df2\u7ecf\u6d89\u53ca\u5230\u4e86\u5b8c\u6574\u7684\u793a\u4f8b\u548c\u89e3\u91ca\uff0c\u4f60\u5e94\u8be5\u505a\u7684\u4e0d\u4ec5\u4ec5\u662f\u9605\u8bfb\u8fd9\u6bb5\u7684\u6807\u9898\u3002","title":"16.0 \u5e38\u89c1\u7684\u9677\u9631\u4e0e\u9519\u8bef"},{"location":"16.0/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u7ae0\uff1a \u4f7f\u7528SMTP\uff08\u7b80\u5355\u90ae\u4ef6\u4f20\u8f93\u534f\u8bae\uff09\u53d1\u9001\u90ae\u4ef6 \u4e0b\u4e00\u8282\uff1a \u8bef\u7528\u77ed\u58f0\u660e\u5bfc\u81f4\u53d8\u91cf\u8986\u76d6","title":"\u94fe\u63a5"},{"location":"16.1/","text":"16.1 \u8bef\u7528\u77ed\u58f0\u660e\u5bfc\u81f4\u53d8\u91cf\u8986\u76d6 \u00b6 var remember bool = false if something { remember := true //\u9519\u8bef } // \u4f7f\u7528remember \u5728\u6b64\u4ee3\u7801\u6bb5\u4e2d\uff0c remember \u53d8\u91cf\u6c38\u8fdc\u4e0d\u4f1a\u5728 if \u8bed\u53e5\u5916\u9762\u53d8\u6210 true \uff0c\u5982\u679c something \u4e3a true \uff0c\u7531\u4e8e\u4f7f\u7528\u4e86\u77ed\u58f0\u660e := \uff0c if \u8bed\u53e5\u5185\u90e8\u7684\u65b0\u53d8\u91cf remember \u5c06\u8986\u76d6\u5916\u9762\u7684 remember \u53d8\u91cf\uff0c\u5e76\u4e14\u8be5\u53d8\u91cf\u7684\u503c\u4e3a true \uff0c\u4f46\u662f\u5728 if \u8bed\u53e5\u5916\u9762\uff0c\u53d8\u91cf remember \u7684\u503c\u53d8\u6210\u4e86 false \uff0c\u6240\u4ee5\u6b63\u786e\u7684\u5199\u6cd5\u5e94\u8be5\u662f\uff1a if something { remember = true } \u6b64\u7c7b\u9519\u8bef\u4e5f\u5bb9\u6613\u5728 for \u5faa\u73af\u4e2d\u51fa\u73b0\uff0c\u5c24\u5176\u5f53\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5177\u540d\u53d8\u91cf\u65f6\u96be\u4e8e\u5bdf\u89c9\uff0c\u4f8b\u5982\u4ee5\u4e0b\u7684\u4ee3\u7801\u6bb5\uff1a func shadow () ( err error ) { x , err := check1 () // x \u662f\u65b0\u521b\u5efa\u53d8\u91cf\uff0cerr \u662f\u88ab\u8d4b\u503c if err != nil { return // \u6b63\u786e\u8fd4\u56de err } if y , err := check2 ( x ); err != nil { // y \u548c if \u8bed\u53e5\u4e2d err \u88ab\u521b\u5efa return // if \u8bed\u53e5\u4e2d\u7684 err \u8986\u76d6\u5916\u9762\u7684 err\uff0c\u6240\u4ee5\u9519\u8bef\u7684\u8fd4\u56de nil \uff01 } else { fmt . Println ( y ) } return } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5e38\u89c1\u7684\u9677\u9631\u4e0e\u9519\u8bef \u4e0b\u4e00\u8282\uff1a \u8bef\u7528\u5b57\u7b26\u4e32","title":"16.1 \u8bef\u7528\u77ed\u58f0\u660e\u5bfc\u81f4\u53d8\u91cf\u8986\u76d6"},{"location":"16.1/#161","text":"var remember bool = false if something { remember := true //\u9519\u8bef } // \u4f7f\u7528remember \u5728\u6b64\u4ee3\u7801\u6bb5\u4e2d\uff0c remember \u53d8\u91cf\u6c38\u8fdc\u4e0d\u4f1a\u5728 if \u8bed\u53e5\u5916\u9762\u53d8\u6210 true \uff0c\u5982\u679c something \u4e3a true \uff0c\u7531\u4e8e\u4f7f\u7528\u4e86\u77ed\u58f0\u660e := \uff0c if \u8bed\u53e5\u5185\u90e8\u7684\u65b0\u53d8\u91cf remember \u5c06\u8986\u76d6\u5916\u9762\u7684 remember \u53d8\u91cf\uff0c\u5e76\u4e14\u8be5\u53d8\u91cf\u7684\u503c\u4e3a true \uff0c\u4f46\u662f\u5728 if \u8bed\u53e5\u5916\u9762\uff0c\u53d8\u91cf remember \u7684\u503c\u53d8\u6210\u4e86 false \uff0c\u6240\u4ee5\u6b63\u786e\u7684\u5199\u6cd5\u5e94\u8be5\u662f\uff1a if something { remember = true } \u6b64\u7c7b\u9519\u8bef\u4e5f\u5bb9\u6613\u5728 for \u5faa\u73af\u4e2d\u51fa\u73b0\uff0c\u5c24\u5176\u5f53\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5177\u540d\u53d8\u91cf\u65f6\u96be\u4e8e\u5bdf\u89c9\uff0c\u4f8b\u5982\u4ee5\u4e0b\u7684\u4ee3\u7801\u6bb5\uff1a func shadow () ( err error ) { x , err := check1 () // x \u662f\u65b0\u521b\u5efa\u53d8\u91cf\uff0cerr \u662f\u88ab\u8d4b\u503c if err != nil { return // \u6b63\u786e\u8fd4\u56de err } if y , err := check2 ( x ); err != nil { // y \u548c if \u8bed\u53e5\u4e2d err \u88ab\u521b\u5efa return // if \u8bed\u53e5\u4e2d\u7684 err \u8986\u76d6\u5916\u9762\u7684 err\uff0c\u6240\u4ee5\u9519\u8bef\u7684\u8fd4\u56de nil \uff01 } else { fmt . Println ( y ) } return }","title":"16.1 \u8bef\u7528\u77ed\u58f0\u660e\u5bfc\u81f4\u53d8\u91cf\u8986\u76d6"},{"location":"16.1/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5e38\u89c1\u7684\u9677\u9631\u4e0e\u9519\u8bef \u4e0b\u4e00\u8282\uff1a \u8bef\u7528\u5b57\u7b26\u4e32","title":"\u94fe\u63a5"},{"location":"16.10/","text":"16.10 \u7cdf\u7cd5\u7684\u9519\u8bef\u5904\u7406 \u00b6 \u8bd1\u8005\u6ce8\uff1a\u8be5\u5c0f\u7ed3\u5173\u4e8e\u9519\u8bef\u5904\u7406\u7684\u89c2\u70b9\uff0c\u8bd1\u8005\u5e76\u4e0d\u5b8c\u5168\u8d5e\u540c\uff0c\u5173\u4e8e\u672c\u5c0f\u7ed3\u7684\u90e8\u5206\u60f3\u6cd5\u8bf7\u53c2\u8003 \u5173\u4e8e 16.10.2 \u5c0f\u8282\u9519\u8bef\u5904\u7406\u7684\u4e00\u4e9b\u89c1\u89e3 \u3002 \u4f9d\u9644\u4e8e \u7b2c 13 \u7ae0 \u6a21\u5f0f\u7684\u63cf\u8ff0\u548c \u7b2c 17.1 \u5c0f\u8282 \u4e0e \u7b2c 17.2.4 \u5c0f\u8282 \u7684\u603b\u7ed3\u3002 16.10.1 \u4e0d\u8981\u4f7f\u7528\u5e03\u5c14\u503c\uff1a \u00b6 \u50cf\u4e0b\u9762\u4ee3\u7801\u4e00\u6837\uff0c\u521b\u5efa\u4e00\u4e2a\u5e03\u5c14\u578b\u53d8\u91cf\u7528\u4e8e\u6d4b\u8bd5\u9519\u8bef\u6761\u4ef6\u662f\u591a\u4f59\u7684\uff1a var good bool // \u6d4b\u8bd5\u4e00\u4e2a\u9519\u8bef\uff0c`good` \u88ab\u8d4b\u4e3a `true` \u6216\u8005 `false` if ! good { return errors . New ( \"things aren\u2019t good\" ) } \u7acb\u5373\u68c0\u6d4b\u4e00\u4e2a\u9519\u8bef\uff1a ... err1 := api . Func1 () if err1 != nil { \u2026 } 16.10.2 \u907f\u514d\u9519\u8bef\u68c0\u6d4b\u4f7f\u4ee3\u7801\u53d8\u5f97\u6df7\u4e71\uff1a \u00b6 \u907f\u514d\u5199\u51fa\u8fd9\u6837\u7684\u4ee3\u7801\uff1a ... err1 := api . Func1 () if err1 != nil { fmt . Println ( \"err: \" + err . Error ()) return } err2 := api . Func2 () if err2 != nil { ... return } \u9996\u5148\uff0c\u5305\u62ec\u5728\u4e00\u4e2a\u521d\u59cb\u5316\u7684 if \u8bed\u53e5\u4e2d\u5bf9\u51fd\u6570\u7684\u8c03\u7528\u3002\u4f46\u5373\u4f7f\u4ee3\u7801\u4e2d\u5230\u5904\u90fd\u662f\u4ee5 if \u8bed\u53e5\u7684\u5f62\u5f0f\u901a\u77e5\u9519\u8bef\uff08\u901a\u8fc7\u6253\u5370\u9519\u8bef\u4fe1\u606f\uff09\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5f88\u96be\u5206\u8fa8\u4ec0\u4e48\u662f\u6b63\u5e38\u7684\u7a0b\u5e8f\u903b\u8f91\uff0c\u4ec0\u4e48\u662f\u9519\u8bef\u68c0\u6d4b\u6216\u9519\u8bef\u901a\u77e5\u3002\u8fd8\u9700\u6ce8\u610f\u7684\u662f\uff0c\u5927\u90e8\u5206\u4ee3\u7801\u90fd\u662f\u81f4\u529b\u4e8e\u9519\u8bef\u7684\u68c0\u6d4b\u3002\u901a\u5e38\u89e3\u51b3\u6b64\u95ee\u9898\u7684\u597d\u529e\u6cd5\u662f\u5c3d\u53ef\u80fd\u4ee5\u95ed\u5305\u7684\u5f62\u5f0f\u5c01\u88c5\u4f60\u7684\u9519\u8bef\u68c0\u6d4b\uff0c\u4f8b\u5982\u4e0b\u9762\u7684\u4ee3\u7801\uff1a func httpRequestHandler ( w http . ResponseWriter , req * http . Request ) { err := func () error { if req . Method != \"GET\" { return errors . New ( \"expected GET\" ) } if input := parseInput ( req ); input != \"command\" { return errors . New ( \"malformed command\" ) } // \u53ef\u4ee5\u5728\u6b64\u8fdb\u884c\u5176\u4ed6\u7684\u9519\u8bef\u68c0\u6d4b } () if err != nil { w . WriteHeader ( 400 ) io . WriteString ( w , err ) return } doSomething () ... \u8fd9\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5f88\u5bb9\u6613\u5206\u8fa8\u51fa\u9519\u8bef\u68c0\u6d4b\u3001\u9519\u8bef\u901a\u77e5\u548c\u6b63\u5e38\u7684\u7a0b\u5e8f\u903b\u8f91\uff08\u66f4\u8be6\u7ec6\u7684\u65b9\u5f0f\u53c2\u8003 \u7b2c 13.5 \u5c0f\u8282 \uff09\u3002 \u5728\u5f00\u59cb\u9605\u8bfb \u7b2c 17 \u7ae0 \u524d\uff0c\u5148\u56de\u7b54\u4e0b\u5217 2 \u4e2a\u95ee\u9898\uff1a \u95ee\u9898 16.1\uff1a\u603b\u7ed3\u4f60\u80fd\u8bb0\u4f4f\u7684\u6240\u6709\u5173\u4e8e , ok \u6a21\u5f0f\u7684\u60c5\u51b5\u3002 \u95ee\u9898 16.2\uff1a\u603b\u7ed3\u4f60\u80fd\u8bb0\u4f4f\u7684\u6240\u6709\u5173\u4e8e defer \u6a21\u5f0f\u7684\u60c5\u51b5\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u95ed\u5305\u548c\u534f\u7a0b\u7684\u4f7f\u7528 \u4e0b\u4e00\u7ae0\uff1a Go \u8bed\u8a00\u6a21\u5f0f","title":"16.10 \u7cdf\u7cd5\u7684\u9519\u8bef\u5904\u7406"},{"location":"16.10/#1610","text":"\u8bd1\u8005\u6ce8\uff1a\u8be5\u5c0f\u7ed3\u5173\u4e8e\u9519\u8bef\u5904\u7406\u7684\u89c2\u70b9\uff0c\u8bd1\u8005\u5e76\u4e0d\u5b8c\u5168\u8d5e\u540c\uff0c\u5173\u4e8e\u672c\u5c0f\u7ed3\u7684\u90e8\u5206\u60f3\u6cd5\u8bf7\u53c2\u8003 \u5173\u4e8e 16.10.2 \u5c0f\u8282\u9519\u8bef\u5904\u7406\u7684\u4e00\u4e9b\u89c1\u89e3 \u3002 \u4f9d\u9644\u4e8e \u7b2c 13 \u7ae0 \u6a21\u5f0f\u7684\u63cf\u8ff0\u548c \u7b2c 17.1 \u5c0f\u8282 \u4e0e \u7b2c 17.2.4 \u5c0f\u8282 \u7684\u603b\u7ed3\u3002","title":"16.10 \u7cdf\u7cd5\u7684\u9519\u8bef\u5904\u7406"},{"location":"16.10/#16101","text":"\u50cf\u4e0b\u9762\u4ee3\u7801\u4e00\u6837\uff0c\u521b\u5efa\u4e00\u4e2a\u5e03\u5c14\u578b\u53d8\u91cf\u7528\u4e8e\u6d4b\u8bd5\u9519\u8bef\u6761\u4ef6\u662f\u591a\u4f59\u7684\uff1a var good bool // \u6d4b\u8bd5\u4e00\u4e2a\u9519\u8bef\uff0c`good` \u88ab\u8d4b\u4e3a `true` \u6216\u8005 `false` if ! good { return errors . New ( \"things aren\u2019t good\" ) } \u7acb\u5373\u68c0\u6d4b\u4e00\u4e2a\u9519\u8bef\uff1a ... err1 := api . Func1 () if err1 != nil { \u2026 }","title":"16.10.1 \u4e0d\u8981\u4f7f\u7528\u5e03\u5c14\u503c\uff1a"},{"location":"16.10/#16102","text":"\u907f\u514d\u5199\u51fa\u8fd9\u6837\u7684\u4ee3\u7801\uff1a ... err1 := api . Func1 () if err1 != nil { fmt . Println ( \"err: \" + err . Error ()) return } err2 := api . Func2 () if err2 != nil { ... return } \u9996\u5148\uff0c\u5305\u62ec\u5728\u4e00\u4e2a\u521d\u59cb\u5316\u7684 if \u8bed\u53e5\u4e2d\u5bf9\u51fd\u6570\u7684\u8c03\u7528\u3002\u4f46\u5373\u4f7f\u4ee3\u7801\u4e2d\u5230\u5904\u90fd\u662f\u4ee5 if \u8bed\u53e5\u7684\u5f62\u5f0f\u901a\u77e5\u9519\u8bef\uff08\u901a\u8fc7\u6253\u5370\u9519\u8bef\u4fe1\u606f\uff09\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5f88\u96be\u5206\u8fa8\u4ec0\u4e48\u662f\u6b63\u5e38\u7684\u7a0b\u5e8f\u903b\u8f91\uff0c\u4ec0\u4e48\u662f\u9519\u8bef\u68c0\u6d4b\u6216\u9519\u8bef\u901a\u77e5\u3002\u8fd8\u9700\u6ce8\u610f\u7684\u662f\uff0c\u5927\u90e8\u5206\u4ee3\u7801\u90fd\u662f\u81f4\u529b\u4e8e\u9519\u8bef\u7684\u68c0\u6d4b\u3002\u901a\u5e38\u89e3\u51b3\u6b64\u95ee\u9898\u7684\u597d\u529e\u6cd5\u662f\u5c3d\u53ef\u80fd\u4ee5\u95ed\u5305\u7684\u5f62\u5f0f\u5c01\u88c5\u4f60\u7684\u9519\u8bef\u68c0\u6d4b\uff0c\u4f8b\u5982\u4e0b\u9762\u7684\u4ee3\u7801\uff1a func httpRequestHandler ( w http . ResponseWriter , req * http . Request ) { err := func () error { if req . Method != \"GET\" { return errors . New ( \"expected GET\" ) } if input := parseInput ( req ); input != \"command\" { return errors . New ( \"malformed command\" ) } // \u53ef\u4ee5\u5728\u6b64\u8fdb\u884c\u5176\u4ed6\u7684\u9519\u8bef\u68c0\u6d4b } () if err != nil { w . WriteHeader ( 400 ) io . WriteString ( w , err ) return } doSomething () ... \u8fd9\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5f88\u5bb9\u6613\u5206\u8fa8\u51fa\u9519\u8bef\u68c0\u6d4b\u3001\u9519\u8bef\u901a\u77e5\u548c\u6b63\u5e38\u7684\u7a0b\u5e8f\u903b\u8f91\uff08\u66f4\u8be6\u7ec6\u7684\u65b9\u5f0f\u53c2\u8003 \u7b2c 13.5 \u5c0f\u8282 \uff09\u3002 \u5728\u5f00\u59cb\u9605\u8bfb \u7b2c 17 \u7ae0 \u524d\uff0c\u5148\u56de\u7b54\u4e0b\u5217 2 \u4e2a\u95ee\u9898\uff1a \u95ee\u9898 16.1\uff1a\u603b\u7ed3\u4f60\u80fd\u8bb0\u4f4f\u7684\u6240\u6709\u5173\u4e8e , ok \u6a21\u5f0f\u7684\u60c5\u51b5\u3002 \u95ee\u9898 16.2\uff1a\u603b\u7ed3\u4f60\u80fd\u8bb0\u4f4f\u7684\u6240\u6709\u5173\u4e8e defer \u6a21\u5f0f\u7684\u60c5\u51b5\u3002","title":"16.10.2 \u907f\u514d\u9519\u8bef\u68c0\u6d4b\u4f7f\u4ee3\u7801\u53d8\u5f97\u6df7\u4e71\uff1a"},{"location":"16.10/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u95ed\u5305\u548c\u534f\u7a0b\u7684\u4f7f\u7528 \u4e0b\u4e00\u7ae0\uff1a Go \u8bed\u8a00\u6a21\u5f0f","title":"\u94fe\u63a5"},{"location":"16.2/","text":"16.2 \u8bef\u7528\u5b57\u7b26\u4e32 \u00b6 \u5f53\u9700\u8981\u5bf9\u4e00\u4e2a\u5b57\u7b26\u4e32\u8fdb\u884c\u9891\u7e41\u7684\u64cd\u4f5c\u65f6\uff0c\u8c28\u8bb0\u5728 go \u8bed\u8a00\u4e2d\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684\uff08\u7c7b\u4f3c Java \u548c C#\uff09\u3002\u4f7f\u7528\u8bf8\u5982 a += b \u5f62\u5f0f\u8fde\u63a5\u5b57\u7b26\u4e32\u6548\u7387\u4f4e\u4e0b\uff0c\u5c24\u5176\u5728\u4e00\u4e2a\u5faa\u73af\u5185\u90e8\u4f7f\u7528\u8fd9\u79cd\u5f62\u5f0f\u3002\u8fd9\u4f1a\u5bfc\u81f4\u5927\u91cf\u7684\u5185\u5b58\u5f00\u9500\u548c\u62f7\u8d1d\u3002 \u5e94\u8be5\u4f7f\u7528\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\u4ee3\u66ff\u5b57\u7b26\u4e32\uff0c\u5c06\u5b57\u7b26\u4e32\u5185\u5bb9\u5199\u5165\u4e00\u4e2a\u7f13\u5b58\u4e2d\u3002 \u4f8b\u5982\u4ee5\u4e0b\u7684\u4ee3\u7801\u793a\u4f8b\uff1a var b bytes . Buffer ... for condition { b . WriteString ( str ) // \u5c06\u5b57\u7b26\u4e32str\u5199\u5165\u7f13\u5b58buffer } return b . String () \u6ce8\u610f\uff1a\u7531\u4e8e\u7f16\u8bd1\u4f18\u5316\u548c\u4f9d\u8d56\u4e8e\u4f7f\u7528\u7f13\u5b58\u64cd\u4f5c\u7684\u5b57\u7b26\u4e32\u5927\u5c0f\uff0c\u5f53\u5faa\u73af\u6b21\u6570\u5927\u4e8e 15 \u65f6\uff0c\u6548\u7387\u624d\u4f1a\u66f4\u4f73\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u8bef\u7528\u77ed\u58f0\u660e\u5bfc\u81f4\u53d8\u91cf\u8986\u76d6 \u4e0b\u4e00\u8282\uff1a \u53d1\u751f\u9519\u8bef\u65f6\u4f7f\u7528 defer \u5173\u95ed\u4e00\u4e2a\u6587\u4ef6","title":"16.2 \u8bef\u7528\u5b57\u7b26\u4e32"},{"location":"16.2/#162","text":"\u5f53\u9700\u8981\u5bf9\u4e00\u4e2a\u5b57\u7b26\u4e32\u8fdb\u884c\u9891\u7e41\u7684\u64cd\u4f5c\u65f6\uff0c\u8c28\u8bb0\u5728 go \u8bed\u8a00\u4e2d\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684\uff08\u7c7b\u4f3c Java \u548c C#\uff09\u3002\u4f7f\u7528\u8bf8\u5982 a += b \u5f62\u5f0f\u8fde\u63a5\u5b57\u7b26\u4e32\u6548\u7387\u4f4e\u4e0b\uff0c\u5c24\u5176\u5728\u4e00\u4e2a\u5faa\u73af\u5185\u90e8\u4f7f\u7528\u8fd9\u79cd\u5f62\u5f0f\u3002\u8fd9\u4f1a\u5bfc\u81f4\u5927\u91cf\u7684\u5185\u5b58\u5f00\u9500\u548c\u62f7\u8d1d\u3002 \u5e94\u8be5\u4f7f\u7528\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\u4ee3\u66ff\u5b57\u7b26\u4e32\uff0c\u5c06\u5b57\u7b26\u4e32\u5185\u5bb9\u5199\u5165\u4e00\u4e2a\u7f13\u5b58\u4e2d\u3002 \u4f8b\u5982\u4ee5\u4e0b\u7684\u4ee3\u7801\u793a\u4f8b\uff1a var b bytes . Buffer ... for condition { b . WriteString ( str ) // \u5c06\u5b57\u7b26\u4e32str\u5199\u5165\u7f13\u5b58buffer } return b . String () \u6ce8\u610f\uff1a\u7531\u4e8e\u7f16\u8bd1\u4f18\u5316\u548c\u4f9d\u8d56\u4e8e\u4f7f\u7528\u7f13\u5b58\u64cd\u4f5c\u7684\u5b57\u7b26\u4e32\u5927\u5c0f\uff0c\u5f53\u5faa\u73af\u6b21\u6570\u5927\u4e8e 15 \u65f6\uff0c\u6548\u7387\u624d\u4f1a\u66f4\u4f73\u3002","title":"16.2 \u8bef\u7528\u5b57\u7b26\u4e32"},{"location":"16.2/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u8bef\u7528\u77ed\u58f0\u660e\u5bfc\u81f4\u53d8\u91cf\u8986\u76d6 \u4e0b\u4e00\u8282\uff1a \u53d1\u751f\u9519\u8bef\u65f6\u4f7f\u7528 defer \u5173\u95ed\u4e00\u4e2a\u6587\u4ef6","title":"\u94fe\u63a5"},{"location":"16.3/","text":"16.3 \u53d1\u751f\u9519\u8bef\u65f6\u4f7f\u7528 defer \u5173\u95ed\u4e00\u4e2a\u6587\u4ef6 \u00b6 \u5982\u679c\u4f60\u5728\u4e00\u4e2a for \u5faa\u73af\u5185\u90e8\u5904\u7406\u4e00\u7cfb\u5217\u6587\u4ef6\uff0c\u4f60\u9700\u8981\u4f7f\u7528 defer \u786e\u4fdd\u6587\u4ef6\u5728\u5904\u7406\u5b8c\u6bd5\u540e\u88ab\u5173\u95ed\uff0c\u4f8b\u5982\uff1a for _ , file := range files { if f , err = os . Open ( file ); err != nil { return } // \u8fd9\u662f\u9519\u8bef\u7684\u65b9\u5f0f\uff0c\u5f53\u5faa\u73af\u7ed3\u675f\u65f6\u6587\u4ef6\u6ca1\u6709\u5173\u95ed defer f . Close () // \u5bf9\u6587\u4ef6\u8fdb\u884c\u64cd\u4f5c f . Process ( data ) } \u4f46\u662f\u5728\u5faa\u73af\u5185\u7ed3\u5c3e\u5904\u7684 defer \u6ca1\u6709\u6267\u884c\uff0c\u6240\u4ee5\u6587\u4ef6\u4e00\u76f4\u6ca1\u6709\u5173\u95ed\uff01\u5783\u573e\u56de\u6536\u673a\u5236\u53ef\u80fd\u4f1a\u81ea\u52a8\u5173\u95ed\u6587\u4ef6\uff0c\u4f46\u662f\u8fd9\u4f1a\u4ea7\u751f\u4e00\u4e2a\u9519\u8bef\uff0c\u66f4\u597d\u7684\u505a\u6cd5\u662f\uff1a for _ , file := range files { if f , err = os . Open ( file ); err != nil { return } // \u5bf9\u6587\u4ef6\u8fdb\u884c\u64cd\u4f5c f . Process ( data ) // \u5173\u95ed\u6587\u4ef6 f . Close () } defer \u4ec5\u5728\u51fd\u6570\u8fd4\u56de\u65f6\u624d\u4f1a\u6267\u884c\uff0c\u5728\u5faa\u73af\u5185\u7684\u7ed3\u5c3e\u6216\u5176\u4ed6\u4e00\u4e9b\u6709\u9650\u8303\u56f4\u7684\u4ee3\u7801\u5185\u4e0d\u4f1a\u6267\u884c\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u8bef\u7528\u5b57\u7b26\u4e32 \u4e0b\u4e00\u8282\uff1a \u4f55\u65f6\u4f7f\u7528 new() \u548c make()","title":"16.3 \u53d1\u751f\u9519\u8bef\u65f6\u4f7f\u7528 defer \u5173\u95ed\u4e00\u4e2a\u6587\u4ef6"},{"location":"16.3/#163-defer","text":"\u5982\u679c\u4f60\u5728\u4e00\u4e2a for \u5faa\u73af\u5185\u90e8\u5904\u7406\u4e00\u7cfb\u5217\u6587\u4ef6\uff0c\u4f60\u9700\u8981\u4f7f\u7528 defer \u786e\u4fdd\u6587\u4ef6\u5728\u5904\u7406\u5b8c\u6bd5\u540e\u88ab\u5173\u95ed\uff0c\u4f8b\u5982\uff1a for _ , file := range files { if f , err = os . Open ( file ); err != nil { return } // \u8fd9\u662f\u9519\u8bef\u7684\u65b9\u5f0f\uff0c\u5f53\u5faa\u73af\u7ed3\u675f\u65f6\u6587\u4ef6\u6ca1\u6709\u5173\u95ed defer f . Close () // \u5bf9\u6587\u4ef6\u8fdb\u884c\u64cd\u4f5c f . Process ( data ) } \u4f46\u662f\u5728\u5faa\u73af\u5185\u7ed3\u5c3e\u5904\u7684 defer \u6ca1\u6709\u6267\u884c\uff0c\u6240\u4ee5\u6587\u4ef6\u4e00\u76f4\u6ca1\u6709\u5173\u95ed\uff01\u5783\u573e\u56de\u6536\u673a\u5236\u53ef\u80fd\u4f1a\u81ea\u52a8\u5173\u95ed\u6587\u4ef6\uff0c\u4f46\u662f\u8fd9\u4f1a\u4ea7\u751f\u4e00\u4e2a\u9519\u8bef\uff0c\u66f4\u597d\u7684\u505a\u6cd5\u662f\uff1a for _ , file := range files { if f , err = os . Open ( file ); err != nil { return } // \u5bf9\u6587\u4ef6\u8fdb\u884c\u64cd\u4f5c f . Process ( data ) // \u5173\u95ed\u6587\u4ef6 f . Close () } defer \u4ec5\u5728\u51fd\u6570\u8fd4\u56de\u65f6\u624d\u4f1a\u6267\u884c\uff0c\u5728\u5faa\u73af\u5185\u7684\u7ed3\u5c3e\u6216\u5176\u4ed6\u4e00\u4e9b\u6709\u9650\u8303\u56f4\u7684\u4ee3\u7801\u5185\u4e0d\u4f1a\u6267\u884c\u3002","title":"16.3 \u53d1\u751f\u9519\u8bef\u65f6\u4f7f\u7528 defer \u5173\u95ed\u4e00\u4e2a\u6587\u4ef6"},{"location":"16.3/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u8bef\u7528\u5b57\u7b26\u4e32 \u4e0b\u4e00\u8282\uff1a \u4f55\u65f6\u4f7f\u7528 new() \u548c make()","title":"\u94fe\u63a5"},{"location":"16.4/","text":"16.4 \u4f55\u65f6\u4f7f\u7528 new() \u548c make() \u00b6 \u5728\u7b2c 7.2.1 \u5c0f\u8282 \u548c\u7b2c 10.2.2 \u5c0f\u8282 \uff0c\u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u8fc7\u6b64\u95ee\u9898\uff0c\u5e76\u4f7f\u7528\u4ee3\u7801\u8fdb\u884c\u8be6\u7ec6\u8bf4\u660e\uff0c\u89c2\u70b9\u5982\u4e0b\uff1a - \u5207\u7247\u3001\u6620\u5c04\u548c\u901a\u9053\uff0c\u4f7f\u7528 make() - \u6570\u7ec4\u3001\u7ed3\u6784\u4f53\u548c\u6240\u6709\u7684\u503c\u7c7b\u578b\uff0c\u4f7f\u7528 new() \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u53d1\u751f\u9519\u8bef\u65f6\u4f7f\u7528 defer \u5173\u95ed\u4e00\u4e2a\u6587\u4ef6 \u4e0b\u4e00\u8282\uff1a \u4e0d\u9700\u8981\u5c06\u4e00\u4e2a\u6307\u5411\u5207\u7247\u7684\u6307\u9488\u4f20\u9012\u7ed9\u51fd\u6570","title":"16.4 \u4f55\u65f6\u4f7f\u7528 new() \u548c make()"},{"location":"16.4/#164-new-make","text":"\u5728\u7b2c 7.2.1 \u5c0f\u8282 \u548c\u7b2c 10.2.2 \u5c0f\u8282 \uff0c\u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u8fc7\u6b64\u95ee\u9898\uff0c\u5e76\u4f7f\u7528\u4ee3\u7801\u8fdb\u884c\u8be6\u7ec6\u8bf4\u660e\uff0c\u89c2\u70b9\u5982\u4e0b\uff1a - \u5207\u7247\u3001\u6620\u5c04\u548c\u901a\u9053\uff0c\u4f7f\u7528 make() - \u6570\u7ec4\u3001\u7ed3\u6784\u4f53\u548c\u6240\u6709\u7684\u503c\u7c7b\u578b\uff0c\u4f7f\u7528 new()","title":"16.4 \u4f55\u65f6\u4f7f\u7528 new() \u548c make()"},{"location":"16.4/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u53d1\u751f\u9519\u8bef\u65f6\u4f7f\u7528 defer \u5173\u95ed\u4e00\u4e2a\u6587\u4ef6 \u4e0b\u4e00\u8282\uff1a \u4e0d\u9700\u8981\u5c06\u4e00\u4e2a\u6307\u5411\u5207\u7247\u7684\u6307\u9488\u4f20\u9012\u7ed9\u51fd\u6570","title":"\u94fe\u63a5"},{"location":"16.5/","text":"16.5 \u4e0d\u9700\u8981\u5c06\u4e00\u4e2a\u6307\u5411\u5207\u7247\u7684\u6307\u9488\u4f20\u9012\u7ed9\u51fd\u6570 \u00b6 \u5728\u7b2c 4.9 \u5c0f\u8282 \uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0c\u5207\u7247\u5b9e\u9645\u662f\u4e00\u4e2a\u6307\u5411\u6f5c\u5728\u6570\u7ec4\u7684\u6307\u9488\u3002\u6211\u4eec\u5e38\u5e38\u9700\u8981\u628a\u5207\u7247\u4f5c\u4e3a\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\u662f\u56e0\u4e3a\uff1a\u5b9e\u9645\u5c31\u662f\u4f20\u9012\u4e00\u4e2a\u6307\u5411\u53d8\u91cf\u7684\u6307\u9488\uff0c\u5728\u51fd\u6570\u5185\u53ef\u4ee5\u6539\u53d8\u8fd9\u4e2a\u53d8\u91cf\uff0c\u800c\u4e0d\u662f\u4f20\u9012\u6570\u636e\u7684\u62f7\u8d1d\u3002 \u56e0\u6b64\u5e94\u8be5\u8fd9\u6837\u505a\uff1a func findBiggest ( listOfNumbers [] int ) int {} \u800c\u4e0d\u662f\uff1a func findBiggest ( listOfNumbers * [] int ) int {} \u5f53\u5207\u7247\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u65f6\uff0c\u5207\u8bb0\u4e0d\u8981\u89e3\u5f15\u7528\u5207\u7247\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f55\u65f6\u4f7f\u7528 new() \u548c make() \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528\u6307\u9488\u6307\u5411\u63a5\u53e3\u7c7b\u578b","title":"16.5 \u4e0d\u9700\u8981\u5c06\u4e00\u4e2a\u6307\u5411\u5207\u7247\u7684\u6307\u9488\u4f20\u9012\u7ed9\u51fd\u6570"},{"location":"16.5/#165","text":"\u5728\u7b2c 4.9 \u5c0f\u8282 \uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0c\u5207\u7247\u5b9e\u9645\u662f\u4e00\u4e2a\u6307\u5411\u6f5c\u5728\u6570\u7ec4\u7684\u6307\u9488\u3002\u6211\u4eec\u5e38\u5e38\u9700\u8981\u628a\u5207\u7247\u4f5c\u4e3a\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\u662f\u56e0\u4e3a\uff1a\u5b9e\u9645\u5c31\u662f\u4f20\u9012\u4e00\u4e2a\u6307\u5411\u53d8\u91cf\u7684\u6307\u9488\uff0c\u5728\u51fd\u6570\u5185\u53ef\u4ee5\u6539\u53d8\u8fd9\u4e2a\u53d8\u91cf\uff0c\u800c\u4e0d\u662f\u4f20\u9012\u6570\u636e\u7684\u62f7\u8d1d\u3002 \u56e0\u6b64\u5e94\u8be5\u8fd9\u6837\u505a\uff1a func findBiggest ( listOfNumbers [] int ) int {} \u800c\u4e0d\u662f\uff1a func findBiggest ( listOfNumbers * [] int ) int {} \u5f53\u5207\u7247\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u65f6\uff0c\u5207\u8bb0\u4e0d\u8981\u89e3\u5f15\u7528\u5207\u7247\u3002","title":"16.5 \u4e0d\u9700\u8981\u5c06\u4e00\u4e2a\u6307\u5411\u5207\u7247\u7684\u6307\u9488\u4f20\u9012\u7ed9\u51fd\u6570"},{"location":"16.5/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f55\u65f6\u4f7f\u7528 new() \u548c make() \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528\u6307\u9488\u6307\u5411\u63a5\u53e3\u7c7b\u578b","title":"\u94fe\u63a5"},{"location":"16.6/","text":"16.6 \u4f7f\u7528\u6307\u9488\u6307\u5411\u63a5\u53e3\u7c7b\u578b \u00b6 \u67e5\u770b\u5982\u4e0b\u7a0b\u5e8f\uff1a nexter \u662f\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\uff0c\u5e76\u4e14\u5b9a\u4e49\u4e86\u4e00\u4e2a next() \u65b9\u6cd5\u8bfb\u53d6\u4e0b\u4e00\u5b57\u8282\u3002\u51fd\u6570 nextFew1 \u5c06 nexter \u63a5\u53e3\u4f5c\u4e3a\u53c2\u6570\u5e76\u8bfb\u53d6\u63a5\u4e0b\u6765\u7684 num \u4e2a\u5b57\u8282\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5207\u7247\uff1a\u8fd9\u662f\u6b63\u786e\u505a\u6cd5\u3002\u4f46\u662f nextFew2 \u4f7f\u7528\u4e00\u4e2a\u6307\u5411 nexter \u63a5\u53e3\u7c7b\u578b\u7684\u6307\u9488\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\uff1a\u5f53\u4f7f\u7528 next() \u51fd\u6570\u65f6\uff0c\u7cfb\u7edf\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\uff1a n.next undefined (type *nexter has no field or method next) \uff08\u8bd1\u8005\u6ce8\uff1an.next \u672a\u5b9a\u4e49\uff08*nexter \u7c7b\u578b\u6ca1\u6709 next \u6210\u5458\u6216 next \u65b9\u6cd5\uff09\uff09 \u4f8b 16.1 pointer_interface.go \uff08\u4e0d\u80fd\u901a\u8fc7\u7f16\u8bd1\uff09: package main import ( \"fmt\" ) type nexter interface { next () byte } func nextFew1 ( n nexter , num int ) [] byte { var b [] byte for i := 0 ; i < num ; i ++ { b [ i ] = n . next () } return b } func nextFew2 ( n * nexter , num int ) [] byte { var b [] byte for i := 0 ; i < num ; i ++ { b [ i ] = n . next () // \u7f16\u8bd1\u9519\u8bef\uff1an.next \u672a\u5b9a\u4e49\uff08*nexter \u7c7b\u578b\u6ca1\u6709 next \u6210\u5458\u6216 next \u65b9\u6cd5\uff09 } return b } func main () { fmt . Println ( \"Hello World!\" ) } \u6c38\u8fdc\u4e0d\u8981\u4f7f\u7528\u4e00\u4e2a\u6307\u9488\u6307\u5411\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\uff0c\u56e0\u4e3a\u5b83\u5df2\u7ecf\u662f\u4e00\u4e2a\u6307\u9488\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4e0d\u9700\u8981\u5c06\u4e00\u4e2a\u6307\u5411\u5207\u7247\u7684\u6307\u9488\u4f20\u9012\u7ed9\u51fd\u6570 \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528\u503c\u7c7b\u578b\u65f6\u8bef\u7528\u6307\u9488","title":"16.6 \u4f7f\u7528\u6307\u9488\u6307\u5411\u63a5\u53e3\u7c7b\u578b"},{"location":"16.6/#166","text":"\u67e5\u770b\u5982\u4e0b\u7a0b\u5e8f\uff1a nexter \u662f\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\uff0c\u5e76\u4e14\u5b9a\u4e49\u4e86\u4e00\u4e2a next() \u65b9\u6cd5\u8bfb\u53d6\u4e0b\u4e00\u5b57\u8282\u3002\u51fd\u6570 nextFew1 \u5c06 nexter \u63a5\u53e3\u4f5c\u4e3a\u53c2\u6570\u5e76\u8bfb\u53d6\u63a5\u4e0b\u6765\u7684 num \u4e2a\u5b57\u8282\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5207\u7247\uff1a\u8fd9\u662f\u6b63\u786e\u505a\u6cd5\u3002\u4f46\u662f nextFew2 \u4f7f\u7528\u4e00\u4e2a\u6307\u5411 nexter \u63a5\u53e3\u7c7b\u578b\u7684\u6307\u9488\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\uff1a\u5f53\u4f7f\u7528 next() \u51fd\u6570\u65f6\uff0c\u7cfb\u7edf\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\uff1a n.next undefined (type *nexter has no field or method next) \uff08\u8bd1\u8005\u6ce8\uff1an.next \u672a\u5b9a\u4e49\uff08*nexter \u7c7b\u578b\u6ca1\u6709 next \u6210\u5458\u6216 next \u65b9\u6cd5\uff09\uff09 \u4f8b 16.1 pointer_interface.go \uff08\u4e0d\u80fd\u901a\u8fc7\u7f16\u8bd1\uff09: package main import ( \"fmt\" ) type nexter interface { next () byte } func nextFew1 ( n nexter , num int ) [] byte { var b [] byte for i := 0 ; i < num ; i ++ { b [ i ] = n . next () } return b } func nextFew2 ( n * nexter , num int ) [] byte { var b [] byte for i := 0 ; i < num ; i ++ { b [ i ] = n . next () // \u7f16\u8bd1\u9519\u8bef\uff1an.next \u672a\u5b9a\u4e49\uff08*nexter \u7c7b\u578b\u6ca1\u6709 next \u6210\u5458\u6216 next \u65b9\u6cd5\uff09 } return b } func main () { fmt . Println ( \"Hello World!\" ) } \u6c38\u8fdc\u4e0d\u8981\u4f7f\u7528\u4e00\u4e2a\u6307\u9488\u6307\u5411\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\uff0c\u56e0\u4e3a\u5b83\u5df2\u7ecf\u662f\u4e00\u4e2a\u6307\u9488\u3002","title":"16.6 \u4f7f\u7528\u6307\u9488\u6307\u5411\u63a5\u53e3\u7c7b\u578b"},{"location":"16.6/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4e0d\u9700\u8981\u5c06\u4e00\u4e2a\u6307\u5411\u5207\u7247\u7684\u6307\u9488\u4f20\u9012\u7ed9\u51fd\u6570 \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528\u503c\u7c7b\u578b\u65f6\u8bef\u7528\u6307\u9488","title":"\u94fe\u63a5"},{"location":"16.7/","text":"16.7 \u4f7f\u7528\u503c\u7c7b\u578b\u65f6\u8bef\u7528\u6307\u9488 \u00b6 \u5c06\u4e00\u4e2a\u503c\u7c7b\u578b\u4f5c\u4e3a\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\u6216\u8005\u4f5c\u4e3a\u4e00\u4e2a\u65b9\u6cd5\u7684\u63a5\u6536\u8005\uff0c\u4f3c\u4e4e\u662f\u5bf9\u5185\u5b58\u7684\u6ee5\u7528\uff0c\u56e0\u4e3a\u503c\u7c7b\u578b\u4e00\u76f4\u662f\u4f20\u9012\u62f7\u8d1d\u3002\u4f46\u662f\u53e6\u4e00\u65b9\u9762\uff0c\u503c\u7c7b\u578b\u7684\u5185\u5b58\u662f\u5728\u6808\u4e0a\u5206\u914d\uff0c\u5185\u5b58\u5206\u914d\u5feb\u901f\u4e14\u5f00\u9500\u4e0d\u5927\u3002\u5982\u679c\u4f60\u4f20\u9012\u4e00\u4e2a\u6307\u9488\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u503c\u7c7b\u578b\uff0cGo \u7f16\u8bd1\u5668\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4f1a\u8ba4\u4e3a\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5e76\u5c06\u5bf9\u8c61\u79fb\u52a8\u5230\u5806\u4e0a\uff0c\u6240\u4ee5\u4f1a\u5bfc\u81f4\u989d\u5916\u7684\u5185\u5b58\u5206\u914d\uff1a\u56e0\u6b64\u5f53\u4f7f\u7528\u6307\u9488\u4ee3\u66ff\u503c\u7c7b\u578b\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u65f6\uff0c\u6211\u4eec\u6ca1\u6709\u4efb\u4f55\u6536\u83b7\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f7f\u7528\u6307\u9488\u6307\u5411\u63a5\u53e3\u7c7b\u578b \u4e0b\u4e00\u8282\uff1a \u8bef\u7528\u534f\u7a0b\u548c\u901a\u9053","title":"16.7 \u4f7f\u7528\u503c\u7c7b\u578b\u65f6\u8bef\u7528\u6307\u9488"},{"location":"16.7/#167","text":"\u5c06\u4e00\u4e2a\u503c\u7c7b\u578b\u4f5c\u4e3a\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\u6216\u8005\u4f5c\u4e3a\u4e00\u4e2a\u65b9\u6cd5\u7684\u63a5\u6536\u8005\uff0c\u4f3c\u4e4e\u662f\u5bf9\u5185\u5b58\u7684\u6ee5\u7528\uff0c\u56e0\u4e3a\u503c\u7c7b\u578b\u4e00\u76f4\u662f\u4f20\u9012\u62f7\u8d1d\u3002\u4f46\u662f\u53e6\u4e00\u65b9\u9762\uff0c\u503c\u7c7b\u578b\u7684\u5185\u5b58\u662f\u5728\u6808\u4e0a\u5206\u914d\uff0c\u5185\u5b58\u5206\u914d\u5feb\u901f\u4e14\u5f00\u9500\u4e0d\u5927\u3002\u5982\u679c\u4f60\u4f20\u9012\u4e00\u4e2a\u6307\u9488\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u503c\u7c7b\u578b\uff0cGo \u7f16\u8bd1\u5668\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4f1a\u8ba4\u4e3a\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5e76\u5c06\u5bf9\u8c61\u79fb\u52a8\u5230\u5806\u4e0a\uff0c\u6240\u4ee5\u4f1a\u5bfc\u81f4\u989d\u5916\u7684\u5185\u5b58\u5206\u914d\uff1a\u56e0\u6b64\u5f53\u4f7f\u7528\u6307\u9488\u4ee3\u66ff\u503c\u7c7b\u578b\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u65f6\uff0c\u6211\u4eec\u6ca1\u6709\u4efb\u4f55\u6536\u83b7\u3002","title":"16.7 \u4f7f\u7528\u503c\u7c7b\u578b\u65f6\u8bef\u7528\u6307\u9488"},{"location":"16.7/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f7f\u7528\u6307\u9488\u6307\u5411\u63a5\u53e3\u7c7b\u578b \u4e0b\u4e00\u8282\uff1a \u8bef\u7528\u534f\u7a0b\u548c\u901a\u9053","title":"\u94fe\u63a5"},{"location":"16.8/","text":"16.8 \u8bef\u7528\u534f\u7a0b\u548c\u901a\u9053 \u00b6 \u7531\u4e8e\u6559\u5b66\u9700\u8981\u548c\u5bf9\u534f\u7a0b\u7684\u5de5\u4f5c\u539f\u7406\u6709\u4e00\u4e2a\u76f4\u89c2\u7684\u4e86\u89e3\uff0c\u5728 \u7b2c 14 \u7ae0 \u4f7f\u7528\u4e86\u4e00\u4e9b\u7b80\u5355\u7684\u7b97\u6cd5\uff0c\u4e3e\u4f8b\u8bf4\u660e\u4e86\u534f\u7a0b\u548c\u901a\u9053\u7684\u4f7f\u7528\uff0c\u4f8b\u5982\u751f\u4ea7\u8005\u6216\u8005\u8fed\u4ee3\u5668\u3002\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u4f60\u4e0d\u9700\u8981\u5e76\u53d1\u6267\u884c\uff0c\u6216\u8005\u4f60\u4e0d\u9700\u8981\u5173\u6ce8\u534f\u7a0b\u548c\u901a\u9053\u7684\u5f00\u9500\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7\u6808\u4f20\u9012\u53c2\u6570\u4f1a\u66f4\u6709\u6548\u7387\u3002 \u4f46\u662f\uff0c\u5982\u679c\u4f60\u4f7f\u7528 break \u3001 return \u6216\u8005 panic() \u53bb\u8df3\u51fa\u4e00\u4e2a\u5faa\u73af\uff0c\u5f88\u6709\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5185\u5b58\u6ea2\u51fa\uff0c\u56e0\u4e3a\u534f\u7a0b\u6b63\u5904\u7406\u67d0\u4e9b\u4e8b\u60c5\u800c\u88ab\u963b\u585e\u3002\u5728\u5b9e\u9645\u4ee3\u7801\u4e2d\uff0c\u901a\u5e38\u4ec5\u9700\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u8fc7\u7a0b\u5f0f\u5faa\u73af\u5373\u53ef\u3002 \u5f53\u4e14\u4ec5\u5f53\u4ee3\u7801\u4e2d\u5e76\u53d1\u6267\u884c\u975e\u5e38\u91cd\u8981\uff0c\u624d\u4f7f\u7528\u534f\u7a0b\u548c\u901a\u9053\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f7f\u7528\u503c\u7c7b\u578b\u65f6\u8bef\u7528\u6307\u9488 \u4e0b\u4e00\u8282\uff1a \u95ed\u5305\u548c\u534f\u7a0b\u7684\u4f7f\u7528","title":"16.8 \u8bef\u7528\u534f\u7a0b\u548c\u901a\u9053"},{"location":"16.8/#168","text":"\u7531\u4e8e\u6559\u5b66\u9700\u8981\u548c\u5bf9\u534f\u7a0b\u7684\u5de5\u4f5c\u539f\u7406\u6709\u4e00\u4e2a\u76f4\u89c2\u7684\u4e86\u89e3\uff0c\u5728 \u7b2c 14 \u7ae0 \u4f7f\u7528\u4e86\u4e00\u4e9b\u7b80\u5355\u7684\u7b97\u6cd5\uff0c\u4e3e\u4f8b\u8bf4\u660e\u4e86\u534f\u7a0b\u548c\u901a\u9053\u7684\u4f7f\u7528\uff0c\u4f8b\u5982\u751f\u4ea7\u8005\u6216\u8005\u8fed\u4ee3\u5668\u3002\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u4f60\u4e0d\u9700\u8981\u5e76\u53d1\u6267\u884c\uff0c\u6216\u8005\u4f60\u4e0d\u9700\u8981\u5173\u6ce8\u534f\u7a0b\u548c\u901a\u9053\u7684\u5f00\u9500\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7\u6808\u4f20\u9012\u53c2\u6570\u4f1a\u66f4\u6709\u6548\u7387\u3002 \u4f46\u662f\uff0c\u5982\u679c\u4f60\u4f7f\u7528 break \u3001 return \u6216\u8005 panic() \u53bb\u8df3\u51fa\u4e00\u4e2a\u5faa\u73af\uff0c\u5f88\u6709\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5185\u5b58\u6ea2\u51fa\uff0c\u56e0\u4e3a\u534f\u7a0b\u6b63\u5904\u7406\u67d0\u4e9b\u4e8b\u60c5\u800c\u88ab\u963b\u585e\u3002\u5728\u5b9e\u9645\u4ee3\u7801\u4e2d\uff0c\u901a\u5e38\u4ec5\u9700\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u8fc7\u7a0b\u5f0f\u5faa\u73af\u5373\u53ef\u3002 \u5f53\u4e14\u4ec5\u5f53\u4ee3\u7801\u4e2d\u5e76\u53d1\u6267\u884c\u975e\u5e38\u91cd\u8981\uff0c\u624d\u4f7f\u7528\u534f\u7a0b\u548c\u901a\u9053\u3002","title":"16.8 \u8bef\u7528\u534f\u7a0b\u548c\u901a\u9053"},{"location":"16.8/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f7f\u7528\u503c\u7c7b\u578b\u65f6\u8bef\u7528\u6307\u9488 \u4e0b\u4e00\u8282\uff1a \u95ed\u5305\u548c\u534f\u7a0b\u7684\u4f7f\u7528","title":"\u94fe\u63a5"},{"location":"16.9/","text":"16.9 \u95ed\u5305\u548c\u534f\u7a0b\u7684\u4f7f\u7528 \u00b6 \u8bf7\u770b\u4e0b\u9762\u4ee3\u7801\uff1a package main import ( \"fmt\" \"time\" ) var values = [ 5 ] int { 10 , 11 , 12 , 13 , 14 } func main () { // \u7248\u672c A\uff1a for ix := range values { // ix \u662f\u7d22\u5f15\u503c func () { fmt . Print ( ix , \" \" ) }() // \u8c03\u7528\u95ed\u5305\u6253\u5370\u6bcf\u4e2a\u7d22\u5f15\u503c } fmt . Println () // \u7248\u672c B\uff1a\u548c A \u7248\u672c\u7c7b\u4f3c\uff0c\u4f46\u662f\u901a\u8fc7\u8c03\u7528\u95ed\u5305\u4f5c\u4e3a\u4e00\u4e2a\u534f\u7a0b for ix := range values { go func () { fmt . Print ( ix , \" \" ) }() } fmt . Println () time . Sleep ( 5e9 ) // \u7248\u672c C\uff1a\u6b63\u786e\u7684\u5904\u7406\u65b9\u5f0f for ix := range values { go func ( ix interface {}) { fmt . Print ( ix , \" \" ) }( ix ) } fmt . Println () time . Sleep ( 5e9 ) // \u7248\u672c D\uff1a\u8f93\u51fa\u503c\uff1a for ix := range values { val := values [ ix ] go func () { fmt . Print ( val , \" \" ) }() } time . Sleep ( 1e9 ) } \u8f93\u51fa\uff1a 0 1 2 3 4 4 4 4 4 4 1 0 3 4 2 10 11 12 13 14 \u7248\u672c A \u8c03\u7528\u95ed\u5305 5 \u6b21\u6253\u5370\u6bcf\u4e2a\u7d22\u5f15\u503c\uff0c\u7248\u672c B \u4e5f\u505a\u76f8\u540c\u7684\u4e8b\uff0c\u4f46\u662f\u901a\u8fc7\u534f\u7a0b\u8c03\u7528\u6bcf\u4e2a\u95ed\u5305\u3002\u6309\u7406\u8bf4\u8fd9\u5c06\u6267\u884c\u5f97\u66f4\u5feb\uff0c\u56e0\u4e3a\u95ed\u5305\u662f\u5e76\u53d1\u6267\u884c\u7684\u3002\u5982\u679c\u6211\u4eec\u963b\u585e\u8db3\u591f\u591a\u7684\u65f6\u95f4\uff0c\u8ba9\u6240\u6709\u534f\u7a0b\u6267\u884c\u5b8c\u6bd5\uff0c\u7248\u672c B \u7684\u8f93\u51fa\u662f\uff1a 4 4 4 4 4 \u3002\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\uff1f\u5728\u7248\u672c B \u7684\u5faa\u73af\u4e2d\uff0c ix \u53d8\u91cf\u5b9e\u9645\u662f\u4e00\u4e2a\u5355\u53d8\u91cf\uff0c\u8868\u793a\u6bcf\u4e2a\u6570\u7ec4\u5143\u7d20\u7684\u7d22\u5f15\u503c\u3002\u56e0\u4e3a\u8fd9\u4e9b\u95ed\u5305\u90fd\u53ea\u7ed1\u5b9a\u5230\u4e00\u4e2a\u53d8\u91cf\uff0c\u8fd9\u662f\u4e00\u4e2a\u6bd4\u8f83\u597d\u7684\u65b9\u5f0f\uff0c\u5f53\u4f60\u8fd0\u884c\u8fd9\u6bb5\u4ee3\u7801\u65f6\uff0c\u4f60\u5c06\u770b\u89c1\u6bcf\u6b21\u5faa\u73af\u90fd\u6253\u5370\u6700\u540e\u4e00\u4e2a\u7d22\u5f15\u503c 4 \uff0c\u800c\u4e0d\u662f\u6bcf\u4e2a\u5143\u7d20\u7684\u7d22\u5f15\u503c\u3002\u56e0\u4e3a\u534f\u7a0b\u53ef\u80fd\u5728\u5faa\u73af\u7ed3\u675f\u540e\u8fd8\u6ca1\u6709\u5f00\u59cb\u6267\u884c\uff0c\u800c\u6b64\u65f6 ix \u503c\u662f 4 \u3002 \u7248\u672c C \u7684\u5faa\u73af\u5199\u6cd5\u624d\u662f\u6b63\u786e\u7684\uff1a\u8c03\u7528\u6bcf\u4e2a\u95ed\u5305\u65f6\u5c06 ix \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u95ed\u5305\u3002 ix \u5728\u6bcf\u6b21\u5faa\u73af\u65f6\u90fd\u88ab\u91cd\u65b0\u8d4b\u503c\uff0c\u5e76\u5c06\u6bcf\u4e2a\u534f\u7a0b\u7684 ix \u653e\u7f6e\u5728\u6808\u4e2d\uff0c\u6240\u4ee5\u5f53\u534f\u7a0b\u6700\u7ec8\u88ab\u6267\u884c\u65f6\uff0c\u6bcf\u4e2a\u7d22\u5f15\u503c\u5bf9\u534f\u7a0b\u90fd\u662f\u53ef\u7528\u7684\u3002\u6ce8\u610f\u8fd9\u91cc\u7684\u8f93\u51fa\u53ef\u80fd\u662f 0 2 1 3 4 \u6216\u8005 0 3 1 2 4 \u6216\u8005\u5176\u4ed6\u7c7b\u4f3c\u7684\u5e8f\u5217\uff0c\u8fd9\u4e3b\u8981\u53d6\u51b3\u4e8e\u6bcf\u4e2a\u534f\u7a0b\u4f55\u65f6\u5f00\u59cb\u88ab\u6267\u884c\u3002 \u5728\u7248\u672c D \u4e2d\uff0c\u6211\u4eec\u8f93\u51fa\u8fd9\u4e2a\u6570\u7ec4\u7684\u503c\uff0c\u4e3a\u4ec0\u4e48\u7248\u672c B \u4e0d\u80fd\u800c\u7248\u672c D \u53ef\u4ee5\u5462\uff1f \u56e0\u4e3a\u7248\u672c D \u4e2d\u7684\u53d8\u91cf\u58f0\u660e\u662f\u5728\u5faa\u73af\u4f53\u5185\u90e8\uff0c\u6240\u4ee5\u5728\u6bcf\u6b21\u5faa\u73af\u65f6\uff0c\u8fd9\u4e9b\u53d8\u91cf\u76f8\u4e92\u4e4b\u95f4\u662f\u4e0d\u5171\u4eab\u7684\uff0c\u6240\u4ee5\u8fd9\u4e9b\u53d8\u91cf\u53ef\u4ee5\u5355\u72ec\u7684\u88ab\u6bcf\u4e2a\u95ed\u5305\u4f7f\u7528\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u8bef\u7528\u534f\u7a0b\u548c\u901a\u9053 \u4e0b\u4e00\u8282\uff1a \u7cdf\u7cd5\u7684\u9519\u8bef\u5904\u7406","title":"16.9 \u95ed\u5305\u548c\u534f\u7a0b\u7684\u4f7f\u7528"},{"location":"16.9/#169","text":"\u8bf7\u770b\u4e0b\u9762\u4ee3\u7801\uff1a package main import ( \"fmt\" \"time\" ) var values = [ 5 ] int { 10 , 11 , 12 , 13 , 14 } func main () { // \u7248\u672c A\uff1a for ix := range values { // ix \u662f\u7d22\u5f15\u503c func () { fmt . Print ( ix , \" \" ) }() // \u8c03\u7528\u95ed\u5305\u6253\u5370\u6bcf\u4e2a\u7d22\u5f15\u503c } fmt . Println () // \u7248\u672c B\uff1a\u548c A \u7248\u672c\u7c7b\u4f3c\uff0c\u4f46\u662f\u901a\u8fc7\u8c03\u7528\u95ed\u5305\u4f5c\u4e3a\u4e00\u4e2a\u534f\u7a0b for ix := range values { go func () { fmt . Print ( ix , \" \" ) }() } fmt . Println () time . Sleep ( 5e9 ) // \u7248\u672c C\uff1a\u6b63\u786e\u7684\u5904\u7406\u65b9\u5f0f for ix := range values { go func ( ix interface {}) { fmt . Print ( ix , \" \" ) }( ix ) } fmt . Println () time . Sleep ( 5e9 ) // \u7248\u672c D\uff1a\u8f93\u51fa\u503c\uff1a for ix := range values { val := values [ ix ] go func () { fmt . Print ( val , \" \" ) }() } time . Sleep ( 1e9 ) } \u8f93\u51fa\uff1a 0 1 2 3 4 4 4 4 4 4 1 0 3 4 2 10 11 12 13 14 \u7248\u672c A \u8c03\u7528\u95ed\u5305 5 \u6b21\u6253\u5370\u6bcf\u4e2a\u7d22\u5f15\u503c\uff0c\u7248\u672c B \u4e5f\u505a\u76f8\u540c\u7684\u4e8b\uff0c\u4f46\u662f\u901a\u8fc7\u534f\u7a0b\u8c03\u7528\u6bcf\u4e2a\u95ed\u5305\u3002\u6309\u7406\u8bf4\u8fd9\u5c06\u6267\u884c\u5f97\u66f4\u5feb\uff0c\u56e0\u4e3a\u95ed\u5305\u662f\u5e76\u53d1\u6267\u884c\u7684\u3002\u5982\u679c\u6211\u4eec\u963b\u585e\u8db3\u591f\u591a\u7684\u65f6\u95f4\uff0c\u8ba9\u6240\u6709\u534f\u7a0b\u6267\u884c\u5b8c\u6bd5\uff0c\u7248\u672c B \u7684\u8f93\u51fa\u662f\uff1a 4 4 4 4 4 \u3002\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\uff1f\u5728\u7248\u672c B \u7684\u5faa\u73af\u4e2d\uff0c ix \u53d8\u91cf\u5b9e\u9645\u662f\u4e00\u4e2a\u5355\u53d8\u91cf\uff0c\u8868\u793a\u6bcf\u4e2a\u6570\u7ec4\u5143\u7d20\u7684\u7d22\u5f15\u503c\u3002\u56e0\u4e3a\u8fd9\u4e9b\u95ed\u5305\u90fd\u53ea\u7ed1\u5b9a\u5230\u4e00\u4e2a\u53d8\u91cf\uff0c\u8fd9\u662f\u4e00\u4e2a\u6bd4\u8f83\u597d\u7684\u65b9\u5f0f\uff0c\u5f53\u4f60\u8fd0\u884c\u8fd9\u6bb5\u4ee3\u7801\u65f6\uff0c\u4f60\u5c06\u770b\u89c1\u6bcf\u6b21\u5faa\u73af\u90fd\u6253\u5370\u6700\u540e\u4e00\u4e2a\u7d22\u5f15\u503c 4 \uff0c\u800c\u4e0d\u662f\u6bcf\u4e2a\u5143\u7d20\u7684\u7d22\u5f15\u503c\u3002\u56e0\u4e3a\u534f\u7a0b\u53ef\u80fd\u5728\u5faa\u73af\u7ed3\u675f\u540e\u8fd8\u6ca1\u6709\u5f00\u59cb\u6267\u884c\uff0c\u800c\u6b64\u65f6 ix \u503c\u662f 4 \u3002 \u7248\u672c C \u7684\u5faa\u73af\u5199\u6cd5\u624d\u662f\u6b63\u786e\u7684\uff1a\u8c03\u7528\u6bcf\u4e2a\u95ed\u5305\u65f6\u5c06 ix \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u95ed\u5305\u3002 ix \u5728\u6bcf\u6b21\u5faa\u73af\u65f6\u90fd\u88ab\u91cd\u65b0\u8d4b\u503c\uff0c\u5e76\u5c06\u6bcf\u4e2a\u534f\u7a0b\u7684 ix \u653e\u7f6e\u5728\u6808\u4e2d\uff0c\u6240\u4ee5\u5f53\u534f\u7a0b\u6700\u7ec8\u88ab\u6267\u884c\u65f6\uff0c\u6bcf\u4e2a\u7d22\u5f15\u503c\u5bf9\u534f\u7a0b\u90fd\u662f\u53ef\u7528\u7684\u3002\u6ce8\u610f\u8fd9\u91cc\u7684\u8f93\u51fa\u53ef\u80fd\u662f 0 2 1 3 4 \u6216\u8005 0 3 1 2 4 \u6216\u8005\u5176\u4ed6\u7c7b\u4f3c\u7684\u5e8f\u5217\uff0c\u8fd9\u4e3b\u8981\u53d6\u51b3\u4e8e\u6bcf\u4e2a\u534f\u7a0b\u4f55\u65f6\u5f00\u59cb\u88ab\u6267\u884c\u3002 \u5728\u7248\u672c D \u4e2d\uff0c\u6211\u4eec\u8f93\u51fa\u8fd9\u4e2a\u6570\u7ec4\u7684\u503c\uff0c\u4e3a\u4ec0\u4e48\u7248\u672c B \u4e0d\u80fd\u800c\u7248\u672c D \u53ef\u4ee5\u5462\uff1f \u56e0\u4e3a\u7248\u672c D \u4e2d\u7684\u53d8\u91cf\u58f0\u660e\u662f\u5728\u5faa\u73af\u4f53\u5185\u90e8\uff0c\u6240\u4ee5\u5728\u6bcf\u6b21\u5faa\u73af\u65f6\uff0c\u8fd9\u4e9b\u53d8\u91cf\u76f8\u4e92\u4e4b\u95f4\u662f\u4e0d\u5171\u4eab\u7684\uff0c\u6240\u4ee5\u8fd9\u4e9b\u53d8\u91cf\u53ef\u4ee5\u5355\u72ec\u7684\u88ab\u6bcf\u4e2a\u95ed\u5305\u4f7f\u7528\u3002","title":"16.9 \u95ed\u5305\u548c\u534f\u7a0b\u7684\u4f7f\u7528"},{"location":"16.9/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u8bef\u7528\u534f\u7a0b\u548c\u901a\u9053 \u4e0b\u4e00\u8282\uff1a \u7cdf\u7cd5\u7684\u9519\u8bef\u5904\u7406","title":"\u94fe\u63a5"},{"location":"17.0/","text":"17.0 \u6a21\u5f0f \u00b6 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u7ae0\uff1a \u7cdf\u7cd5\u7684\u9519\u8bef\u5904\u7406 \u4e0b\u4e00\u8282\uff1a \u9017\u53f7 ok \u6a21\u5f0f","title":"17.0 \u6a21\u5f0f"},{"location":"17.0/#170","text":"","title":"17.0 \u6a21\u5f0f"},{"location":"17.0/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u7ae0\uff1a \u7cdf\u7cd5\u7684\u9519\u8bef\u5904\u7406 \u4e0b\u4e00\u8282\uff1a \u9017\u53f7 ok \u6a21\u5f0f","title":"\u94fe\u63a5"},{"location":"17.1/","text":"17.1 \u9017\u53f7 ok \u6a21\u5f0f \u00b6 \u5728\u5b66\u4e60\u672c\u4e66\u7b2c\u4e8c\u90e8\u5206\u548c\u7b2c\u4e09\u90e8\u5206\u65f6\uff0c\u6211\u4eec\u7ecf\u5e38\u5728\u4e00\u4e2a\u8868\u8fbe\u5f0f\u8fd4\u56de 2 \u4e2a\u53c2\u6570\u65f6\u4f7f\u7528\u8fd9\u79cd\u6a21\u5f0f\uff1a something, ok \uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u503c\u6216\u8005 nil \uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f true / false \u6216\u8005\u4e00\u4e2a\u9519\u8bef error \u3002\u5728\u4e00\u4e2a\u9700\u8981\u8d4b\u503c\u7684 if \u6761\u4ef6\u8bed\u53e5\u4e2d\uff0c\u4f7f\u7528\u8fd9\u79cd\u6a21\u5f0f\u53bb\u68c0\u6d4b\u7b2c\u4e8c\u4e2a\u53c2\u6570\u503c\u4f1a\u8ba9\u4ee3\u7801\u663e\u5f97\u4f18\u96c5\u7b80\u6d01\u3002\u8fd9\u79cd\u6a21\u5f0f\u5728 Go \u8bed\u8a00\u7f16\u7801\u89c4\u8303\u4e2d\u975e\u5e38\u91cd\u8981\u3002\u4e0b\u9762\u603b\u7ed3\u4e86\u6240\u6709\u4f7f\u7528\u8fd9\u79cd\u6a21\u5f0f\u7684\u4f8b\u5b50\uff1a \uff081\uff09\u5728\u51fd\u6570\u8fd4\u56de\u65f6\u68c0\u6d4b\u9519\u8bef\uff08\u53c2\u8003 \u7b2c 5.2 \u5c0f\u8282 \uff09: value , err := pack1 . Func1 ( param1 ) if err != nil { fmt . Printf ( \"Error %s in pack1.Func1 with parameter %v\" , err . Error (), param1 ) return err } // \u51fd\u6570Func1\u6ca1\u6709\u9519\u8bef: Process ( value ) e . g .: os . Open ( file ) strconv . Atoi ( str ) \u8fd9\u6bb5\u4ee3\u7801\u4e2d\u7684\u51fd\u6570\u5c06\u9519\u8bef\u8fd4\u56de\u7ed9\u5b83\u7684\u8c03\u7528\u8005\uff0c\u5f53\u51fd\u6570\u6267\u884c\u6210\u529f\u65f6\uff0c\u8fd4\u56de\u7684\u9519\u8bef\u662f nil \uff0c\u6240\u4ee5\u4f7f\u7528\u8fd9\u79cd\u5199\u6cd5\uff1a func SomeFunc () error { \u2026 if value , err := pack1 . Func1 ( param1 ); err != nil { \u2026 return err } \u2026 return nil } \u8fd9\u79cd\u6a21\u5f0f\u4e5f\u5e38\u7528\u4e8e\u901a\u8fc7 defer \u4f7f\u7a0b\u5e8f\u4ece panic \u4e2d\u6062\u590d\u6267\u884c\uff08\u53c2\u8003 \u7b2c 17.2(4) \u5c0f\u8282 \uff09\u3002 \u8981\u5b9e\u73b0\u7b80\u6d01\u7684\u9519\u8bef\u68c0\u6d4b\u4ee3\u7801\uff0c\u66f4\u597d\u7684\u65b9\u5f0f\u662f\u4f7f\u7528\u95ed\u5305\uff0c\u53c2\u8003 \u7b2c 16.10.2 \u5c0f\u8282 \uff082\uff09\u68c0\u6d4b\u6620\u5c04\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u952e\u503c\uff08\u53c2\u8003 \u7b2c 8.2 \u5c0f\u8282 \uff09\uff1a key1 \u5728\u6620\u5c04 map1 \u4e2d\u662f\u5426\u6709\u503c\uff1f if value , isPresent = map1 [ key1 ]; isPresent { Process ( value ) } // key1 \u4e0d\u5b58\u5728 \u2026 \uff083\uff09\u68c0\u6d4b\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u53d8\u91cf varI \u662f\u5426\u5305\u542b\u4e86\u7c7b\u578b T \uff1a\u7c7b\u578b\u65ad\u8a00\uff08\u53c2\u8003 \u7b2c 11.3 \u5c0f\u8282 \uff09\uff1a if value , ok := varI .( T ); ok { Process ( value ) } // \u63a5\u53e3\u7c7b\u578b varI \u6ca1\u6709\u5305\u542b\u7c7b\u578b T \uff084\uff09\u68c0\u6d4b\u4e00\u4e2a\u901a\u9053 ch \u662f\u5426\u5173\u95ed\uff08\u53c2\u8003 \u7b2c 14.3 \u5c0f\u8282 \uff09\uff1a for input := range ch { Process ( input ) } \u6216\u8005: for { if input , open := <- ch ; ! open { break // \u901a\u9053\u662f\u5173\u95ed\u7684 } Process ( input ) } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Go \u8bed\u8a00\u6a21\u5f0f \u4e0b\u4e00\u8282\uff1a defer \u6a21\u5f0f","title":"17.1 \u9017\u53f7 ok \u6a21\u5f0f"},{"location":"17.1/#171-ok","text":"\u5728\u5b66\u4e60\u672c\u4e66\u7b2c\u4e8c\u90e8\u5206\u548c\u7b2c\u4e09\u90e8\u5206\u65f6\uff0c\u6211\u4eec\u7ecf\u5e38\u5728\u4e00\u4e2a\u8868\u8fbe\u5f0f\u8fd4\u56de 2 \u4e2a\u53c2\u6570\u65f6\u4f7f\u7528\u8fd9\u79cd\u6a21\u5f0f\uff1a something, ok \uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u503c\u6216\u8005 nil \uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f true / false \u6216\u8005\u4e00\u4e2a\u9519\u8bef error \u3002\u5728\u4e00\u4e2a\u9700\u8981\u8d4b\u503c\u7684 if \u6761\u4ef6\u8bed\u53e5\u4e2d\uff0c\u4f7f\u7528\u8fd9\u79cd\u6a21\u5f0f\u53bb\u68c0\u6d4b\u7b2c\u4e8c\u4e2a\u53c2\u6570\u503c\u4f1a\u8ba9\u4ee3\u7801\u663e\u5f97\u4f18\u96c5\u7b80\u6d01\u3002\u8fd9\u79cd\u6a21\u5f0f\u5728 Go \u8bed\u8a00\u7f16\u7801\u89c4\u8303\u4e2d\u975e\u5e38\u91cd\u8981\u3002\u4e0b\u9762\u603b\u7ed3\u4e86\u6240\u6709\u4f7f\u7528\u8fd9\u79cd\u6a21\u5f0f\u7684\u4f8b\u5b50\uff1a \uff081\uff09\u5728\u51fd\u6570\u8fd4\u56de\u65f6\u68c0\u6d4b\u9519\u8bef\uff08\u53c2\u8003 \u7b2c 5.2 \u5c0f\u8282 \uff09: value , err := pack1 . Func1 ( param1 ) if err != nil { fmt . Printf ( \"Error %s in pack1.Func1 with parameter %v\" , err . Error (), param1 ) return err } // \u51fd\u6570Func1\u6ca1\u6709\u9519\u8bef: Process ( value ) e . g .: os . Open ( file ) strconv . Atoi ( str ) \u8fd9\u6bb5\u4ee3\u7801\u4e2d\u7684\u51fd\u6570\u5c06\u9519\u8bef\u8fd4\u56de\u7ed9\u5b83\u7684\u8c03\u7528\u8005\uff0c\u5f53\u51fd\u6570\u6267\u884c\u6210\u529f\u65f6\uff0c\u8fd4\u56de\u7684\u9519\u8bef\u662f nil \uff0c\u6240\u4ee5\u4f7f\u7528\u8fd9\u79cd\u5199\u6cd5\uff1a func SomeFunc () error { \u2026 if value , err := pack1 . Func1 ( param1 ); err != nil { \u2026 return err } \u2026 return nil } \u8fd9\u79cd\u6a21\u5f0f\u4e5f\u5e38\u7528\u4e8e\u901a\u8fc7 defer \u4f7f\u7a0b\u5e8f\u4ece panic \u4e2d\u6062\u590d\u6267\u884c\uff08\u53c2\u8003 \u7b2c 17.2(4) \u5c0f\u8282 \uff09\u3002 \u8981\u5b9e\u73b0\u7b80\u6d01\u7684\u9519\u8bef\u68c0\u6d4b\u4ee3\u7801\uff0c\u66f4\u597d\u7684\u65b9\u5f0f\u662f\u4f7f\u7528\u95ed\u5305\uff0c\u53c2\u8003 \u7b2c 16.10.2 \u5c0f\u8282 \uff082\uff09\u68c0\u6d4b\u6620\u5c04\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u952e\u503c\uff08\u53c2\u8003 \u7b2c 8.2 \u5c0f\u8282 \uff09\uff1a key1 \u5728\u6620\u5c04 map1 \u4e2d\u662f\u5426\u6709\u503c\uff1f if value , isPresent = map1 [ key1 ]; isPresent { Process ( value ) } // key1 \u4e0d\u5b58\u5728 \u2026 \uff083\uff09\u68c0\u6d4b\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u53d8\u91cf varI \u662f\u5426\u5305\u542b\u4e86\u7c7b\u578b T \uff1a\u7c7b\u578b\u65ad\u8a00\uff08\u53c2\u8003 \u7b2c 11.3 \u5c0f\u8282 \uff09\uff1a if value , ok := varI .( T ); ok { Process ( value ) } // \u63a5\u53e3\u7c7b\u578b varI \u6ca1\u6709\u5305\u542b\u7c7b\u578b T \uff084\uff09\u68c0\u6d4b\u4e00\u4e2a\u901a\u9053 ch \u662f\u5426\u5173\u95ed\uff08\u53c2\u8003 \u7b2c 14.3 \u5c0f\u8282 \uff09\uff1a for input := range ch { Process ( input ) } \u6216\u8005: for { if input , open := <- ch ; ! open { break // \u901a\u9053\u662f\u5173\u95ed\u7684 } Process ( input ) }","title":"17.1 \u9017\u53f7 ok \u6a21\u5f0f"},{"location":"17.1/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Go \u8bed\u8a00\u6a21\u5f0f \u4e0b\u4e00\u8282\uff1a defer \u6a21\u5f0f","title":"\u94fe\u63a5"},{"location":"17.2/","text":"17.2 defer \u6a21\u5f0f \u00b6 \u4f7f\u7528 defer \u53ef\u4ee5\u786e\u4fdd\u8d44\u6e90\u4e0d\u518d\u9700\u8981\u65f6\uff0c\u90fd\u4f1a\u88ab\u6070\u5f53\u5730\u5173\u95ed\u6216\u5f52\u8fd8\u5230\u201c\u6c60\u5b50\u201d\u4e2d\u3002\u66f4\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff0c\u5b83\u53ef\u4ee5\u6062\u590d panic\u3002 \u5173\u95ed\u4e00\u4e2a\u6587\u4ef6\u6d41\uff1a\uff08\u89c1 12.7\u8282 \uff09 // \u5148\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6 f defer f . Close () \u89e3\u9501\u4e00\u4e2a\u88ab\u9501\u5b9a\u7684\u8d44\u6e90\uff08 mutex \uff09\uff1a\uff08\u89c1 9.3\u8282 \uff09 mu . Lock () defer mu . Unlock () \u5173\u95ed\u4e00\u4e2a\u901a\u9053\uff08\u5982\u6709\u5fc5\u8981\uff09\uff1a ch := make(chan float64) defer close(ch) \u4e5f\u53ef\u4ee5\u662f\u4e24\u4e2a\u901a\u9053\uff1a answer\u03b1 , answer\u03b2 := make ( chan int ), make ( chan int ) defer func () { close ( answer\u03b1 ); close ( answer\u03b2 ) }() \u4ece panic \u6062\u590d\uff1a\uff08\u89c1 13.3\u8282 \uff09 defer func () { if err := recover (); err != nil { log . Printf ( \"run time panic: %v\" , err ) } }() \u505c\u6b62\u4e00\u4e2a\u8ba1\u65f6\u5668\uff1a\uff08\u89c1 14.5\u8282 \uff09 tick1 := time . NewTicker ( updateInterval ) defer tick1 . Stop () \u91ca\u653e\u4e00\u4e2a\u8fdb\u7a0b p\uff1a\uff08\u89c1 13.6\u8282 \uff09 p , err := os . StartProcess ( \u2026 , \u2026 , \u2026 ) defer p . Release () \u505c\u6b62 CPU \u6027\u80fd\u5206\u6790\u5e76\u7acb\u5373\u5199\u5165\uff1a\uff08\u89c1 13.10\u8282 \uff09 pprof . StartCPUProfile ( f ) defer pprof . StopCPUProfile () \u5f53\u7136 defer \u4e5f\u53ef\u4ee5\u5728\u6253\u5370\u62a5\u8868\u65f6\u907f\u514d\u5fd8\u8bb0\u8f93\u51fa\u9875\u811a\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u9017\u53f7 ok \u6a21\u5f0f \u4e0b\u4e00\u8282\uff1a \u53ef\u89c1\u6027\u6a21\u5f0f","title":"17.2 defer \u6a21\u5f0f"},{"location":"17.2/#172-defer","text":"\u4f7f\u7528 defer \u53ef\u4ee5\u786e\u4fdd\u8d44\u6e90\u4e0d\u518d\u9700\u8981\u65f6\uff0c\u90fd\u4f1a\u88ab\u6070\u5f53\u5730\u5173\u95ed\u6216\u5f52\u8fd8\u5230\u201c\u6c60\u5b50\u201d\u4e2d\u3002\u66f4\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff0c\u5b83\u53ef\u4ee5\u6062\u590d panic\u3002 \u5173\u95ed\u4e00\u4e2a\u6587\u4ef6\u6d41\uff1a\uff08\u89c1 12.7\u8282 \uff09 // \u5148\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6 f defer f . Close () \u89e3\u9501\u4e00\u4e2a\u88ab\u9501\u5b9a\u7684\u8d44\u6e90\uff08 mutex \uff09\uff1a\uff08\u89c1 9.3\u8282 \uff09 mu . Lock () defer mu . Unlock () \u5173\u95ed\u4e00\u4e2a\u901a\u9053\uff08\u5982\u6709\u5fc5\u8981\uff09\uff1a ch := make(chan float64) defer close(ch) \u4e5f\u53ef\u4ee5\u662f\u4e24\u4e2a\u901a\u9053\uff1a answer\u03b1 , answer\u03b2 := make ( chan int ), make ( chan int ) defer func () { close ( answer\u03b1 ); close ( answer\u03b2 ) }() \u4ece panic \u6062\u590d\uff1a\uff08\u89c1 13.3\u8282 \uff09 defer func () { if err := recover (); err != nil { log . Printf ( \"run time panic: %v\" , err ) } }() \u505c\u6b62\u4e00\u4e2a\u8ba1\u65f6\u5668\uff1a\uff08\u89c1 14.5\u8282 \uff09 tick1 := time . NewTicker ( updateInterval ) defer tick1 . Stop () \u91ca\u653e\u4e00\u4e2a\u8fdb\u7a0b p\uff1a\uff08\u89c1 13.6\u8282 \uff09 p , err := os . StartProcess ( \u2026 , \u2026 , \u2026 ) defer p . Release () \u505c\u6b62 CPU \u6027\u80fd\u5206\u6790\u5e76\u7acb\u5373\u5199\u5165\uff1a\uff08\u89c1 13.10\u8282 \uff09 pprof . StartCPUProfile ( f ) defer pprof . StopCPUProfile () \u5f53\u7136 defer \u4e5f\u53ef\u4ee5\u5728\u6253\u5370\u62a5\u8868\u65f6\u907f\u514d\u5fd8\u8bb0\u8f93\u51fa\u9875\u811a\u3002","title":"17.2 defer \u6a21\u5f0f"},{"location":"17.2/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u9017\u53f7 ok \u6a21\u5f0f \u4e0b\u4e00\u8282\uff1a \u53ef\u89c1\u6027\u6a21\u5f0f","title":"\u94fe\u63a5"},{"location":"17.3/","text":"17.3 \u53ef\u89c1\u6027\u6a21\u5f0f \u00b6 \u6211\u4eec\u5728 4.2.1 \u8282 \u89c1\u8fc7\u7b80\u5355\u5730\u4f7f\u7528\u53ef\u89c1\u6027\u89c4\u5219\u63a7\u5236\u5bf9\u7c7b\u578b\u6210\u5458\u7684\u8bbf\u95ee\uff0c\u4ed6\u4eec\u53ef\u4ee5\u662f Go \u53d8\u91cf\u6216\u51fd\u6570\u3002 10.2.1 \u8282 \u5c55\u793a\u4e86\u5982\u4f55\u5728\u5355\u72ec\u7684\u5305\u4e2d\u5b9a\u4e49\u7c7b\u578b\u65f6\uff0c\u5f3a\u5236\u4f7f\u7528\u5de5\u5382\u51fd\u6570\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a defer \u6a21\u5f0f \u4e0b\u4e00\u8282\uff1a \u8fd0\u7b97\u7b26\u6a21\u5f0f\u548c\u63a5\u53e3","title":"17.3 \u53ef\u89c1\u6027\u6a21\u5f0f"},{"location":"17.3/#173","text":"\u6211\u4eec\u5728 4.2.1 \u8282 \u89c1\u8fc7\u7b80\u5355\u5730\u4f7f\u7528\u53ef\u89c1\u6027\u89c4\u5219\u63a7\u5236\u5bf9\u7c7b\u578b\u6210\u5458\u7684\u8bbf\u95ee\uff0c\u4ed6\u4eec\u53ef\u4ee5\u662f Go \u53d8\u91cf\u6216\u51fd\u6570\u3002 10.2.1 \u8282 \u5c55\u793a\u4e86\u5982\u4f55\u5728\u5355\u72ec\u7684\u5305\u4e2d\u5b9a\u4e49\u7c7b\u578b\u65f6\uff0c\u5f3a\u5236\u4f7f\u7528\u5de5\u5382\u51fd\u6570\u3002","title":"17.3 \u53ef\u89c1\u6027\u6a21\u5f0f"},{"location":"17.3/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a defer \u6a21\u5f0f \u4e0b\u4e00\u8282\uff1a \u8fd0\u7b97\u7b26\u6a21\u5f0f\u548c\u63a5\u53e3","title":"\u94fe\u63a5"},{"location":"17.4/","text":"17.4 \u8fd0\u7b97\u7b26\u6a21\u5f0f\u548c\u63a5\u53e3 \u00b6 \u8fd0\u7b97\u7b26\u662f\u4e00\u5143\u6216\u4e8c\u5143\u51fd\u6570\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u65b0\u5bf9\u8c61\u800c\u4e0d\u4fee\u6539\u5176\u53c2\u6570\uff0c\u7c7b\u4f3c C++ \u4e2d\u7684 + \u548c * \uff0c\u7279\u6b8a\u7684\u4e2d\u7f00\u8fd0\u7b97\u7b26\uff08 + \uff0c - \uff0c * \u7b49\uff09\u53ef\u4ee5\u88ab\u91cd\u8f7d\u4ee5\u652f\u6301\u7c7b\u4f3c\u6570\u5b66\u8fd0\u7b97\u7684\u8bed\u6cd5\u3002\u4f46\u9664\u4e86\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\uff0cGo \u8bed\u8a00\u5e76\u4e0d\u652f\u6301\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff1a\u4e3a\u4e86\u514b\u670d\u8be5\u9650\u5236\uff0c\u8fd0\u7b97\u7b26\u5fc5\u987b\u7531\u51fd\u6570\u6765\u6a21\u62df\u3002\u65e2\u7136 Go \u540c\u65f6\u652f\u6301\u9762\u5411\u8fc7\u7a0b\u548c\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u9009\u62e9\uff1a 17.4.1 \u51fd\u6570\u4f5c\u4e3a\u8fd0\u7b97\u7b26 \u00b6 \u8fd0\u7b97\u7b26\u7531\u5305\u7ea7\u522b\u7684\u51fd\u6570\u5b9e\u73b0\uff0c\u4ee5\u64cd\u4f5c\u4e00\u4e2a\u6216\u4e24\u4e2a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u5bf9\u8c61\u3002\u51fd\u6570\u9488\u5bf9\u8981\u64cd\u4f5c\u7684\u5bf9\u8c61\uff0c\u5728\u4e13\u95e8\u7684\u5305\u4e2d\u5b9e\u73b0\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u8981\u5728\u5305 matrix \u4e2d\u5b9e\u73b0\u77e9\u9635\u64cd\u4f5c\uff0c\u5c31\u4f1a\u5305\u542b Add() \u7528\u4e8e\u77e9\u9635\u76f8\u52a0\uff0c Mult() \u7528\u4e8e\u77e9\u9635\u76f8\u4e58\uff0c\u4ed6\u4eec\u90fd\u4f1a\u8fd4\u56de\u4e00\u4e2a\u77e9\u9635\u3002\u8fd9\u4e24\u4e2a\u51fd\u6570\u901a\u8fc7\u5305\u540d\u6765\u8c03\u7528\uff0c\u56e0\u6b64\u53ef\u4ee5\u521b\u9020\u51fa\u5982\u4e0b\u5f62\u5f0f\u7684\u8868\u8fbe\u5f0f\uff1a m := matrix . Add ( m1 , matrix . Mult ( m2 , m3 )) \u5982\u679c\u6211\u4eec\u60f3\u5728\u8fd9\u4e9b\u8fd0\u7b97\u4e2d\u533a\u5206\u4e0d\u540c\u7c7b\u578b\u7684\u77e9\u9635\uff08\u7a00\u758f\u6216\u7a20\u5bc6\uff09\uff0c\u7531\u4e8e\u6ca1\u6709\u51fd\u6570\u91cd\u8f7d\uff0c\u6211\u4eec\u4e0d\u5f97\u4e0d\u7ed9\u51fd\u6570\u8d77\u4e0d\u540c\u7684\u540d\u79f0\uff0c\u4f8b\u5982\uff1a func addSparseToDense ( a * sparseMatrix , b * denseMatrix ) * denseMatrix func addDenseToDense ( a * denseMatrix , b * denseMatrix ) * denseMatrix func addSparseToSparse ( a * sparseMatrix , b * sparseMatrix ) * sparseMatrix \u8fd9\u53ef\u4e0d\u600e\u4e48\u4f18\u96c5\uff0c\u6211\u4eec\u80fd\u9009\u62e9\u7684\u6700\u4f73\u65b9\u6848\u662f\u5c06\u5b83\u4eec\u9690\u85cf\u8d77\u6765\uff0c\u4f5c\u4e3a\u5305\u7684\u79c1\u6709\u51fd\u6570\uff0c\u5e76\u66b4\u9732\u5355\u4e00\u7684 Add() \u51fd\u6570\u4f5c\u4e3a\u516c\u5171 API\u3002\u53ef\u4ee5\u5728\u5d4c\u5957\u7684 switch \u65ad\u8a00\u4e2d\u6d4b\u8bd5\u7c7b\u578b\uff0c\u4ee5\u4fbf\u5728\u4efb\u4f55\u652f\u6301\u7684\u53c2\u6570\u7ec4\u5408\u4e0a\u6267\u884c\u64cd\u4f5c\uff1a func Add ( a Matrix , b Matrix ) Matrix { switch a .( type ) { case sparseMatrix : switch b .( type ) { case sparseMatrix : return addSparseToSparse ( a .( sparseMatrix ), b .( sparseMatrix )) case denseMatrix : return addSparseToDense ( a .( sparseMatrix ), b .( denseMatrix )) \u2026 } default : // \u4e0d\u652f\u6301\u7684\u53c2\u6570 \u2026 } } \u7136\u800c\uff0c\u66f4\u4f18\u96c5\u548c\u4f18\u9009\u7684\u65b9\u6848\u662f\u5c06\u8fd0\u7b97\u7b26\u4f5c\u4e3a\u65b9\u6cd5\u5b9e\u73b0\uff0c\u6807\u51c6\u5e93\u4e2d\u5230\u5904\u90fd\u8fd0\u7528\u4e86\u8fd9\u79cd\u505a\u6cd5\u3002\u6709\u5173 Ryanne Dolan \u5b9e\u73b0\u7684\u7ebf\u6027\u4ee3\u6570\u5305\u7684\u66f4\u8be6\u7ec6\u4fe1\u606f\uff0c\u53ef\u4ee5\u5728 https://github.com/skelterjohn/go.matrix \u627e\u5230\u3002 17.4.2 \u65b9\u6cd5\u4f5c\u4e3a\u8fd0\u7b97\u7b26 \u00b6 \u6839\u636e\u63a5\u6536\u8005\u7c7b\u578b\u4e0d\u540c\uff0c\u53ef\u4ee5\u533a\u5206\u4e0d\u540c\u7684\u65b9\u6cd5\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4e3a\u6bcf\u79cd\u7c7b\u578b\u7b80\u5355\u5730\u5b9a\u4e49 Add \u65b9\u6cd5\uff0c\u6765\u4ee3\u66ff\u4f7f\u7528\u591a\u4e2a\u51fd\u6570\u540d\u79f0\uff1a func ( a * sparseMatrix ) Add ( b Matrix ) Matrix func ( a * denseMatrix ) Add ( b Matrix ) Matrix \u6bcf\u4e2a\u65b9\u6cd5\u90fd\u8fd4\u56de\u4e00\u4e2a\u65b0\u5bf9\u8c61\uff0c\u6210\u4e3a\u4e0b\u4e00\u4e2a\u65b9\u6cd5\u8c03\u7528\u7684\u63a5\u6536\u8005\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528*\u94fe\u5f0f\u8c03\u7528*\u8868\u8fbe\u5f0f\uff1a m := m1 . Mult ( m2 ). Add ( m3 ) \u6bd4\u4e0a\u4e00\u8282\u9762\u5411\u8fc7\u7a0b\u7684\u5f62\u5f0f\u66f4\u7b80\u6d01\u3002 \u6b63\u786e\u7684\u5b9e\u73b0\u540c\u6837\u53ef\u4ee5\u57fa\u4e8e\u7c7b\u578b\uff0c\u901a\u8fc7 switch \u7c7b\u578b\u65ad\u8a00\u5728\u8fd0\u884c\u65f6\u786e\u5b9a\uff1a func ( a * sparseMatrix ) Add ( b Matrix ) Matrix { switch b .( type ) { case sparseMatrix : return addSparseToSparse ( a .( sparseMatrix ), b .( sparseMatrix )) case denseMatrix : return addSparseToDense ( a .( sparseMatrix ), b .( denseMatrix )) \u2026 default : // \u4e0d\u652f\u6301\u7684\u53c2\u6570 \u2026 } } \u518d\u6b21\u5730\uff0c\u8fd9\u6bd4\u4e0a\u4e00\u8282\u5d4c\u5957\u7684 switch \u66f4\u7b80\u5355\u3002 17.4.3 \u4f7f\u7528\u63a5\u53e3 \u00b6 \u5f53\u5728\u4e0d\u540c\u7c7b\u578b\u4e0a\u6267\u884c\u76f8\u540c\u7684\u65b9\u6cd5\u65f6\uff0c\u521b\u5efa\u4e00\u4e2a\u901a\u7528\u5316\u7684\u63a5\u53e3\u4ee5\u5b9e\u73b0\u591a\u6001\u7684\u60f3\u6cd5\uff0c\u5c31\u4f1a\u81ea\u7136\u4ea7\u751f\u3002 \u4f8b\u5982\u5b9a\u4e49\u4e00\u4e2a\u4ee3\u6570 Algebraic \u63a5\u53e3\uff1a type Algebraic interface { Add ( b Algebraic ) Algebraic Min ( b Algebraic ) Algebraic Mult ( b Algebraic ) Algebraic \u2026 Elements () } \u7136\u540e\u4e3a\u6211\u4eec\u7684 matrix \u7c7b\u578b\u5b9a\u4e49 Add() \uff0c Min() \uff0c Mult() \uff0c\u2026\u2026\u7b49\u65b9\u6cd5\u3002 \u6bcf\u79cd\u5b9e\u73b0\u4e0a\u8ff0 Algebraic \u63a5\u53e3\u7c7b\u578b\u7684\u65b9\u6cd5\u90fd\u53ef\u4ee5\u94fe\u5f0f\u8c03\u7528\u3002\u6bcf\u4e2a\u65b9\u6cd5\u5b9e\u73b0\u90fd\u5e94\u57fa\u4e8e\u53c2\u6570\u7c7b\u578b\uff0c\u4f7f\u7528 switch \u7c7b\u578b\u65ad\u8a00\u6765\u63d0\u4f9b\u4f18\u5316\u8fc7\u7684\u5b9e\u73b0\u3002\u53e6\u5916\uff0c\u5e94\u8be5\u4e3a\u4ec5\u4f9d\u8d56\u4e8e\u63a5\u53e3\u7684\u65b9\u6cd5\uff0c\u6307\u5b9a\u4e00\u4e2a\u9ed8\u8ba4\u5904\u7406\u5206\u652f\uff1a func ( a * denseMatrix ) Add ( b Algebraic ) Algebraic { switch b .( type ) { case sparseMatrix : return addDenseToSparse ( a , b .( sparseMatrix )) \u2026 default : for x in range b . Elements () \u2026 } } \u5982\u679c\u4e00\u4e2a\u901a\u7528\u7684\u529f\u80fd\u65e0\u6cd5\u4ec5\u4f7f\u7528\u63a5\u53e3\u65b9\u6cd5\u6765\u5b9e\u73b0\uff0c\u4f60\u53ef\u80fd\u6b63\u5728\u5904\u7406\u4e24\u4e2a\u4e0d\u600e\u4e48\u76f8\u4f3c\u7684\u7c7b\u578b\uff0c\u6b64\u65f6\u5e94\u8be5\u653e\u5f03\u8fd9\u79cd\u8fd0\u7b97\u7b26\u6a21\u5f0f\u3002\u4f8b\u5982\uff0c\u5982\u679c a \u662f\u4e00\u4e2a\u96c6\u5408\u800c b \u662f\u4e00\u4e2a\u77e9\u9635\uff0c\u90a3\u4e48\u7f16\u5199 a.Add(b) \u6ca1\u6709\u610f\u4e49\u3002\u5c31\u96c6\u5408\u548c\u77e9\u9635\u8fd0\u7b97\u800c\u8a00\uff0c\u5f88\u96be\u5b9e\u73b0\u4e00\u4e2a\u901a\u7528\u7684 a.Add(b) \u65b9\u6cd5\u3002\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\uff0c\u628a\u5305\u62c6\u5206\u6210\u4e24\u4e2a\uff0c\u7136\u540e\u63d0\u4f9b\u5355\u72ec\u7684 AlgebraicSet \u548c AlgebraicMatrix \u63a5\u53e3\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u53ef\u89c1\u6027\u6a21\u5f0f \u4e0b\u4e00\u7ae0\uff1a \u51fa\u4e8e\u6027\u80fd\u8003\u8651\u7684\u5b9e\u7528\u4ee3\u7801\u7247\u6bb5","title":"17.4 \u8fd0\u7b97\u7b26\u6a21\u5f0f\u548c\u63a5\u53e3"},{"location":"17.4/#174","text":"\u8fd0\u7b97\u7b26\u662f\u4e00\u5143\u6216\u4e8c\u5143\u51fd\u6570\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u65b0\u5bf9\u8c61\u800c\u4e0d\u4fee\u6539\u5176\u53c2\u6570\uff0c\u7c7b\u4f3c C++ \u4e2d\u7684 + \u548c * \uff0c\u7279\u6b8a\u7684\u4e2d\u7f00\u8fd0\u7b97\u7b26\uff08 + \uff0c - \uff0c * \u7b49\uff09\u53ef\u4ee5\u88ab\u91cd\u8f7d\u4ee5\u652f\u6301\u7c7b\u4f3c\u6570\u5b66\u8fd0\u7b97\u7684\u8bed\u6cd5\u3002\u4f46\u9664\u4e86\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\uff0cGo \u8bed\u8a00\u5e76\u4e0d\u652f\u6301\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff1a\u4e3a\u4e86\u514b\u670d\u8be5\u9650\u5236\uff0c\u8fd0\u7b97\u7b26\u5fc5\u987b\u7531\u51fd\u6570\u6765\u6a21\u62df\u3002\u65e2\u7136 Go \u540c\u65f6\u652f\u6301\u9762\u5411\u8fc7\u7a0b\u548c\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u9009\u62e9\uff1a","title":"17.4 \u8fd0\u7b97\u7b26\u6a21\u5f0f\u548c\u63a5\u53e3"},{"location":"17.4/#1741","text":"\u8fd0\u7b97\u7b26\u7531\u5305\u7ea7\u522b\u7684\u51fd\u6570\u5b9e\u73b0\uff0c\u4ee5\u64cd\u4f5c\u4e00\u4e2a\u6216\u4e24\u4e2a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u5bf9\u8c61\u3002\u51fd\u6570\u9488\u5bf9\u8981\u64cd\u4f5c\u7684\u5bf9\u8c61\uff0c\u5728\u4e13\u95e8\u7684\u5305\u4e2d\u5b9e\u73b0\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u8981\u5728\u5305 matrix \u4e2d\u5b9e\u73b0\u77e9\u9635\u64cd\u4f5c\uff0c\u5c31\u4f1a\u5305\u542b Add() \u7528\u4e8e\u77e9\u9635\u76f8\u52a0\uff0c Mult() \u7528\u4e8e\u77e9\u9635\u76f8\u4e58\uff0c\u4ed6\u4eec\u90fd\u4f1a\u8fd4\u56de\u4e00\u4e2a\u77e9\u9635\u3002\u8fd9\u4e24\u4e2a\u51fd\u6570\u901a\u8fc7\u5305\u540d\u6765\u8c03\u7528\uff0c\u56e0\u6b64\u53ef\u4ee5\u521b\u9020\u51fa\u5982\u4e0b\u5f62\u5f0f\u7684\u8868\u8fbe\u5f0f\uff1a m := matrix . Add ( m1 , matrix . Mult ( m2 , m3 )) \u5982\u679c\u6211\u4eec\u60f3\u5728\u8fd9\u4e9b\u8fd0\u7b97\u4e2d\u533a\u5206\u4e0d\u540c\u7c7b\u578b\u7684\u77e9\u9635\uff08\u7a00\u758f\u6216\u7a20\u5bc6\uff09\uff0c\u7531\u4e8e\u6ca1\u6709\u51fd\u6570\u91cd\u8f7d\uff0c\u6211\u4eec\u4e0d\u5f97\u4e0d\u7ed9\u51fd\u6570\u8d77\u4e0d\u540c\u7684\u540d\u79f0\uff0c\u4f8b\u5982\uff1a func addSparseToDense ( a * sparseMatrix , b * denseMatrix ) * denseMatrix func addDenseToDense ( a * denseMatrix , b * denseMatrix ) * denseMatrix func addSparseToSparse ( a * sparseMatrix , b * sparseMatrix ) * sparseMatrix \u8fd9\u53ef\u4e0d\u600e\u4e48\u4f18\u96c5\uff0c\u6211\u4eec\u80fd\u9009\u62e9\u7684\u6700\u4f73\u65b9\u6848\u662f\u5c06\u5b83\u4eec\u9690\u85cf\u8d77\u6765\uff0c\u4f5c\u4e3a\u5305\u7684\u79c1\u6709\u51fd\u6570\uff0c\u5e76\u66b4\u9732\u5355\u4e00\u7684 Add() \u51fd\u6570\u4f5c\u4e3a\u516c\u5171 API\u3002\u53ef\u4ee5\u5728\u5d4c\u5957\u7684 switch \u65ad\u8a00\u4e2d\u6d4b\u8bd5\u7c7b\u578b\uff0c\u4ee5\u4fbf\u5728\u4efb\u4f55\u652f\u6301\u7684\u53c2\u6570\u7ec4\u5408\u4e0a\u6267\u884c\u64cd\u4f5c\uff1a func Add ( a Matrix , b Matrix ) Matrix { switch a .( type ) { case sparseMatrix : switch b .( type ) { case sparseMatrix : return addSparseToSparse ( a .( sparseMatrix ), b .( sparseMatrix )) case denseMatrix : return addSparseToDense ( a .( sparseMatrix ), b .( denseMatrix )) \u2026 } default : // \u4e0d\u652f\u6301\u7684\u53c2\u6570 \u2026 } } \u7136\u800c\uff0c\u66f4\u4f18\u96c5\u548c\u4f18\u9009\u7684\u65b9\u6848\u662f\u5c06\u8fd0\u7b97\u7b26\u4f5c\u4e3a\u65b9\u6cd5\u5b9e\u73b0\uff0c\u6807\u51c6\u5e93\u4e2d\u5230\u5904\u90fd\u8fd0\u7528\u4e86\u8fd9\u79cd\u505a\u6cd5\u3002\u6709\u5173 Ryanne Dolan \u5b9e\u73b0\u7684\u7ebf\u6027\u4ee3\u6570\u5305\u7684\u66f4\u8be6\u7ec6\u4fe1\u606f\uff0c\u53ef\u4ee5\u5728 https://github.com/skelterjohn/go.matrix \u627e\u5230\u3002","title":"17.4.1 \u51fd\u6570\u4f5c\u4e3a\u8fd0\u7b97\u7b26"},{"location":"17.4/#1742","text":"\u6839\u636e\u63a5\u6536\u8005\u7c7b\u578b\u4e0d\u540c\uff0c\u53ef\u4ee5\u533a\u5206\u4e0d\u540c\u7684\u65b9\u6cd5\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4e3a\u6bcf\u79cd\u7c7b\u578b\u7b80\u5355\u5730\u5b9a\u4e49 Add \u65b9\u6cd5\uff0c\u6765\u4ee3\u66ff\u4f7f\u7528\u591a\u4e2a\u51fd\u6570\u540d\u79f0\uff1a func ( a * sparseMatrix ) Add ( b Matrix ) Matrix func ( a * denseMatrix ) Add ( b Matrix ) Matrix \u6bcf\u4e2a\u65b9\u6cd5\u90fd\u8fd4\u56de\u4e00\u4e2a\u65b0\u5bf9\u8c61\uff0c\u6210\u4e3a\u4e0b\u4e00\u4e2a\u65b9\u6cd5\u8c03\u7528\u7684\u63a5\u6536\u8005\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528*\u94fe\u5f0f\u8c03\u7528*\u8868\u8fbe\u5f0f\uff1a m := m1 . Mult ( m2 ). Add ( m3 ) \u6bd4\u4e0a\u4e00\u8282\u9762\u5411\u8fc7\u7a0b\u7684\u5f62\u5f0f\u66f4\u7b80\u6d01\u3002 \u6b63\u786e\u7684\u5b9e\u73b0\u540c\u6837\u53ef\u4ee5\u57fa\u4e8e\u7c7b\u578b\uff0c\u901a\u8fc7 switch \u7c7b\u578b\u65ad\u8a00\u5728\u8fd0\u884c\u65f6\u786e\u5b9a\uff1a func ( a * sparseMatrix ) Add ( b Matrix ) Matrix { switch b .( type ) { case sparseMatrix : return addSparseToSparse ( a .( sparseMatrix ), b .( sparseMatrix )) case denseMatrix : return addSparseToDense ( a .( sparseMatrix ), b .( denseMatrix )) \u2026 default : // \u4e0d\u652f\u6301\u7684\u53c2\u6570 \u2026 } } \u518d\u6b21\u5730\uff0c\u8fd9\u6bd4\u4e0a\u4e00\u8282\u5d4c\u5957\u7684 switch \u66f4\u7b80\u5355\u3002","title":"17.4.2 \u65b9\u6cd5\u4f5c\u4e3a\u8fd0\u7b97\u7b26"},{"location":"17.4/#1743","text":"\u5f53\u5728\u4e0d\u540c\u7c7b\u578b\u4e0a\u6267\u884c\u76f8\u540c\u7684\u65b9\u6cd5\u65f6\uff0c\u521b\u5efa\u4e00\u4e2a\u901a\u7528\u5316\u7684\u63a5\u53e3\u4ee5\u5b9e\u73b0\u591a\u6001\u7684\u60f3\u6cd5\uff0c\u5c31\u4f1a\u81ea\u7136\u4ea7\u751f\u3002 \u4f8b\u5982\u5b9a\u4e49\u4e00\u4e2a\u4ee3\u6570 Algebraic \u63a5\u53e3\uff1a type Algebraic interface { Add ( b Algebraic ) Algebraic Min ( b Algebraic ) Algebraic Mult ( b Algebraic ) Algebraic \u2026 Elements () } \u7136\u540e\u4e3a\u6211\u4eec\u7684 matrix \u7c7b\u578b\u5b9a\u4e49 Add() \uff0c Min() \uff0c Mult() \uff0c\u2026\u2026\u7b49\u65b9\u6cd5\u3002 \u6bcf\u79cd\u5b9e\u73b0\u4e0a\u8ff0 Algebraic \u63a5\u53e3\u7c7b\u578b\u7684\u65b9\u6cd5\u90fd\u53ef\u4ee5\u94fe\u5f0f\u8c03\u7528\u3002\u6bcf\u4e2a\u65b9\u6cd5\u5b9e\u73b0\u90fd\u5e94\u57fa\u4e8e\u53c2\u6570\u7c7b\u578b\uff0c\u4f7f\u7528 switch \u7c7b\u578b\u65ad\u8a00\u6765\u63d0\u4f9b\u4f18\u5316\u8fc7\u7684\u5b9e\u73b0\u3002\u53e6\u5916\uff0c\u5e94\u8be5\u4e3a\u4ec5\u4f9d\u8d56\u4e8e\u63a5\u53e3\u7684\u65b9\u6cd5\uff0c\u6307\u5b9a\u4e00\u4e2a\u9ed8\u8ba4\u5904\u7406\u5206\u652f\uff1a func ( a * denseMatrix ) Add ( b Algebraic ) Algebraic { switch b .( type ) { case sparseMatrix : return addDenseToSparse ( a , b .( sparseMatrix )) \u2026 default : for x in range b . Elements () \u2026 } } \u5982\u679c\u4e00\u4e2a\u901a\u7528\u7684\u529f\u80fd\u65e0\u6cd5\u4ec5\u4f7f\u7528\u63a5\u53e3\u65b9\u6cd5\u6765\u5b9e\u73b0\uff0c\u4f60\u53ef\u80fd\u6b63\u5728\u5904\u7406\u4e24\u4e2a\u4e0d\u600e\u4e48\u76f8\u4f3c\u7684\u7c7b\u578b\uff0c\u6b64\u65f6\u5e94\u8be5\u653e\u5f03\u8fd9\u79cd\u8fd0\u7b97\u7b26\u6a21\u5f0f\u3002\u4f8b\u5982\uff0c\u5982\u679c a \u662f\u4e00\u4e2a\u96c6\u5408\u800c b \u662f\u4e00\u4e2a\u77e9\u9635\uff0c\u90a3\u4e48\u7f16\u5199 a.Add(b) \u6ca1\u6709\u610f\u4e49\u3002\u5c31\u96c6\u5408\u548c\u77e9\u9635\u8fd0\u7b97\u800c\u8a00\uff0c\u5f88\u96be\u5b9e\u73b0\u4e00\u4e2a\u901a\u7528\u7684 a.Add(b) \u65b9\u6cd5\u3002\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\uff0c\u628a\u5305\u62c6\u5206\u6210\u4e24\u4e2a\uff0c\u7136\u540e\u63d0\u4f9b\u5355\u72ec\u7684 AlgebraicSet \u548c AlgebraicMatrix \u63a5\u53e3\u3002","title":"17.4.3 \u4f7f\u7528\u63a5\u53e3"},{"location":"17.4/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u53ef\u89c1\u6027\u6a21\u5f0f \u4e0b\u4e00\u7ae0\uff1a \u51fa\u4e8e\u6027\u80fd\u8003\u8651\u7684\u5b9e\u7528\u4ee3\u7801\u7247\u6bb5","title":"\u94fe\u63a5"},{"location":"18.0/","text":"18.0 \u51fa\u4e8e\u6027\u80fd\u8003\u8651\u7684\u5b9e\u7528\u4ee3\u7801\u7247\u6bb5 \u00b6 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u7ae0\uff1a \u8fd0\u7b97\u7b26\u6a21\u5f0f\u548c\u63a5\u53e3 \u4e0b\u4e00\u8282\uff1a \u5b57\u7b26\u4e32","title":"18.0 \u51fa\u4e8e\u6027\u80fd\u8003\u8651\u7684\u5b9e\u7528\u4ee3\u7801\u7247\u6bb5"},{"location":"18.0/#180","text":"","title":"18.0 \u51fa\u4e8e\u6027\u80fd\u8003\u8651\u7684\u5b9e\u7528\u4ee3\u7801\u7247\u6bb5"},{"location":"18.0/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u7ae0\uff1a \u8fd0\u7b97\u7b26\u6a21\u5f0f\u548c\u63a5\u53e3 \u4e0b\u4e00\u8282\uff1a \u5b57\u7b26\u4e32","title":"\u94fe\u63a5"},{"location":"18.1/","text":"18.1 \u5b57\u7b26\u4e32 \u00b6 \uff081\uff09\u5982\u4f55\u4fee\u6539\u5b57\u7b26\u4e32\u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\uff1a str := \"hello\" c := [] byte ( str ) c [ 0 ]= 'c' s2 := string ( c ) // s2 == \"cello\" \uff082\uff09\u5982\u4f55\u83b7\u53d6\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\uff1a substr := str [ n : m ] \uff083\uff09\u5982\u4f55\u4f7f\u7528 for \u6216\u8005 for-range \u904d\u5386\u4e00\u4e2a\u5b57\u7b26\u4e32\uff1a // gives only the bytes: for i := 0 ; i < len ( str ); i ++ { \u2026 = str [ i ] } // gives the Unicode characters: for ix , ch := range str { \u2026 } \uff084\uff09\u5982\u4f55\u83b7\u53d6\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5b57\u8282\u6570\uff1a len(str) \u5982\u4f55\u83b7\u53d6\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u6570\uff1a \uff08\u6700\u5feb\u901f\uff09\u4f7f\u7528 utf8.RuneCountInString(str) \u6216\u4f7f\u7528 len([]rune(str)) \uff085\uff09\u5982\u4f55\u8fde\u63a5\u5b57\u7b26\u4e32\uff1a \uff08\u6700\u5feb\u901f\uff09\u4f7f\u7528 bytes.Buffer \uff08\u53c2\u8003 \u7ae0\u8282 7.2 \uff09 \u6216\u4f7f\u7528 Strings.Join() \uff08\u53c2\u8003 \u7ae0\u8282 4.7 \uff09 \u6216\u4f7f\u7528 += \uff1a str1 := \"Hello \" str2 := \"World!\" str1 += str2 //str1 == \"Hello World!\" \uff086\uff09\u5982\u4f55\u89e3\u6790\u547d\u4ee4\u884c\u53c2\u6570\uff1a\u4f7f\u7528 os \u6216\u8005 flag \u5305\uff08\u53c2\u8003 \u4f8b 12.4 \uff09 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u51fa\u4e8e\u6027\u80fd\u8003\u8651\u7684\u5b9e\u7528\u4ee3\u7801\u7247\u6bb5 \u4e0b\u4e00\u8282\uff1a \u6570\u7ec4\u548c\u5207\u7247","title":"18.1 \u5b57\u7b26\u4e32"},{"location":"18.1/#181","text":"\uff081\uff09\u5982\u4f55\u4fee\u6539\u5b57\u7b26\u4e32\u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\uff1a str := \"hello\" c := [] byte ( str ) c [ 0 ]= 'c' s2 := string ( c ) // s2 == \"cello\" \uff082\uff09\u5982\u4f55\u83b7\u53d6\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\uff1a substr := str [ n : m ] \uff083\uff09\u5982\u4f55\u4f7f\u7528 for \u6216\u8005 for-range \u904d\u5386\u4e00\u4e2a\u5b57\u7b26\u4e32\uff1a // gives only the bytes: for i := 0 ; i < len ( str ); i ++ { \u2026 = str [ i ] } // gives the Unicode characters: for ix , ch := range str { \u2026 } \uff084\uff09\u5982\u4f55\u83b7\u53d6\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5b57\u8282\u6570\uff1a len(str) \u5982\u4f55\u83b7\u53d6\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u6570\uff1a \uff08\u6700\u5feb\u901f\uff09\u4f7f\u7528 utf8.RuneCountInString(str) \u6216\u4f7f\u7528 len([]rune(str)) \uff085\uff09\u5982\u4f55\u8fde\u63a5\u5b57\u7b26\u4e32\uff1a \uff08\u6700\u5feb\u901f\uff09\u4f7f\u7528 bytes.Buffer \uff08\u53c2\u8003 \u7ae0\u8282 7.2 \uff09 \u6216\u4f7f\u7528 Strings.Join() \uff08\u53c2\u8003 \u7ae0\u8282 4.7 \uff09 \u6216\u4f7f\u7528 += \uff1a str1 := \"Hello \" str2 := \"World!\" str1 += str2 //str1 == \"Hello World!\" \uff086\uff09\u5982\u4f55\u89e3\u6790\u547d\u4ee4\u884c\u53c2\u6570\uff1a\u4f7f\u7528 os \u6216\u8005 flag \u5305\uff08\u53c2\u8003 \u4f8b 12.4 \uff09","title":"18.1 \u5b57\u7b26\u4e32"},{"location":"18.1/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u51fa\u4e8e\u6027\u80fd\u8003\u8651\u7684\u5b9e\u7528\u4ee3\u7801\u7247\u6bb5 \u4e0b\u4e00\u8282\uff1a \u6570\u7ec4\u548c\u5207\u7247","title":"\u94fe\u63a5"},{"location":"18.10/","text":"18.10 \u5176\u4ed6 \u00b6 \u5982\u4f55\u5728\u7a0b\u5e8f\u51fa\u9519\u65f6\u7ec8\u6b62\u7a0b\u5e8f\uff1a if err != nil { fmt . Printf ( \"Program stopping with error %v\" , err ) os . Exit ( 1 ) } \u6216\u8005\uff1a if err != nil { panic ( \"ERROR occurred: \" + err . Error ()) } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7f51\u7edc\u548c\u7f51\u9875\u5e94\u7528 \u4e0b\u4e00\u8282\uff1a \u51fa\u4e8e\u6027\u80fd\u8003\u8651\u7684\u6700\u4f73\u5b9e\u8df5\u548c\u5efa\u8bae","title":"18.10 \u5176\u4ed6"},{"location":"18.10/#1810","text":"\u5982\u4f55\u5728\u7a0b\u5e8f\u51fa\u9519\u65f6\u7ec8\u6b62\u7a0b\u5e8f\uff1a if err != nil { fmt . Printf ( \"Program stopping with error %v\" , err ) os . Exit ( 1 ) } \u6216\u8005\uff1a if err != nil { panic ( \"ERROR occurred: \" + err . Error ()) }","title":"18.10 \u5176\u4ed6"},{"location":"18.10/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7f51\u7edc\u548c\u7f51\u9875\u5e94\u7528 \u4e0b\u4e00\u8282\uff1a \u51fa\u4e8e\u6027\u80fd\u8003\u8651\u7684\u6700\u4f73\u5b9e\u8df5\u548c\u5efa\u8bae","title":"\u94fe\u63a5"},{"location":"18.11/","text":"18.11 \u51fa\u4e8e\u6027\u80fd\u8003\u8651\u7684\u6700\u4f73\u5b9e\u8df5\u548c\u5efa\u8bae \u00b6 \uff081\uff09\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528 := \u53bb\u521d\u59cb\u5316\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf\uff08\u5728\u51fd\u6570\u5185\u90e8\uff09\uff1b \uff082\uff09\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528\u5b57\u7b26\u4ee3\u66ff\u5b57\u7b26\u4e32\uff1b \uff083\uff09\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528\u5207\u7247\u4ee3\u66ff\u6570\u7ec4\uff1b \uff084\uff09\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528\u6570\u7ec4\u548c\u5207\u7247\u4ee3\u66ff\u6620\u5c04\uff08\u8be6\u89c1\u53c2\u8003\u6587\u732e 15\uff09\uff1b \uff085\uff09\u5982\u679c\u53ea\u60f3\u83b7\u53d6\u5207\u7247\u4e2d\u67d0\u9879\u503c\uff0c\u4e0d\u9700\u8981\u503c\u7684\u7d22\u5f15\uff0c\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528 for range \u53bb\u904d\u5386\u5207\u7247\uff0c\u8fd9\u6bd4\u5fc5\u987b\u67e5\u8be2\u5207\u7247\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8981\u5feb\u4e00\u4e9b\uff1b \uff086\uff09\u5f53\u6570\u7ec4\u5143\u7d20\u662f\u7a00\u758f\u7684\uff08\u4f8b\u5982\u6709\u5f88\u591a 0 \u503c\u6216\u8005\u7a7a\u503c nil \uff09\uff0c\u4f7f\u7528\u6620\u5c04\u4f1a\u964d\u4f4e\u5185\u5b58\u6d88\u8017\uff1b \uff087\uff09\u521d\u59cb\u5316\u6620\u5c04\u65f6\u6307\u5b9a\u5176\u5bb9\u91cf\uff1b \uff088\uff09\u5f53\u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5\u65f6\uff0c\u4f7f\u7528\u6307\u9488\u7c7b\u578b\u4f5c\u4e3a\u65b9\u6cd5\u7684\u63a5\u53d7\u8005\uff1b \uff089\uff09\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u5e38\u91cf\u6216\u8005\u6807\u5fd7\u63d0\u53d6\u5e38\u91cf\u7684\u503c\uff1b \uff0810\uff09\u5c3d\u53ef\u80fd\u5728\u9700\u8981\u5206\u914d\u5927\u91cf\u5185\u5b58\u65f6\u4f7f\u7528\u7f13\u5b58\uff1b \uff0811\uff09\u4f7f\u7528\u7f13\u5b58\u6a21\u677f\uff08\u53c2\u8003 \u7ae0\u8282 15.7 \uff09\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5176\u4ed6 \u4e0b\u4e00\u7ae0\uff1a \u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u5e94\u7528\u7a0b\u5e8f","title":"18.11 \u51fa\u4e8e\u6027\u80fd\u8003\u8651\u7684\u6700\u4f73\u5b9e\u8df5\u548c\u5efa\u8bae"},{"location":"18.11/#1811","text":"\uff081\uff09\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528 := \u53bb\u521d\u59cb\u5316\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf\uff08\u5728\u51fd\u6570\u5185\u90e8\uff09\uff1b \uff082\uff09\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528\u5b57\u7b26\u4ee3\u66ff\u5b57\u7b26\u4e32\uff1b \uff083\uff09\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528\u5207\u7247\u4ee3\u66ff\u6570\u7ec4\uff1b \uff084\uff09\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528\u6570\u7ec4\u548c\u5207\u7247\u4ee3\u66ff\u6620\u5c04\uff08\u8be6\u89c1\u53c2\u8003\u6587\u732e 15\uff09\uff1b \uff085\uff09\u5982\u679c\u53ea\u60f3\u83b7\u53d6\u5207\u7247\u4e2d\u67d0\u9879\u503c\uff0c\u4e0d\u9700\u8981\u503c\u7684\u7d22\u5f15\uff0c\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528 for range \u53bb\u904d\u5386\u5207\u7247\uff0c\u8fd9\u6bd4\u5fc5\u987b\u67e5\u8be2\u5207\u7247\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8981\u5feb\u4e00\u4e9b\uff1b \uff086\uff09\u5f53\u6570\u7ec4\u5143\u7d20\u662f\u7a00\u758f\u7684\uff08\u4f8b\u5982\u6709\u5f88\u591a 0 \u503c\u6216\u8005\u7a7a\u503c nil \uff09\uff0c\u4f7f\u7528\u6620\u5c04\u4f1a\u964d\u4f4e\u5185\u5b58\u6d88\u8017\uff1b \uff087\uff09\u521d\u59cb\u5316\u6620\u5c04\u65f6\u6307\u5b9a\u5176\u5bb9\u91cf\uff1b \uff088\uff09\u5f53\u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5\u65f6\uff0c\u4f7f\u7528\u6307\u9488\u7c7b\u578b\u4f5c\u4e3a\u65b9\u6cd5\u7684\u63a5\u53d7\u8005\uff1b \uff089\uff09\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u5e38\u91cf\u6216\u8005\u6807\u5fd7\u63d0\u53d6\u5e38\u91cf\u7684\u503c\uff1b \uff0810\uff09\u5c3d\u53ef\u80fd\u5728\u9700\u8981\u5206\u914d\u5927\u91cf\u5185\u5b58\u65f6\u4f7f\u7528\u7f13\u5b58\uff1b \uff0811\uff09\u4f7f\u7528\u7f13\u5b58\u6a21\u677f\uff08\u53c2\u8003 \u7ae0\u8282 15.7 \uff09\u3002","title":"18.11 \u51fa\u4e8e\u6027\u80fd\u8003\u8651\u7684\u6700\u4f73\u5b9e\u8df5\u548c\u5efa\u8bae"},{"location":"18.11/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5176\u4ed6 \u4e0b\u4e00\u7ae0\uff1a \u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u5e94\u7528\u7a0b\u5e8f","title":"\u94fe\u63a5"},{"location":"18.2/","text":"18.2 \u6570\u7ec4\u548c\u5207\u7247 \u00b6 \u521b\u5efa\uff1a arr1 := new([len]type) slice1 := make([]type, len) \u521d\u59cb\u5316\uff1a arr1 := [...]type{i1, i2, i3, i4, i5} arrKeyValue := [len]type{i1: val1, i2: val2} var slice1 []type = arr1[start:end] \uff081\uff09\u5982\u4f55\u622a\u65ad\u6570\u7ec4\u6216\u8005\u5207\u7247\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff1a \u200b line = line[:len(line)-1] \uff082\uff09\u5982\u4f55\u4f7f\u7528 for \u6216\u8005 for-range \u904d\u5386\u4e00\u4e2a\u6570\u7ec4\uff08\u6216\u8005\u5207\u7247\uff09\uff1a for i := 0 ; i < len ( arr ); i ++ { \u2026 = arr [ i ] } for ix , value := range arr { \u2026 } \uff083\uff09\u5982\u4f55\u5728\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u6216\u8005\u5207\u7247 arr2Dim \u4e2d\u67e5\u627e\u4e00\u4e2a\u6307\u5b9a\u503c V \uff1a found := false Found : for row := range arr2Dim { for column := range arr2Dim [ row ] { if arr2Dim [ row ][ column ] == V { found = true break Found } } } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5b57\u7b26\u4e32 \u4e0b\u4e00\u8282\uff1a \u6620\u5c04","title":"18.2 \u6570\u7ec4\u548c\u5207\u7247"},{"location":"18.2/#182","text":"\u521b\u5efa\uff1a arr1 := new([len]type) slice1 := make([]type, len) \u521d\u59cb\u5316\uff1a arr1 := [...]type{i1, i2, i3, i4, i5} arrKeyValue := [len]type{i1: val1, i2: val2} var slice1 []type = arr1[start:end] \uff081\uff09\u5982\u4f55\u622a\u65ad\u6570\u7ec4\u6216\u8005\u5207\u7247\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff1a \u200b line = line[:len(line)-1] \uff082\uff09\u5982\u4f55\u4f7f\u7528 for \u6216\u8005 for-range \u904d\u5386\u4e00\u4e2a\u6570\u7ec4\uff08\u6216\u8005\u5207\u7247\uff09\uff1a for i := 0 ; i < len ( arr ); i ++ { \u2026 = arr [ i ] } for ix , value := range arr { \u2026 } \uff083\uff09\u5982\u4f55\u5728\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u6216\u8005\u5207\u7247 arr2Dim \u4e2d\u67e5\u627e\u4e00\u4e2a\u6307\u5b9a\u503c V \uff1a found := false Found : for row := range arr2Dim { for column := range arr2Dim [ row ] { if arr2Dim [ row ][ column ] == V { found = true break Found } } }","title":"18.2 \u6570\u7ec4\u548c\u5207\u7247"},{"location":"18.2/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5b57\u7b26\u4e32 \u4e0b\u4e00\u8282\uff1a \u6620\u5c04","title":"\u94fe\u63a5"},{"location":"18.3/","text":"18.3 \u6620\u5c04 \u00b6 \u521b\u5efa\uff1a map1 := make(map[keytype]valuetype) \u521d\u59cb\u5316\uff1a map1 := map[string]int{\"one\": 1, \"two\": 2} \uff081\uff09\u5982\u4f55\u4f7f\u7528 for \u6216\u8005 for-range \u904d\u5386\u4e00\u4e2a\u6620\u5c04\uff1a for key , value := range map1 { \u2026 } \uff082\uff09\u5982\u4f55\u5728\u4e00\u4e2a\u6620\u5c04\u4e2d\u68c0\u6d4b\u952e key1 \u662f\u5426\u5b58\u5728\uff1a val1, isPresent = map1[key1] \u8fd4\u56de\u503c\uff1a\u952e key1 \u5bf9\u5e94\u7684\u503c\u6216\u8005 0 \uff0c true \u6216\u8005 false \uff083\uff09\u5982\u4f55\u5728\u6620\u5c04\u4e2d\u5220\u9664\u4e00\u4e2a\u952e\uff1a delete(map1, key1) \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6570\u7ec4\u548c\u5207\u7247 \u4e0b\u4e00\u8282\uff1a \u7ed3\u6784\u4f53","title":"18.3 \u6620\u5c04"},{"location":"18.3/#183","text":"\u521b\u5efa\uff1a map1 := make(map[keytype]valuetype) \u521d\u59cb\u5316\uff1a map1 := map[string]int{\"one\": 1, \"two\": 2} \uff081\uff09\u5982\u4f55\u4f7f\u7528 for \u6216\u8005 for-range \u904d\u5386\u4e00\u4e2a\u6620\u5c04\uff1a for key , value := range map1 { \u2026 } \uff082\uff09\u5982\u4f55\u5728\u4e00\u4e2a\u6620\u5c04\u4e2d\u68c0\u6d4b\u952e key1 \u662f\u5426\u5b58\u5728\uff1a val1, isPresent = map1[key1] \u8fd4\u56de\u503c\uff1a\u952e key1 \u5bf9\u5e94\u7684\u503c\u6216\u8005 0 \uff0c true \u6216\u8005 false \uff083\uff09\u5982\u4f55\u5728\u6620\u5c04\u4e2d\u5220\u9664\u4e00\u4e2a\u952e\uff1a delete(map1, key1)","title":"18.3 \u6620\u5c04"},{"location":"18.3/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6570\u7ec4\u548c\u5207\u7247 \u4e0b\u4e00\u8282\uff1a \u7ed3\u6784\u4f53","title":"\u94fe\u63a5"},{"location":"18.4/","text":"18.4 \u7ed3\u6784\u4f53 \u00b6 \u521b\u5efa\uff1a type struct1 struct { field1 type1 field2 type2 \u2026 } ms := new ( struct1 ) \u521d\u59cb\u5316\uff1a ms := & struct1 { 10 , 15.5 , \"Chris\" } \u5f53\u7ed3\u6784\u4f53\u7684\u547d\u540d\u4ee5\u5927\u5199\u5b57\u6bcd\u5f00\u5934\u65f6\uff0c\u8be5\u7ed3\u6784\u4f53\u5728\u5305\u5916\u53ef\u89c1\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e3a\u6bcf\u4e2a\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e00\u4e2a\u6784\u5efa\u51fd\u6570\uff0c\u5e76\u63a8\u8350\u4f7f\u7528\u6784\u5efa\u51fd\u6570\u521d\u59cb\u5316\u7ed3\u6784\u4f53\uff08\u53c2\u8003 \u4f8b 10.2 \uff09\uff1a ms := Newstruct1 { 10 , 15.5 , \"Chris\" } func Newstruct1 ( n int , f float32 , name string ) * struct1 { return & struct1 { n , f , name } } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6620\u5c04 \u4e0b\u4e00\u8282\uff1a \u63a5\u53e3","title":"18.4 \u7ed3\u6784\u4f53"},{"location":"18.4/#184","text":"\u521b\u5efa\uff1a type struct1 struct { field1 type1 field2 type2 \u2026 } ms := new ( struct1 ) \u521d\u59cb\u5316\uff1a ms := & struct1 { 10 , 15.5 , \"Chris\" } \u5f53\u7ed3\u6784\u4f53\u7684\u547d\u540d\u4ee5\u5927\u5199\u5b57\u6bcd\u5f00\u5934\u65f6\uff0c\u8be5\u7ed3\u6784\u4f53\u5728\u5305\u5916\u53ef\u89c1\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e3a\u6bcf\u4e2a\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e00\u4e2a\u6784\u5efa\u51fd\u6570\uff0c\u5e76\u63a8\u8350\u4f7f\u7528\u6784\u5efa\u51fd\u6570\u521d\u59cb\u5316\u7ed3\u6784\u4f53\uff08\u53c2\u8003 \u4f8b 10.2 \uff09\uff1a ms := Newstruct1 { 10 , 15.5 , \"Chris\" } func Newstruct1 ( n int , f float32 , name string ) * struct1 { return & struct1 { n , f , name } }","title":"18.4 \u7ed3\u6784\u4f53"},{"location":"18.4/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6620\u5c04 \u4e0b\u4e00\u8282\uff1a \u63a5\u53e3","title":"\u94fe\u63a5"},{"location":"18.5/","text":"18.5 \u63a5\u53e3 \u00b6 \uff081\uff09\u5982\u4f55\u68c0\u6d4b\u4e00\u4e2a\u503c v \u662f\u5426\u5b9e\u73b0\u4e86\u63a5\u53e3 Stringer \uff1a if v , ok := v .( Stringer ); ok { fmt . Printf ( \"implements String(): %s\\n\" , v . String ()) } \uff082\uff09\u5982\u4f55\u4f7f\u7528\u63a5\u53e3\u5b9e\u73b0\u4e00\u4e2a\u7c7b\u578b\u5206\u7c7b\u51fd\u6570\uff1a func classifier ( items ... interface {}) { for i , x := range items { switch x .( type ) { case bool : fmt . Printf ( \"param #%d is a bool\\n\" , i ) case float64 : fmt . Printf ( \"param #%d is a float64\\n\" , i ) case int , int64 : fmt . Printf ( \"param #%d is an int\\n\" , i ) case nil : fmt . Printf ( \"param #%d is nil\\n\" , i ) case string : fmt . Printf ( \"param #%d is a string\\n\" , i ) default : fmt . Printf ( \"param #%d\u2019s type is unknown\\n\" , i ) } } } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7ed3\u6784\u4f53 \u4e0b\u4e00\u8282\uff1a \u51fd\u6570","title":"18.5 \u63a5\u53e3"},{"location":"18.5/#185","text":"\uff081\uff09\u5982\u4f55\u68c0\u6d4b\u4e00\u4e2a\u503c v \u662f\u5426\u5b9e\u73b0\u4e86\u63a5\u53e3 Stringer \uff1a if v , ok := v .( Stringer ); ok { fmt . Printf ( \"implements String(): %s\\n\" , v . String ()) } \uff082\uff09\u5982\u4f55\u4f7f\u7528\u63a5\u53e3\u5b9e\u73b0\u4e00\u4e2a\u7c7b\u578b\u5206\u7c7b\u51fd\u6570\uff1a func classifier ( items ... interface {}) { for i , x := range items { switch x .( type ) { case bool : fmt . Printf ( \"param #%d is a bool\\n\" , i ) case float64 : fmt . Printf ( \"param #%d is a float64\\n\" , i ) case int , int64 : fmt . Printf ( \"param #%d is an int\\n\" , i ) case nil : fmt . Printf ( \"param #%d is nil\\n\" , i ) case string : fmt . Printf ( \"param #%d is a string\\n\" , i ) default : fmt . Printf ( \"param #%d\u2019s type is unknown\\n\" , i ) } } }","title":"18.5 \u63a5\u53e3"},{"location":"18.5/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7ed3\u6784\u4f53 \u4e0b\u4e00\u8282\uff1a \u51fd\u6570","title":"\u94fe\u63a5"},{"location":"18.6/","text":"18.6 \u51fd\u6570 \u00b6 \u5982\u4f55\u4f7f\u7528\u5185\u5efa\u51fd\u6570 recover() \u7ec8\u6b62 panic() \u8fc7\u7a0b\uff08\u53c2\u8003 \u7ae0\u8282 13.3 \uff09\uff1a func protect ( g func ()) { defer func () { log . Println ( \"done\" ) // Println executes normally even if there is a panic if x := recover (); x != nil { log . Printf ( \"run time panic: %v\" , x ) } }() log . Println ( \"start\" ) g () } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u63a5\u53e3 \u4e0b\u4e00\u8282\uff1a \u6587\u4ef6","title":"18.6 \u51fd\u6570"},{"location":"18.6/#186","text":"\u5982\u4f55\u4f7f\u7528\u5185\u5efa\u51fd\u6570 recover() \u7ec8\u6b62 panic() \u8fc7\u7a0b\uff08\u53c2\u8003 \u7ae0\u8282 13.3 \uff09\uff1a func protect ( g func ()) { defer func () { log . Println ( \"done\" ) // Println executes normally even if there is a panic if x := recover (); x != nil { log . Printf ( \"run time panic: %v\" , x ) } }() log . Println ( \"start\" ) g () }","title":"18.6 \u51fd\u6570"},{"location":"18.6/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u63a5\u53e3 \u4e0b\u4e00\u8282\uff1a \u6587\u4ef6","title":"\u94fe\u63a5"},{"location":"18.7/","text":"18.7 \u6587\u4ef6 \u00b6 \uff081\uff09\u5982\u4f55\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u5e76\u8bfb\u53d6\uff1a file , err := os . Open ( \"input.dat\" ) if err != nil { fmt . Printf ( \"An error occurred on opening the inputfile\\n\" + \"Does the file exist?\\n\" + \"Have you got acces to it?\\n\" ) return } defer file . Close () iReader := bufio . NewReader ( file ) for { str , err := iReader . ReadString ( '\\n' ) if err != nil { return // error or EOF } fmt . Printf ( \"The input was: %s\" , str ) } \uff082\uff09\u5982\u4f55\u901a\u8fc7\u5207\u7247\u8bfb\u5199\u6587\u4ef6\uff1a func cat ( f * file . File ) { const NBUF = 512 var buf [ NBUF ] byte for { switch nr , er := f . Read ( buf [:]); true { case nr < 0 : fmt . Fprintf ( os . Stderr , \"cat: error reading from %s: %s\\n\" , f . String (), er . String ()) os . Exit ( 1 ) case nr == 0 : // EOF return case nr > 0 : if nw , ew := file . Stdout . Write ( buf [ 0 : nr ]); nw != nr { fmt . Fprintf ( os . Stderr , \"cat: error writing from %s: %s\\n\" , f . String (), ew . String ()) } } } } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u51fd\u6570 \u4e0b\u4e00\u8282\uff1a \u534f\u7a0b (goroutine) \u4e0e\u901a\u9053 (channel)","title":"18.7 \u6587\u4ef6"},{"location":"18.7/#187","text":"\uff081\uff09\u5982\u4f55\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u5e76\u8bfb\u53d6\uff1a file , err := os . Open ( \"input.dat\" ) if err != nil { fmt . Printf ( \"An error occurred on opening the inputfile\\n\" + \"Does the file exist?\\n\" + \"Have you got acces to it?\\n\" ) return } defer file . Close () iReader := bufio . NewReader ( file ) for { str , err := iReader . ReadString ( '\\n' ) if err != nil { return // error or EOF } fmt . Printf ( \"The input was: %s\" , str ) } \uff082\uff09\u5982\u4f55\u901a\u8fc7\u5207\u7247\u8bfb\u5199\u6587\u4ef6\uff1a func cat ( f * file . File ) { const NBUF = 512 var buf [ NBUF ] byte for { switch nr , er := f . Read ( buf [:]); true { case nr < 0 : fmt . Fprintf ( os . Stderr , \"cat: error reading from %s: %s\\n\" , f . String (), er . String ()) os . Exit ( 1 ) case nr == 0 : // EOF return case nr > 0 : if nw , ew := file . Stdout . Write ( buf [ 0 : nr ]); nw != nr { fmt . Fprintf ( os . Stderr , \"cat: error writing from %s: %s\\n\" , f . String (), ew . String ()) } } } }","title":"18.7 \u6587\u4ef6"},{"location":"18.7/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u51fd\u6570 \u4e0b\u4e00\u8282\uff1a \u534f\u7a0b (goroutine) \u4e0e\u901a\u9053 (channel)","title":"\u94fe\u63a5"},{"location":"18.8/","text":"18.8 \u534f\u7a0b (goroutine) \u4e0e\u901a\u9053 (channel) \u00b6 \u51fa\u4e8e\u6027\u80fd\u8003\u8651\u7684\u5efa\u8bae\uff1a \u5b9e\u8df5\u7ecf\u9a8c\u8868\u660e\uff0c\u4e3a\u4e86\u4f7f\u5e76\u884c\u8fd0\u7b97\u83b7\u5f97\u9ad8\u4e8e\u4e32\u884c\u8fd0\u7b97\u7684\u6548\u7387\uff0c\u5728\u534f\u7a0b\u5185\u90e8\u5b8c\u6210\u7684\u5de5\u4f5c\u91cf\uff0c\u5fc5\u987b\u8fdc\u8fdc\u9ad8\u4e8e\u534f\u7a0b\u7684\u521b\u5efa\u548c\u76f8\u4e92\u6765\u56de\u901a\u4fe1\u7684\u5f00\u9500\u3002 \u51fa\u4e8e\u6027\u80fd\u8003\u8651\u5efa\u8bae\u4f7f\u7528\u5e26\u7f13\u5b58\u7684\u901a\u9053\uff1a \u4f7f\u7528\u5e26\u7f13\u5b58\u7684\u901a\u9053\u53ef\u4ee5\u5f88\u8f7b\u6613\u6210\u500d\u63d0\u9ad8\u5b83\u7684\u541e\u5410\u91cf\uff0c\u67d0\u4e9b\u573a\u666f\u5176\u6027\u80fd\u53ef\u4ee5\u63d0\u9ad8\u81f3 10 \u500d\u751a\u81f3\u66f4\u591a\u3002\u901a\u8fc7\u8c03\u6574\u901a\u9053\u7684\u5bb9\u91cf\uff0c\u751a\u81f3\u53ef\u4ee5\u5c1d\u8bd5\u7740\u66f4\u8fdb\u4e00\u6b65\u7684\u4f18\u5316\u5176\u6027\u80fd\u3002 \u9650\u5236\u4e00\u4e2a\u901a\u9053\u7684\u6570\u636e\u6570\u91cf\u5e76\u5c06\u5b83\u4eec\u5c01\u88c5\u6210\u4e00\u4e2a\u6570\u7ec4\uff1a \u5982\u679c\u4f7f\u7528\u901a\u9053\u4f20\u9012\u5927\u91cf\u5355\u72ec\u7684\u6570\u636e\uff0c\u90a3\u4e48\u901a\u9053\u5c06\u53d8\u6210\u6027\u80fd\u74f6\u9888\u3002\u7136\u800c\uff0c\u5c06\u6570\u636e\u5757\u6253\u5305\u5c01\u88c5\u6210\u6570\u7ec4\uff0c\u5728\u63a5\u6536\u7aef\u89e3\u538b\u6570\u636e\u65f6\uff0c\u6027\u80fd\u53ef\u4ee5\u63d0\u9ad8\u81f3 10 \u500d\u3002 \u73b0\u5728\u521b\u5efa\u4e00\u4e2a\u5e26\u7f13\u5b58\u7684\u901a\u9053\uff1a ch := make(chan type,buf) \uff081\uff09\u5982\u4f55\u4f7f\u7528 for \u6216\u8005 for-range \u904d\u5386\u4e00\u4e2a\u901a\u9053\uff1a for v := range ch { // do something with v } \uff082\uff09\u5982\u4f55\u68c0\u6d4b\u4e00\u4e2a\u901a\u9053 ch \u662f\u5426\u5173\u95ed\uff1a //read channel until it closes or error-condition for { if input , open := <- ch ; ! open { break } fmt . Printf ( \"%s\" , input ) } \u6216\u8005\u4f7f\u7528\uff081\uff09\u81ea\u52a8\u68c0\u6d4b\u3002 \uff083\uff09\u5982\u4f55\u901a\u8fc7\u4e00\u4e2a\u901a\u9053\u8ba9\u4e3b\u7a0b\u5e8f\u7b49\u5f85\u76f4\u5230\u534f\u7a0b\u5b8c\u6210\uff08\u4fe1\u53f7\u91cf\u6a21\u5f0f\uff09\uff1a ch := make ( chan int ) // Allocate a channel. // Start something in a goroutine; when it completes, signal on the channel. go func () { // doSomething ch <- 1 // Send a signal; value does not matter. }() doSomethingElseForAWhile () <- ch // Wait for goroutine to finish; discard sent value. \u5982\u679c\u5e0c\u671b\u7a0b\u5e8f\u4e00\u76f4\u963b\u585e\uff0c\u5728\u533f\u540d\u51fd\u6570\u4e2d\u7701\u7565 ch <- 1 \u5373\u53ef\u3002 \uff084\uff09\u901a\u9053\u7684\u5de5\u5382\u6a21\u677f\uff1a\u4ee5\u4e0b\u51fd\u6570\u662f\u4e00\u4e2a\u901a\u9053\u5de5\u5382\uff0c\u542f\u52a8\u4e00\u4e2a\u533f\u540d\u51fd\u6570\u4f5c\u4e3a\u534f\u7a0b\u4ee5\u751f\u4ea7\u901a\u9053\uff1a func pump () chan int { ch := make ( chan int ) go func () { for i := 0 ; ; i ++ { ch <- i } }() return ch } \uff085\uff09\u901a\u9053\u8fed\u4ee3\u5668\u6a21\u677f\uff1a\uff08\u6ce8\uff1a\u8fd9\u91cc\u539f\u4e66\u6ca1\u6709\u5199\u4e1c\u897f\uff0c\u4f46\u662f\u5e94\u8be5\u662f\u53c2\u8003 \u7ae0\u8282 14.2.10 \uff09 \uff086\uff09\u5982\u4f55\u9650\u5236\u5e76\u53d1\u5904\u7406\u8bf7\u6c42\u7684\u6570\u91cf\uff1a\u53c2\u8003 \u7ae0\u8282 14.11 \uff087\uff09\u5982\u4f55\u5728\u591a\u6838CPU\u4e0a\u5b9e\u73b0\u5e76\u884c\u8ba1\u7b97\uff1a\u53c2\u8003 \u7ae0\u8282 14.13 \uff088\uff09\u5982\u4f55\u7ec8\u6b62\u4e00\u4e2a\u534f\u7a0b\uff1a runtime.Goexit() \uff089\uff09\u7b80\u5355\u7684\u8d85\u65f6\u6a21\u677f\uff1a timeout := make ( chan bool , 1 ) go func () { time . Sleep ( 1e9 ) // one second timeout <- true }() select { case <- ch : // a read from ch has occurred case <- timeout : // the read from ch has timed out } \uff0810\uff09\u5982\u4f55\u4f7f\u7528\u8f93\u5165\u901a\u9053\u548c\u8f93\u51fa\u901a\u9053\u4ee3\u66ff\u9501\uff1a func Worker ( in , out chan * Task ) { for { t := <- in process ( t ) out <- t } } \uff0811\uff09\u5982\u4f55\u5728\u540c\u6b65\u8c03\u7528\u8fd0\u884c\u65f6\u95f4\u8fc7\u957f\u65f6\u5c06\u4e4b\u4e22\u5f03\uff1a\u53c2\u8003 \u7ae0\u8282 14.5 \u7b2c\u4e8c\u4e2a\u53d8\u4f53 \uff0812\uff09\u5982\u4f55\u5728\u901a\u9053\u4e2d\u4f7f\u7528\u8ba1\u65f6\u5668\u548c\u5b9a\u65f6\u5668\uff1a\u53c2\u8003 \u7ae0\u8282 14.5 \uff0813\uff09\u5178\u578b\u7684\u670d\u52a1\u5668\u540e\u7aef\u6a21\u578b\uff1a\u53c2\u8003 \u7ae0\u8282 14.4 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6587\u4ef6 \u4e0b\u4e00\u8282\uff1a \u7f51\u7edc\u548c\u7f51\u9875\u5e94\u7528","title":"18.8 \u534f\u7a0b (goroutine) \u4e0e\u901a\u9053 (channel)"},{"location":"18.8/#188-goroutine-channel","text":"\u51fa\u4e8e\u6027\u80fd\u8003\u8651\u7684\u5efa\u8bae\uff1a \u5b9e\u8df5\u7ecf\u9a8c\u8868\u660e\uff0c\u4e3a\u4e86\u4f7f\u5e76\u884c\u8fd0\u7b97\u83b7\u5f97\u9ad8\u4e8e\u4e32\u884c\u8fd0\u7b97\u7684\u6548\u7387\uff0c\u5728\u534f\u7a0b\u5185\u90e8\u5b8c\u6210\u7684\u5de5\u4f5c\u91cf\uff0c\u5fc5\u987b\u8fdc\u8fdc\u9ad8\u4e8e\u534f\u7a0b\u7684\u521b\u5efa\u548c\u76f8\u4e92\u6765\u56de\u901a\u4fe1\u7684\u5f00\u9500\u3002 \u51fa\u4e8e\u6027\u80fd\u8003\u8651\u5efa\u8bae\u4f7f\u7528\u5e26\u7f13\u5b58\u7684\u901a\u9053\uff1a \u4f7f\u7528\u5e26\u7f13\u5b58\u7684\u901a\u9053\u53ef\u4ee5\u5f88\u8f7b\u6613\u6210\u500d\u63d0\u9ad8\u5b83\u7684\u541e\u5410\u91cf\uff0c\u67d0\u4e9b\u573a\u666f\u5176\u6027\u80fd\u53ef\u4ee5\u63d0\u9ad8\u81f3 10 \u500d\u751a\u81f3\u66f4\u591a\u3002\u901a\u8fc7\u8c03\u6574\u901a\u9053\u7684\u5bb9\u91cf\uff0c\u751a\u81f3\u53ef\u4ee5\u5c1d\u8bd5\u7740\u66f4\u8fdb\u4e00\u6b65\u7684\u4f18\u5316\u5176\u6027\u80fd\u3002 \u9650\u5236\u4e00\u4e2a\u901a\u9053\u7684\u6570\u636e\u6570\u91cf\u5e76\u5c06\u5b83\u4eec\u5c01\u88c5\u6210\u4e00\u4e2a\u6570\u7ec4\uff1a \u5982\u679c\u4f7f\u7528\u901a\u9053\u4f20\u9012\u5927\u91cf\u5355\u72ec\u7684\u6570\u636e\uff0c\u90a3\u4e48\u901a\u9053\u5c06\u53d8\u6210\u6027\u80fd\u74f6\u9888\u3002\u7136\u800c\uff0c\u5c06\u6570\u636e\u5757\u6253\u5305\u5c01\u88c5\u6210\u6570\u7ec4\uff0c\u5728\u63a5\u6536\u7aef\u89e3\u538b\u6570\u636e\u65f6\uff0c\u6027\u80fd\u53ef\u4ee5\u63d0\u9ad8\u81f3 10 \u500d\u3002 \u73b0\u5728\u521b\u5efa\u4e00\u4e2a\u5e26\u7f13\u5b58\u7684\u901a\u9053\uff1a ch := make(chan type,buf) \uff081\uff09\u5982\u4f55\u4f7f\u7528 for \u6216\u8005 for-range \u904d\u5386\u4e00\u4e2a\u901a\u9053\uff1a for v := range ch { // do something with v } \uff082\uff09\u5982\u4f55\u68c0\u6d4b\u4e00\u4e2a\u901a\u9053 ch \u662f\u5426\u5173\u95ed\uff1a //read channel until it closes or error-condition for { if input , open := <- ch ; ! open { break } fmt . Printf ( \"%s\" , input ) } \u6216\u8005\u4f7f\u7528\uff081\uff09\u81ea\u52a8\u68c0\u6d4b\u3002 \uff083\uff09\u5982\u4f55\u901a\u8fc7\u4e00\u4e2a\u901a\u9053\u8ba9\u4e3b\u7a0b\u5e8f\u7b49\u5f85\u76f4\u5230\u534f\u7a0b\u5b8c\u6210\uff08\u4fe1\u53f7\u91cf\u6a21\u5f0f\uff09\uff1a ch := make ( chan int ) // Allocate a channel. // Start something in a goroutine; when it completes, signal on the channel. go func () { // doSomething ch <- 1 // Send a signal; value does not matter. }() doSomethingElseForAWhile () <- ch // Wait for goroutine to finish; discard sent value. \u5982\u679c\u5e0c\u671b\u7a0b\u5e8f\u4e00\u76f4\u963b\u585e\uff0c\u5728\u533f\u540d\u51fd\u6570\u4e2d\u7701\u7565 ch <- 1 \u5373\u53ef\u3002 \uff084\uff09\u901a\u9053\u7684\u5de5\u5382\u6a21\u677f\uff1a\u4ee5\u4e0b\u51fd\u6570\u662f\u4e00\u4e2a\u901a\u9053\u5de5\u5382\uff0c\u542f\u52a8\u4e00\u4e2a\u533f\u540d\u51fd\u6570\u4f5c\u4e3a\u534f\u7a0b\u4ee5\u751f\u4ea7\u901a\u9053\uff1a func pump () chan int { ch := make ( chan int ) go func () { for i := 0 ; ; i ++ { ch <- i } }() return ch } \uff085\uff09\u901a\u9053\u8fed\u4ee3\u5668\u6a21\u677f\uff1a\uff08\u6ce8\uff1a\u8fd9\u91cc\u539f\u4e66\u6ca1\u6709\u5199\u4e1c\u897f\uff0c\u4f46\u662f\u5e94\u8be5\u662f\u53c2\u8003 \u7ae0\u8282 14.2.10 \uff09 \uff086\uff09\u5982\u4f55\u9650\u5236\u5e76\u53d1\u5904\u7406\u8bf7\u6c42\u7684\u6570\u91cf\uff1a\u53c2\u8003 \u7ae0\u8282 14.11 \uff087\uff09\u5982\u4f55\u5728\u591a\u6838CPU\u4e0a\u5b9e\u73b0\u5e76\u884c\u8ba1\u7b97\uff1a\u53c2\u8003 \u7ae0\u8282 14.13 \uff088\uff09\u5982\u4f55\u7ec8\u6b62\u4e00\u4e2a\u534f\u7a0b\uff1a runtime.Goexit() \uff089\uff09\u7b80\u5355\u7684\u8d85\u65f6\u6a21\u677f\uff1a timeout := make ( chan bool , 1 ) go func () { time . Sleep ( 1e9 ) // one second timeout <- true }() select { case <- ch : // a read from ch has occurred case <- timeout : // the read from ch has timed out } \uff0810\uff09\u5982\u4f55\u4f7f\u7528\u8f93\u5165\u901a\u9053\u548c\u8f93\u51fa\u901a\u9053\u4ee3\u66ff\u9501\uff1a func Worker ( in , out chan * Task ) { for { t := <- in process ( t ) out <- t } } \uff0811\uff09\u5982\u4f55\u5728\u540c\u6b65\u8c03\u7528\u8fd0\u884c\u65f6\u95f4\u8fc7\u957f\u65f6\u5c06\u4e4b\u4e22\u5f03\uff1a\u53c2\u8003 \u7ae0\u8282 14.5 \u7b2c\u4e8c\u4e2a\u53d8\u4f53 \uff0812\uff09\u5982\u4f55\u5728\u901a\u9053\u4e2d\u4f7f\u7528\u8ba1\u65f6\u5668\u548c\u5b9a\u65f6\u5668\uff1a\u53c2\u8003 \u7ae0\u8282 14.5 \uff0813\uff09\u5178\u578b\u7684\u670d\u52a1\u5668\u540e\u7aef\u6a21\u578b\uff1a\u53c2\u8003 \u7ae0\u8282 14.4","title":"18.8 \u534f\u7a0b (goroutine) \u4e0e\u901a\u9053 (channel)"},{"location":"18.8/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6587\u4ef6 \u4e0b\u4e00\u8282\uff1a \u7f51\u7edc\u548c\u7f51\u9875\u5e94\u7528","title":"\u94fe\u63a5"},{"location":"18.9/","text":"18.9 \u7f51\u7edc\u548c\u7f51\u9875\u5e94\u7528 \u00b6 18.9.1 \u6a21\u677f\uff1a \u00b6 \u5236\u4f5c\u3001\u89e3\u6790\u5e76\u4f7f\u6a21\u677f\u751f\u6548\uff1a var strTempl = template . Must ( template . New ( \"TName\" ). Parse ( strTemplateHTML )) \u5728\u7f51\u9875\u5e94\u7528\u4e2d\u4f7f\u7528 HTML \u8fc7\u6ee4\u5668\u8fc7\u6ee4 HTML \u7279\u6b8a\u5b57\u7b26\uff1a \u4f7f\u7528 {{html .}} \u6216\u8005\u901a\u8fc7\u4e00\u4e2a\u5b57\u6bb5 FieldName {{ .FieldName |html }} \u4f7f\u7528\u7f13\u5b58\u6a21\u677f\uff08\u53c2\u8003 \u7ae0\u8282 15.7 \uff09 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u534f\u7a0b (goroutine) \u4e0e\u901a\u9053 (channel) \u4e0b\u4e00\u8282\uff1a \u5176\u4ed6","title":"18.9 \u7f51\u7edc\u548c\u7f51\u9875\u5e94\u7528"},{"location":"18.9/#189","text":"","title":"18.9 \u7f51\u7edc\u548c\u7f51\u9875\u5e94\u7528"},{"location":"18.9/#1891","text":"\u5236\u4f5c\u3001\u89e3\u6790\u5e76\u4f7f\u6a21\u677f\u751f\u6548\uff1a var strTempl = template . Must ( template . New ( \"TName\" ). Parse ( strTemplateHTML )) \u5728\u7f51\u9875\u5e94\u7528\u4e2d\u4f7f\u7528 HTML \u8fc7\u6ee4\u5668\u8fc7\u6ee4 HTML \u7279\u6b8a\u5b57\u7b26\uff1a \u4f7f\u7528 {{html .}} \u6216\u8005\u901a\u8fc7\u4e00\u4e2a\u5b57\u6bb5 FieldName {{ .FieldName |html }} \u4f7f\u7528\u7f13\u5b58\u6a21\u677f\uff08\u53c2\u8003 \u7ae0\u8282 15.7 \uff09","title":"18.9.1 \u6a21\u677f\uff1a"},{"location":"18.9/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u534f\u7a0b (goroutine) \u4e0e\u901a\u9053 (channel) \u4e0b\u4e00\u8282\uff1a \u5176\u4ed6","title":"\u94fe\u63a5"},{"location":"19.0/","text":"19.0 \u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u5e94\u7528\u7a0b\u5e8f \u00b6 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u7ae0\uff1a \u51fa\u4e8e\u6027\u80fd\u8003\u8651\u7684\u6700\u4f73\u5b9e\u8df5\u548c\u5efa\u8bae \u4e0b\u4e00\u8282\uff1a \u7b80\u4ecb","title":"19.0 \u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u5e94\u7528\u7a0b\u5e8f"},{"location":"19.0/#190","text":"","title":"19.0 \u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u5e94\u7528\u7a0b\u5e8f"},{"location":"19.0/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u7ae0\uff1a \u51fa\u4e8e\u6027\u80fd\u8003\u8651\u7684\u6700\u4f73\u5b9e\u8df5\u548c\u5efa\u8bae \u4e0b\u4e00\u8282\uff1a \u7b80\u4ecb","title":"\u94fe\u63a5"},{"location":"19.1/","text":"19.1 \u7b80\u4ecb \u00b6 \u7531\u4e8e web \u65e0\u5904\u4e0d\u5728\uff0c\u672c\u7ae0\u6211\u4eec\u5c06\u5f00\u53d1\u4e00\u4e2a\u5b8c\u6574\u7684\u7a0b\u5e8f\uff1a goto \uff0c\u5b83\u662f\u4e00\u4e2a web \u7f29\u77ed\u7f51\u5740\u5e94\u7528\u7a0b\u5e8f\u3002\u793a\u4f8b\u6765\u81ea Andrew Gerrand \u7684\u8bb2\u5ea7\uff08\u89c1\u53c2\u8003\u8d44\u6599 22\uff09\u3002\u6211\u4eec\u5c06\u628a\u9879\u76ee\u5206\u6210 3 \u4e2a\u9636\u6bb5\uff0c\u6bcf\u4e00\u4e2a\u90fd\u4f1a\u6bd4\u4e4b\u524d\u9636\u6bb5\u5305\u542b\u66f4\u591a\u7684\u529f\u80fd\uff0c\u5e76\u9010\u6e10\u5c55\u793a\u66f4\u591a Go \u8bed\u8a00\u4e2d\u7684\u7279\u6027\u3002\u6211\u4eec\u4f1a\u5927\u91cf\u4f7f\u7528\u5728 15 \u7ae0 \u6240\u5b66\u7684\u7f51\u9875\u5e94\u7528\u7a0b\u5e8f\u7684\u77e5\u8bc6\u3002 \u7248\u672c 1\uff1a \u5229\u7528\u6620\u5c04\u548c\u7ed3\u6784\u4f53\uff0c\u4e0e sync \u5305\u7684 Mutex \u4e00\u8d77\u4f7f\u7528\uff0c\u4ee5\u53ca\u4e00\u4e2a\u7ed3\u6784\u4f53\u5de5\u5382\u3002 \u7248\u672c 2\uff1a \u6570\u636e\u4ee5 gob \u683c\u5f0f\u5199\u5165\u6587\u4ef6\u4ee5\u5b9e\u73b0\u6301\u4e45\u5316\u3002 \u7248\u672c 3\uff1a \u5229\u7528\u534f\u7a0b\u548c\u901a\u9053\u91cd\u5199\u5e94\u7528\uff08\u89c1 14 \u7ae0 \uff09\u3002 \u7248\u672c 4\uff1a \u5982\u679c\u6211\u4eec\u8981\u4f7f\u7528 json \u683c\u5f0f\u7684\u6587\u4ef6\u8be5\u5982\u4f55\u4fee\u6539\uff1f \u7248\u672c 5\uff1a \u7528 rpc \u534f\u8bae\u5b9e\u73b0\u7684\u5206\u5e03\u5f0f\u7248\u672c\u3002 \u7531\u4e8e\u4ee3\u7801\u53d8\u66f4\u9891\u7e41\uff0c\u4e0d\u4f1a\u5c55\u793a\u5728\u6b64\u5904\uff0c\u4ec5\u7ed9\u51fa\u8bbf\u95ee\u5730\u5740\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u5e94\u7528\u7a0b\u5e8f \u4e0b\u4e00\u8282\uff1a \u77ed\u7f51\u5740\u9879\u76ee\u7b80\u4ecb","title":"19.1 \u7b80\u4ecb"},{"location":"19.1/#191","text":"\u7531\u4e8e web \u65e0\u5904\u4e0d\u5728\uff0c\u672c\u7ae0\u6211\u4eec\u5c06\u5f00\u53d1\u4e00\u4e2a\u5b8c\u6574\u7684\u7a0b\u5e8f\uff1a goto \uff0c\u5b83\u662f\u4e00\u4e2a web \u7f29\u77ed\u7f51\u5740\u5e94\u7528\u7a0b\u5e8f\u3002\u793a\u4f8b\u6765\u81ea Andrew Gerrand \u7684\u8bb2\u5ea7\uff08\u89c1\u53c2\u8003\u8d44\u6599 22\uff09\u3002\u6211\u4eec\u5c06\u628a\u9879\u76ee\u5206\u6210 3 \u4e2a\u9636\u6bb5\uff0c\u6bcf\u4e00\u4e2a\u90fd\u4f1a\u6bd4\u4e4b\u524d\u9636\u6bb5\u5305\u542b\u66f4\u591a\u7684\u529f\u80fd\uff0c\u5e76\u9010\u6e10\u5c55\u793a\u66f4\u591a Go \u8bed\u8a00\u4e2d\u7684\u7279\u6027\u3002\u6211\u4eec\u4f1a\u5927\u91cf\u4f7f\u7528\u5728 15 \u7ae0 \u6240\u5b66\u7684\u7f51\u9875\u5e94\u7528\u7a0b\u5e8f\u7684\u77e5\u8bc6\u3002 \u7248\u672c 1\uff1a \u5229\u7528\u6620\u5c04\u548c\u7ed3\u6784\u4f53\uff0c\u4e0e sync \u5305\u7684 Mutex \u4e00\u8d77\u4f7f\u7528\uff0c\u4ee5\u53ca\u4e00\u4e2a\u7ed3\u6784\u4f53\u5de5\u5382\u3002 \u7248\u672c 2\uff1a \u6570\u636e\u4ee5 gob \u683c\u5f0f\u5199\u5165\u6587\u4ef6\u4ee5\u5b9e\u73b0\u6301\u4e45\u5316\u3002 \u7248\u672c 3\uff1a \u5229\u7528\u534f\u7a0b\u548c\u901a\u9053\u91cd\u5199\u5e94\u7528\uff08\u89c1 14 \u7ae0 \uff09\u3002 \u7248\u672c 4\uff1a \u5982\u679c\u6211\u4eec\u8981\u4f7f\u7528 json \u683c\u5f0f\u7684\u6587\u4ef6\u8be5\u5982\u4f55\u4fee\u6539\uff1f \u7248\u672c 5\uff1a \u7528 rpc \u534f\u8bae\u5b9e\u73b0\u7684\u5206\u5e03\u5f0f\u7248\u672c\u3002 \u7531\u4e8e\u4ee3\u7801\u53d8\u66f4\u9891\u7e41\uff0c\u4e0d\u4f1a\u5c55\u793a\u5728\u6b64\u5904\uff0c\u4ec5\u7ed9\u51fa\u8bbf\u95ee\u5730\u5740\u3002","title":"19.1 \u7b80\u4ecb"},{"location":"19.1/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u5e94\u7528\u7a0b\u5e8f \u4e0b\u4e00\u8282\uff1a \u77ed\u7f51\u5740\u9879\u76ee\u7b80\u4ecb","title":"\u94fe\u63a5"},{"location":"19.10/","text":"19.10 \u603b\u7ed3\u548c\u589e\u5f3a \u00b6 \u901a\u8fc7\u9010\u6b65\u6784\u5efa goto \u5e94\u7528\u7a0b\u5e8f\uff0c\u6211\u4eec\u9047\u5230\u4e86\u51e0\u4e4e\u6240\u6709\u7684 Go \u8bed\u8a00\u7279\u6027\u3002 \u867d\u7136\u8fd9\u4e2a\u7a0b\u5e8f\u6309\u7167\u6211\u4eec\u7684\u76ee\u6807\u884c\u4e8b\uff0c\u4ecd\u7136\u6709\u4e00\u4e9b\u53ef\u6539\u8fdb\u7684\u9014\u5f84\uff1a - \u5ba1\u7f8e \uff1a\u7528\u6237\u754c\u9762\u53ef\u4ee5\uff08\u6781\u5927\u5730\uff09\u7f8e\u5316\u3002\u4e3a\u6b64\u53ef\u4ee5\u4f7f\u7528 Go \u7684 template \u5305\uff08\u89c1 15.7 \u8282 \uff09\u3002 - \u53ef\u9760\u6027 \uff1amaster/slave \u4e4b\u95f4\u7684 RPC \u8fde\u63a5\u5e94\u8be5\u53ef\u4ee5\u66f4\u53ef\u9760\uff1a\u5982\u679c\u5ba2\u6237\u7aef\u5230\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u8fde\u63a5\u4e2d\u65ad\uff0c\u5ba2\u6237\u7aef\u5e94\u8be5\u5c1d\u8bd5\u91cd\u8fde\u3002\u7528\u4e00\u4e2a \"dialer\" \u534f\u7a0b\u53ef\u4ee5\u8fbe\u6210\u3002 - \u8d44\u6e90\u51cf\u8d1f \uff1a\u7531\u4e8e URL \u6570\u636e\u5e93\u5927\u5c0f\u4e0d\u65ad\u589e\u957f\uff0c\u5185\u5b58\u5360\u7528\u53ef\u80fd\u4f1a\u6210\u4e3a\u4e00\u4e2a\u95ee\u9898\u3002\u53ef\u4ee5\u901a\u8fc7\u591a\u53f0 master \u670d\u52a1\u5668\u6309\u7167\u952e\u5206\u7247\u6765\u89e3\u51b3\u3002 - \u5220\u9664 \uff1a\u8981\u652f\u6301\u5220\u9664\u77ed URL\uff0cmaster \u548c slave \u4e4b\u95f4\u7684\u4ea4\u4e92\u5c06\u53d8\u5f97\u66f4\u590d\u6742\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f7f\u7528\u4ee3\u7406\u7f13\u5b58 \u4e0b\u4e00\u7ae0\uff1a Google App Engine \u4e2d\u7684 Go","title":"19.10 \u603b\u7ed3\u548c\u589e\u5f3a"},{"location":"19.10/#1910","text":"\u901a\u8fc7\u9010\u6b65\u6784\u5efa goto \u5e94\u7528\u7a0b\u5e8f\uff0c\u6211\u4eec\u9047\u5230\u4e86\u51e0\u4e4e\u6240\u6709\u7684 Go \u8bed\u8a00\u7279\u6027\u3002 \u867d\u7136\u8fd9\u4e2a\u7a0b\u5e8f\u6309\u7167\u6211\u4eec\u7684\u76ee\u6807\u884c\u4e8b\uff0c\u4ecd\u7136\u6709\u4e00\u4e9b\u53ef\u6539\u8fdb\u7684\u9014\u5f84\uff1a - \u5ba1\u7f8e \uff1a\u7528\u6237\u754c\u9762\u53ef\u4ee5\uff08\u6781\u5927\u5730\uff09\u7f8e\u5316\u3002\u4e3a\u6b64\u53ef\u4ee5\u4f7f\u7528 Go \u7684 template \u5305\uff08\u89c1 15.7 \u8282 \uff09\u3002 - \u53ef\u9760\u6027 \uff1amaster/slave \u4e4b\u95f4\u7684 RPC \u8fde\u63a5\u5e94\u8be5\u53ef\u4ee5\u66f4\u53ef\u9760\uff1a\u5982\u679c\u5ba2\u6237\u7aef\u5230\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u8fde\u63a5\u4e2d\u65ad\uff0c\u5ba2\u6237\u7aef\u5e94\u8be5\u5c1d\u8bd5\u91cd\u8fde\u3002\u7528\u4e00\u4e2a \"dialer\" \u534f\u7a0b\u53ef\u4ee5\u8fbe\u6210\u3002 - \u8d44\u6e90\u51cf\u8d1f \uff1a\u7531\u4e8e URL \u6570\u636e\u5e93\u5927\u5c0f\u4e0d\u65ad\u589e\u957f\uff0c\u5185\u5b58\u5360\u7528\u53ef\u80fd\u4f1a\u6210\u4e3a\u4e00\u4e2a\u95ee\u9898\u3002\u53ef\u4ee5\u901a\u8fc7\u591a\u53f0 master \u670d\u52a1\u5668\u6309\u7167\u952e\u5206\u7247\u6765\u89e3\u51b3\u3002 - \u5220\u9664 \uff1a\u8981\u652f\u6301\u5220\u9664\u77ed URL\uff0cmaster \u548c slave \u4e4b\u95f4\u7684\u4ea4\u4e92\u5c06\u53d8\u5f97\u66f4\u590d\u6742\u3002","title":"19.10 \u603b\u7ed3\u548c\u589e\u5f3a"},{"location":"19.10/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f7f\u7528\u4ee3\u7406\u7f13\u5b58 \u4e0b\u4e00\u7ae0\uff1a Google App Engine \u4e2d\u7684 Go","title":"\u94fe\u63a5"},{"location":"19.2/","text":"19.2 \u77ed\u7f51\u5740\u9879\u76ee\u7b80\u4ecb \u00b6 \u4f60\u80af\u5b9a\u77e5\u9053\u6709\u4e9b\u6d4f\u89c8\u5668\u4e2d\u7684\u5730\u5740\uff08\u79f0\u4e3a URL\uff09\u975e\u5e38\u957f\u4e14/\u6216\u590d\u6742\uff0c\u5728\u7f51\u4e0a\u6709\u4e00\u4e9b\u5c06\u4ed6\u4eec\u8f6c\u6362\u6210\u7b80\u77ed URL \u6765\u4f7f\u7528\u7684\u670d\u52a1\u3002\u6211\u4eec\u7684\u9879\u76ee\u4e0e\u6b64\u7c7b\u4f3c\uff1a\u5b83\u662f\u5177\u6709 2 \u4e2a\u529f\u80fd\u7684 web \u670d\u52a1 (web service)\uff1a \u6dfb\u52a0 (Add) \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u8f83\u957f\u7684 URL\uff0c\u4f1a\u5c06\u5176\u8f6c\u6362\u6210\u8f83\u77ed\u7684\u7248\u672c\uff0c\u4f8b\u5982\uff1a http://maps.google.com/maps?f=q&source=s_q&hl=en&geocode=&q=tokyo&sll=37.0625,-95.677068&sspn=68.684234,65.566406&ie=UTF8&hq=&hnear=Tokyo,+Japan&t=h&z=9 - (A) \u8f6c\u53d8\u4e3a\uff1a http://goto/UrcGq - (B) \u5e76\u4fdd\u5b58\u8fd9\u5bf9\u6570\u636e \u91cd\u5b9a\u5411 (Redirect) \u00b6 \u77ed\u7f51\u5740\u88ab\u8bf7\u6c42\u65f6\uff0c\u4f1a\u628a\u7528\u6237\u91cd\u5b9a\u5411\u5230\u539f\u59cb\u7684\u957f URL\u3002\u56e0\u6b64\u5982\u679c\u4f60\u5728\u6d4f\u89c8\u5668\u8f93\u5165\u7f51\u5740 (B)\uff0c\u4f1a\u88ab\u91cd\u5b9a\u5411\u5230\u9875\u9762 (A)\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7b80\u4ecb \u4e0b\u4e00\u8282\uff1a \u6570\u636e\u7ed3\u6784","title":"19.2 \u77ed\u7f51\u5740\u9879\u76ee\u7b80\u4ecb"},{"location":"19.2/#192","text":"\u4f60\u80af\u5b9a\u77e5\u9053\u6709\u4e9b\u6d4f\u89c8\u5668\u4e2d\u7684\u5730\u5740\uff08\u79f0\u4e3a URL\uff09\u975e\u5e38\u957f\u4e14/\u6216\u590d\u6742\uff0c\u5728\u7f51\u4e0a\u6709\u4e00\u4e9b\u5c06\u4ed6\u4eec\u8f6c\u6362\u6210\u7b80\u77ed URL \u6765\u4f7f\u7528\u7684\u670d\u52a1\u3002\u6211\u4eec\u7684\u9879\u76ee\u4e0e\u6b64\u7c7b\u4f3c\uff1a\u5b83\u662f\u5177\u6709 2 \u4e2a\u529f\u80fd\u7684 web \u670d\u52a1 (web service)\uff1a","title":"19.2 \u77ed\u7f51\u5740\u9879\u76ee\u7b80\u4ecb"},{"location":"19.2/#add","text":"\u7ed9\u5b9a\u4e00\u4e2a\u8f83\u957f\u7684 URL\uff0c\u4f1a\u5c06\u5176\u8f6c\u6362\u6210\u8f83\u77ed\u7684\u7248\u672c\uff0c\u4f8b\u5982\uff1a http://maps.google.com/maps?f=q&source=s_q&hl=en&geocode=&q=tokyo&sll=37.0625,-95.677068&sspn=68.684234,65.566406&ie=UTF8&hq=&hnear=Tokyo,+Japan&t=h&z=9 - (A) \u8f6c\u53d8\u4e3a\uff1a http://goto/UrcGq - (B) \u5e76\u4fdd\u5b58\u8fd9\u5bf9\u6570\u636e","title":"\u6dfb\u52a0 (Add)"},{"location":"19.2/#redirect","text":"\u77ed\u7f51\u5740\u88ab\u8bf7\u6c42\u65f6\uff0c\u4f1a\u628a\u7528\u6237\u91cd\u5b9a\u5411\u5230\u539f\u59cb\u7684\u957f URL\u3002\u56e0\u6b64\u5982\u679c\u4f60\u5728\u6d4f\u89c8\u5668\u8f93\u5165\u7f51\u5740 (B)\uff0c\u4f1a\u88ab\u91cd\u5b9a\u5411\u5230\u9875\u9762 (A)\u3002","title":"\u91cd\u5b9a\u5411 (Redirect)"},{"location":"19.2/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7b80\u4ecb \u4e0b\u4e00\u8282\uff1a \u6570\u636e\u7ed3\u6784","title":"\u94fe\u63a5"},{"location":"19.3/","text":"\u7248\u672c 1 - \u6570\u636e\u7ed3\u6784\u548c\u524d\u7aef\u754c\u9762 \u00b6 \u7b2c 1 \u4e2a\u7248\u672c\u7684\u4ee3\u7801 goto_v1 \u89c1 goto_v1 \u3002 19.3 \u6570\u636e\u7ed3\u6784 \u00b6 \uff08\u672c\u8282\u4ee3\u7801\u89c1 goto_v1/store.go \u3002\uff09 \u5f53\u7a0b\u5e8f\u8fd0\u884c\u5728\u751f\u4ea7\u73af\u5883\u65f6\uff0c\u4f1a\u6536\u5230\u5f88\u591a\u77ed\u7f51\u5740\u7684\u8bf7\u6c42\uff0c\u540c\u65f6\u4f1a\u6709\u4e00\u4e9b\u5c06\u957f URL \u8f6c\u6362\u6210\u77ed URL \u7684\u8bf7\u6c42\u3002\u6211\u4eec\u7684\u7a0b\u5e8f\u8981\u4ee5\u4ec0\u4e48\u6837\u7684\u7ed3\u6784\u5b58\u50a8\u8fd9\u4e9b\u6570\u636e\u5462\uff1f 19.2 \u8282 \u4e2d (A) \u548c (B) \u4e24\u79cd URL \u90fd\u662f\u5b57\u7b26\u4e32\uff0c\u6b64\u5916\uff0c\u5b83\u4eec\u76f8\u4e92\u5173\u8054\uff1a\u7ed9\u5b9a\u952e (B) \u80fd\u83b7\u53d6\u5230\u503c (A)\uff0c\u4ed6\u4eec\u4e92\u76f8*\u6620\u5c04* (map)\u3002\u8981\u5c06\u6570\u636e\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u8fd9\u79cd\u7ed3\u6784\uff0c\u5b83\u4eec\u51e0\u4e4e\u5b58\u5728\u4e8e\u6240\u6709\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u53ea\u662f\u540d\u79f0\u6709\u6240\u4e0d\u540c\uff0c\u4f8b\u5982\u201c\u54c8\u5e0c\u8868\u201d\u6216\u201c\u5b57\u5178\u201d\u7b49\u3002 Go \u8bed\u8a00\u5c31\u6709\u8fd9\u79cd\u5185\u5efa\u7684\u6620\u5c04 (map)\uff1a map[string]string \u3002 \u952e\u7684\u7c7b\u578b\u5199\u5728 [ \u548c ] \u4e4b\u95f4\uff0c\u7d27\u63a5\u7740\u662f\u503c\u7684\u7c7b\u578b\u3002\u6709\u5173\u6620\u5c04\u7684\u6240\u6709\u77e5\u8bc6\u8be6\u89c1 8 \u7ae0 \u3002\u4e3a\u7279\u5b9a\u7c7b\u578b\u6307\u5b9a\u4e00\u4e2a\u522b\u540d\u5728\u4e25\u8c28\u7684\u7a0b\u5e8f\u4e2d\u975e\u5e38\u5b9e\u7528\u3002Go \u8bed\u8a00\u4e2d\u901a\u8fc7\u5173\u952e\u5b57 type \u6765\u5b9a\u4e49\uff0c\u56e0\u6b64\u6709\u5b9a\u4e49\uff1a type URLStore map [ string ] string \u5b83\u4ece\u77ed URL \u6620\u5c04\u5230\u957f URL\uff0c\u4e24\u8005\u90fd\u662f\u5b57\u7b26\u4e32\u3002 \u8981\u521b\u5efa\u90a3\u79cd\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u5e76\u547d\u540d\u4e3a m \uff0c\u4f7f\u7528\uff1a m := make ( URLStore ) \u5047\u8bbe http://goto/a \u6620\u5c04\u5230 http://google.com/ \uff0c\u6211\u4eec\u8981\u628a\u5b83\u4eec\u5b58\u50a8\u5230 m \u4e2d\uff0c\u53ef\u4ee5\u7528\u5982\u4e0b\u8bed\u53e5\uff1a m [ \"a\" ] = \"http://google.com/\" \uff08\u952e\u53ea\u662f http://goto/ \u7684\u540e\u7f00\uff0c\u5176\u524d\u7f00\u603b\u662f\u4e0d\u53d8\u7684\u3002\uff09 \u8981\u83b7\u5f97\u7ed9\u5b9a \"a\" \u5bf9\u5e94\u7684\u957f URL\uff0c\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a url := m [ \"a\" ] \u6b64\u65f6 url \u7684\u503c\u7b49\u4e8e http://google.com/ \u3002 \u6ce8\u610f\uff0c\u4f7f\u7528\u4e86 := \u5c31\u4e0d\u9700\u8981\u6307\u660e url \u7684\u7c7b\u578b\u4e3a string \uff0c\u7f16\u8bd1\u5668\u4f1a\u4ece\u53f3\u4fa7\u7684\u503c\u4e2d\u63a8\u65ad\u51fa\u6765\u3002 \u4f7f\u7a0b\u5e8f\u7ebf\u7a0b\u5b89\u5168 \u00b6 \u8fd9\u91cc\uff0c\u53d8\u91cf URLStore \u662f\u4e2d\u5fc3\u5316\u7684\u5185\u5b58\u5b58\u50a8\u3002\u5f53\u6536\u5230\u7f51\u7edc\u6d41\u91cf\u65f6\uff0c\u4f1a\u6709\u5f88\u591a Redirect \u670d\u52a1\u7684\u8bf7\u6c42\u3002\u8fd9\u4e9b\u8bf7\u6c42\u5176\u5b9e\u53ea\u6d89\u53ca\u8bfb\u64cd\u4f5c\uff1a\u4ee5\u7ed9\u5b9a\u7684\u77ed URL \u4f5c\u4e3a\u952e\uff0c\u8fd4\u56de\u5bf9\u5e94\u7684\u957f URL \u7684\u503c\u3002\u7136\u800c\uff0c\u5bf9 Add \u670d\u52a1\u7684\u8bf7\u6c42\u5219\u5927\u4e0d\u76f8\u540c\uff0c\u5b83\u4eec\u4f1a\u66f4\u6539 URLStore \uff0c\u6dfb\u52a0\u65b0\u7684\u952e\u503c\u5bf9\u3002\u5f53\u5728\u77ac\u95f4\u6536\u5230\u5927\u91cf\u66f4\u65b0\u8bf7\u6c42\u65f6\uff0c\u53ef\u80fd\u4f1a\u4ea7\u751f\u5982\u4e0b\u95ee\u9898\uff1a\u6dfb\u52a0\u64cd\u4f5c\u53ef\u80fd\u88ab\u53e6\u4e00\u4e2a\u540c\u7c7b\u8bf7\u6c42\u6253\u65ad\uff0c\u5199\u5165\u7684\u957f URL \u503c\u53ef\u80fd\u4f1a\u4e22\u5931\uff1b\u53e6\u5916\uff0c\u8bfb\u53d6\u548c\u66f4\u6539\u540c\u65f6\u8fdb\u884c\uff0c\u5bfc\u81f4\u53ef\u80fd\u8bfb\u5230\u810f\u6570\u636e\u3002\u4ee3\u7801\u4e2d\u7684 map \u5e76\u4e0d\u4fdd\u8bc1\u5f53\u5f00\u59cb\u66f4\u65b0\u6570\u636e\u65f6\uff0c\u4f1a\u5f7b\u5e95\u963b\u6b62\u53e6\u4e00\u4e2a\u66f4\u65b0\u64cd\u4f5c\u7684\u542f\u52a8\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c map \u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0cgoto \u4f1a\u5e76\u53d1\u5730\u4e3a\u5f88\u591a\u8bf7\u6c42\u63d0\u4f9b\u670d\u52a1\u3002\u56e0\u6b64\u5fc5\u987b\u4f7f URLStore \u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u4ece\u4e0d\u540c\u7684\u7ebf\u7a0b\u8bbf\u95ee\u5b83\u3002\u6700\u7b80\u5355\u548c\u7ecf\u5178\u7684\u65b9\u6cd5\u662f\u4e3a\u5176\u589e\u52a0\u4e00\u4e2a\u9501\uff0c\u5b83\u662f Go \u6807\u51c6\u5e93 sync \u5305\u4e2d\u7684 Mutex \u7c7b\u578b\uff0c\u5fc5\u987b\u5bfc\u5165\u5230\u6211\u4eec\u7684\u4ee3\u7801\u4e2d\uff08\u5173\u4e8e\u9501\u8be6\u89c1 9.3 \u8282 \uff09\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u628a URLStore \u7c7b\u578b\u7684\u5b9a\u4e49\u66f4\u6539\u4e3a\u4e00\u4e2a\u7ed3\u6784\u4f53\uff08\u5c31\u662f\u5b57\u6bb5\u7684\u96c6\u5408\uff0c\u7c7b\u4f3c C \u6216 Java \uff0c 10 \u7ae0 \u4ecb\u7ecd\u4e86\u7ed3\u6784\u4f53\uff09\uff0c\u5b83\u542b\u6709\u4e24\u4e2a\u5b57\u6bb5\uff1a map \u548c sync \u5305\u7684 RWMutex \uff1a import \"sync\" type URLStore struct { urls map [ string ] string // map from short to long URLs mu sync . RWMutex } RWMutex \u6709\u4e24\u79cd\u9501\uff1a\u5206\u522b\u5bf9\u5e94\u8bfb\u548c\u5199\u3002\u591a\u4e2a\u5ba2\u6237\u7aef\u53ef\u4ee5\u540c\u65f6\u8bbe\u7f6e\u8bfb\u9501\uff0c\u4f46\u53ea\u6709\u4e00\u4e2a\u5ba2\u6237\u7aef\u53ef\u4ee5\u8bbe\u7f6e\u5199\u9501\uff08\u4ee5\u6392\u9664\u6240\u6709\u7684\u8bfb\u9501\uff09\uff0c\u6709\u6548\u5730\u4e32\u884c\u5316\u53d8\u66f4\uff0c\u4f7f\u4ed6\u4eec\u6309\u987a\u5e8f\u751f\u6548\u3002 \u6211\u4eec\u5c06\u5728 Get() \u51fd\u6570\u4e2d\u5b9e\u73b0 Redirect \u670d\u52a1\u7684\u8bfb\u8bf7\u6c42\uff0c\u5728 Set \u51fd\u6570\u4e2d\u5b9e\u73b0 Add \u670d\u52a1\u7684\u5199\u8bf7\u6c42\u3002 Get() \u51fd\u6570\u7c7b\u4f3c\u4e0b\u9762\u8fd9\u6837\uff1a func ( s * URLStore ) Get ( key string ) string { s . mu . RLock () url := s . urls [ key ] s . mu . RUnlock () return url } \u51fd\u6570\u6309\u7167\u952e\uff08\u77ed URL\uff09\u8fd4\u56de\u5bf9\u5e94\u6620\u5c04\u540e\u7684 URL\u3002\u5b83\u6240\u5904\u7406\u7684\u53d8\u91cf\u662f\u6307\u9488\u7c7b\u578b\uff08\u89c1 4.9 \u8282 \uff09\uff0c\u6307\u5411 URLStore \u3002\u4f46\u5728\u8bfb\u53d6\u503c\u4e4b\u524d\uff0c\u5148\u7528 s.mu.RLock() \u653e\u7f6e\u4e00\u4e2a\u8bfb\u9501\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u6709\u66f4\u65b0\u64cd\u4f5c\u59a8\u788d\u8bfb\u53d6\u3002\u6570\u636e\u8bfb\u53d6\u540e\u64a4\u9500\u9501\u5b9a\uff0c\u4ee5\u4fbf\u6302\u8d77\u7684\u66f4\u65b0\u64cd\u4f5c\u53ef\u4ee5\u5f00\u59cb\u3002\u5982\u679c\u952e\u4e0d\u5b58\u5728\u4e8e map \u4e2d\u4f1a\u600e\u6837\uff1f\u4f1a\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u96f6\u503c\uff08\u7a7a\u5b57\u7b26\u4e32\uff09\u3002\u6ce8\u610f\u70b9\u53f7 ( . ) \u7c7b\u4f3c\u9762\u5411\u5bf9\u8c61\u7684\u8bed\u8a00\uff1a\u5728 s \u7684 mu \u5b57\u6bb5\u4e0a\u8c03\u7528\u65b9\u6cd5 RLock() \u3002 Set() \u51fd\u6570\u540c\u65f6\u9700\u8981 URL \u7684\u952e\u503c\u5bf9\uff0c\u4e14\u5fc5\u987b\u653e\u7f6e\u5199\u9501 Lock() \u6765\u6392\u9664\u540c\u4e00\u65f6\u523b\u4efb\u4f55\u5176\u4ed6\u66f4\u65b0\u64cd\u4f5c\u3002\u51fd\u6570\u8fd4\u56de\u5e03\u5c14\u503c true \u6216 false \u6765\u8868\u793a Set() \u64cd\u4f5c\u662f\u5426\u6210\u529f\uff1a func ( s * URLStore ) Set ( key , url string ) bool { s . mu . Lock () _ , present := s . urls [ key ] if present { s . mu . Unlock () return false } s . urls [ key ] = url s . mu . Unlock () return true } \u5f62\u5f0f _, present := s.urls[key] \u53ef\u4ee5\u6d4b\u8bd5 map \u4e2d\u662f\u5426\u5df2\u7ecf\u5305\u542b\u8be5\u952e\uff0c\u5305\u542b\u5219 present \u4e3a true \uff0c\u5426\u5219\u4e3a false \u3002\u8fd9\u79cd\u5f62\u5f0f\u79f0\u4e3a\u201c\u9017\u53f7 ok \u6a21\u5f0f\u201d\uff0c\u5728 Go \u4ee3\u7801\u4e2d\u4f1a\u9891\u7e41\u51fa\u73b0\u3002\u5982\u679c\u952e\u5df2\u5b58\u5728\uff0c Set() \u51fd\u6570\u76f4\u63a5\u8fd4\u56de\u5e03\u5c14\u503c false \uff0c map \u4e0d\u4f1a\u88ab\u66f4\u65b0\uff08\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u77ed URL \u4e0d\u4f1a\u91cd\u590d\uff09\u3002\u5982\u679c\u952e\u4e0d\u5b58\u5728\uff0c\u628a\u5b83\u52a0\u5165 map \u4e2d\u5e76\u8fd4\u56de true \u3002\u5de6\u4fa7 _ \u662f\u4e00\u4e2a\u503c\u7684\u5360\u4f4d\u7b26\uff0c\u8d4b\u503c\u7ed9 _ \u6765\u8868\u660e\u6211\u4eec\u4e0d\u4f1a\u4f7f\u7528\u5b83\u3002\u6ce8\u610f\u5728\u66f4\u65b0\u540e\u5c3d\u65e9\u8c03\u7528 Unlock() \u6765\u91ca\u653e\u5bf9 URLStore \u7684\u9501\u5b9a\u3002 \u4f7f\u7528 defer \u7b80\u5316\u4ee3\u7801 \u00b6 \u76ee\u524d\u4ee3\u7801\u8fd8\u6bd4\u8f83\u7b80\u5355\uff0c\u5bb9\u6613\u8bb0\u5f97\u64cd\u4f5c\u5b8c\u6210\u540e\u8c03\u7528 Unlock() \u89e3\u9501\u3002\u7136\u800c\u5728\u4ee3\u7801\u66f4\u590d\u6742\u65f6\u5f88\u5bb9\u6613\u5fd8\u8bb0\u89e3\u9501\uff0c\u6216\u8005\u653e\u7f6e\u5728\u9519\u8bef\u7684\u4f4d\u7f6e\uff0c\u5f80\u5f80\u5bfc\u81f4\u95ee\u9898\u5f88\u96be\u8ffd\u8e2a\u3002\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5 Go \u63d0\u4f9b\u4e86\u4e00\u4e2a\u7279\u6b8a\u5173\u952e\u5b57 defer \uff08\u89c1 6.4 \u8282 \uff09\u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u53ef\u4ee5\u5728 Lock() \u4e4b\u540e\u7acb\u5373\u793a\u610f Unlock() \uff0c\u4e0d\u8fc7\u5176\u6548\u679c\u662f Unlock() \u53ea\u4f1a\u5728\u51fd\u6570\u8fd4\u56de\u4e4b\u524d\u88ab\u8c03\u7528\u3002 Get() \u53ef\u4ee5\u7b80\u5316\u6210\u4ee5\u4e0b\u4ee3\u7801\uff08\u6211\u4eec\u6d88\u9664\u4e86\u672c\u5730\u53d8\u91cf url \uff09\uff1a func ( s * URLStore ) Get ( key string ) string { s . mu . RLock () defer s . mu . RUnlock () return s . urls [ key ] } Set() \u7684\u903b\u8f91\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u4e5f\u53d8\u5f97\u6e05\u6670\u4e86\uff08\u6211\u4eec\u4e0d\u7528\u518d\u8003\u8651\u89e3\u9501\u7684\u4e8b\u4e86\uff09\uff1a func ( s * URLStore ) Set ( key , url string ) bool { s . mu . Lock () defer s . mu . Unlock () _ , present := s . urls [ key ] if present { return false } s . urls [ key ] = url return true } URLStore \u5de5\u5382\u51fd\u6570 \u00b6 URLStore() \u7ed3\u6784\u4f53\u4e2d\u5305\u542b map \u7c7b\u578b\u7684\u5b57\u6bb5\uff0c\u4f7f\u7528\u524d\u5fc5\u987b\u5148\u7528 make() \u521d\u59cb\u5316\u3002\u5728 Go \u4e2d\u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53\u5b9e\u4f8b\uff0c\u4e00\u822c\u662f\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e2a\u524d\u7f00\u4e3a New \uff0c\u80fd\u8fd4\u56de\u8be5\u7c7b\u578b\u5df2\u521d\u59cb\u5316\u5b9e\u4f8b\u7684\u51fd\u6570\uff08\u901a\u5e38\u662f\u6307\u5411\u5b9e\u4f8b\u7684\u6307\u9488\uff09\u3002 func NewURLStore () * URLStore { return & URLStore { urls : make ( map [ string ] string ) } } \u5728 return \u8bed\u53e5\u4e2d\uff0c\u521b\u5efa\u4e86 URLStore \u5b57\u9762\u91cf\u5b9e\u4f8b\uff0c\u5176\u4e2d\u5305\u542b\u521d\u59cb\u5316\u4e86\u7684 map \u6620\u5c04\u3002\u9501\u65e0\u9700\u7279\u522b\u6307\u660e\u521d\u59cb\u5316\uff0c\u8fd9\u662f Go \u521b\u5efa\u7ed3\u6784\u4f53\u5b9e\u4f8b\u7684\u60ef\u4f8b\u3002 & \u662f\u53d6\u5740\u8fd0\u7b97\u7b26\uff0c\u5b83\u5c06\u6211\u4eec\u8981\u8fd4\u56de\u7684\u5185\u5bb9\u53d8\u6210\u6307\u9488\uff0c\u56e0\u4e3a NewURLStore() \u8fd4\u56de\u7c7b\u578b\u662f *URLStore \u3002\u7136\u540e\u8c03\u7528\u8be5\u51fd\u6570\u6765\u521b\u5efa URLStore \u53d8\u91cf\uff1a var store = NewURLStore () \u4f7f\u7528 URLStore \u00b6 \u8981\u65b0\u589e\u4e00\u5bf9\u77ed/\u957f URL \u5230 map \u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8c03\u7528 s \u4e0a\u7684 Set() \u65b9\u6cd5\uff0c\u7531\u4e8e\u8fd4\u56de\u5e03\u5c14\u503c\uff0c\u53ef\u4ee5\u628a\u5b83\u5305\u88f9\u5728 if \u8bed\u53e5\u4e2d\uff1a if s . Set ( \"a\" , \"http://google.com\" ) { // \u6210\u529f } \u8981\u83b7\u53d6\u7ed9\u5b9a\u77ed URL \u5bf9\u5e94\u7684\u957f URL\uff0c\u8c03\u7528 s \u4e0a\u7684 Get() \u65b9\u6cd5\uff0c\u5c06\u8fd4\u56de\u503c\u653e\u5165\u53d8\u91cf url \uff1a if url := s . Get ( \"a\" ); url != \"\" { // \u91cd\u5b9a\u5411\u5230 url } else { // \u952e\u672a\u627e\u5230 } \u8fd9\u91cc\u6211\u4eec\u5229\u7528 Go \u8bed\u8a00 if \u8bed\u53e5\u7684\u7279\u6027\uff0c\u53ef\u4ee5\u5728\u8d77\u59cb\u90e8\u5206\u3001\u6761\u4ef6\u5224\u65ad\u524d\u653e\u7f6e\u521d\u59cb\u5316\u8bed\u53e5\u3002\u53e6\u5916\u8fd8\u9700\u8981\u4e00\u4e2a Count() \u65b9\u6cd5\u4ee5\u83b7\u53d6 map \u4e2d\u952e\u503c\u5bf9\u7684\u6570\u91cf\uff0c\u53ef\u4ee5\u4f7f\u7528\u5185\u5efa\u7684 len() \u51fd\u6570\uff1a func ( s * URLStore ) Count () int { s . mu . RLock () defer s . mu . RUnlock () return len ( s . urls ) } \u5982\u4f55\u6839\u636e\u7ed9\u5b9a\u7684\u957f URL \u8ba1\u7b97\u51fa\u77ed URL \u5462\uff1f\u4e3a\u6b64\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u51fd\u6570 genKey(n int) string {\u2026} \uff0c\u5c06 s.Count() \u7684\u5f53\u524d\u503c\u4f5c\u4e3a\u5176\u6574\u578b\u53c2\u6570\u4f20\u5165\u3002\uff08\u5177\u4f53\u7b97\u6cd5\u5e76\u4e0d\u91cd\u8981\uff0c\u793a\u4f8b\u4ee3\u7801\u53ef\u4ee5\u5728 key.go \u627e\u5230\u3002\uff09 \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a Put() \u65b9\u6cd5\uff0c\u63a5\u6536\u4e00\u4e2a\u957f URL\uff0c\u7528 genKey() \u751f\u6210\u5176\u77ed URL \u952e\uff0c\u8c03\u7528 Set() \u65b9\u6cd5\u5728\u6b64\u952e\u4e0b\u5b58\u50a8\u957f URL \u6570\u636e\uff0c\u7136\u540e\u8fd4\u56de\u8fd9\u4e2a\u952e\uff1a func ( s * URLStore ) Put ( url string ) string { for { key := genKey ( s . Count ()) if s . Set ( key , url ) { return key } } // shouldn\u2019t get here return \"\" } for \u5faa\u73af\u4f1a\u4e00\u76f4\u5c1d\u8bd5\u8c03\u7528 Set() \u76f4\u5230\u6210\u529f\u4e3a\u6b62\uff08\u610f\u5473\u7740\u751f\u6210\u4e86\u4e00\u4e2a\u5c1a\u672a\u5b58\u5728\u7684\u77ed\u7f51\u5740\uff09\u3002\u73b0\u5728\u6211\u4eec\u5b9a\u4e49\u597d\u4e86\u6570\u636e\u5b58\u50a8\uff0c\u4ee5\u53ca\u914d\u5957\u7684\u53ef\u5de5\u4f5c\u7684\u51fd\u6570\uff08\u89c1\u4ee3\u7801 store.go \uff09\u3002\u4f46\u8fd9\u672c\u8eab\u5e76\u4e0d\u80fd\u5b8c\u6210\u4efb\u52a1\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5f00\u53d1 web \u670d\u52a1\u5668\u4ee5\u4ea4\u4ed8 Add \u548c Redirect \u670d\u52a1\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u77ed\u7f51\u5740\u9879\u76ee\u7b80\u4ecb \u4e0b\u4e00\u8282\uff1a \u7528\u6237\u754c\u9762\uff1aweb \u670d\u52a1\u7aef","title":"\u7248\u672c 1 - \u6570\u636e\u7ed3\u6784\u548c\u524d\u7aef\u754c\u9762"},{"location":"19.3/#1-","text":"\u7b2c 1 \u4e2a\u7248\u672c\u7684\u4ee3\u7801 goto_v1 \u89c1 goto_v1 \u3002","title":"\u7248\u672c 1 - \u6570\u636e\u7ed3\u6784\u548c\u524d\u7aef\u754c\u9762"},{"location":"19.3/#193","text":"\uff08\u672c\u8282\u4ee3\u7801\u89c1 goto_v1/store.go \u3002\uff09 \u5f53\u7a0b\u5e8f\u8fd0\u884c\u5728\u751f\u4ea7\u73af\u5883\u65f6\uff0c\u4f1a\u6536\u5230\u5f88\u591a\u77ed\u7f51\u5740\u7684\u8bf7\u6c42\uff0c\u540c\u65f6\u4f1a\u6709\u4e00\u4e9b\u5c06\u957f URL \u8f6c\u6362\u6210\u77ed URL \u7684\u8bf7\u6c42\u3002\u6211\u4eec\u7684\u7a0b\u5e8f\u8981\u4ee5\u4ec0\u4e48\u6837\u7684\u7ed3\u6784\u5b58\u50a8\u8fd9\u4e9b\u6570\u636e\u5462\uff1f 19.2 \u8282 \u4e2d (A) \u548c (B) \u4e24\u79cd URL \u90fd\u662f\u5b57\u7b26\u4e32\uff0c\u6b64\u5916\uff0c\u5b83\u4eec\u76f8\u4e92\u5173\u8054\uff1a\u7ed9\u5b9a\u952e (B) \u80fd\u83b7\u53d6\u5230\u503c (A)\uff0c\u4ed6\u4eec\u4e92\u76f8*\u6620\u5c04* (map)\u3002\u8981\u5c06\u6570\u636e\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u8fd9\u79cd\u7ed3\u6784\uff0c\u5b83\u4eec\u51e0\u4e4e\u5b58\u5728\u4e8e\u6240\u6709\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u53ea\u662f\u540d\u79f0\u6709\u6240\u4e0d\u540c\uff0c\u4f8b\u5982\u201c\u54c8\u5e0c\u8868\u201d\u6216\u201c\u5b57\u5178\u201d\u7b49\u3002 Go \u8bed\u8a00\u5c31\u6709\u8fd9\u79cd\u5185\u5efa\u7684\u6620\u5c04 (map)\uff1a map[string]string \u3002 \u952e\u7684\u7c7b\u578b\u5199\u5728 [ \u548c ] \u4e4b\u95f4\uff0c\u7d27\u63a5\u7740\u662f\u503c\u7684\u7c7b\u578b\u3002\u6709\u5173\u6620\u5c04\u7684\u6240\u6709\u77e5\u8bc6\u8be6\u89c1 8 \u7ae0 \u3002\u4e3a\u7279\u5b9a\u7c7b\u578b\u6307\u5b9a\u4e00\u4e2a\u522b\u540d\u5728\u4e25\u8c28\u7684\u7a0b\u5e8f\u4e2d\u975e\u5e38\u5b9e\u7528\u3002Go \u8bed\u8a00\u4e2d\u901a\u8fc7\u5173\u952e\u5b57 type \u6765\u5b9a\u4e49\uff0c\u56e0\u6b64\u6709\u5b9a\u4e49\uff1a type URLStore map [ string ] string \u5b83\u4ece\u77ed URL \u6620\u5c04\u5230\u957f URL\uff0c\u4e24\u8005\u90fd\u662f\u5b57\u7b26\u4e32\u3002 \u8981\u521b\u5efa\u90a3\u79cd\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u5e76\u547d\u540d\u4e3a m \uff0c\u4f7f\u7528\uff1a m := make ( URLStore ) \u5047\u8bbe http://goto/a \u6620\u5c04\u5230 http://google.com/ \uff0c\u6211\u4eec\u8981\u628a\u5b83\u4eec\u5b58\u50a8\u5230 m \u4e2d\uff0c\u53ef\u4ee5\u7528\u5982\u4e0b\u8bed\u53e5\uff1a m [ \"a\" ] = \"http://google.com/\" \uff08\u952e\u53ea\u662f http://goto/ \u7684\u540e\u7f00\uff0c\u5176\u524d\u7f00\u603b\u662f\u4e0d\u53d8\u7684\u3002\uff09 \u8981\u83b7\u5f97\u7ed9\u5b9a \"a\" \u5bf9\u5e94\u7684\u957f URL\uff0c\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a url := m [ \"a\" ] \u6b64\u65f6 url \u7684\u503c\u7b49\u4e8e http://google.com/ \u3002 \u6ce8\u610f\uff0c\u4f7f\u7528\u4e86 := \u5c31\u4e0d\u9700\u8981\u6307\u660e url \u7684\u7c7b\u578b\u4e3a string \uff0c\u7f16\u8bd1\u5668\u4f1a\u4ece\u53f3\u4fa7\u7684\u503c\u4e2d\u63a8\u65ad\u51fa\u6765\u3002","title":"19.3 \u6570\u636e\u7ed3\u6784"},{"location":"19.3/#_1","text":"\u8fd9\u91cc\uff0c\u53d8\u91cf URLStore \u662f\u4e2d\u5fc3\u5316\u7684\u5185\u5b58\u5b58\u50a8\u3002\u5f53\u6536\u5230\u7f51\u7edc\u6d41\u91cf\u65f6\uff0c\u4f1a\u6709\u5f88\u591a Redirect \u670d\u52a1\u7684\u8bf7\u6c42\u3002\u8fd9\u4e9b\u8bf7\u6c42\u5176\u5b9e\u53ea\u6d89\u53ca\u8bfb\u64cd\u4f5c\uff1a\u4ee5\u7ed9\u5b9a\u7684\u77ed URL \u4f5c\u4e3a\u952e\uff0c\u8fd4\u56de\u5bf9\u5e94\u7684\u957f URL \u7684\u503c\u3002\u7136\u800c\uff0c\u5bf9 Add \u670d\u52a1\u7684\u8bf7\u6c42\u5219\u5927\u4e0d\u76f8\u540c\uff0c\u5b83\u4eec\u4f1a\u66f4\u6539 URLStore \uff0c\u6dfb\u52a0\u65b0\u7684\u952e\u503c\u5bf9\u3002\u5f53\u5728\u77ac\u95f4\u6536\u5230\u5927\u91cf\u66f4\u65b0\u8bf7\u6c42\u65f6\uff0c\u53ef\u80fd\u4f1a\u4ea7\u751f\u5982\u4e0b\u95ee\u9898\uff1a\u6dfb\u52a0\u64cd\u4f5c\u53ef\u80fd\u88ab\u53e6\u4e00\u4e2a\u540c\u7c7b\u8bf7\u6c42\u6253\u65ad\uff0c\u5199\u5165\u7684\u957f URL \u503c\u53ef\u80fd\u4f1a\u4e22\u5931\uff1b\u53e6\u5916\uff0c\u8bfb\u53d6\u548c\u66f4\u6539\u540c\u65f6\u8fdb\u884c\uff0c\u5bfc\u81f4\u53ef\u80fd\u8bfb\u5230\u810f\u6570\u636e\u3002\u4ee3\u7801\u4e2d\u7684 map \u5e76\u4e0d\u4fdd\u8bc1\u5f53\u5f00\u59cb\u66f4\u65b0\u6570\u636e\u65f6\uff0c\u4f1a\u5f7b\u5e95\u963b\u6b62\u53e6\u4e00\u4e2a\u66f4\u65b0\u64cd\u4f5c\u7684\u542f\u52a8\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c map \u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0cgoto \u4f1a\u5e76\u53d1\u5730\u4e3a\u5f88\u591a\u8bf7\u6c42\u63d0\u4f9b\u670d\u52a1\u3002\u56e0\u6b64\u5fc5\u987b\u4f7f URLStore \u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u4ece\u4e0d\u540c\u7684\u7ebf\u7a0b\u8bbf\u95ee\u5b83\u3002\u6700\u7b80\u5355\u548c\u7ecf\u5178\u7684\u65b9\u6cd5\u662f\u4e3a\u5176\u589e\u52a0\u4e00\u4e2a\u9501\uff0c\u5b83\u662f Go \u6807\u51c6\u5e93 sync \u5305\u4e2d\u7684 Mutex \u7c7b\u578b\uff0c\u5fc5\u987b\u5bfc\u5165\u5230\u6211\u4eec\u7684\u4ee3\u7801\u4e2d\uff08\u5173\u4e8e\u9501\u8be6\u89c1 9.3 \u8282 \uff09\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u628a URLStore \u7c7b\u578b\u7684\u5b9a\u4e49\u66f4\u6539\u4e3a\u4e00\u4e2a\u7ed3\u6784\u4f53\uff08\u5c31\u662f\u5b57\u6bb5\u7684\u96c6\u5408\uff0c\u7c7b\u4f3c C \u6216 Java \uff0c 10 \u7ae0 \u4ecb\u7ecd\u4e86\u7ed3\u6784\u4f53\uff09\uff0c\u5b83\u542b\u6709\u4e24\u4e2a\u5b57\u6bb5\uff1a map \u548c sync \u5305\u7684 RWMutex \uff1a import \"sync\" type URLStore struct { urls map [ string ] string // map from short to long URLs mu sync . RWMutex } RWMutex \u6709\u4e24\u79cd\u9501\uff1a\u5206\u522b\u5bf9\u5e94\u8bfb\u548c\u5199\u3002\u591a\u4e2a\u5ba2\u6237\u7aef\u53ef\u4ee5\u540c\u65f6\u8bbe\u7f6e\u8bfb\u9501\uff0c\u4f46\u53ea\u6709\u4e00\u4e2a\u5ba2\u6237\u7aef\u53ef\u4ee5\u8bbe\u7f6e\u5199\u9501\uff08\u4ee5\u6392\u9664\u6240\u6709\u7684\u8bfb\u9501\uff09\uff0c\u6709\u6548\u5730\u4e32\u884c\u5316\u53d8\u66f4\uff0c\u4f7f\u4ed6\u4eec\u6309\u987a\u5e8f\u751f\u6548\u3002 \u6211\u4eec\u5c06\u5728 Get() \u51fd\u6570\u4e2d\u5b9e\u73b0 Redirect \u670d\u52a1\u7684\u8bfb\u8bf7\u6c42\uff0c\u5728 Set \u51fd\u6570\u4e2d\u5b9e\u73b0 Add \u670d\u52a1\u7684\u5199\u8bf7\u6c42\u3002 Get() \u51fd\u6570\u7c7b\u4f3c\u4e0b\u9762\u8fd9\u6837\uff1a func ( s * URLStore ) Get ( key string ) string { s . mu . RLock () url := s . urls [ key ] s . mu . RUnlock () return url } \u51fd\u6570\u6309\u7167\u952e\uff08\u77ed URL\uff09\u8fd4\u56de\u5bf9\u5e94\u6620\u5c04\u540e\u7684 URL\u3002\u5b83\u6240\u5904\u7406\u7684\u53d8\u91cf\u662f\u6307\u9488\u7c7b\u578b\uff08\u89c1 4.9 \u8282 \uff09\uff0c\u6307\u5411 URLStore \u3002\u4f46\u5728\u8bfb\u53d6\u503c\u4e4b\u524d\uff0c\u5148\u7528 s.mu.RLock() \u653e\u7f6e\u4e00\u4e2a\u8bfb\u9501\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u6709\u66f4\u65b0\u64cd\u4f5c\u59a8\u788d\u8bfb\u53d6\u3002\u6570\u636e\u8bfb\u53d6\u540e\u64a4\u9500\u9501\u5b9a\uff0c\u4ee5\u4fbf\u6302\u8d77\u7684\u66f4\u65b0\u64cd\u4f5c\u53ef\u4ee5\u5f00\u59cb\u3002\u5982\u679c\u952e\u4e0d\u5b58\u5728\u4e8e map \u4e2d\u4f1a\u600e\u6837\uff1f\u4f1a\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u96f6\u503c\uff08\u7a7a\u5b57\u7b26\u4e32\uff09\u3002\u6ce8\u610f\u70b9\u53f7 ( . ) \u7c7b\u4f3c\u9762\u5411\u5bf9\u8c61\u7684\u8bed\u8a00\uff1a\u5728 s \u7684 mu \u5b57\u6bb5\u4e0a\u8c03\u7528\u65b9\u6cd5 RLock() \u3002 Set() \u51fd\u6570\u540c\u65f6\u9700\u8981 URL \u7684\u952e\u503c\u5bf9\uff0c\u4e14\u5fc5\u987b\u653e\u7f6e\u5199\u9501 Lock() \u6765\u6392\u9664\u540c\u4e00\u65f6\u523b\u4efb\u4f55\u5176\u4ed6\u66f4\u65b0\u64cd\u4f5c\u3002\u51fd\u6570\u8fd4\u56de\u5e03\u5c14\u503c true \u6216 false \u6765\u8868\u793a Set() \u64cd\u4f5c\u662f\u5426\u6210\u529f\uff1a func ( s * URLStore ) Set ( key , url string ) bool { s . mu . Lock () _ , present := s . urls [ key ] if present { s . mu . Unlock () return false } s . urls [ key ] = url s . mu . Unlock () return true } \u5f62\u5f0f _, present := s.urls[key] \u53ef\u4ee5\u6d4b\u8bd5 map \u4e2d\u662f\u5426\u5df2\u7ecf\u5305\u542b\u8be5\u952e\uff0c\u5305\u542b\u5219 present \u4e3a true \uff0c\u5426\u5219\u4e3a false \u3002\u8fd9\u79cd\u5f62\u5f0f\u79f0\u4e3a\u201c\u9017\u53f7 ok \u6a21\u5f0f\u201d\uff0c\u5728 Go \u4ee3\u7801\u4e2d\u4f1a\u9891\u7e41\u51fa\u73b0\u3002\u5982\u679c\u952e\u5df2\u5b58\u5728\uff0c Set() \u51fd\u6570\u76f4\u63a5\u8fd4\u56de\u5e03\u5c14\u503c false \uff0c map \u4e0d\u4f1a\u88ab\u66f4\u65b0\uff08\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u77ed URL \u4e0d\u4f1a\u91cd\u590d\uff09\u3002\u5982\u679c\u952e\u4e0d\u5b58\u5728\uff0c\u628a\u5b83\u52a0\u5165 map \u4e2d\u5e76\u8fd4\u56de true \u3002\u5de6\u4fa7 _ \u662f\u4e00\u4e2a\u503c\u7684\u5360\u4f4d\u7b26\uff0c\u8d4b\u503c\u7ed9 _ \u6765\u8868\u660e\u6211\u4eec\u4e0d\u4f1a\u4f7f\u7528\u5b83\u3002\u6ce8\u610f\u5728\u66f4\u65b0\u540e\u5c3d\u65e9\u8c03\u7528 Unlock() \u6765\u91ca\u653e\u5bf9 URLStore \u7684\u9501\u5b9a\u3002","title":"\u4f7f\u7a0b\u5e8f\u7ebf\u7a0b\u5b89\u5168"},{"location":"19.3/#defer","text":"\u76ee\u524d\u4ee3\u7801\u8fd8\u6bd4\u8f83\u7b80\u5355\uff0c\u5bb9\u6613\u8bb0\u5f97\u64cd\u4f5c\u5b8c\u6210\u540e\u8c03\u7528 Unlock() \u89e3\u9501\u3002\u7136\u800c\u5728\u4ee3\u7801\u66f4\u590d\u6742\u65f6\u5f88\u5bb9\u6613\u5fd8\u8bb0\u89e3\u9501\uff0c\u6216\u8005\u653e\u7f6e\u5728\u9519\u8bef\u7684\u4f4d\u7f6e\uff0c\u5f80\u5f80\u5bfc\u81f4\u95ee\u9898\u5f88\u96be\u8ffd\u8e2a\u3002\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5 Go \u63d0\u4f9b\u4e86\u4e00\u4e2a\u7279\u6b8a\u5173\u952e\u5b57 defer \uff08\u89c1 6.4 \u8282 \uff09\u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u53ef\u4ee5\u5728 Lock() \u4e4b\u540e\u7acb\u5373\u793a\u610f Unlock() \uff0c\u4e0d\u8fc7\u5176\u6548\u679c\u662f Unlock() \u53ea\u4f1a\u5728\u51fd\u6570\u8fd4\u56de\u4e4b\u524d\u88ab\u8c03\u7528\u3002 Get() \u53ef\u4ee5\u7b80\u5316\u6210\u4ee5\u4e0b\u4ee3\u7801\uff08\u6211\u4eec\u6d88\u9664\u4e86\u672c\u5730\u53d8\u91cf url \uff09\uff1a func ( s * URLStore ) Get ( key string ) string { s . mu . RLock () defer s . mu . RUnlock () return s . urls [ key ] } Set() \u7684\u903b\u8f91\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u4e5f\u53d8\u5f97\u6e05\u6670\u4e86\uff08\u6211\u4eec\u4e0d\u7528\u518d\u8003\u8651\u89e3\u9501\u7684\u4e8b\u4e86\uff09\uff1a func ( s * URLStore ) Set ( key , url string ) bool { s . mu . Lock () defer s . mu . Unlock () _ , present := s . urls [ key ] if present { return false } s . urls [ key ] = url return true }","title":"\u4f7f\u7528 defer \u7b80\u5316\u4ee3\u7801"},{"location":"19.3/#urlstore","text":"URLStore() \u7ed3\u6784\u4f53\u4e2d\u5305\u542b map \u7c7b\u578b\u7684\u5b57\u6bb5\uff0c\u4f7f\u7528\u524d\u5fc5\u987b\u5148\u7528 make() \u521d\u59cb\u5316\u3002\u5728 Go \u4e2d\u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53\u5b9e\u4f8b\uff0c\u4e00\u822c\u662f\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e2a\u524d\u7f00\u4e3a New \uff0c\u80fd\u8fd4\u56de\u8be5\u7c7b\u578b\u5df2\u521d\u59cb\u5316\u5b9e\u4f8b\u7684\u51fd\u6570\uff08\u901a\u5e38\u662f\u6307\u5411\u5b9e\u4f8b\u7684\u6307\u9488\uff09\u3002 func NewURLStore () * URLStore { return & URLStore { urls : make ( map [ string ] string ) } } \u5728 return \u8bed\u53e5\u4e2d\uff0c\u521b\u5efa\u4e86 URLStore \u5b57\u9762\u91cf\u5b9e\u4f8b\uff0c\u5176\u4e2d\u5305\u542b\u521d\u59cb\u5316\u4e86\u7684 map \u6620\u5c04\u3002\u9501\u65e0\u9700\u7279\u522b\u6307\u660e\u521d\u59cb\u5316\uff0c\u8fd9\u662f Go \u521b\u5efa\u7ed3\u6784\u4f53\u5b9e\u4f8b\u7684\u60ef\u4f8b\u3002 & \u662f\u53d6\u5740\u8fd0\u7b97\u7b26\uff0c\u5b83\u5c06\u6211\u4eec\u8981\u8fd4\u56de\u7684\u5185\u5bb9\u53d8\u6210\u6307\u9488\uff0c\u56e0\u4e3a NewURLStore() \u8fd4\u56de\u7c7b\u578b\u662f *URLStore \u3002\u7136\u540e\u8c03\u7528\u8be5\u51fd\u6570\u6765\u521b\u5efa URLStore \u53d8\u91cf\uff1a var store = NewURLStore ()","title":"URLStore \u5de5\u5382\u51fd\u6570"},{"location":"19.3/#urlstore_1","text":"\u8981\u65b0\u589e\u4e00\u5bf9\u77ed/\u957f URL \u5230 map \u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8c03\u7528 s \u4e0a\u7684 Set() \u65b9\u6cd5\uff0c\u7531\u4e8e\u8fd4\u56de\u5e03\u5c14\u503c\uff0c\u53ef\u4ee5\u628a\u5b83\u5305\u88f9\u5728 if \u8bed\u53e5\u4e2d\uff1a if s . Set ( \"a\" , \"http://google.com\" ) { // \u6210\u529f } \u8981\u83b7\u53d6\u7ed9\u5b9a\u77ed URL \u5bf9\u5e94\u7684\u957f URL\uff0c\u8c03\u7528 s \u4e0a\u7684 Get() \u65b9\u6cd5\uff0c\u5c06\u8fd4\u56de\u503c\u653e\u5165\u53d8\u91cf url \uff1a if url := s . Get ( \"a\" ); url != \"\" { // \u91cd\u5b9a\u5411\u5230 url } else { // \u952e\u672a\u627e\u5230 } \u8fd9\u91cc\u6211\u4eec\u5229\u7528 Go \u8bed\u8a00 if \u8bed\u53e5\u7684\u7279\u6027\uff0c\u53ef\u4ee5\u5728\u8d77\u59cb\u90e8\u5206\u3001\u6761\u4ef6\u5224\u65ad\u524d\u653e\u7f6e\u521d\u59cb\u5316\u8bed\u53e5\u3002\u53e6\u5916\u8fd8\u9700\u8981\u4e00\u4e2a Count() \u65b9\u6cd5\u4ee5\u83b7\u53d6 map \u4e2d\u952e\u503c\u5bf9\u7684\u6570\u91cf\uff0c\u53ef\u4ee5\u4f7f\u7528\u5185\u5efa\u7684 len() \u51fd\u6570\uff1a func ( s * URLStore ) Count () int { s . mu . RLock () defer s . mu . RUnlock () return len ( s . urls ) } \u5982\u4f55\u6839\u636e\u7ed9\u5b9a\u7684\u957f URL \u8ba1\u7b97\u51fa\u77ed URL \u5462\uff1f\u4e3a\u6b64\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u51fd\u6570 genKey(n int) string {\u2026} \uff0c\u5c06 s.Count() \u7684\u5f53\u524d\u503c\u4f5c\u4e3a\u5176\u6574\u578b\u53c2\u6570\u4f20\u5165\u3002\uff08\u5177\u4f53\u7b97\u6cd5\u5e76\u4e0d\u91cd\u8981\uff0c\u793a\u4f8b\u4ee3\u7801\u53ef\u4ee5\u5728 key.go \u627e\u5230\u3002\uff09 \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a Put() \u65b9\u6cd5\uff0c\u63a5\u6536\u4e00\u4e2a\u957f URL\uff0c\u7528 genKey() \u751f\u6210\u5176\u77ed URL \u952e\uff0c\u8c03\u7528 Set() \u65b9\u6cd5\u5728\u6b64\u952e\u4e0b\u5b58\u50a8\u957f URL \u6570\u636e\uff0c\u7136\u540e\u8fd4\u56de\u8fd9\u4e2a\u952e\uff1a func ( s * URLStore ) Put ( url string ) string { for { key := genKey ( s . Count ()) if s . Set ( key , url ) { return key } } // shouldn\u2019t get here return \"\" } for \u5faa\u73af\u4f1a\u4e00\u76f4\u5c1d\u8bd5\u8c03\u7528 Set() \u76f4\u5230\u6210\u529f\u4e3a\u6b62\uff08\u610f\u5473\u7740\u751f\u6210\u4e86\u4e00\u4e2a\u5c1a\u672a\u5b58\u5728\u7684\u77ed\u7f51\u5740\uff09\u3002\u73b0\u5728\u6211\u4eec\u5b9a\u4e49\u597d\u4e86\u6570\u636e\u5b58\u50a8\uff0c\u4ee5\u53ca\u914d\u5957\u7684\u53ef\u5de5\u4f5c\u7684\u51fd\u6570\uff08\u89c1\u4ee3\u7801 store.go \uff09\u3002\u4f46\u8fd9\u672c\u8eab\u5e76\u4e0d\u80fd\u5b8c\u6210\u4efb\u52a1\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5f00\u53d1 web \u670d\u52a1\u5668\u4ee5\u4ea4\u4ed8 Add \u548c Redirect \u670d\u52a1\u3002","title":"\u4f7f\u7528 URLStore"},{"location":"19.3/#_2","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u77ed\u7f51\u5740\u9879\u76ee\u7b80\u4ecb \u4e0b\u4e00\u8282\uff1a \u7528\u6237\u754c\u9762\uff1aweb \u670d\u52a1\u7aef","title":"\u94fe\u63a5"},{"location":"19.4/","text":"19.4 \u7528\u6237\u754c\u9762\uff1aweb \u670d\u52a1\u7aef \u00b6 \uff08\u672c\u8282\u4ee3\u7801\u89c1 goto_v1/main.go \u3002\uff09 \u6211\u4eec\u5c1a\u672a\u7f16\u5199\u542f\u52a8\u7a0b\u5e8f\u7684\u5fc5\u8981\u51fd\u6570\u3002\u5b83\u4eec\uff08\u603b\u662f\uff09\u7c7b\u4f3c C\uff0cC++ \u6216 Java \u4e2d\u7684 main() \u51fd\u6570\uff0c\u6211\u4eec\u7684 web \u670d\u52a1\u5668\u7531\u5b83\u542f\u52a8\uff0c\u4f8b\u5982\u7528\u5982\u4e0b\u547d\u4ee4\u5728\u672c\u5730 8080 \u7aef\u53e3\u542f\u52a8 web \u670d\u52a1\u5668\uff1a http . ListenAndServe ( \":8080\" , nil ) \uff08web \u670d\u52a1\u5668\u7684\u529f\u80fd\u6765\u81ea\u4e8e http \u5305\uff0c 15 \u7ae0 \u505a\u4e86\u6df1\u5165\u4ecb\u7ecd\uff09\u3002web \u670d\u52a1\u5668\u4f1a\u5728\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u4e2d\u76d1\u542c\u5230\u6765\u7684\u8bf7\u6c42\uff0c\u4f46\u6211\u4eec\u5fc5\u987b\u5b9a\u4e49\u9488\u5bf9\u8fd9\u4e9b\u8bf7\u6c42\uff0c\u670d\u52a1\u5668\u8be5\u5982\u4f55\u54cd\u5e94\u3002\u53ef\u4ee5\u7528\u88ab\u79f0\u4e3a HTTP \u5904\u7406\u5668\u7684 HandleFunc \u51fd\u6570\u6765\u529e\u5230\uff0c\u4f8b\u5982\u4ee3\u7801\uff1a http . HandleFunc ( \"/add\" , Add ) \u5982\u6b64\uff0c\u6bcf\u4e2a\u4ee5 /add \u7ed3\u5c3e\u7684\u8bf7\u6c42\u90fd\u4f1a\u8c03\u7528 Add \u51fd\u6570\uff08\u5c1a\u672a\u5b8c\u6210\uff09\u3002 \u7a0b\u5e8f\u6709\u4e24\u4e2a HTTP \u5904\u7406\u5668\uff1a - Redirect \uff0c\u7528\u4e8e\u5bf9\u77ed URL \u91cd\u5b9a\u5411 - Add \uff0c\u7528\u4e8e\u5904\u7406\u65b0\u63d0\u4ea4\u7684 URL \u793a\u610f\u56fe\uff1a \u6700\u7b80\u5355\u7684 main() \u51fd\u6570\u7c7b\u4f3c\u8fd9\u6837\uff1a func main () { http . HandleFunc ( \"/\" , Redirect ) http . HandleFunc ( \"/add\" , Add ) http . ListenAndServe ( \":8080\" , nil ) } \u5bf9 /add \u7684\u8bf7\u6c42\u7531 Add \u5904\u7406\u5668\u5904\u7406\uff0c\u6240\u6709\u5176\u4ed6\u8bf7\u6c42\u4f1a\u88ab Redirect \u5904\u7406\u5668\u5904\u7406\u3002\u5904\u7406\u51fd\u6570\u4ece\u5230\u6765\u7684\u8bf7\u6c42\uff08\u4e00\u4e2a\u7c7b\u578b\u4e3a *http.Request \u7684\u53d8\u91cf\uff09\u4e2d\u83b7\u53d6\u4fe1\u606f\uff0c\u7136\u540e\u4ea7\u751f\u54cd\u5e94\u5e76\u5199\u5165 http.ResponseWriter \u7c7b\u578b\u53d8\u91cf w \u3002 Add \u51fd\u6570\u5fc5\u987b\u505a\u7684\u4e8b\u6709\uff1a 1. \u8bfb\u53d6\u957f URL\uff0c\u5373\uff1a\u7528 r.FormValue(\"url\") \u4ece HTML \u8868\u5355\u63d0\u4ea4\u7684 HTTP \u8bf7\u6c42\u4e2d\u8bfb\u53d6 URL 2. \u4f7f\u7528 store \u4e0a\u7684 Put() \u65b9\u6cd5\u5b58\u50a8\u957f URL 3. \u5c06\u5bf9\u5e94\u7684\u77ed URL \u53d1\u9001\u7ed9\u7528\u6237 \u6bcf\u4e2a\u9700\u6c42\u90fd\u8f6c\u5316\u4e3a\u4e00\u884c\u4ee3\u7801\uff1a func Add ( w http . ResponseWriter , r * http . Request ) { url := r . FormValue ( \"url\" ) key := store . Put ( url ) fmt . Fprintf ( w , \"http://localhost:8080/%s\" , key ) } \u8fd9\u91cc fmt \u5305\u7684 Fprintf() \u51fd\u6570\u7528\u6765\u66ff\u6362\u5b57\u7b26\u4e32\u4e2d\u7684\u5173\u952e\u5b57 %s \uff0c\u7136\u540e\u5c06\u7ed3\u679c\u4f5c\u4e3a\u54cd\u5e94\u53d1\u9001\u56de\u5ba2\u6237\u7aef\u3002\u6ce8\u610f Fprintf() \u628a\u6570\u636e\u5199\u5230\u4e86 ResponseWriter \u4e2d\uff0c\u5176\u5b9e Fprintf() \u53ef\u4ee5\u5c06\u6570\u636e\u5199\u5230\u4efb\u4f55\u5b9e\u73b0\u4e86 io.Writer \u7684\u6570\u636e\u7ed3\u6784\uff0c\u5373\u8be5\u7ed3\u6784\u5b9e\u73b0\u4e86 Write() \u65b9\u6cd5\u3002Go \u4e2d io.Writer \u79f0\u4e3a\u63a5\u53e3\uff0c\u53ef\u89c1 Fprintf() \u5229\u7528\u63a5\u53e3\u53d8\u5f97\u5341\u5206\u901a\u7528\uff0c\u53ef\u4ee5\u5bf9\u5f88\u591a\u4e0d\u540c\u7684\u7c7b\u578b\u5199\u5165\u6570\u636e\u3002Go \u4e2d\u63a5\u53e3\u7684\u4f7f\u7528\u5341\u5206\u666e\u904d\uff0c\u5b83\u4f7f\u4ee3\u7801\u66f4\u901a\u7528\uff08\u89c1 11 \u7ae0 \uff09\u3002 \u8fd8\u9700\u8981\u4e00\u4e2a\u8868\u5355\uff0c\u4ecd\u7136\u53ef\u4ee5\u7528 Fprintf() \u6765\u8f93\u51fa\uff0c\u8fd9\u6b21\u5c06\u5e38\u91cf\u5199\u5165 w \u3002\u8ba9\u6211\u4eec\u6765\u4fee\u6539 Add() \uff0c\u5f53\u672a\u6307\u5b9a URL \u65f6\u663e\u793a HTML \u8868\u5355\uff1a func Add ( w http . ResponseWriter , r * http . Request ) { url := r . FormValue ( \"url\" ) if url == \"\" { fmt . Fprint ( w , AddForm ) return } key := store . Put ( url ) fmt . Fprintf ( w , \"http://localhost:8080/%s\" , key ) } const AddForm = ` <form method=\"POST\" action=\"/add\"> URL: <input type=\"text\" name=\"url\"> <input type=\"submit\" value=\"Add\"> </form> ` \u5728\u90a3\u79cd\u60c5\u51b5\u4e0b\uff0c\u53d1\u9001\u5b57\u7b26\u4e32\u5e38\u91cf AddForm \u5230\u5ba2\u6237\u7aef\uff0c\u5b83\u662f html \u8868\u5355\uff0c\u5305\u542b\u4e00\u4e2a url \u8f93\u5165\u57df\u548c\u4e00\u4e2a\u63d0\u4ea4\u6309\u94ae\uff0c\u70b9\u51fb\u540e\u53d1\u9001 POST \u8bf7\u6c42\u5230 /add \u3002\u8fd9\u6837 Add() \u5904\u7406\u51fd\u6570\u88ab\u518d\u6b21\u8c03\u7528\uff0c\u6b64\u65f6 url \u7684\u503c\u6765\u81ea\u6587\u672c\u57df\u3002\uff08 `` \u7528\u6765\u521b\u5efa\u539f\u59cb\u5b57\u7b26\u4e32\uff0c\u5426\u5219\u6309\u60ef\u4f8b \"\" \u5c06\u6210\u4e3a\u5b57\u7b26\u4e32\u8fb9\u754c\u3002\uff09 Redirect() \u51fd\u6570\u5728 HTTP \u8bf7\u6c42\u8def\u5f84\u4e2d\u627e\u5230\u952e\uff08\u77ed URL \u7684\u952e\u662f\u8bf7\u6c42\u8def\u5f84\u53bb\u9664\u9996\u5b57\u7b26\uff0c\u5728 Go \u4e2d\u53ef\u4ee5\u5199\u4e3a [1:] \u3002\u4f8b\u5982\u8bf7\u6c42 \"/abc\"\uff0c\u952e\u5c31\u662f \"abc\"\uff09\uff0c\u7528 Get() \u51fd\u6570\u4ece store \u68c0\u7d22\u5230\u5bf9\u5e94\u7684\u957f URL\uff0c\u5bf9\u7528\u6237\u53d1\u9001 HTTP \u91cd\u5b9a\u5411\u3002\u5982\u679c\u6ca1\u627e\u5230 URL\uff0c\u53d1\u9001 404 \"Not Found\" \u9519\u8bef\u53d6\u800c\u4ee3\u4e4b\uff1a func Redirect ( w http . ResponseWriter , r * http . Request ) { key := r . URL . Path [ 1 :] url := store . Get ( key ) if url == \"\" { http . NotFound ( w , r ) return } http . Redirect ( w , r , url , http . StatusFound ) } \uff08 http.NotFound() \u548c http.Redirect() \u662f\u53d1\u9001\u901a\u7528 HTTP \u54cd\u5e94\u7684\u5de5\u5177\u51fd\u6570\u3002\uff09 \u6211\u4eec\u5df2\u7ecf\u5b8c\u6574\u5730\u904d\u5386\u4e86 goto_v1 \u7684\u4ee3\u7801\u3002 \u7f16\u8bd1\u548c\u8fd0\u884c \u00b6 \u53ef\u6267\u884c\u7a0b\u5e8f\u5df2\u5305\u542b\u5728\u793a\u4f8b\u4ee3\u7801\u4e0b\uff0c\u5982\u679c\u4f60\u60f3\u7acb\u5373\u6d4b\u8bd5\u53ef\u4ee5\u8df3\u8fc7\u672c\u8282\u3002\u5176\u4e2d\u5305\u542b 3 \u4e2a go \u6e90\u6587\u4ef6\u548c\u4e00\u4e2a Makefile \u6587\u4ef6\uff0c\u901a\u8fc7\u5b83\u5e94\u7528\u53ef\u4ee5\u88ab\u7f16\u8bd1\u548c\u94fe\u63a5\uff0c\u53ea\u987b\u5982\u4e0b\u64cd\u4f5c\uff1a - Linux \u548c OSX \u5e73\u53f0\uff1a \u5728\u7ec8\u7aef\u7a97\u53e3\u6e90\u7801\u76ee\u5f55\u4e0b\u542f\u52a8 make \u547d\u4ee4\uff0c\u6216\u5728 LiteIDE \u4e2d\u6784\u5efa\u9879\u76ee\u3002 - Windows \u5e73\u53f0\uff1a \u542f\u52a8 MINGW \u73af\u5883\uff0c\u6b65\u9aa4\u4e3a\uff1a\u5f00\u59cb\u83dc\u5355\uff0c\u6240\u6709\u7a0b\u5e8f\uff0cMinGW\uff0cMinGW Shell\uff08\u89c1 2.5.5 \u8282 \uff09\uff0c\u5728\u547d\u4ee4\u884c\u7a97\u53e3\u8f93\u5165 make \u5e76\u56de\u8f66\uff0c\u6e90\u4ee3\u7801\u88ab\u7f16\u8bd1\u5e76\u94fe\u63a5\u4e3a\u539f\u751f exe \u53ef\u6267\u884c\u7a0b\u5e8f\u3002 \u751f\u6210\u5185\u5bb9\u4e3a\u53ef\u6267\u884c\u7a0b\u5e8f\uff0cLinux/OS X \u4e0b\u4e3a goto \uff0cWindows \u4e0b\u4e3a goto.exe \u3002 \u8981\u542f\u52a8\u5e76\u8fd0\u884c web \u670d\u52a1\u5668\uff0c\u90a3\u4e48\uff1a - Linux \u548c OSX \u5e73\u53f0\uff1a \u8f93\u5165\u547d\u4ee4 ./goto \u3002 - Windows \u5e73\u53f0\uff1a \u4ece Go IDE \u542f\u52a8\u7a0b\u5e8f\uff08\u5982\u679c Windows \u9632\u706b\u5899\u963b\u6b62\u7a0b\u5e8f\u542f\u52a8\uff0c\u8bbe\u7f6e\u5141\u8bb8\u8be5\u7a0b\u5e8f\uff09 \u6d4b\u8bd5\u8be5\u7a0b\u5e8f \u00b6 \u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u8bf7\u6c42 url\uff1a http://localhost:8080/add \u8fd9\u4f1a\u6fc0\u6d3b Add() \u5904\u7406\u51fd\u6570\u3002\u8bf7\u6c42\u8fd8\u672a\u5305\u542b url \u53d8\u91cf\uff0c\u6240\u4ee5\u54cd\u5e94\u4f1a\u8f93\u51fa html \u8868\u5355\u8be2\u95ee\u8f93\u5165\uff1a \u6dfb\u52a0\u4e00\u4e2a\u957f URL \u4ee5\u83b7\u53d6\u7b49\u4ef7\u7684\u7f29\u77ed\u7248\u672c\uff0c\u4f8b\u5982 http://golang.org/pkg/bufio/#Writer \uff0c\u7136\u540e\u5355\u51fb\u6309\u94ae\u3002\u5e94\u7528\u4f1a\u4e3a\u4f60\u4ea7\u751f\u4e00\u4e2a\u77ed URL \u5e76\u6253\u5370\u51fa\u6765\uff0c\u4f8b\u5982 http:// localhost:8080/2 \u3002 \u590d\u5236\u8be5 URL \u5e76\u5728\u6d4f\u89c8\u5668\u5730\u5740\u680f\u7c98\u8d34\u4ee5\u53d1\u51fa\u8bf7\u6c42\uff0c\u73b0\u5728\u8f6e\u5230 Redirect() \u5904\u7406\u51fd\u6570\u4e0a\u573a\u4e86\uff0c\u5bf9\u5e94\u957f URL \u7684\u9875\u9762\u88ab\u663e\u793a\u4e86\u51fa\u6765\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6570\u636e\u7ed3\u6784 \u4e0b\u4e00\u8282\uff1a \u6301\u4e45\u5316\u5b58\u50a8\uff1agob","title":"19.4 \u7528\u6237\u754c\u9762\uff1aweb \u670d\u52a1\u7aef"},{"location":"19.4/#194-web","text":"\uff08\u672c\u8282\u4ee3\u7801\u89c1 goto_v1/main.go \u3002\uff09 \u6211\u4eec\u5c1a\u672a\u7f16\u5199\u542f\u52a8\u7a0b\u5e8f\u7684\u5fc5\u8981\u51fd\u6570\u3002\u5b83\u4eec\uff08\u603b\u662f\uff09\u7c7b\u4f3c C\uff0cC++ \u6216 Java \u4e2d\u7684 main() \u51fd\u6570\uff0c\u6211\u4eec\u7684 web \u670d\u52a1\u5668\u7531\u5b83\u542f\u52a8\uff0c\u4f8b\u5982\u7528\u5982\u4e0b\u547d\u4ee4\u5728\u672c\u5730 8080 \u7aef\u53e3\u542f\u52a8 web \u670d\u52a1\u5668\uff1a http . ListenAndServe ( \":8080\" , nil ) \uff08web \u670d\u52a1\u5668\u7684\u529f\u80fd\u6765\u81ea\u4e8e http \u5305\uff0c 15 \u7ae0 \u505a\u4e86\u6df1\u5165\u4ecb\u7ecd\uff09\u3002web \u670d\u52a1\u5668\u4f1a\u5728\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u4e2d\u76d1\u542c\u5230\u6765\u7684\u8bf7\u6c42\uff0c\u4f46\u6211\u4eec\u5fc5\u987b\u5b9a\u4e49\u9488\u5bf9\u8fd9\u4e9b\u8bf7\u6c42\uff0c\u670d\u52a1\u5668\u8be5\u5982\u4f55\u54cd\u5e94\u3002\u53ef\u4ee5\u7528\u88ab\u79f0\u4e3a HTTP \u5904\u7406\u5668\u7684 HandleFunc \u51fd\u6570\u6765\u529e\u5230\uff0c\u4f8b\u5982\u4ee3\u7801\uff1a http . HandleFunc ( \"/add\" , Add ) \u5982\u6b64\uff0c\u6bcf\u4e2a\u4ee5 /add \u7ed3\u5c3e\u7684\u8bf7\u6c42\u90fd\u4f1a\u8c03\u7528 Add \u51fd\u6570\uff08\u5c1a\u672a\u5b8c\u6210\uff09\u3002 \u7a0b\u5e8f\u6709\u4e24\u4e2a HTTP \u5904\u7406\u5668\uff1a - Redirect \uff0c\u7528\u4e8e\u5bf9\u77ed URL \u91cd\u5b9a\u5411 - Add \uff0c\u7528\u4e8e\u5904\u7406\u65b0\u63d0\u4ea4\u7684 URL \u793a\u610f\u56fe\uff1a \u6700\u7b80\u5355\u7684 main() \u51fd\u6570\u7c7b\u4f3c\u8fd9\u6837\uff1a func main () { http . HandleFunc ( \"/\" , Redirect ) http . HandleFunc ( \"/add\" , Add ) http . ListenAndServe ( \":8080\" , nil ) } \u5bf9 /add \u7684\u8bf7\u6c42\u7531 Add \u5904\u7406\u5668\u5904\u7406\uff0c\u6240\u6709\u5176\u4ed6\u8bf7\u6c42\u4f1a\u88ab Redirect \u5904\u7406\u5668\u5904\u7406\u3002\u5904\u7406\u51fd\u6570\u4ece\u5230\u6765\u7684\u8bf7\u6c42\uff08\u4e00\u4e2a\u7c7b\u578b\u4e3a *http.Request \u7684\u53d8\u91cf\uff09\u4e2d\u83b7\u53d6\u4fe1\u606f\uff0c\u7136\u540e\u4ea7\u751f\u54cd\u5e94\u5e76\u5199\u5165 http.ResponseWriter \u7c7b\u578b\u53d8\u91cf w \u3002 Add \u51fd\u6570\u5fc5\u987b\u505a\u7684\u4e8b\u6709\uff1a 1. \u8bfb\u53d6\u957f URL\uff0c\u5373\uff1a\u7528 r.FormValue(\"url\") \u4ece HTML \u8868\u5355\u63d0\u4ea4\u7684 HTTP \u8bf7\u6c42\u4e2d\u8bfb\u53d6 URL 2. \u4f7f\u7528 store \u4e0a\u7684 Put() \u65b9\u6cd5\u5b58\u50a8\u957f URL 3. \u5c06\u5bf9\u5e94\u7684\u77ed URL \u53d1\u9001\u7ed9\u7528\u6237 \u6bcf\u4e2a\u9700\u6c42\u90fd\u8f6c\u5316\u4e3a\u4e00\u884c\u4ee3\u7801\uff1a func Add ( w http . ResponseWriter , r * http . Request ) { url := r . FormValue ( \"url\" ) key := store . Put ( url ) fmt . Fprintf ( w , \"http://localhost:8080/%s\" , key ) } \u8fd9\u91cc fmt \u5305\u7684 Fprintf() \u51fd\u6570\u7528\u6765\u66ff\u6362\u5b57\u7b26\u4e32\u4e2d\u7684\u5173\u952e\u5b57 %s \uff0c\u7136\u540e\u5c06\u7ed3\u679c\u4f5c\u4e3a\u54cd\u5e94\u53d1\u9001\u56de\u5ba2\u6237\u7aef\u3002\u6ce8\u610f Fprintf() \u628a\u6570\u636e\u5199\u5230\u4e86 ResponseWriter \u4e2d\uff0c\u5176\u5b9e Fprintf() \u53ef\u4ee5\u5c06\u6570\u636e\u5199\u5230\u4efb\u4f55\u5b9e\u73b0\u4e86 io.Writer \u7684\u6570\u636e\u7ed3\u6784\uff0c\u5373\u8be5\u7ed3\u6784\u5b9e\u73b0\u4e86 Write() \u65b9\u6cd5\u3002Go \u4e2d io.Writer \u79f0\u4e3a\u63a5\u53e3\uff0c\u53ef\u89c1 Fprintf() \u5229\u7528\u63a5\u53e3\u53d8\u5f97\u5341\u5206\u901a\u7528\uff0c\u53ef\u4ee5\u5bf9\u5f88\u591a\u4e0d\u540c\u7684\u7c7b\u578b\u5199\u5165\u6570\u636e\u3002Go \u4e2d\u63a5\u53e3\u7684\u4f7f\u7528\u5341\u5206\u666e\u904d\uff0c\u5b83\u4f7f\u4ee3\u7801\u66f4\u901a\u7528\uff08\u89c1 11 \u7ae0 \uff09\u3002 \u8fd8\u9700\u8981\u4e00\u4e2a\u8868\u5355\uff0c\u4ecd\u7136\u53ef\u4ee5\u7528 Fprintf() \u6765\u8f93\u51fa\uff0c\u8fd9\u6b21\u5c06\u5e38\u91cf\u5199\u5165 w \u3002\u8ba9\u6211\u4eec\u6765\u4fee\u6539 Add() \uff0c\u5f53\u672a\u6307\u5b9a URL \u65f6\u663e\u793a HTML \u8868\u5355\uff1a func Add ( w http . ResponseWriter , r * http . Request ) { url := r . FormValue ( \"url\" ) if url == \"\" { fmt . Fprint ( w , AddForm ) return } key := store . Put ( url ) fmt . Fprintf ( w , \"http://localhost:8080/%s\" , key ) } const AddForm = ` <form method=\"POST\" action=\"/add\"> URL: <input type=\"text\" name=\"url\"> <input type=\"submit\" value=\"Add\"> </form> ` \u5728\u90a3\u79cd\u60c5\u51b5\u4e0b\uff0c\u53d1\u9001\u5b57\u7b26\u4e32\u5e38\u91cf AddForm \u5230\u5ba2\u6237\u7aef\uff0c\u5b83\u662f html \u8868\u5355\uff0c\u5305\u542b\u4e00\u4e2a url \u8f93\u5165\u57df\u548c\u4e00\u4e2a\u63d0\u4ea4\u6309\u94ae\uff0c\u70b9\u51fb\u540e\u53d1\u9001 POST \u8bf7\u6c42\u5230 /add \u3002\u8fd9\u6837 Add() \u5904\u7406\u51fd\u6570\u88ab\u518d\u6b21\u8c03\u7528\uff0c\u6b64\u65f6 url \u7684\u503c\u6765\u81ea\u6587\u672c\u57df\u3002\uff08 `` \u7528\u6765\u521b\u5efa\u539f\u59cb\u5b57\u7b26\u4e32\uff0c\u5426\u5219\u6309\u60ef\u4f8b \"\" \u5c06\u6210\u4e3a\u5b57\u7b26\u4e32\u8fb9\u754c\u3002\uff09 Redirect() \u51fd\u6570\u5728 HTTP \u8bf7\u6c42\u8def\u5f84\u4e2d\u627e\u5230\u952e\uff08\u77ed URL \u7684\u952e\u662f\u8bf7\u6c42\u8def\u5f84\u53bb\u9664\u9996\u5b57\u7b26\uff0c\u5728 Go \u4e2d\u53ef\u4ee5\u5199\u4e3a [1:] \u3002\u4f8b\u5982\u8bf7\u6c42 \"/abc\"\uff0c\u952e\u5c31\u662f \"abc\"\uff09\uff0c\u7528 Get() \u51fd\u6570\u4ece store \u68c0\u7d22\u5230\u5bf9\u5e94\u7684\u957f URL\uff0c\u5bf9\u7528\u6237\u53d1\u9001 HTTP \u91cd\u5b9a\u5411\u3002\u5982\u679c\u6ca1\u627e\u5230 URL\uff0c\u53d1\u9001 404 \"Not Found\" \u9519\u8bef\u53d6\u800c\u4ee3\u4e4b\uff1a func Redirect ( w http . ResponseWriter , r * http . Request ) { key := r . URL . Path [ 1 :] url := store . Get ( key ) if url == \"\" { http . NotFound ( w , r ) return } http . Redirect ( w , r , url , http . StatusFound ) } \uff08 http.NotFound() \u548c http.Redirect() \u662f\u53d1\u9001\u901a\u7528 HTTP \u54cd\u5e94\u7684\u5de5\u5177\u51fd\u6570\u3002\uff09 \u6211\u4eec\u5df2\u7ecf\u5b8c\u6574\u5730\u904d\u5386\u4e86 goto_v1 \u7684\u4ee3\u7801\u3002","title":"19.4 \u7528\u6237\u754c\u9762\uff1aweb \u670d\u52a1\u7aef"},{"location":"19.4/#_1","text":"\u53ef\u6267\u884c\u7a0b\u5e8f\u5df2\u5305\u542b\u5728\u793a\u4f8b\u4ee3\u7801\u4e0b\uff0c\u5982\u679c\u4f60\u60f3\u7acb\u5373\u6d4b\u8bd5\u53ef\u4ee5\u8df3\u8fc7\u672c\u8282\u3002\u5176\u4e2d\u5305\u542b 3 \u4e2a go \u6e90\u6587\u4ef6\u548c\u4e00\u4e2a Makefile \u6587\u4ef6\uff0c\u901a\u8fc7\u5b83\u5e94\u7528\u53ef\u4ee5\u88ab\u7f16\u8bd1\u548c\u94fe\u63a5\uff0c\u53ea\u987b\u5982\u4e0b\u64cd\u4f5c\uff1a - Linux \u548c OSX \u5e73\u53f0\uff1a \u5728\u7ec8\u7aef\u7a97\u53e3\u6e90\u7801\u76ee\u5f55\u4e0b\u542f\u52a8 make \u547d\u4ee4\uff0c\u6216\u5728 LiteIDE \u4e2d\u6784\u5efa\u9879\u76ee\u3002 - Windows \u5e73\u53f0\uff1a \u542f\u52a8 MINGW \u73af\u5883\uff0c\u6b65\u9aa4\u4e3a\uff1a\u5f00\u59cb\u83dc\u5355\uff0c\u6240\u6709\u7a0b\u5e8f\uff0cMinGW\uff0cMinGW Shell\uff08\u89c1 2.5.5 \u8282 \uff09\uff0c\u5728\u547d\u4ee4\u884c\u7a97\u53e3\u8f93\u5165 make \u5e76\u56de\u8f66\uff0c\u6e90\u4ee3\u7801\u88ab\u7f16\u8bd1\u5e76\u94fe\u63a5\u4e3a\u539f\u751f exe \u53ef\u6267\u884c\u7a0b\u5e8f\u3002 \u751f\u6210\u5185\u5bb9\u4e3a\u53ef\u6267\u884c\u7a0b\u5e8f\uff0cLinux/OS X \u4e0b\u4e3a goto \uff0cWindows \u4e0b\u4e3a goto.exe \u3002 \u8981\u542f\u52a8\u5e76\u8fd0\u884c web \u670d\u52a1\u5668\uff0c\u90a3\u4e48\uff1a - Linux \u548c OSX \u5e73\u53f0\uff1a \u8f93\u5165\u547d\u4ee4 ./goto \u3002 - Windows \u5e73\u53f0\uff1a \u4ece Go IDE \u542f\u52a8\u7a0b\u5e8f\uff08\u5982\u679c Windows \u9632\u706b\u5899\u963b\u6b62\u7a0b\u5e8f\u542f\u52a8\uff0c\u8bbe\u7f6e\u5141\u8bb8\u8be5\u7a0b\u5e8f\uff09","title":"\u7f16\u8bd1\u548c\u8fd0\u884c"},{"location":"19.4/#_2","text":"\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u8bf7\u6c42 url\uff1a http://localhost:8080/add \u8fd9\u4f1a\u6fc0\u6d3b Add() \u5904\u7406\u51fd\u6570\u3002\u8bf7\u6c42\u8fd8\u672a\u5305\u542b url \u53d8\u91cf\uff0c\u6240\u4ee5\u54cd\u5e94\u4f1a\u8f93\u51fa html \u8868\u5355\u8be2\u95ee\u8f93\u5165\uff1a \u6dfb\u52a0\u4e00\u4e2a\u957f URL \u4ee5\u83b7\u53d6\u7b49\u4ef7\u7684\u7f29\u77ed\u7248\u672c\uff0c\u4f8b\u5982 http://golang.org/pkg/bufio/#Writer \uff0c\u7136\u540e\u5355\u51fb\u6309\u94ae\u3002\u5e94\u7528\u4f1a\u4e3a\u4f60\u4ea7\u751f\u4e00\u4e2a\u77ed URL \u5e76\u6253\u5370\u51fa\u6765\uff0c\u4f8b\u5982 http:// localhost:8080/2 \u3002 \u590d\u5236\u8be5 URL \u5e76\u5728\u6d4f\u89c8\u5668\u5730\u5740\u680f\u7c98\u8d34\u4ee5\u53d1\u51fa\u8bf7\u6c42\uff0c\u73b0\u5728\u8f6e\u5230 Redirect() \u5904\u7406\u51fd\u6570\u4e0a\u573a\u4e86\uff0c\u5bf9\u5e94\u957f URL \u7684\u9875\u9762\u88ab\u663e\u793a\u4e86\u51fa\u6765\u3002","title":"\u6d4b\u8bd5\u8be5\u7a0b\u5e8f"},{"location":"19.4/#_3","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6570\u636e\u7ed3\u6784 \u4e0b\u4e00\u8282\uff1a \u6301\u4e45\u5316\u5b58\u50a8\uff1agob","title":"\u94fe\u63a5"},{"location":"19.5/","text":"\u7248\u672c 2 - \u6dfb\u52a0\u6301\u4e45\u5316\u5b58\u50a8 \u00b6 \u7b2c 2 \u4e2a\u7248\u672c\u7684\u4ee3\u7801 goto_v2 \u89c1 goto_v2 \u3002 19.5 \u6301\u4e45\u5316\u5b58\u50a8\uff1agob \u00b6 \uff08\u672c\u8282\u4ee3\u7801\u89c1 goto_v2/store.go \u548c goto_v2/main.go \u3002\uff09 \u5f53 goto \u8fdb\u7a0b\uff08\u76d1\u542c\u5728 8080 \u7aef\u53e3\u7684 web \u670d\u52a1\u5668\uff09\u7ec8\u6b62\uff0c\u8fd9\u8fdf\u65e9\u4f1a\u53d1\u751f\uff0c\u5185\u5b58 map \u4e2d\u7f29\u77ed\u7684 URL \u5c31\u4f1a\u4e22\u5931\u3002\u8981\u4fdd\u7559\u8fd9\u4e9b\u6570\u636e\uff0c\u5c31\u5f97\u5c06\u5176\u4fdd\u5b58\u5230\u78c1\u76d8\u6587\u4ef6\u4e2d\u3002\u6211\u4eec\u5c06\u4fee\u6539 URLStore() \uff0c\u4f7f\u5b83\u53ef\u4ee5\u4fdd\u5b58\u6570\u636e\u5230\u6587\u4ef6\uff0c\u4e14\u5728 goto \u542f\u52a8\u65f6\u8fd8\u539f\u8fd9\u4e9b\u6570\u636e\u3002\u4e3a\u6b64\u6211\u4eec\u4f7f\u7528 Go \u6807\u51c6\u5e93\u7684 encoding/gob \u5305\uff1a\u5b83\u7528\u4e8e\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\uff0c\u5c06\u6570\u636e\u7ed3\u6784\u8f6c\u6362\u4e3a\u5b57\u8282\u6570\u7ec4\uff08\u786e\u5207\u5730\u8bf4\u662f\u5207\u7247\uff09\uff0c\u53cd\u4e4b\u4ea6\u7136\uff08\u89c1 12.11 \u8282 \uff09\u3002 \u901a\u8fc7 gob \u5305\u7684 NewEncoder() \u548c NewDecoder() \u51fd\u6570\uff0c\u53ef\u4ee5\u6307\u5b9a\u6570\u636e\u8981\u5199\u5165\u6216\u8bfb\u53d6\u7684\u4f4d\u7f6e\u3002\u8fd4\u56de\u7684 Encoder \u548c Decoder \u5bf9\u8c61\u63d0\u4f9b\u4e86 Encode \u548c Decode \u65b9\u6cd5\uff0c\u7528\u4e8e\u5bf9\u6587\u4ef6\u5199\u5165\u548c\u4ece\u4e2d\u8bfb\u53d6 Go \u6570\u636e\u7ed3\u6784\u3002\u63d0\u793a\uff1a Encoder \u5b9e\u73b0\u4e86 Writer \u63a5\u53e3\uff0c\u540c\u6837 Decoder \u5b9e\u73b0\u4e86 Reader \u63a5\u53e3\u3002\u6211\u4eec\u5728 URLStore \u4e0a\u589e\u52a0\u4e00\u4e2a\u65b0\u7684 file \u5b57\u6bb5\uff08 *os.File \u7c7b\u578b\uff09\uff0c\u5b83\u662f\u7528\u4e8e\u8bfb\u5199\u5df2\u6253\u5f00\u6587\u4ef6\u7684\u53e5\u67c4\u3002 type URLStore struct { urls map [ string ] string mu sync . RWMutex file * os . File } \u6211\u4eec\u628a\u8fd9\u4e2a\u6587\u4ef6\u547d\u540d\u4e3a store.gob\uff0c\u5f53\u521d\u59cb\u5316 URLStore \u65f6\u5c06\u5176\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\uff1a var store = NewURLStore ( \"store.gob\" ) \u63a5\u7740\uff0c\u8c03\u6574 NewURLStore() \u51fd\u6570\uff1a func NewURLStore ( filename string ) * URLStore { s := & URLStore { urls : make ( map [ string ] string )} f , err := os . OpenFile ( filename , os . O_RDWR | os . O_CREATE | os . O_APPEND , 0644 ) if err != nil { log . Fatal ( \"URLStore:\" , err ) } s . file = f return s } \u73b0\u5728\uff0c\u66f4\u65b0\u540e\u7684 NewURLStore() \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u6587\u4ef6\u540d\u53c2\u6570\uff0c\u5b83\u4f1a\u6253\u5f00\u8be5\u6587\u4ef6\uff08\u89c1 12 \u7ae0 \uff09\uff0c\u5c06\u8fd4\u56de\u7684 *os.File \u4f5c\u4e3a file \u5b57\u6bb5\u7684\u503c\u5b58\u50a8\u5728 URLStore \u53d8\u91cf store \u4e2d\uff0c\u5373\u8fd9\u91cc\u7684\u672c\u5730\u53d8\u91cf s \u3002 \u5bf9 OpenFile() \u7684\u8c03\u7528\u53ef\u80fd\u4f1a\u5931\u8d25\uff08\u4f8b\u5982\u6587\u4ef6\u53ef\u80fd\u88ab\u5220\u9664\u6216\u6539\u540d\uff09\u3002\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef err \uff0c\u6ce8\u610f Go \u662f\u5982\u4f55\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\u7684\uff1a f , err := os . OpenFile ( filename , os . O_RDWR | os . O_CREATE | os . O_APPEND , 0644 ) if err != nil { log . Fatal ( \"URLStore:\" , err ) } \u5f53 err \u4e0d\u4e3a nil \uff0c\u8868\u793a\u786e\u5b9e\u53d1\u751f\u4e86\u9519\u8bef\uff0c\u90a3\u4e48\u8f93\u51fa\u4e00\u6761\u6d88\u606f\u5e76\u505c\u6b62\u7a0b\u5e8f\u6267\u884c\u3002\u8fd9\u662f\u5904\u7406\u9519\u8bef\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u9519\u8bef\u5e94\u8be5\u8fd4\u56de\u7ed9\u8c03\u7528\u51fd\u6570\uff0c\u4f46\u8fd9\u79cd\u68c0\u6d4b\u9519\u8bef\u7684\u6a21\u5f0f\u5728 Go \u4ee3\u7801\u4e2d\u4e5f\u5f88\u666e\u904d\u3002\u5728 } \u4e4b\u540e\u53ef\u4ee5\u786e\u5b9a\u6587\u4ef6\u88ab\u6210\u529f\u6253\u5f00\u4e86\u3002 \u6253\u5f00\u8be5\u6587\u4ef6\u65f6\u542f\u7528\u4e86\u5199\u5165\u6807\u5fd7\uff0c\u66f4\u7cbe\u786e\u5730\u8bf4\u662f\u201c\u8ffd\u52a0\u6a21\u5f0f\u201d\u3002\u6bcf\u5f53\u4e00\u5bf9\u65b0\u7684\u77ed/\u957f URL \u5728\u7a0b\u5e8f\u4e2d\u521b\u5efa\u540e\uff0c\u6211\u4eec\u901a\u8fc7 gob \u628a\u5b83\u5b58\u50a8\u5230\u6587\u4ef6 \"store.gob\" \u4e2d\u3002 \u4e3a\u8fbe\u5230\u76ee\u7684\uff0c\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u7ed3\u6784\u4f53\u7c7b\u578b record \uff1a type record struct { Key , URL string } \u4ee5\u53ca\u65b0\u7684 save() \u65b9\u6cd5\uff0c\u5c06\u7ed9\u5b9a\u7684\u952e\u548c URL \u7ec4\u6210 record \uff0c\u4ee5 gob \u7f16\u7801\u7684\u5f62\u5f0f\u5199\u5165\u78c1\u76d8\u3002 func ( s * URLStore ) save ( key , url string ) error { e := gob . NewEncoder ( s . file ) return e . Encode ( record { key , url }) } goto \u7a0b\u5e8f\u542f\u52a8\u65f6\uff0c\u78c1\u76d8\u4e0a\u5b58\u50a8\u7684\u6570\u636e\u5fc5\u987b\u8bfb\u53d6\u5230 URLStore \u7684 map \u4e2d\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u7f16\u5199 load \u65b9\u6cd5\uff1a func ( s * URLStore ) load () error { if _ , err := s . file . Seek ( 0 , 0 ); err != nil { return err } d := gob . NewDecoder ( s . file ) var err error for err == nil { var r record if err = d . Decode ( & r ); err == nil { s . Set ( r . Key , r . URL ) } } if err == io . EOF { return nil } return err } \u8fd9\u4e2a\u65b0\u7684 load() \u65b9\u6cd5\u4f1a\u5bfb\u5740 ( Seek ) \u5230\u6587\u4ef6\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u8bfb\u53d6\u5e76\u89e3\u7801 ( Decode ) \u6bcf\u4e00\u6761\u8bb0\u5f55 ( record )\uff0c\u7136\u540e\u7528 Set \u65b9\u6cd5\u5c06\u6570\u636e\u5b58\u50a8\u5230 map \u4e2d\u3002\u518d\u6b21\u6ce8\u610f\u65e0\u5904\u4e0d\u5728\u7684\u9519\u8bef\u5904\u7406\u6a21\u5f0f\u3002\u6587\u4ef6\u7684\u89e3\u7801\u7531\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u5b8c\u6210\uff0c\u53ea\u8981\u6ca1\u6709\u9519\u8bef\u5c31\u4f1a\u4e00\u76f4\u7ee7\u7eed\uff1a for err == nil { \u2026 } \u5982\u679c\u5f97\u5230\u4e86\u4e00\u4e2a\u9519\u8bef\uff0c\u53ef\u80fd\u662f\u521a\u89e3\u7801\u4e86\u6700\u540e\u4e00\u6761\u8bb0\u5f55\uff0c\u4e8e\u662f\u4ea7\u751f\u4e86 io.EOF (EndOfFile) \u9519\u8bef\u3002\u82e5\u5e76\u975e\u6b64\u79cd\u9519\u8bef\uff0c\u8868\u793a\u4ea7\u751f\u4e86\u89e3\u7801\u9519\u8bef\uff0c\u7528 return err \u6765\u8fd4\u56de\u5b83\u3002\u5bf9\u8be5\u65b9\u6cd5\u7684\u8c03\u7528\u5fc5\u987b\u52a0\u5165\u5230 NewURLStore() \u4e2d\uff1a func NewURLStore ( filename string ) * URLStore { s := & URLStore { urls : make ( map [ string ] string )} f , err := os . OpenFile ( filename , os . O_RDWR | os . O_CREATE | os . O_APPEND , 0644 ) if err != nil { log . Fatal ( \"Error opening URLStore:\" , err ) } s . file = f if err := s . load (); err != nil { log . Println ( \"Error loading data in URLStore:\" , err ) } return s } \u540c\u65f6\u5728 Put() \u65b9\u6cd5\u4e2d\uff0c\u5f53\u65b0\u7684 URL \u5bf9\u52a0\u5165\u5230 map \u4e2d\uff0c\u4e5f\u5e94\u8be5\u7acb\u5373\u5c06\u5b83\u4eec\u4fdd\u5b58\u5230\u6570\u636e\u6587\u4ef6\u4e2d\uff1a func ( s * URLStore ) Put ( url string ) string { for { key := genKey ( s . Count ()) if s . Set ( key , url ) { if err := s . save ( key , url ); err != nil { log . Println ( \"Error saving to URLStore:\" , err ) } return key } } panic ( \"shouldn\u2019t get here\" ) } \u7f16\u8bd1\u5e76\u6d4b\u8bd5\u8fd9\u7b2c\u4e8c\u4e2a\u7248\u672c\u7684\u7a0b\u5e8f\uff0c\u6216\u76f4\u63a5\u4f7f\u7528\u73b0\u6709\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u9a8c\u8bc1\u5173\u95ed\u670d\u52a1\u5668\uff08\u5728\u7ec8\u7aef\u7a97\u53e3\u53ef\u4ee5\u6309 CTRL+C\uff09\u5e76\u91cd\u542f\u540e\uff0c\u77ed URL \u4ecd\u7136\u6709\u6548\u3002goto \u7a0b\u5e8f\u7b2c\u4e00\u6b21\u542f\u52a8\u65f6\uff0c\u6587\u4ef6 store.gob \u8fd8\u4e0d\u5b58\u5728\uff0c\u56e0\u6b64\u5f53\u8f7d\u5165\u6570\u636e\u65f6\u4f1a\u5f97\u5230\u9519\u8bef\uff1a 2011/09/11 11:08:11 Error loading URLStore: open store.gob: The system cannot find the file specified. \u7ed3\u675f\u8fdb\u7a0b\u5e76\u91cd\u542f\u540e\uff0c\u5c31\u80fd\u6b63\u5e38\u5de5\u4f5c\u4e86\u3002\u6216\u8005\uff0c\u53ef\u4ee5\u5728 goto \u542f\u52a8\u524d\u5148\u521b\u5efa\u7a7a\u7684 store.gob \u6587\u4ef6\u3002 \u5907\u6ce8\uff1a \u5f53\u7b2c\u4e8c\u6b21\u542f\u52a8 goto \u65f6\uff0c\u53ef\u80fd\u4f1a\u4ea7\u751f\u9519\u8bef\uff1a Error loading URLStore: extra data in buffer \u8fd9\u662f\u7531\u4e8e gob \u662f\u57fa\u4e8e\u6d41\u7684\u534f\u8bae\uff0c\u5b83\u4e0d\u652f\u6301\u91cd\u65b0\u5f00\u59cb\u3002\u5728\u7248\u672c 4 \u4e2d\uff0c\u4f1a\u7528 json \u4f5c\u4e3a\u5b58\u50a8\u534f\u8bae\u6765\u8865\u6551\u6b64\u95ee\u9898\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7528\u6237\u754c\u9762\uff1aweb \u670d\u52a1\u7aef \u4e0b\u4e00\u8282\uff1a \u7528\u534f\u7a0b\u4f18\u5316\u6027\u80fd","title":"\u7248\u672c 2 - \u6dfb\u52a0\u6301\u4e45\u5316\u5b58\u50a8"},{"location":"19.5/#2-","text":"\u7b2c 2 \u4e2a\u7248\u672c\u7684\u4ee3\u7801 goto_v2 \u89c1 goto_v2 \u3002","title":"\u7248\u672c 2 - \u6dfb\u52a0\u6301\u4e45\u5316\u5b58\u50a8"},{"location":"19.5/#195-gob","text":"\uff08\u672c\u8282\u4ee3\u7801\u89c1 goto_v2/store.go \u548c goto_v2/main.go \u3002\uff09 \u5f53 goto \u8fdb\u7a0b\uff08\u76d1\u542c\u5728 8080 \u7aef\u53e3\u7684 web \u670d\u52a1\u5668\uff09\u7ec8\u6b62\uff0c\u8fd9\u8fdf\u65e9\u4f1a\u53d1\u751f\uff0c\u5185\u5b58 map \u4e2d\u7f29\u77ed\u7684 URL \u5c31\u4f1a\u4e22\u5931\u3002\u8981\u4fdd\u7559\u8fd9\u4e9b\u6570\u636e\uff0c\u5c31\u5f97\u5c06\u5176\u4fdd\u5b58\u5230\u78c1\u76d8\u6587\u4ef6\u4e2d\u3002\u6211\u4eec\u5c06\u4fee\u6539 URLStore() \uff0c\u4f7f\u5b83\u53ef\u4ee5\u4fdd\u5b58\u6570\u636e\u5230\u6587\u4ef6\uff0c\u4e14\u5728 goto \u542f\u52a8\u65f6\u8fd8\u539f\u8fd9\u4e9b\u6570\u636e\u3002\u4e3a\u6b64\u6211\u4eec\u4f7f\u7528 Go \u6807\u51c6\u5e93\u7684 encoding/gob \u5305\uff1a\u5b83\u7528\u4e8e\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\uff0c\u5c06\u6570\u636e\u7ed3\u6784\u8f6c\u6362\u4e3a\u5b57\u8282\u6570\u7ec4\uff08\u786e\u5207\u5730\u8bf4\u662f\u5207\u7247\uff09\uff0c\u53cd\u4e4b\u4ea6\u7136\uff08\u89c1 12.11 \u8282 \uff09\u3002 \u901a\u8fc7 gob \u5305\u7684 NewEncoder() \u548c NewDecoder() \u51fd\u6570\uff0c\u53ef\u4ee5\u6307\u5b9a\u6570\u636e\u8981\u5199\u5165\u6216\u8bfb\u53d6\u7684\u4f4d\u7f6e\u3002\u8fd4\u56de\u7684 Encoder \u548c Decoder \u5bf9\u8c61\u63d0\u4f9b\u4e86 Encode \u548c Decode \u65b9\u6cd5\uff0c\u7528\u4e8e\u5bf9\u6587\u4ef6\u5199\u5165\u548c\u4ece\u4e2d\u8bfb\u53d6 Go \u6570\u636e\u7ed3\u6784\u3002\u63d0\u793a\uff1a Encoder \u5b9e\u73b0\u4e86 Writer \u63a5\u53e3\uff0c\u540c\u6837 Decoder \u5b9e\u73b0\u4e86 Reader \u63a5\u53e3\u3002\u6211\u4eec\u5728 URLStore \u4e0a\u589e\u52a0\u4e00\u4e2a\u65b0\u7684 file \u5b57\u6bb5\uff08 *os.File \u7c7b\u578b\uff09\uff0c\u5b83\u662f\u7528\u4e8e\u8bfb\u5199\u5df2\u6253\u5f00\u6587\u4ef6\u7684\u53e5\u67c4\u3002 type URLStore struct { urls map [ string ] string mu sync . RWMutex file * os . File } \u6211\u4eec\u628a\u8fd9\u4e2a\u6587\u4ef6\u547d\u540d\u4e3a store.gob\uff0c\u5f53\u521d\u59cb\u5316 URLStore \u65f6\u5c06\u5176\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\uff1a var store = NewURLStore ( \"store.gob\" ) \u63a5\u7740\uff0c\u8c03\u6574 NewURLStore() \u51fd\u6570\uff1a func NewURLStore ( filename string ) * URLStore { s := & URLStore { urls : make ( map [ string ] string )} f , err := os . OpenFile ( filename , os . O_RDWR | os . O_CREATE | os . O_APPEND , 0644 ) if err != nil { log . Fatal ( \"URLStore:\" , err ) } s . file = f return s } \u73b0\u5728\uff0c\u66f4\u65b0\u540e\u7684 NewURLStore() \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u6587\u4ef6\u540d\u53c2\u6570\uff0c\u5b83\u4f1a\u6253\u5f00\u8be5\u6587\u4ef6\uff08\u89c1 12 \u7ae0 \uff09\uff0c\u5c06\u8fd4\u56de\u7684 *os.File \u4f5c\u4e3a file \u5b57\u6bb5\u7684\u503c\u5b58\u50a8\u5728 URLStore \u53d8\u91cf store \u4e2d\uff0c\u5373\u8fd9\u91cc\u7684\u672c\u5730\u53d8\u91cf s \u3002 \u5bf9 OpenFile() \u7684\u8c03\u7528\u53ef\u80fd\u4f1a\u5931\u8d25\uff08\u4f8b\u5982\u6587\u4ef6\u53ef\u80fd\u88ab\u5220\u9664\u6216\u6539\u540d\uff09\u3002\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef err \uff0c\u6ce8\u610f Go \u662f\u5982\u4f55\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\u7684\uff1a f , err := os . OpenFile ( filename , os . O_RDWR | os . O_CREATE | os . O_APPEND , 0644 ) if err != nil { log . Fatal ( \"URLStore:\" , err ) } \u5f53 err \u4e0d\u4e3a nil \uff0c\u8868\u793a\u786e\u5b9e\u53d1\u751f\u4e86\u9519\u8bef\uff0c\u90a3\u4e48\u8f93\u51fa\u4e00\u6761\u6d88\u606f\u5e76\u505c\u6b62\u7a0b\u5e8f\u6267\u884c\u3002\u8fd9\u662f\u5904\u7406\u9519\u8bef\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u9519\u8bef\u5e94\u8be5\u8fd4\u56de\u7ed9\u8c03\u7528\u51fd\u6570\uff0c\u4f46\u8fd9\u79cd\u68c0\u6d4b\u9519\u8bef\u7684\u6a21\u5f0f\u5728 Go \u4ee3\u7801\u4e2d\u4e5f\u5f88\u666e\u904d\u3002\u5728 } \u4e4b\u540e\u53ef\u4ee5\u786e\u5b9a\u6587\u4ef6\u88ab\u6210\u529f\u6253\u5f00\u4e86\u3002 \u6253\u5f00\u8be5\u6587\u4ef6\u65f6\u542f\u7528\u4e86\u5199\u5165\u6807\u5fd7\uff0c\u66f4\u7cbe\u786e\u5730\u8bf4\u662f\u201c\u8ffd\u52a0\u6a21\u5f0f\u201d\u3002\u6bcf\u5f53\u4e00\u5bf9\u65b0\u7684\u77ed/\u957f URL \u5728\u7a0b\u5e8f\u4e2d\u521b\u5efa\u540e\uff0c\u6211\u4eec\u901a\u8fc7 gob \u628a\u5b83\u5b58\u50a8\u5230\u6587\u4ef6 \"store.gob\" \u4e2d\u3002 \u4e3a\u8fbe\u5230\u76ee\u7684\uff0c\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u7ed3\u6784\u4f53\u7c7b\u578b record \uff1a type record struct { Key , URL string } \u4ee5\u53ca\u65b0\u7684 save() \u65b9\u6cd5\uff0c\u5c06\u7ed9\u5b9a\u7684\u952e\u548c URL \u7ec4\u6210 record \uff0c\u4ee5 gob \u7f16\u7801\u7684\u5f62\u5f0f\u5199\u5165\u78c1\u76d8\u3002 func ( s * URLStore ) save ( key , url string ) error { e := gob . NewEncoder ( s . file ) return e . Encode ( record { key , url }) } goto \u7a0b\u5e8f\u542f\u52a8\u65f6\uff0c\u78c1\u76d8\u4e0a\u5b58\u50a8\u7684\u6570\u636e\u5fc5\u987b\u8bfb\u53d6\u5230 URLStore \u7684 map \u4e2d\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u7f16\u5199 load \u65b9\u6cd5\uff1a func ( s * URLStore ) load () error { if _ , err := s . file . Seek ( 0 , 0 ); err != nil { return err } d := gob . NewDecoder ( s . file ) var err error for err == nil { var r record if err = d . Decode ( & r ); err == nil { s . Set ( r . Key , r . URL ) } } if err == io . EOF { return nil } return err } \u8fd9\u4e2a\u65b0\u7684 load() \u65b9\u6cd5\u4f1a\u5bfb\u5740 ( Seek ) \u5230\u6587\u4ef6\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u8bfb\u53d6\u5e76\u89e3\u7801 ( Decode ) \u6bcf\u4e00\u6761\u8bb0\u5f55 ( record )\uff0c\u7136\u540e\u7528 Set \u65b9\u6cd5\u5c06\u6570\u636e\u5b58\u50a8\u5230 map \u4e2d\u3002\u518d\u6b21\u6ce8\u610f\u65e0\u5904\u4e0d\u5728\u7684\u9519\u8bef\u5904\u7406\u6a21\u5f0f\u3002\u6587\u4ef6\u7684\u89e3\u7801\u7531\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u5b8c\u6210\uff0c\u53ea\u8981\u6ca1\u6709\u9519\u8bef\u5c31\u4f1a\u4e00\u76f4\u7ee7\u7eed\uff1a for err == nil { \u2026 } \u5982\u679c\u5f97\u5230\u4e86\u4e00\u4e2a\u9519\u8bef\uff0c\u53ef\u80fd\u662f\u521a\u89e3\u7801\u4e86\u6700\u540e\u4e00\u6761\u8bb0\u5f55\uff0c\u4e8e\u662f\u4ea7\u751f\u4e86 io.EOF (EndOfFile) \u9519\u8bef\u3002\u82e5\u5e76\u975e\u6b64\u79cd\u9519\u8bef\uff0c\u8868\u793a\u4ea7\u751f\u4e86\u89e3\u7801\u9519\u8bef\uff0c\u7528 return err \u6765\u8fd4\u56de\u5b83\u3002\u5bf9\u8be5\u65b9\u6cd5\u7684\u8c03\u7528\u5fc5\u987b\u52a0\u5165\u5230 NewURLStore() \u4e2d\uff1a func NewURLStore ( filename string ) * URLStore { s := & URLStore { urls : make ( map [ string ] string )} f , err := os . OpenFile ( filename , os . O_RDWR | os . O_CREATE | os . O_APPEND , 0644 ) if err != nil { log . Fatal ( \"Error opening URLStore:\" , err ) } s . file = f if err := s . load (); err != nil { log . Println ( \"Error loading data in URLStore:\" , err ) } return s } \u540c\u65f6\u5728 Put() \u65b9\u6cd5\u4e2d\uff0c\u5f53\u65b0\u7684 URL \u5bf9\u52a0\u5165\u5230 map \u4e2d\uff0c\u4e5f\u5e94\u8be5\u7acb\u5373\u5c06\u5b83\u4eec\u4fdd\u5b58\u5230\u6570\u636e\u6587\u4ef6\u4e2d\uff1a func ( s * URLStore ) Put ( url string ) string { for { key := genKey ( s . Count ()) if s . Set ( key , url ) { if err := s . save ( key , url ); err != nil { log . Println ( \"Error saving to URLStore:\" , err ) } return key } } panic ( \"shouldn\u2019t get here\" ) } \u7f16\u8bd1\u5e76\u6d4b\u8bd5\u8fd9\u7b2c\u4e8c\u4e2a\u7248\u672c\u7684\u7a0b\u5e8f\uff0c\u6216\u76f4\u63a5\u4f7f\u7528\u73b0\u6709\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u9a8c\u8bc1\u5173\u95ed\u670d\u52a1\u5668\uff08\u5728\u7ec8\u7aef\u7a97\u53e3\u53ef\u4ee5\u6309 CTRL+C\uff09\u5e76\u91cd\u542f\u540e\uff0c\u77ed URL \u4ecd\u7136\u6709\u6548\u3002goto \u7a0b\u5e8f\u7b2c\u4e00\u6b21\u542f\u52a8\u65f6\uff0c\u6587\u4ef6 store.gob \u8fd8\u4e0d\u5b58\u5728\uff0c\u56e0\u6b64\u5f53\u8f7d\u5165\u6570\u636e\u65f6\u4f1a\u5f97\u5230\u9519\u8bef\uff1a 2011/09/11 11:08:11 Error loading URLStore: open store.gob: The system cannot find the file specified. \u7ed3\u675f\u8fdb\u7a0b\u5e76\u91cd\u542f\u540e\uff0c\u5c31\u80fd\u6b63\u5e38\u5de5\u4f5c\u4e86\u3002\u6216\u8005\uff0c\u53ef\u4ee5\u5728 goto \u542f\u52a8\u524d\u5148\u521b\u5efa\u7a7a\u7684 store.gob \u6587\u4ef6\u3002 \u5907\u6ce8\uff1a \u5f53\u7b2c\u4e8c\u6b21\u542f\u52a8 goto \u65f6\uff0c\u53ef\u80fd\u4f1a\u4ea7\u751f\u9519\u8bef\uff1a Error loading URLStore: extra data in buffer \u8fd9\u662f\u7531\u4e8e gob \u662f\u57fa\u4e8e\u6d41\u7684\u534f\u8bae\uff0c\u5b83\u4e0d\u652f\u6301\u91cd\u65b0\u5f00\u59cb\u3002\u5728\u7248\u672c 4 \u4e2d\uff0c\u4f1a\u7528 json \u4f5c\u4e3a\u5b58\u50a8\u534f\u8bae\u6765\u8865\u6551\u6b64\u95ee\u9898\u3002","title":"19.5 \u6301\u4e45\u5316\u5b58\u50a8\uff1agob"},{"location":"19.5/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7528\u6237\u754c\u9762\uff1aweb \u670d\u52a1\u7aef \u4e0b\u4e00\u8282\uff1a \u7528\u534f\u7a0b\u4f18\u5316\u6027\u80fd","title":"\u94fe\u63a5"},{"location":"19.6/","text":"\u7248\u672c 3 - \u6dfb\u52a0\u534f\u7a0b \u00b6 \u7b2c 3 \u4e2a\u7248\u672c\u7684\u4ee3\u7801 goto_v3 \u89c1 goto_v3 \u3002 19.6 \u7528\u534f\u7a0b\u4f18\u5316\u6027\u80fd \u00b6 \u5982\u679c\u6709\u592a\u591a\u5ba2\u6237\u7aef\u540c\u65f6\u5c1d\u8bd5\u6dfb\u52a0 URL\uff0c\u7b2c 2 \u4e2a\u7248\u672c\u4f9d\u65e7\u5b58\u5728\u6027\u80fd\u95ee\u9898\u3002\u5f97\u76ca\u4e8e\u9501\u673a\u5236\uff0c\u6211\u4eec\u7684 map \u53ef\u4ee5\u5728\u5e76\u53d1\u8bbf\u95ee\u73af\u5883\u4e0b\u5b89\u5168\u5730\u66f4\u65b0\uff0c\u4f46\u6bcf\u6761\u65b0\u4ea7\u751f\u7684\u8bb0\u5f55\u90fd\u8981\u7acb\u5373\u5199\u5165\u78c1\u76d8\uff0c\u8fd9\u79cd\u673a\u5236\u6210\u4e3a\u4e86\u74f6\u9888\u3002\u5199\u5165\u64cd\u4f5c\u53ef\u80fd\u540c\u65f6\u53d1\u751f\uff0c\u6839\u636e\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u7684\u7279\u6027\uff0c\u53ef\u80fd\u4f1a\u4ea7\u751f\u6570\u636e\u635f\u574f\u3002\u5c31\u7b97\u4e0d\u4ea7\u751f\u5199\u5165\u51b2\u7a81\uff0c\u6bcf\u4e2a\u5ba2\u6237\u7aef\u5728 Put() \u51fd\u6570\u8fd4\u56de\u524d\uff0c\u5fc5\u987b\u7b49\u5f85\u6570\u636e\u5199\u5165\u78c1\u76d8\u3002\u56e0\u6b64\uff0c\u5728\u4e00\u4e2a I/O \u8d1f\u8f7d\u5f88\u9ad8\u7684\u7cfb\u7edf\u4e2d\uff0c\u5ba2\u6237\u7aef\u4e3a\u4e86\u5b8c\u6210 Add() \u8bf7\u6c42\uff0c\u5c06\u7b49\u5f85\u66f4\u957f\u7684\u4e0d\u5fc5\u8981\u7684\u65f6\u95f4\u3002 \u4e3a\u7f13\u89e3\u8be5\u95ee\u9898\uff0c\u5fc5\u987b\u5bf9 Put() \u548c\u5b58\u50a8\u8fdb\u7a0b*\u89e3\u8026*\uff1a\u6211\u4eec\u5c06\u4f7f\u7528 Go \u7684\u5e76\u53d1\u673a\u5236\u3002\u6211\u4eec\u4e0d\u518d\u5c06\u8bb0\u5f55\u76f4\u63a5\u5199\u5165\u78c1\u76d8\uff0c\u800c\u662f\u53d1\u9001\u5230\u4e00\u4e2a*\u901a\u9053*\u4e2d\uff0c\u5b83\u662f\u67d0\u79cd\u5f62\u5f0f\u7684\u7f13\u51b2\u533a\uff0c\u56e0\u800c\u53d1\u9001\u51fd\u6570\u4e0d\u5fc5\u7b49\u5f85\u5b83\u5b8c\u6210\u3002 \u4fdd\u5b58\u8fdb\u7a0b\u4f1a\u4ece\u8be5\u901a\u9053\u8bfb\u53d6\u6570\u636e\u5e76\u5199\u5165\u78c1\u76d8\u3002\u5b83\u662f\u4ee5 saveLoop() \u534f\u7a0b\u542f\u52a8\u7684\u72ec\u7acb\u7ebf\u7a0b\u3002\u73b0\u5728 main() \u548c saveLoop() \u5e76\u884c\u5730\u6267\u884c\uff0c\u4e0d\u4f1a\u518d\u53d1\u751f\u963b\u585e\u3002 \u5c06 URLStore \u7684 file \u5b57\u6bb5\u66ff\u6362\u4e3a record \u7c7b\u578b\u7684\u901a\u9053\uff1a save chan record \u3002 type URLStore struct { urls map [ string ] string mu sync . RWMutex save chan record } \u901a\u9053\u548c map \u4e00\u6837\uff0c\u5fc5\u987b\u7528 make() \u521b\u5efa\u3002\u6211\u4eec\u4f1a\u4ee5\u6b64\u4fee\u6539 NewURLStore() \u5de5\u5382\u51fd\u6570\uff0c\u5e76\u7ed9\u5b9a\u7f13\u51b2\u533a\u5927\u5c0f\u4e3a 1000\uff0c\u4f8b\u5982\uff1a save := make(chan record, saveQueueLength) \u3002\u4e3a\u89e3\u51b3\u6027\u80fd\u95ee\u9898\uff0c Put \u53ef\u4ee5\u53d1\u9001\u8bb0\u5f55 record \u5230\u5e26\u7f13\u51b2\u7684 save \u901a\u9053\uff1a func ( s * URLStore ) Put ( url string ) string { for { key := genKey ( s . Count ()) if s . Set ( key , url ) { s . save <- record { key , url } return key } } panic ( \"shouldn't get here\" ) } save \u901a\u9053\u7684\u53e6\u4e00\u7aef\u5fc5\u987b\u6709\u4e00\u4e2a\u63a5\u6536\u8005\uff1a\u65b0\u7684 saveLoop() \u65b9\u6cd5\u5728\u72ec\u7acb\u7684\u534f\u7a0b\u4e2d\u8fd0\u884c\uff0c\u5b83\u63a5\u6536 record \u503c\u5e76\u5c06\u5b83\u4eec\u5199\u5165\u5230\u6587\u4ef6\u3002 saveLoop() \u662f\u5728 NewURLStore() \u51fd\u6570\u4e2d\u7528 go \u5173\u952e\u5b57\u542f\u52a8\u7684\u3002\u73b0\u5728\uff0c\u53ef\u4ee5\u79fb\u9664\u4e0d\u5fc5\u8981\u7684\u6253\u5f00\u6587\u4ef6\u7684\u4ee3\u7801\u3002\u4ee5\u4e0b\u662f\u4fee\u6539\u540e\u7684 NewURLStore() \uff1a const saveQueueLength = 1000 func NewURLStore ( filename string ) * URLStore { s := & URLStore { urls : make ( map [ string ] string ), save : make ( chan record , saveQueueLength ), } if err := s . load ( filename ); err != nil { log . Println ( \"Error loading URLStore:\" , err ) } go s . saveLoop ( filename ) return s } \u4ee5\u4e0b\u662f saveLoop() \u65b9\u6cd5\u7684\u4ee3\u7801\uff1a func ( s * URLStore ) saveLoop ( filename string ) { f , err := os . Open ( filename , os . O_WRONLY | os . O_CREATE | os . O_APPEND , 0644 ) if err != nil { log . Fatal ( \"URLStore:\" , err ) } defer f . Close () e := gob . NewEncoder ( f ) for { // taking a record from the channel and encoding it r := <- s . save if err := e . Encode ( r ); err != nil { log . Println ( \"URLStore:\" , err ) } } } \u5728\u65e0\u9650\u5faa\u73af\u4e2d\uff0c\u8bb0\u5f55\u4ece save \u901a\u9053\u8bfb\u53d6\uff0c\u7136\u540e\u7f16\u7801\u5230\u6587\u4ef6\u4e2d\u3002 \u6211\u4eec\u5728 14 \u7ae0 \u6df1\u5165\u5b66\u4e60\u4e86\u534f\u7a0b\u548c\u901a\u9053\uff0c\u4f46\u5728\u8fd9\u91cc\u6211\u4eec\u89c1\u5230\u4e86\u5b9e\u7528\u7684\u6848\u4f8b\uff0c\u66f4\u597d\u5730\u7ba1\u7406\u7a0b\u5e8f\u7684\u4e0d\u540c\u90e8\u5206\u3002\u6ce8\u610f\u73b0\u5728 Encoder \u5bf9\u8c61\u53ea\u88ab\u521b\u5efa\u4e00\u6b21\uff0c\u800c\u4e0d\u662f\u6bcf\u6b21\u4fdd\u5b58\u65f6\u90fd\u521b\u5efa\uff0c\u8fd9\u4e5f\u53ef\u4ee5\u8282\u7701\u4e86\u4e00\u4e9b\u5185\u5b58\u548c\u8fd0\u7b97\u5904\u7406\u3002 \u8fd8\u6709\u4e00\u4e2a\u6539\u8fdb\u53ef\u4ee5\u4f7f goto \u66f4\u7075\u6d3b\uff1a\u6211\u4eec\u53ef\u4ee5\u5c06\u6587\u4ef6\u540d\u3001\u76d1\u542c\u5730\u5740\u548c\u4e3b\u673a\u540d\u5b9a\u4e49\u4e3a\u6807\u5fd7 (flag)\uff0c\u6765\u4ee3\u66ff\u5728\u7a0b\u5e8f\u4e2d\u786c\u7f16\u7801\u6216\u5b9a\u4e49\u5e38\u91cf\u3002\u8fd9\u6837\u5f53\u7a0b\u5e8f\u542f\u52a8\u65f6\uff0c\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u4e2d\u6307\u5b9a\u5b83\u4eec\u7684\u65b0\u503c\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u5c06\u91c7\u7528 flag \u7684\u9ed8\u8ba4\u503c\u3002\u8be5\u529f\u80fd\u6765\u81ea\u53e6\u4e00\u4e2a\u5305\uff0c\u6240\u4ee5\u9700\u8981 import \"flag\" \uff08\u8fd9\u4e2a\u5305\u7684\u66f4\u8be6\u7ec6\u4fe1\u606f\u89c1 12.4 \u8282 \uff09\u3002 \u5148\u521b\u5efa\u4e00\u4e9b\u5168\u5c40\u53d8\u91cf\u6765\u4fdd\u5b58 flag \u7684\u503c\uff1a var ( listenAddr = flag . String ( \"http\" , \":8080\" , \"http listen address\" ) dataFile = flag . String ( \"file\" , \"store.gob\" , \"data store file name\" ) hostname = flag . String ( \"host\" , \"localhost:8080\" , \"host name and port\" ) ) \u4e3a\u4e86\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u5fc5\u987b\u628a flag.Parse() \u6dfb\u52a0\u5230 main() \u51fd\u6570\u4e2d\uff0c\u5728 flag \u89e3\u6790\u540e\u624d\u80fd\u5b9e\u4f8b\u5316 URLStore \uff0c\u4e00\u65e6\u5f97\u77e5\u4e86 dataFile \u7684\u503c\uff08\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86 *dataFile \uff0c\u56e0\u4e3a flag \u662f\u6307\u9488\u7c7b\u578b\u5fc5\u987b\u89e3\u9664\u5f15\u7528\u6765\u83b7\u53d6\u503c\uff0c\u89c1 4.9 \u8282 \uff09\uff1a var store * URLStore func main () { flag . Parse () store = NewURLStore ( * dataFile ) http . HandleFunc ( \"/\" , Redirect ) http . HandleFunc ( \"/add\" , Add ) http . ListenAndServe ( * listenAddr , nil ) } \u73b0\u5728 Add() \u5904\u7406\u51fd\u6570\u4e2d\u987b\u7528 *hostname \u66ff\u6362 localhost:8080 \uff1a fmt . Fprintf ( w , \"http://%s/%s\" , * hostname , key ) \u7f16\u8bd1\u6216\u76f4\u63a5\u4f7f\u7528\u73b0\u6709\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u6d4b\u8bd5\u7b2c 3 \u4e2a\u7248\u672c\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6301\u4e45\u5316\u5b58\u50a8\uff1agob \u4e0b\u4e00\u8282\uff1a \u4ee5 json \u683c\u5f0f\u5b58\u50a8","title":"\u7248\u672c 3 - \u6dfb\u52a0\u534f\u7a0b"},{"location":"19.6/#3-","text":"\u7b2c 3 \u4e2a\u7248\u672c\u7684\u4ee3\u7801 goto_v3 \u89c1 goto_v3 \u3002","title":"\u7248\u672c 3 - \u6dfb\u52a0\u534f\u7a0b"},{"location":"19.6/#196","text":"\u5982\u679c\u6709\u592a\u591a\u5ba2\u6237\u7aef\u540c\u65f6\u5c1d\u8bd5\u6dfb\u52a0 URL\uff0c\u7b2c 2 \u4e2a\u7248\u672c\u4f9d\u65e7\u5b58\u5728\u6027\u80fd\u95ee\u9898\u3002\u5f97\u76ca\u4e8e\u9501\u673a\u5236\uff0c\u6211\u4eec\u7684 map \u53ef\u4ee5\u5728\u5e76\u53d1\u8bbf\u95ee\u73af\u5883\u4e0b\u5b89\u5168\u5730\u66f4\u65b0\uff0c\u4f46\u6bcf\u6761\u65b0\u4ea7\u751f\u7684\u8bb0\u5f55\u90fd\u8981\u7acb\u5373\u5199\u5165\u78c1\u76d8\uff0c\u8fd9\u79cd\u673a\u5236\u6210\u4e3a\u4e86\u74f6\u9888\u3002\u5199\u5165\u64cd\u4f5c\u53ef\u80fd\u540c\u65f6\u53d1\u751f\uff0c\u6839\u636e\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u7684\u7279\u6027\uff0c\u53ef\u80fd\u4f1a\u4ea7\u751f\u6570\u636e\u635f\u574f\u3002\u5c31\u7b97\u4e0d\u4ea7\u751f\u5199\u5165\u51b2\u7a81\uff0c\u6bcf\u4e2a\u5ba2\u6237\u7aef\u5728 Put() \u51fd\u6570\u8fd4\u56de\u524d\uff0c\u5fc5\u987b\u7b49\u5f85\u6570\u636e\u5199\u5165\u78c1\u76d8\u3002\u56e0\u6b64\uff0c\u5728\u4e00\u4e2a I/O \u8d1f\u8f7d\u5f88\u9ad8\u7684\u7cfb\u7edf\u4e2d\uff0c\u5ba2\u6237\u7aef\u4e3a\u4e86\u5b8c\u6210 Add() \u8bf7\u6c42\uff0c\u5c06\u7b49\u5f85\u66f4\u957f\u7684\u4e0d\u5fc5\u8981\u7684\u65f6\u95f4\u3002 \u4e3a\u7f13\u89e3\u8be5\u95ee\u9898\uff0c\u5fc5\u987b\u5bf9 Put() \u548c\u5b58\u50a8\u8fdb\u7a0b*\u89e3\u8026*\uff1a\u6211\u4eec\u5c06\u4f7f\u7528 Go \u7684\u5e76\u53d1\u673a\u5236\u3002\u6211\u4eec\u4e0d\u518d\u5c06\u8bb0\u5f55\u76f4\u63a5\u5199\u5165\u78c1\u76d8\uff0c\u800c\u662f\u53d1\u9001\u5230\u4e00\u4e2a*\u901a\u9053*\u4e2d\uff0c\u5b83\u662f\u67d0\u79cd\u5f62\u5f0f\u7684\u7f13\u51b2\u533a\uff0c\u56e0\u800c\u53d1\u9001\u51fd\u6570\u4e0d\u5fc5\u7b49\u5f85\u5b83\u5b8c\u6210\u3002 \u4fdd\u5b58\u8fdb\u7a0b\u4f1a\u4ece\u8be5\u901a\u9053\u8bfb\u53d6\u6570\u636e\u5e76\u5199\u5165\u78c1\u76d8\u3002\u5b83\u662f\u4ee5 saveLoop() \u534f\u7a0b\u542f\u52a8\u7684\u72ec\u7acb\u7ebf\u7a0b\u3002\u73b0\u5728 main() \u548c saveLoop() \u5e76\u884c\u5730\u6267\u884c\uff0c\u4e0d\u4f1a\u518d\u53d1\u751f\u963b\u585e\u3002 \u5c06 URLStore \u7684 file \u5b57\u6bb5\u66ff\u6362\u4e3a record \u7c7b\u578b\u7684\u901a\u9053\uff1a save chan record \u3002 type URLStore struct { urls map [ string ] string mu sync . RWMutex save chan record } \u901a\u9053\u548c map \u4e00\u6837\uff0c\u5fc5\u987b\u7528 make() \u521b\u5efa\u3002\u6211\u4eec\u4f1a\u4ee5\u6b64\u4fee\u6539 NewURLStore() \u5de5\u5382\u51fd\u6570\uff0c\u5e76\u7ed9\u5b9a\u7f13\u51b2\u533a\u5927\u5c0f\u4e3a 1000\uff0c\u4f8b\u5982\uff1a save := make(chan record, saveQueueLength) \u3002\u4e3a\u89e3\u51b3\u6027\u80fd\u95ee\u9898\uff0c Put \u53ef\u4ee5\u53d1\u9001\u8bb0\u5f55 record \u5230\u5e26\u7f13\u51b2\u7684 save \u901a\u9053\uff1a func ( s * URLStore ) Put ( url string ) string { for { key := genKey ( s . Count ()) if s . Set ( key , url ) { s . save <- record { key , url } return key } } panic ( \"shouldn't get here\" ) } save \u901a\u9053\u7684\u53e6\u4e00\u7aef\u5fc5\u987b\u6709\u4e00\u4e2a\u63a5\u6536\u8005\uff1a\u65b0\u7684 saveLoop() \u65b9\u6cd5\u5728\u72ec\u7acb\u7684\u534f\u7a0b\u4e2d\u8fd0\u884c\uff0c\u5b83\u63a5\u6536 record \u503c\u5e76\u5c06\u5b83\u4eec\u5199\u5165\u5230\u6587\u4ef6\u3002 saveLoop() \u662f\u5728 NewURLStore() \u51fd\u6570\u4e2d\u7528 go \u5173\u952e\u5b57\u542f\u52a8\u7684\u3002\u73b0\u5728\uff0c\u53ef\u4ee5\u79fb\u9664\u4e0d\u5fc5\u8981\u7684\u6253\u5f00\u6587\u4ef6\u7684\u4ee3\u7801\u3002\u4ee5\u4e0b\u662f\u4fee\u6539\u540e\u7684 NewURLStore() \uff1a const saveQueueLength = 1000 func NewURLStore ( filename string ) * URLStore { s := & URLStore { urls : make ( map [ string ] string ), save : make ( chan record , saveQueueLength ), } if err := s . load ( filename ); err != nil { log . Println ( \"Error loading URLStore:\" , err ) } go s . saveLoop ( filename ) return s } \u4ee5\u4e0b\u662f saveLoop() \u65b9\u6cd5\u7684\u4ee3\u7801\uff1a func ( s * URLStore ) saveLoop ( filename string ) { f , err := os . Open ( filename , os . O_WRONLY | os . O_CREATE | os . O_APPEND , 0644 ) if err != nil { log . Fatal ( \"URLStore:\" , err ) } defer f . Close () e := gob . NewEncoder ( f ) for { // taking a record from the channel and encoding it r := <- s . save if err := e . Encode ( r ); err != nil { log . Println ( \"URLStore:\" , err ) } } } \u5728\u65e0\u9650\u5faa\u73af\u4e2d\uff0c\u8bb0\u5f55\u4ece save \u901a\u9053\u8bfb\u53d6\uff0c\u7136\u540e\u7f16\u7801\u5230\u6587\u4ef6\u4e2d\u3002 \u6211\u4eec\u5728 14 \u7ae0 \u6df1\u5165\u5b66\u4e60\u4e86\u534f\u7a0b\u548c\u901a\u9053\uff0c\u4f46\u5728\u8fd9\u91cc\u6211\u4eec\u89c1\u5230\u4e86\u5b9e\u7528\u7684\u6848\u4f8b\uff0c\u66f4\u597d\u5730\u7ba1\u7406\u7a0b\u5e8f\u7684\u4e0d\u540c\u90e8\u5206\u3002\u6ce8\u610f\u73b0\u5728 Encoder \u5bf9\u8c61\u53ea\u88ab\u521b\u5efa\u4e00\u6b21\uff0c\u800c\u4e0d\u662f\u6bcf\u6b21\u4fdd\u5b58\u65f6\u90fd\u521b\u5efa\uff0c\u8fd9\u4e5f\u53ef\u4ee5\u8282\u7701\u4e86\u4e00\u4e9b\u5185\u5b58\u548c\u8fd0\u7b97\u5904\u7406\u3002 \u8fd8\u6709\u4e00\u4e2a\u6539\u8fdb\u53ef\u4ee5\u4f7f goto \u66f4\u7075\u6d3b\uff1a\u6211\u4eec\u53ef\u4ee5\u5c06\u6587\u4ef6\u540d\u3001\u76d1\u542c\u5730\u5740\u548c\u4e3b\u673a\u540d\u5b9a\u4e49\u4e3a\u6807\u5fd7 (flag)\uff0c\u6765\u4ee3\u66ff\u5728\u7a0b\u5e8f\u4e2d\u786c\u7f16\u7801\u6216\u5b9a\u4e49\u5e38\u91cf\u3002\u8fd9\u6837\u5f53\u7a0b\u5e8f\u542f\u52a8\u65f6\uff0c\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u4e2d\u6307\u5b9a\u5b83\u4eec\u7684\u65b0\u503c\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u5c06\u91c7\u7528 flag \u7684\u9ed8\u8ba4\u503c\u3002\u8be5\u529f\u80fd\u6765\u81ea\u53e6\u4e00\u4e2a\u5305\uff0c\u6240\u4ee5\u9700\u8981 import \"flag\" \uff08\u8fd9\u4e2a\u5305\u7684\u66f4\u8be6\u7ec6\u4fe1\u606f\u89c1 12.4 \u8282 \uff09\u3002 \u5148\u521b\u5efa\u4e00\u4e9b\u5168\u5c40\u53d8\u91cf\u6765\u4fdd\u5b58 flag \u7684\u503c\uff1a var ( listenAddr = flag . String ( \"http\" , \":8080\" , \"http listen address\" ) dataFile = flag . String ( \"file\" , \"store.gob\" , \"data store file name\" ) hostname = flag . String ( \"host\" , \"localhost:8080\" , \"host name and port\" ) ) \u4e3a\u4e86\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u5fc5\u987b\u628a flag.Parse() \u6dfb\u52a0\u5230 main() \u51fd\u6570\u4e2d\uff0c\u5728 flag \u89e3\u6790\u540e\u624d\u80fd\u5b9e\u4f8b\u5316 URLStore \uff0c\u4e00\u65e6\u5f97\u77e5\u4e86 dataFile \u7684\u503c\uff08\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86 *dataFile \uff0c\u56e0\u4e3a flag \u662f\u6307\u9488\u7c7b\u578b\u5fc5\u987b\u89e3\u9664\u5f15\u7528\u6765\u83b7\u53d6\u503c\uff0c\u89c1 4.9 \u8282 \uff09\uff1a var store * URLStore func main () { flag . Parse () store = NewURLStore ( * dataFile ) http . HandleFunc ( \"/\" , Redirect ) http . HandleFunc ( \"/add\" , Add ) http . ListenAndServe ( * listenAddr , nil ) } \u73b0\u5728 Add() \u5904\u7406\u51fd\u6570\u4e2d\u987b\u7528 *hostname \u66ff\u6362 localhost:8080 \uff1a fmt . Fprintf ( w , \"http://%s/%s\" , * hostname , key ) \u7f16\u8bd1\u6216\u76f4\u63a5\u4f7f\u7528\u73b0\u6709\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u6d4b\u8bd5\u7b2c 3 \u4e2a\u7248\u672c\u3002","title":"19.6 \u7528\u534f\u7a0b\u4f18\u5316\u6027\u80fd"},{"location":"19.6/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u6301\u4e45\u5316\u5b58\u50a8\uff1agob \u4e0b\u4e00\u8282\uff1a \u4ee5 json \u683c\u5f0f\u5b58\u50a8","title":"\u94fe\u63a5"},{"location":"19.7/","text":"\u7248\u672c 4 - \u7528 JSON \u6301\u4e45\u5316\u5b58\u50a8 \u00b6 \u7b2c 4 \u4e2a\u7248\u672c\u7684\u4ee3\u7801 goto_v4 \u89c1 goto_v4 \u3002 19.7 \u4ee5 json \u683c\u5f0f\u5b58\u50a8 \u00b6 \u5982\u679c\u4f60\u662f\u4e2a\u654f\u9510\u7684\u6d4b\u8bd5\u8005\u4e5f\u8bb8\u5df2\u7ecf\u6ce8\u610f\u5230\u4e86\uff0c\u5f53 goto \u7a0b\u5e8f\u542f\u52a8 2 \u6b21\uff0c\u7b2c 2 \u6b21\u542f\u52a8\u540e\u80fd\u8bfb\u53d6\u77ed URL \u4e14\u5b8c\u7f8e\u5730\u5de5\u4f5c\u3002\u7136\u800c\u4ece\u7b2c 3 \u6b21\u5f00\u59cb\uff0c\u4f1a\u5f97\u5230\u9519\u8bef\uff1a Error loading URLStore: extra data in buffer \u8fd9\u662f\u7531\u4e8e gob \u662f\u57fa\u4e8e\u6d41\u7684\u534f\u8bae\uff0c\u5b83\u4e0d\u652f\u6301\u91cd\u65b0\u5f00\u59cb\u3002\u4e3a\u8865\u6551\u8be5\u95ee\u9898\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 json \u4f5c\u4e3a\u5b58\u50a8\u534f\u8bae\uff08\u89c1 12.9 \u8282 \uff09\uff0c\u5b83\u4ee5\u7eaf\u6587\u672c\u5f62\u5f0f\u5b58\u50a8\u6570\u636e\uff0c\u56e0\u6b64\u4e5f\u53ef\u4ee5\u88ab\u975e Go \u8bed\u8a00\u7f16\u5199\u7684\u8fdb\u7a0b\u8bfb\u53d6\u3002\u540c\u65f6\u4e5f\u663e\u793a\u4e86\u66f4\u6362\u4e00\u79cd\u4e0d\u540c\u7684\u6301\u4e45\u5316\u534f\u8bae\u662f\u591a\u4e48\u7b80\u5355\uff0c\u56e0\u4e3a\u4e0e\u5b58\u50a8\u6253\u4ea4\u9053\u7684\u4ee3\u7801\u88ab\u6e05\u6670\u5730\u9694\u79bb\u5728 2 \u4e2a\u65b9\u6cd5\u4e2d\uff0c\u5373 load() \u548c saveLoop() \u3002 \u4ece\u521b\u5efa\u65b0\u7684\u7a7a\u6587\u4ef6 store.json \u5f00\u59cb\uff0c\u66f4\u6539 main.go \u4e2d\u58f0\u660e\u6587\u4ef6\u540d\u53d8\u91cf\u7684\u90a3\u4e00\u884c\uff1a var dataFile = flag . String ( \"file\" , \"store.json\" , \"data store file name\" ) \u5728 store.go \u4e2d\u5bfc\u5165 json \u53d6\u4ee3 gob \u3002\u7136\u540e\u5728 saveLoop() \u4e2d\u552f\u4e00\u9700\u8981\u88ab\u4fee\u6539\u7684\u884c\uff1a e := gob . NewEncoder ( f ) \u66f4\u6539\u4e3a\uff1a e := json . NewEncoder ( f ) \u7c7b\u4f3c\u7684\uff0c\u5728 load \u65b9\u6cd5\u4e2d\uff1a d := gob . NewDecoder ( f ) \u4fee\u6539\u4e3a\uff1a d := json . NewDecoder ( f ) \u8fd9\u5c31\u662f\u6240\u6709\u8981\u6539\u52a8\u7684\u5730\u65b9\uff01\u7f16\u8bd1\uff0c\u542f\u52a8\u5e76\u6d4b\u8bd5\uff0c\u4f60\u4f1a\u53d1\u73b0\u4e4b\u524d\u7684\u9519\u8bef\u4e0d\u4f1a\u518d\u53d1\u751f\u4e86\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7528\u534f\u7a0b\u4f18\u5316\u6027\u80fd \u4e0b\u4e00\u8282\uff1a \u591a\u670d\u52a1\u5668\u5904\u7406\u67b6\u6784","title":"\u7248\u672c 4 - \u7528 JSON \u6301\u4e45\u5316\u5b58\u50a8"},{"location":"19.7/#4-json","text":"\u7b2c 4 \u4e2a\u7248\u672c\u7684\u4ee3\u7801 goto_v4 \u89c1 goto_v4 \u3002","title":"\u7248\u672c 4 - \u7528 JSON \u6301\u4e45\u5316\u5b58\u50a8"},{"location":"19.7/#197-json","text":"\u5982\u679c\u4f60\u662f\u4e2a\u654f\u9510\u7684\u6d4b\u8bd5\u8005\u4e5f\u8bb8\u5df2\u7ecf\u6ce8\u610f\u5230\u4e86\uff0c\u5f53 goto \u7a0b\u5e8f\u542f\u52a8 2 \u6b21\uff0c\u7b2c 2 \u6b21\u542f\u52a8\u540e\u80fd\u8bfb\u53d6\u77ed URL \u4e14\u5b8c\u7f8e\u5730\u5de5\u4f5c\u3002\u7136\u800c\u4ece\u7b2c 3 \u6b21\u5f00\u59cb\uff0c\u4f1a\u5f97\u5230\u9519\u8bef\uff1a Error loading URLStore: extra data in buffer \u8fd9\u662f\u7531\u4e8e gob \u662f\u57fa\u4e8e\u6d41\u7684\u534f\u8bae\uff0c\u5b83\u4e0d\u652f\u6301\u91cd\u65b0\u5f00\u59cb\u3002\u4e3a\u8865\u6551\u8be5\u95ee\u9898\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 json \u4f5c\u4e3a\u5b58\u50a8\u534f\u8bae\uff08\u89c1 12.9 \u8282 \uff09\uff0c\u5b83\u4ee5\u7eaf\u6587\u672c\u5f62\u5f0f\u5b58\u50a8\u6570\u636e\uff0c\u56e0\u6b64\u4e5f\u53ef\u4ee5\u88ab\u975e Go \u8bed\u8a00\u7f16\u5199\u7684\u8fdb\u7a0b\u8bfb\u53d6\u3002\u540c\u65f6\u4e5f\u663e\u793a\u4e86\u66f4\u6362\u4e00\u79cd\u4e0d\u540c\u7684\u6301\u4e45\u5316\u534f\u8bae\u662f\u591a\u4e48\u7b80\u5355\uff0c\u56e0\u4e3a\u4e0e\u5b58\u50a8\u6253\u4ea4\u9053\u7684\u4ee3\u7801\u88ab\u6e05\u6670\u5730\u9694\u79bb\u5728 2 \u4e2a\u65b9\u6cd5\u4e2d\uff0c\u5373 load() \u548c saveLoop() \u3002 \u4ece\u521b\u5efa\u65b0\u7684\u7a7a\u6587\u4ef6 store.json \u5f00\u59cb\uff0c\u66f4\u6539 main.go \u4e2d\u58f0\u660e\u6587\u4ef6\u540d\u53d8\u91cf\u7684\u90a3\u4e00\u884c\uff1a var dataFile = flag . String ( \"file\" , \"store.json\" , \"data store file name\" ) \u5728 store.go \u4e2d\u5bfc\u5165 json \u53d6\u4ee3 gob \u3002\u7136\u540e\u5728 saveLoop() \u4e2d\u552f\u4e00\u9700\u8981\u88ab\u4fee\u6539\u7684\u884c\uff1a e := gob . NewEncoder ( f ) \u66f4\u6539\u4e3a\uff1a e := json . NewEncoder ( f ) \u7c7b\u4f3c\u7684\uff0c\u5728 load \u65b9\u6cd5\u4e2d\uff1a d := gob . NewDecoder ( f ) \u4fee\u6539\u4e3a\uff1a d := json . NewDecoder ( f ) \u8fd9\u5c31\u662f\u6240\u6709\u8981\u6539\u52a8\u7684\u5730\u65b9\uff01\u7f16\u8bd1\uff0c\u542f\u52a8\u5e76\u6d4b\u8bd5\uff0c\u4f60\u4f1a\u53d1\u73b0\u4e4b\u524d\u7684\u9519\u8bef\u4e0d\u4f1a\u518d\u53d1\u751f\u4e86\u3002","title":"19.7 \u4ee5 json \u683c\u5f0f\u5b58\u50a8"},{"location":"19.7/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u7528\u534f\u7a0b\u4f18\u5316\u6027\u80fd \u4e0b\u4e00\u8282\uff1a \u591a\u670d\u52a1\u5668\u5904\u7406\u67b6\u6784","title":"\u94fe\u63a5"},{"location":"19.8/","text":"\u7248\u672c 5 - \u5206\u5e03\u5f0f\u7a0b\u5e8f \u00b6 \u7b2c 5 \u4e2a\u7248\u672c\u7684\u4ee3\u7801 goto_v5 \uff08 19.8 \u8282 \u548c 19.9 \u8282 \u8ba8\u8bba\uff09\u89c1 goto_v5 \u3002\u8be5\u7248\u672c\u4ecd\u7136\u57fa\u4e8e gob \u5b58\u50a8\uff0c\u4f46\u5f88\u5bb9\u6613\u8c03\u6574\u4e3a\u4f7f\u7528 json\uff0c\u6b63\u5982\u7248\u672c 4 \u6f14\u793a\u7684\u90a3\u6837\u3002 19.8 \u591a\u670d\u52a1\u5668\u5904\u7406\u67b6\u6784 \u00b6 \u76ee\u524d\u4e3a\u6b62 goto \u4ee5\u5355\u7ebf\u7a0b\u8fd0\u884c\uff0c\u4f46\u5373\u4f7f\u7528\u534f\u7a0b\uff0c\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u8fd0\u884c\u7684\u5355\u4e00\u8fdb\u7a0b\uff0c\u4e5f\u53ea\u80fd\u4e3a\u4e00\u5b9a\u6570\u91cf\u7684\u5e76\u53d1\u8bf7\u6c42\u63d0\u4f9b\u670d\u52a1\u3002\u4e00\u4e2a\u7f29\u77ed\u7f51\u5740\u670d\u52a1\uff0c\u76f8\u5bf9\u4e8e Add() \uff08\u7528 Put() \u5199\u5165\uff09\uff0c\u901a\u5e38 Redirect() \u670d\u52a1\uff08\u7528 Get() \u8bfb\u53d6\uff09\u8981\u591a\u5f97\u591a\u3002\u56e0\u6b64\u6211\u4eec\u5e94\u8be5\u53ef\u4ee5\u521b\u5efa\u4efb\u610f\u6570\u91cf\u7684\u53ea\u8bfb\u7684\u4ece (slave) \u670d\u52a1\u5668\uff0c\u63d0\u4f9b\u670d\u52a1\u5e76\u7f13\u5b58 Get() \u65b9\u6cd5\u8c03\u7528\u7684\u7ed3\u679c\uff0c\u5c06 Put() \u8bf7\u6c42\u8f6c\u53d1\u7ed9\u4e3b (master) \u670d\u52a1\u5668\uff0c\u7c7b\u4f3c\u5982\u4e0b\u67b6\u6784\uff1a \u5bf9\u4e8e slave \u8fdb\u7a0b\uff0c\u8981\u5728\u7f51\u7edc\u4e0a\u8fd0\u884c goto \u5e94\u7528\u7684\u4e00\u4e2a master \u8282\u70b9\u5b9e\u4f8b\uff0c\u5b83\u4eec\u5fc5\u987b\u80fd\u76f8\u4e92\u901a\u4fe1\u3002Go \u7684 rpc \u5305\u4e3a\u8de8\u8d8a\u7f51\u7edc\u53d1\u8d77\u51fd\u6570\u8c03\u7528\u63d0\u4f9b\u4e86\u4fbf\u6377\u7684\u9014\u5f84\u3002\u8fd9\u91cc\u5c06\u628a URLStore \u53d8\u4e3a RPC \u670d\u52a1\uff08 15.9 \u8282 \u8be6\u7ec6\u8ba8\u8bba\u4e86 rpc \u5305\uff09\u3002slave \u8fdb\u7a0b\u5c06\u5e94\u5bf9 Get() \u8bf7\u6c42\u4ee5\u4ea4\u4ed8\u957f URL\u3002\u5f53\u4e00\u4e2a\u957f URL \u8981\u88ab\u8f6c\u6362\u4e3a\u7f29\u77ed\u7248\u672c\uff08\u4f7f\u7528 Put() \u65b9\u6cd5\uff09\u65f6\uff0c\u5b83\u4eec\u901a\u8fc7 rpc \u8fde\u63a5\u628a\u4efb\u52a1\u59d4\u6258\u7ed9 master \u8fdb\u7a0b\uff0c\u56e0\u6b64\u53ea\u6709 master \u8282\u70b9\u4f1a\u5199\u5165\u6570\u636e\u6587\u4ef6\u3002 \u622a\u81f3\u76ee\u524d URLStore \u4e0a\u57fa\u672c\u7684 Get() \u548c Put() \u65b9\u6cd5\u5177\u6709\u5982\u4e0b\u7b7e\u540d\uff1a func ( s * URLStore ) Get ( key string ) string func ( s * URLStore ) Put ( url string ) string \u800c RPC \u8c03\u7528\u4ec5\u80fd\u4f7f\u7528\u5982\u4e0b\u5f62\u5f0f\u7684\u65b9\u6cd5\uff08 t \u662f T \u7c7b\u578b\u7684\u503c\uff09\uff1a func ( t T ) Name ( args * ArgType , reply * ReplyType ) error \u8981\u4f7f URLStore \u6210\u4e3a RPC \u670d\u52a1\uff0c\u9700\u8981\u4fee\u6539 Put() \u548c Get() \u65b9\u6cd5\u4f7f\u5b83\u4eec\u7b26\u5408\u4e0a\u8ff0\u51fd\u6570\u7b7e\u540d\u3002\u4ee5\u4e0b\u662f\u4fee\u6539\u540e\u7684\u7b7e\u540d\uff1a func ( s * URLStore ) Get ( key , url * string ) error func ( s * URLStore ) Put ( url , key * string ) error Get() \u4ee3\u7801\u53d8\u66f4\u4e3a\uff1a func ( s * URLStore ) Get ( key , url * string ) error { s . mu . RLock () defer s . mu . RUnlock () if u , ok := s . urls [ * key ]; ok { * url = u return nil } return errors . New ( \"key not found\" ) } \u73b0\u5728\uff0c\u952e\u548c\u957f URL \u90fd\u53d8\u6210\u4e86\u6307\u9488\uff0c\u5fc5\u987b\u52a0\u4e0a\u524d\u7f00 * \u6765\u53d6\u5f97\u5b83\u4eec\u7684\u503c\uff0c\u4f8b\u5982 *key \u8fd9\u79cd\u5f62\u5f0f\u3002 u \u662f\u4e00\u4e2a\u503c\uff0c\u53ef\u4ee5\u7528 *url = u \u6765\u5c06\u5176\u8d4b\u503c\u7ed9\u6307\u9488\u3002 \u63a5\u7740\u5bf9 Put() \u4ee3\u7801\u505a\u540c\u6837\u7684\u6539\u52a8\uff1a func ( s * URLStore ) Put ( url , key * string ) error { for { * key = genKey ( s . Count ()) if err := s . Set ( key , url ); err == nil { break } } if s . save != nil { s . save <- record { * key , * url } } return nil } Put() \u8c03\u7528 Set() \uff0c\u7531\u4e8e\u540e\u8005\u4e5f\u8981\u505a\u8c03\u6574\uff0c key \u548c url \u53c2\u6570\u73b0\u5728\u662f\u6307\u9488\u7c7b\u578b\uff0c\u8fd8\u5fc5\u987b\u8fd4\u56de error \u53d6\u4ee3 boolean \uff1a func ( s * URLStore ) Set ( key , url * string ) error { s . mu . Lock () defer s . mu . Unlock () if _ , present := s . urls [ * key ]; present { return errors . New ( \"key already exists\" ) } s . urls [ * key ] = * url return nil } \u540c\u6837\uff0c\u5f53\u4ece load() \u8c03\u7528 Set() \u65f6\uff0c\u4e5f\u5fc5\u987b\u505a\u8c03\u6574\uff1a s . Set ( & r . Key , & r . URL ) \u8fd8\u5fc5\u987b\u4fee\u6539 HTTP \u5904\u7406\u51fd\u6570\u4ee5\u9002\u5e94 URLStore \u4e0a\u7684\u66f4\u6539\u3002 Redirect() \u5904\u7406\u51fd\u6570\u73b0\u5728\u8fd4\u56de URLStore \u7ed9\u51fa\u9519\u8bef\u7684\u5b57\u7b26\u4e32\u5f62\u5f0f\uff1a func Redirect ( w http . ResponseWriter , r * http . Request ) { key := r . URL . Path [ 1 :] var url string if err := store . Get ( & key , & url ); err != nil { http . Error ( w , err . Error (), http . StatusInternalServerError ) return } http . Redirect ( w , r , url , http . StatusFound ) } Add() \u5904\u7406\u51fd\u6570\u4e5f\u4ee5\u57fa\u672c\u76f8\u540c\u7684\u65b9\u5f0f\u4fee\u6539\uff1a func Add ( w http . ResponseWriter , r * http . Request ) { url := r . FormValue ( \"url\" ) if url == \"\" { fmt . Fprint ( w , AddForm ) return } var key string if err := store . Put ( & url , & key ); err != nil { http . Error ( w , err . Error (), http . StatusInternalServerError ) return } fmt . Fprintf ( w , \"http://%s/%s\" , * hostname , key ) } \u8981\u4f7f\u5e94\u7528\u7a0b\u5e8f\u66f4\u7075\u6d3b\uff0c\u6b63\u5982\u4e4b\u524d\u7ae0\u8282\u6240\u4e3a\uff0c\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2a\u547d\u4ee4\u884c\u6807\u5fd7 (flag) \u6765\u51b3\u5b9a\u662f\u5426\u5728 main() \u51fd\u6570\u4e2d\u542f\u7528 RPC \u670d\u52a1\u5668\uff1a var rpcEnabled = flag . Bool ( \"rpc\" , false , \"enable RPC server\" ) \u8981\u4f7f RPC \u5de5\u4f5c\uff0c\u8fd8\u8981\u7528 rpc \u5305\u6765\u6ce8\u518c URLStore \uff0c\u5e76\u7528 HandleHTTP() \u521b\u5efa\u57fa\u4e8e HTTP \u7684 RPC \u5904\u7406\u5668\uff1a func main () { flag . Parse () store = NewURLStore ( * dataFile ) if * rpcEnabled { // flag has been set rpc . RegisterName ( \"Store\" , store ) rpc . HandleHTTP () } ... ( set up http like before ) } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4ee5 json \u683c\u5f0f\u5b58\u50a8 \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528\u4ee3\u7406\u7f13\u5b58","title":"\u7248\u672c 5 - \u5206\u5e03\u5f0f\u7a0b\u5e8f"},{"location":"19.8/#5-","text":"\u7b2c 5 \u4e2a\u7248\u672c\u7684\u4ee3\u7801 goto_v5 \uff08 19.8 \u8282 \u548c 19.9 \u8282 \u8ba8\u8bba\uff09\u89c1 goto_v5 \u3002\u8be5\u7248\u672c\u4ecd\u7136\u57fa\u4e8e gob \u5b58\u50a8\uff0c\u4f46\u5f88\u5bb9\u6613\u8c03\u6574\u4e3a\u4f7f\u7528 json\uff0c\u6b63\u5982\u7248\u672c 4 \u6f14\u793a\u7684\u90a3\u6837\u3002","title":"\u7248\u672c 5 - \u5206\u5e03\u5f0f\u7a0b\u5e8f"},{"location":"19.8/#198","text":"\u76ee\u524d\u4e3a\u6b62 goto \u4ee5\u5355\u7ebf\u7a0b\u8fd0\u884c\uff0c\u4f46\u5373\u4f7f\u7528\u534f\u7a0b\uff0c\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u8fd0\u884c\u7684\u5355\u4e00\u8fdb\u7a0b\uff0c\u4e5f\u53ea\u80fd\u4e3a\u4e00\u5b9a\u6570\u91cf\u7684\u5e76\u53d1\u8bf7\u6c42\u63d0\u4f9b\u670d\u52a1\u3002\u4e00\u4e2a\u7f29\u77ed\u7f51\u5740\u670d\u52a1\uff0c\u76f8\u5bf9\u4e8e Add() \uff08\u7528 Put() \u5199\u5165\uff09\uff0c\u901a\u5e38 Redirect() \u670d\u52a1\uff08\u7528 Get() \u8bfb\u53d6\uff09\u8981\u591a\u5f97\u591a\u3002\u56e0\u6b64\u6211\u4eec\u5e94\u8be5\u53ef\u4ee5\u521b\u5efa\u4efb\u610f\u6570\u91cf\u7684\u53ea\u8bfb\u7684\u4ece (slave) \u670d\u52a1\u5668\uff0c\u63d0\u4f9b\u670d\u52a1\u5e76\u7f13\u5b58 Get() \u65b9\u6cd5\u8c03\u7528\u7684\u7ed3\u679c\uff0c\u5c06 Put() \u8bf7\u6c42\u8f6c\u53d1\u7ed9\u4e3b (master) \u670d\u52a1\u5668\uff0c\u7c7b\u4f3c\u5982\u4e0b\u67b6\u6784\uff1a \u5bf9\u4e8e slave \u8fdb\u7a0b\uff0c\u8981\u5728\u7f51\u7edc\u4e0a\u8fd0\u884c goto \u5e94\u7528\u7684\u4e00\u4e2a master \u8282\u70b9\u5b9e\u4f8b\uff0c\u5b83\u4eec\u5fc5\u987b\u80fd\u76f8\u4e92\u901a\u4fe1\u3002Go \u7684 rpc \u5305\u4e3a\u8de8\u8d8a\u7f51\u7edc\u53d1\u8d77\u51fd\u6570\u8c03\u7528\u63d0\u4f9b\u4e86\u4fbf\u6377\u7684\u9014\u5f84\u3002\u8fd9\u91cc\u5c06\u628a URLStore \u53d8\u4e3a RPC \u670d\u52a1\uff08 15.9 \u8282 \u8be6\u7ec6\u8ba8\u8bba\u4e86 rpc \u5305\uff09\u3002slave \u8fdb\u7a0b\u5c06\u5e94\u5bf9 Get() \u8bf7\u6c42\u4ee5\u4ea4\u4ed8\u957f URL\u3002\u5f53\u4e00\u4e2a\u957f URL \u8981\u88ab\u8f6c\u6362\u4e3a\u7f29\u77ed\u7248\u672c\uff08\u4f7f\u7528 Put() \u65b9\u6cd5\uff09\u65f6\uff0c\u5b83\u4eec\u901a\u8fc7 rpc \u8fde\u63a5\u628a\u4efb\u52a1\u59d4\u6258\u7ed9 master \u8fdb\u7a0b\uff0c\u56e0\u6b64\u53ea\u6709 master \u8282\u70b9\u4f1a\u5199\u5165\u6570\u636e\u6587\u4ef6\u3002 \u622a\u81f3\u76ee\u524d URLStore \u4e0a\u57fa\u672c\u7684 Get() \u548c Put() \u65b9\u6cd5\u5177\u6709\u5982\u4e0b\u7b7e\u540d\uff1a func ( s * URLStore ) Get ( key string ) string func ( s * URLStore ) Put ( url string ) string \u800c RPC \u8c03\u7528\u4ec5\u80fd\u4f7f\u7528\u5982\u4e0b\u5f62\u5f0f\u7684\u65b9\u6cd5\uff08 t \u662f T \u7c7b\u578b\u7684\u503c\uff09\uff1a func ( t T ) Name ( args * ArgType , reply * ReplyType ) error \u8981\u4f7f URLStore \u6210\u4e3a RPC \u670d\u52a1\uff0c\u9700\u8981\u4fee\u6539 Put() \u548c Get() \u65b9\u6cd5\u4f7f\u5b83\u4eec\u7b26\u5408\u4e0a\u8ff0\u51fd\u6570\u7b7e\u540d\u3002\u4ee5\u4e0b\u662f\u4fee\u6539\u540e\u7684\u7b7e\u540d\uff1a func ( s * URLStore ) Get ( key , url * string ) error func ( s * URLStore ) Put ( url , key * string ) error Get() \u4ee3\u7801\u53d8\u66f4\u4e3a\uff1a func ( s * URLStore ) Get ( key , url * string ) error { s . mu . RLock () defer s . mu . RUnlock () if u , ok := s . urls [ * key ]; ok { * url = u return nil } return errors . New ( \"key not found\" ) } \u73b0\u5728\uff0c\u952e\u548c\u957f URL \u90fd\u53d8\u6210\u4e86\u6307\u9488\uff0c\u5fc5\u987b\u52a0\u4e0a\u524d\u7f00 * \u6765\u53d6\u5f97\u5b83\u4eec\u7684\u503c\uff0c\u4f8b\u5982 *key \u8fd9\u79cd\u5f62\u5f0f\u3002 u \u662f\u4e00\u4e2a\u503c\uff0c\u53ef\u4ee5\u7528 *url = u \u6765\u5c06\u5176\u8d4b\u503c\u7ed9\u6307\u9488\u3002 \u63a5\u7740\u5bf9 Put() \u4ee3\u7801\u505a\u540c\u6837\u7684\u6539\u52a8\uff1a func ( s * URLStore ) Put ( url , key * string ) error { for { * key = genKey ( s . Count ()) if err := s . Set ( key , url ); err == nil { break } } if s . save != nil { s . save <- record { * key , * url } } return nil } Put() \u8c03\u7528 Set() \uff0c\u7531\u4e8e\u540e\u8005\u4e5f\u8981\u505a\u8c03\u6574\uff0c key \u548c url \u53c2\u6570\u73b0\u5728\u662f\u6307\u9488\u7c7b\u578b\uff0c\u8fd8\u5fc5\u987b\u8fd4\u56de error \u53d6\u4ee3 boolean \uff1a func ( s * URLStore ) Set ( key , url * string ) error { s . mu . Lock () defer s . mu . Unlock () if _ , present := s . urls [ * key ]; present { return errors . New ( \"key already exists\" ) } s . urls [ * key ] = * url return nil } \u540c\u6837\uff0c\u5f53\u4ece load() \u8c03\u7528 Set() \u65f6\uff0c\u4e5f\u5fc5\u987b\u505a\u8c03\u6574\uff1a s . Set ( & r . Key , & r . URL ) \u8fd8\u5fc5\u987b\u4fee\u6539 HTTP \u5904\u7406\u51fd\u6570\u4ee5\u9002\u5e94 URLStore \u4e0a\u7684\u66f4\u6539\u3002 Redirect() \u5904\u7406\u51fd\u6570\u73b0\u5728\u8fd4\u56de URLStore \u7ed9\u51fa\u9519\u8bef\u7684\u5b57\u7b26\u4e32\u5f62\u5f0f\uff1a func Redirect ( w http . ResponseWriter , r * http . Request ) { key := r . URL . Path [ 1 :] var url string if err := store . Get ( & key , & url ); err != nil { http . Error ( w , err . Error (), http . StatusInternalServerError ) return } http . Redirect ( w , r , url , http . StatusFound ) } Add() \u5904\u7406\u51fd\u6570\u4e5f\u4ee5\u57fa\u672c\u76f8\u540c\u7684\u65b9\u5f0f\u4fee\u6539\uff1a func Add ( w http . ResponseWriter , r * http . Request ) { url := r . FormValue ( \"url\" ) if url == \"\" { fmt . Fprint ( w , AddForm ) return } var key string if err := store . Put ( & url , & key ); err != nil { http . Error ( w , err . Error (), http . StatusInternalServerError ) return } fmt . Fprintf ( w , \"http://%s/%s\" , * hostname , key ) } \u8981\u4f7f\u5e94\u7528\u7a0b\u5e8f\u66f4\u7075\u6d3b\uff0c\u6b63\u5982\u4e4b\u524d\u7ae0\u8282\u6240\u4e3a\uff0c\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2a\u547d\u4ee4\u884c\u6807\u5fd7 (flag) \u6765\u51b3\u5b9a\u662f\u5426\u5728 main() \u51fd\u6570\u4e2d\u542f\u7528 RPC \u670d\u52a1\u5668\uff1a var rpcEnabled = flag . Bool ( \"rpc\" , false , \"enable RPC server\" ) \u8981\u4f7f RPC \u5de5\u4f5c\uff0c\u8fd8\u8981\u7528 rpc \u5305\u6765\u6ce8\u518c URLStore \uff0c\u5e76\u7528 HandleHTTP() \u521b\u5efa\u57fa\u4e8e HTTP \u7684 RPC \u5904\u7406\u5668\uff1a func main () { flag . Parse () store = NewURLStore ( * dataFile ) if * rpcEnabled { // flag has been set rpc . RegisterName ( \"Store\" , store ) rpc . HandleHTTP () } ... ( set up http like before ) }","title":"19.8 \u591a\u670d\u52a1\u5668\u5904\u7406\u67b6\u6784"},{"location":"19.8/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4ee5 json \u683c\u5f0f\u5b58\u50a8 \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528\u4ee3\u7406\u7f13\u5b58","title":"\u94fe\u63a5"},{"location":"19.9/","text":"19.9 \u4f7f\u7528\u4ee3\u7406\u7f13\u5b58 \u00b6 URLStore \u5df2\u7ecf\u6210\u4e3a\u4e86\u6709\u6548\u7684 RPC \u670d\u52a1\uff0c\u73b0\u5728\u53ef\u4ee5\u521b\u5efa\u53e6\u4e00\u79cd\u4ee3\u8868 RPC \u5ba2\u6237\u7aef\u7684\u7c7b\u578b\uff0c\u5b83\u4f1a\u8f6c\u53d1\u8bf7\u6c42\u5230 RPC \u670d\u52a1\u5668\uff0c\u6211\u4eec\u79f0\u5b83\u4e3a ProxyStore \u3002 type ProxyStore struct { client * rpc . Client } \u4e00\u4e2a RPC \u5ba2\u6237\u7aef\u5fc5\u987b\u4f7f\u7528 DialHTTP() \u65b9\u6cd5\u8fde\u63a5\u5230\u670d\u52a1\u5668\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u8fd9\u53e5\u52a0\u5165 NewProxyStore() \u51fd\u6570\uff0c\u5b83\u7528\u4e8e\u521b\u5efa ProxyStore \u5bf9\u8c61\u3002 func NewProxyStore ( addr string ) * ProxyStore { client , err := rpc . DialHTTP ( \"tcp\" , addr ) if err != nil { log . Println ( \"Error constructing ProxyStore:\" , err ) } return & ProxyStore { client : client } } ProxyStore \u6709 Get() \u548c Put() \u65b9\u6cd5\uff0c\u5b83\u4eec\u5229\u7528 RPC \u5ba2\u6237\u7aef\u7684 Call() \u65b9\u6cd5\uff0c\u5c06\u8bf7\u6c42\u76f4\u63a5\u4f20\u9012\u7ed9\u670d\u52a1\u5668\uff1a func ( s * ProxyStore ) Get ( key , url * string ) error { return s . client . Call ( \"Store.Get\" , key , url ) } func ( s * ProxyStore ) Put ( url , key * string ) error { return s . client . Call ( \"Store.Put\" , url , key ) } \u5e26\u7f13\u5b58\u7684 ProxyStore \u00b6 \u53ef\u662f\uff0c\u5982\u679c slave \u8fdb\u7a0b\u53ea\u662f\u7b80\u5355\u5730\u4ee3\u7406\u6240\u6709\u7684\u5de5\u4f5c\u5230 master \u8282\u70b9\uff0c\u4e0d\u4f1a\u5f97\u5230\u4efb\u4f55\u589e\u76ca\uff01\u6211\u4eec\u6253\u7b97\u7528 slave \u8282\u70b9\u6765\u5e94\u5bf9 Get() \u8bf7\u6c42\u3002\u8981\u505a\u5230\u8fd9\u70b9\uff0c\u5b83\u4eec\u5fc5\u987b\u6709 URLStore \u4e2d map \u7684\u4e00\u4efd\u526f\u672c\uff08\u7f13\u5b58\uff09\u3002\u56e0\u6b64\u6211\u4eec\u5bf9 ProxyStore \u7684\u5b9a\u4e49\u8fdb\u884c\u6269\u5c55\uff0c\u5c06 URLStore \u5305\u542b\u5728\u5176\u4e2d\uff1a type ProxyStore struct { urls * URLStore client * rpc . Client } NewProxyStore() \u4e5f\u5fc5\u987b\u505a\u4fee\u6539\uff1a func NewProxyStore ( addr string ) * ProxyStore { client , err := rpc . DialHTTP ( \"tcp\" , addr ) if err != nil { log . Println ( \"ProxyStore:\" , err ) } return & ProxyStore { urls : NewURLStore ( \"\" ), client : client } } \u8fd8\u5fc5\u987b\u4fee\u6539 NewURLStore() \u4ee5\u4fbf\u7ed9\u51fa\u7a7a\u6587\u4ef6\u540d\u65f6\uff0c\u4e0d\u4f1a\u5c1d\u8bd5\u4ece\u78c1\u76d8\u5199\u5165\u6216\u8bfb\u53d6\u6587\u4ef6\uff1a func NewURLStore ( filename string ) * URLStore { s := & URLStore { urls : make ( map [ string ] string )} if filename != \"\" { s . save = make ( chan record , saveQueueLength ) if err := s . load ( filename ); err != nil { log . Println ( \"Error loading URLStore: \" , err ) } go s . saveLoop ( filename ) } return s } ProxyStore \u7684 Get() \u65b9\u6cd5\u9700\u8981\u6269\u5c55\uff1a \u5b83\u5e94\u8be5\u9996\u5148\u68c0\u67e5\u7f13\u5b58\u4e2d\u662f\u5426\u6709\u5bf9\u5e94\u7684\u952e \u3002\u5982\u679c\u6709\uff0c Get() \u8fd4\u56de\u5df2\u7f13\u5b58\u7684\u7ed3\u679c\u3002\u5426\u5219\uff0c\u5e94\u8be5\u53d1\u8d77 RPC \u8c03\u7528\uff0c\u7136\u540e\u7528\u8fd4\u56de\u7ed3\u679c\u66f4\u65b0\u5176\u672c\u5730\u7f13\u5b58\uff1a func ( s * ProxyStore ) Get ( key , url * string ) error { if err := s . urls . Get ( key , url ); err == nil { // url found in local map return nil } // url not found in local map, make rpc-call: if err := s . client . Call ( \"Store.Get\" , key , url ); err != nil { return err } s . urls . Set ( key , url ) return nil } \u540c\u6837\u5730\uff0c Put() \u65b9\u6cd5\u4ec5\u5f53\u6210\u529f\u5b8c\u6210\u4e86\u8fdc\u7a0b RPC Put() \u8c03\u7528\uff0c\u624d\u66f4\u65b0\u672c\u5730\u7f13\u5b58\uff1a func ( s * ProxyStore ) Put ( url , key * string ) error { if err := s . client . Call ( \"Store.Put\" , url , key ); err != nil { return err } s . urls . Set ( key , url ) return nil } \u6c47\u603b \u00b6 slave \u8282\u70b9\u4f7f\u7528 ProxyStore \uff0c\u53ea\u6709 master \u4f7f\u7528 URLStore \u3002\u6709\u9274\u4e8e\u521b\u9020\u5b83\u4eec\u7684\u65b9\u5f0f\uff0c\u5b83\u4eec\u770b\u4e0a\u53bb\u5341\u5206\u4e00\u81f4\uff1a\u4e24\u8005\u90fd\u5b9e\u73b0\u4e86\u76f8\u540c\u7b7e\u540d\u7684 Get() \u548c Put() \u65b9\u6cd5\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a Store \u63a5\u53e3\u6765\u6982\u62ec\u5b83\u4eec\u7684\u884c\u4e3a\uff1a type Store interface { Put ( url , key * string ) error Get ( key , url * string ) error } \u73b0\u5728\u5168\u5c40\u53d8\u91cf store \u53ef\u4ee5\u6210\u4e3a Store \u7c7b\u578b\uff1a var store Store \u6700\u540e\uff0c\u6211\u4eec\u6539\u5199 main() \u51fd\u6570\u4ee5\u4fbf\u7a0b\u5e8f\u53ea\u4f5c\u4e3a master \u6216 slave \u542f\u52a8\uff08\u6211\u4eec\u53ea\u80fd\u8fd9\u4e48\u505a\uff0c\u56e0\u4e3a\u73b0\u5728 store \u662f Store \u63a5\u53e3\u7c7b\u578b\uff01\uff09\u3002 \u4e3a\u6b64\u6211\u4eec\u6dfb\u52a0\u4e00\u4e2a\u6ca1\u6709\u9ed8\u8ba4\u503c\u7684\u65b0\u547d\u4ee4\u884c\u6807\u5fd7 masterAddr \u3002 var masterAddr = flag . String ( \"master\" , \"\" , \"RPC master address\" ) \u5982\u679c\u7ed9\u51fa master \u5730\u5740\uff0c\u5c31\u542f\u52a8\u4e00\u4e2a slave \u8fdb\u7a0b\u5e76\u521b\u5efa\u65b0\u7684 ProxyStore \uff1b\u5426\u5219\u542f\u52a8 master \u8fdb\u7a0b\u5e76\u521b\u5efa\u65b0\u7684 URLStore \uff1a func main () { flag . Parse () if * masterAddr != \"\" { // we are a slave store = NewProxyStore ( * masterAddr ) } else { // we are the master store = NewURLStore ( * dataFile ) } ... } \u8fd9\u6837\uff0c\u6211\u4eec\u5df2\u542f\u7528\u4e86 ProxyStore \u4f5c\u4e3a web \u524d\u7aef\uff0c\u4ee5\u4ee3\u66ff URLStore \u3002 \u5176\u4f59\u7684\u524d\u7aef\u4ee3\u7801\u7ee7\u7eed\u548c\u4e4b\u524d\u4e00\u6837\u5730\u5de5\u4f5c\uff0c\u5b83\u4eec\u4e0d\u5fc5\u5728\u610f Store \u63a5\u53e3\u3002\u53ea\u6709 master \u8fdb\u7a0b\u4f1a\u5199\u6570\u636e\u6587\u4ef6\u3002 \u73b0\u5728\u53ef\u4ee5\u52a0\u8f7d\u4e00\u4e2a master \u8282\u70b9\u548c\u6570\u4e2a slave \u8282\u70b9\uff0c\u5bf9 slave \u8fdb\u884c\u538b\u529b\u6d4b\u8bd5\u3002 \u7f16\u8bd1\u8fd9\u4e2a\u7248\u672c 4 \u6216\u76f4\u63a5\u4f7f\u7528\u73b0\u6709\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u3002 \u8981\u8fdb\u884c\u6d4b\u8bd5\uff0c\u9996\u5148\u5728\u547d\u4ee4\u884c\u7528\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8 master \u8282\u70b9\uff1a ./goto -http = :8081 -rpc = true # \uff08Windows \u5e73\u53f0\u7528 goto \u4ee3\u66ff ./goto\uff09 \u8fd9\u91cc\u63d0\u4f9b\u4e86 2 \u4e2a\u6807\u5fd7\uff1amaster \u76d1\u542c 8081 \u7aef\u53e3\uff0c\u5df2\u542f\u7528 RPC\u3002 slave \u8282\u70b9\u7528\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8\uff1a ./goto -master = 127 .0.0.1:8081 \u5b83\u83b7\u53d6\u5230 master \u7684\u5730\u5740\uff0c\u5e76\u5728 8080 \u7aef\u53e3\u63a5\u53d7\u5ba2\u6237\u7aef\u8bf7\u6c42\u3002 \u5728\u6e90\u7801\u76ee\u5f55\u4e0b\u5df2\u5305\u542b\u4e86\u4ee5\u4e0b shell \u811a\u672c demo.sh \uff0c\u7528\u6765\u5728\u7c7b Unix \u7cfb\u7edf\u4e0b\u81ea\u52a8\u542f\u52a8\u7a0b\u5e8f\uff1a #!/bin/sh gomake ./goto -http = :8081 -rpc = true & master_pid = $! sleep 1 ./goto -master = 127 .0.0.1:8081 & slave_pid = $! echo \"Running master on :8081, slave on :8080.\" echo \"Visit: http://localhost:8080/add\" echo \"Press enter to shut down\" read kill $master_pid kill $slave_pid \u8981\u5728 Windows \u4e0b\u6d4b\u8bd5\uff0c\u542f\u52a8 MINGW shell \u5e76\u542f\u52a8 master\uff0c\u7136\u540e\u6bcf\u4e2a slave \u90fd\u8981\u5355\u72ec\u542f\u52a8\u65b0\u7684 MINGW shell \u5e76\u542f\u52a8 slave \u8fdb\u7a0b\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u591a\u670d\u52a1\u5668\u5904\u7406\u67b6\u6784 \u4e0b\u4e00\u8282\uff1a \u603b\u7ed3\u548c\u589e\u5f3a","title":"19.9 \u4f7f\u7528\u4ee3\u7406\u7f13\u5b58"},{"location":"19.9/#199","text":"URLStore \u5df2\u7ecf\u6210\u4e3a\u4e86\u6709\u6548\u7684 RPC \u670d\u52a1\uff0c\u73b0\u5728\u53ef\u4ee5\u521b\u5efa\u53e6\u4e00\u79cd\u4ee3\u8868 RPC \u5ba2\u6237\u7aef\u7684\u7c7b\u578b\uff0c\u5b83\u4f1a\u8f6c\u53d1\u8bf7\u6c42\u5230 RPC \u670d\u52a1\u5668\uff0c\u6211\u4eec\u79f0\u5b83\u4e3a ProxyStore \u3002 type ProxyStore struct { client * rpc . Client } \u4e00\u4e2a RPC \u5ba2\u6237\u7aef\u5fc5\u987b\u4f7f\u7528 DialHTTP() \u65b9\u6cd5\u8fde\u63a5\u5230\u670d\u52a1\u5668\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u8fd9\u53e5\u52a0\u5165 NewProxyStore() \u51fd\u6570\uff0c\u5b83\u7528\u4e8e\u521b\u5efa ProxyStore \u5bf9\u8c61\u3002 func NewProxyStore ( addr string ) * ProxyStore { client , err := rpc . DialHTTP ( \"tcp\" , addr ) if err != nil { log . Println ( \"Error constructing ProxyStore:\" , err ) } return & ProxyStore { client : client } } ProxyStore \u6709 Get() \u548c Put() \u65b9\u6cd5\uff0c\u5b83\u4eec\u5229\u7528 RPC \u5ba2\u6237\u7aef\u7684 Call() \u65b9\u6cd5\uff0c\u5c06\u8bf7\u6c42\u76f4\u63a5\u4f20\u9012\u7ed9\u670d\u52a1\u5668\uff1a func ( s * ProxyStore ) Get ( key , url * string ) error { return s . client . Call ( \"Store.Get\" , key , url ) } func ( s * ProxyStore ) Put ( url , key * string ) error { return s . client . Call ( \"Store.Put\" , url , key ) }","title":"19.9 \u4f7f\u7528\u4ee3\u7406\u7f13\u5b58"},{"location":"19.9/#proxystore","text":"\u53ef\u662f\uff0c\u5982\u679c slave \u8fdb\u7a0b\u53ea\u662f\u7b80\u5355\u5730\u4ee3\u7406\u6240\u6709\u7684\u5de5\u4f5c\u5230 master \u8282\u70b9\uff0c\u4e0d\u4f1a\u5f97\u5230\u4efb\u4f55\u589e\u76ca\uff01\u6211\u4eec\u6253\u7b97\u7528 slave \u8282\u70b9\u6765\u5e94\u5bf9 Get() \u8bf7\u6c42\u3002\u8981\u505a\u5230\u8fd9\u70b9\uff0c\u5b83\u4eec\u5fc5\u987b\u6709 URLStore \u4e2d map \u7684\u4e00\u4efd\u526f\u672c\uff08\u7f13\u5b58\uff09\u3002\u56e0\u6b64\u6211\u4eec\u5bf9 ProxyStore \u7684\u5b9a\u4e49\u8fdb\u884c\u6269\u5c55\uff0c\u5c06 URLStore \u5305\u542b\u5728\u5176\u4e2d\uff1a type ProxyStore struct { urls * URLStore client * rpc . Client } NewProxyStore() \u4e5f\u5fc5\u987b\u505a\u4fee\u6539\uff1a func NewProxyStore ( addr string ) * ProxyStore { client , err := rpc . DialHTTP ( \"tcp\" , addr ) if err != nil { log . Println ( \"ProxyStore:\" , err ) } return & ProxyStore { urls : NewURLStore ( \"\" ), client : client } } \u8fd8\u5fc5\u987b\u4fee\u6539 NewURLStore() \u4ee5\u4fbf\u7ed9\u51fa\u7a7a\u6587\u4ef6\u540d\u65f6\uff0c\u4e0d\u4f1a\u5c1d\u8bd5\u4ece\u78c1\u76d8\u5199\u5165\u6216\u8bfb\u53d6\u6587\u4ef6\uff1a func NewURLStore ( filename string ) * URLStore { s := & URLStore { urls : make ( map [ string ] string )} if filename != \"\" { s . save = make ( chan record , saveQueueLength ) if err := s . load ( filename ); err != nil { log . Println ( \"Error loading URLStore: \" , err ) } go s . saveLoop ( filename ) } return s } ProxyStore \u7684 Get() \u65b9\u6cd5\u9700\u8981\u6269\u5c55\uff1a \u5b83\u5e94\u8be5\u9996\u5148\u68c0\u67e5\u7f13\u5b58\u4e2d\u662f\u5426\u6709\u5bf9\u5e94\u7684\u952e \u3002\u5982\u679c\u6709\uff0c Get() \u8fd4\u56de\u5df2\u7f13\u5b58\u7684\u7ed3\u679c\u3002\u5426\u5219\uff0c\u5e94\u8be5\u53d1\u8d77 RPC \u8c03\u7528\uff0c\u7136\u540e\u7528\u8fd4\u56de\u7ed3\u679c\u66f4\u65b0\u5176\u672c\u5730\u7f13\u5b58\uff1a func ( s * ProxyStore ) Get ( key , url * string ) error { if err := s . urls . Get ( key , url ); err == nil { // url found in local map return nil } // url not found in local map, make rpc-call: if err := s . client . Call ( \"Store.Get\" , key , url ); err != nil { return err } s . urls . Set ( key , url ) return nil } \u540c\u6837\u5730\uff0c Put() \u65b9\u6cd5\u4ec5\u5f53\u6210\u529f\u5b8c\u6210\u4e86\u8fdc\u7a0b RPC Put() \u8c03\u7528\uff0c\u624d\u66f4\u65b0\u672c\u5730\u7f13\u5b58\uff1a func ( s * ProxyStore ) Put ( url , key * string ) error { if err := s . client . Call ( \"Store.Put\" , url , key ); err != nil { return err } s . urls . Set ( key , url ) return nil }","title":"\u5e26\u7f13\u5b58\u7684 ProxyStore"},{"location":"19.9/#_1","text":"slave \u8282\u70b9\u4f7f\u7528 ProxyStore \uff0c\u53ea\u6709 master \u4f7f\u7528 URLStore \u3002\u6709\u9274\u4e8e\u521b\u9020\u5b83\u4eec\u7684\u65b9\u5f0f\uff0c\u5b83\u4eec\u770b\u4e0a\u53bb\u5341\u5206\u4e00\u81f4\uff1a\u4e24\u8005\u90fd\u5b9e\u73b0\u4e86\u76f8\u540c\u7b7e\u540d\u7684 Get() \u548c Put() \u65b9\u6cd5\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a Store \u63a5\u53e3\u6765\u6982\u62ec\u5b83\u4eec\u7684\u884c\u4e3a\uff1a type Store interface { Put ( url , key * string ) error Get ( key , url * string ) error } \u73b0\u5728\u5168\u5c40\u53d8\u91cf store \u53ef\u4ee5\u6210\u4e3a Store \u7c7b\u578b\uff1a var store Store \u6700\u540e\uff0c\u6211\u4eec\u6539\u5199 main() \u51fd\u6570\u4ee5\u4fbf\u7a0b\u5e8f\u53ea\u4f5c\u4e3a master \u6216 slave \u542f\u52a8\uff08\u6211\u4eec\u53ea\u80fd\u8fd9\u4e48\u505a\uff0c\u56e0\u4e3a\u73b0\u5728 store \u662f Store \u63a5\u53e3\u7c7b\u578b\uff01\uff09\u3002 \u4e3a\u6b64\u6211\u4eec\u6dfb\u52a0\u4e00\u4e2a\u6ca1\u6709\u9ed8\u8ba4\u503c\u7684\u65b0\u547d\u4ee4\u884c\u6807\u5fd7 masterAddr \u3002 var masterAddr = flag . String ( \"master\" , \"\" , \"RPC master address\" ) \u5982\u679c\u7ed9\u51fa master \u5730\u5740\uff0c\u5c31\u542f\u52a8\u4e00\u4e2a slave \u8fdb\u7a0b\u5e76\u521b\u5efa\u65b0\u7684 ProxyStore \uff1b\u5426\u5219\u542f\u52a8 master \u8fdb\u7a0b\u5e76\u521b\u5efa\u65b0\u7684 URLStore \uff1a func main () { flag . Parse () if * masterAddr != \"\" { // we are a slave store = NewProxyStore ( * masterAddr ) } else { // we are the master store = NewURLStore ( * dataFile ) } ... } \u8fd9\u6837\uff0c\u6211\u4eec\u5df2\u542f\u7528\u4e86 ProxyStore \u4f5c\u4e3a web \u524d\u7aef\uff0c\u4ee5\u4ee3\u66ff URLStore \u3002 \u5176\u4f59\u7684\u524d\u7aef\u4ee3\u7801\u7ee7\u7eed\u548c\u4e4b\u524d\u4e00\u6837\u5730\u5de5\u4f5c\uff0c\u5b83\u4eec\u4e0d\u5fc5\u5728\u610f Store \u63a5\u53e3\u3002\u53ea\u6709 master \u8fdb\u7a0b\u4f1a\u5199\u6570\u636e\u6587\u4ef6\u3002 \u73b0\u5728\u53ef\u4ee5\u52a0\u8f7d\u4e00\u4e2a master \u8282\u70b9\u548c\u6570\u4e2a slave \u8282\u70b9\uff0c\u5bf9 slave \u8fdb\u884c\u538b\u529b\u6d4b\u8bd5\u3002 \u7f16\u8bd1\u8fd9\u4e2a\u7248\u672c 4 \u6216\u76f4\u63a5\u4f7f\u7528\u73b0\u6709\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u3002 \u8981\u8fdb\u884c\u6d4b\u8bd5\uff0c\u9996\u5148\u5728\u547d\u4ee4\u884c\u7528\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8 master \u8282\u70b9\uff1a ./goto -http = :8081 -rpc = true # \uff08Windows \u5e73\u53f0\u7528 goto \u4ee3\u66ff ./goto\uff09 \u8fd9\u91cc\u63d0\u4f9b\u4e86 2 \u4e2a\u6807\u5fd7\uff1amaster \u76d1\u542c 8081 \u7aef\u53e3\uff0c\u5df2\u542f\u7528 RPC\u3002 slave \u8282\u70b9\u7528\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8\uff1a ./goto -master = 127 .0.0.1:8081 \u5b83\u83b7\u53d6\u5230 master \u7684\u5730\u5740\uff0c\u5e76\u5728 8080 \u7aef\u53e3\u63a5\u53d7\u5ba2\u6237\u7aef\u8bf7\u6c42\u3002 \u5728\u6e90\u7801\u76ee\u5f55\u4e0b\u5df2\u5305\u542b\u4e86\u4ee5\u4e0b shell \u811a\u672c demo.sh \uff0c\u7528\u6765\u5728\u7c7b Unix \u7cfb\u7edf\u4e0b\u81ea\u52a8\u542f\u52a8\u7a0b\u5e8f\uff1a #!/bin/sh gomake ./goto -http = :8081 -rpc = true & master_pid = $! sleep 1 ./goto -master = 127 .0.0.1:8081 & slave_pid = $! echo \"Running master on :8081, slave on :8080.\" echo \"Visit: http://localhost:8080/add\" echo \"Press enter to shut down\" read kill $master_pid kill $slave_pid \u8981\u5728 Windows \u4e0b\u6d4b\u8bd5\uff0c\u542f\u52a8 MINGW shell \u5e76\u542f\u52a8 master\uff0c\u7136\u540e\u6bcf\u4e2a slave \u90fd\u8981\u5355\u72ec\u542f\u52a8\u65b0\u7684 MINGW shell \u5e76\u542f\u52a8 slave \u8fdb\u7a0b\u3002","title":"\u6c47\u603b"},{"location":"19.9/#_2","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u591a\u670d\u52a1\u5668\u5904\u7406\u67b6\u6784 \u4e0b\u4e00\u8282\uff1a \u603b\u7ed3\u548c\u589e\u5f3a","title":"\u94fe\u63a5"},{"location":"20.0/","text":"20.0 Google App Engine \u4e2d\u7684 Go \u00b6 \u672c\u7ae0\u4e2d\u7684\u7f51\u7ad9\u5730\u5740\u548c\u539f\u4e66\u6709\u6240\u51fa\u5165\uff0c\u4f46\u5e76\u4e0d\u5f71\u54cd\uff0c\u56e0\u4e3a Google \u5df2\u7ecf\u5bf9\u8fd9\u4e9b\u7f51\u5740\u505a\u4e86\u91cd\u5b9a\u5411\u3002\u81ea\u8fd9\u672c\u4e66\u51fa\u7248\u4ee5\u6765\uff0cGAE \u7684\u5b89\u88c5\u65b9\u5f0f\u548c\u4f7f\u7528\u65b9\u5f0f\u5df2\u7ecf\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u539f\u4e66\u5185\u5bb9\u4ec5\u4f9b\u53c2\u8003\uff0c\u8bf7\u4ee5 \u6587\u6863 \u6216\u7f51\u7ad9\u6307\u5f15\u4e3a\u51c6\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u603b\u7ed3\u4e0e\u589e\u5f3a \u4e0b\u4e00\u8282\uff1a \u4ec0\u4e48\u662f Google App Engine\uff1f","title":"20.0 Google App Engine \u4e2d\u7684 Go"},{"location":"20.0/#200-google-app-engine-go","text":"\u672c\u7ae0\u4e2d\u7684\u7f51\u7ad9\u5730\u5740\u548c\u539f\u4e66\u6709\u6240\u51fa\u5165\uff0c\u4f46\u5e76\u4e0d\u5f71\u54cd\uff0c\u56e0\u4e3a Google \u5df2\u7ecf\u5bf9\u8fd9\u4e9b\u7f51\u5740\u505a\u4e86\u91cd\u5b9a\u5411\u3002\u81ea\u8fd9\u672c\u4e66\u51fa\u7248\u4ee5\u6765\uff0cGAE \u7684\u5b89\u88c5\u65b9\u5f0f\u548c\u4f7f\u7528\u65b9\u5f0f\u5df2\u7ecf\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u539f\u4e66\u5185\u5bb9\u4ec5\u4f9b\u53c2\u8003\uff0c\u8bf7\u4ee5 \u6587\u6863 \u6216\u7f51\u7ad9\u6307\u5f15\u4e3a\u51c6\u3002","title":"20.0 Google App Engine \u4e2d\u7684 Go"},{"location":"20.0/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u603b\u7ed3\u4e0e\u589e\u5f3a \u4e0b\u4e00\u8282\uff1a \u4ec0\u4e48\u662f Google App Engine\uff1f","title":"\u94fe\u63a5"},{"location":"20.1/","text":"20.1 \u4ec0\u4e48\u662f Google App Engine\uff1f \u00b6 Google \u5e94\u7528\u5f15\u64ce\uff08Google App Engine\uff0c\u4e0b\u7b80\u79f0 GAE\uff09\u662f Google \u7528\u6765**\u4e91\u7f16\u7a0b**\u7684\u65b9\u6848\uff1a\u8ba9\u4f60\u5728 Google \u7684\u57fa\u7840\u67b6\u6784\u4e0a\u8fd0\u884c web \u5e94\u7528\u548c\u5b58\u50a8\u6570\u636e\uff0c\u800c\u4e0d\u7528\u62c5\u5fc3\u670d\u52a1\u5668\u3001\u7f51\u7edc\u3001\u64cd\u4f5c\u7cfb\u7edf\u6216\u8005\u6570\u636e\u5b58\u50a8\u7b49\u7b49\u95ee\u9898\u3002\u8fd9\u79cd\u8d44\u6e90\u7684\u96c6\u5408\u901a\u5e38\u88ab\u79f0\u4e3a\u4e91\uff0c\u5176\u7ef4\u62a4\u5b8c\u5168\u7531\u8c37\u6b4c\u672c\u8eab\u8d1f\u8d23\u3002\u5bf9\u4e8e\u4f60\u8fd9\u4e2a\u5f00\u53d1\u8005\u6765\u8bf4\uff0c\u53ea\u6709\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u548c\u5b83\u80fd\u63d0\u4f9b\u7ed9\u7528\u6237\u7684\u670d\u52a1\u624d\u662f\u91cd\u8981\u7684\u3002\u7528\u6237\u53ef\u4ee5\u5728\u4efb\u4f55\u53ef\u4ee5\u8fde\u63a5\u5230\u4e92\u8054\u7f51\u7684\u8bbe\u5907\u4e0a\u4f7f\u7528\u548c\u8fd0\u884c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f60\u53ea\u9700\u4e3a\u4f60\u7684\u8f6f\u4ef6\u771f\u6b63\u9700\u8981\u7684\u8d44\u6e90\uff08CPU \u5904\u7406\u65f6\u95f4\u3001\u7f51\u7edc\u5e26\u5bbd\u3001\u78c1\u76d8\u5b58\u50a8\u3001\u5185\u5b58\u7b49\uff09\u4ed8\u8d39\u3002\u5f53\u6709\u9ad8\u5cf0\u671f\u65f6\uff0c\u4e91\u5e73\u53f0\u4f1a\u81ea\u52a8\u4e3a\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u589e\u52a0\u8d44\u6e90\uff0c\u5e76\u5728\u4e0d\u518d\u9700\u8981\u65f6\u51cf\u5c11\u8d44\u6e90\uff1a\u53ef\u6269\u5c55\u6027\u662f\u4e91\u8ba1\u7b97\u7684\u6700\u5927\u4f18\u52bf\u4e4b\u4e00\u3002\u534f\u4f5c\u578b\u5e94\u7528\uff08\u4e00\u7fa4\u4eba\u4e00\u8d77\u5de5\u4f5c\u3001\u5206\u4eab\u6570\u636e\u3001\u4ea4\u6d41\u7b49\uff09\u3001\u63d0\u4f9b\u670d\u52a1\u7684\u5e94\u7528\u548c\u8fdb\u884c\u5927\u578b\u8ba1\u7b97\u7684\u5e94\u7528\u662f\u4e91\u8ba1\u7b97\u7684\u4f18\u79c0\u5019\u9009\u8005\u3002\u4e91\u8ba1\u7b97\u5e94\u7528\u7684\u5178\u578b\u7528\u6237\u754c\u9762\u662f\u4e00\u4e2a\u6d4f\u89c8\u5668\u73af\u5883\u3002 GAE \u5728 2008 \u5e74\u63a8\u51fa\uff0c\u5e76\u652f\u6301 Python \u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u5728 2009 \u5e74\u589e\u52a0\u4e86\u5bf9\u4e8e Java \u7684\u652f\u6301\uff1b\u81ea 2011 \u5e74\u5f00\u59cb\uff0c\u4e5f\u6709\u4e86\u5bf9 Go \u7684\u652f\u6301\u3002\u5176\u5f00\u59cb\u9875\u9762\u4e3a\uff1a https://cloud.google.com/appengine/ \u8c37\u6b4c\u7684 App Engine \u4e3a\u6784\u5efa\u548c\u90e8\u7f72\u7f51\u7edc\u5e94\u7528\u63d0\u4f9b\u4e86\u4e00\u79cd\u53ef\u9760\u3001\u53ef\u6269\u5c55\u548c\u7b80\u5355\u7684\u65b9\u5f0f\u3002\u8d85\u8fc7\u5341\u4e07\u4e2a\u5e94\u7528\u7a0b\u5e8f\u88ab\u6258\u7ba1\u5728 https://console.cloud.google.com/ \u548c\u4f7f\u7528 App Engine \u57fa\u7840\u8bbe\u65bd\u7684\u81ea\u5b9a\u4e49\u57df\u4e0a\u3002\u5b83\u662f\u4e00\u4e2a \"\u5e73\u53f0\u5373\u670d\u52a1 \"\u7684\u73af\u5883\uff0c\u6bd4 Amazon EC2 \u8fd9\u6837\u7684 \"\u57fa\u7840\u4e91\u8bbe\u65bd \"\u7684\u8fd0\u884c\u6c34\u5e73\u66f4\u9ad8\uff0c\u5176\u8bd5\u56fe\u4ee5\u66f4\u9ad8\u7684\u6548\u7387\u5206\u4eab\u8d44\u6e90\u3002 \u6c99\u76d2\uff1a \u4f60\u7684\u5e94\u7528\u5728\u4e00\u4e2a\u53eb\u505a*\u201c\u6c99\u76d2 (sandbox)\u201d*\u7684\u73af\u5883\u4e2d\u8fd0\u884c\uff0c\u5176\u63d0\u4f9b\u5230\u5e95\u5c42\u64cd\u4f5c\u7cfb\u7edf\u6709\u9650\u7684\u8bbf\u95ee\u6743\u3002\u8fd9\u4e9b\u9650\u5236\u80fd\u591f\u5141\u8bb8 App Engine \u5728\u591a\u4e2a\u670d\u52a1\u5668\u4e0a\u5206\u914d\u5e94\u7528\u7a0b\u5e8f\u7684\u7f51\u7edc\u8bf7\u6c42\uff0c\u5e76\u542f\u52a8\u548c\u505c\u6b62\u670d\u52a1\u5668\u4ee5\u6ee1\u8db3\u6d41\u91cf\u9700\u6c42\u3002\u6c99\u76d2\u5c06\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u9694\u79bb\u5728\u5b83\u81ea\u5df1\u7684\u5b89\u5168\u3001\u53ef\u9760\u7684\u73af\u5883\u4e2d\uff0c\u5b83\u72ec\u7acb\u4e8e Web \u670d\u52a1\u5668\u7684\u786c\u4ef6\u3001\u64cd\u4f5c\u7cfb\u7edf\u548c\u7269\u7406\u4f4d\u7f6e\u3002\u4e0a\u6587\u4e2d\u6240\u8bf4\u7684\u9650\u5236\u6709\uff1a \u5e94\u7528\u7a0b\u5e8f\u4e0d\u80fd\u5199\u5230\u670d\u52a1\u5668\u7684\u6587\u4ef6\u7cfb\u7edf\uff1b\u53ea\u6709\u5728\u5e94\u7528\u7a0b\u5e8f\u5185\u4e0a\u4f20\u7684\u6587\u4ef6\u53ef\u4ee5\u88ab\u8bfb\u53d6\u3002\u5e94\u7528\u5fc5\u987b\u4f7f\u7528 App Engine \u6570\u636e\u5b58\u50a8\u3001\u8bb0\u5fc6\u5e93 (memcahe) \u6216\u5176\u4ed6\u670d\u52a1\u6765\u5904\u7406\u6240\u6709\u5728\u8bf7\u6c42\u4e4b\u95f4\u6301\u7eed\u5b58\u5728\u7684\u6570\u636e\u3002 \u4ee3\u7801\u4ec5\u5728\u54cd\u5e94\u7f51\u7edc\u8bf7\u6c42\u3001\u6392\u961f\u6216\u8ba1\u5212\u4efb\u52a1\u65f6\u8fd0\u884c\uff0c\u5e76\u4e14\u54cd\u5e94\u5fc5\u987b\u5728 60 \u79d2\u5185\uff1b\u8bf7\u6c42\u5904\u7406\u7a0b\u5e8f\u4e0d\u80fd\u4ea7\u751f\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u6216\u5728\u54cd\u5e94\u53d1\u51fa\u540e\u6267\u884c\u4ee3\u7801\u3002 \u5b83\u53ea\u80fd\u901a\u8fc7\u63d0\u4f9b\u7684 URL \u83b7\u53d6\u548c\u7535\u5b50\u90ae\u4ef6\u670d\u52a1\u8bbf\u95ee\u4e92\u8054\u7f51\u4e0a\u7684\u5176\u4ed6\u8ba1\u7b97\u673a\u3002\u5176\u4ed6\u8ba1\u7b97\u673a\u53ea\u80fd\u901a\u8fc7\u5728\u6807\u51c6 HTTP \u534f\u8bae\uff08\u6216 HTTPS\uff09\u4e0b\u7684\u8bf7\u6c42\u6765\u8fde\u63a5\u5230\u5e94\u7528\u7a0b\u5e8f\u3002 \u670d\u52a1\u6982\u89c8\uff1a \u6570\u636e \u5b58\u50a8\u5728\u57fa\u4e8e\u8c37\u6b4c Bigtable \u7684 GAE \u6570\u636e\u5b58\u50a8*\u4e2d\uff1a\u8fd9\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u6570\u636e\u5b58\u50a8\u670d\u52a1\uff0c\u5177\u6709\u67e5\u8be2\u5f15\u64ce\u548c\u4ea4\u6613\u529f\u80fd\uff1b\u5b83\u968f\u7740\u4f60\u7684\u6570\u636e\u81ea\u52a8\u589e\u957f\u3002\u5b83\u4e0d\u662f\u4e00\u4e2a\u4f20\u7edf\u7684\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u6240\u4ee5\u4e0d\u5141\u8bb8\u4f7f\u7528\u7ecf\u5178\u7684 SQL \u548c\u8fde\u63a5\uff1b\u4f46\u5b83\u4e3a\u4f60\u63d0\u4f9b\u4e86\u4e00\u79cd\u7c7b\u4f3c SQL \u7684\u67e5\u8be2\u8bed\u8a00\uff0c\u79f0\u4e3a *GQL \u3002\u6570\u636e\u5bf9\u8c61\uff0c\u79f0\u4e3a*\u5b9e\u4f53*\uff0c\u6709\u4e00\u4e2a*\u7c7b\u578b*\u548c\u4e00\u7ec4\u5c5e\u6027\u3002\u67e5\u8be2\u53ef\u4ee5\u68c0\u7d22\u7ed9\u5b9a\u79cd\u7c7b\u7684\u5b9e\u4f53\uff0c\u5e76\u6839\u636e\u5c5e\u6027\u503c\u8fdb\u884c\u8fc7\u6ee4\u548c\u6392\u5e8f\u3002\u5c5e\u6027\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u652f\u6301\u7684\u5c5e\u6027\u503c\u7c7b\u578b\u3002\u5b9e\u4f53\u53ef\u4ee5\u88ab\u5206\u7ec4\u2014\u2014\u8fd9\u5c31\u662f\u4ea4\u6613 (transaction) \u53d1\u751f\u7684\u5730\u65b9\uff1a\u4efb\u4f55\u7684\u4ea4\u6613\u90fd\u5fc5\u987b\u5728\u4e00\u4e2a\u7ec4\u5185\u3002\u4f60\u7684\u5b9e\u4f53\u6ca1\u6709\u6570\u636e\u5e93\u6a21\u5f0f\uff1a\u5b9e\u4f53\u4e4b\u95f4\u7684\u4efb\u4f55\u7ed3\u6784\u5fc5\u987b\u7531\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u63d0\u4f9b\u548c\u5f3a\u5236\u6267\u884c\u3002\u66f4\u65b0\u4f7f\u7528*\u4e50\u89c2\u7684\u5e76\u53d1\u63a7\u5236 (optimistic concurrency control)*\uff0c\u610f\u5473\u7740\u4f9d\u7167\u6700\u540e\u4e00\u6b21\u66f4\u65b0\u6539\u53d8\u6570\u636e\u3002 2) \u5e94\u7528\u7a0b\u5e8f\u8ba4\u8bc1 \u53ef\u4ee5\u4e0e\u8c37\u6b4c\u8d26\u6237\u96c6\u6210 3) URL Fetch \uff1a\u901a\u8fc7\u8fd9\u9879\u670d\u52a1\uff0c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u8bbf\u95ee\u4e92\u8054\u7f51\u4e0a\u7684\u8d44\u6e90\uff0c\u5982\u7f51\u7edc\u670d\u52a1\u6216\u5176\u4ed6\u6570\u636e\u3002 4) \u90ae\u4ef6 \uff1a\u4e5f\u662f\u4e00\u4e2a\u5185\u7f6e\u7684\u670d\u52a1\uff0c\u53ef\u4ee5\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u3002 5) Memcache \uff1a\u4e00\u4e2a\u9ad8\u6027\u80fd\u7684\u3001\u5185\u5b58\u5185\u7684\u952e\u503c\u5bf9\u7f13\u5b58\uff1b\u5b83\u5bf9\u90a3\u4e9b\u4e0d\u9700\u8981\u6570\u636e\u5b58\u50a8\u7684\u6301\u4e45\u6027\u548c\u4e8b\u52a1\u6027\u529f\u80fd\u7684\u6570\u636e\u5f88\u6709\u7528\uff0c\u6bd4\u5982\u4e34\u65f6\u6570\u636e\u6216\u4ece\u6570\u636e\u5b58\u50a8\u590d\u5236\u5230\u7f13\u5b58\u7684\u9ad8\u901f\u8bbf\u95ee\u6570\u636e\u3002 6) \u56fe\u50cf\u64cd\u4f5c \uff1a\uff08\u8bd1\u8005\u6ce8\uff1a\u539f\u6587\u8fd9\u91cc\u5c31\u6ca1\u6709\u4e1c\u897f\uff09 7) \u9884\u5b9a\u4efb\u52a1\u548c\u4efb\u52a1\u961f\u5217 (cron jobs)\uff1a\u4e00\u4e2a\u9664\u4e86\u54cd\u5e94\u7f51\u7edc\u8bf7\u6c42\u5916\uff0c\u8fd8\u53ef\u4ee5\u6267\u884c\u4efb\u52a1\u7684\u5e94\u7528\u7a0b\u5e8f\uff1b\u5b83\u53ef\u4ee5\u6309\u7167\u4f60\u914d\u7f6e\u7684\u65f6\u95f4\u8868\u6267\u884c\u8fd9\u4e9b\u4efb\u52a1\uff0c\u6bd4\u5982\u5728\u4e00\u4e2a\u6bcf\u5929\u7684\u6216\u6bcf\u5c0f\u65f6\u7684\u57fa\u6570\u4e0a\u8fd0\u884c\u3002\u53e6\u5916\uff0c\u5e94\u7528\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u6267\u884c\u7531\u5e94\u7528\u7a0b\u5e8f\u672c\u8eab\u5206\u914d\u5230\u961f\u5217\u4e2d\u7684\u4efb\u52a1\uff0c\u4f8b\u5982\u5728\u5904\u7406\u4e00\u4e2a\u8bf7\u6c42\u65f6\u521b\u5efa\u7684\u540e\u53f0\u4efb\u52a1\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Google \u5e94\u7528\u5f15\u64ce\u4e2d\u7684 Go \u4e0b\u4e00\u8282\uff1a \u4e91\u4e0a\u7684 Go","title":"20.1 \u4ec0\u4e48\u662f Google App Engine\uff1f"},{"location":"20.1/#201-google-app-engine","text":"Google \u5e94\u7528\u5f15\u64ce\uff08Google App Engine\uff0c\u4e0b\u7b80\u79f0 GAE\uff09\u662f Google \u7528\u6765**\u4e91\u7f16\u7a0b**\u7684\u65b9\u6848\uff1a\u8ba9\u4f60\u5728 Google \u7684\u57fa\u7840\u67b6\u6784\u4e0a\u8fd0\u884c web \u5e94\u7528\u548c\u5b58\u50a8\u6570\u636e\uff0c\u800c\u4e0d\u7528\u62c5\u5fc3\u670d\u52a1\u5668\u3001\u7f51\u7edc\u3001\u64cd\u4f5c\u7cfb\u7edf\u6216\u8005\u6570\u636e\u5b58\u50a8\u7b49\u7b49\u95ee\u9898\u3002\u8fd9\u79cd\u8d44\u6e90\u7684\u96c6\u5408\u901a\u5e38\u88ab\u79f0\u4e3a\u4e91\uff0c\u5176\u7ef4\u62a4\u5b8c\u5168\u7531\u8c37\u6b4c\u672c\u8eab\u8d1f\u8d23\u3002\u5bf9\u4e8e\u4f60\u8fd9\u4e2a\u5f00\u53d1\u8005\u6765\u8bf4\uff0c\u53ea\u6709\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u548c\u5b83\u80fd\u63d0\u4f9b\u7ed9\u7528\u6237\u7684\u670d\u52a1\u624d\u662f\u91cd\u8981\u7684\u3002\u7528\u6237\u53ef\u4ee5\u5728\u4efb\u4f55\u53ef\u4ee5\u8fde\u63a5\u5230\u4e92\u8054\u7f51\u7684\u8bbe\u5907\u4e0a\u4f7f\u7528\u548c\u8fd0\u884c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f60\u53ea\u9700\u4e3a\u4f60\u7684\u8f6f\u4ef6\u771f\u6b63\u9700\u8981\u7684\u8d44\u6e90\uff08CPU \u5904\u7406\u65f6\u95f4\u3001\u7f51\u7edc\u5e26\u5bbd\u3001\u78c1\u76d8\u5b58\u50a8\u3001\u5185\u5b58\u7b49\uff09\u4ed8\u8d39\u3002\u5f53\u6709\u9ad8\u5cf0\u671f\u65f6\uff0c\u4e91\u5e73\u53f0\u4f1a\u81ea\u52a8\u4e3a\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u589e\u52a0\u8d44\u6e90\uff0c\u5e76\u5728\u4e0d\u518d\u9700\u8981\u65f6\u51cf\u5c11\u8d44\u6e90\uff1a\u53ef\u6269\u5c55\u6027\u662f\u4e91\u8ba1\u7b97\u7684\u6700\u5927\u4f18\u52bf\u4e4b\u4e00\u3002\u534f\u4f5c\u578b\u5e94\u7528\uff08\u4e00\u7fa4\u4eba\u4e00\u8d77\u5de5\u4f5c\u3001\u5206\u4eab\u6570\u636e\u3001\u4ea4\u6d41\u7b49\uff09\u3001\u63d0\u4f9b\u670d\u52a1\u7684\u5e94\u7528\u548c\u8fdb\u884c\u5927\u578b\u8ba1\u7b97\u7684\u5e94\u7528\u662f\u4e91\u8ba1\u7b97\u7684\u4f18\u79c0\u5019\u9009\u8005\u3002\u4e91\u8ba1\u7b97\u5e94\u7528\u7684\u5178\u578b\u7528\u6237\u754c\u9762\u662f\u4e00\u4e2a\u6d4f\u89c8\u5668\u73af\u5883\u3002 GAE \u5728 2008 \u5e74\u63a8\u51fa\uff0c\u5e76\u652f\u6301 Python \u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u5728 2009 \u5e74\u589e\u52a0\u4e86\u5bf9\u4e8e Java \u7684\u652f\u6301\uff1b\u81ea 2011 \u5e74\u5f00\u59cb\uff0c\u4e5f\u6709\u4e86\u5bf9 Go \u7684\u652f\u6301\u3002\u5176\u5f00\u59cb\u9875\u9762\u4e3a\uff1a https://cloud.google.com/appengine/ \u8c37\u6b4c\u7684 App Engine \u4e3a\u6784\u5efa\u548c\u90e8\u7f72\u7f51\u7edc\u5e94\u7528\u63d0\u4f9b\u4e86\u4e00\u79cd\u53ef\u9760\u3001\u53ef\u6269\u5c55\u548c\u7b80\u5355\u7684\u65b9\u5f0f\u3002\u8d85\u8fc7\u5341\u4e07\u4e2a\u5e94\u7528\u7a0b\u5e8f\u88ab\u6258\u7ba1\u5728 https://console.cloud.google.com/ \u548c\u4f7f\u7528 App Engine \u57fa\u7840\u8bbe\u65bd\u7684\u81ea\u5b9a\u4e49\u57df\u4e0a\u3002\u5b83\u662f\u4e00\u4e2a \"\u5e73\u53f0\u5373\u670d\u52a1 \"\u7684\u73af\u5883\uff0c\u6bd4 Amazon EC2 \u8fd9\u6837\u7684 \"\u57fa\u7840\u4e91\u8bbe\u65bd \"\u7684\u8fd0\u884c\u6c34\u5e73\u66f4\u9ad8\uff0c\u5176\u8bd5\u56fe\u4ee5\u66f4\u9ad8\u7684\u6548\u7387\u5206\u4eab\u8d44\u6e90\u3002 \u6c99\u76d2\uff1a \u4f60\u7684\u5e94\u7528\u5728\u4e00\u4e2a\u53eb\u505a*\u201c\u6c99\u76d2 (sandbox)\u201d*\u7684\u73af\u5883\u4e2d\u8fd0\u884c\uff0c\u5176\u63d0\u4f9b\u5230\u5e95\u5c42\u64cd\u4f5c\u7cfb\u7edf\u6709\u9650\u7684\u8bbf\u95ee\u6743\u3002\u8fd9\u4e9b\u9650\u5236\u80fd\u591f\u5141\u8bb8 App Engine \u5728\u591a\u4e2a\u670d\u52a1\u5668\u4e0a\u5206\u914d\u5e94\u7528\u7a0b\u5e8f\u7684\u7f51\u7edc\u8bf7\u6c42\uff0c\u5e76\u542f\u52a8\u548c\u505c\u6b62\u670d\u52a1\u5668\u4ee5\u6ee1\u8db3\u6d41\u91cf\u9700\u6c42\u3002\u6c99\u76d2\u5c06\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u9694\u79bb\u5728\u5b83\u81ea\u5df1\u7684\u5b89\u5168\u3001\u53ef\u9760\u7684\u73af\u5883\u4e2d\uff0c\u5b83\u72ec\u7acb\u4e8e Web \u670d\u52a1\u5668\u7684\u786c\u4ef6\u3001\u64cd\u4f5c\u7cfb\u7edf\u548c\u7269\u7406\u4f4d\u7f6e\u3002\u4e0a\u6587\u4e2d\u6240\u8bf4\u7684\u9650\u5236\u6709\uff1a \u5e94\u7528\u7a0b\u5e8f\u4e0d\u80fd\u5199\u5230\u670d\u52a1\u5668\u7684\u6587\u4ef6\u7cfb\u7edf\uff1b\u53ea\u6709\u5728\u5e94\u7528\u7a0b\u5e8f\u5185\u4e0a\u4f20\u7684\u6587\u4ef6\u53ef\u4ee5\u88ab\u8bfb\u53d6\u3002\u5e94\u7528\u5fc5\u987b\u4f7f\u7528 App Engine \u6570\u636e\u5b58\u50a8\u3001\u8bb0\u5fc6\u5e93 (memcahe) \u6216\u5176\u4ed6\u670d\u52a1\u6765\u5904\u7406\u6240\u6709\u5728\u8bf7\u6c42\u4e4b\u95f4\u6301\u7eed\u5b58\u5728\u7684\u6570\u636e\u3002 \u4ee3\u7801\u4ec5\u5728\u54cd\u5e94\u7f51\u7edc\u8bf7\u6c42\u3001\u6392\u961f\u6216\u8ba1\u5212\u4efb\u52a1\u65f6\u8fd0\u884c\uff0c\u5e76\u4e14\u54cd\u5e94\u5fc5\u987b\u5728 60 \u79d2\u5185\uff1b\u8bf7\u6c42\u5904\u7406\u7a0b\u5e8f\u4e0d\u80fd\u4ea7\u751f\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u6216\u5728\u54cd\u5e94\u53d1\u51fa\u540e\u6267\u884c\u4ee3\u7801\u3002 \u5b83\u53ea\u80fd\u901a\u8fc7\u63d0\u4f9b\u7684 URL \u83b7\u53d6\u548c\u7535\u5b50\u90ae\u4ef6\u670d\u52a1\u8bbf\u95ee\u4e92\u8054\u7f51\u4e0a\u7684\u5176\u4ed6\u8ba1\u7b97\u673a\u3002\u5176\u4ed6\u8ba1\u7b97\u673a\u53ea\u80fd\u901a\u8fc7\u5728\u6807\u51c6 HTTP \u534f\u8bae\uff08\u6216 HTTPS\uff09\u4e0b\u7684\u8bf7\u6c42\u6765\u8fde\u63a5\u5230\u5e94\u7528\u7a0b\u5e8f\u3002 \u670d\u52a1\u6982\u89c8\uff1a \u6570\u636e \u5b58\u50a8\u5728\u57fa\u4e8e\u8c37\u6b4c Bigtable \u7684 GAE \u6570\u636e\u5b58\u50a8*\u4e2d\uff1a\u8fd9\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u6570\u636e\u5b58\u50a8\u670d\u52a1\uff0c\u5177\u6709\u67e5\u8be2\u5f15\u64ce\u548c\u4ea4\u6613\u529f\u80fd\uff1b\u5b83\u968f\u7740\u4f60\u7684\u6570\u636e\u81ea\u52a8\u589e\u957f\u3002\u5b83\u4e0d\u662f\u4e00\u4e2a\u4f20\u7edf\u7684\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u6240\u4ee5\u4e0d\u5141\u8bb8\u4f7f\u7528\u7ecf\u5178\u7684 SQL \u548c\u8fde\u63a5\uff1b\u4f46\u5b83\u4e3a\u4f60\u63d0\u4f9b\u4e86\u4e00\u79cd\u7c7b\u4f3c SQL \u7684\u67e5\u8be2\u8bed\u8a00\uff0c\u79f0\u4e3a *GQL \u3002\u6570\u636e\u5bf9\u8c61\uff0c\u79f0\u4e3a*\u5b9e\u4f53*\uff0c\u6709\u4e00\u4e2a*\u7c7b\u578b*\u548c\u4e00\u7ec4\u5c5e\u6027\u3002\u67e5\u8be2\u53ef\u4ee5\u68c0\u7d22\u7ed9\u5b9a\u79cd\u7c7b\u7684\u5b9e\u4f53\uff0c\u5e76\u6839\u636e\u5c5e\u6027\u503c\u8fdb\u884c\u8fc7\u6ee4\u548c\u6392\u5e8f\u3002\u5c5e\u6027\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u652f\u6301\u7684\u5c5e\u6027\u503c\u7c7b\u578b\u3002\u5b9e\u4f53\u53ef\u4ee5\u88ab\u5206\u7ec4\u2014\u2014\u8fd9\u5c31\u662f\u4ea4\u6613 (transaction) \u53d1\u751f\u7684\u5730\u65b9\uff1a\u4efb\u4f55\u7684\u4ea4\u6613\u90fd\u5fc5\u987b\u5728\u4e00\u4e2a\u7ec4\u5185\u3002\u4f60\u7684\u5b9e\u4f53\u6ca1\u6709\u6570\u636e\u5e93\u6a21\u5f0f\uff1a\u5b9e\u4f53\u4e4b\u95f4\u7684\u4efb\u4f55\u7ed3\u6784\u5fc5\u987b\u7531\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u63d0\u4f9b\u548c\u5f3a\u5236\u6267\u884c\u3002\u66f4\u65b0\u4f7f\u7528*\u4e50\u89c2\u7684\u5e76\u53d1\u63a7\u5236 (optimistic concurrency control)*\uff0c\u610f\u5473\u7740\u4f9d\u7167\u6700\u540e\u4e00\u6b21\u66f4\u65b0\u6539\u53d8\u6570\u636e\u3002 2) \u5e94\u7528\u7a0b\u5e8f\u8ba4\u8bc1 \u53ef\u4ee5\u4e0e\u8c37\u6b4c\u8d26\u6237\u96c6\u6210 3) URL Fetch \uff1a\u901a\u8fc7\u8fd9\u9879\u670d\u52a1\uff0c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u8bbf\u95ee\u4e92\u8054\u7f51\u4e0a\u7684\u8d44\u6e90\uff0c\u5982\u7f51\u7edc\u670d\u52a1\u6216\u5176\u4ed6\u6570\u636e\u3002 4) \u90ae\u4ef6 \uff1a\u4e5f\u662f\u4e00\u4e2a\u5185\u7f6e\u7684\u670d\u52a1\uff0c\u53ef\u4ee5\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u3002 5) Memcache \uff1a\u4e00\u4e2a\u9ad8\u6027\u80fd\u7684\u3001\u5185\u5b58\u5185\u7684\u952e\u503c\u5bf9\u7f13\u5b58\uff1b\u5b83\u5bf9\u90a3\u4e9b\u4e0d\u9700\u8981\u6570\u636e\u5b58\u50a8\u7684\u6301\u4e45\u6027\u548c\u4e8b\u52a1\u6027\u529f\u80fd\u7684\u6570\u636e\u5f88\u6709\u7528\uff0c\u6bd4\u5982\u4e34\u65f6\u6570\u636e\u6216\u4ece\u6570\u636e\u5b58\u50a8\u590d\u5236\u5230\u7f13\u5b58\u7684\u9ad8\u901f\u8bbf\u95ee\u6570\u636e\u3002 6) \u56fe\u50cf\u64cd\u4f5c \uff1a\uff08\u8bd1\u8005\u6ce8\uff1a\u539f\u6587\u8fd9\u91cc\u5c31\u6ca1\u6709\u4e1c\u897f\uff09 7) \u9884\u5b9a\u4efb\u52a1\u548c\u4efb\u52a1\u961f\u5217 (cron jobs)\uff1a\u4e00\u4e2a\u9664\u4e86\u54cd\u5e94\u7f51\u7edc\u8bf7\u6c42\u5916\uff0c\u8fd8\u53ef\u4ee5\u6267\u884c\u4efb\u52a1\u7684\u5e94\u7528\u7a0b\u5e8f\uff1b\u5b83\u53ef\u4ee5\u6309\u7167\u4f60\u914d\u7f6e\u7684\u65f6\u95f4\u8868\u6267\u884c\u8fd9\u4e9b\u4efb\u52a1\uff0c\u6bd4\u5982\u5728\u4e00\u4e2a\u6bcf\u5929\u7684\u6216\u6bcf\u5c0f\u65f6\u7684\u57fa\u6570\u4e0a\u8fd0\u884c\u3002\u53e6\u5916\uff0c\u5e94\u7528\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u6267\u884c\u7531\u5e94\u7528\u7a0b\u5e8f\u672c\u8eab\u5206\u914d\u5230\u961f\u5217\u4e2d\u7684\u4efb\u52a1\uff0c\u4f8b\u5982\u5728\u5904\u7406\u4e00\u4e2a\u8bf7\u6c42\u65f6\u521b\u5efa\u7684\u540e\u53f0\u4efb\u52a1\u3002","title":"20.1 \u4ec0\u4e48\u662f Google App Engine\uff1f"},{"location":"20.1/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Google \u5e94\u7528\u5f15\u64ce\u4e2d\u7684 Go \u4e0b\u4e00\u8282\uff1a \u4e91\u4e0a\u7684 Go","title":"\u94fe\u63a5"},{"location":"20.2/","text":"20.2 \u4e91\u4e0a\u7684 Go \u00b6 2011 \u5e74 5 \u670810 \u65e5\uff0c\u5728\u8c37\u6b4c I/O \u5927\u4f1a\u4e0a\u9996\u6b21\u5ba3\u5e03\u4e86 GAE \u5bf9 Go \u7684\u652f\u6301\u3002\u5176\u6700\u521d\u662f\u8bd5\u9a8c\u6027\u7684\uff0c\u53ea\u9488\u5bf9\u6ce8\u518c\u7684\u6d4b\u8bd5\u4eba\u5458\uff0c\u5230 2011 \u5e74 7 \u6708 21 \u65e5\u624d\u5b8c\u5168\u5bf9\u6bcf\u4e2a\u5f00\u53d1\u8005\u5f00\u653e\u3002\u5728\u64b0\u5199\u672c\u6587\u65f6\uff082012 \u5e74 1 \u6708\uff09\uff0c\u76ee\u524d\u7684 Go App Engine SDK \u662f 1.6.1\uff082011-12-13 \u53d1\u5e03\uff09\uff1b\u5b83\u53ea\u5b58\u5728\u4e8e Linux \u548c Mac OS X\uff0810.5 \u6216\u66f4\u9ad8\u7248\u672c\uff09\uff0c\u5305\u62ec 32 \u548c 64 \u4f4d\u3002\u652f\u6301\u7684 Go \u5de5\u5177\u94fe\u662f r60.3 \u7248\u672c\uff1b\u4e00\u4e9b\u53d8\u5316\u662f\u5411\u540e\u4e0d\u517c\u5bb9\u7684\uff0c\u5176 SDK \u7684 api_version \u662f 3\u3002 \u5f53 Go \u5e94\u7528\u5728 App Engine\u4e0a\u8fd0\u884c\u65f6\uff0c\u5b83\u662f\u7528 64 \u4f4d x86 \u7f16\u8bd1\u5668 (6g) \u7f16\u8bd1\u7684\u3002\u5728\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5b9e\u4f8b\u4e2d\u53ea\u8fd0\u884c\u4e00\u4e2a\u7ebf\u7a0b\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6240\u6709\u7684 goroutines \u90fd\u5728\u540c\u4e00\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u7684\u7ebf\u7a0b\u4e2d\u8fd0\u884c\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5ba2\u6237\u8bf7\u6c42\u6765\u8bf4\uff0c\u6ca1\u6709 CPU \u5e76\u884c\u6027\u53ef\u8a00\u3002 Go \u662f\u7b2c\u4e00\u4e2a\u5728 App Engine \u4e0a\u8fd0\u884c\u7684\u7f16\u8bd1\u8bed\u8a00\u3002\u5b83\u4e4b\u6240\u4ee5\u80fd\u5927\u653e\u5f02\u5f69\uff0c\u662f\u56e0\u4e3a\u5b83\u4e0e\u5176\u4ed6\u4e24\u4e2a\u8bed\u8a00\u8fd0\u884c\u65f6\u76f8\u6bd4\uff0c\u8868\u73b0\u975e\u5e38\u51fa\u8272\u3002 \u548c Java \u76f8\u6bd4\uff1aGo \u6709\u66f4\u597d\u7684\u5b9e\u4f8b\u542f\u52a8\u65f6\u95f4\u548c\u66f4\u591a\u7684\u5e76\u53d1\u53ef\u80fd\u6027\u3002 \u548c Python \u76f8\u6bd4\uff1aGo \u7684\u6267\u884c\u901f\u5ea6\u8981\u597d\u5f97\u591a\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4ec0\u4e48\u662f Google App Engine\uff1f \u4e0b\u4e00\u8282\uff1a \u5b89\u88c5 Go App Engine SDK\uff1a\u4e3a Go \u90e8\u7f72\u7684\u5f00\u53d1\u73af\u5883","title":"20.2 \u4e91\u4e0a\u7684 Go"},{"location":"20.2/#202-go","text":"2011 \u5e74 5 \u670810 \u65e5\uff0c\u5728\u8c37\u6b4c I/O \u5927\u4f1a\u4e0a\u9996\u6b21\u5ba3\u5e03\u4e86 GAE \u5bf9 Go \u7684\u652f\u6301\u3002\u5176\u6700\u521d\u662f\u8bd5\u9a8c\u6027\u7684\uff0c\u53ea\u9488\u5bf9\u6ce8\u518c\u7684\u6d4b\u8bd5\u4eba\u5458\uff0c\u5230 2011 \u5e74 7 \u6708 21 \u65e5\u624d\u5b8c\u5168\u5bf9\u6bcf\u4e2a\u5f00\u53d1\u8005\u5f00\u653e\u3002\u5728\u64b0\u5199\u672c\u6587\u65f6\uff082012 \u5e74 1 \u6708\uff09\uff0c\u76ee\u524d\u7684 Go App Engine SDK \u662f 1.6.1\uff082011-12-13 \u53d1\u5e03\uff09\uff1b\u5b83\u53ea\u5b58\u5728\u4e8e Linux \u548c Mac OS X\uff0810.5 \u6216\u66f4\u9ad8\u7248\u672c\uff09\uff0c\u5305\u62ec 32 \u548c 64 \u4f4d\u3002\u652f\u6301\u7684 Go \u5de5\u5177\u94fe\u662f r60.3 \u7248\u672c\uff1b\u4e00\u4e9b\u53d8\u5316\u662f\u5411\u540e\u4e0d\u517c\u5bb9\u7684\uff0c\u5176 SDK \u7684 api_version \u662f 3\u3002 \u5f53 Go \u5e94\u7528\u5728 App Engine\u4e0a\u8fd0\u884c\u65f6\uff0c\u5b83\u662f\u7528 64 \u4f4d x86 \u7f16\u8bd1\u5668 (6g) \u7f16\u8bd1\u7684\u3002\u5728\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5b9e\u4f8b\u4e2d\u53ea\u8fd0\u884c\u4e00\u4e2a\u7ebf\u7a0b\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6240\u6709\u7684 goroutines \u90fd\u5728\u540c\u4e00\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u7684\u7ebf\u7a0b\u4e2d\u8fd0\u884c\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5ba2\u6237\u8bf7\u6c42\u6765\u8bf4\uff0c\u6ca1\u6709 CPU \u5e76\u884c\u6027\u53ef\u8a00\u3002 Go \u662f\u7b2c\u4e00\u4e2a\u5728 App Engine \u4e0a\u8fd0\u884c\u7684\u7f16\u8bd1\u8bed\u8a00\u3002\u5b83\u4e4b\u6240\u4ee5\u80fd\u5927\u653e\u5f02\u5f69\uff0c\u662f\u56e0\u4e3a\u5b83\u4e0e\u5176\u4ed6\u4e24\u4e2a\u8bed\u8a00\u8fd0\u884c\u65f6\u76f8\u6bd4\uff0c\u8868\u73b0\u975e\u5e38\u51fa\u8272\u3002 \u548c Java \u76f8\u6bd4\uff1aGo \u6709\u66f4\u597d\u7684\u5b9e\u4f8b\u542f\u52a8\u65f6\u95f4\u548c\u66f4\u591a\u7684\u5e76\u53d1\u53ef\u80fd\u6027\u3002 \u548c Python \u76f8\u6bd4\uff1aGo \u7684\u6267\u884c\u901f\u5ea6\u8981\u597d\u5f97\u591a\u3002","title":"20.2 \u4e91\u4e0a\u7684 Go"},{"location":"20.2/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4ec0\u4e48\u662f Google App Engine\uff1f \u4e0b\u4e00\u8282\uff1a \u5b89\u88c5 Go App Engine SDK\uff1a\u4e3a Go \u90e8\u7f72\u7684\u5f00\u53d1\u73af\u5883","title":"\u94fe\u63a5"},{"location":"20.3/","text":"20.3 \u5b89\u88c5 Go App Engine SDK\uff1a\u4e3a Go \u90e8\u7f72\u7684\u5f00\u53d1\u73af\u5883 \u00b6 20.3.1 \u5b89\u88c5 \u00b6 \u4ece\u4e0b\u8f7d\u9875\u9762\u4e0b\u8f7d\u5408\u9002\u4f60\u7684\u7cfb\u7edf\u7684 GAE SDK \u538b\u7f29\u6587\u4ef6\uff1a https://cloud.google.com/appengine/downloads \u4f8b\u5982\uff1a\u4f60\u7684\u7cfb\u7edf\u662f 64 \u4f4d\u7684 Linux Ubuntu 11.10 \u7cfb\u7edf\uff0c\u5219\u4e0b\u8f7d go_appengine_sdk_linux_amd64-1.6.1.zip \u6587\u4ef6\u3002 \u7528 Archieve Manager \u6253\u5f00\u5e76\u4e14\u63d0\u53d6\u51fa\u5230\u4f60\u9009\u62e9\u7684\u4e00\u4e2a\u76ee\u5f55\u4e0b\uff08\u4f8b\u5982\u4f60\u7684 home \u76ee\u5f55\uff09\uff1a\u5b83\u4f1a\u521b\u9020\u4e00\u4e2a\u53eb\u505a google_appengine \u7684\u6587\u4ef6\uff0c\u5176\u5305\u542b\u4e86\u6574\u4e2a AppEngine for Go \u7684\u5f00\u53d1\u73af\u5883\u3002\u4f8b\u5982\u5728 /home/user/google_appengine \u6216\u8005 \"install root\"/google_appengine/goroot \u76ee\u5f55\u4e0b\u3002 \u8fd9\u4e2a\u73af\u5883\u5305\u542b\u4e86\u60a8\u5728\u672c\u5730\u5f00\u53d1\u3001\u6784\u5efa\u548c\u6d4b\u8bd5\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u6240\u9700\u7684\u4e00\u5207\uff1a\u5b83\u5305\u62ec\u4e00\u4e2a AppEngine \u670d\u52a1\u5668\u6765\u6d4b\u8bd5\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4e00\u4e2a DataStore\uff0c\u7528\u6765\u5728\u8fd9\u91cc\u5b58\u50a8\u6570\u636e\uff0c\u5c31\u50cf\u60a8\u6700\u7ec8\u5728 AppEngine \u670d\u52a1\u5668\u4e0a\u6258\u7ba1\u7684\u5b9e\u65f6\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\uff1b\u4ee5\u53ca\u5176\u4ed6 API \u652f\u6301\u548c\u5de5\u5177\uff0c\u4f7f\u60a8\u53ef\u4ee5\u6a21\u4eff\u771f\u6b63\u7684 AppEngine \u6765\u8fdb\u884c\u5f00\u53d1\u548c\u6d4b\u8bd5\u7684\u76ee\u7684\u3002\u7531\u4e8e\u8fd9\u4e2a AppEngine \u73af\u5883\u662f\u9488\u5bf9 Go \u7684\uff0c\u5b83\u4e5f\u5305\u542b\u4e86 \u9002\u5f53\u7684 Go \u7f16\u8bd1\u5668\u3001\u8f6f\u4ef6\u5305\u548c\u5de5\u5177\u4f5c\u4e3a\u4e0b\u8f7d\u7684\u4e00\u90e8\u5206\u3002 GAE-Go \u548c\u666e\u901a Go \u4e4b\u95f4\u7684\u533a\u522b\uff1a GAE-Go \u7684\u8fd0\u884c\u65f6 (runtime) \u63d0\u4f9b\u5b8c\u6574\u7684 Go \u8bed\u8a00\u548c\u51e0\u4e4e\u6240\u6709\u7684\u6807\u51c6\u5e93\uff0c\u9664\u4e86\u4e00\u4e9b\u5728 App Engine \u73af\u5883\u4e2d\u6ca1\u6709\u610f\u4e49\u7684\u4e1c\u897f\uff1a \u73b0\u5728\u6ca1\u6709 unsafe \u5305\u4e86\uff0c\u5e76\u4e14 syscall \u5305\u88ab\u4fee\u526a\u8fc7\u4e86\u3002 \u5b83\u4e0d\u652f\u6301 cgo\uff08\u4e0d\u4e0e C \u5e93\u4ea4\u4e92\uff09\uff0c\u751a\u81f3\uff1a\u4f60\u4e0d\u80fd\u5728 GAE \u9879\u76ee\u4e2d\u4f7f\u7528\u4efb\u4f55\u4e8c\u8fdb\u5236\u5e93\uff08Go \u6216\u5176\u4ed6\uff09\u3002\u4f60\u9700\u8981\u56de\u6eaf\u6240\u6709\u4e1c\u897f\u7684\u6e90\uff0c\u76f4\u5230 GAE \u7f16\u8bd1/\u94fe\u63a5\u5230\u4e86\u6240\u6709\u7684\u6e90\u4ee3\u7801\u3002 \u4e0d\u652f\u6301 go install \u5de5\u5177 GAE \u7ecf\u5e38\u843d\u540e\u4e8e\u4e3b\u53d1\u884c\u7248\u4e00\u4e2a\u6216\u591a\u4e2a\u4e3b\u8981\u7248\u672c\u3002\u6b64\u5916\uff0c\u5fc5\u987b\u8003\u8651\u5230\u6c99\u76d2\u73af\u5883\u7684\u9650\u5236\uff08\u53c2\u8003 20.1 \u8282 \uff09\u3002\u56e0\u6b64\uff0c\u5982\u679c\u5c1d\u8bd5\u6253\u5f00\u4e00\u4e2a socket \u6216\u5199\u4e00\u4e2a\u6587\u4ef6\u5c06\u8fd4\u56de\u4e00\u4e2a os.EINVAL \u9519\u8bef\u3002 \u56e0\u6b64\uff0c\u628a\u4f60\u7684 GAE \u548c\u975e GAE-Go \u5de5\u5177\u5b8c\u5168\u5206\u5f00\uff1b\u5982\u679c\u4f60\u53ea\u505a GAE \u5f00\u53d1\uff0c\u4f60\u53ef\u4ee5\u5b8c\u5168\u4e0d\u4f7f\u7528\u6807\u51c6\u5de5\u5177\u3002\u5728 google_appengine \u76ee\u5f55\u4e0b\u6709\u51e0\u4e2a Python \u811a\u672c\uff0c\u662f Google App Engine \u7684\u57fa\u672c\u5de5\u4f5c\u7a0b\u5e8f\u3002\u786e\u4fdd\u5b83\u4eec\u662f\u53ef\u6267\u884c\u7684\uff08\u5982\u679c\u4e0d\u662f\uff0c\u8bf7\u4f7f\u7528 chmod +x *.py \u547d\u4ee4\uff09\u3002\u540c\u65f6\u5c06\u5b83\u4eec\u7684\u8def\u5f84\u6dfb\u52a0\u5230 PATH \u53d8\u91cf\u4e2d\uff0c\u4ee5\u4fbf\u4f60\u5728\u8c03\u7528\u5b83\u4eec\u65f6\u4e0d\u5fc5\u5305\u542b\u5b8c\u6574\u7684\u8def\u5f84\uff1a\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u6709\u4e00\u4e2a bash shell\uff0c\u5728\u4f60\u7684 .bashrc \u6216 .profile \u6587\u4ef6\u4e2d\u6dfb\u52a0\u4e00\u884c\uff1a export PATH = /home/user/google_appengine: $PATH \u6ce8\u610f\uff1a 1) \u5982\u679c\u4f60\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u5de5\u4f5c\u7684 Go \u73af\u5883\uff08\u5c31\u50cf\u4f60\u5728\u9605\u8bfb\u672c\u4e66\u65f6\u90a3\u6837\uff09\uff0c\u8fd9\u4e2a AppEngine \u7684\u5b89\u88c5\u662f\u5728\u5b83\u4e4b\u5916\u7684\uff0c\u4e0e\u5b83\u5e73\u884c\u800c\u4e0d\u5f71\u54cd\u5b83\uff1b\u7279\u522b\u662f\u60a8\u4e0d\u9700\u8981\u6539\u53d8\u60a8\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684 Go \u73af\u5883\u53d8\u91cf\u3002AppEngine \u4e0a\u7684 Go \u6709\u5176\u81ea\u5df1\u5b8c\u5168\u72ec\u7acb\u7684\u73af\u5883\uff0c\u5305\u542b\u81ea\u5df1\u7684 Go \u7248\u672c\uff08\u5728 \"install root\"/google_appengine/goroot \u76ee\u5f55\u4e0b\uff09 2) \u4e0b\u8f7d\u6587\u6863\u4e5f\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff0c\u8fd9\u6837\u4f60\u53ef\u4ee5\u5728\u79bb\u7ebf\u65f6\u6d4f\u89c8\u3002\u4ece\u5b98\u7f51\u4e0b\u8f7d google-appengine-docs-20111011.zip \u5e76\u89e3\u538b\u3002 3) GAE \u5927\u91cf\u4f7f\u7528 Python\uff0c\u8fd9\u5728 Mac OS X \u548c Linux \u4e0a\u9ed8\u8ba4\u5b89\u88c5\uff1b\u5982\u679c\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\u4e0d\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u8bf7\u4ece www.python.org \u4e0b\u8f7d\u5e76\u5b89\u88c5 Python 2.5\u3002 \u6e90\u4ee3\u7801\uff1a\u5e93\u548c SDK \u662f\u5f00\u6e90\u7684\uff1a http://code.google.com/p/appengine-go/ \u3002\u7528\u4ee5\u4e0b\u65b9\u6cd5\u4e0b\u8f7d\uff1a bash hg clone https://code.google.com/p/appengine-go/ 5) \u4e00\u4e2a\u7ed9\u5b9a\u5e94\u7528\u7a0b\u5e8f\u7684\u6240\u6709 Go \u5305\u90fd\u5185\u7f6e\u5728\u4e00\u4e2a\u5355\u4e00\u7684\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\uff0c\u5e76\u4e14\u8bf7\u6c42\u8c03\u5ea6\u7531 Go \u7a0b\u5e8f\u672c\u8eab\u5904\u7406\u3002\u7531 Go \u7a0b\u5e8f\u672c\u8eab\u5904\u7406\uff1b\u8fd9\u4e0e Java \u548c Python SDK \u7684\u60c5\u51b5\u4e0d\u540c\u3002 \u5728 \u7b2c 20.8 \u8282 \uff0c\u6211\u4eec\u5c06\u770b\u5230\u5982\u4f55\u8fde\u63a5\u5230 GAE \u4e91\u6765\u90e8\u7f72\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u4f46\u5728\u8fd9\u4f60\u5c06\u5728\u4f60\u521a\u521a\u5b89\u88c5\u7684\u672c\u5730GAE\u73af\u5883\u4e2d\u5f00\u53d1\u3001\u6d4b\u8bd5\u548c\u8fd0\u884c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u8fd9\u662f\u5bf9\u5f00\u53d1\u73af\u5883\u6700\u597d\u7684\u6a21\u62df\u3002 20.3.2 \u68c0\u67e5\u548c\u6d4b\u8bd5 \u00b6 \u68c0\u67e5\u5b89\u88c5\uff1a \u4e3a\u4e86\u63a7\u5236\u4e00\u5207\u5de5\u4f5c\u6b63\u5e38\uff0c\u5728\u63a7\u5236\u53f0\u4e2d\u8fdb\u5165 google_appengine\uff0c\u901a\u8fc7\u8c03\u7528 dev_appserver.py \u6765\u8c03\u7528\u672c\u5730 AppEngine \u670d\u52a1\u5668\u3002 \u5982\u679c\u4f60\u770b\u5230\u4ee5\u4e0b\u5185\u5bb9\uff1a Invalid arguments Runs a development application server for an application. dev_appserver.py [options] Application root must be \u2026 \u5219\u4e00\u5207\u6b63\u5e38\u3002 \u8fd0\u884c\u4e00\u4e2a\u6f14\u793a\u5e94\u7528\u7a0b\u5e8f\uff1a \u5728 SDK \u6346\u7ed1\u5305\u4e2d\u6709\u4e00\u4e9b\u6f14\u793a\u5e94\u7528\u7a0b\u5e8f\u3002\u8ba9\u6211\u4eec\u8fd0\u884c\u4e00\u4e2a\u4ee5\u786e\u4fdd\u4e00\u5207\u6b63\u5e38\u3002 \u8fdb\u5165 google_appengine/demos\uff1a\u5728\u90a3\u91cc\u4f60\u53ef\u4ee5\u770b\u5230\u4e00\u4e9b\u6587\u4ef6\u5939\uff0c\u4f8b\u5982 helloworld\u3001guestbook \u7b49\u3002 \u5728 demos \u76ee\u5f55\u4e0b\uff0c\u6267\u884c\u547d\u4ee4\uff1a dev_appserver.py helloworld \u6ce8\u610f\uff0c\u8fd9\u5c06\u81ea\u52a8\u7f16\u8bd1\u3001\u94fe\u63a5\u548c\u8fd0\u884c Go \u7a0b\u5e8f\u3002 \u6709\u4e00\u4e9b\u8b66\u544a\u4ee5\u53ca\u4fe1\u606f \uff0c\u4f46\u5982\u679c\u6700\u540e\u4e00\u884c\u5982\u4e0b\uff1a Running helloworld on port 8080: http://localhost:8080 \u5c31\u53ef\u4ee5\u4e86\u3002\u6b64\u65f6 helloworld \u5e94\u7528\u7a0b\u5e8f\u5df2\u7ecf\u5728\u672c\u5730 AppEngine \u670d\u52a1\u5668\u4e2d\u88ab\u5b9e\u4f8b\u5316\uff0c\u5e76\u4e14\u51c6\u5907\u597d\u5728 8080 \u7aef\u53e3\u4e3a\u60a8\u673a\u5668\u4e0a\u7684\u7528\u6237\u63d0\u4f9b\u670d\u52a1\u3002 \u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u8bbf\u95ee http://localhost:8080 \u5982\u679c\u4f60\u770b\u5230\u5982\u4e0b\u9875\u9762\uff1a \u200b Hello, World! \uc138\uc0c1\uc544 \uc548\ub155!! \u4f60\u5c31\u5df2\u7ecf\u6210\u529f\u5728\u672c\u5730\u7684 GAE \u5f15\u64ce\u4e0a\u8fd0\u884c\u4e86\u4e00\u4e2a Go web \u5e94\u7528\u4e86\u3002 \u521a\u624d\u8fd0\u884c\u7684 Go \u6e90\u4ee3\u7801\u5982\u4e0b\uff1a Listing 20.1 helloworld.go: package helloworld import ( \u201c fmt \u201d \u201c net / http \u201d ) func init () { http . HandleFunc ( \u201c / \u201d , handle ) } func handle ( w http . ResponseWriter , r * http . Request ) { // some Chinese characters after World! fmt . Fprint ( w , \u201c < html >< body > Hello , World ! \uc138\uc0c1\uc544 \uc548\ub155 !! < / body >< / html > \u201d ) } \u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684 web \u5e94\u7528 \uff08\u53c2\u8003 15 \u7ae0 \uff09\uff0c\u5176\u5728 init() \u51fd\u6570\u5f53\u4e2d\u5c31\u542f\u52a8\u4e86\u6574\u4e2a\u7684 handler\u3002\u6ce8\u610f\u5b83\u88ab\u5b83\u81ea\u5df1\u7684\u5305\u5305\u542b\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4e91\u4e0a\u7684 Go \u4e0b\u4e00\u8282\uff1a \u5efa\u9020\u4f60\u81ea\u5df1\u7684 Hello world \u5e94\u7528","title":"20.3 \u5b89\u88c5 Go App Engine SDK\uff1a\u4e3a Go \u90e8\u7f72\u7684\u5f00\u53d1\u73af\u5883"},{"location":"20.3/#203-go-app-engine-sdk-go","text":"","title":"20.3 \u5b89\u88c5 Go App Engine SDK\uff1a\u4e3a Go \u90e8\u7f72\u7684\u5f00\u53d1\u73af\u5883"},{"location":"20.3/#2031","text":"\u4ece\u4e0b\u8f7d\u9875\u9762\u4e0b\u8f7d\u5408\u9002\u4f60\u7684\u7cfb\u7edf\u7684 GAE SDK \u538b\u7f29\u6587\u4ef6\uff1a https://cloud.google.com/appengine/downloads \u4f8b\u5982\uff1a\u4f60\u7684\u7cfb\u7edf\u662f 64 \u4f4d\u7684 Linux Ubuntu 11.10 \u7cfb\u7edf\uff0c\u5219\u4e0b\u8f7d go_appengine_sdk_linux_amd64-1.6.1.zip \u6587\u4ef6\u3002 \u7528 Archieve Manager \u6253\u5f00\u5e76\u4e14\u63d0\u53d6\u51fa\u5230\u4f60\u9009\u62e9\u7684\u4e00\u4e2a\u76ee\u5f55\u4e0b\uff08\u4f8b\u5982\u4f60\u7684 home \u76ee\u5f55\uff09\uff1a\u5b83\u4f1a\u521b\u9020\u4e00\u4e2a\u53eb\u505a google_appengine \u7684\u6587\u4ef6\uff0c\u5176\u5305\u542b\u4e86\u6574\u4e2a AppEngine for Go \u7684\u5f00\u53d1\u73af\u5883\u3002\u4f8b\u5982\u5728 /home/user/google_appengine \u6216\u8005 \"install root\"/google_appengine/goroot \u76ee\u5f55\u4e0b\u3002 \u8fd9\u4e2a\u73af\u5883\u5305\u542b\u4e86\u60a8\u5728\u672c\u5730\u5f00\u53d1\u3001\u6784\u5efa\u548c\u6d4b\u8bd5\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u6240\u9700\u7684\u4e00\u5207\uff1a\u5b83\u5305\u62ec\u4e00\u4e2a AppEngine \u670d\u52a1\u5668\u6765\u6d4b\u8bd5\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4e00\u4e2a DataStore\uff0c\u7528\u6765\u5728\u8fd9\u91cc\u5b58\u50a8\u6570\u636e\uff0c\u5c31\u50cf\u60a8\u6700\u7ec8\u5728 AppEngine \u670d\u52a1\u5668\u4e0a\u6258\u7ba1\u7684\u5b9e\u65f6\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\uff1b\u4ee5\u53ca\u5176\u4ed6 API \u652f\u6301\u548c\u5de5\u5177\uff0c\u4f7f\u60a8\u53ef\u4ee5\u6a21\u4eff\u771f\u6b63\u7684 AppEngine \u6765\u8fdb\u884c\u5f00\u53d1\u548c\u6d4b\u8bd5\u7684\u76ee\u7684\u3002\u7531\u4e8e\u8fd9\u4e2a AppEngine \u73af\u5883\u662f\u9488\u5bf9 Go \u7684\uff0c\u5b83\u4e5f\u5305\u542b\u4e86 \u9002\u5f53\u7684 Go \u7f16\u8bd1\u5668\u3001\u8f6f\u4ef6\u5305\u548c\u5de5\u5177\u4f5c\u4e3a\u4e0b\u8f7d\u7684\u4e00\u90e8\u5206\u3002 GAE-Go \u548c\u666e\u901a Go \u4e4b\u95f4\u7684\u533a\u522b\uff1a GAE-Go \u7684\u8fd0\u884c\u65f6 (runtime) \u63d0\u4f9b\u5b8c\u6574\u7684 Go \u8bed\u8a00\u548c\u51e0\u4e4e\u6240\u6709\u7684\u6807\u51c6\u5e93\uff0c\u9664\u4e86\u4e00\u4e9b\u5728 App Engine \u73af\u5883\u4e2d\u6ca1\u6709\u610f\u4e49\u7684\u4e1c\u897f\uff1a \u73b0\u5728\u6ca1\u6709 unsafe \u5305\u4e86\uff0c\u5e76\u4e14 syscall \u5305\u88ab\u4fee\u526a\u8fc7\u4e86\u3002 \u5b83\u4e0d\u652f\u6301 cgo\uff08\u4e0d\u4e0e C \u5e93\u4ea4\u4e92\uff09\uff0c\u751a\u81f3\uff1a\u4f60\u4e0d\u80fd\u5728 GAE \u9879\u76ee\u4e2d\u4f7f\u7528\u4efb\u4f55\u4e8c\u8fdb\u5236\u5e93\uff08Go \u6216\u5176\u4ed6\uff09\u3002\u4f60\u9700\u8981\u56de\u6eaf\u6240\u6709\u4e1c\u897f\u7684\u6e90\uff0c\u76f4\u5230 GAE \u7f16\u8bd1/\u94fe\u63a5\u5230\u4e86\u6240\u6709\u7684\u6e90\u4ee3\u7801\u3002 \u4e0d\u652f\u6301 go install \u5de5\u5177 GAE \u7ecf\u5e38\u843d\u540e\u4e8e\u4e3b\u53d1\u884c\u7248\u4e00\u4e2a\u6216\u591a\u4e2a\u4e3b\u8981\u7248\u672c\u3002\u6b64\u5916\uff0c\u5fc5\u987b\u8003\u8651\u5230\u6c99\u76d2\u73af\u5883\u7684\u9650\u5236\uff08\u53c2\u8003 20.1 \u8282 \uff09\u3002\u56e0\u6b64\uff0c\u5982\u679c\u5c1d\u8bd5\u6253\u5f00\u4e00\u4e2a socket \u6216\u5199\u4e00\u4e2a\u6587\u4ef6\u5c06\u8fd4\u56de\u4e00\u4e2a os.EINVAL \u9519\u8bef\u3002 \u56e0\u6b64\uff0c\u628a\u4f60\u7684 GAE \u548c\u975e GAE-Go \u5de5\u5177\u5b8c\u5168\u5206\u5f00\uff1b\u5982\u679c\u4f60\u53ea\u505a GAE \u5f00\u53d1\uff0c\u4f60\u53ef\u4ee5\u5b8c\u5168\u4e0d\u4f7f\u7528\u6807\u51c6\u5de5\u5177\u3002\u5728 google_appengine \u76ee\u5f55\u4e0b\u6709\u51e0\u4e2a Python \u811a\u672c\uff0c\u662f Google App Engine \u7684\u57fa\u672c\u5de5\u4f5c\u7a0b\u5e8f\u3002\u786e\u4fdd\u5b83\u4eec\u662f\u53ef\u6267\u884c\u7684\uff08\u5982\u679c\u4e0d\u662f\uff0c\u8bf7\u4f7f\u7528 chmod +x *.py \u547d\u4ee4\uff09\u3002\u540c\u65f6\u5c06\u5b83\u4eec\u7684\u8def\u5f84\u6dfb\u52a0\u5230 PATH \u53d8\u91cf\u4e2d\uff0c\u4ee5\u4fbf\u4f60\u5728\u8c03\u7528\u5b83\u4eec\u65f6\u4e0d\u5fc5\u5305\u542b\u5b8c\u6574\u7684\u8def\u5f84\uff1a\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u6709\u4e00\u4e2a bash shell\uff0c\u5728\u4f60\u7684 .bashrc \u6216 .profile \u6587\u4ef6\u4e2d\u6dfb\u52a0\u4e00\u884c\uff1a export PATH = /home/user/google_appengine: $PATH \u6ce8\u610f\uff1a 1) \u5982\u679c\u4f60\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u5de5\u4f5c\u7684 Go \u73af\u5883\uff08\u5c31\u50cf\u4f60\u5728\u9605\u8bfb\u672c\u4e66\u65f6\u90a3\u6837\uff09\uff0c\u8fd9\u4e2a AppEngine \u7684\u5b89\u88c5\u662f\u5728\u5b83\u4e4b\u5916\u7684\uff0c\u4e0e\u5b83\u5e73\u884c\u800c\u4e0d\u5f71\u54cd\u5b83\uff1b\u7279\u522b\u662f\u60a8\u4e0d\u9700\u8981\u6539\u53d8\u60a8\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684 Go \u73af\u5883\u53d8\u91cf\u3002AppEngine \u4e0a\u7684 Go \u6709\u5176\u81ea\u5df1\u5b8c\u5168\u72ec\u7acb\u7684\u73af\u5883\uff0c\u5305\u542b\u81ea\u5df1\u7684 Go \u7248\u672c\uff08\u5728 \"install root\"/google_appengine/goroot \u76ee\u5f55\u4e0b\uff09 2) \u4e0b\u8f7d\u6587\u6863\u4e5f\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff0c\u8fd9\u6837\u4f60\u53ef\u4ee5\u5728\u79bb\u7ebf\u65f6\u6d4f\u89c8\u3002\u4ece\u5b98\u7f51\u4e0b\u8f7d google-appengine-docs-20111011.zip \u5e76\u89e3\u538b\u3002 3) GAE \u5927\u91cf\u4f7f\u7528 Python\uff0c\u8fd9\u5728 Mac OS X \u548c Linux \u4e0a\u9ed8\u8ba4\u5b89\u88c5\uff1b\u5982\u679c\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\u4e0d\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u8bf7\u4ece www.python.org \u4e0b\u8f7d\u5e76\u5b89\u88c5 Python 2.5\u3002 \u6e90\u4ee3\u7801\uff1a\u5e93\u548c SDK \u662f\u5f00\u6e90\u7684\uff1a http://code.google.com/p/appengine-go/ \u3002\u7528\u4ee5\u4e0b\u65b9\u6cd5\u4e0b\u8f7d\uff1a bash hg clone https://code.google.com/p/appengine-go/ 5) \u4e00\u4e2a\u7ed9\u5b9a\u5e94\u7528\u7a0b\u5e8f\u7684\u6240\u6709 Go \u5305\u90fd\u5185\u7f6e\u5728\u4e00\u4e2a\u5355\u4e00\u7684\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\uff0c\u5e76\u4e14\u8bf7\u6c42\u8c03\u5ea6\u7531 Go \u7a0b\u5e8f\u672c\u8eab\u5904\u7406\u3002\u7531 Go \u7a0b\u5e8f\u672c\u8eab\u5904\u7406\uff1b\u8fd9\u4e0e Java \u548c Python SDK \u7684\u60c5\u51b5\u4e0d\u540c\u3002 \u5728 \u7b2c 20.8 \u8282 \uff0c\u6211\u4eec\u5c06\u770b\u5230\u5982\u4f55\u8fde\u63a5\u5230 GAE \u4e91\u6765\u90e8\u7f72\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u4f46\u5728\u8fd9\u4f60\u5c06\u5728\u4f60\u521a\u521a\u5b89\u88c5\u7684\u672c\u5730GAE\u73af\u5883\u4e2d\u5f00\u53d1\u3001\u6d4b\u8bd5\u548c\u8fd0\u884c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u8fd9\u662f\u5bf9\u5f00\u53d1\u73af\u5883\u6700\u597d\u7684\u6a21\u62df\u3002","title":"20.3.1 \u5b89\u88c5"},{"location":"20.3/#2032","text":"\u68c0\u67e5\u5b89\u88c5\uff1a \u4e3a\u4e86\u63a7\u5236\u4e00\u5207\u5de5\u4f5c\u6b63\u5e38\uff0c\u5728\u63a7\u5236\u53f0\u4e2d\u8fdb\u5165 google_appengine\uff0c\u901a\u8fc7\u8c03\u7528 dev_appserver.py \u6765\u8c03\u7528\u672c\u5730 AppEngine \u670d\u52a1\u5668\u3002 \u5982\u679c\u4f60\u770b\u5230\u4ee5\u4e0b\u5185\u5bb9\uff1a Invalid arguments Runs a development application server for an application. dev_appserver.py [options] Application root must be \u2026 \u5219\u4e00\u5207\u6b63\u5e38\u3002 \u8fd0\u884c\u4e00\u4e2a\u6f14\u793a\u5e94\u7528\u7a0b\u5e8f\uff1a \u5728 SDK \u6346\u7ed1\u5305\u4e2d\u6709\u4e00\u4e9b\u6f14\u793a\u5e94\u7528\u7a0b\u5e8f\u3002\u8ba9\u6211\u4eec\u8fd0\u884c\u4e00\u4e2a\u4ee5\u786e\u4fdd\u4e00\u5207\u6b63\u5e38\u3002 \u8fdb\u5165 google_appengine/demos\uff1a\u5728\u90a3\u91cc\u4f60\u53ef\u4ee5\u770b\u5230\u4e00\u4e9b\u6587\u4ef6\u5939\uff0c\u4f8b\u5982 helloworld\u3001guestbook \u7b49\u3002 \u5728 demos \u76ee\u5f55\u4e0b\uff0c\u6267\u884c\u547d\u4ee4\uff1a dev_appserver.py helloworld \u6ce8\u610f\uff0c\u8fd9\u5c06\u81ea\u52a8\u7f16\u8bd1\u3001\u94fe\u63a5\u548c\u8fd0\u884c Go \u7a0b\u5e8f\u3002 \u6709\u4e00\u4e9b\u8b66\u544a\u4ee5\u53ca\u4fe1\u606f \uff0c\u4f46\u5982\u679c\u6700\u540e\u4e00\u884c\u5982\u4e0b\uff1a Running helloworld on port 8080: http://localhost:8080 \u5c31\u53ef\u4ee5\u4e86\u3002\u6b64\u65f6 helloworld \u5e94\u7528\u7a0b\u5e8f\u5df2\u7ecf\u5728\u672c\u5730 AppEngine \u670d\u52a1\u5668\u4e2d\u88ab\u5b9e\u4f8b\u5316\uff0c\u5e76\u4e14\u51c6\u5907\u597d\u5728 8080 \u7aef\u53e3\u4e3a\u60a8\u673a\u5668\u4e0a\u7684\u7528\u6237\u63d0\u4f9b\u670d\u52a1\u3002 \u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u8bbf\u95ee http://localhost:8080 \u5982\u679c\u4f60\u770b\u5230\u5982\u4e0b\u9875\u9762\uff1a \u200b Hello, World! \uc138\uc0c1\uc544 \uc548\ub155!! \u4f60\u5c31\u5df2\u7ecf\u6210\u529f\u5728\u672c\u5730\u7684 GAE \u5f15\u64ce\u4e0a\u8fd0\u884c\u4e86\u4e00\u4e2a Go web \u5e94\u7528\u4e86\u3002 \u521a\u624d\u8fd0\u884c\u7684 Go \u6e90\u4ee3\u7801\u5982\u4e0b\uff1a Listing 20.1 helloworld.go: package helloworld import ( \u201c fmt \u201d \u201c net / http \u201d ) func init () { http . HandleFunc ( \u201c / \u201d , handle ) } func handle ( w http . ResponseWriter , r * http . Request ) { // some Chinese characters after World! fmt . Fprint ( w , \u201c < html >< body > Hello , World ! \uc138\uc0c1\uc544 \uc548\ub155 !! < / body >< / html > \u201d ) } \u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684 web \u5e94\u7528 \uff08\u53c2\u8003 15 \u7ae0 \uff09\uff0c\u5176\u5728 init() \u51fd\u6570\u5f53\u4e2d\u5c31\u542f\u52a8\u4e86\u6574\u4e2a\u7684 handler\u3002\u6ce8\u610f\u5b83\u88ab\u5b83\u81ea\u5df1\u7684\u5305\u5305\u542b\u3002","title":"20.3.2 \u68c0\u67e5\u548c\u6d4b\u8bd5"},{"location":"20.3/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4e91\u4e0a\u7684 Go \u4e0b\u4e00\u8282\uff1a \u5efa\u9020\u4f60\u81ea\u5df1\u7684 Hello world \u5e94\u7528","title":"\u94fe\u63a5"},{"location":"20.4/","text":"20.4 \u5efa\u9020\u4f60\u81ea\u5df1\u7684 Hello world \u5e94\u7528 \u00b6 \u73b0\u5728\u8ba9\u6211\u4eec\u5efa\u9020\u4e00\u4e2a\u50cf 20.3 \u8282 \u4e2d\u7684 demo \u4e00\u6837\u7684\u5e94\u7528\uff0c\u4f46\u8fd9\u6b21\u6211\u4eec\u4f1a\u63a2\u7d22\u5f97\u66f4\u6df1\u4e00\u4e9b\u3002 20.4.1 \u6620\u50cf\u7ed3\u6784 (map-structure)\uff1a\u521b\u9020\u4e00\u4e2a\u7b80\u5355\u7684 http-handler \u00b6 \u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\uff0c\u5e76\u7ed9\u5b83\u8d77\u4e00\u4e2a\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7279\u6709\u7684\u540d\u5b57\uff0c\u5982\uff1ahelloapp\u3002\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u6240\u6709\u6587\u4ef6\u90fd\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e2d\u3002\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e2d\u518d\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a hello \u7684\u76ee\u5f55\u3002\u8fd9\u5c06\u5305\u542b\u6211\u4eec\u7684 hello \u5305\u7684 Go \u6e90\u4ee3\u7801\u6587\u4ef6\u3002\u7136\u540e\u5728 hello \u76ee\u5f55\u4e0b\uff0c\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a helloworld2.go \u7684\u6587\u4ef6\uff0c\u5e76\u8d4b\u4e88\u5176\u4ee5\u4e0b\u5185\u5bb9\uff08\u4e8b\u5b9e\u4e0a\u4e0e\u4e0a\u6587\u4e2d\u7684 demo \u5e94\u7528\u51e0\u4e4e\u76f8\u540c\uff09\uff1a Listing 20.2 helloworld2_version1.go : package hello import ( \"fmt\" \"net/http\" ) func init () { http . HandleFunc ( \"/\" , handler ) } func handler ( w http . ResponseWriter , r * http . Request ) { fmt . Fprint ( w , \"Hello, world!\" ) } \u6ce8\u610f\u5305\u7684\u540d\u79f0\uff1a\u5728\u7f16\u5199\u72ec\u7acb\u7684 Go \u7a0b\u5e8f\u65f6\uff0c\u6211\u4eec\u4f1a\u628a\u8fd9\u6bb5\u4ee3\u7801\u653e\u5728 package main \u4e2d\uff0c\u4f46 Go GAE Runtime \u63d0\u4f9b\u4e86 main \u5305\u548c HTTP Listener\uff0c\u6240\u4ee5\u4f60\u5e94\u8be5\u628a\u4f60\u7684\u4ee3\u7801\u653e\u5728\u4f60\u9009\u62e9\u7684\u5305\u4e2d\uff0c\u6b64\u65f6\u6307\u7684\u662f hello \u5305\u3002\u5176\u6b21\uff0c\u7531\u4e8e Go App Engine \u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7 Web \u670d\u52a1\u5668\u4e0e\u5916\u90e8\u4e16\u754c\u8fdb\u884c\u901a\u4fe1\uff0c\u6240\u4ee5\u7f16\u5199\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u975e\u5e38\u50cf\u7f16\u5199\u72ec\u7acb\u7684 Go Web \u5e94\u7528\u7a0b\u5e8f\uff08\u89c1 \u7b2c 15 \u7ae0 \uff09\u3002\u6240\u4ee5\u6211\u4eec\u5bfc\u5165 http \u5305\uff0c\u5e76\u4e3a\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7684\u4e0d\u540curl \u6a21\u5f0f\u5b9a\u4e49\u5904\u7406\u51fd\u6570\u3002\u6211\u4eec\u6ca1\u6709 main() \u51fd\u6570\uff0c\u6240\u4ee5\u5904\u7406\u7a0b\u5e8f\u7684\u8bbe\u7f6e\u5fc5\u987b\u79fb\u5230 init() \u51fd\u6570\u4e2d\u53bb\u3002\u53e6\u5916\uff0c\u7f51\u7edc\u670d\u52a1\u5668\u672c\u8eab\u7684\u542f\u52a8\u662f\u7531 GAE \u4e3a\u6211\u4eec\u5b8c\u6210\u7684\u3002\u6211\u4eec\u7684 Go \u5305 hello \u5bf9\u4efb\u4f55\u8bf7\u6c42\u7684\u54cd\u5e94\u662f\u53d1\u9001\u4e00\u4e2a\u5305\u542b \"Hello, world!\"\u7684\u6d88\u606f\u3002 20.4.2 \u521b\u5efa\u914d\u7f6e\u6587\u4ef6 app.yaml \u00b6 \u6240\u6709\u7684 GAE \u5e94\u7528\u7a0b\u5e8f\u90fd\u9700\u8981\u4e00\u4e2a yaml \u914d\u7f6e\u6587\u4ef6 app.yaml\uff0c\u5b83\u5305\u542b\u4e86 GAE \u7684\u5e94\u7528\u7a0b\u5e8f\u5143\u6570\u636e\uff08yaml \u662f\u4e00\u79cd\u6587\u672c\u6587\u4ef6\u683c\u5f0f\uff0c\u7ecf\u5e38\u7528\u4e8e\u5f00\u6e90\u9879\u76ee\uff0c\u66f4\u591a\u4fe1\u606f\u89c1 www.yaml.org \uff09\u3002\u53e6\u5916\uff0c\u8fd9\u4e2a\u6587\u4ef6\u544a\u8bc9 App Engine \u670d\u52a1\u8981\u4f7f\u7528\u54ea\u4e2a\u8fd0\u884c\u65f6\uff0c\u54ea\u4e9b URL \u5e94\u8be5\u7531\u6211\u4eec\u7684 Go \u7a0b\u5e8f\u5904\u7406\u3002\u4f60\u53ef\u4ee5\u4ece\u6f14\u793a\u7a0b\u5e8f\u4e2d\u590d\u5236\u4e00\u4e2a app.yaml \u6587\u4ef6\uff0c\u628a\u5b83\u653e\u5728\u6620\u50cf helloapp \u91cc\u9762\uff0c\u5e76\u5220\u9664 favicon.ico \u7684 handler\u3002 \u5e94\u7528\u7a0b\u5e8f\u7684\u6620\u50cf/\u6587\u4ef6\u7ed3\u6784\u5e94\u8be5\u5982\u4e0b\uff1a helloapp\\ // map of the GAE application app.yaml // configuration file hello\\ // map containing the source files helloworld2.go \u53ea\u6709app.yaml\u662f\u5fc5\u987b\u7684\u540d\u5b57\uff0c\u6620\u50cf\u3001Go\u6587\u4ef6\u548c\u5305\u7684\u540d\u5b57\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u9009\u62e9\uff0c\u4f46\u6309\u7167\u60ef\u4f8b\uff0c\u5b83\u4eec\u7684\u540d\u5b57\u662f\u4e00\u6837\u7684\u6216\u7c7b\u4f3c\u7684\uff0c\u6839\u6620\u50cf\u7684\u540e\u7f00\u662f app\u3002 app.yaml \u7531 AppEngine \u8bfb\u53d6\u548c\u89e3\u91ca\uff0cAppEngine \u4ee5\u4e0b\u65f6\u95f4\u6bb5\u5185\u6258\u7ba1\u548c\u6267\u884c\u4f60\u7684\u7a0b\u5e8f\uff1a \u5f53\u60a8\u5c06\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4f20\u5230 AppEngine \u4ee5\u4f7f\u5176\u88ab\u6258\u7ba1\u3002 \u5f53\u5b83\u88ab\u6267\u884c\u65f6\u3002 \u5f53\u7528\u6237\u8bbf\u95ee\u5b83\u65f6\u3002 \u5b83\u53ef\u4ee5\u5305\u542b\u6ce8\u91ca\uff0c\u524d\u9762\u6709\u4e00\u4e2a # \uff0c\u5e76\u5305\u542b\u4ee5\u4e0b\u8bed\u53e5\uff1a application : helloworld version : 1 runtime : go api_version : 3 # routing-table: routing of different urls to different types of handlers handlers : - url : /.* script : _go_app app.yaml \u4e2d\u7684 application: value helloworld \u662f\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u6807\u8bc6\u7b26\u3002\u8fd9\u4e2a\u503c\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u662f\u4efb\u4f55\u4e1c\u897f\uff1b\u4ee5\u540e\u5728\u5411 App Engine \u6ce8\u518c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u60a8\u5c06\u9009\u62e9\u4e00\u4e2a\u552f\u4e00\u7684\u6807\u8bc6\u7b26\uff08\u5728\u6240\u6709 GAE \u5e94\u7528\u7a0b\u5e8f\u4e2d\u552f\u4e00\uff09\u5e76\u66f4\u65b0\u8fd9\u4e2a\u503c\u3002 version \u8868\u793a\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u6b63\u5728\u8fd0\u884c\u7684\u7248\u672c\uff1a\u4e8b\u5b9e\u4e0a\uff0cGAE \u53ef\u4ee5\u5e76\u884c\u5730\u8fd0\u884c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u51e0\u4e2a\u7248\u672c\uff0c\u4f46\u5176\u4e2d\u4e00\u4e2a\u5fc5\u987b\u88ab\u6307\u5b9a\u4e3a\u9ed8\u8ba4\u7248\u672c\u3002\u5b83\u53ef\u4ee5\u5305\u542b\u5b57\u6bcd\u6570\u5b57\u5b57\u7b26\uff0c\u4ee5\u53ca\u8fde\u5b57\u7b26\u3002\u56e0\u6b64\uff0c\u4f60\u53ef\u4ee5\u8fd0\u884c\u4e00\u4e2a\u6d4b\u8bd5\u7248\u672c\uff0c\u5982T2-31 \u548c\u4e00\u4e2a\u751f\u4ea7\u7248\u672c P2-1\u3002 runtime \u662f\u7f16\u5199\u5e94\u7528\u7a0b\u5e8f\u7684\u8bed\u8a00\uff08\u5176\u4ed6\u5141\u8bb8\u7684\u503c\u662f Java \u548c Python\uff09\u3002\u5982\u679c\u4f60\u5728\u4e0a\u4f20\u5e94\u7528\u8f6f\u4ef6\u7684\u65b0\u7248\u672c\u4e4b\u524d\u8c03\u6574\u5b83\uff0cApp Engine \u5c06\u4fdd\u7559\u4ee5\u524d\u7684\u7248\u672c\uff0c\u5e76\u8ba9\u4f60\u4f7f\u7528\u7ba1\u7406\u63a7\u5236\u53f0\u56de\u9000\u5230\u4ee5\u524d\u7684\u7248\u672c\u3002 api_version \u662f\u672c SDK \u4e2d\u4f7f\u7528\u7684 Go API \u7684\u7248\u672c\uff1b\u5b83\u4eec\u53ef\u80fd\u4e0e\u4ee5\u524d\u7684\u7248\u672c\u4e0d\u517c\u5bb9\u3002\u4f60\u53ef\u4ee5\u5728\u4ee5\u524d\u7684 api_version SDK \u4e2d\u6784\u5efa\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u65e9\u671f\u7248\u672c\uff1b\u5982\u679c GAE \u4ecd\u7136\u5141\u8bb8\uff0c\u5b83\u4eec\u53ef\u4ee5\u7ee7\u7eed\u8fd0\u884c\uff0c\u4f46\u901a\u5e38\u6709\u4e00\u4e2a\u65f6\u95f4\u9650\u5236\uff0c\u800c\u4f60\u5e94\u8be5\u5c06\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u66f4\u65b0\u5230\u65b0\u7684api\u7248\u672c\uff1abin map\u4e2d\u7684gofix\u5de5\u5177\u53ef\u80fd\u80fd\u591f\u5b8c\u6210\u5927\u90e8\u5206\u6240\u9700\u7684\u66f4\u65b0\u3002 handler \u90e8\u5206\u662f\u5faa\u73af\u8868 (routing table)\uff1a\u5b83\u544a\u8bc9 GAE \u5982\u4f55\u5c06\u53d1\u9001\u5230\u670d\u52a1\u5668\u4e0a\u7684\u8bf7\u6c42\u6620\u5c04\u5230\u4ee3\u7801\u4e2d\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4f20\u5165\u7684\u8bf7\u6c42 url \u6a21\u5f0f\uff08\u672c\u5730\u5f00\u53d1\u65f6\u5728 http://localhost:8080/ \u4e4b\u540e\u7684\u90e8\u5206\uff0c\u5728\u4e91\u7aef\u8fd0\u884c\u65f6\u5728 http://appname.appspot.com/ \u4e4b\u540e\u7684\u90e8\u5206\uff09\u4e0e url \u540e\u9762\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u76f8\u5339\u914d\u3002 \u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u5339\u914d\u7684 url \u6a21\u5f0f\uff0c\u76f8\u5e94\u7684\u811a\u672c\u4f1a\u88ab\u6267\u884c\u3002\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u8def\u5f84\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f /.* \u76f8\u5339\u914d\u7684 URL \u8bf7\u6c42\uff08\u5373\uff1a\u6240\u6709 URL\uff09\u90fd\u5e94\u8be5\u7531 Go \u7a0b\u5e8f\u5904\u7406\u3002 _go_app \u503c\u662f dev_appserver.py \u8bc6\u522b\u7684\u4e00\u4e2a\u795e\u5947\u5b57\u7b26\u4e32\uff1b\u751f\u4ea7\u7684 App Engine \u670d\u52a1\u5668\u4f1a\u5ffd\u7565\u5b83\u3002 \u5982\u679c\u4f60\u770b\u4e00\u4e0b\u6f14\u793a\u7684 helloworld \u5e94\u7528\u7a0b\u5e8f\u7684 app.yaml \u6587\u4ef6\uff0c\u4f60\u4f1a\u53d1\u73b0\u5b83\u5728\u5904\u7406\u7a0b\u5e8f\u4e2d\u5305\u542b\u4e00\u4e2a\u521d\u59cb\u90e8\u5206\uff1a handlers : - url : /favicon\\.ico static_files : favicon.ico upload : favicon\\.ico - url : /.* script : _go_app \u4e00\u4e9b\u6587\u4ef6 ( static_files ) \uff0c\u5982\u56fe\u7247\uff0c\u4e0d\u4f1a\u6539\u53d8\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u662f\u56fe\u7247favicon.ico\uff09\u3002\u8fd9\u4e9b\u6587\u4ef6\u53ef\u4ee5\u653e\u5728\u4e0d\u540c\u7684 AppEngine \u670d\u52a1\u5668\u4e0a\u7684\u4e00\u79cd\u5171\u540c\u7f13\u5b58\u4e2d\uff0c\u4f7f\u5b83\u4eec\u80fd\u591f\u66f4\u5feb\u5730\u63d0\u4f9b\u7ed9\u7528\u6237\u3002\u5982\u679c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u6709\u8bb8\u591a\u8fd9\u6837\u7684\u6587\u4ef6\uff0c\u628a\u5b83\u4eec\u653e\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u76ee\u5f55\u4e2d\uff0c\u6309\u60ef\u4f8b\u547d\u540d\u4e3a static\u3002 upload \u8868\u793a\u5f53\u60a8\u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u4ec0\u4e48\u5fc5\u987b\u4e0a\u4f20\u5230\u4e91\u7aef\uff1b\u4f8b\u5982\uff0c\u5982\u679c\u5b83\u5305\u542b images/(*.ico|*.gif|*.jpg)\uff0c\u5b83\u5c06\u628a\u672c\u5730 images \u76ee\u5f55\u5185\u6240\u6709\u8fd9\u4e9b\u7c7b\u578b\u7684\u6587\u4ef6\u4e0a\u4f20\u5230 AppEngine \u670d\u52a1\u5668\u3002 \u6b63\u5982\u6211\u4eec\u5c06\u770b\u5230\u7684\uff0c\u5927\u591a\u6570 GAE \u5e94\u7528\u7a0b\u5e8f\u4e5f\u4f7f\u7528\u6a21\u677f\u6587\u4ef6\uff0c\u8fd9\u4e9b\u6587\u4ef6\u53ef\u4ee5\u5b58\u50a8\u5728\u6839\u5e94\u7528\u7a0b\u5e8f\u5730\u56fe\u4e2d\uff0c\u6216\u5728\u4e00\u4e2a\u7279\u6b8a\u7684\u76ee\u5f55 tmpl \u4e2d\u3002 \u56e0\u6b64\uff0c\u4e00\u4e2a GAE \u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u822c\u7ed3\u6784\u53ef\u80fd\u662f\uff1a yourapp\\ // map of the GAE application app.yaml // configuration file yourpackage\\ // map containing the source files package1.go \u2026 tmpl\\ // map containing template files root.html update.html \u2026 static\\ // map containing static files yourapp.ico \u2026 \u4e0e demo \u4e00\u6837\uff0c\u5728\u63a7\u5236\u53f0\u7a97\u53e3\u4e2d\u8fdb\u5165\u5305\u542b helloapp \u7684\u6620\u50cf\uff0c\u5e76\u53d1\u51fa\u5982\u4e0b\u547d\u4ee4\uff1a dev_appserver.py helloapp \u6216\u8005\u4f60\u53ef\u4ee5\u901a\u8fc7\u4efb\u4f55\u4e00\u4e2a\u6620\u50cf\u7684 console \u7a97\u53e3\u5e76\u4e14\u5524\u9192\uff1a dev_appserver.py /path_to_map_helloapp/helloapp \u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u7f51\u7edc\u670d\u52a1\u5668\u73b0\u5728\u90fd\u5728\u8fd0\u884c\uff0c\u5e76\u76d1\u542c 8080 \u7aef\u53e3\u7684\u8bf7\u6c42\u3002\u901a\u8fc7\u5728\u4f60\u7684\u7f51\u7edc\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95ee\u4ee5\u4e0b URL \u6765\u6d4b\u8bd5\u8be5\u5e94\u7528\u7a0b\u5e8f\uff1a http://localhost:8080/ \u4f60\u5e94\u8be5\u770b\u5230\uff1a Hello, world! \u5728\u670d\u52a1\u5668\u63a7\u5236\u53f0\uff0c\u51fa\u73b0\u4ee5\u4e0b\u6587\u5b57\uff1a $ dev_appserver.py helloapp INFO 2011-10-31 08:54:29,021 appengine_rpc.py:159] Server: appengine.google.com INFO 2011-10-31 08:54:29,025 appcfg.py:463] Checking for updates to the SDK. INFO 2011-10-31 08:54:29,316 appcfg.py:481] The SDK is up to date. WARNING 2011-10-31 08:54:29,316 datastore_file_stub.py:512] Could not read datastore data from /tmp/dev_appserver.datastore INFO 2011-10-31 08:54:29,317 rdbms_sqlite.py:58] Connecting to SQLite database \u2018\u2019 with file \u2018/tmp/dev_appserver.rdbms\u2019 INFO 2011-10-31 08:54:29,638 dev_appserver_multiprocess.py:637] Running application helloworld on port 8080: http://localhost:8080 <-(A) INFO 2011-10-31 08:56:13,148 __init__.py:365] building _go_app <-(B) INFO 2011-10-31 08:56:15,073 __init__.py:351] running _go_app INFO 2011-10-31 08:56:15,188 dev_appserver.py:4143] \u201cGET / HTTP/1.1\u201d 200 - <-(C) \u5728 (A) \u5904\u670d\u52a1\u5668\u51c6\u5907\u597d\u4e86\uff0c\u5728 (B) \u5904\u670d\u52a1\u5668\u7f16\u8bd1\u5e76\u8fd0\u884c Go \u7a0b\u5e8f\uff0c\u5728 (C) \u5904\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u8bf7\u6c42\u8fdb\u6765\u4e86\uff0c\u6b64\u65f6 HTML \u8f93\u51fa\u9875\u9762\u88ab\u63d0\u4f9b\u5230\u670d\u52a1\u5668\u4e0a\u3002 \u5f53\u670d\u52a1\u5668\u88ab\u7ec8\u6b62\u6216\u5c1a\u672a\u542f\u52a8\uff0c\u800c\u5ba2\u6237\u7aef\u8bf7\u6c42\u7f51\u5740 http://localhost:8080/ \uff0c\u6d4f\u89c8\u5668\u5728FireFox \u4e2d\u4f1a\u6253\u5370\u51fa\u8fd9\u6837\u7684\u4fe1\u606f\uff1a Unable to connect Firefox can\u2019t establish a connection to the server at localhost:8080. 20.4.3 \u8fed\u4ee3\u5f00\u53d1 \u00b6 \u5f00\u53d1\u5e94\u7528\u7684\u670d\u52a1\u5668\u4f1a\u89c2\u5bdf\u4f60\u7684\u6587\u4ef6\u4e2d\u7684\u53d8\u5316\uff0c\u5f53\u4f60\u66f4\u65b0\u4f60\u7684\u6e90\u4ee3\u7801\u65f6\uff08\u7f16\u8f91+\u4fdd\u5b58\uff09\uff0c\u5b83\u91cd\u65b0\u7f16\u8bd1\u5b83\u4eec\u5e76\u91cd\u65b0\u542f\u52a8\u4f60\u7684\u672c\u5730\u5e94\u7528\uff1b\u4e0d\u9700\u8981\u91cd\u65b0\u542f\u52a8 dev_appserver.py \u73b0\u5728\u8bd5\u8bd5\uff1a\u8ba9 Web \u670d\u52a1\u5668\u8fd0\u884c\uff0c\u7136\u540e\u7f16\u8f91 helloworld2.go\uff0c\u5c06 \"Hello, world!\" \u6539\u4e3a\u5176\u4ed6\u5185\u5bb9\u3002\u91cd\u65b0\u52a0\u8f7d http://localhost:8080/ \uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u53d8\u5316\u4e86\uff1a\u8fd9\u548c\u7f16\u5199 Rails \u6216 Django \u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\uff0c\u90fd\u662f\u52a8\u6001\u8fd0\u884c\u7684\u3002 \u8981\u5173\u95ed Web \u670d\u52a1\u5668\uff0c\u786e\u4fdd\u7ec8\u7aef\u7a97\u53e3\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\uff0c\u7136\u540e\u6309 Ctrl+C\uff08\u6216\u9002\u5f53\u7684\u7528\u4e8e\u63a7\u5236\u53f0\u7684 \"break \"\u952e\uff09\uff1a INFO 2011-10-31 08:56:21,420 dev_appserver.py:4143] \u201cGET / HTTP/1.1\u201d 200 - INFO 2011-10-31 08:57:59,836 __init__.py:365] building _go_app <-(D) INFO 2011-10-31 08:58:00,365 __init__.py:351] running _go_app INFO 2011-10-31 08:58:00,480 dev_appserver.py:4143] \u201cGET / HTTP/1.1\u201d 200 - ^CINFO 2011-10-31 08:58:32,769 dev_appserver_main.py:665] Server interrupted by user, terminating <-(E) \u8fd9\u53ef\u4ee5\u4ece\u4e0a\u9762\u7b2c\u4e00\u4e2a\u5217\u8868\u4e4b\u540e\u7684\u670d\u52a1\u5668\u63a7\u5236\u53f0\u8f93\u51fa\u4e2d\u770b\u5230\uff1a\u5728 (D) \u5904\uff0capperver \u770b\u5230 Go \u7684\u6e90\u4ee3\u7801\u88ab\u6539\u53d8\u4e86\uff0c\u5e76\u91cd\u65b0\u7f16\u8bd1\uff1b\u5728 (E) \u5904\uff0c\u670d\u52a1\u5668\u88ab\u7ec8\u6b62\u4e86\u3002 20.4.4. \u4e0e GoClipse IDE \u7684\u96c6\u6210 \u00b6 a) \u7a97\u53e3/\u9996\u9009\u9879/Go\uff1a \u5c06\u6240\u6709\u5185\u5bb9\u6307\u5411 GAE \u7684 Go \u6839\u76ee\u5f55 b) \u8fd0\u884c/\u5916\u90e8\u5de5\u5177/\u5916\u90e8\u5de5\u5177\u914d\u7f6e/\u9009\u62e9\u7a0b\u5e8f\uff1a \u200b \u5236\u4f5c\u65b0\u7684\u914d\u7f6e\uff1a\u70b9\u51fb New \u6309\u94ae\u3002 \u200b \u540d\u79f0\uff1aGAE \u200b \u4f4d\u7f6e\uff1a/home/user/google_appengine/dev_appserver.py \u200b \u5de5\u4f5c\u76ee\u5f55\uff1a/home/user/workspace/bedilly/src/pkg/helloapp \u200b \u53c2\u6570\uff1a home/user/workspace/bedilly/src/pkg/helloapp \u200b \u5e94\u7528/\u8fd0\u884c \u901a\u8fc7\u914d\u7f6e\u4e00\u4e2a\u5916\u90e8\u5de5\u5177\uff0c\u90e8\u7f72\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e5f\u5f88\u5bb9\u6613\uff1a http://code.google.com/p/goclipse/wiki/DeployingToGoogleAppEngineFromEclipse \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5b89\u88c5 Go App Engine SDK \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528\u7528\u6237\u670d\u52a1\u548c\u63a2\u7d22\u5176 API","title":"20.4 \u5efa\u9020\u4f60\u81ea\u5df1\u7684 Hello world \u5e94\u7528"},{"location":"20.4/#204-hello-world","text":"\u73b0\u5728\u8ba9\u6211\u4eec\u5efa\u9020\u4e00\u4e2a\u50cf 20.3 \u8282 \u4e2d\u7684 demo \u4e00\u6837\u7684\u5e94\u7528\uff0c\u4f46\u8fd9\u6b21\u6211\u4eec\u4f1a\u63a2\u7d22\u5f97\u66f4\u6df1\u4e00\u4e9b\u3002","title":"20.4 \u5efa\u9020\u4f60\u81ea\u5df1\u7684 Hello world \u5e94\u7528"},{"location":"20.4/#2041-map-structure-http-handler","text":"\u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\uff0c\u5e76\u7ed9\u5b83\u8d77\u4e00\u4e2a\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7279\u6709\u7684\u540d\u5b57\uff0c\u5982\uff1ahelloapp\u3002\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u6240\u6709\u6587\u4ef6\u90fd\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e2d\u3002\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e2d\u518d\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a hello \u7684\u76ee\u5f55\u3002\u8fd9\u5c06\u5305\u542b\u6211\u4eec\u7684 hello \u5305\u7684 Go \u6e90\u4ee3\u7801\u6587\u4ef6\u3002\u7136\u540e\u5728 hello \u76ee\u5f55\u4e0b\uff0c\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a helloworld2.go \u7684\u6587\u4ef6\uff0c\u5e76\u8d4b\u4e88\u5176\u4ee5\u4e0b\u5185\u5bb9\uff08\u4e8b\u5b9e\u4e0a\u4e0e\u4e0a\u6587\u4e2d\u7684 demo \u5e94\u7528\u51e0\u4e4e\u76f8\u540c\uff09\uff1a Listing 20.2 helloworld2_version1.go : package hello import ( \"fmt\" \"net/http\" ) func init () { http . HandleFunc ( \"/\" , handler ) } func handler ( w http . ResponseWriter , r * http . Request ) { fmt . Fprint ( w , \"Hello, world!\" ) } \u6ce8\u610f\u5305\u7684\u540d\u79f0\uff1a\u5728\u7f16\u5199\u72ec\u7acb\u7684 Go \u7a0b\u5e8f\u65f6\uff0c\u6211\u4eec\u4f1a\u628a\u8fd9\u6bb5\u4ee3\u7801\u653e\u5728 package main \u4e2d\uff0c\u4f46 Go GAE Runtime \u63d0\u4f9b\u4e86 main \u5305\u548c HTTP Listener\uff0c\u6240\u4ee5\u4f60\u5e94\u8be5\u628a\u4f60\u7684\u4ee3\u7801\u653e\u5728\u4f60\u9009\u62e9\u7684\u5305\u4e2d\uff0c\u6b64\u65f6\u6307\u7684\u662f hello \u5305\u3002\u5176\u6b21\uff0c\u7531\u4e8e Go App Engine \u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7 Web \u670d\u52a1\u5668\u4e0e\u5916\u90e8\u4e16\u754c\u8fdb\u884c\u901a\u4fe1\uff0c\u6240\u4ee5\u7f16\u5199\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u975e\u5e38\u50cf\u7f16\u5199\u72ec\u7acb\u7684 Go Web \u5e94\u7528\u7a0b\u5e8f\uff08\u89c1 \u7b2c 15 \u7ae0 \uff09\u3002\u6240\u4ee5\u6211\u4eec\u5bfc\u5165 http \u5305\uff0c\u5e76\u4e3a\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7684\u4e0d\u540curl \u6a21\u5f0f\u5b9a\u4e49\u5904\u7406\u51fd\u6570\u3002\u6211\u4eec\u6ca1\u6709 main() \u51fd\u6570\uff0c\u6240\u4ee5\u5904\u7406\u7a0b\u5e8f\u7684\u8bbe\u7f6e\u5fc5\u987b\u79fb\u5230 init() \u51fd\u6570\u4e2d\u53bb\u3002\u53e6\u5916\uff0c\u7f51\u7edc\u670d\u52a1\u5668\u672c\u8eab\u7684\u542f\u52a8\u662f\u7531 GAE \u4e3a\u6211\u4eec\u5b8c\u6210\u7684\u3002\u6211\u4eec\u7684 Go \u5305 hello \u5bf9\u4efb\u4f55\u8bf7\u6c42\u7684\u54cd\u5e94\u662f\u53d1\u9001\u4e00\u4e2a\u5305\u542b \"Hello, world!\"\u7684\u6d88\u606f\u3002","title":"20.4.1 \u6620\u50cf\u7ed3\u6784 (map-structure)\uff1a\u521b\u9020\u4e00\u4e2a\u7b80\u5355\u7684 http-handler"},{"location":"20.4/#2042-appyaml","text":"\u6240\u6709\u7684 GAE \u5e94\u7528\u7a0b\u5e8f\u90fd\u9700\u8981\u4e00\u4e2a yaml \u914d\u7f6e\u6587\u4ef6 app.yaml\uff0c\u5b83\u5305\u542b\u4e86 GAE \u7684\u5e94\u7528\u7a0b\u5e8f\u5143\u6570\u636e\uff08yaml \u662f\u4e00\u79cd\u6587\u672c\u6587\u4ef6\u683c\u5f0f\uff0c\u7ecf\u5e38\u7528\u4e8e\u5f00\u6e90\u9879\u76ee\uff0c\u66f4\u591a\u4fe1\u606f\u89c1 www.yaml.org \uff09\u3002\u53e6\u5916\uff0c\u8fd9\u4e2a\u6587\u4ef6\u544a\u8bc9 App Engine \u670d\u52a1\u8981\u4f7f\u7528\u54ea\u4e2a\u8fd0\u884c\u65f6\uff0c\u54ea\u4e9b URL \u5e94\u8be5\u7531\u6211\u4eec\u7684 Go \u7a0b\u5e8f\u5904\u7406\u3002\u4f60\u53ef\u4ee5\u4ece\u6f14\u793a\u7a0b\u5e8f\u4e2d\u590d\u5236\u4e00\u4e2a app.yaml \u6587\u4ef6\uff0c\u628a\u5b83\u653e\u5728\u6620\u50cf helloapp \u91cc\u9762\uff0c\u5e76\u5220\u9664 favicon.ico \u7684 handler\u3002 \u5e94\u7528\u7a0b\u5e8f\u7684\u6620\u50cf/\u6587\u4ef6\u7ed3\u6784\u5e94\u8be5\u5982\u4e0b\uff1a helloapp\\ // map of the GAE application app.yaml // configuration file hello\\ // map containing the source files helloworld2.go \u53ea\u6709app.yaml\u662f\u5fc5\u987b\u7684\u540d\u5b57\uff0c\u6620\u50cf\u3001Go\u6587\u4ef6\u548c\u5305\u7684\u540d\u5b57\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u9009\u62e9\uff0c\u4f46\u6309\u7167\u60ef\u4f8b\uff0c\u5b83\u4eec\u7684\u540d\u5b57\u662f\u4e00\u6837\u7684\u6216\u7c7b\u4f3c\u7684\uff0c\u6839\u6620\u50cf\u7684\u540e\u7f00\u662f app\u3002 app.yaml \u7531 AppEngine \u8bfb\u53d6\u548c\u89e3\u91ca\uff0cAppEngine \u4ee5\u4e0b\u65f6\u95f4\u6bb5\u5185\u6258\u7ba1\u548c\u6267\u884c\u4f60\u7684\u7a0b\u5e8f\uff1a \u5f53\u60a8\u5c06\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4f20\u5230 AppEngine \u4ee5\u4f7f\u5176\u88ab\u6258\u7ba1\u3002 \u5f53\u5b83\u88ab\u6267\u884c\u65f6\u3002 \u5f53\u7528\u6237\u8bbf\u95ee\u5b83\u65f6\u3002 \u5b83\u53ef\u4ee5\u5305\u542b\u6ce8\u91ca\uff0c\u524d\u9762\u6709\u4e00\u4e2a # \uff0c\u5e76\u5305\u542b\u4ee5\u4e0b\u8bed\u53e5\uff1a application : helloworld version : 1 runtime : go api_version : 3 # routing-table: routing of different urls to different types of handlers handlers : - url : /.* script : _go_app app.yaml \u4e2d\u7684 application: value helloworld \u662f\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u6807\u8bc6\u7b26\u3002\u8fd9\u4e2a\u503c\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u662f\u4efb\u4f55\u4e1c\u897f\uff1b\u4ee5\u540e\u5728\u5411 App Engine \u6ce8\u518c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u60a8\u5c06\u9009\u62e9\u4e00\u4e2a\u552f\u4e00\u7684\u6807\u8bc6\u7b26\uff08\u5728\u6240\u6709 GAE \u5e94\u7528\u7a0b\u5e8f\u4e2d\u552f\u4e00\uff09\u5e76\u66f4\u65b0\u8fd9\u4e2a\u503c\u3002 version \u8868\u793a\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u6b63\u5728\u8fd0\u884c\u7684\u7248\u672c\uff1a\u4e8b\u5b9e\u4e0a\uff0cGAE \u53ef\u4ee5\u5e76\u884c\u5730\u8fd0\u884c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u51e0\u4e2a\u7248\u672c\uff0c\u4f46\u5176\u4e2d\u4e00\u4e2a\u5fc5\u987b\u88ab\u6307\u5b9a\u4e3a\u9ed8\u8ba4\u7248\u672c\u3002\u5b83\u53ef\u4ee5\u5305\u542b\u5b57\u6bcd\u6570\u5b57\u5b57\u7b26\uff0c\u4ee5\u53ca\u8fde\u5b57\u7b26\u3002\u56e0\u6b64\uff0c\u4f60\u53ef\u4ee5\u8fd0\u884c\u4e00\u4e2a\u6d4b\u8bd5\u7248\u672c\uff0c\u5982T2-31 \u548c\u4e00\u4e2a\u751f\u4ea7\u7248\u672c P2-1\u3002 runtime \u662f\u7f16\u5199\u5e94\u7528\u7a0b\u5e8f\u7684\u8bed\u8a00\uff08\u5176\u4ed6\u5141\u8bb8\u7684\u503c\u662f Java \u548c Python\uff09\u3002\u5982\u679c\u4f60\u5728\u4e0a\u4f20\u5e94\u7528\u8f6f\u4ef6\u7684\u65b0\u7248\u672c\u4e4b\u524d\u8c03\u6574\u5b83\uff0cApp Engine \u5c06\u4fdd\u7559\u4ee5\u524d\u7684\u7248\u672c\uff0c\u5e76\u8ba9\u4f60\u4f7f\u7528\u7ba1\u7406\u63a7\u5236\u53f0\u56de\u9000\u5230\u4ee5\u524d\u7684\u7248\u672c\u3002 api_version \u662f\u672c SDK \u4e2d\u4f7f\u7528\u7684 Go API \u7684\u7248\u672c\uff1b\u5b83\u4eec\u53ef\u80fd\u4e0e\u4ee5\u524d\u7684\u7248\u672c\u4e0d\u517c\u5bb9\u3002\u4f60\u53ef\u4ee5\u5728\u4ee5\u524d\u7684 api_version SDK \u4e2d\u6784\u5efa\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u65e9\u671f\u7248\u672c\uff1b\u5982\u679c GAE \u4ecd\u7136\u5141\u8bb8\uff0c\u5b83\u4eec\u53ef\u4ee5\u7ee7\u7eed\u8fd0\u884c\uff0c\u4f46\u901a\u5e38\u6709\u4e00\u4e2a\u65f6\u95f4\u9650\u5236\uff0c\u800c\u4f60\u5e94\u8be5\u5c06\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u66f4\u65b0\u5230\u65b0\u7684api\u7248\u672c\uff1abin map\u4e2d\u7684gofix\u5de5\u5177\u53ef\u80fd\u80fd\u591f\u5b8c\u6210\u5927\u90e8\u5206\u6240\u9700\u7684\u66f4\u65b0\u3002 handler \u90e8\u5206\u662f\u5faa\u73af\u8868 (routing table)\uff1a\u5b83\u544a\u8bc9 GAE \u5982\u4f55\u5c06\u53d1\u9001\u5230\u670d\u52a1\u5668\u4e0a\u7684\u8bf7\u6c42\u6620\u5c04\u5230\u4ee3\u7801\u4e2d\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4f20\u5165\u7684\u8bf7\u6c42 url \u6a21\u5f0f\uff08\u672c\u5730\u5f00\u53d1\u65f6\u5728 http://localhost:8080/ \u4e4b\u540e\u7684\u90e8\u5206\uff0c\u5728\u4e91\u7aef\u8fd0\u884c\u65f6\u5728 http://appname.appspot.com/ \u4e4b\u540e\u7684\u90e8\u5206\uff09\u4e0e url \u540e\u9762\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u76f8\u5339\u914d\u3002 \u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u5339\u914d\u7684 url \u6a21\u5f0f\uff0c\u76f8\u5e94\u7684\u811a\u672c\u4f1a\u88ab\u6267\u884c\u3002\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u8def\u5f84\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f /.* \u76f8\u5339\u914d\u7684 URL \u8bf7\u6c42\uff08\u5373\uff1a\u6240\u6709 URL\uff09\u90fd\u5e94\u8be5\u7531 Go \u7a0b\u5e8f\u5904\u7406\u3002 _go_app \u503c\u662f dev_appserver.py \u8bc6\u522b\u7684\u4e00\u4e2a\u795e\u5947\u5b57\u7b26\u4e32\uff1b\u751f\u4ea7\u7684 App Engine \u670d\u52a1\u5668\u4f1a\u5ffd\u7565\u5b83\u3002 \u5982\u679c\u4f60\u770b\u4e00\u4e0b\u6f14\u793a\u7684 helloworld \u5e94\u7528\u7a0b\u5e8f\u7684 app.yaml \u6587\u4ef6\uff0c\u4f60\u4f1a\u53d1\u73b0\u5b83\u5728\u5904\u7406\u7a0b\u5e8f\u4e2d\u5305\u542b\u4e00\u4e2a\u521d\u59cb\u90e8\u5206\uff1a handlers : - url : /favicon\\.ico static_files : favicon.ico upload : favicon\\.ico - url : /.* script : _go_app \u4e00\u4e9b\u6587\u4ef6 ( static_files ) \uff0c\u5982\u56fe\u7247\uff0c\u4e0d\u4f1a\u6539\u53d8\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u662f\u56fe\u7247favicon.ico\uff09\u3002\u8fd9\u4e9b\u6587\u4ef6\u53ef\u4ee5\u653e\u5728\u4e0d\u540c\u7684 AppEngine \u670d\u52a1\u5668\u4e0a\u7684\u4e00\u79cd\u5171\u540c\u7f13\u5b58\u4e2d\uff0c\u4f7f\u5b83\u4eec\u80fd\u591f\u66f4\u5feb\u5730\u63d0\u4f9b\u7ed9\u7528\u6237\u3002\u5982\u679c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u6709\u8bb8\u591a\u8fd9\u6837\u7684\u6587\u4ef6\uff0c\u628a\u5b83\u4eec\u653e\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u76ee\u5f55\u4e2d\uff0c\u6309\u60ef\u4f8b\u547d\u540d\u4e3a static\u3002 upload \u8868\u793a\u5f53\u60a8\u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u4ec0\u4e48\u5fc5\u987b\u4e0a\u4f20\u5230\u4e91\u7aef\uff1b\u4f8b\u5982\uff0c\u5982\u679c\u5b83\u5305\u542b images/(*.ico|*.gif|*.jpg)\uff0c\u5b83\u5c06\u628a\u672c\u5730 images \u76ee\u5f55\u5185\u6240\u6709\u8fd9\u4e9b\u7c7b\u578b\u7684\u6587\u4ef6\u4e0a\u4f20\u5230 AppEngine \u670d\u52a1\u5668\u3002 \u6b63\u5982\u6211\u4eec\u5c06\u770b\u5230\u7684\uff0c\u5927\u591a\u6570 GAE \u5e94\u7528\u7a0b\u5e8f\u4e5f\u4f7f\u7528\u6a21\u677f\u6587\u4ef6\uff0c\u8fd9\u4e9b\u6587\u4ef6\u53ef\u4ee5\u5b58\u50a8\u5728\u6839\u5e94\u7528\u7a0b\u5e8f\u5730\u56fe\u4e2d\uff0c\u6216\u5728\u4e00\u4e2a\u7279\u6b8a\u7684\u76ee\u5f55 tmpl \u4e2d\u3002 \u56e0\u6b64\uff0c\u4e00\u4e2a GAE \u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u822c\u7ed3\u6784\u53ef\u80fd\u662f\uff1a yourapp\\ // map of the GAE application app.yaml // configuration file yourpackage\\ // map containing the source files package1.go \u2026 tmpl\\ // map containing template files root.html update.html \u2026 static\\ // map containing static files yourapp.ico \u2026 \u4e0e demo \u4e00\u6837\uff0c\u5728\u63a7\u5236\u53f0\u7a97\u53e3\u4e2d\u8fdb\u5165\u5305\u542b helloapp \u7684\u6620\u50cf\uff0c\u5e76\u53d1\u51fa\u5982\u4e0b\u547d\u4ee4\uff1a dev_appserver.py helloapp \u6216\u8005\u4f60\u53ef\u4ee5\u901a\u8fc7\u4efb\u4f55\u4e00\u4e2a\u6620\u50cf\u7684 console \u7a97\u53e3\u5e76\u4e14\u5524\u9192\uff1a dev_appserver.py /path_to_map_helloapp/helloapp \u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u7f51\u7edc\u670d\u52a1\u5668\u73b0\u5728\u90fd\u5728\u8fd0\u884c\uff0c\u5e76\u76d1\u542c 8080 \u7aef\u53e3\u7684\u8bf7\u6c42\u3002\u901a\u8fc7\u5728\u4f60\u7684\u7f51\u7edc\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95ee\u4ee5\u4e0b URL \u6765\u6d4b\u8bd5\u8be5\u5e94\u7528\u7a0b\u5e8f\uff1a http://localhost:8080/ \u4f60\u5e94\u8be5\u770b\u5230\uff1a Hello, world! \u5728\u670d\u52a1\u5668\u63a7\u5236\u53f0\uff0c\u51fa\u73b0\u4ee5\u4e0b\u6587\u5b57\uff1a $ dev_appserver.py helloapp INFO 2011-10-31 08:54:29,021 appengine_rpc.py:159] Server: appengine.google.com INFO 2011-10-31 08:54:29,025 appcfg.py:463] Checking for updates to the SDK. INFO 2011-10-31 08:54:29,316 appcfg.py:481] The SDK is up to date. WARNING 2011-10-31 08:54:29,316 datastore_file_stub.py:512] Could not read datastore data from /tmp/dev_appserver.datastore INFO 2011-10-31 08:54:29,317 rdbms_sqlite.py:58] Connecting to SQLite database \u2018\u2019 with file \u2018/tmp/dev_appserver.rdbms\u2019 INFO 2011-10-31 08:54:29,638 dev_appserver_multiprocess.py:637] Running application helloworld on port 8080: http://localhost:8080 <-(A) INFO 2011-10-31 08:56:13,148 __init__.py:365] building _go_app <-(B) INFO 2011-10-31 08:56:15,073 __init__.py:351] running _go_app INFO 2011-10-31 08:56:15,188 dev_appserver.py:4143] \u201cGET / HTTP/1.1\u201d 200 - <-(C) \u5728 (A) \u5904\u670d\u52a1\u5668\u51c6\u5907\u597d\u4e86\uff0c\u5728 (B) \u5904\u670d\u52a1\u5668\u7f16\u8bd1\u5e76\u8fd0\u884c Go \u7a0b\u5e8f\uff0c\u5728 (C) \u5904\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u8bf7\u6c42\u8fdb\u6765\u4e86\uff0c\u6b64\u65f6 HTML \u8f93\u51fa\u9875\u9762\u88ab\u63d0\u4f9b\u5230\u670d\u52a1\u5668\u4e0a\u3002 \u5f53\u670d\u52a1\u5668\u88ab\u7ec8\u6b62\u6216\u5c1a\u672a\u542f\u52a8\uff0c\u800c\u5ba2\u6237\u7aef\u8bf7\u6c42\u7f51\u5740 http://localhost:8080/ \uff0c\u6d4f\u89c8\u5668\u5728FireFox \u4e2d\u4f1a\u6253\u5370\u51fa\u8fd9\u6837\u7684\u4fe1\u606f\uff1a Unable to connect Firefox can\u2019t establish a connection to the server at localhost:8080.","title":"20.4.2 \u521b\u5efa\u914d\u7f6e\u6587\u4ef6 app.yaml"},{"location":"20.4/#2043","text":"\u5f00\u53d1\u5e94\u7528\u7684\u670d\u52a1\u5668\u4f1a\u89c2\u5bdf\u4f60\u7684\u6587\u4ef6\u4e2d\u7684\u53d8\u5316\uff0c\u5f53\u4f60\u66f4\u65b0\u4f60\u7684\u6e90\u4ee3\u7801\u65f6\uff08\u7f16\u8f91+\u4fdd\u5b58\uff09\uff0c\u5b83\u91cd\u65b0\u7f16\u8bd1\u5b83\u4eec\u5e76\u91cd\u65b0\u542f\u52a8\u4f60\u7684\u672c\u5730\u5e94\u7528\uff1b\u4e0d\u9700\u8981\u91cd\u65b0\u542f\u52a8 dev_appserver.py \u73b0\u5728\u8bd5\u8bd5\uff1a\u8ba9 Web \u670d\u52a1\u5668\u8fd0\u884c\uff0c\u7136\u540e\u7f16\u8f91 helloworld2.go\uff0c\u5c06 \"Hello, world!\" \u6539\u4e3a\u5176\u4ed6\u5185\u5bb9\u3002\u91cd\u65b0\u52a0\u8f7d http://localhost:8080/ \uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u53d8\u5316\u4e86\uff1a\u8fd9\u548c\u7f16\u5199 Rails \u6216 Django \u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\uff0c\u90fd\u662f\u52a8\u6001\u8fd0\u884c\u7684\u3002 \u8981\u5173\u95ed Web \u670d\u52a1\u5668\uff0c\u786e\u4fdd\u7ec8\u7aef\u7a97\u53e3\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\uff0c\u7136\u540e\u6309 Ctrl+C\uff08\u6216\u9002\u5f53\u7684\u7528\u4e8e\u63a7\u5236\u53f0\u7684 \"break \"\u952e\uff09\uff1a INFO 2011-10-31 08:56:21,420 dev_appserver.py:4143] \u201cGET / HTTP/1.1\u201d 200 - INFO 2011-10-31 08:57:59,836 __init__.py:365] building _go_app <-(D) INFO 2011-10-31 08:58:00,365 __init__.py:351] running _go_app INFO 2011-10-31 08:58:00,480 dev_appserver.py:4143] \u201cGET / HTTP/1.1\u201d 200 - ^CINFO 2011-10-31 08:58:32,769 dev_appserver_main.py:665] Server interrupted by user, terminating <-(E) \u8fd9\u53ef\u4ee5\u4ece\u4e0a\u9762\u7b2c\u4e00\u4e2a\u5217\u8868\u4e4b\u540e\u7684\u670d\u52a1\u5668\u63a7\u5236\u53f0\u8f93\u51fa\u4e2d\u770b\u5230\uff1a\u5728 (D) \u5904\uff0capperver \u770b\u5230 Go \u7684\u6e90\u4ee3\u7801\u88ab\u6539\u53d8\u4e86\uff0c\u5e76\u91cd\u65b0\u7f16\u8bd1\uff1b\u5728 (E) \u5904\uff0c\u670d\u52a1\u5668\u88ab\u7ec8\u6b62\u4e86\u3002","title":"20.4.3 \u8fed\u4ee3\u5f00\u53d1"},{"location":"20.4/#2044-goclipse-ide","text":"a) \u7a97\u53e3/\u9996\u9009\u9879/Go\uff1a \u5c06\u6240\u6709\u5185\u5bb9\u6307\u5411 GAE \u7684 Go \u6839\u76ee\u5f55 b) \u8fd0\u884c/\u5916\u90e8\u5de5\u5177/\u5916\u90e8\u5de5\u5177\u914d\u7f6e/\u9009\u62e9\u7a0b\u5e8f\uff1a \u200b \u5236\u4f5c\u65b0\u7684\u914d\u7f6e\uff1a\u70b9\u51fb New \u6309\u94ae\u3002 \u200b \u540d\u79f0\uff1aGAE \u200b \u4f4d\u7f6e\uff1a/home/user/google_appengine/dev_appserver.py \u200b \u5de5\u4f5c\u76ee\u5f55\uff1a/home/user/workspace/bedilly/src/pkg/helloapp \u200b \u53c2\u6570\uff1a home/user/workspace/bedilly/src/pkg/helloapp \u200b \u5e94\u7528/\u8fd0\u884c \u901a\u8fc7\u914d\u7f6e\u4e00\u4e2a\u5916\u90e8\u5de5\u5177\uff0c\u90e8\u7f72\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e5f\u5f88\u5bb9\u6613\uff1a http://code.google.com/p/goclipse/wiki/DeployingToGoogleAppEngineFromEclipse","title":"20.4.4. \u4e0e GoClipse IDE \u7684\u96c6\u6210"},{"location":"20.4/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5b89\u88c5 Go App Engine SDK \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528\u7528\u6237\u670d\u52a1\u548c\u63a2\u7d22\u5176 API","title":"\u94fe\u63a5"},{"location":"20.5/","text":"20.5 \u4f7f\u7528\u7528\u6237\u670d\u52a1\u548c\u63a2\u7d22\u5176 API \u00b6 GAE \u63d0\u4f9b\u4e86\u51e0\u4e2a\u57fa\u4e8e Google \u57fa\u7840\u8bbe\u65bd\u7684\u6709\u7528\u670d\u52a1\u3002\u6b63\u5982 \u7b2c 20.1 \u8282 \u4e2d\u63d0\u5230\u7684\uff1aGAE \u63d0\u4f9b\u4e86\u4e00\u4e2a Users \u670d\u52a1\uff0c\u5b83\u53ef\u4ee5\u8ba9\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0e Google \u7528\u6237\u8d26\u6237\u96c6\u6210\u3002\u6709\u4e86\u7528\u6237\u670d\u52a1\uff0c\u60a8\u7684\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u4ed6\u4eec\u5df2\u7ecf\u62e5\u6709\u7684\u8c37\u6b4c\u8d26\u6237\u6765\u767b\u5f55\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u7528\u6237\u670d\u52a1\u4f7f\u60a8\u53ef\u4ee5\u8f7b\u677e\u5730\u5bf9\u8be5\u5e94\u7528\u7a0b\u5e8f\u7684\u95ee\u5019\u8bed\u8fdb\u884c\u4e2a\u6027\u5316\u5904\u7406\u3002 \u7f16\u8f91 helloworld2.go \u6587\u4ef6\uff0c\u7528\u4ee5\u4e0b Go \u4ee3\u7801\u66ff\u6362\u5b83\uff1a Listing 20.3 helloworld2_version2.go : package hello import ( \"appengine\" \"appengine/user\" \"fmt\" \"net/http\" ) func init () { http . HandleFunc ( \"/\" , handler ) } func handler ( w http . ResponseWriter , r * http . Request ) { c := appengine . NewContext ( r ) u := user . Current ( c ) if u == nil { url , err := user . LoginURL ( c , r . URL . String ()) if err != nil { http . Error ( w , err . String (), http . StatusInternalServerError ) return } w . Header (). Set ( \"Location\" , url ) w . WriteHeader ( http . StatusFound ) return } fmt . Fprintf ( w , \"Hello, %v!\" , u ) } \u901a\u8fc7\u5728\u6d4f\u89c8\u5668\u4e2d\u91cd\u65b0\u52a0\u8f7d\u9875\u9762\u6765\u6d4b\u8bd5\u5b83\u3002\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4f1a\u7ed9\u4f60\u4e00\u4e2a\u94fe\u63a5\uff0c\u5f53\u4f60\u9075\u5faa\u8fd9\u4e2a\u94fe\u63a5\u65f6\uff0c\u4f1a\u628a\u4f60\u91cd\u5b9a\u5411\u5230\u9002\u5408\u6d4b\u8bd5\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u672c\u5730\u7248\u672c\u7684\u8c37\u6b4c\u767b\u5f55\u9875\u9762\u3002\u4f60\u53ef\u4ee5\u5728\u8fd9\u4e2a\u9875\u9762\u4e2d\u8f93\u5165\u4efb\u4f55\u4f60\u559c\u6b22\u7684\u7528\u6237\u540d\uff0c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u5c06\u770b\u5230\u4e00\u4e2a\u57fa\u4e8e\u8be5\u7528\u6237\u540d\u7684\u5047\u7684 user.User \u503c\u3002\u5f53\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u5728 App Engine \u4e0a\u8fd0\u884c\u65f6\uff0c\u7528\u6237\u5c06\u88ab\u5f15\u5bfc\u5230 Google \u8d26\u6237\u7684\u767b\u5f55\u9875\u9762\uff0c\u7136\u540e\u5728\u6210\u529f\u767b\u5f55\u6216\u521b\u5efa\u8d26\u6237\u540e\uff0c\u4f1a\u88ab\u91cd\u5b9a\u5411\u5230\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u7528\u6237API\uff1a \u4e3a\u4e86\u8bbf\u95ee\u8fd9\u4e2a\uff0c\u6211\u4eec\u9700\u8981\u5bfc\u5165\u4e00\u4e9b\u4e13\u95e8\u9488\u5bf9 GAE \u7684 Go \u5305\uff0c\u5373\u4e00\u822c\u7684 appengine \u548c appengine/user \u3002 \u5728\u5904\u7406\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u5236\u4f5c\u4e00\u4e2a\u4e0e\u5f53\u524d\u8bf7\u6c42r\u76f8\u5173\u8054\u7684Context\u5bf9\u8c61\uff0c\u8fd9\u5728\u4e00\u884c\u4e2d\u5b8c\u6210\uff1a c := appengine . NewContext ( r ) appengine.NewContext() \u51fd\u6570\u5728\u8fd9\u91cc\u8fd4\u56de\u4e00\u4e2a\u540d\u4e3a c \u7684 appengine.Context \u503c\uff1a\u8fd9\u662f Go App Engine SDK \u4e2d\u8bb8\u591a\u51fd\u6570\u7528\u6765\u4e0e App Engine \u670d\u52a1\u901a\u4fe1\u7684\u503c\u3002\u7136\u540e\u6211\u4eec\u4ece\u8fd9\u4e2a\u4e0a\u4e0b\u6587\u4e2d\u6d4b\u8bd5\u662f\u5426\u5df2\u7ecf\u6709\u4e00\u4e2a\u7528\u6237\u5728\u6b64\u65f6\u767b\u5f55\uff0c\u65b9\u6cd5\u662f\uff1a u := user . Current ( c ) \u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\uff0c user.Current \u4f1a\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u7528\u6237\u7684 user.User \u503c\u7684\u6307\u9488\uff1b\u5426\u5219\u4f1a\u8fd4\u56de nil \u3002\u5982\u679c\u7528\u6237\u8fd8\u6ca1\u6709\u767b\u5f55\uff0c\u5373 u == nil \u65f6\uff0c\u901a\u8fc7\u8c03\u7528\u7528\u6237\u7684\u6d4f\u89c8\u5668\u91cd\u5b9a\u5411\u5230\u8c37\u6b4c\u8d26\u6237\u7684\u767b\u5f55\u754c\u9762\u3002 url , err := user . LoginURL ( c , r . URL . String ()) \u7b2c 2 \u4e2a\u53c2\u6570 r.URL.String() \u662f\u5f53\u524d\u8bf7\u6c42\u7684 url\uff0c\u8fd9\u6837\u8c37\u6b4c\u8d26\u6237\u767b\u5f55\u673a\u5236\u53ef\u4ee5\u5728\u6210\u529f\u767b\u5f55\u540e\u8fdb\u884c*\u91cd\u5b9a\u5411*\uff1a\u5b83\u5c06\u5728\u7528\u6237\u767b\u5f55\u6216\u6ce8\u518c\u65b0\u8d26\u6237\u540e\u5c06\u5176\u9001\u56de\u8fd9\u91cc\u3002\u767b\u5f55\u754c\u9762\u7684\u53d1\u9001\u662f\u901a\u8fc7\u8bbe\u7f6e\u4e00\u4e2a Location \u6570\u636e\u5934\u5e76\u8fd4\u56de\u4e00\u4e2a HTTP \u72b6\u6001\u4ee3\u7801 302\u201cFound\u201d\u6765\u5b8c\u6210\u7684\u3002 LoginURL() \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a error \u503c\u4f5c\u4e3a\u5176\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002\u5c3d\u7ba1\u8fd9\u91cc\u4e0d\u592a\u53ef\u80fd\u53d1\u751f\u9519\u8bef\uff0c\u4f46\u68c0\u67e5\u5b83\u5e76\u5728\u9002\u5f53\u7684\u65f6\u5019\u5411\u7528\u6237\u663e\u793a\u9519\u8bef\u662f\u5f88\u597d\u7684\u505a\u6cd5\uff08\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7528 http.Error helper\uff09\uff1a if err != nil { http . Error ( w , err . Error (), http . StatusInternalServerError ) return } \u5f53\u7528\u6237\u767b\u5f55\u540e\uff0c\u6211\u4eec\u4f7f\u7528\u4e0e\u7528\u6237\u8d26\u6237\u76f8\u5173\u7684\u540d\u5b57\u663e\u793a\u4e00\u6761\u4e2a\u6027\u5316\u7684\u4fe1\u606f\uff1a fmt . Fprintf ( w , \"Hello, %v!\" , u ) \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c fmt.Fprintf() \u51fd\u6570\u8c03\u7528 *user.User \u7684 String() \u65b9\u6cd5\u6765\u83b7\u5f97\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u7528\u6237\u540d\u79f0\u3002\u66f4\u591a\u4fe1\u606f\u53ef\u4ee5\u5728\u8fd9\u4e2a\u53c2\u8003\u8d44\u6599\u4e2d\u627e\u5230\uff1a http://code.google.com/appengine/docs/go/users/ \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5efa\u9020\u4f60\u81ea\u5df1\u7684 Hello world \u5e94\u7528 \u4e0b\u4e00\u8282\uff1a \u5904\u7406\u7a97\u53e3","title":"20.5 \u4f7f\u7528\u7528\u6237\u670d\u52a1\u548c\u63a2\u7d22\u5176 API"},{"location":"20.5/#205-api","text":"GAE \u63d0\u4f9b\u4e86\u51e0\u4e2a\u57fa\u4e8e Google \u57fa\u7840\u8bbe\u65bd\u7684\u6709\u7528\u670d\u52a1\u3002\u6b63\u5982 \u7b2c 20.1 \u8282 \u4e2d\u63d0\u5230\u7684\uff1aGAE \u63d0\u4f9b\u4e86\u4e00\u4e2a Users \u670d\u52a1\uff0c\u5b83\u53ef\u4ee5\u8ba9\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0e Google \u7528\u6237\u8d26\u6237\u96c6\u6210\u3002\u6709\u4e86\u7528\u6237\u670d\u52a1\uff0c\u60a8\u7684\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u4ed6\u4eec\u5df2\u7ecf\u62e5\u6709\u7684\u8c37\u6b4c\u8d26\u6237\u6765\u767b\u5f55\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u7528\u6237\u670d\u52a1\u4f7f\u60a8\u53ef\u4ee5\u8f7b\u677e\u5730\u5bf9\u8be5\u5e94\u7528\u7a0b\u5e8f\u7684\u95ee\u5019\u8bed\u8fdb\u884c\u4e2a\u6027\u5316\u5904\u7406\u3002 \u7f16\u8f91 helloworld2.go \u6587\u4ef6\uff0c\u7528\u4ee5\u4e0b Go \u4ee3\u7801\u66ff\u6362\u5b83\uff1a Listing 20.3 helloworld2_version2.go : package hello import ( \"appengine\" \"appengine/user\" \"fmt\" \"net/http\" ) func init () { http . HandleFunc ( \"/\" , handler ) } func handler ( w http . ResponseWriter , r * http . Request ) { c := appengine . NewContext ( r ) u := user . Current ( c ) if u == nil { url , err := user . LoginURL ( c , r . URL . String ()) if err != nil { http . Error ( w , err . String (), http . StatusInternalServerError ) return } w . Header (). Set ( \"Location\" , url ) w . WriteHeader ( http . StatusFound ) return } fmt . Fprintf ( w , \"Hello, %v!\" , u ) } \u901a\u8fc7\u5728\u6d4f\u89c8\u5668\u4e2d\u91cd\u65b0\u52a0\u8f7d\u9875\u9762\u6765\u6d4b\u8bd5\u5b83\u3002\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4f1a\u7ed9\u4f60\u4e00\u4e2a\u94fe\u63a5\uff0c\u5f53\u4f60\u9075\u5faa\u8fd9\u4e2a\u94fe\u63a5\u65f6\uff0c\u4f1a\u628a\u4f60\u91cd\u5b9a\u5411\u5230\u9002\u5408\u6d4b\u8bd5\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u672c\u5730\u7248\u672c\u7684\u8c37\u6b4c\u767b\u5f55\u9875\u9762\u3002\u4f60\u53ef\u4ee5\u5728\u8fd9\u4e2a\u9875\u9762\u4e2d\u8f93\u5165\u4efb\u4f55\u4f60\u559c\u6b22\u7684\u7528\u6237\u540d\uff0c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u5c06\u770b\u5230\u4e00\u4e2a\u57fa\u4e8e\u8be5\u7528\u6237\u540d\u7684\u5047\u7684 user.User \u503c\u3002\u5f53\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u5728 App Engine \u4e0a\u8fd0\u884c\u65f6\uff0c\u7528\u6237\u5c06\u88ab\u5f15\u5bfc\u5230 Google \u8d26\u6237\u7684\u767b\u5f55\u9875\u9762\uff0c\u7136\u540e\u5728\u6210\u529f\u767b\u5f55\u6216\u521b\u5efa\u8d26\u6237\u540e\uff0c\u4f1a\u88ab\u91cd\u5b9a\u5411\u5230\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u7528\u6237API\uff1a \u4e3a\u4e86\u8bbf\u95ee\u8fd9\u4e2a\uff0c\u6211\u4eec\u9700\u8981\u5bfc\u5165\u4e00\u4e9b\u4e13\u95e8\u9488\u5bf9 GAE \u7684 Go \u5305\uff0c\u5373\u4e00\u822c\u7684 appengine \u548c appengine/user \u3002 \u5728\u5904\u7406\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u5236\u4f5c\u4e00\u4e2a\u4e0e\u5f53\u524d\u8bf7\u6c42r\u76f8\u5173\u8054\u7684Context\u5bf9\u8c61\uff0c\u8fd9\u5728\u4e00\u884c\u4e2d\u5b8c\u6210\uff1a c := appengine . NewContext ( r ) appengine.NewContext() \u51fd\u6570\u5728\u8fd9\u91cc\u8fd4\u56de\u4e00\u4e2a\u540d\u4e3a c \u7684 appengine.Context \u503c\uff1a\u8fd9\u662f Go App Engine SDK \u4e2d\u8bb8\u591a\u51fd\u6570\u7528\u6765\u4e0e App Engine \u670d\u52a1\u901a\u4fe1\u7684\u503c\u3002\u7136\u540e\u6211\u4eec\u4ece\u8fd9\u4e2a\u4e0a\u4e0b\u6587\u4e2d\u6d4b\u8bd5\u662f\u5426\u5df2\u7ecf\u6709\u4e00\u4e2a\u7528\u6237\u5728\u6b64\u65f6\u767b\u5f55\uff0c\u65b9\u6cd5\u662f\uff1a u := user . Current ( c ) \u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\uff0c user.Current \u4f1a\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u7528\u6237\u7684 user.User \u503c\u7684\u6307\u9488\uff1b\u5426\u5219\u4f1a\u8fd4\u56de nil \u3002\u5982\u679c\u7528\u6237\u8fd8\u6ca1\u6709\u767b\u5f55\uff0c\u5373 u == nil \u65f6\uff0c\u901a\u8fc7\u8c03\u7528\u7528\u6237\u7684\u6d4f\u89c8\u5668\u91cd\u5b9a\u5411\u5230\u8c37\u6b4c\u8d26\u6237\u7684\u767b\u5f55\u754c\u9762\u3002 url , err := user . LoginURL ( c , r . URL . String ()) \u7b2c 2 \u4e2a\u53c2\u6570 r.URL.String() \u662f\u5f53\u524d\u8bf7\u6c42\u7684 url\uff0c\u8fd9\u6837\u8c37\u6b4c\u8d26\u6237\u767b\u5f55\u673a\u5236\u53ef\u4ee5\u5728\u6210\u529f\u767b\u5f55\u540e\u8fdb\u884c*\u91cd\u5b9a\u5411*\uff1a\u5b83\u5c06\u5728\u7528\u6237\u767b\u5f55\u6216\u6ce8\u518c\u65b0\u8d26\u6237\u540e\u5c06\u5176\u9001\u56de\u8fd9\u91cc\u3002\u767b\u5f55\u754c\u9762\u7684\u53d1\u9001\u662f\u901a\u8fc7\u8bbe\u7f6e\u4e00\u4e2a Location \u6570\u636e\u5934\u5e76\u8fd4\u56de\u4e00\u4e2a HTTP \u72b6\u6001\u4ee3\u7801 302\u201cFound\u201d\u6765\u5b8c\u6210\u7684\u3002 LoginURL() \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a error \u503c\u4f5c\u4e3a\u5176\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002\u5c3d\u7ba1\u8fd9\u91cc\u4e0d\u592a\u53ef\u80fd\u53d1\u751f\u9519\u8bef\uff0c\u4f46\u68c0\u67e5\u5b83\u5e76\u5728\u9002\u5f53\u7684\u65f6\u5019\u5411\u7528\u6237\u663e\u793a\u9519\u8bef\u662f\u5f88\u597d\u7684\u505a\u6cd5\uff08\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7528 http.Error helper\uff09\uff1a if err != nil { http . Error ( w , err . Error (), http . StatusInternalServerError ) return } \u5f53\u7528\u6237\u767b\u5f55\u540e\uff0c\u6211\u4eec\u4f7f\u7528\u4e0e\u7528\u6237\u8d26\u6237\u76f8\u5173\u7684\u540d\u5b57\u663e\u793a\u4e00\u6761\u4e2a\u6027\u5316\u7684\u4fe1\u606f\uff1a fmt . Fprintf ( w , \"Hello, %v!\" , u ) \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c fmt.Fprintf() \u51fd\u6570\u8c03\u7528 *user.User \u7684 String() \u65b9\u6cd5\u6765\u83b7\u5f97\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u7528\u6237\u540d\u79f0\u3002\u66f4\u591a\u4fe1\u606f\u53ef\u4ee5\u5728\u8fd9\u4e2a\u53c2\u8003\u8d44\u6599\u4e2d\u627e\u5230\uff1a http://code.google.com/appengine/docs/go/users/","title":"20.5 \u4f7f\u7528\u7528\u6237\u670d\u52a1\u548c\u63a2\u7d22\u5176 API"},{"location":"20.5/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5efa\u9020\u4f60\u81ea\u5df1\u7684 Hello world \u5e94\u7528 \u4e0b\u4e00\u8282\uff1a \u5904\u7406\u7a97\u53e3","title":"\u94fe\u63a5"},{"location":"20.6/","text":"20.6 \u5904\u7406\u7a97\u53e3 \u00b6 \u6b63\u5982\u6211\u4eec\u5728 15.6 / 7 \u8282\u4e2d\u6240\u770b\u5230\u7684\uff0c template \u5305\u7ecf\u5e38\u88ab\u7528\u4e8e web \u5e94\u7528\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u88ab\u7528\u4e8e GAE \u5e94\u7528\u3002\u4e0b\u9762\u7684\u5e94\u7528\u7a0b\u5e8f\u8ba9\u7528\u6237\u8f93\u5165\u4e00\u4e2a\u6587\u672c\u3002\u9996\u5148\uff0c\u4e00\u4e2a\u7559\u8a00\u7c3f\u8868\u683c\u663e\u793a\u51fa\u6765\uff08\u901a\u8fc7 / \u6839\u5904\u7406\u7a0b\u5e8f\uff09\uff0c\u5f53\u5b83\u88ab\u53d1\u5e03\u65f6\uff0c sign() \u5904\u7406\u7a0b\u5e8f\u5c06\u8fd9\u4e2a\u6587\u672c\u66ff\u6362\u5230\u4ea7\u751f\u7684 html \u54cd\u5e94\u4e2d\u3002 sign() \u51fd\u6570\u901a\u8fc7\u8c03\u7528 r.FormValue \u83b7\u5f97\u7a97\u53e3\u6570\u636e\uff0c\u5e76\u5c06\u5176\u4f20\u9012\u7ed9 signTemplate.Execute() \uff0c\u540e\u8005\u5c06\u6e32\u67d3\u7684\u6a21\u677f\u5199\u5165 http.ResponseWriter \u3002 \u7f16\u8f91\u6587\u4ef6 helloworld2.go\uff0c\u7528\u4e0b\u9762\u7684 Go \u4ee3\u7801\u66ff\u6362\u5b83\uff0c\u5e76\u8bd5\u8fd0\u884c\uff1a Listing 20.4 helloworld2_version3.go: package hello import ( \"fmt\" \"net/http\" \"template\" ) const guestbookForm = ` <html> <body> <form action=\"/sign\" method=\"post\"> <div><textarea name=\"content\" rows=\"3\" cols=\"60\"></textarea></div> <div><input type=\"submit\" value=\"Sign Guestbook\"></div> </form> </body> </html> ` const signTemplateHTML = ` <html> <body> <p>You wrote:</p> <pre>{{html .}}</pre> </body> </html> ` var signTemplate = template . Must ( template . New ( \"sign\" ). Parse ( signTemplateHTML )) func init () { http . HandleFunc ( \"/\" , root ) http . HandleFunc ( \"/sign\" , sign ) } func root ( w http . ResponseWriter , r * http . Request ) { w . Header (). Set ( \"Content-Type\" , \"text/html\" ) fmt . Fprint ( w , guestbookForm ) } func sign ( w http . ResponseWriter , r * http . Request ) { w . Header (). Set ( \"Content-Type\" , \"text/html\" ) err := signTemplate . Execute ( w , r . FormValue ( \"content\" )) if err != nil { http . Error ( w , err . String (), http . StatusInternalServerError ) } } \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f7f\u7528\u7528\u6237\u670d\u52a1\u548c\u63a2\u7d22\u5176 API \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528\u6570\u636e\u5b58\u50a8","title":"20.6 \u5904\u7406\u7a97\u53e3"},{"location":"20.6/#206","text":"\u6b63\u5982\u6211\u4eec\u5728 15.6 / 7 \u8282\u4e2d\u6240\u770b\u5230\u7684\uff0c template \u5305\u7ecf\u5e38\u88ab\u7528\u4e8e web \u5e94\u7528\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u88ab\u7528\u4e8e GAE \u5e94\u7528\u3002\u4e0b\u9762\u7684\u5e94\u7528\u7a0b\u5e8f\u8ba9\u7528\u6237\u8f93\u5165\u4e00\u4e2a\u6587\u672c\u3002\u9996\u5148\uff0c\u4e00\u4e2a\u7559\u8a00\u7c3f\u8868\u683c\u663e\u793a\u51fa\u6765\uff08\u901a\u8fc7 / \u6839\u5904\u7406\u7a0b\u5e8f\uff09\uff0c\u5f53\u5b83\u88ab\u53d1\u5e03\u65f6\uff0c sign() \u5904\u7406\u7a0b\u5e8f\u5c06\u8fd9\u4e2a\u6587\u672c\u66ff\u6362\u5230\u4ea7\u751f\u7684 html \u54cd\u5e94\u4e2d\u3002 sign() \u51fd\u6570\u901a\u8fc7\u8c03\u7528 r.FormValue \u83b7\u5f97\u7a97\u53e3\u6570\u636e\uff0c\u5e76\u5c06\u5176\u4f20\u9012\u7ed9 signTemplate.Execute() \uff0c\u540e\u8005\u5c06\u6e32\u67d3\u7684\u6a21\u677f\u5199\u5165 http.ResponseWriter \u3002 \u7f16\u8f91\u6587\u4ef6 helloworld2.go\uff0c\u7528\u4e0b\u9762\u7684 Go \u4ee3\u7801\u66ff\u6362\u5b83\uff0c\u5e76\u8bd5\u8fd0\u884c\uff1a Listing 20.4 helloworld2_version3.go: package hello import ( \"fmt\" \"net/http\" \"template\" ) const guestbookForm = ` <html> <body> <form action=\"/sign\" method=\"post\"> <div><textarea name=\"content\" rows=\"3\" cols=\"60\"></textarea></div> <div><input type=\"submit\" value=\"Sign Guestbook\"></div> </form> </body> </html> ` const signTemplateHTML = ` <html> <body> <p>You wrote:</p> <pre>{{html .}}</pre> </body> </html> ` var signTemplate = template . Must ( template . New ( \"sign\" ). Parse ( signTemplateHTML )) func init () { http . HandleFunc ( \"/\" , root ) http . HandleFunc ( \"/sign\" , sign ) } func root ( w http . ResponseWriter , r * http . Request ) { w . Header (). Set ( \"Content-Type\" , \"text/html\" ) fmt . Fprint ( w , guestbookForm ) } func sign ( w http . ResponseWriter , r * http . Request ) { w . Header (). Set ( \"Content-Type\" , \"text/html\" ) err := signTemplate . Execute ( w , r . FormValue ( \"content\" )) if err != nil { http . Error ( w , err . String (), http . StatusInternalServerError ) } }","title":"20.6 \u5904\u7406\u7a97\u53e3"},{"location":"20.6/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f7f\u7528\u7528\u6237\u670d\u52a1\u548c\u63a2\u7d22\u5176 API \u4e0b\u4e00\u8282\uff1a \u4f7f\u7528\u6570\u636e\u5b58\u50a8","title":"\u94fe\u63a5"},{"location":"20.7/","text":"20.7 \u4f7f\u7528\u6570\u636e\u5b58\u50a8 \u00b6 \u6211\u4eec\u73b0\u5728\u6709\u4e86\u4e00\u79cd\u7528 html \u7a97\u53e3\u6765\u6536\u96c6\u7528\u6237\u4fe1\u606f\u7684\u65b9\u6cd5\u3002\u901a\u5e38\u6211\u4eec\u5e0c\u671b\u4f7f\u8fd9\u4e9b\u4fe1\u606f\u6301\u4e45\u5316\uff1a\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5730\u65b9\u6765\u653e\u7f6e\u8fd9\u4e9b\u4fe1\u606f\uff0c\u5e76\u4e14\u9700\u8981\u4e00\u4e2a\u65b9\u6cd5\u6765\u53d6\u56de\u8fd9\u4e9b\u4fe1\u606f\u3002GAE \u5728\u8fd9\u91cc\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u5b83\u7684 DataStore \u8bbe\u65bd\uff1a\u4e00\u4e2a\u975e\u5173\u7cfb\u578b (non-relational) \u6570\u636e\u5e93\uff0c\u5b83\u53ef\u4ee5\u8de8\u7f51\u7edc\u670d\u52a1\u5668\u751a\u81f3\u8de8\u673a\u5668\u6301\u4e45\u4fdd\u5b58\u60a8\u7684\u6570\u636e\u3002\u4e8b\u5b9e\u4e0a\uff0c\u7528\u6237\u7684\u4e0b\u4e00\u4e2a\u8bf7\u6c42\u5f88\u53ef\u80fd\u662f\u5728\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u7684\u4e0d\u540c\u7684\u7f51\u7edc\u670d\u52a1\u5668\uff0c\u4f46 GAE \u7684\u57fa\u7840\u8bbe\u65bd\u5728\u4e00\u4e2a\u7b80\u5355\u7684 API \u540e\u9762\u5904\u7406\u4e86\u6240\u6709\u7684\u6570\u636e\u5206\u5e03\u3001\u590d\u5236\u548c\u8d1f\u8f7d\u5e73\u8861\uff0c\u4f60\u8fd8\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5f3a\u5927\u7684\u67e5\u8be2\u5f15\u64ce\u3002 \u6211\u4eec\u73b0\u5728\u5c06\u5bf9\u6211\u4eec\u7684\u4f8b\u5b50\u8fdb\u884c\u4e00\u4e9b\u6269\u5c55\uff0c\u5236\u4f5c\u4e00\u4e2a\u95ee\u5019\u7ed3\u6784\uff0c\u8be5\u7ed3\u6784\u53ef\u4ee5\u5305\u542b\u95ee\u5019\u7684\u4f5c\u8005\u3001\u5185\u5bb9\u548c\u65f6\u95f4\uff0c\u6211\u4eec\u8981\u5b58\u50a8\u8fd9\u4e9b\u5185\u5bb9\u3002\u8fd9\u662f\u4f60\u8981\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\uff1a\u4e3a\u4f60\u7684\u7a0b\u5e8f*\u5b9e\u4f53*\uff08\u5373\u4f60\u7684\u7a0b\u5e8f\u6240\u5904\u7406\u7684\u5bf9\u8c61\uff09\u5236\u4f5c\u4e00\u4e2a\u5408\u9002\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u8fd9\u5c06\u662f\u4e00\u4e2a struct \u3002\u5728\u8fd0\u884c\u7684\u7a0b\u5e8f\u4e2d\uff0c\u8fd9\u4e2a\u7ed3\u6784\u7684\u5185\u5b58\u503c\u5c06\u5305\u542b\u6765\u81ea\u8be5\u5b9e\u4f53\u7684 DataStore \u7684\u6570\u636e\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u7a0b\u5e8f\u7684\u7248\u672c\u5982\u4e0b\uff1a \u200b (A) url:/ \uff1a \u68c0\u7d22\u6240\u6709\u5b58\u50a8\u7684\u95ee\u5019\u8bed\u5e76\u901a\u8fc7 template \u5305\u663e\u793a\u5b83\u4eec \u200b (B) url:/sign \uff1a\u5b58\u50a8\u4e00\u4e2a\u65b0\u7684\u95ee\u5019\u8bed\u5230\u6570\u636e\u5b58\u50a8\u91cc\u9762 \u6211\u4eec\u73b0\u5728\u9700\u8981\u5bfc\u5165 appengin/datastore \u5305\uff1a Listing 20.5 helloworld2_version4.go: package hello import ( \"appengine\" \"appengine/datastore\" \"appengine/user\" \"net/http\" \"template\" \"time\" ) const guestbookTemplateHTML = ` <html> <body> {{range .}} {{with .Author}} <p><b>{{html .}}</b> wrote:</p> {{else}} <p>An anonymous person wrote:</p> {{end}} <pre>{{html .Content}}</pre> <pre>{{html .Date}}</pre> {{end}} <form action=\"/sign\" method=\"post\"> <div><textarea name=\"content\" rows=\"3\" cols=\"60\"></textarea></div> <div><input type=\"submit\" value=\"Sign Guestbook\"></div> </form> </body> </html> ` var guestbookTemplate = template . Must ( template . New ( \"book\" ). Parse ( guestbookTemplateHTML )) type Greeting struct { Author string Content string Date datastore . Time } func init () { http . HandleFunc ( \"/\" , root ) http . HandleFunc ( \"/sign\" , sign ) } func root ( w http . ResponseWriter , r * http . Request ) { c := appengine . NewContext ( r ) q := datastore . NewQuery ( \"Greeting\" ). Order ( \"-Date\" ). Limit ( 10 ) greetings := make ([] Greeting , 0 , 10 ) if _ , err := q . GetAll ( c , & greetings ); err != nil { http . Error ( w , err . String (), http . StatusInternalServerError ) return } if err := guestbookTemplate . Execute ( w , greetings ); err != nil { http . Error ( w , err . String (), http . StatusInternalServerError ) } } func sign ( w http . ResponseWriter , r * http . Request ) { c := appengine . NewContext ( r ) g := Greeting { Content : r . FormValue ( \"content\" ), Date : datastore . SecondsToTime ( time . Seconds ()), } if u := user . Current ( c ); u != nil { g . Author = u . String () } _ , err := datastore . Put ( c , datastore . NewIncompleteKey ( c , \"Greeting\" , nil ), & g ) if err != nil { http . Error ( w , err . String (), http . StatusInternalServerError ) return } http . Redirect ( w , r , \"/\" , http . StatusFound ) } \u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f (B) \u4ece\u8868\u5355\u548c\u4e0a\u4e0b\u6587\u6570\u636e\u4e2d\u6784\u5efa\u4e86\u4e00\u4e2a\u95ee\u5019\u503c g \uff0c\u7136\u540e\u7528 datastore.Put() \u5b58\u50a8\u5b83\u3002DataStore \u5728\u5185\u90e8\u4e3a\u6570\u636e\u8bb0\u5f55\u751f\u6210\u81ea\u5df1\u7684\u552f\u4e00 key\uff1b\u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u8c03\u7528 Put() \u51fd\u6570\uff0c\u5c06 datastore . NewIncompleteKey ( c , \"Greeting\" , nil ) \u4f5c\u4e3a\u7b2c 2 \u4e2a\u53c2\u6570\uff08\u8fd9\u4e2a\u51fd\u6570\u9700\u8981\u5b9e\u4f53 Greeting \u7684\u540d\u5b57\uff09\u3002 Put() \u7684\u7b2c 3 \u4e2a\u53c2\u6570 &g \u662f\u4e00\u4e2a\u5305\u542b value \u7684 struct \uff08\u4e25\u683c\u6765\u8bf4\uff0c\u6b64\u5904\u5e94\u4e3a\u6307\u5411\u8fd9\u4e2a struct \u7684\u6307\u9488\uff09\u3002 datastore \u5305\u63d0\u4f9b\u4e86\u4e00\u4e2a\u67e5\u8be2\u7c7b\u578b\uff0c\u7528\u4e8e\u67e5\u8be2\u6570\u636e\u5b58\u50a8\u5e76\u8fed\u4ee3\u7ed3\u679c\u3002\u6839\u5904\u7406\u7a0b\u5e8f\u6b63\u662f\u901a\u8fc7\u6784\u9020\u4e00\u4e2a\u67e5\u8be2 q() \u6765\u5b9e\u73b0\u7684\uff0c\u8be5\u67e5\u8be2\u6309\u7167\u65e5\u671f\u964d\u5e8f\u4eceDataStore \u4e2d\u8bf7\u6c42\u95ee\u5019\u5bf9\u8c61\uff0c\u9650\u5236\u4e3a 10 \u4e2a\u3002 q := datastore . NewQuery ( \"Greeting\" ). Order ( \"-Date\" ). Limit ( 10 ) \u6211\u4eec\u9700\u8981\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u5b58\u50a8\u6211\u4eec\u7684\u67e5\u8be2\u7ed3\u679c\uff0c\u4e5f\u5c31\u662f greetings \uff0c\u4e00\u4e2a Greeting \u503c\u7684\u5207\u7247\u3002\u6211\u4eec\u5bf9 q.GetAll(c, &greetings) \u7684\u8c03\u7528\u68c0\u7d22\u4e86\u6570\u636e\uff0c\u5e76\u5c06\u5b83\u4eec\u5b58\u50a8\u5728\u6211\u4eec\u7684\u5207\u7247\u4e2d\uff1b\u5f53\u7136\uff0c\u6211\u4eec\u4f1a\u68c0\u67e5\u53ef\u80fd\u7684\u9519\u8bef\u3002 \u5f53\u4e00\u5207\u6b63\u5e38\u65f6\uff0c\u6211\u4eec\u901a\u8fc7\u4e0e\u6211\u4eec\u7684\u6a21\u677f\u5408\u5e76\u6765\u663e\u793a\u6570\u636e\uff1a guestbookTemplate . Execute ( w , greetings ) \u8fd9\u662f\u7531\u4e00\u4e2a range \u7ed3\u6784\u6267\u884c\u7684\uff08\u53c2\u8003 15.7.6 \u8282 \uff09\u3002 \u518d\u6b21\u901a\u8fc7\u7f16\u8f91 helloworld2.go \u6587\u4ef6\u8fdb\u884c\u6d4b\u8bd5\uff0c\u7528 listing 20.5 \u4e2d\u7684\u4ee3\u7801\u66ff\u6362\u5b83\uff1b\u5728\u95ee\u5019\u4e2d\u95f4\u7684\u95f4\u9699\u5173\u95ed\u6d4f\u89c8\u5668\u4f1a\u8bdd\uff0c\u8fd9\u6837\u4f60\u53ef\u4ee5\u68c0\u67e5\u5b83\u4eec\u662f\u5426\u88ab\u6301\u4e45\u4fdd\u5b58\u3002 \u6e05\u9664\u5f00\u53d1\u7528\u670d\u52a1\u5668\u7684\u6570\u636e\u5b58\u50a8\uff1a \u5f00\u53d1\u7528 web \u670d\u52a1\u5668\u4f7f\u7528\u4e00\u4e2a\u672c\u5730\u7248\u672c\u7684\u6570\u636e\u5b58\u50a8\u6765\u6d4b\u8bd5\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f7f\u7528\u4e34\u65f6\u6587\u4ef6\u3002\u53ea\u8981\u4e34\u65f6\u6587\u4ef6\u5b58\u5728\uff0c\u6570\u636e\u5c31\u4f1a\u6301\u7eed\u5b58\u5728\uff0c\u9664\u975e\u4f60\u8981\u6c42\uff0c\u5426\u5219 Web \u670d\u52a1\u5668\u4e0d\u4f1a\u91cd\u7f6e\u8fd9\u4e9b\u6587\u4ef6\u3002\u5982\u679c\u4f60\u60f3\u8ba9\u5f00\u53d1\u7528\u670d\u52a1\u5668\u5728\u542f\u52a8\u524d\u64e6\u9664\u5176\u6570\u636e\u5b58\u50a8\uff0c\u8bf7\u5728\u542f\u52a8\u670d\u52a1\u5668\u65f6\u4f7f\u7528 --clear_datastore \u9009\u9879\uff1a dev_appserver.py --clear_datastore helloapp/ \u8c03\u8bd5\uff1a gdb \u8c03\u8bd5\u5668\u53ef\u4ee5\u548c Go \u4e00\u8d77\u4f7f\u7528\uff08\u89c1 http://golang.org/doc/debugging_with_gdb.html \uff09\uff0c\u4f60\u53ef\u4ee5\u5c06 gdb \u9644\u52a0\u5230\u4e00\u4e2a\u73b0\u6709\u7684\u8fdb\u7a0b\u4e2d\u3002\u56e0\u6b64\uff1a\u50cf\u5f80\u5e38\u4e00\u6837\u542f\u52a8 dev_appserver.py\uff0c\u5e76\u8bbf\u95ee localhost:8080 \u6765\u542f\u52a8\u4f60\u7684 Go \u5e94\u7528\u7a0b\u5e8f\u3002\u7136\u540e\u6267\u884c\uff1a $ ps ax | grep _go_app \uff0c\u627e\u5230 _go_app \u7684 PID \u548c\u8def\u5f84\u3002\u5982\u679c\u4f60\u628a gdb \u8fde\u63a5\u5230\u8fd9\u4e2a\u4e0a\u9762\uff0c\u90a3\u4e48\u4f60\u5bf9 dev_appserver \u7684\u4e0b\u4e00\u4e2a HTTP \u8bf7\u6c42\u5e94\u8be5\u4f1a\u78b0\u5230\u4f60\u5728\u4ee3\u7801\u4e2d\u8bbe\u7f6e\u7684\u4efb\u4f55\u65ad\u70b9\u3002\u8bb0\u4f4f\uff0c\u5982\u679c\u4f60\u4fee\u6539\u4e86 Go \u7684\u6e90\u4ee3\u7801\uff0c\u90a3\u4e48\u5f00\u53d1\u5e94\u7528\u670d\u52a1\u5668\u5c06\u91cd\u65b0\u7f16\u8bd1\u5e76\u6267\u884c\u4e0d\u540c\u7684 _go_app\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5904\u7406\u7a97\u53e3 \u4e0b\u4e00\u8282\uff1a \u4e0a\u4f20\u5230\u4e91\u7aef","title":"20.7 \u4f7f\u7528\u6570\u636e\u5b58\u50a8"},{"location":"20.7/#207","text":"\u6211\u4eec\u73b0\u5728\u6709\u4e86\u4e00\u79cd\u7528 html \u7a97\u53e3\u6765\u6536\u96c6\u7528\u6237\u4fe1\u606f\u7684\u65b9\u6cd5\u3002\u901a\u5e38\u6211\u4eec\u5e0c\u671b\u4f7f\u8fd9\u4e9b\u4fe1\u606f\u6301\u4e45\u5316\uff1a\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5730\u65b9\u6765\u653e\u7f6e\u8fd9\u4e9b\u4fe1\u606f\uff0c\u5e76\u4e14\u9700\u8981\u4e00\u4e2a\u65b9\u6cd5\u6765\u53d6\u56de\u8fd9\u4e9b\u4fe1\u606f\u3002GAE \u5728\u8fd9\u91cc\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u5b83\u7684 DataStore \u8bbe\u65bd\uff1a\u4e00\u4e2a\u975e\u5173\u7cfb\u578b (non-relational) \u6570\u636e\u5e93\uff0c\u5b83\u53ef\u4ee5\u8de8\u7f51\u7edc\u670d\u52a1\u5668\u751a\u81f3\u8de8\u673a\u5668\u6301\u4e45\u4fdd\u5b58\u60a8\u7684\u6570\u636e\u3002\u4e8b\u5b9e\u4e0a\uff0c\u7528\u6237\u7684\u4e0b\u4e00\u4e2a\u8bf7\u6c42\u5f88\u53ef\u80fd\u662f\u5728\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u7684\u4e0d\u540c\u7684\u7f51\u7edc\u670d\u52a1\u5668\uff0c\u4f46 GAE \u7684\u57fa\u7840\u8bbe\u65bd\u5728\u4e00\u4e2a\u7b80\u5355\u7684 API \u540e\u9762\u5904\u7406\u4e86\u6240\u6709\u7684\u6570\u636e\u5206\u5e03\u3001\u590d\u5236\u548c\u8d1f\u8f7d\u5e73\u8861\uff0c\u4f60\u8fd8\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5f3a\u5927\u7684\u67e5\u8be2\u5f15\u64ce\u3002 \u6211\u4eec\u73b0\u5728\u5c06\u5bf9\u6211\u4eec\u7684\u4f8b\u5b50\u8fdb\u884c\u4e00\u4e9b\u6269\u5c55\uff0c\u5236\u4f5c\u4e00\u4e2a\u95ee\u5019\u7ed3\u6784\uff0c\u8be5\u7ed3\u6784\u53ef\u4ee5\u5305\u542b\u95ee\u5019\u7684\u4f5c\u8005\u3001\u5185\u5bb9\u548c\u65f6\u95f4\uff0c\u6211\u4eec\u8981\u5b58\u50a8\u8fd9\u4e9b\u5185\u5bb9\u3002\u8fd9\u662f\u4f60\u8981\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\uff1a\u4e3a\u4f60\u7684\u7a0b\u5e8f*\u5b9e\u4f53*\uff08\u5373\u4f60\u7684\u7a0b\u5e8f\u6240\u5904\u7406\u7684\u5bf9\u8c61\uff09\u5236\u4f5c\u4e00\u4e2a\u5408\u9002\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u8fd9\u5c06\u662f\u4e00\u4e2a struct \u3002\u5728\u8fd0\u884c\u7684\u7a0b\u5e8f\u4e2d\uff0c\u8fd9\u4e2a\u7ed3\u6784\u7684\u5185\u5b58\u503c\u5c06\u5305\u542b\u6765\u81ea\u8be5\u5b9e\u4f53\u7684 DataStore \u7684\u6570\u636e\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u7a0b\u5e8f\u7684\u7248\u672c\u5982\u4e0b\uff1a \u200b (A) url:/ \uff1a \u68c0\u7d22\u6240\u6709\u5b58\u50a8\u7684\u95ee\u5019\u8bed\u5e76\u901a\u8fc7 template \u5305\u663e\u793a\u5b83\u4eec \u200b (B) url:/sign \uff1a\u5b58\u50a8\u4e00\u4e2a\u65b0\u7684\u95ee\u5019\u8bed\u5230\u6570\u636e\u5b58\u50a8\u91cc\u9762 \u6211\u4eec\u73b0\u5728\u9700\u8981\u5bfc\u5165 appengin/datastore \u5305\uff1a Listing 20.5 helloworld2_version4.go: package hello import ( \"appengine\" \"appengine/datastore\" \"appengine/user\" \"net/http\" \"template\" \"time\" ) const guestbookTemplateHTML = ` <html> <body> {{range .}} {{with .Author}} <p><b>{{html .}}</b> wrote:</p> {{else}} <p>An anonymous person wrote:</p> {{end}} <pre>{{html .Content}}</pre> <pre>{{html .Date}}</pre> {{end}} <form action=\"/sign\" method=\"post\"> <div><textarea name=\"content\" rows=\"3\" cols=\"60\"></textarea></div> <div><input type=\"submit\" value=\"Sign Guestbook\"></div> </form> </body> </html> ` var guestbookTemplate = template . Must ( template . New ( \"book\" ). Parse ( guestbookTemplateHTML )) type Greeting struct { Author string Content string Date datastore . Time } func init () { http . HandleFunc ( \"/\" , root ) http . HandleFunc ( \"/sign\" , sign ) } func root ( w http . ResponseWriter , r * http . Request ) { c := appengine . NewContext ( r ) q := datastore . NewQuery ( \"Greeting\" ). Order ( \"-Date\" ). Limit ( 10 ) greetings := make ([] Greeting , 0 , 10 ) if _ , err := q . GetAll ( c , & greetings ); err != nil { http . Error ( w , err . String (), http . StatusInternalServerError ) return } if err := guestbookTemplate . Execute ( w , greetings ); err != nil { http . Error ( w , err . String (), http . StatusInternalServerError ) } } func sign ( w http . ResponseWriter , r * http . Request ) { c := appengine . NewContext ( r ) g := Greeting { Content : r . FormValue ( \"content\" ), Date : datastore . SecondsToTime ( time . Seconds ()), } if u := user . Current ( c ); u != nil { g . Author = u . String () } _ , err := datastore . Put ( c , datastore . NewIncompleteKey ( c , \"Greeting\" , nil ), & g ) if err != nil { http . Error ( w , err . String (), http . StatusInternalServerError ) return } http . Redirect ( w , r , \"/\" , http . StatusFound ) } \u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f (B) \u4ece\u8868\u5355\u548c\u4e0a\u4e0b\u6587\u6570\u636e\u4e2d\u6784\u5efa\u4e86\u4e00\u4e2a\u95ee\u5019\u503c g \uff0c\u7136\u540e\u7528 datastore.Put() \u5b58\u50a8\u5b83\u3002DataStore \u5728\u5185\u90e8\u4e3a\u6570\u636e\u8bb0\u5f55\u751f\u6210\u81ea\u5df1\u7684\u552f\u4e00 key\uff1b\u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u8c03\u7528 Put() \u51fd\u6570\uff0c\u5c06 datastore . NewIncompleteKey ( c , \"Greeting\" , nil ) \u4f5c\u4e3a\u7b2c 2 \u4e2a\u53c2\u6570\uff08\u8fd9\u4e2a\u51fd\u6570\u9700\u8981\u5b9e\u4f53 Greeting \u7684\u540d\u5b57\uff09\u3002 Put() \u7684\u7b2c 3 \u4e2a\u53c2\u6570 &g \u662f\u4e00\u4e2a\u5305\u542b value \u7684 struct \uff08\u4e25\u683c\u6765\u8bf4\uff0c\u6b64\u5904\u5e94\u4e3a\u6307\u5411\u8fd9\u4e2a struct \u7684\u6307\u9488\uff09\u3002 datastore \u5305\u63d0\u4f9b\u4e86\u4e00\u4e2a\u67e5\u8be2\u7c7b\u578b\uff0c\u7528\u4e8e\u67e5\u8be2\u6570\u636e\u5b58\u50a8\u5e76\u8fed\u4ee3\u7ed3\u679c\u3002\u6839\u5904\u7406\u7a0b\u5e8f\u6b63\u662f\u901a\u8fc7\u6784\u9020\u4e00\u4e2a\u67e5\u8be2 q() \u6765\u5b9e\u73b0\u7684\uff0c\u8be5\u67e5\u8be2\u6309\u7167\u65e5\u671f\u964d\u5e8f\u4eceDataStore \u4e2d\u8bf7\u6c42\u95ee\u5019\u5bf9\u8c61\uff0c\u9650\u5236\u4e3a 10 \u4e2a\u3002 q := datastore . NewQuery ( \"Greeting\" ). Order ( \"-Date\" ). Limit ( 10 ) \u6211\u4eec\u9700\u8981\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u5b58\u50a8\u6211\u4eec\u7684\u67e5\u8be2\u7ed3\u679c\uff0c\u4e5f\u5c31\u662f greetings \uff0c\u4e00\u4e2a Greeting \u503c\u7684\u5207\u7247\u3002\u6211\u4eec\u5bf9 q.GetAll(c, &greetings) \u7684\u8c03\u7528\u68c0\u7d22\u4e86\u6570\u636e\uff0c\u5e76\u5c06\u5b83\u4eec\u5b58\u50a8\u5728\u6211\u4eec\u7684\u5207\u7247\u4e2d\uff1b\u5f53\u7136\uff0c\u6211\u4eec\u4f1a\u68c0\u67e5\u53ef\u80fd\u7684\u9519\u8bef\u3002 \u5f53\u4e00\u5207\u6b63\u5e38\u65f6\uff0c\u6211\u4eec\u901a\u8fc7\u4e0e\u6211\u4eec\u7684\u6a21\u677f\u5408\u5e76\u6765\u663e\u793a\u6570\u636e\uff1a guestbookTemplate . Execute ( w , greetings ) \u8fd9\u662f\u7531\u4e00\u4e2a range \u7ed3\u6784\u6267\u884c\u7684\uff08\u53c2\u8003 15.7.6 \u8282 \uff09\u3002 \u518d\u6b21\u901a\u8fc7\u7f16\u8f91 helloworld2.go \u6587\u4ef6\u8fdb\u884c\u6d4b\u8bd5\uff0c\u7528 listing 20.5 \u4e2d\u7684\u4ee3\u7801\u66ff\u6362\u5b83\uff1b\u5728\u95ee\u5019\u4e2d\u95f4\u7684\u95f4\u9699\u5173\u95ed\u6d4f\u89c8\u5668\u4f1a\u8bdd\uff0c\u8fd9\u6837\u4f60\u53ef\u4ee5\u68c0\u67e5\u5b83\u4eec\u662f\u5426\u88ab\u6301\u4e45\u4fdd\u5b58\u3002 \u6e05\u9664\u5f00\u53d1\u7528\u670d\u52a1\u5668\u7684\u6570\u636e\u5b58\u50a8\uff1a \u5f00\u53d1\u7528 web \u670d\u52a1\u5668\u4f7f\u7528\u4e00\u4e2a\u672c\u5730\u7248\u672c\u7684\u6570\u636e\u5b58\u50a8\u6765\u6d4b\u8bd5\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f7f\u7528\u4e34\u65f6\u6587\u4ef6\u3002\u53ea\u8981\u4e34\u65f6\u6587\u4ef6\u5b58\u5728\uff0c\u6570\u636e\u5c31\u4f1a\u6301\u7eed\u5b58\u5728\uff0c\u9664\u975e\u4f60\u8981\u6c42\uff0c\u5426\u5219 Web \u670d\u52a1\u5668\u4e0d\u4f1a\u91cd\u7f6e\u8fd9\u4e9b\u6587\u4ef6\u3002\u5982\u679c\u4f60\u60f3\u8ba9\u5f00\u53d1\u7528\u670d\u52a1\u5668\u5728\u542f\u52a8\u524d\u64e6\u9664\u5176\u6570\u636e\u5b58\u50a8\uff0c\u8bf7\u5728\u542f\u52a8\u670d\u52a1\u5668\u65f6\u4f7f\u7528 --clear_datastore \u9009\u9879\uff1a dev_appserver.py --clear_datastore helloapp/ \u8c03\u8bd5\uff1a gdb \u8c03\u8bd5\u5668\u53ef\u4ee5\u548c Go \u4e00\u8d77\u4f7f\u7528\uff08\u89c1 http://golang.org/doc/debugging_with_gdb.html \uff09\uff0c\u4f60\u53ef\u4ee5\u5c06 gdb \u9644\u52a0\u5230\u4e00\u4e2a\u73b0\u6709\u7684\u8fdb\u7a0b\u4e2d\u3002\u56e0\u6b64\uff1a\u50cf\u5f80\u5e38\u4e00\u6837\u542f\u52a8 dev_appserver.py\uff0c\u5e76\u8bbf\u95ee localhost:8080 \u6765\u542f\u52a8\u4f60\u7684 Go \u5e94\u7528\u7a0b\u5e8f\u3002\u7136\u540e\u6267\u884c\uff1a $ ps ax | grep _go_app \uff0c\u627e\u5230 _go_app \u7684 PID \u548c\u8def\u5f84\u3002\u5982\u679c\u4f60\u628a gdb \u8fde\u63a5\u5230\u8fd9\u4e2a\u4e0a\u9762\uff0c\u90a3\u4e48\u4f60\u5bf9 dev_appserver \u7684\u4e0b\u4e00\u4e2a HTTP \u8bf7\u6c42\u5e94\u8be5\u4f1a\u78b0\u5230\u4f60\u5728\u4ee3\u7801\u4e2d\u8bbe\u7f6e\u7684\u4efb\u4f55\u65ad\u70b9\u3002\u8bb0\u4f4f\uff0c\u5982\u679c\u4f60\u4fee\u6539\u4e86 Go \u7684\u6e90\u4ee3\u7801\uff0c\u90a3\u4e48\u5f00\u53d1\u5e94\u7528\u670d\u52a1\u5668\u5c06\u91cd\u65b0\u7f16\u8bd1\u5e76\u6267\u884c\u4e0d\u540c\u7684 _go_app\u3002","title":"20.7 \u4f7f\u7528\u6570\u636e\u5b58\u50a8"},{"location":"20.7/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u5904\u7406\u7a97\u53e3 \u4e0b\u4e00\u8282\uff1a \u4e0a\u4f20\u5230\u4e91\u7aef","title":"\u94fe\u63a5"},{"location":"20.8/","text":"20.8 \u4e0a\u4f20\u5230\u4e91\u7aef \u00b6 \u6211\u4eec\u7684\u7559\u8a00\u7c3f\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u8c37\u6b4c\u8d26\u6237\u8ba4\u8bc1\u7528\u6237\uff0c\u8ba9\u4ed6\u4eec\u63d0\u4ea4\u4fe1\u606f\uff0c\u5e76\u663e\u793a\u5176\u4ed6\u7528\u6237\u7559\u4e0b\u7684\u4fe1\u606f\uff0c\u8ba9\u6211\u4eec\u8ba4\u4e3a\u5176\u57fa\u672c\u529f\u80fd\u5b8c\u6210\u4e86\uff1a\u6211\u4eec\u73b0\u5728\u5c06\u628a\u5b83\u90e8\u7f72\u5728\u4e91\u4e2d\u3002\u5982\u679c\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u4f1a\u53d8\u5f97\u975e\u5e38\u6d41\u884c\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u6539\u53d8\u4efb\u4f55\u4e1c\u897f\uff0c\u56e0\u4e3a GAE \u4f1a\u81ea\u52a8\u5904\u7406\u6269\u5c55\u3002 \u4f46\u662f\uff0c\u9996\u5148\u4f60\u9700\u8981\u6709\u4e00\u4e2a\u8c37\u6b4c\u8d26\u6237\uff0c\u5982 gmail \u5730\u5740\uff1b\u4f60\u53ef\u4ee5\u5728 www.google.com/accounts \u5feb\u901f\u5efa\u7acb\u4e00\u4e2a\u8d26\u6237\u3002 \u521b\u5efa\u548c\u7ba1\u7406 App Engine \u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u662f\u901a\u8fc7 App Engine \u7ba1\u7406\u63a7\u5236\u53f0\u7f51\u7ad9\u8fdb\u884c\u7684\uff1a https://appengine.google.com/ \u5728\u5feb\u901f\u7684 SMS \u9a8c\u8bc1\u7a0b\u5e8f\u4e4b\u540e\uff0c\u4f60\u4f1a\u770b\u5230 \"\u521b\u5efa\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f \"\u7684\u9875\u9762\u3002\u9009\u62e9\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u6807\u8bc6\u7b26 ( application identifier )\uff08\u5bf9\u6240\u6709 GAE \u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\u662f\u552f\u4e00\u7684\uff09\uff0c\u5982 ib-tutgae.appspot.com\uff1b\u52a0\u4e0a\u524d\u7f00 http://\uff0c\u8fd9\u5c06\u6210\u4e3a\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u7f51\u5740\u3002\u8fd9\u4e2a\u6807\u8bc6\u7b26\u4ee5\u540e\u4e0d\u80fd\u66f4\u6539\uff0c\u5982\u679c\u662f\u79c1\u4eba\u5e94\u7528\u7a0b\u5e8f\uff0c\u7528\u4f60\u7684\u540d\u5b57\u7f29\u5199\uff0c\u5982\u679c\u662f\u5546\u4e1a\u5e94\u7528\u7a0b\u5e8f\uff0c\u7528\u4f60\u7684\u516c\u53f8\u540d\u79f0\u4f5c\u4e3a\u524d\u7f00\u662f\u6bd4\u8f83\u597d\u7684\u3002\u7136\u540e\u9009\u62e9\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u6807\u9898\uff0c\u8fd9\u5728\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u662f\u53ef\u89c1\u7684\uff0c\u5e76\u53ef\u4ee5\u5728\u4e4b\u540e\u66f4\u6539\uff0c\u4f8b\u5982 \"GAE \u5e94\u7528\u7a0b\u5e8f\u624b\u518c\"\u3002\u4fdd\u7559\u9ed8\u8ba4\u7684\u8c37\u6b4c\u8ba4\u8bc1\u548c\u9ad8\u590d\u5236\u6570\u636e\u5b58\u50a8\uff0c\u4f4e\u4e8e\u4e00\u5b9a\u7684\u914d\u989d\u4e4b\u4e0b\uff0cGAE \u5c06\u514d\u8d39\u8fd0\u884c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u70b9\u51fb \"\u521b\u5efa\u5e94\u7528\u7a0b\u5e8f \"\u6309\u94ae\u540e\uff0c\u5c06\u51fa\u73b0\u4e00\u4e2a\u5c4f\u5e55\uff0c\u663e\u793a \"\u5e94\u7528\u7a0b\u5e8f\u6210\u529f\u6ce8\u518c \"\u7684\u4fe1\u606f\u3002 \u8981\u5728\u4e91\u4e2d\u4e0a\u4f20\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u8bf7\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\u3002 1) \u7f16\u8f91 app.yaml \u6587\u4ef6\uff0c\u5c06 application: setting \u7684\u503c\u4ece helloworld \u6539\u4e3a\u4f60\u6ce8\u518c\u7684\u5e94\u7528\u7a0b\u5e8f ib-tutgae 2) \u5728 GAE \u4e2d\u4e0a\u4f20\u548c\u914d\u7f6e\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f7f\u7528\u811a\u672c appcfg.py \u6267\u884c\u547d\u4ee4\uff1a appcfg.py update helloapp/ \u901a\u8fc7\u8be2\u95ee\u60a8\u7684\u8c37\u6b4c\u8d26\u6237\u6570\u636e\u8fdb\u884c\u9a8c\u8bc1\uff0c\u5982\u679c\u4e00\u5207\u6210\u529f\uff0c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u73b0\u5728\u5c31\u53ef\u4ee5\u90e8\u7f72\u5728 App Engine \u4e0a\u4e86! \u6b65\u9aa4 2) \u5fc5\u987b\u5728\u4f60\u6bcf\u6b21\u4e0a\u4f20\u65b0\u7248\u672c\u7684\u5e94\u7528\u7a0b\u5e8f\u65f6\u6267\u884c\u3002 \u5982\u679c\u4f60\u770b\u5230\u7f16\u8bd1\u9519\u8bef\uff0c\u8bf7\u4fee\u590d\u6e90\u4ee3\u7801\u5e76\u91cd\u65b0\u8fd0\u884c appcfg.py\uff1b\u5728\u7f16\u8bd1\u6210\u529f\u4e4b\u524d\uff0c\u5b83\u4e0d\u4f1a\u542f\u52a8\uff08\u6216\u66f4\u65b0\uff09\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u5728\u4e91\u7aef\u6d4b\u8bd5\u5b83\uff1ahttp:// application-id .appspot.com \u4f7f\u7528\u4f60\u81ea\u5df1\u72ec\u7279\u7684\u5e94\u7528\u7a0b\u5e8f ID ( application-id )\uff0c\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\u662f http://ib-tutgae.appspot.com \u8fd9\u4e5f\u53ef\u4ee5\u5728 Windows \u5e73\u53f0\u7684\u6d4f\u89c8\u5668\u4e2d\u4f7f\u7528\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5728 Linux \u6216 OS X \u4e0a\u3002 \u76d1\u63a7\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\uff1a \u518d\u6b21\u8bbf\u95ee https://appengine.google.com/ \uff0c\u73b0\u5728\u5c06\u663e\u793a\u4e00\u4e2a\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u5217\u8868\u3002\u70b9\u51fb\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u94fe\u63a5\u5c06\u663e\u793a\u5176\u63a7\u5236\u9762\u677f ( Control Panel )\uff0c\u7528\u4e8e\u76d1\u63a7\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 Fig 20.1 :The Application Control Panel \u8fd9\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u5728\u4e91\u4e2d\u8fd0\u884c\uff0c\u800c\u8fd9\u662f\u4f60\u8bbf\u95ee\u5b83\u7684\u552f\u4e00\u9014\u5f84\uff08\u9664\u4e86\u7528 app_cfg \u4e0a\u4f20\u65b0\u7684\u7248\u672c\uff09\uff01\u5f53\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u5728\u4e91\u4e2d\u8fd0\u884c\u65f6\uff0c\u4f60\u4e0d\u80fd\u5bf9\u5b83\u8fdb\u884c\u6216\u8c03\u8bd5\u3002\u5f53\u4f60\u7684\u4ee3\u7801\u5728\u4e91\u4e2d\u8fd0\u884c\u65f6\uff0c\u4f60\u4e0d\u80fd\u81ea\u5df1\u5bf9\u5b83\u8fdb\u884c\u5256\u6790 (profile) \u6216\u8c03\u8bd5\u3002\u6709\u4e00\u4e2a\u56fe\u50cf\u663e\u793a\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u8d1f\u8f7d\uff08\u6bcf\u79d2\u949f\u7684\u8bf7\u6c42\u91cf\uff09\uff0c\u5b83\u6d88\u8017\u4e86\u591a\u5c11\u8d44\u6e90\uff08CPU \u4f7f\u7528\u91cf\u3001\u5e26\u5bbd\u3001\u5b58\u50a8\u3001\u590d\u5236\u7684\u6570\u636e\u3001\u540e\u7aef\u4f7f\u7528\u91cf\uff09\u4ee5\u53ca\u5982\u4f55\u8ba1\u8d39\u3002\u8fd8\u6709\u4e00\u4e2a\u8d1f\u8f7d\u89c6\u56fe\uff1a\u6bcf\u4e2a URL \u6a21\u5f0f\u7684\u8bf7\u6c42\u6570\u548c CPU \u8d1f\u8f7d\uff0c\u4ee5\u53ca\u975e\u5e38\u91cd\u8981\u7684\u4e00\u4e2a\u9519\u8bef\u89c6\u56fe\uff1a\u5173\u4e8e\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u53d1\u751f\u7684\u9519\u8bef\u7684\u6458\u8981\u4fe1\u606f\u3002\u6570\u636e\u9762\u677f\uff0c\u7279\u522b\u662f\u6570\u636e\u5b58\u50a8\u67e5\u770b\u5668\uff0c\u53ef\u4ee5\u8ba9\u4f60\u53ef\u89c6\u5316\u548c\u67e5\u8be2\u4f60\u7684\u5b58\u50a8\u6570\u636e\u3002\u6b64\u5916\uff0c\u8fd8\u6709\u7528\u4e8e\u7ba1\u7406\u7684\u7279\u5b9a\u89c6\u56fe\u548c GAE \u6587\u6863\u7684\u94fe\u63a5\u3002Main/Logs \u8ba9\u60a8\u53ef\u4ee5\u8bbf\u95ee\u5e94\u7528\u7a0b\u5e8f\u7684\u65e5\u5fd7\uff0c\u6bcf\u4e2a\u8bf7\u6c42\u548c\u9519\u8bef/\u5f02\u5e38\u90fd\u4f1a\u88ab\u8bb0\u5f55\u4e0b\u6765\uff08\u5f02\u5e38\u4e0d\u4f1a\u663e\u793a\u7ed9\u7528\u6237\uff09\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f7f\u7528\u6570\u636e\u5b58\u50a8 \u4e0b\u4e00\u8282\uff1a 21.0","title":"20.8 \u4e0a\u4f20\u5230\u4e91\u7aef"},{"location":"20.8/#208","text":"\u6211\u4eec\u7684\u7559\u8a00\u7c3f\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u8c37\u6b4c\u8d26\u6237\u8ba4\u8bc1\u7528\u6237\uff0c\u8ba9\u4ed6\u4eec\u63d0\u4ea4\u4fe1\u606f\uff0c\u5e76\u663e\u793a\u5176\u4ed6\u7528\u6237\u7559\u4e0b\u7684\u4fe1\u606f\uff0c\u8ba9\u6211\u4eec\u8ba4\u4e3a\u5176\u57fa\u672c\u529f\u80fd\u5b8c\u6210\u4e86\uff1a\u6211\u4eec\u73b0\u5728\u5c06\u628a\u5b83\u90e8\u7f72\u5728\u4e91\u4e2d\u3002\u5982\u679c\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u4f1a\u53d8\u5f97\u975e\u5e38\u6d41\u884c\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u6539\u53d8\u4efb\u4f55\u4e1c\u897f\uff0c\u56e0\u4e3a GAE \u4f1a\u81ea\u52a8\u5904\u7406\u6269\u5c55\u3002 \u4f46\u662f\uff0c\u9996\u5148\u4f60\u9700\u8981\u6709\u4e00\u4e2a\u8c37\u6b4c\u8d26\u6237\uff0c\u5982 gmail \u5730\u5740\uff1b\u4f60\u53ef\u4ee5\u5728 www.google.com/accounts \u5feb\u901f\u5efa\u7acb\u4e00\u4e2a\u8d26\u6237\u3002 \u521b\u5efa\u548c\u7ba1\u7406 App Engine \u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u662f\u901a\u8fc7 App Engine \u7ba1\u7406\u63a7\u5236\u53f0\u7f51\u7ad9\u8fdb\u884c\u7684\uff1a https://appengine.google.com/ \u5728\u5feb\u901f\u7684 SMS \u9a8c\u8bc1\u7a0b\u5e8f\u4e4b\u540e\uff0c\u4f60\u4f1a\u770b\u5230 \"\u521b\u5efa\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f \"\u7684\u9875\u9762\u3002\u9009\u62e9\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u6807\u8bc6\u7b26 ( application identifier )\uff08\u5bf9\u6240\u6709 GAE \u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\u662f\u552f\u4e00\u7684\uff09\uff0c\u5982 ib-tutgae.appspot.com\uff1b\u52a0\u4e0a\u524d\u7f00 http://\uff0c\u8fd9\u5c06\u6210\u4e3a\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u7f51\u5740\u3002\u8fd9\u4e2a\u6807\u8bc6\u7b26\u4ee5\u540e\u4e0d\u80fd\u66f4\u6539\uff0c\u5982\u679c\u662f\u79c1\u4eba\u5e94\u7528\u7a0b\u5e8f\uff0c\u7528\u4f60\u7684\u540d\u5b57\u7f29\u5199\uff0c\u5982\u679c\u662f\u5546\u4e1a\u5e94\u7528\u7a0b\u5e8f\uff0c\u7528\u4f60\u7684\u516c\u53f8\u540d\u79f0\u4f5c\u4e3a\u524d\u7f00\u662f\u6bd4\u8f83\u597d\u7684\u3002\u7136\u540e\u9009\u62e9\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u6807\u9898\uff0c\u8fd9\u5728\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u662f\u53ef\u89c1\u7684\uff0c\u5e76\u53ef\u4ee5\u5728\u4e4b\u540e\u66f4\u6539\uff0c\u4f8b\u5982 \"GAE \u5e94\u7528\u7a0b\u5e8f\u624b\u518c\"\u3002\u4fdd\u7559\u9ed8\u8ba4\u7684\u8c37\u6b4c\u8ba4\u8bc1\u548c\u9ad8\u590d\u5236\u6570\u636e\u5b58\u50a8\uff0c\u4f4e\u4e8e\u4e00\u5b9a\u7684\u914d\u989d\u4e4b\u4e0b\uff0cGAE \u5c06\u514d\u8d39\u8fd0\u884c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u70b9\u51fb \"\u521b\u5efa\u5e94\u7528\u7a0b\u5e8f \"\u6309\u94ae\u540e\uff0c\u5c06\u51fa\u73b0\u4e00\u4e2a\u5c4f\u5e55\uff0c\u663e\u793a \"\u5e94\u7528\u7a0b\u5e8f\u6210\u529f\u6ce8\u518c \"\u7684\u4fe1\u606f\u3002 \u8981\u5728\u4e91\u4e2d\u4e0a\u4f20\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u8bf7\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\u3002 1) \u7f16\u8f91 app.yaml \u6587\u4ef6\uff0c\u5c06 application: setting \u7684\u503c\u4ece helloworld \u6539\u4e3a\u4f60\u6ce8\u518c\u7684\u5e94\u7528\u7a0b\u5e8f ib-tutgae 2) \u5728 GAE \u4e2d\u4e0a\u4f20\u548c\u914d\u7f6e\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f7f\u7528\u811a\u672c appcfg.py \u6267\u884c\u547d\u4ee4\uff1a appcfg.py update helloapp/ \u901a\u8fc7\u8be2\u95ee\u60a8\u7684\u8c37\u6b4c\u8d26\u6237\u6570\u636e\u8fdb\u884c\u9a8c\u8bc1\uff0c\u5982\u679c\u4e00\u5207\u6210\u529f\uff0c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u73b0\u5728\u5c31\u53ef\u4ee5\u90e8\u7f72\u5728 App Engine \u4e0a\u4e86! \u6b65\u9aa4 2) \u5fc5\u987b\u5728\u4f60\u6bcf\u6b21\u4e0a\u4f20\u65b0\u7248\u672c\u7684\u5e94\u7528\u7a0b\u5e8f\u65f6\u6267\u884c\u3002 \u5982\u679c\u4f60\u770b\u5230\u7f16\u8bd1\u9519\u8bef\uff0c\u8bf7\u4fee\u590d\u6e90\u4ee3\u7801\u5e76\u91cd\u65b0\u8fd0\u884c appcfg.py\uff1b\u5728\u7f16\u8bd1\u6210\u529f\u4e4b\u524d\uff0c\u5b83\u4e0d\u4f1a\u542f\u52a8\uff08\u6216\u66f4\u65b0\uff09\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u5728\u4e91\u7aef\u6d4b\u8bd5\u5b83\uff1ahttp:// application-id .appspot.com \u4f7f\u7528\u4f60\u81ea\u5df1\u72ec\u7279\u7684\u5e94\u7528\u7a0b\u5e8f ID ( application-id )\uff0c\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\u662f http://ib-tutgae.appspot.com \u8fd9\u4e5f\u53ef\u4ee5\u5728 Windows \u5e73\u53f0\u7684\u6d4f\u89c8\u5668\u4e2d\u4f7f\u7528\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5728 Linux \u6216 OS X \u4e0a\u3002 \u76d1\u63a7\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\uff1a \u518d\u6b21\u8bbf\u95ee https://appengine.google.com/ \uff0c\u73b0\u5728\u5c06\u663e\u793a\u4e00\u4e2a\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u5217\u8868\u3002\u70b9\u51fb\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u94fe\u63a5\u5c06\u663e\u793a\u5176\u63a7\u5236\u9762\u677f ( Control Panel )\uff0c\u7528\u4e8e\u76d1\u63a7\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 Fig 20.1 :The Application Control Panel \u8fd9\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u5728\u4e91\u4e2d\u8fd0\u884c\uff0c\u800c\u8fd9\u662f\u4f60\u8bbf\u95ee\u5b83\u7684\u552f\u4e00\u9014\u5f84\uff08\u9664\u4e86\u7528 app_cfg \u4e0a\u4f20\u65b0\u7684\u7248\u672c\uff09\uff01\u5f53\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u5728\u4e91\u4e2d\u8fd0\u884c\u65f6\uff0c\u4f60\u4e0d\u80fd\u5bf9\u5b83\u8fdb\u884c\u6216\u8c03\u8bd5\u3002\u5f53\u4f60\u7684\u4ee3\u7801\u5728\u4e91\u4e2d\u8fd0\u884c\u65f6\uff0c\u4f60\u4e0d\u80fd\u81ea\u5df1\u5bf9\u5b83\u8fdb\u884c\u5256\u6790 (profile) \u6216\u8c03\u8bd5\u3002\u6709\u4e00\u4e2a\u56fe\u50cf\u663e\u793a\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u8d1f\u8f7d\uff08\u6bcf\u79d2\u949f\u7684\u8bf7\u6c42\u91cf\uff09\uff0c\u5b83\u6d88\u8017\u4e86\u591a\u5c11\u8d44\u6e90\uff08CPU \u4f7f\u7528\u91cf\u3001\u5e26\u5bbd\u3001\u5b58\u50a8\u3001\u590d\u5236\u7684\u6570\u636e\u3001\u540e\u7aef\u4f7f\u7528\u91cf\uff09\u4ee5\u53ca\u5982\u4f55\u8ba1\u8d39\u3002\u8fd8\u6709\u4e00\u4e2a\u8d1f\u8f7d\u89c6\u56fe\uff1a\u6bcf\u4e2a URL \u6a21\u5f0f\u7684\u8bf7\u6c42\u6570\u548c CPU \u8d1f\u8f7d\uff0c\u4ee5\u53ca\u975e\u5e38\u91cd\u8981\u7684\u4e00\u4e2a\u9519\u8bef\u89c6\u56fe\uff1a\u5173\u4e8e\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u53d1\u751f\u7684\u9519\u8bef\u7684\u6458\u8981\u4fe1\u606f\u3002\u6570\u636e\u9762\u677f\uff0c\u7279\u522b\u662f\u6570\u636e\u5b58\u50a8\u67e5\u770b\u5668\uff0c\u53ef\u4ee5\u8ba9\u4f60\u53ef\u89c6\u5316\u548c\u67e5\u8be2\u4f60\u7684\u5b58\u50a8\u6570\u636e\u3002\u6b64\u5916\uff0c\u8fd8\u6709\u7528\u4e8e\u7ba1\u7406\u7684\u7279\u5b9a\u89c6\u56fe\u548c GAE \u6587\u6863\u7684\u94fe\u63a5\u3002Main/Logs \u8ba9\u60a8\u53ef\u4ee5\u8bbf\u95ee\u5e94\u7528\u7a0b\u5e8f\u7684\u65e5\u5fd7\uff0c\u6bcf\u4e2a\u8bf7\u6c42\u548c\u9519\u8bef/\u5f02\u5e38\u90fd\u4f1a\u88ab\u8bb0\u5f55\u4e0b\u6765\uff08\u5f02\u5e38\u4e0d\u4f1a\u663e\u793a\u7ed9\u7528\u6237\uff09\u3002","title":"20.8 \u4e0a\u4f20\u5230\u4e91\u7aef"},{"location":"20.8/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4f7f\u7528\u6570\u636e\u5b58\u50a8 \u4e0b\u4e00\u8282\uff1a 21.0","title":"\u94fe\u63a5"},{"location":"21.0/","text":"21.0 \u771f\u5b9e\u4e16\u754c\u4e2d Go \u7684\u4f7f\u7528 \u00b6 \u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u4e00\u4e9b Go \u7684\u5b9e\u9645\u4f7f\u7528\u6848\u4f8b\uff1a\u6211\u4eec\u5c06\u63a2\u7d22\u4e00\u4e9b\u5982\u4eca\u5728\u5546\u4e1a\u9886\u57df\u4e2d\u4f7f\u7528\u7684 Go \u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u6307\u51fa\u4e3a\u4ec0\u4e48\u9009\u62e9\u5728\u8fd9\u4e9b\u9886\u57df\u4e2d\u4f7f\u7528 Go \u3002\u8003\u8651\u5230\u8fd9\u4e00\u8bed\u8a00\u4ec5\u53d1\u884c\u4e86 2 \u5e74\u65f6\u95f4\uff0c\u800c\u4f7f\u7528\u65b0\u8bed\u8a00\u6784\u5efa\u521d\u59cb\u9879\u76ee\u7684\u8001\u724c\u4f01\u4e1a\u901a\u5e38\u4e0d\u5e0c\u671b\u8ba9\u516c\u4f17\u77e5\u9053\u8fd9\u4e00\u70b9\uff0c\u8fd9\u662f\u975e\u5e38\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u3002 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4e0a\u4f20\u5230\u4e91\u7aef \u4e0b\u4e00\u8282\uff1a Heroku\uff1a\u4e00\u4e2a\u4f7f\u7528 Go \u7684\u9ad8\u5ea6\u53ef\u7528\u4e00\u81f4\u6570\u636e\u5b58\u50a8","title":"21.0 \u771f\u5b9e\u4e16\u754c\u4e2d Go \u7684\u4f7f\u7528"},{"location":"21.0/#210-go","text":"\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u4e00\u4e9b Go \u7684\u5b9e\u9645\u4f7f\u7528\u6848\u4f8b\uff1a\u6211\u4eec\u5c06\u63a2\u7d22\u4e00\u4e9b\u5982\u4eca\u5728\u5546\u4e1a\u9886\u57df\u4e2d\u4f7f\u7528\u7684 Go \u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u6307\u51fa\u4e3a\u4ec0\u4e48\u9009\u62e9\u5728\u8fd9\u4e9b\u9886\u57df\u4e2d\u4f7f\u7528 Go \u3002\u8003\u8651\u5230\u8fd9\u4e00\u8bed\u8a00\u4ec5\u53d1\u884c\u4e86 2 \u5e74\u65f6\u95f4\uff0c\u800c\u4f7f\u7528\u65b0\u8bed\u8a00\u6784\u5efa\u521d\u59cb\u9879\u76ee\u7684\u8001\u724c\u4f01\u4e1a\u901a\u5e38\u4e0d\u5e0c\u671b\u8ba9\u516c\u4f17\u77e5\u9053\u8fd9\u4e00\u70b9\uff0c\u8fd9\u662f\u975e\u5e38\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u3002 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u4e0a\u4f20\u5230\u4e91\u7aef \u4e0b\u4e00\u8282\uff1a Heroku\uff1a\u4e00\u4e2a\u4f7f\u7528 Go \u7684\u9ad8\u5ea6\u53ef\u7528\u4e00\u81f4\u6570\u636e\u5b58\u50a8","title":"21.0 \u771f\u5b9e\u4e16\u754c\u4e2d Go \u7684\u4f7f\u7528"},{"location":"21.1/","text":"21.1 Heroku\uff1a\u4e00\u4e2a\u4f7f\u7528 Go \u7684\u9ad8\u5ea6\u53ef\u7528\u4e00\u81f4\u6570\u636e\u5b58\u50a8 \u00b6 http://www.heroku.com/ \uff08\u5f15\u7528 39\uff09 Heroku \u662f\u4e00\u5bb6\u4f4d\u4e8e\u7f8e\u56fd\u65e7\u91d1\u5c71\u7684\u7845\u8c37\u516c\u53f8\uff0c\u6700\u8fd1\u88ab Salesforce.com \u516c\u53f8\uff08\u5b83\u4e3a Ruby \u548c Rails\u3001Java\u3001Clojure \u548c node.js \u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u5f3a\u5927\u7684\u3001\u53ef\u6269\u5c55\u7684\u3001\u7279\u522b\u662f\u975e\u5e38\u6613\u4e8e\u7ba1\u7406\u7684\u4e91\u4e3b\u673a\uff09\u6536\u8d2d\u3002Heroku \u7684\u4e24\u4f4d\u5de5\u7a0b\u5e08\uff0cKeith Rarick \u548c Blake Mizerany \u8bbe\u8ba1\u4e86\u4e00\u4e2a\u5f00\u6e90\u7684 \"\u5206\u5e03\u5f0f\u542f\u52a8\u7cfb\u7edf\"\uff0c\u540d\u4e3a Doozer \uff0c\u7528\u4e8e\u7ba1\u7406\u8de8\u96c6\u7fa4\u673a\u5668\u7684\u8fdb\u7a0b\uff0c\u5e76\u4ece\u5b9e\u4f8b\u6545\u969c\u548c\u7f51\u7edc\u6545\u969c\u4e2d\u4f18\u96c5\u5730\u6062\u590d\u5206\u533a\u3002\u5176\u4e2d\u4e00\u4e2a\u9700\u6c42\u662f\uff0c\u4ed6\u4eec\u9700\u8981\u53ef\u9760\u5730\u540c\u6b65\u548c\u5728\u8bb8\u591a\u670d\u52a1\u5668\u4e4b\u95f4\u5171\u4eab\u4fe1\u606f\u3002 \u7cfb\u7edf\u4e2d\u7684\u6bcf\u53f0\u670d\u52a1\u5668\u90fd\u9700\u8981\u6709\u5f88\u591a\u5173\u4e8e\u7cfb\u7edf\u6574\u4f53\u7684\u4fe1\u606f\uff08\u914d\u7f6e\u6570\u636e\u3001\u9501 (lock) \u7b49\uff09\uff0c\u4ee5\u4fbf\u80fd\u591f\u8fdb\u884c\u534f\u8c03\uff0c\u800c\u4e14\u8fd9\u4e9b\u4fe1\u606f\u9700\u8981\u4fdd\u6301\u4e00\u81f4\uff0c\u5373\u4f7f\u5728\u6570\u636e\u5b58\u50a8\u5931\u8d25\u65f6\u4e5f\u53ef\u4ee5\u4f7f\u7528\u3002\u56e0\u6b64\u4ed6\u4eec\u9700\u8981\u4e00\u4e2a\u5177\u6709\u575a\u5b9e\u4e00\u81f4\u6027\u4fdd\u8bc1\u7684\u6570\u636e\u5b58\u50a8\u3002\u4e3a\u6b64\uff0c\u4ed6\u4eec\u5f00\u53d1\u4e86 Doozer\uff0c\u4e00\u4e2a\u7528 Go \u8bed\u8a00\u7f16\u5199\u7684\u3001\u65b0\u7684\u3001\u4e00\u81f4\u7684\u3001\u9ad8\u5ea6\u53ef\u7528\u7684\u6570\u636e\u5b58\u50a8\uff0c\u5e76\u4e14\u4eff\u7167\u8c37\u6b4c\u7684\uff08\u5c01\u95ed\u6e90\u7801\uff09Chubby \u7a0b\u5e8f\u6765\u7ba1\u7406\u4ed6\u4eec\u7684\u540e\u7aef\u57fa\u7840\u8bbe\u65bd\u3002 Doozer \u4ee5 Paxos \u4e3a\u57fa\u7840\uff08Paxos \u662f\u4e00\u4e2a\u7531\u4e0d\u53ef\u9760\u8282\u70b9\u7ec4\u6210\u7684\u7684\u4e0d\u53ef\u9760\u7f51\u7edc\u4e2d\u89e3\u51b3\u5171\u8bc6\u95ee\u9898\u7684\u534f\u8bae\u65cf\uff09\uff0c\u867d\u7136 Paxos \u5bf9\u8fd0\u884c\u5bb9\u9519\u7cfb\u7edf\u81f3\u5173\u91cd\u8981\uff0c\u4f46\u5b83\u56e0\u96be\u4ee5\u5b9e\u73b0\u800c\u81ed\u540d\u662d\u8457\u3002\u5373\u4f7f\u662f\u5728\u7f51\u4e0a\u53ef\u4ee5\u627e\u5230\u7684\u5b9e\u4f8b\u5b9e\u73b0\u4e5f\u5f88\u590d\u6742\uff0c\u5f88\u96be\u9075\u5faa\uff0c\u5c3d\u7ba1\u5df2\u7ecf\u4e3a\u4e86\u6559\u80b2\u76ee\u7684\u800c\u88ab\u7b80\u5316\u8fc7\u3002\u800c\u73b0\u6709\u7684\u751f\u4ea7\u7cfb\u7edf\u4ee5\u66f4\u7cdf\u7cd5\u800c\u95fb\u540d\u3002 Doozer \u662f\u4f5c\u4e3a\u5efa\u7acb\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u4e00\u4e2a\u575a\u786c\u7684\u57fa\u7840\u800c\u88ab\u5f00\u53d1\u7684\u3002 \u4e00\u4e2a\u9ad8\u5ea6\u53ef\u7528\u7684\uff08\u5728\u7f51\u7edc\u5206\u533a\u671f\u95f4\u5de5\u4f5c\uff09\u3002 \u4e00\u81f4\u6027\uff08\u6ca1\u6709\u4e0d\u4e00\u81f4\u7684\u5199\u5165\uff09\u3002 \u6570\u636e\u5b58\u50a8\uff08\u7528\u4e8e\u5c11\u91cf\u7684\u6570\u636e\uff09\u3002 \u6b63\u5982\u5f00\u53d1\u4eba\u5458\u6240\u8bf4\uff1a \"Doozer \u662f\u4f60\u653e\u7f6e\u5bb6\u65cf\u73e0\u5b9d\u7684\u5730\u65b9\"\u3002 \u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5355\u4e00\u7684\u57fa\u672c\u540c\u6b65\u5143\u7d20\uff1a\u6bd4\u8f83-\u8bbe\u7f6e\u5bf9 (compare-config)\u3002 \u7528\u4f8b\uff1a - \u6570\u636e\u5e93\u4e3b\u9009 (Databases master election) - \u547d\u540d\u670d\u52a1 - \u914d\u7f6e \u4e3a\u4ec0\u4e48\u9009\u62e9 Go\uff0cGo \u7684\u7279\u70b9\u5982\u4f55\u4f7f\u5176\u6210\u4e3a\u4e00\u4e2a\u6210\u529f\u7684\u4ea7\u54c1\uff1a Paxos \u662f\u4ee5\u72ec\u7acb\u7684\u3001\u5e76\u53d1\u7684\u8fdb\u7a0b\u6765\u5b9a\u4e49\u7684\uff0c\u8fd9\u4e9b\u8fdb\u7a0b\u901a\u8fc7\u4f20\u9012\u6d88\u606f\u8fdb\u884c\u901a\u4fe1\u3002\u8fd9\u6b63\u662f Go \u7684\u5e76\u53d1\u539f\u8bed \uff08goroutines \u548c channel\uff0c\u89c1 \u7b2c 14 \u7ae0 \uff09\u6240\u64c5\u957f\u7684\u95ee\u9898\u3002\u5728 Doozer \u4e2d\uff0c\u8fd9\u4e9b\u8fdb\u7a0b\u88ab\u5b9e\u73b0\u4e3a goroutines \uff0c\u4ed6\u4eec\u7684\u901a\u4fe1\u88ab\u5b9e\u73b0\u4e3a*\u901a\u9053\u64cd\u4f5c*\u3002\u5c31\u50cf Go \u7684*\u5783\u573e\u6536\u96c6\u5668*\u5c06\u5185\u5b58\u4f7f\u7528\u91cf\u964d\u5230\u6700\u4f4e\u4e00\u6837\uff0cDoozer \u7684\u5f00\u53d1\u8005\u53d1\u73b0 goroutines \u548c\u901a\u9053\u6539\u8fdb\u4e86\u57fa\u4e8e\u9501\u7684\u5e76\u53d1\u65b9\u6cd5\u3002\u8fd9\u4e9b\u5de5\u5177\u8ba9\u4ed6\u4eec\u907f\u514d\u4e86\u590d\u6742\u7684\u201c\u8bb0\u8d26\u201d (bookkeeping) \u65b9\u5f0f\uff0c\u5e76\u5c06\u6ce8\u610f\u529b\u96c6\u4e2d\u5728\u624b\u5934\u7684\u95ee\u9898\u4e0a\u3002\u4ed6\u4eec\u4ecd\u7136\u60ca\u8bb6\u4e8e\u53ea\u7528\u4e86\u51e0\u884c\u4ee3\u7801\u5c31\u5b9e\u73b0\u4e86\u4ee5\u56f0\u96be\u8457\u79f0\u7684\u4e1c\u897f\u3002 Go \u4e2d\u7684*\u6807\u51c6\u5305*\u662f\u5bf9\u4e8e Doozer \u7684\u53e6\u4e00\u4e2a\u5927\u6210\u529f\uff0c\u5176\u4e2d\u6700\u503c\u5f97\u4e00\u63d0\u7684\u662f websocket \u5305\u3002 \u4e0b\u9762\u662f\u5f00\u53d1\u4eba\u5458\u81ea\u5df1\u7684\u4e00\u4e9b\u4f7f\u7528\u540e\u7684\u611f\u53d7\uff1a \u201c\u2026\u2026\u4f8b\u5982\uff0c\u6211\u4eec\u5f88\u5feb\u5c31\u53d1\u73b0 websocket \u662f\u4e00\u4e2a\u6709\u7528\u7684\u5305\u3002\u4e00\u65e6\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u5de5\u4f5c\u7684\u6570\u636e\u5b58\u50a8\uff0c\u6211\u4eec\u5c31\u9700\u8981\u4e00\u4e2a\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u53cd\u7701 (introspect) \u5b83\u5e76\u5c06\u6d3b\u52a8\u53ef\u89c6\u5316\u3002\u4f7f\u7528 websocket \u5305\uff0cKeith \u80fd\u591f\u5728\u56de\u5bb6\u7684\u706b\u8f66\u4e0a\u6dfb\u52a0 web \u6d4f\u89c8\u5668\uff0c\u800c\u4e14\u4e0d\u9700\u8981\u5916\u90e8\u4f9d\u8d56\u3002\u8fd9\u5c31\u662f Go \u5c06\u7cfb\u7edf\u548c\u5e94\u7528\u7f16\u7a0b\u5b8c\u7f8e\u7ed3\u5408\u7684\u4e00\u4e2a\u771f\u5b9e\u8bc1\u660e\u3002 \u201c\u90e8\u7f72 Doozer \u7684\u8fc7\u7a0b\u7b80\u5355\u5f97\u4ee4\u4eba\u6ee1\u610f\u3002Go \u6784\u5efa\u9759\u6001\u94fe\u63a5\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u8fd9\u610f\u5473\u7740 Doozer \u6ca1\u6709\u5916\u90e8\u4f9d\u8d56\uff1b\u5b83\u662f\u4e00\u4e2a\u5355\u4e00\u7684\u6587\u4ef6\uff0c\u53ef\u4ee5\u590d\u5236\u5230\u4efb\u4f55\u673a\u5668\u4e0a\uff0c\u5e76\u7acb\u5373\u542f\u52a8\uff0c\u52a0\u5165\u8fd0\u884c\u4e2d\u7684 Doozer \u96c6\u7fa4\u3002 \u201c\u6700\u540e\uff0cGo \u5bf9\u7b80\u5355\u6027\u548c\u6b63\u4ea4\u6027 (orthogonality) \u7684\u72c2\u70ed\u5173\u6ce8\u4e0e\u6211\u4eec\u5bf9\u8f6f\u4ef6\u5de5\u7a0b\u7684\u770b\u6cd5\u662f\u4e00\u81f4\u7684\u3002\u548c Go \u56e2\u961f\u4e00\u6837\uff0c\u6211\u4eec\u5bf9 Doozer \u7684\u7279\u6027\u4e5f\u662f\u56fa\u6267\u7684 (pragmatic)\u3002\u6211\u4eec\u5173\u6ce8\u7ec6\u8282\uff0c\u66f4\u503e\u5411\u4e8e\u6539\u53d8\u73b0\u6709\u7684\u529f\u80fd\u800c\u4e0d\u662f\u5f15\u5165\u65b0\u7684\u529f\u80fd\u3002\u5728\u8fd9\u4e2a\u610f\u4e49\u4e0a\uff0cGo \u662f\u4e00\u4e2a\u4e0e Doozer \u7684\u5b8c\u7f8e\u5339\u914d\u3002\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u5173\u4e8e Go\u7684\u672a\u6765\u9879\u76ee\u3002Doozer \u53ea\u662f\u4e00\u4e2a\u66f4\u5927\u7684\u7cfb\u7edf\u7684\u5f00\u59cb\u3002\u201d \u4ed6\u4eec\u8fd8\u559c\u6b22\u81ea\u52a8\u683c\u5f0f\u5316\u5de5\u5177 gofmt \uff0c\u4ee5\u5b9e\u73b0\u4e00\u81f4\u7684\u4ee3\u7801\u98ce\u683c\u548c\u5e03\u5c40\uff0c\u4ece\u800c\u907f\u514d\u4e86\u5bf9\u8fd9\u4e9b\u8bdd\u9898\u7684\u8ba8\u8bba\u3002 \u5176\u4ed6\u8bed\u8a00\u4e5f\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7c7b\u4f3c\u7684\u5e76\u53d1\u673a\u5236\u2014\u2014\u6bd4\u5982 Erlang \u548c Scala\uff0c\u4f46 Go \u7684\u8bbe\u8ba1\u4e5f\u662f\u4e3a\u4e86\u63d0\u4f9b\u6700\u5927\u7684\u6548\u7387\u548c\u63a7\u5236\u3002\u5728\u53e6\u4e00\u7bc7\u6587\u7ae0\u4e2d\uff08 \u5f15\u7528 12 \uff09Keith Rarick \u6307\u51fa\uff1a \u201cGo \u6765\u81ea\u4e8e C \u548c C++ \u8fd9\u6837\u7684\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\uff0c\u6240\u4ee5\u5b83\u8ba9\u4f60\u6709\u80fd\u529b\u771f\u6b63\u63a7\u5236\u6027\u80fd\u7279\u6027\u3002\u5f53\u9700\u8981\u6d4b\u91cf\u4e8b\u7269\u5e76\u786e\u4fdd\u5176\u8fd0\u884c\u901f\u5ea6\u7684\u65f6\u5019\uff0c\u4f60\u6709\u8db3\u591f\u7684\u7075\u6d3b\u6027\u6765\u771f\u6b63\u8fdb\u5165\u90a3\u91cc\u5e76\u505a\u4f60\u9700\u8981\u7684\u4e8b\u60c5\u3002\u5f53\u4f60\u53d1\u73b0\u4f60\u7684\u7a0b\u5e8f\u8fd0\u884c\u7f13\u6162\u7684\u539f\u56e0\u65f6\uff0c\u4f60\u5c31\u53ef\u4ee5\u771f\u6b63\u63a7\u5236\u4f60\u6240\u9700\u8981\u7684\u4e1c\u897f\u6765\u89e3\u51b3\u5b83\u3002Go \u7ed9\u4e86\u4f60\u4e00\u4e2a\u72ec\u7279\u7684\u7ec4\u5408\uff1aC \u8bed\u8a00\u7ed9\u4e86\u4f60\u63a7\u5236\u6743\uff0c\u4f46\u5b83\u5e76\u4e0d\u9002\u5408\u4e8e\u5e76\u53d1\u3002\u5b83\u751a\u81f3\u6ca1\u6709\u7ed9\u4f60\u63d0\u4f9b\u5783\u573e\u6536\u96c6\u3002Go \u4e3a\u4f60\u63d0\u4f9b\u4e86\u5e76\u53d1\u6027\u548c\u5783\u573e\u6536\u96c6\uff0c\u4f46\u5b83\u4ecd\u7136\u8ba9\u4f60\u63a7\u5236\u5185\u5b58\u5e03\u5c40\u548c\u8d44\u6e90\u4f7f\u7528\u3002\u201d \u5728 Doozer \u4e2d\uff0cGo \u4e3b\u8981\u4f5c\u4e3a\u4e00\u79cd\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\u4f7f\u7528\u3002\u66f4\u591a\u7684\u6280\u672f\u63cf\u8ff0\u53ef\u4ee5\u5728\uff08 \u5f15\u7528 38 \uff09\u627e\u5230\uff1b\u4ee3\u7801\u53ef\u5728 https://github.com/ha/doozer \u627e\u5230\u3002 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u771f\u5b9e\u4e16\u754c\u4e2d Go \u7684\u4f7f\u7528 \u4e0b\u4e00\u8282\uff1a MROffice\uff1a\u4e00\u4e2a\u4f7f\u7528 Go \u7684\u547c\u53eb\u4e2d\u5fc3\u7f51\u7edc\u7535\u8bdd (VOIP) \u7cfb\u7edf","title":"21.1 Heroku\uff1a\u4e00\u4e2a\u4f7f\u7528 Go \u7684\u9ad8\u5ea6\u53ef\u7528\u4e00\u81f4\u6570\u636e\u5b58\u50a8"},{"location":"21.1/#211-heroku-go","text":"http://www.heroku.com/ \uff08\u5f15\u7528 39\uff09 Heroku \u662f\u4e00\u5bb6\u4f4d\u4e8e\u7f8e\u56fd\u65e7\u91d1\u5c71\u7684\u7845\u8c37\u516c\u53f8\uff0c\u6700\u8fd1\u88ab Salesforce.com \u516c\u53f8\uff08\u5b83\u4e3a Ruby \u548c Rails\u3001Java\u3001Clojure \u548c node.js \u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u5f3a\u5927\u7684\u3001\u53ef\u6269\u5c55\u7684\u3001\u7279\u522b\u662f\u975e\u5e38\u6613\u4e8e\u7ba1\u7406\u7684\u4e91\u4e3b\u673a\uff09\u6536\u8d2d\u3002Heroku \u7684\u4e24\u4f4d\u5de5\u7a0b\u5e08\uff0cKeith Rarick \u548c Blake Mizerany \u8bbe\u8ba1\u4e86\u4e00\u4e2a\u5f00\u6e90\u7684 \"\u5206\u5e03\u5f0f\u542f\u52a8\u7cfb\u7edf\"\uff0c\u540d\u4e3a Doozer \uff0c\u7528\u4e8e\u7ba1\u7406\u8de8\u96c6\u7fa4\u673a\u5668\u7684\u8fdb\u7a0b\uff0c\u5e76\u4ece\u5b9e\u4f8b\u6545\u969c\u548c\u7f51\u7edc\u6545\u969c\u4e2d\u4f18\u96c5\u5730\u6062\u590d\u5206\u533a\u3002\u5176\u4e2d\u4e00\u4e2a\u9700\u6c42\u662f\uff0c\u4ed6\u4eec\u9700\u8981\u53ef\u9760\u5730\u540c\u6b65\u548c\u5728\u8bb8\u591a\u670d\u52a1\u5668\u4e4b\u95f4\u5171\u4eab\u4fe1\u606f\u3002 \u7cfb\u7edf\u4e2d\u7684\u6bcf\u53f0\u670d\u52a1\u5668\u90fd\u9700\u8981\u6709\u5f88\u591a\u5173\u4e8e\u7cfb\u7edf\u6574\u4f53\u7684\u4fe1\u606f\uff08\u914d\u7f6e\u6570\u636e\u3001\u9501 (lock) \u7b49\uff09\uff0c\u4ee5\u4fbf\u80fd\u591f\u8fdb\u884c\u534f\u8c03\uff0c\u800c\u4e14\u8fd9\u4e9b\u4fe1\u606f\u9700\u8981\u4fdd\u6301\u4e00\u81f4\uff0c\u5373\u4f7f\u5728\u6570\u636e\u5b58\u50a8\u5931\u8d25\u65f6\u4e5f\u53ef\u4ee5\u4f7f\u7528\u3002\u56e0\u6b64\u4ed6\u4eec\u9700\u8981\u4e00\u4e2a\u5177\u6709\u575a\u5b9e\u4e00\u81f4\u6027\u4fdd\u8bc1\u7684\u6570\u636e\u5b58\u50a8\u3002\u4e3a\u6b64\uff0c\u4ed6\u4eec\u5f00\u53d1\u4e86 Doozer\uff0c\u4e00\u4e2a\u7528 Go \u8bed\u8a00\u7f16\u5199\u7684\u3001\u65b0\u7684\u3001\u4e00\u81f4\u7684\u3001\u9ad8\u5ea6\u53ef\u7528\u7684\u6570\u636e\u5b58\u50a8\uff0c\u5e76\u4e14\u4eff\u7167\u8c37\u6b4c\u7684\uff08\u5c01\u95ed\u6e90\u7801\uff09Chubby \u7a0b\u5e8f\u6765\u7ba1\u7406\u4ed6\u4eec\u7684\u540e\u7aef\u57fa\u7840\u8bbe\u65bd\u3002 Doozer \u4ee5 Paxos \u4e3a\u57fa\u7840\uff08Paxos \u662f\u4e00\u4e2a\u7531\u4e0d\u53ef\u9760\u8282\u70b9\u7ec4\u6210\u7684\u7684\u4e0d\u53ef\u9760\u7f51\u7edc\u4e2d\u89e3\u51b3\u5171\u8bc6\u95ee\u9898\u7684\u534f\u8bae\u65cf\uff09\uff0c\u867d\u7136 Paxos \u5bf9\u8fd0\u884c\u5bb9\u9519\u7cfb\u7edf\u81f3\u5173\u91cd\u8981\uff0c\u4f46\u5b83\u56e0\u96be\u4ee5\u5b9e\u73b0\u800c\u81ed\u540d\u662d\u8457\u3002\u5373\u4f7f\u662f\u5728\u7f51\u4e0a\u53ef\u4ee5\u627e\u5230\u7684\u5b9e\u4f8b\u5b9e\u73b0\u4e5f\u5f88\u590d\u6742\uff0c\u5f88\u96be\u9075\u5faa\uff0c\u5c3d\u7ba1\u5df2\u7ecf\u4e3a\u4e86\u6559\u80b2\u76ee\u7684\u800c\u88ab\u7b80\u5316\u8fc7\u3002\u800c\u73b0\u6709\u7684\u751f\u4ea7\u7cfb\u7edf\u4ee5\u66f4\u7cdf\u7cd5\u800c\u95fb\u540d\u3002 Doozer \u662f\u4f5c\u4e3a\u5efa\u7acb\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u4e00\u4e2a\u575a\u786c\u7684\u57fa\u7840\u800c\u88ab\u5f00\u53d1\u7684\u3002 \u4e00\u4e2a\u9ad8\u5ea6\u53ef\u7528\u7684\uff08\u5728\u7f51\u7edc\u5206\u533a\u671f\u95f4\u5de5\u4f5c\uff09\u3002 \u4e00\u81f4\u6027\uff08\u6ca1\u6709\u4e0d\u4e00\u81f4\u7684\u5199\u5165\uff09\u3002 \u6570\u636e\u5b58\u50a8\uff08\u7528\u4e8e\u5c11\u91cf\u7684\u6570\u636e\uff09\u3002 \u6b63\u5982\u5f00\u53d1\u4eba\u5458\u6240\u8bf4\uff1a \"Doozer \u662f\u4f60\u653e\u7f6e\u5bb6\u65cf\u73e0\u5b9d\u7684\u5730\u65b9\"\u3002 \u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5355\u4e00\u7684\u57fa\u672c\u540c\u6b65\u5143\u7d20\uff1a\u6bd4\u8f83-\u8bbe\u7f6e\u5bf9 (compare-config)\u3002 \u7528\u4f8b\uff1a - \u6570\u636e\u5e93\u4e3b\u9009 (Databases master election) - \u547d\u540d\u670d\u52a1 - \u914d\u7f6e \u4e3a\u4ec0\u4e48\u9009\u62e9 Go\uff0cGo \u7684\u7279\u70b9\u5982\u4f55\u4f7f\u5176\u6210\u4e3a\u4e00\u4e2a\u6210\u529f\u7684\u4ea7\u54c1\uff1a Paxos \u662f\u4ee5\u72ec\u7acb\u7684\u3001\u5e76\u53d1\u7684\u8fdb\u7a0b\u6765\u5b9a\u4e49\u7684\uff0c\u8fd9\u4e9b\u8fdb\u7a0b\u901a\u8fc7\u4f20\u9012\u6d88\u606f\u8fdb\u884c\u901a\u4fe1\u3002\u8fd9\u6b63\u662f Go \u7684\u5e76\u53d1\u539f\u8bed \uff08goroutines \u548c channel\uff0c\u89c1 \u7b2c 14 \u7ae0 \uff09\u6240\u64c5\u957f\u7684\u95ee\u9898\u3002\u5728 Doozer \u4e2d\uff0c\u8fd9\u4e9b\u8fdb\u7a0b\u88ab\u5b9e\u73b0\u4e3a goroutines \uff0c\u4ed6\u4eec\u7684\u901a\u4fe1\u88ab\u5b9e\u73b0\u4e3a*\u901a\u9053\u64cd\u4f5c*\u3002\u5c31\u50cf Go \u7684*\u5783\u573e\u6536\u96c6\u5668*\u5c06\u5185\u5b58\u4f7f\u7528\u91cf\u964d\u5230\u6700\u4f4e\u4e00\u6837\uff0cDoozer \u7684\u5f00\u53d1\u8005\u53d1\u73b0 goroutines \u548c\u901a\u9053\u6539\u8fdb\u4e86\u57fa\u4e8e\u9501\u7684\u5e76\u53d1\u65b9\u6cd5\u3002\u8fd9\u4e9b\u5de5\u5177\u8ba9\u4ed6\u4eec\u907f\u514d\u4e86\u590d\u6742\u7684\u201c\u8bb0\u8d26\u201d (bookkeeping) \u65b9\u5f0f\uff0c\u5e76\u5c06\u6ce8\u610f\u529b\u96c6\u4e2d\u5728\u624b\u5934\u7684\u95ee\u9898\u4e0a\u3002\u4ed6\u4eec\u4ecd\u7136\u60ca\u8bb6\u4e8e\u53ea\u7528\u4e86\u51e0\u884c\u4ee3\u7801\u5c31\u5b9e\u73b0\u4e86\u4ee5\u56f0\u96be\u8457\u79f0\u7684\u4e1c\u897f\u3002 Go \u4e2d\u7684*\u6807\u51c6\u5305*\u662f\u5bf9\u4e8e Doozer \u7684\u53e6\u4e00\u4e2a\u5927\u6210\u529f\uff0c\u5176\u4e2d\u6700\u503c\u5f97\u4e00\u63d0\u7684\u662f websocket \u5305\u3002 \u4e0b\u9762\u662f\u5f00\u53d1\u4eba\u5458\u81ea\u5df1\u7684\u4e00\u4e9b\u4f7f\u7528\u540e\u7684\u611f\u53d7\uff1a \u201c\u2026\u2026\u4f8b\u5982\uff0c\u6211\u4eec\u5f88\u5feb\u5c31\u53d1\u73b0 websocket \u662f\u4e00\u4e2a\u6709\u7528\u7684\u5305\u3002\u4e00\u65e6\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u5de5\u4f5c\u7684\u6570\u636e\u5b58\u50a8\uff0c\u6211\u4eec\u5c31\u9700\u8981\u4e00\u4e2a\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u53cd\u7701 (introspect) \u5b83\u5e76\u5c06\u6d3b\u52a8\u53ef\u89c6\u5316\u3002\u4f7f\u7528 websocket \u5305\uff0cKeith \u80fd\u591f\u5728\u56de\u5bb6\u7684\u706b\u8f66\u4e0a\u6dfb\u52a0 web \u6d4f\u89c8\u5668\uff0c\u800c\u4e14\u4e0d\u9700\u8981\u5916\u90e8\u4f9d\u8d56\u3002\u8fd9\u5c31\u662f Go \u5c06\u7cfb\u7edf\u548c\u5e94\u7528\u7f16\u7a0b\u5b8c\u7f8e\u7ed3\u5408\u7684\u4e00\u4e2a\u771f\u5b9e\u8bc1\u660e\u3002 \u201c\u90e8\u7f72 Doozer \u7684\u8fc7\u7a0b\u7b80\u5355\u5f97\u4ee4\u4eba\u6ee1\u610f\u3002Go \u6784\u5efa\u9759\u6001\u94fe\u63a5\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u8fd9\u610f\u5473\u7740 Doozer \u6ca1\u6709\u5916\u90e8\u4f9d\u8d56\uff1b\u5b83\u662f\u4e00\u4e2a\u5355\u4e00\u7684\u6587\u4ef6\uff0c\u53ef\u4ee5\u590d\u5236\u5230\u4efb\u4f55\u673a\u5668\u4e0a\uff0c\u5e76\u7acb\u5373\u542f\u52a8\uff0c\u52a0\u5165\u8fd0\u884c\u4e2d\u7684 Doozer \u96c6\u7fa4\u3002 \u201c\u6700\u540e\uff0cGo \u5bf9\u7b80\u5355\u6027\u548c\u6b63\u4ea4\u6027 (orthogonality) \u7684\u72c2\u70ed\u5173\u6ce8\u4e0e\u6211\u4eec\u5bf9\u8f6f\u4ef6\u5de5\u7a0b\u7684\u770b\u6cd5\u662f\u4e00\u81f4\u7684\u3002\u548c Go \u56e2\u961f\u4e00\u6837\uff0c\u6211\u4eec\u5bf9 Doozer \u7684\u7279\u6027\u4e5f\u662f\u56fa\u6267\u7684 (pragmatic)\u3002\u6211\u4eec\u5173\u6ce8\u7ec6\u8282\uff0c\u66f4\u503e\u5411\u4e8e\u6539\u53d8\u73b0\u6709\u7684\u529f\u80fd\u800c\u4e0d\u662f\u5f15\u5165\u65b0\u7684\u529f\u80fd\u3002\u5728\u8fd9\u4e2a\u610f\u4e49\u4e0a\uff0cGo \u662f\u4e00\u4e2a\u4e0e Doozer \u7684\u5b8c\u7f8e\u5339\u914d\u3002\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u5173\u4e8e Go\u7684\u672a\u6765\u9879\u76ee\u3002Doozer \u53ea\u662f\u4e00\u4e2a\u66f4\u5927\u7684\u7cfb\u7edf\u7684\u5f00\u59cb\u3002\u201d \u4ed6\u4eec\u8fd8\u559c\u6b22\u81ea\u52a8\u683c\u5f0f\u5316\u5de5\u5177 gofmt \uff0c\u4ee5\u5b9e\u73b0\u4e00\u81f4\u7684\u4ee3\u7801\u98ce\u683c\u548c\u5e03\u5c40\uff0c\u4ece\u800c\u907f\u514d\u4e86\u5bf9\u8fd9\u4e9b\u8bdd\u9898\u7684\u8ba8\u8bba\u3002 \u5176\u4ed6\u8bed\u8a00\u4e5f\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7c7b\u4f3c\u7684\u5e76\u53d1\u673a\u5236\u2014\u2014\u6bd4\u5982 Erlang \u548c Scala\uff0c\u4f46 Go \u7684\u8bbe\u8ba1\u4e5f\u662f\u4e3a\u4e86\u63d0\u4f9b\u6700\u5927\u7684\u6548\u7387\u548c\u63a7\u5236\u3002\u5728\u53e6\u4e00\u7bc7\u6587\u7ae0\u4e2d\uff08 \u5f15\u7528 12 \uff09Keith Rarick \u6307\u51fa\uff1a \u201cGo \u6765\u81ea\u4e8e C \u548c C++ \u8fd9\u6837\u7684\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\uff0c\u6240\u4ee5\u5b83\u8ba9\u4f60\u6709\u80fd\u529b\u771f\u6b63\u63a7\u5236\u6027\u80fd\u7279\u6027\u3002\u5f53\u9700\u8981\u6d4b\u91cf\u4e8b\u7269\u5e76\u786e\u4fdd\u5176\u8fd0\u884c\u901f\u5ea6\u7684\u65f6\u5019\uff0c\u4f60\u6709\u8db3\u591f\u7684\u7075\u6d3b\u6027\u6765\u771f\u6b63\u8fdb\u5165\u90a3\u91cc\u5e76\u505a\u4f60\u9700\u8981\u7684\u4e8b\u60c5\u3002\u5f53\u4f60\u53d1\u73b0\u4f60\u7684\u7a0b\u5e8f\u8fd0\u884c\u7f13\u6162\u7684\u539f\u56e0\u65f6\uff0c\u4f60\u5c31\u53ef\u4ee5\u771f\u6b63\u63a7\u5236\u4f60\u6240\u9700\u8981\u7684\u4e1c\u897f\u6765\u89e3\u51b3\u5b83\u3002Go \u7ed9\u4e86\u4f60\u4e00\u4e2a\u72ec\u7279\u7684\u7ec4\u5408\uff1aC \u8bed\u8a00\u7ed9\u4e86\u4f60\u63a7\u5236\u6743\uff0c\u4f46\u5b83\u5e76\u4e0d\u9002\u5408\u4e8e\u5e76\u53d1\u3002\u5b83\u751a\u81f3\u6ca1\u6709\u7ed9\u4f60\u63d0\u4f9b\u5783\u573e\u6536\u96c6\u3002Go \u4e3a\u4f60\u63d0\u4f9b\u4e86\u5e76\u53d1\u6027\u548c\u5783\u573e\u6536\u96c6\uff0c\u4f46\u5b83\u4ecd\u7136\u8ba9\u4f60\u63a7\u5236\u5185\u5b58\u5e03\u5c40\u548c\u8d44\u6e90\u4f7f\u7528\u3002\u201d \u5728 Doozer \u4e2d\uff0cGo \u4e3b\u8981\u4f5c\u4e3a\u4e00\u79cd\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\u4f7f\u7528\u3002\u66f4\u591a\u7684\u6280\u672f\u63cf\u8ff0\u53ef\u4ee5\u5728\uff08 \u5f15\u7528 38 \uff09\u627e\u5230\uff1b\u4ee3\u7801\u53ef\u5728 https://github.com/ha/doozer \u627e\u5230\u3002","title":"21.1 Heroku\uff1a\u4e00\u4e2a\u4f7f\u7528 Go \u7684\u9ad8\u5ea6\u53ef\u7528\u4e00\u81f4\u6570\u636e\u5b58\u50a8"},{"location":"21.1/#_1","text":"\u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a \u771f\u5b9e\u4e16\u754c\u4e2d Go \u7684\u4f7f\u7528 \u4e0b\u4e00\u8282\uff1a MROffice\uff1a\u4e00\u4e2a\u4f7f\u7528 Go \u7684\u547c\u53eb\u4e2d\u5fc3\u7f51\u7edc\u7535\u8bdd (VOIP) \u7cfb\u7edf","title":"\u94fe\u63a5"},{"location":"21.2/","text":"21.2 MROffice\uff1a\u4e00\u4e2a\u4f7f\u7528 Go \u7684\u547c\u53eb\u4e2d\u5fc3\u7f51\u7edc\u7535\u8bdd (VOIP) \u7cfb\u7edf \u00b6 http://mroffice.org/ \u8fd9\u4e2a\u4f8b\u5b50\u8868\u660e\uff0cGo \u4e5f\u9002\u7528\u4e8e\u7b80\u5355\u3001\u53ef\u9760\u7684\u5e94\u7528\u7a0b\u5e8f\u7f16\u7a0b\u3002 MROffice \u662f\u4e00\u5bb6\u4f4d\u4e8e\u65b0\u897f\u5170\u7684\u516c\u53f8\uff0c\u4e13\u95e8\u4ece\u4e8b\u5e02\u573a\u8c03\u67e5\u8f6f\u4ef6\u3002\u4ed6\u4eec\u5728 Freeswitch \u7684\u57fa\u7840\u4e0a\u4f7f\u7528 Go \u4e3a\u5e02\u573a\u8c03\u67e5\u7684\u547c\u53eb\u4e2d\u5fc3\u5efa\u7acb\u4e86\u4e00\u4e2a\u7535\u8bdd\u89e3\u51b3\u65b9\u6848\u3002Kees Varekamp \u662f\u6709\u5e02\u573a\u7814\u7a76\u8f6f\u4ef6\u7684\u80cc\u666f\u7684\u4e00\u4f4d\u5f00\u53d1\u4eba\u5458\uff0c\u4ed6\u53d1\u73b0\u8be5\u9886\u57df\u7684\u5927\u591a\u6570\u73b0\u6709\u8f6f\u4ef6\u90fd\u5f88\u7cdf\u7cd5\uff0c\u4e8e\u662f\u5728 2010 \u5e74\u63a8\u51fa\u4e86 MROffice\uff0c\u4e3a\u5e02\u573a\u7814\u7a76\u884c\u4e1a\u63d0\u4f9b\u66f4\u597d\u7684\u8f6f\u4ef6\u3002 \u4ed6\u7684\u65d7\u8230\u4ea7\u54c1\u540d\u4e3a Dialer \u3002 Dialer \u4e3b\u8981\u505a\u4ec0\u4e48\uff1f \u5b83\u628a\u547c\u53eb\u4e2d\u5fc3\u7684\u9762\u8bd5\u5b98\u548c\u53d7\u8bbf\u8005\u8054\u7cfb\u8d77\u6765\u3002 \u5b83\u5728\u91c7\u8bbf\u5e73\u53f0\uff08\u63d0\u4f9b\u811a\u672c\u548c\u6536\u96c6\u7edf\u8ba1\u6570\u636e\uff09\u548c VoIP \u62e8\u53f7\u5668\uff08\u8fdb\u884c\u5b9e\u9645\u7684\u7535\u8bdd\u901a\u8bdd\uff09\u4e4b\u95f4\u63d0\u4f9b\u4e00\u5ea7\u6865\u6881\u3002 \u4e3a\u4ec0\u4e48\u662f Go\uff1f Dialer \u7684\u7b2c\u4e00\u4e2a\u7248\u672c\u662f\u7528 Python \u5199\u7684\uff0c\u4f46\u4ed6\u7684\u7ecf\u9a8c\u662f\uff0cPython \u4f5c\u4e3a\u4e00\u79cd\u52a8\u6001\u811a\u672c\u8bed\u8a00\uff0c\u5bf9\u4e8e\u957f\u671f\u8fd0\u884c\u7684\u670d\u52a1\u5668\u8fdb\u7a0b\u6765\u8bf4\uff0c\u4e5f\u8bb8\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u9009\u62e9\uff1a\u53d1\u751f\u4e86\u5f88\u591a\u8fd0\u884c\u65f6\u7684\u9519\u8bef\uff0c\u800c\u8fd9\u4e9b\u9519\u8bef\u672c\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u88ab\u53d1\u73b0\u3002 \u6b63\u5982 Varekamp \u5148\u751f\u5728\u6089\u5c3c Go \u7528\u6237\u7ec4\uff082011 \u5e74 3 \u6708\uff09\u6240\u8bf4\uff1a \u201c\u5f53 Go \u51fa\u73b0\u7684\u65f6\u5019\uff0c\u6211\u7acb\u523b\u5c31\u7406\u89e3\u5230\u4e86 (made sense to me)\uff1a\u7c7b\u578b\u5b89\u5168\uff0c\u5df2\u7f16\u8bd1\uff0c\u611f\u89c9\u50cf\u4e00\u79cd\u811a\u672c\u8bed\u8a00\u3002\u201d \u6240\u4ee5\u4ed6\u628a Python \u4ee3\u7801\u79fb\u690d\u5230 Go \u4e0a\u3002*Go \u7684\u5e76\u53d1\u6a21\u578b*\u9002\u5408\u8fd9\u4e2a\u95ee\u9898\uff1a\u4e00\u4e2a goroutine \u88ab\u542f\u52a8\u6765\u5904\u7406\u6bcf\u4e2a\u547c\u53eb\u3001\u9762\u8bd5\u8005\u548c\u88ab\u9762\u8bd5\u8005\uff0c\u4ed6\u4eec\u90fd\u901a\u8fc7\u901a\u9053\u6765\u8fdb\u884c\u901a\u4fe1\u3002 http \u548c websocket \u5e93\u4f7f\u5f97\u7f16\u5199\u4e00\u4e2a\u7528\u6237\u7ba1\u7406\u754c\u9762\u53d8\u5f97\u5bb9\u6613\u3002 \u8be5\u4ea7\u54c1\u73b0\u5728\u5df2\u7ecf\u5728\u591a\u4e2a\u547c\u53eb\u4e2d\u5fc3\u8fd0\u884c\uff0c\u5e76\u4e14\u6b63\u5728\u8fdb\u884c\u4f7f\u7528\u795e\u7ecf\u7f51\u7edc\u7684\u9884\u6d4b\u62e8\u53f7\u5668\u8bbe\u8ba1\u3002 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Heroku\uff1a\u4e00\u4e2a\u4f7f\u7528 Go \u7684\u9ad8\u5ea6\u53ef\u7528\u4e00\u81f4\u6570\u636e\u5b58\u50a8 \u4e0b\u4e00\u8282\uff1a Atlassian\uff1a\u4e00\u4e2a\u865a\u62df\u673a\u7fa4\u7ba1\u7406\u7cfb\u7edf","title":"21.2 MROffice\uff1a\u4e00\u4e2a\u4f7f\u7528 Go \u7684\u547c\u53eb\u4e2d\u5fc3\u7f51\u7edc\u7535\u8bdd (VOIP) \u7cfb\u7edf"},{"location":"21.2/#212-mroffice-go-voip","text":"http://mroffice.org/ \u8fd9\u4e2a\u4f8b\u5b50\u8868\u660e\uff0cGo \u4e5f\u9002\u7528\u4e8e\u7b80\u5355\u3001\u53ef\u9760\u7684\u5e94\u7528\u7a0b\u5e8f\u7f16\u7a0b\u3002 MROffice \u662f\u4e00\u5bb6\u4f4d\u4e8e\u65b0\u897f\u5170\u7684\u516c\u53f8\uff0c\u4e13\u95e8\u4ece\u4e8b\u5e02\u573a\u8c03\u67e5\u8f6f\u4ef6\u3002\u4ed6\u4eec\u5728 Freeswitch \u7684\u57fa\u7840\u4e0a\u4f7f\u7528 Go \u4e3a\u5e02\u573a\u8c03\u67e5\u7684\u547c\u53eb\u4e2d\u5fc3\u5efa\u7acb\u4e86\u4e00\u4e2a\u7535\u8bdd\u89e3\u51b3\u65b9\u6848\u3002Kees Varekamp \u662f\u6709\u5e02\u573a\u7814\u7a76\u8f6f\u4ef6\u7684\u80cc\u666f\u7684\u4e00\u4f4d\u5f00\u53d1\u4eba\u5458\uff0c\u4ed6\u53d1\u73b0\u8be5\u9886\u57df\u7684\u5927\u591a\u6570\u73b0\u6709\u8f6f\u4ef6\u90fd\u5f88\u7cdf\u7cd5\uff0c\u4e8e\u662f\u5728 2010 \u5e74\u63a8\u51fa\u4e86 MROffice\uff0c\u4e3a\u5e02\u573a\u7814\u7a76\u884c\u4e1a\u63d0\u4f9b\u66f4\u597d\u7684\u8f6f\u4ef6\u3002 \u4ed6\u7684\u65d7\u8230\u4ea7\u54c1\u540d\u4e3a Dialer \u3002 Dialer \u4e3b\u8981\u505a\u4ec0\u4e48\uff1f \u5b83\u628a\u547c\u53eb\u4e2d\u5fc3\u7684\u9762\u8bd5\u5b98\u548c\u53d7\u8bbf\u8005\u8054\u7cfb\u8d77\u6765\u3002 \u5b83\u5728\u91c7\u8bbf\u5e73\u53f0\uff08\u63d0\u4f9b\u811a\u672c\u548c\u6536\u96c6\u7edf\u8ba1\u6570\u636e\uff09\u548c VoIP \u62e8\u53f7\u5668\uff08\u8fdb\u884c\u5b9e\u9645\u7684\u7535\u8bdd\u901a\u8bdd\uff09\u4e4b\u95f4\u63d0\u4f9b\u4e00\u5ea7\u6865\u6881\u3002 \u4e3a\u4ec0\u4e48\u662f Go\uff1f Dialer \u7684\u7b2c\u4e00\u4e2a\u7248\u672c\u662f\u7528 Python \u5199\u7684\uff0c\u4f46\u4ed6\u7684\u7ecf\u9a8c\u662f\uff0cPython \u4f5c\u4e3a\u4e00\u79cd\u52a8\u6001\u811a\u672c\u8bed\u8a00\uff0c\u5bf9\u4e8e\u957f\u671f\u8fd0\u884c\u7684\u670d\u52a1\u5668\u8fdb\u7a0b\u6765\u8bf4\uff0c\u4e5f\u8bb8\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u9009\u62e9\uff1a\u53d1\u751f\u4e86\u5f88\u591a\u8fd0\u884c\u65f6\u7684\u9519\u8bef\uff0c\u800c\u8fd9\u4e9b\u9519\u8bef\u672c\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u88ab\u53d1\u73b0\u3002 \u6b63\u5982 Varekamp \u5148\u751f\u5728\u6089\u5c3c Go \u7528\u6237\u7ec4\uff082011 \u5e74 3 \u6708\uff09\u6240\u8bf4\uff1a \u201c\u5f53 Go \u51fa\u73b0\u7684\u65f6\u5019\uff0c\u6211\u7acb\u523b\u5c31\u7406\u89e3\u5230\u4e86 (made sense to me)\uff1a\u7c7b\u578b\u5b89\u5168\uff0c\u5df2\u7f16\u8bd1\uff0c\u611f\u89c9\u50cf\u4e00\u79cd\u811a\u672c\u8bed\u8a00\u3002\u201d \u6240\u4ee5\u4ed6\u628a Python \u4ee3\u7801\u79fb\u690d\u5230 Go \u4e0a\u3002*Go \u7684\u5e76\u53d1\u6a21\u578b*\u9002\u5408\u8fd9\u4e2a\u95ee\u9898\uff1a\u4e00\u4e2a goroutine \u88ab\u542f\u52a8\u6765\u5904\u7406\u6bcf\u4e2a\u547c\u53eb\u3001\u9762\u8bd5\u8005\u548c\u88ab\u9762\u8bd5\u8005\uff0c\u4ed6\u4eec\u90fd\u901a\u8fc7\u901a\u9053\u6765\u8fdb\u884c\u901a\u4fe1\u3002 http \u548c websocket \u5e93\u4f7f\u5f97\u7f16\u5199\u4e00\u4e2a\u7528\u6237\u7ba1\u7406\u754c\u9762\u53d8\u5f97\u5bb9\u6613\u3002 \u8be5\u4ea7\u54c1\u73b0\u5728\u5df2\u7ecf\u5728\u591a\u4e2a\u547c\u53eb\u4e2d\u5fc3\u8fd0\u884c\uff0c\u5e76\u4e14\u6b63\u5728\u8fdb\u884c\u4f7f\u7528\u795e\u7ecf\u7f51\u7edc\u7684\u9884\u6d4b\u62e8\u53f7\u5668\u8bbe\u8ba1\u3002 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Heroku\uff1a\u4e00\u4e2a\u4f7f\u7528 Go \u7684\u9ad8\u5ea6\u53ef\u7528\u4e00\u81f4\u6570\u636e\u5b58\u50a8 \u4e0b\u4e00\u8282\uff1a Atlassian\uff1a\u4e00\u4e2a\u865a\u62df\u673a\u7fa4\u7ba1\u7406\u7cfb\u7edf","title":"21.2 MROffice\uff1a\u4e00\u4e2a\u4f7f\u7528 Go \u7684\u547c\u53eb\u4e2d\u5fc3\u7f51\u7edc\u7535\u8bdd (VOIP) \u7cfb\u7edf"},{"location":"21.3/","text":"21.3 Atlassian\uff1a\u4e00\u4e2a\u865a\u62df\u673a\u7fa4\u7ba1\u7406\u7cfb\u7edf \u00b6 http://www.atlassian.com/ \u5728 Atlassian\uff0cGo \u88ab\u7528\u4e8e\u652f\u6301\u5e76\u53d1\u7684\u5b9e\u7528\u7a0b\u5e8f\u8bbe\u8ba1\uff0c\u4e8b\u5b9e\u4e0a\u662f\u7528\u4e8e\u914d\u7f6e\u548c\u76d1\u63a7\u6d4b\u8bd5\u670d\u52a1\u5668\u3002\u4ed6\u4eec\u4e3a\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u5236\u4f5c\u5f00\u53d1\u548c\u534f\u4f5c\u5de5\u5177\uff08\u4e3b\u8981\u662f\u4e00\u4e2a Java \u5546\u5e97\uff09\u3002\u4ed6\u4eec\u6709\u4e00\u4e2a\u7531\u865a\u62df\u673a (VM) \u7ec4\u6210\u7684\u6d4b\u8bd5\u96c6\u7fa4\uff0c\u5728\u5927\u91cf\u65e0\u786c\u76d8\u4e3b\u673a\u4e0a\u8fd0\u884c\u3002\u5b83\u7684\u4f9b\u5e94\u548c\u76d1\u63a7\u7cfb\u7edf\u662f\u7528 Go \u7f16\u5199\u7684\uff1b\u8be5\u7cfb\u7edf\u7531 3 \u4e2a\u90e8\u5206\u7ec4\u6210\uff1a - \u5728\u6bcf\u4e2a\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\u7684\u4ee3\u7406\u8fdb\u7a0b\uff0c\u5e7f\u64ad\u5176\u865a\u62df\u673a\u7684\u72b6\u6001\u3002 - \u4e00\u4e2a\u7ba1\u7406\u7a0b\u5e8f\uff0c\u542c\u53d6\u4ee3\u7406\u7684\u5e7f\u64ad\uff0c\u5e76\u5728\u4e00\u4e2a\u865a\u62df\u673a\u6ca1\u6709\u62a5\u544a\u65f6\u91c7\u53d6\u884c\u52a8\u3002 - \u4e00\u4e2a\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u7528\u4e8e\u5411\u7ba1\u7406\u5668\u53d1\u5e03\u547d\u4ee4\u3002 \u4ee3\u7406\u4f7f\u7528\u534f\u8bae\u7f13\u51b2\u533a\u6765\u7f16\u7801\u5b83\u6240\u8bfb\u53d6\u7684\u72b6\u6001\u4fe1\u606f\uff0c\u5e76\u901a\u8fc7 UDP \u5e7f\u64ad\u8fd9\u4e9b\u4fe1\u606f\u3002\u7ba1\u7406\u5668\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u5e76\u4e3a\u96c6\u7fa4\u4e2d\u7684\u6bcf\u4e2a\u865a\u62df\u673a\u542f\u52a8\u4e00\u4e2a goroutine\u3002\u6bcf\u4e2a goroutine \u76d1\u542c\u6765\u81ea\u5176\u76f8\u5e94\u7684\u865a\u62df\u673a\u7684\u516c\u544a\uff0c\u5e76\u53d1\u51fa\u6307\u4ee4\uff08shell \u547d\u4ee4\uff09\uff0c\u4f7f\u5176\u5904\u4e8e\u6b63\u786e\u7684\u72b6\u6001\u3002 \u4e3a\u4ec0\u4e48 Go \u5728\u8fd9\u91cc\u8d77\u4f5c\u7528\uff1a \u6bcf\u4e2a\u865a\u62df\u673a\u7684\u4e00\u4e2a goroutine \u5f88\u597d\u5730\u6620\u5c04\u5230\u5b83\u4eec\u7684\u914d\u7f6e\u3002 \u8fd9\u4e2a\u7cfb\u7edf\u4e5f*\u5f88\u5bb9\u6613\u90e8\u7f72*\uff0c\u56e0\u4e3a\u4ed6\u4eec\u53ef\u4ee5\u8fd0\u9001\u6ca1\u6709\u4f9d\u8d56\u6027\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002 \u6b63\u5982 Atlassian \u5de5\u7a0b\u5e08 Dave Cheney \u6240\u8bf4\uff1a \u201c\u4ee3\u7406\u7a0b\u5e8f\u8fd0\u884c\u5728\u8054\u7f51\u542f\u52a8\u7684\u673a\u5668\u4e0a\uff0c\u5e76\u4e14\u5b8c\u5168\u4ece RAM \u4e2d\u8fd0\u884c\u3002\u4e0e JVM \u6216 Python \u7684\u8fd0\u884c\u65f6\u76f8\u6bd4\uff0c\u5355\u4e00\u7684\u9759\u6001\u4e8c\u8fdb\u5236\u6587\u4ef6\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u8282\u7701\u3002\u201d \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a MROffice\uff1a\u4e00\u4e2a\u4f7f\u7528 Go \u7684\u547c\u53eb\u4e2d\u5fc3\u7f51\u7edc\u7535\u8bdd (VOIP) \u7cfb\u7edf \u4e0b\u4e00\u8282\uff1a Camilistore\uff1a\u4e00\u4e2a\u53ef\u5bfb\u5740\u5185\u5bb9\u5b58\u50a8\u7cfb\u7edf","title":"21.3 Atlassian\uff1a\u4e00\u4e2a\u865a\u62df\u673a\u7fa4\u7ba1\u7406\u7cfb\u7edf"},{"location":"21.3/#213-atlassian","text":"http://www.atlassian.com/ \u5728 Atlassian\uff0cGo \u88ab\u7528\u4e8e\u652f\u6301\u5e76\u53d1\u7684\u5b9e\u7528\u7a0b\u5e8f\u8bbe\u8ba1\uff0c\u4e8b\u5b9e\u4e0a\u662f\u7528\u4e8e\u914d\u7f6e\u548c\u76d1\u63a7\u6d4b\u8bd5\u670d\u52a1\u5668\u3002\u4ed6\u4eec\u4e3a\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u5236\u4f5c\u5f00\u53d1\u548c\u534f\u4f5c\u5de5\u5177\uff08\u4e3b\u8981\u662f\u4e00\u4e2a Java \u5546\u5e97\uff09\u3002\u4ed6\u4eec\u6709\u4e00\u4e2a\u7531\u865a\u62df\u673a (VM) \u7ec4\u6210\u7684\u6d4b\u8bd5\u96c6\u7fa4\uff0c\u5728\u5927\u91cf\u65e0\u786c\u76d8\u4e3b\u673a\u4e0a\u8fd0\u884c\u3002\u5b83\u7684\u4f9b\u5e94\u548c\u76d1\u63a7\u7cfb\u7edf\u662f\u7528 Go \u7f16\u5199\u7684\uff1b\u8be5\u7cfb\u7edf\u7531 3 \u4e2a\u90e8\u5206\u7ec4\u6210\uff1a - \u5728\u6bcf\u4e2a\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\u7684\u4ee3\u7406\u8fdb\u7a0b\uff0c\u5e7f\u64ad\u5176\u865a\u62df\u673a\u7684\u72b6\u6001\u3002 - \u4e00\u4e2a\u7ba1\u7406\u7a0b\u5e8f\uff0c\u542c\u53d6\u4ee3\u7406\u7684\u5e7f\u64ad\uff0c\u5e76\u5728\u4e00\u4e2a\u865a\u62df\u673a\u6ca1\u6709\u62a5\u544a\u65f6\u91c7\u53d6\u884c\u52a8\u3002 - \u4e00\u4e2a\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u7528\u4e8e\u5411\u7ba1\u7406\u5668\u53d1\u5e03\u547d\u4ee4\u3002 \u4ee3\u7406\u4f7f\u7528\u534f\u8bae\u7f13\u51b2\u533a\u6765\u7f16\u7801\u5b83\u6240\u8bfb\u53d6\u7684\u72b6\u6001\u4fe1\u606f\uff0c\u5e76\u901a\u8fc7 UDP \u5e7f\u64ad\u8fd9\u4e9b\u4fe1\u606f\u3002\u7ba1\u7406\u5668\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u5e76\u4e3a\u96c6\u7fa4\u4e2d\u7684\u6bcf\u4e2a\u865a\u62df\u673a\u542f\u52a8\u4e00\u4e2a goroutine\u3002\u6bcf\u4e2a goroutine \u76d1\u542c\u6765\u81ea\u5176\u76f8\u5e94\u7684\u865a\u62df\u673a\u7684\u516c\u544a\uff0c\u5e76\u53d1\u51fa\u6307\u4ee4\uff08shell \u547d\u4ee4\uff09\uff0c\u4f7f\u5176\u5904\u4e8e\u6b63\u786e\u7684\u72b6\u6001\u3002 \u4e3a\u4ec0\u4e48 Go \u5728\u8fd9\u91cc\u8d77\u4f5c\u7528\uff1a \u6bcf\u4e2a\u865a\u62df\u673a\u7684\u4e00\u4e2a goroutine \u5f88\u597d\u5730\u6620\u5c04\u5230\u5b83\u4eec\u7684\u914d\u7f6e\u3002 \u8fd9\u4e2a\u7cfb\u7edf\u4e5f*\u5f88\u5bb9\u6613\u90e8\u7f72*\uff0c\u56e0\u4e3a\u4ed6\u4eec\u53ef\u4ee5\u8fd0\u9001\u6ca1\u6709\u4f9d\u8d56\u6027\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002 \u6b63\u5982 Atlassian \u5de5\u7a0b\u5e08 Dave Cheney \u6240\u8bf4\uff1a \u201c\u4ee3\u7406\u7a0b\u5e8f\u8fd0\u884c\u5728\u8054\u7f51\u542f\u52a8\u7684\u673a\u5668\u4e0a\uff0c\u5e76\u4e14\u5b8c\u5168\u4ece RAM \u4e2d\u8fd0\u884c\u3002\u4e0e JVM \u6216 Python \u7684\u8fd0\u884c\u65f6\u76f8\u6bd4\uff0c\u5355\u4e00\u7684\u9759\u6001\u4e8c\u8fdb\u5236\u6587\u4ef6\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u8282\u7701\u3002\u201d \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a MROffice\uff1a\u4e00\u4e2a\u4f7f\u7528 Go \u7684\u547c\u53eb\u4e2d\u5fc3\u7f51\u7edc\u7535\u8bdd (VOIP) \u7cfb\u7edf \u4e0b\u4e00\u8282\uff1a Camilistore\uff1a\u4e00\u4e2a\u53ef\u5bfb\u5740\u5185\u5bb9\u5b58\u50a8\u7cfb\u7edf","title":"21.3 Atlassian\uff1a\u4e00\u4e2a\u865a\u62df\u673a\u7fa4\u7ba1\u7406\u7cfb\u7edf"},{"location":"21.4/","text":"21.4 Camilistore\uff1a\u4e00\u4e2a\u53ef\u5bfb\u5740\u5185\u5bb9\u5b58\u50a8\u7cfb\u7edf \u00b6 http://camlistore.org/ \u5728 Camlistore \u4e2d\uff0c\u4ece\u6570\u636e\u5b58\u50a8\u5230\u7528\u6237\u754c\u9762\uff0c\u201c\u5168\u6808\u201d\u7f16\u7a0b\u90fd\u5728 Go \u4e2d\u8fdb\u884c\u3002\u8be5\u7cfb\u7edf\u7531 Brad Fitzpatrick \u5f00\u53d1\uff0c\u662f\u4e00\u4e2a\u5728\u4e91\u4e0a\u5b58\u50a8\u4e2a\u4eba\u6570\u636e\u5e76\u4e0e\u670b\u53cb\u548c\u516c\u4f17\u5206\u4eab\u8fd9\u4e9b\u6570\u636e\u7684\u7cfb\u7edf\u3002\u5b83\u7531\u4e00\u4e2a\u5185\u5bb9\u53ef\u5bfb\u5740\u7684\u6570\u636e\u5b58\u50a8\u3001\u4e00\u4e2a\u540c\u6b65\u5668\u548c\u8bbf\u95ee\u63a7\u5236\u673a\u5236\u3001\u4e00\u4e2a API\u3001\u4e00\u4e2a\u7528\u6237\u754c\u9762\u4ee5\u53ca\u4e00\u4e2a\u4e2a\u4eba\u201cweb \u4e3b\u76ee\u5f55\u201d\u7ec4\u6210\u3002 \u5b83\u662f\u4e00\u4e2a\u8bed\u8a00\u65e0\u5173\u7684 (language-agnostic) \u9879\u76ee\uff0c\u4f46\u5176\u6700\u4e3b\u8981\u7684\u90e8\u5206\u662f\u7528 Go \u7f16\u5199\u7684\u3002\u5b83\u4eec\u5305\u62ec\u4e00\u4e2a blob \u6570\u636e\u670d\u52a1\u5668\u3001\u4e00\u4e2a http \u670d\u52a1\u5668\u3001\u4e00\u4e2a http \u7528\u6237\u754c\u9762\u4ee5\u53ca\u4e00\u4e9b\u547d\u4ee4\u884c\u5de5\u5177\u3002 \u5b83\u53ef\u4ee5\u7528\u4e8e\uff1a \u81ea\u52a8\u540c\u6b65\u8fdc\u7a0b\u670d\u52a1\u5668\u7684\u4e2a\u4eba\u5907\u4efd\u3002 \u5728\u673a\u5668\u95f4\u8fdb\u884c Dropbox \u5f0f\u7684\u6587\u4ef6\u540c\u6b65\u3002 \u7167\u7247\u7ba1\u7406\u548c\u5171\u4eab\u3002 \u7f51\u7ad9\u5185\u5bb9\u7ba1\u7406\u3002 \u4ee5\u4e0b\u662f Brad \u5bf9\u8fd9\u4e2a Go \u9879\u76ee\u7684\u4e00\u4e9b\u8bc4\u8bba\uff1a \u201c\u6211\u5728\u975e\u5e38\u5c11\u7684\u65f6\u95f4\u5185\uff0c\u4e0d\u9700\u8981\u592a\u591a\u7684\u4ee3\u7801\u5c31\u80fd\u8ff8\u53d1\u51fa (bust out) \u5f88\u591a\u5feb\u901f\u3001\u6b63\u786e\u3001\u53ef\u7ef4\u62a4\u7684\u53ef\u6d4b\u8bd5\u4ee3\u7801\uff0c\u6211\u5df2\u7ecf\u5f88\u4e45\u6ca1\u6709\u5bf9\u4e00\u79cd\u8bed\u8a00\u5982\u6b64\u5174\u594b\u4e86\u3002\u6211\u5f88\u65e9\u5c31\u6709\u4e86 Camlistore \u7684\u60f3\u6cd5\uff0c\u4f46\u5728\u6211\u5b66\u4e60Go\u4e4b\u524d\uff0c\u5b83\u603b\u662f\u663e\u5f97\u592a\u75db\u82e6\u4e86\u3002\u201d \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Atlassian\uff1a\u4e00\u4e2a\u865a\u62df\u673a\u7fa4\u7ba1\u7406\u7cfb\u7edf \u4e0b\u4e00\u8282\uff1a Go \u8bed\u8a00\u7684\u5176\u4ed6\u5e94\u7528","title":"21.4 Camilistore\uff1a\u4e00\u4e2a\u53ef\u5bfb\u5740\u5185\u5bb9\u5b58\u50a8\u7cfb\u7edf"},{"location":"21.4/#214-camilistore","text":"http://camlistore.org/ \u5728 Camlistore \u4e2d\uff0c\u4ece\u6570\u636e\u5b58\u50a8\u5230\u7528\u6237\u754c\u9762\uff0c\u201c\u5168\u6808\u201d\u7f16\u7a0b\u90fd\u5728 Go \u4e2d\u8fdb\u884c\u3002\u8be5\u7cfb\u7edf\u7531 Brad Fitzpatrick \u5f00\u53d1\uff0c\u662f\u4e00\u4e2a\u5728\u4e91\u4e0a\u5b58\u50a8\u4e2a\u4eba\u6570\u636e\u5e76\u4e0e\u670b\u53cb\u548c\u516c\u4f17\u5206\u4eab\u8fd9\u4e9b\u6570\u636e\u7684\u7cfb\u7edf\u3002\u5b83\u7531\u4e00\u4e2a\u5185\u5bb9\u53ef\u5bfb\u5740\u7684\u6570\u636e\u5b58\u50a8\u3001\u4e00\u4e2a\u540c\u6b65\u5668\u548c\u8bbf\u95ee\u63a7\u5236\u673a\u5236\u3001\u4e00\u4e2a API\u3001\u4e00\u4e2a\u7528\u6237\u754c\u9762\u4ee5\u53ca\u4e00\u4e2a\u4e2a\u4eba\u201cweb \u4e3b\u76ee\u5f55\u201d\u7ec4\u6210\u3002 \u5b83\u662f\u4e00\u4e2a\u8bed\u8a00\u65e0\u5173\u7684 (language-agnostic) \u9879\u76ee\uff0c\u4f46\u5176\u6700\u4e3b\u8981\u7684\u90e8\u5206\u662f\u7528 Go \u7f16\u5199\u7684\u3002\u5b83\u4eec\u5305\u62ec\u4e00\u4e2a blob \u6570\u636e\u670d\u52a1\u5668\u3001\u4e00\u4e2a http \u670d\u52a1\u5668\u3001\u4e00\u4e2a http \u7528\u6237\u754c\u9762\u4ee5\u53ca\u4e00\u4e9b\u547d\u4ee4\u884c\u5de5\u5177\u3002 \u5b83\u53ef\u4ee5\u7528\u4e8e\uff1a \u81ea\u52a8\u540c\u6b65\u8fdc\u7a0b\u670d\u52a1\u5668\u7684\u4e2a\u4eba\u5907\u4efd\u3002 \u5728\u673a\u5668\u95f4\u8fdb\u884c Dropbox \u5f0f\u7684\u6587\u4ef6\u540c\u6b65\u3002 \u7167\u7247\u7ba1\u7406\u548c\u5171\u4eab\u3002 \u7f51\u7ad9\u5185\u5bb9\u7ba1\u7406\u3002 \u4ee5\u4e0b\u662f Brad \u5bf9\u8fd9\u4e2a Go \u9879\u76ee\u7684\u4e00\u4e9b\u8bc4\u8bba\uff1a \u201c\u6211\u5728\u975e\u5e38\u5c11\u7684\u65f6\u95f4\u5185\uff0c\u4e0d\u9700\u8981\u592a\u591a\u7684\u4ee3\u7801\u5c31\u80fd\u8ff8\u53d1\u51fa (bust out) \u5f88\u591a\u5feb\u901f\u3001\u6b63\u786e\u3001\u53ef\u7ef4\u62a4\u7684\u53ef\u6d4b\u8bd5\u4ee3\u7801\uff0c\u6211\u5df2\u7ecf\u5f88\u4e45\u6ca1\u6709\u5bf9\u4e00\u79cd\u8bed\u8a00\u5982\u6b64\u5174\u594b\u4e86\u3002\u6211\u5f88\u65e9\u5c31\u6709\u4e86 Camlistore \u7684\u60f3\u6cd5\uff0c\u4f46\u5728\u6211\u5b66\u4e60Go\u4e4b\u524d\uff0c\u5b83\u603b\u662f\u663e\u5f97\u592a\u75db\u82e6\u4e86\u3002\u201d \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Atlassian\uff1a\u4e00\u4e2a\u865a\u62df\u673a\u7fa4\u7ba1\u7406\u7cfb\u7edf \u4e0b\u4e00\u8282\uff1a Go \u8bed\u8a00\u7684\u5176\u4ed6\u5e94\u7528","title":"21.4 Camilistore\uff1a\u4e00\u4e2a\u53ef\u5bfb\u5740\u5185\u5bb9\u5b58\u50a8\u7cfb\u7edf"},{"location":"21.5/","text":"21.5 Go \u8bed\u8a00\u7684\u5176\u4ed6\u5e94\u7528 \u00b6 \u5728\u524d\u9762\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u53ea\u8ba8\u8bba\u4e86 Go \u5728\u5546\u4e1a\u73af\u5883\u4e2d\u5df2\u7ecf\u4f7f\u7528\u7684\u8bb8\u591a\u5730\u65b9\u4e2d\u7684\u51e0\u4e2a\u3002\u5176\u4ed6\u4e00\u4e9b\u4f7f\u7528 Go \u7684\u673a\u6784\u6709\uff1a Canonical-Ubuntu \u516c\u53f8 \uff1a\u4f7f\u7528 Go \u5f00\u53d1\u540e\u53f0\u57fa\u7840\u8bbe\u65bd\uff0c\u4e3b\u8981\u5f00\u53d1\u8005\u4e3a Gustavo Niemeyer\u3002\u4f8b\u5982\u9879\u76ee Ensemble\uff08\u89c1 \u53c2\u8003\u6587\u732e 30 \uff09\u3002 FeedBooks \uff1a\u7528 Go \u53d1\u5e03\u7535\u5b50\u4e66\u3002 FeedBooks \u662f\u4e00\u4e2a\u7535\u5b50\u4e66\u7684\u53d1\u884c\u5546\uff0c\u5b83\u4f7f\u7528 Go \u548c mgo \u6bcf\u5929\u4e3a\u8d85\u8fc7\u4e00\u767e\u4e07\u7684\u56fe\u4e66\u51fa\u7248\u63d0\u4f9b\u670d\u52a1\u3002\u8fd9\u662f Feedbooks \u7684\u7814\u53d1\u5de5\u7a0b\u5e08 Beno\u00eet Larroque \u7684\u4e00\u6761\u8bc4\u8bba\uff1a \u201cmgo\uff08\u4e00\u4e2a\u4e0e MongoDB \u4ea4\u6d41\u7684 Go \u5e93\uff09\u4f7f\u6211\u4eec\u80fd\u591f\u6bcf\u5929\u4e3a\u8d85\u8fc7 100 \u4e07\u672c\u56fe\u4e66\u51fa\u7248\u63d0\u4f9b\u670d\u52a1\uff0c\u540c\u65f6\u4e5f\u964d\u4f4e\u6211\u4eec\u7684\u670d\u52a1\u5668\u8d1f\u8f7d\u3002\u201d Anchor-Orchestra \uff1a\u4e00\u4e2a\u4f7f\u7528 Go \u7684\u5206\u5e03\u5f0f\u6267\u884c\u6846\u67b6\u3002\u8fd9\u5bb6\u516c\u53f8\u7684\u7279\u70b9\u662f\u9ad8\u6c34\u5e73\u7684\u670d\u52a1\u5668\u652f\u6301\u3001\u914d\u7f6e\u5e94\u7528\u7a0b\u5e8f\u8bbe\u7f6e\u3001\u7f13\u5b58\u548c\u89e3\u51b3\u53ef\u6269\u5c55\u6027\u95ee\u9898\u3002\u4ed6\u4eec\u8fd8\u53ef\u4ee5\u4e0e\u5176\u4ed6\u7f51\u7ad9\u6258\u7ba1\u516c\u53f8\u5408\u4f5c\uff0c\u4e13\u4e1a\u5730\u8bbe\u7f6e\u8d1f\u8f7d\u5e73\u8861\u3001\u6570\u636e\u5e93\u96c6\u7fa4\u548c\u865a\u62df\u73af\u5883\u3002 \u4e3a\u6b64\uff0c\u4ed6\u4eec\u4f7f\u7528 Go \u5f00\u53d1\u5e76\u4f7f\u7528 Orchestra \u5206\u5e03\u5f0f\u6267\u884c\u6846\u67b6\u3002 \uff08\u66f4\u591a\u4fe1\u606f\uff1a http://www.anchor.com.au/blog/2011/08/the-automation-waltz/ \uff09 \u5f00\u653e\u77e5\u8bc6\u57fa\u91d1\u4f1a \u3002 \u8fd9\u4e2a\u7ec4\u7ec7\u4f7f\u7528 Go \u8fdb\u884c\uff08\u5143\uff09\u6570\u636e\u76ee\u5f55\u7684\u805a\u5408\u548c\u6570\u636e\u94fe\u63a5\u3002\u6240\u6709\u73b0\u6709\u7684\u8f6f\u4ef6\u90fd\u662f\u7528 Python \u5199\u7684\uff0c\u6240\u4ee5\u5f00\u53d1\u8005\u53ef\u4ee5\u5bf9\u4e24\u8005\u8fdb\u884c\u6bd4\u8f83\u3002\u4ed6\u4eec\u7684\u7ed3\u8bba\u662f\uff1a Go \u5f88\u7b80\u5355 \u3002\u4e00\u65e6\u901a\u8fc7\u4e86\u6700\u521d\u6d45\u663e\u7684\u5b66\u4e60\u5f2f\u9053\uff0c\u5b83\u5c31\u4f1a\u50cf Python \u4e00\u6837\u65b9\u4fbf\u3001\u8212\u9002\u5730\u8fd0\u884c\u3002\u552f\u4e00\u7684\u7f3a\u70b9\u662f\u6ca1\u6709\u50cf Python \u90a3\u6837\u591a\u7684\u5e93\u3002 Go \u662f\u4e00\u79cd*\u9759\u6001\u7c7b\u578b\u7684\u8bed\u8a00*\u3002\u8fd9\u4f3c\u4e4e\u662f\u4e00\u4e2a\u6df1\u5965\u7684\u7ec6\u8282\uff0c\u4f46\u5b83\u6709\u4e00\u4e9b\u91cd\u8981\u7684\u5f71\u54cd\u3002\u5728 Python \u4e2d\u7684\u8bb8\u591a\u7f16\u7a0b\u6d89\u53ca\u5230\u5927\u91cf\u7684\u5355\u5143\u548c\u529f\u80fd\u6d4b\u8bd5\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u76f8\u5f53\u5927\u7684\u8d1f\u62c5\uff0c\u5c3d\u7ba1 CKAN \u6d4b\u8bd5\u5957\u4ef6\u6709\u4e86\u4e00\u4e9b\u91cd\u5927\u7684\u6539\u8fdb\uff0c\u4f46\u9700\u8981\u76f8\u5f53\u957f\u7684\u65f6\u95f4\u6765\u8fd0\u884c\u3002\u7136\u800c\u4f60\u5f88\u5feb\u5c31\u4f1a\u53d1\u73b0\uff0c\u8bb8\u591a\u6d4b\u8bd5\u57fa\u672c\u4e0a\u662f\u5728\u6d4b\u8bd5\u52a8\u6001\u7c7b\u578b (duck typing) \u548c\u53ef\u53d8\u5b9e\u4f53 (variable existence)\uff08\u4f8b\u5982\uff0c\u5f53\u4f60\u5728\u91cd\u6784\u4e2d\u91cd\u547d\u540d\u4e00\u4e2a\u53d8\u91cf\u65f6\uff0c\u4e0d\u786e\u5b9a\u4f60\u662f\u5426\u6b63\u786e\u5730\u91cd\u547d\u540d\u4e86\u4e00\u5207\uff09\u3002\u5728\u50cf Go \u8fd9\u6837\u7684\u8bed\u8a00\u4e2d\uff0c\u8fd9\u4e9b\u4e1c\u897f\u90fd\u662f\u7531\u7f16\u8bd1\u5668\u6355\u83b7\u7684\uff0c\u4e0d\u9700\u8981\u5355\u72ec\u7684\u6d4b\u8bd5\u3002\u8fd9\u610f\u5473\u7740*\u4f60\u53ef\u4ee5\u5c11\u5199\u4e00\u4e9b\u6d4b\u8bd5\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u76f8\u5f53\u5f3a\u5927\u7684\u6d4b\u8bd5\u5957\u4ef6\u3002* \u5c3d\u7ba1\u5b83\u662f\u4e00\u79cd\u7f16\u8bd1\u8bed\u8a00\uff0c\u4f46\u7f16\u8bd1\u8fc7\u7a0b\u975e\u5e38\u5feb\uff0c \u5199-\u7f16\u8bd1-\u6d4b\u8bd5 \u7684\u5faa\u73af\u5e76\u4e0d\u6bd4 Python \u4e2d\u7684 \u5199-\u6d4b\u8bd5 \u5faa\u73af\u6162 \uff0c\u56e0\u4e3a\u9700\u8981\u8fd0\u884c\u7684\u6d4b\u8bd5\u8f83\u5c11\uff0c\u5982\u540c\u4e0a\u6587\u6240\u8bf4\uff0c\u8fd9\u4e2a\u5faa\u73af\u88ab\u8fdb\u4e00\u6b65\u538b\u7f29\u4e86\u3002 Go \u8fdc\u6bd4 Python \u66f4\u8282\u7701\u5185\u5b58 \u2026\u2026\u5dee\u522b\u662f\u60ca\u4eba\u7684\u3002 \u4e0e Python \u76f8\u6bd4\uff0cGo \u4f5c\u4e3a\u4e00\u79cd\u7ecf\u8fc7\u7f16\u8bd1\u548c\u7c7b\u578b\u68c0\u67e5\u7684\u8bed\u8a00\uff0c\u5b83\u7684*\u901f\u5ea6\u5f88\u5feb*\u3002 Go \u4e0d\u662f\u9762\u5411\u5bf9\u8c61\u7684\uff0c\u81f3\u5c11\u4e0e Python \u7684\u610f\u4e49\u4e0d\u540c\u3002\u76f8\u53cd\uff0c\u5b83\u6709\u4e00\u4e2a\u63a5\u53e3\u7684\u6982\u5ff5\u3002\u8fd9\u4f7f\u5f97*\u8bbe\u8ba1\u66f4\u52a0\u7b80\u6d01*\uff0c\u56e0\u4e3a\u5b83\u4e0d\u9f13\u52b1\u590d\u6742\u7684\u591a\u91cd\u7ee7\u627f\u7c7b\u7684\u5c42\u6b21\u7ed3\u6784\u2026\u2026\u63a5\u53e3\u5c31\u611f\u89c9\u66f4\u5e72\u51c0\u4e00\u4e9b\u3002 Go \u6709*\u5185\u7f6e\u7684\u5e76\u53d1\u6027*\u3002\u5728\u8fd9\u9879\u5de5\u4f5c\u4e2d\uff0c\u6709\u5f88\u591a\u5e76\u884c\u7684\u673a\u4f1a\uff0c\u8fd9\u662f\u597d\u7684\u3002 Tinkercad \u516c\u53f8 \uff1a\u8fd9\u5bb6\u7531 Kai Backman \u521b\u529e\u7684\u82ac\u5170\u516c\u53f8\u6b63\u5728\u8bbe\u8ba1\u7528\u4e8e\u5728\u6d4f\u89c8\u5668/\u4e91\u7aef\u8fdb\u884c 3D \u5b9e\u4f53\u5efa\u6a21\u548c\u6253\u5370\u7684\u8f6f\u4ef6\uff0c\u5176\u5728\u5ba2\u6237\u7aef\u4f7f\u7528 WebGL \u8fdb\u884c\u6e32\u67d3\u3002\u89c2\u770b \u89c6\u9891 \u4e86\u89e3\u5173\u4e8e\u8fd9\u4e2a\u4e3b\u9898\u7684\u6280\u672f\u8bb2\u5ea7\u3002\u8fd9\u662f Kai \u7684\u4e00\u53e5\u8bc4\u4ef7\uff1a \u201c\u76ee\u524d\uff082011 \u5e74\uff09Go \u53ef\u80fd\u662f\u7f16\u5199\u5e76\u53d1\u670d\u52a1\u5668\u7684\u6700\u4f73\u8bed\u8a00\u3002\u201d Clarity Services Inc. \uff1a\u8be5\u516c\u53f8\u662f\u4e00\u5bb6\u5b9e\u65f6\u7684\u4fe1\u7528\u673a\u6784\uff0c\u5176\u4f7f\u7528 Go \u8bed\u8a00\u5bf9\u4fe1\u7528\u7533\u8bf7\u8fdb\u884c\u57fa\u4e8e\u4e8b\u4ef6\u7684\u540e\u671f\u5904\u7406\u3002 Cablenet \u901a\u4fe1\u7cfb\u7edf\u6709\u9650\u516c\u53f8 \uff1a\u8fd9\u5bb6\u585e\u6d66\u8def\u65af\u7684 cablenet \u4f9b\u5e94\u5546\u7528 Go \u5f00\u53d1\u4e86\u4e00\u4e2a\u5185\u90e8\u4f9b\u5e94\u7cfb\u7edf\u3002 Tonika \uff1a\u662f\u4e00\u4e2a\u7528 Go \u5f00\u53d1\u7684\u3001\u5f00\u6e90\u5b89\u5168\u7f51\u7edc\u793e\u4ea4\u5e73\u53f0\u3002 Medline \uff1a\u4f7f\u7528 Go \u7684 XML \u89e3\u6790\u5668\u6765\u5c06Medline\uff08\u533b\u5b66\u671f\u520a\u7684\u6570\u636e\uff09\u7684\u538b\u7f29 XML \u6587\u4ef6\u8f6c\u5316\u5230 RDF\u3002 Iron.io \uff1a\u6784\u5efa\u4e91\u57fa\u7840\u8bbe\u65bd\u8f6f\u4ef6\u3002 \u5b83\u7528 Go \u5f00\u53d1\u7684\u7b2c\u4e00\u4e2a\u4ea7\u54c1\u662f SimpleWorker\uff0c\u4e00\u4e2a\u5927\u89c4\u6a21\u7684\u540e\u53f0\u5904\u7406\u548c\u8c03\u5ea6\u7cfb\u7edf\uff1b\u4ed6\u4eec\u4e5f\u5728\u4f7f\u7528 Go \u8fdb\u884c\u5176\u4ed6\u670d\u52a1\u3002 SmartTweets \uff1a\u4e00\u4e2a\u7528Go\u5f00\u53d1\u7684 Facebook \u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5c06\u4f60\u7684 Twitter \u72b6\u6001\u66f4\u65b0\u8f6c\u8d34\u5230\u4f60\u7684 Facebook \u4e3b\u9875\u4e0a\uff0c\u5e76\u5141\u8bb8\u8fc7\u6ee4\u8f6c\u53d1\u3001\u63d0\u53ca\u3001\u6807\u7b7e\u3001\u56de\u590d\u7b49\u5185\u5bb9\u3002 \u8be5\u5e94\u7528\u7a0b\u5e8f\u73b0\u5728\u6709\u8d85\u8fc7 12 \u4e07\u540d\u7528\u6237\u3002 \u201c\u8fd9\u662f\u4e00\u79cd\u7a33\u5b9a\u7684\u8bed\u8a00\uff0c\u201dMichael Hoisie \u8bf4\uff0c\u201c\u5b83\u53ef\u4ee5\u5904\u7406\u8d1f\u8f7d\u3002\u201d \u5728 Sandia \u56fd\u5bb6\u5b9e\u9a8c\u5ba4 \uff0c\u4e00\u4e2a\u7f8e\u56fd\u5f00\u53d1\u652f\u6301\u56fd\u5bb6\u5b89\u5168\u7684\u57fa\u4e8e\u79d1\u5b66\u7684\u6280\u672f\u7684\u653f\u5e9c\u673a\u6784\uff0c\u6709\u5f88\u591a\u66fe\u7ecf\u4ece\u4e8b\u8fc7\u7f16\u7a0b\u7684\u4eba\u90fd\u5728\u4f7f\u7528\u8fd9\u79cd\u8bed\u8a00\u3002\u5f88\u591a\u8fc7\u53bb\u4f7f\u7528 C\u3001C++\u3001Perl\u3001Python \u6216\u5176\u4ed6\u4ec0\u4e48 HPC \u7ba1\u7406\u8f6f\u4ef6\u7684\u4eba\uff0c\u5df2\u7ecf\u8f6c\u800c\u4f7f\u7528 Go\uff0c\u5e76\u4e14\u4e0d\u6253\u7b97\u56de\u5934\u4e86\u3002 Go \u5728\u6548\u7387\u3001\u8bed\u8a00\u80fd\u529b\u548c\u7f16\u5199\u4ee3\u7801\u7684\u4fbf\u5229\u6027\u4e4b\u95f4\u627e\u5230\u4e86\u4e00\u4e2a\u597d\u7684\u4f4d\u7f6e\u3002 \u2014\u2014 Ron Minnich Carbon Games \uff1a\u4e00\u5bb6\u7f51\u7edc\u6e38\u620f\u516c\u53f8\uff0c\u4e3a\u4ed6\u4eec\u7684\u540e\u53f0\u670d\u52a1\u4f7f\u7528 Go\u3002 Vaba\u8f6f\u4ef6\u516c\u53f8 \uff1a\u7528 Go \u91cd\u5199\u4e86\u4ed6\u4eec\u7684\u6d88\u606f\u548c\u5b58\u50a8\u5f15\u64ce\u3002 Institute for Systems Biology \uff1a\u7528 Go \u5f00\u53d1\u4e86\u5206\u5e03\u5f0f\u8ba1\u7b97\u5206\u6790\u7cfb\u7edf Golem \u3002 Second Bit \uff1a\u4f7f\u7528 Go \u6765\u9a71\u52a8\u4ed6\u4eec\u7684 2cloud \u670d\u52a1\u3002 Numerotron Inc \uff1a\u7528 Go \u5f00\u53d1\u4e86\u4ed6\u4eec\u7684\u7edf\u8ba1\u548c\u4e8b\u4ef6\u8ddf\u8e2a\u7cfb\u7edf StatHat \u3002 \u6700\u540e\u662f\u8c37\u6b4c\u516c\u53f8\u672c\u8eab\uff0c\u5b83\u662f Go \u7684\uff08\u53d1\u660e\u8005\uff09\u4e4b\u5bb6\u3002 Go \u5728\u8c37\u6b4c\u5185\u90e8\u7684\u4f7f\u7528\u662f\u76f8\u5f53\u4fdd\u5bc6\u7684\uff0c\u4f46\u5728 2010 \u5e74 5 \u6708\uff0cRob Pike \u5ba3\u5e03 Google \u7684\u540e\u7aef\u57fa\u7840\u8bbe\u65bd\u6b63\u5728\u8fd0\u884c\u7528 Go \u6784\u5efa\u7684\u5e94\u7528\u7a0b\u5e8f\uff08 \u53c2\u8003\u6587\u732e 27 \uff09\u3002Go \u88ab\u7528\u4e8e\u4e00\u4e9b\u7cfb\u7edf\uff08\u7f51\u7edc\u670d\u52a1\u5668\uff0c\u4e5f\u5305\u62ec\u5b58\u50a8\u7cfb\u7edf\u548c\u6570\u636e\u5e93\uff09\uff0c\u8fd9\u4e9b\u7cfb\u7edf\u5728\u8de8\u8d8a\u8c37\u6b4c\u5168\u7403\u6570\u636e\u4e2d\u5fc3\u7f51\u7edc\u7684\u5206\u5e03\u5f0f\u57fa\u7840\u8bbe\u65bd\u4e2d\u53d1\u6325\u7740\u4f5c\u7528\u3002Go \u53ef\u80fd\u4f1a\u5728\u672a\u6765\u51e0\u5e74\u5185\u6210\u4e3a\u8c37\u6b4c\u7684\u6807\u51c6\u540e\u7aef\u8bed\u8a00\u3002Andrew Gerrand \u8fd8\u8bf4\uff0c\u8c37\u6b4c\u5458\u5de5\u6b63\u5728\u4f7f\u7528 Go \u6765\u7b80\u5355\u5730\u4ece\u670d\u52a1\u5668\u4e0a\u6293\u53d6\u4fe1\u606f\u3002 \u201c\u8c37\u6b4c\u6709\u7ba1\u7406\u5e94\u7528\u7a0b\u5e8f\u548c\u670d\u52a1\u7684\u4eba\uff0c\u4ed6\u4eec\u9700\u8981\u7f16\u5199\u5de5\u5177\u6765\u6293\u53d6\u51e0\u5343\u53f0\u673a\u5668\u7684\u72b6\u6001\u5e76\u6c47\u603b\u6570\u636e\uff0c\u201d\u4ed6\u8bf4\uff0c\u201c\u4ee5\u524d\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u4eba\u5458\u4f1a\u7528 Python \u5199\u8fd9\u4e9b\u4e1c\u897f\uff0c\u4f46\u4ed6\u4eec\u53d1\u73b0 Go \u5728\u6027\u80fd\u548c\u5b9e\u9645\u5199\u4ee3\u7801\u7684\u65f6\u95f4\u65b9\u9762\u8981\u5feb\u5f97\u591a\u3002\u201d \u5173\u4e8e Go \u5728\u4f01\u4e1a\u4e2d\u7684\u4f7f\u7528\u60c5\u51b5\uff0c\u53ef\u4ee5\u5728 http://go-lang.cat-v.org/organizations-using-go \u4e0a\u627e\u5230\u4e00\u4e2a\u5168\u9762\u7684\u6e05\u5355\u3002 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Camilistore\uff1a\u4e00\u4e2a\u53ef\u5bfb\u5740\u5185\u5bb9\u5b58\u50a8\u7cfb\u7edf \u4e0b\u4e00\u8282\uff1a \u9644\u5f55","title":"21.5 Go \u8bed\u8a00\u7684\u5176\u4ed6\u5e94\u7528"},{"location":"21.5/#215-go","text":"\u5728\u524d\u9762\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u53ea\u8ba8\u8bba\u4e86 Go \u5728\u5546\u4e1a\u73af\u5883\u4e2d\u5df2\u7ecf\u4f7f\u7528\u7684\u8bb8\u591a\u5730\u65b9\u4e2d\u7684\u51e0\u4e2a\u3002\u5176\u4ed6\u4e00\u4e9b\u4f7f\u7528 Go \u7684\u673a\u6784\u6709\uff1a Canonical-Ubuntu \u516c\u53f8 \uff1a\u4f7f\u7528 Go \u5f00\u53d1\u540e\u53f0\u57fa\u7840\u8bbe\u65bd\uff0c\u4e3b\u8981\u5f00\u53d1\u8005\u4e3a Gustavo Niemeyer\u3002\u4f8b\u5982\u9879\u76ee Ensemble\uff08\u89c1 \u53c2\u8003\u6587\u732e 30 \uff09\u3002 FeedBooks \uff1a\u7528 Go \u53d1\u5e03\u7535\u5b50\u4e66\u3002 FeedBooks \u662f\u4e00\u4e2a\u7535\u5b50\u4e66\u7684\u53d1\u884c\u5546\uff0c\u5b83\u4f7f\u7528 Go \u548c mgo \u6bcf\u5929\u4e3a\u8d85\u8fc7\u4e00\u767e\u4e07\u7684\u56fe\u4e66\u51fa\u7248\u63d0\u4f9b\u670d\u52a1\u3002\u8fd9\u662f Feedbooks \u7684\u7814\u53d1\u5de5\u7a0b\u5e08 Beno\u00eet Larroque \u7684\u4e00\u6761\u8bc4\u8bba\uff1a \u201cmgo\uff08\u4e00\u4e2a\u4e0e MongoDB \u4ea4\u6d41\u7684 Go \u5e93\uff09\u4f7f\u6211\u4eec\u80fd\u591f\u6bcf\u5929\u4e3a\u8d85\u8fc7 100 \u4e07\u672c\u56fe\u4e66\u51fa\u7248\u63d0\u4f9b\u670d\u52a1\uff0c\u540c\u65f6\u4e5f\u964d\u4f4e\u6211\u4eec\u7684\u670d\u52a1\u5668\u8d1f\u8f7d\u3002\u201d Anchor-Orchestra \uff1a\u4e00\u4e2a\u4f7f\u7528 Go \u7684\u5206\u5e03\u5f0f\u6267\u884c\u6846\u67b6\u3002\u8fd9\u5bb6\u516c\u53f8\u7684\u7279\u70b9\u662f\u9ad8\u6c34\u5e73\u7684\u670d\u52a1\u5668\u652f\u6301\u3001\u914d\u7f6e\u5e94\u7528\u7a0b\u5e8f\u8bbe\u7f6e\u3001\u7f13\u5b58\u548c\u89e3\u51b3\u53ef\u6269\u5c55\u6027\u95ee\u9898\u3002\u4ed6\u4eec\u8fd8\u53ef\u4ee5\u4e0e\u5176\u4ed6\u7f51\u7ad9\u6258\u7ba1\u516c\u53f8\u5408\u4f5c\uff0c\u4e13\u4e1a\u5730\u8bbe\u7f6e\u8d1f\u8f7d\u5e73\u8861\u3001\u6570\u636e\u5e93\u96c6\u7fa4\u548c\u865a\u62df\u73af\u5883\u3002 \u4e3a\u6b64\uff0c\u4ed6\u4eec\u4f7f\u7528 Go \u5f00\u53d1\u5e76\u4f7f\u7528 Orchestra \u5206\u5e03\u5f0f\u6267\u884c\u6846\u67b6\u3002 \uff08\u66f4\u591a\u4fe1\u606f\uff1a http://www.anchor.com.au/blog/2011/08/the-automation-waltz/ \uff09 \u5f00\u653e\u77e5\u8bc6\u57fa\u91d1\u4f1a \u3002 \u8fd9\u4e2a\u7ec4\u7ec7\u4f7f\u7528 Go \u8fdb\u884c\uff08\u5143\uff09\u6570\u636e\u76ee\u5f55\u7684\u805a\u5408\u548c\u6570\u636e\u94fe\u63a5\u3002\u6240\u6709\u73b0\u6709\u7684\u8f6f\u4ef6\u90fd\u662f\u7528 Python \u5199\u7684\uff0c\u6240\u4ee5\u5f00\u53d1\u8005\u53ef\u4ee5\u5bf9\u4e24\u8005\u8fdb\u884c\u6bd4\u8f83\u3002\u4ed6\u4eec\u7684\u7ed3\u8bba\u662f\uff1a Go \u5f88\u7b80\u5355 \u3002\u4e00\u65e6\u901a\u8fc7\u4e86\u6700\u521d\u6d45\u663e\u7684\u5b66\u4e60\u5f2f\u9053\uff0c\u5b83\u5c31\u4f1a\u50cf Python \u4e00\u6837\u65b9\u4fbf\u3001\u8212\u9002\u5730\u8fd0\u884c\u3002\u552f\u4e00\u7684\u7f3a\u70b9\u662f\u6ca1\u6709\u50cf Python \u90a3\u6837\u591a\u7684\u5e93\u3002 Go \u662f\u4e00\u79cd*\u9759\u6001\u7c7b\u578b\u7684\u8bed\u8a00*\u3002\u8fd9\u4f3c\u4e4e\u662f\u4e00\u4e2a\u6df1\u5965\u7684\u7ec6\u8282\uff0c\u4f46\u5b83\u6709\u4e00\u4e9b\u91cd\u8981\u7684\u5f71\u54cd\u3002\u5728 Python \u4e2d\u7684\u8bb8\u591a\u7f16\u7a0b\u6d89\u53ca\u5230\u5927\u91cf\u7684\u5355\u5143\u548c\u529f\u80fd\u6d4b\u8bd5\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u76f8\u5f53\u5927\u7684\u8d1f\u62c5\uff0c\u5c3d\u7ba1 CKAN \u6d4b\u8bd5\u5957\u4ef6\u6709\u4e86\u4e00\u4e9b\u91cd\u5927\u7684\u6539\u8fdb\uff0c\u4f46\u9700\u8981\u76f8\u5f53\u957f\u7684\u65f6\u95f4\u6765\u8fd0\u884c\u3002\u7136\u800c\u4f60\u5f88\u5feb\u5c31\u4f1a\u53d1\u73b0\uff0c\u8bb8\u591a\u6d4b\u8bd5\u57fa\u672c\u4e0a\u662f\u5728\u6d4b\u8bd5\u52a8\u6001\u7c7b\u578b (duck typing) \u548c\u53ef\u53d8\u5b9e\u4f53 (variable existence)\uff08\u4f8b\u5982\uff0c\u5f53\u4f60\u5728\u91cd\u6784\u4e2d\u91cd\u547d\u540d\u4e00\u4e2a\u53d8\u91cf\u65f6\uff0c\u4e0d\u786e\u5b9a\u4f60\u662f\u5426\u6b63\u786e\u5730\u91cd\u547d\u540d\u4e86\u4e00\u5207\uff09\u3002\u5728\u50cf Go \u8fd9\u6837\u7684\u8bed\u8a00\u4e2d\uff0c\u8fd9\u4e9b\u4e1c\u897f\u90fd\u662f\u7531\u7f16\u8bd1\u5668\u6355\u83b7\u7684\uff0c\u4e0d\u9700\u8981\u5355\u72ec\u7684\u6d4b\u8bd5\u3002\u8fd9\u610f\u5473\u7740*\u4f60\u53ef\u4ee5\u5c11\u5199\u4e00\u4e9b\u6d4b\u8bd5\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u76f8\u5f53\u5f3a\u5927\u7684\u6d4b\u8bd5\u5957\u4ef6\u3002* \u5c3d\u7ba1\u5b83\u662f\u4e00\u79cd\u7f16\u8bd1\u8bed\u8a00\uff0c\u4f46\u7f16\u8bd1\u8fc7\u7a0b\u975e\u5e38\u5feb\uff0c \u5199-\u7f16\u8bd1-\u6d4b\u8bd5 \u7684\u5faa\u73af\u5e76\u4e0d\u6bd4 Python \u4e2d\u7684 \u5199-\u6d4b\u8bd5 \u5faa\u73af\u6162 \uff0c\u56e0\u4e3a\u9700\u8981\u8fd0\u884c\u7684\u6d4b\u8bd5\u8f83\u5c11\uff0c\u5982\u540c\u4e0a\u6587\u6240\u8bf4\uff0c\u8fd9\u4e2a\u5faa\u73af\u88ab\u8fdb\u4e00\u6b65\u538b\u7f29\u4e86\u3002 Go \u8fdc\u6bd4 Python \u66f4\u8282\u7701\u5185\u5b58 \u2026\u2026\u5dee\u522b\u662f\u60ca\u4eba\u7684\u3002 \u4e0e Python \u76f8\u6bd4\uff0cGo \u4f5c\u4e3a\u4e00\u79cd\u7ecf\u8fc7\u7f16\u8bd1\u548c\u7c7b\u578b\u68c0\u67e5\u7684\u8bed\u8a00\uff0c\u5b83\u7684*\u901f\u5ea6\u5f88\u5feb*\u3002 Go \u4e0d\u662f\u9762\u5411\u5bf9\u8c61\u7684\uff0c\u81f3\u5c11\u4e0e Python \u7684\u610f\u4e49\u4e0d\u540c\u3002\u76f8\u53cd\uff0c\u5b83\u6709\u4e00\u4e2a\u63a5\u53e3\u7684\u6982\u5ff5\u3002\u8fd9\u4f7f\u5f97*\u8bbe\u8ba1\u66f4\u52a0\u7b80\u6d01*\uff0c\u56e0\u4e3a\u5b83\u4e0d\u9f13\u52b1\u590d\u6742\u7684\u591a\u91cd\u7ee7\u627f\u7c7b\u7684\u5c42\u6b21\u7ed3\u6784\u2026\u2026\u63a5\u53e3\u5c31\u611f\u89c9\u66f4\u5e72\u51c0\u4e00\u4e9b\u3002 Go \u6709*\u5185\u7f6e\u7684\u5e76\u53d1\u6027*\u3002\u5728\u8fd9\u9879\u5de5\u4f5c\u4e2d\uff0c\u6709\u5f88\u591a\u5e76\u884c\u7684\u673a\u4f1a\uff0c\u8fd9\u662f\u597d\u7684\u3002 Tinkercad \u516c\u53f8 \uff1a\u8fd9\u5bb6\u7531 Kai Backman \u521b\u529e\u7684\u82ac\u5170\u516c\u53f8\u6b63\u5728\u8bbe\u8ba1\u7528\u4e8e\u5728\u6d4f\u89c8\u5668/\u4e91\u7aef\u8fdb\u884c 3D \u5b9e\u4f53\u5efa\u6a21\u548c\u6253\u5370\u7684\u8f6f\u4ef6\uff0c\u5176\u5728\u5ba2\u6237\u7aef\u4f7f\u7528 WebGL \u8fdb\u884c\u6e32\u67d3\u3002\u89c2\u770b \u89c6\u9891 \u4e86\u89e3\u5173\u4e8e\u8fd9\u4e2a\u4e3b\u9898\u7684\u6280\u672f\u8bb2\u5ea7\u3002\u8fd9\u662f Kai \u7684\u4e00\u53e5\u8bc4\u4ef7\uff1a \u201c\u76ee\u524d\uff082011 \u5e74\uff09Go \u53ef\u80fd\u662f\u7f16\u5199\u5e76\u53d1\u670d\u52a1\u5668\u7684\u6700\u4f73\u8bed\u8a00\u3002\u201d Clarity Services Inc. \uff1a\u8be5\u516c\u53f8\u662f\u4e00\u5bb6\u5b9e\u65f6\u7684\u4fe1\u7528\u673a\u6784\uff0c\u5176\u4f7f\u7528 Go \u8bed\u8a00\u5bf9\u4fe1\u7528\u7533\u8bf7\u8fdb\u884c\u57fa\u4e8e\u4e8b\u4ef6\u7684\u540e\u671f\u5904\u7406\u3002 Cablenet \u901a\u4fe1\u7cfb\u7edf\u6709\u9650\u516c\u53f8 \uff1a\u8fd9\u5bb6\u585e\u6d66\u8def\u65af\u7684 cablenet \u4f9b\u5e94\u5546\u7528 Go \u5f00\u53d1\u4e86\u4e00\u4e2a\u5185\u90e8\u4f9b\u5e94\u7cfb\u7edf\u3002 Tonika \uff1a\u662f\u4e00\u4e2a\u7528 Go \u5f00\u53d1\u7684\u3001\u5f00\u6e90\u5b89\u5168\u7f51\u7edc\u793e\u4ea4\u5e73\u53f0\u3002 Medline \uff1a\u4f7f\u7528 Go \u7684 XML \u89e3\u6790\u5668\u6765\u5c06Medline\uff08\u533b\u5b66\u671f\u520a\u7684\u6570\u636e\uff09\u7684\u538b\u7f29 XML \u6587\u4ef6\u8f6c\u5316\u5230 RDF\u3002 Iron.io \uff1a\u6784\u5efa\u4e91\u57fa\u7840\u8bbe\u65bd\u8f6f\u4ef6\u3002 \u5b83\u7528 Go \u5f00\u53d1\u7684\u7b2c\u4e00\u4e2a\u4ea7\u54c1\u662f SimpleWorker\uff0c\u4e00\u4e2a\u5927\u89c4\u6a21\u7684\u540e\u53f0\u5904\u7406\u548c\u8c03\u5ea6\u7cfb\u7edf\uff1b\u4ed6\u4eec\u4e5f\u5728\u4f7f\u7528 Go \u8fdb\u884c\u5176\u4ed6\u670d\u52a1\u3002 SmartTweets \uff1a\u4e00\u4e2a\u7528Go\u5f00\u53d1\u7684 Facebook \u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5c06\u4f60\u7684 Twitter \u72b6\u6001\u66f4\u65b0\u8f6c\u8d34\u5230\u4f60\u7684 Facebook \u4e3b\u9875\u4e0a\uff0c\u5e76\u5141\u8bb8\u8fc7\u6ee4\u8f6c\u53d1\u3001\u63d0\u53ca\u3001\u6807\u7b7e\u3001\u56de\u590d\u7b49\u5185\u5bb9\u3002 \u8be5\u5e94\u7528\u7a0b\u5e8f\u73b0\u5728\u6709\u8d85\u8fc7 12 \u4e07\u540d\u7528\u6237\u3002 \u201c\u8fd9\u662f\u4e00\u79cd\u7a33\u5b9a\u7684\u8bed\u8a00\uff0c\u201dMichael Hoisie \u8bf4\uff0c\u201c\u5b83\u53ef\u4ee5\u5904\u7406\u8d1f\u8f7d\u3002\u201d \u5728 Sandia \u56fd\u5bb6\u5b9e\u9a8c\u5ba4 \uff0c\u4e00\u4e2a\u7f8e\u56fd\u5f00\u53d1\u652f\u6301\u56fd\u5bb6\u5b89\u5168\u7684\u57fa\u4e8e\u79d1\u5b66\u7684\u6280\u672f\u7684\u653f\u5e9c\u673a\u6784\uff0c\u6709\u5f88\u591a\u66fe\u7ecf\u4ece\u4e8b\u8fc7\u7f16\u7a0b\u7684\u4eba\u90fd\u5728\u4f7f\u7528\u8fd9\u79cd\u8bed\u8a00\u3002\u5f88\u591a\u8fc7\u53bb\u4f7f\u7528 C\u3001C++\u3001Perl\u3001Python \u6216\u5176\u4ed6\u4ec0\u4e48 HPC \u7ba1\u7406\u8f6f\u4ef6\u7684\u4eba\uff0c\u5df2\u7ecf\u8f6c\u800c\u4f7f\u7528 Go\uff0c\u5e76\u4e14\u4e0d\u6253\u7b97\u56de\u5934\u4e86\u3002 Go \u5728\u6548\u7387\u3001\u8bed\u8a00\u80fd\u529b\u548c\u7f16\u5199\u4ee3\u7801\u7684\u4fbf\u5229\u6027\u4e4b\u95f4\u627e\u5230\u4e86\u4e00\u4e2a\u597d\u7684\u4f4d\u7f6e\u3002 \u2014\u2014 Ron Minnich Carbon Games \uff1a\u4e00\u5bb6\u7f51\u7edc\u6e38\u620f\u516c\u53f8\uff0c\u4e3a\u4ed6\u4eec\u7684\u540e\u53f0\u670d\u52a1\u4f7f\u7528 Go\u3002 Vaba\u8f6f\u4ef6\u516c\u53f8 \uff1a\u7528 Go \u91cd\u5199\u4e86\u4ed6\u4eec\u7684\u6d88\u606f\u548c\u5b58\u50a8\u5f15\u64ce\u3002 Institute for Systems Biology \uff1a\u7528 Go \u5f00\u53d1\u4e86\u5206\u5e03\u5f0f\u8ba1\u7b97\u5206\u6790\u7cfb\u7edf Golem \u3002 Second Bit \uff1a\u4f7f\u7528 Go \u6765\u9a71\u52a8\u4ed6\u4eec\u7684 2cloud \u670d\u52a1\u3002 Numerotron Inc \uff1a\u7528 Go \u5f00\u53d1\u4e86\u4ed6\u4eec\u7684\u7edf\u8ba1\u548c\u4e8b\u4ef6\u8ddf\u8e2a\u7cfb\u7edf StatHat \u3002 \u6700\u540e\u662f\u8c37\u6b4c\u516c\u53f8\u672c\u8eab\uff0c\u5b83\u662f Go \u7684\uff08\u53d1\u660e\u8005\uff09\u4e4b\u5bb6\u3002 Go \u5728\u8c37\u6b4c\u5185\u90e8\u7684\u4f7f\u7528\u662f\u76f8\u5f53\u4fdd\u5bc6\u7684\uff0c\u4f46\u5728 2010 \u5e74 5 \u6708\uff0cRob Pike \u5ba3\u5e03 Google \u7684\u540e\u7aef\u57fa\u7840\u8bbe\u65bd\u6b63\u5728\u8fd0\u884c\u7528 Go \u6784\u5efa\u7684\u5e94\u7528\u7a0b\u5e8f\uff08 \u53c2\u8003\u6587\u732e 27 \uff09\u3002Go \u88ab\u7528\u4e8e\u4e00\u4e9b\u7cfb\u7edf\uff08\u7f51\u7edc\u670d\u52a1\u5668\uff0c\u4e5f\u5305\u62ec\u5b58\u50a8\u7cfb\u7edf\u548c\u6570\u636e\u5e93\uff09\uff0c\u8fd9\u4e9b\u7cfb\u7edf\u5728\u8de8\u8d8a\u8c37\u6b4c\u5168\u7403\u6570\u636e\u4e2d\u5fc3\u7f51\u7edc\u7684\u5206\u5e03\u5f0f\u57fa\u7840\u8bbe\u65bd\u4e2d\u53d1\u6325\u7740\u4f5c\u7528\u3002Go \u53ef\u80fd\u4f1a\u5728\u672a\u6765\u51e0\u5e74\u5185\u6210\u4e3a\u8c37\u6b4c\u7684\u6807\u51c6\u540e\u7aef\u8bed\u8a00\u3002Andrew Gerrand \u8fd8\u8bf4\uff0c\u8c37\u6b4c\u5458\u5de5\u6b63\u5728\u4f7f\u7528 Go \u6765\u7b80\u5355\u5730\u4ece\u670d\u52a1\u5668\u4e0a\u6293\u53d6\u4fe1\u606f\u3002 \u201c\u8c37\u6b4c\u6709\u7ba1\u7406\u5e94\u7528\u7a0b\u5e8f\u548c\u670d\u52a1\u7684\u4eba\uff0c\u4ed6\u4eec\u9700\u8981\u7f16\u5199\u5de5\u5177\u6765\u6293\u53d6\u51e0\u5343\u53f0\u673a\u5668\u7684\u72b6\u6001\u5e76\u6c47\u603b\u6570\u636e\uff0c\u201d\u4ed6\u8bf4\uff0c\u201c\u4ee5\u524d\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u4eba\u5458\u4f1a\u7528 Python \u5199\u8fd9\u4e9b\u4e1c\u897f\uff0c\u4f46\u4ed6\u4eec\u53d1\u73b0 Go \u5728\u6027\u80fd\u548c\u5b9e\u9645\u5199\u4ee3\u7801\u7684\u65f6\u95f4\u65b9\u9762\u8981\u5feb\u5f97\u591a\u3002\u201d \u5173\u4e8e Go \u5728\u4f01\u4e1a\u4e2d\u7684\u4f7f\u7528\u60c5\u51b5\uff0c\u53ef\u4ee5\u5728 http://go-lang.cat-v.org/organizations-using-go \u4e0a\u627e\u5230\u4e00\u4e2a\u5168\u9762\u7684\u6e05\u5355\u3002 \u76ee\u5f55 \u4e0a\u4e00\u8282\uff1a Camilistore\uff1a\u4e00\u4e2a\u53ef\u5bfb\u5740\u5185\u5bb9\u5b58\u50a8\u7cfb\u7edf \u4e0b\u4e00\u8282\uff1a \u9644\u5f55","title":"21.5 Go \u8bed\u8a00\u7684\u5176\u4ed6\u5e94\u7528"},{"location":"Discussion_about_16.10/","text":"\u5173\u4e8e\u672c\u6587\u00b716.10.2\u5c0f\u7ed3\u7cdf\u7cd5\u9519\u8bef\u5904\u7406\u7684\u4e00\u4e9b\u89c1\u89e3 \u00b6 \u672c\u6587\u4ec5\u8868\u8fbe\u8bd1\u8005\u5bf9\u9519\u8bef\u5904\u7406\u7684\u89c2\u70b9\uff0c\u5e76\u4e14\u89c9\u5f97\u539f\u6587\u8bf4\u7684\u5e76\u4e0d\u5f88\u5408\u7406\uff0c\u5e0c\u671b\u4e0d\u4f1a\u8bef\u5bfc\uff08\u6211\u4e2a\u4eba\u89c2\u70b9\uff09\u5176\u4ed6\u5165\u95e8\u8bfb\u8005\u3002 \u5173\u4e8e16.10.2\u7684\u7b2c\u4e00\u4e2a\u4ee3\u7801\u793a\u4f8b \u00b6 16.10.2\u5c0f\u7ed3\u4e2d\u5173\u4e8e\u9519\u8bef\u5904\u7406\u7684\u7b2c\u4e00\u4e2a\u4ee3\u7801\u793a\u4f8b\u662f\u6807\u51c6\u4e14\u901a\u7528\u7684\u9519\u8bef\u5904\u7406\u65b9\u5f0f\u3002 \u6587\u4e2d\u8ba4\u4e3a\u8fd9\u79cd\u9519\u8bef\u5904\u7406\u65b9\u5f0f\u4f1a\u4f7f\u4f60\u7684\u4ee3\u7801\u4e2d\u5145\u6ee1 if err != nil {...} \uff0c\u8ba4\u4e3a\u8fd9\u6837\u4f1a\u4ee4\u4eba\u96be\u4ee5\u5206\u8fa8\u6b63\u5e38\u7684\u7a0b\u5e8f\u903b\u8f91\u4e0e\u9519\u8bef\u5904\u7406\uff08\u96be\u9053\u9519\u8bef\u5904\u7406\u4e0d\u7b97\u505a\u6b63\u5e38\u7684\u7a0b\u5e8f\u903b\u8f91\u4e48:)\uff09\u3002 \u4e66\u4e2d\u4ee3\u7801\u793a\u4f8b\u4e00 \uff1a ... err1 := api . Func1 () if err1 != nil { fmt . Println ( \"err: \" + err . Error ()) return } err2 := api . Func2 () if err2 != nil { ... return } \u6211\u7684\u89c2\u70b9 \uff1a 1\u3001\u9519\u8bef\u5904\u7406\u4e5f\u662f\u6b63\u5e38\u7a0b\u5e8f\u903b\u8f91\u7684\u4e00\u90e8\u5206\uff0c\u7a0b\u5e8f\u903b\u8f91\u4e0d\u5c31\u662f\u5bf9\u4e00\u4e2a\u64cd\u4f5c\u53ef\u80fd\u51fa\u73b0\u7684\u7ed3\u679c\u8fdb\u884c\u5224\u65ad\uff0c \u5e76\u5bf9\u6bcf\u4e00\u79cd\u7ed3\u679c\u505a\u76f8\u5e94\u7684\u540e\u7eed\u5904\u7406\u4e48\u3002\u9519\u8bef\u662f\u6211\u4eec\u5df2\u77e5\u7684\u53ef\u80fd\u4f1a\u51fa\u73b0\u7684\u4e00\u79cd\u7ed3\u679c\uff0c\u6211\u4eec\u4e5f\u9700\u8981\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\uff0c\u5b83\u4e5f\u662f\u6b63\u5e38\u903b\u8f91\u7684\u4e00\u90e8\u5206\u3002\u663e\u7136\uff0c\u628a\u9519\u8bef\u5355\u72ec\u62ce\u51fa\u6765\uff0c\u4e0e\u6b63\u5e38\u903b\u8f91\u5e76\u5217\u6765\u505a\u5bf9\u5f85\uff0c\u5e76\u4e0d\u5408\u7406\u3002 2\u3001\u5728\u5176\u4ed6\u8bed\u8a00\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u7528\u5230 try... catch...\u8bed\u53e5\u6765\u5bf9\u53ef\u80fd\u51fa\u73b0\u7684\u9519\u8bef\u8fdb\u884c\u5904\u7406\uff0c\u96be\u9053\u4f60\u4f1a\u8bf4try-catch\u8bed\u53e5\u8ba9\u4f60\u7684\u4ee3\u7801\u4e00\u56e2\u7cdf\uff0c\u7a0b\u5e8f\u903b\u8f91\u548c\u9519\u8bef\u5904\u7406\u6df7\u5728\u4e00\u8d77\u5f88\u590d\u6742\uff0c\u8ba9\u4f60\u9605\u8bfb\u4ee3\u7801\u56f0\u96be\u4e48\u3002\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8ba9\u4f60\u611f\u89c9\u96be\u4ee5\u9605\u8bfb\u751a\u81f3\u6076\u5fc3\uff08\u53ef\u80fd\u5f62\u5bb9\u8fc7\u5ea6\u4e86\uff09\u7684\u4ee3\u7801\u7edd\u4e0d\u4f1a\u662f\u56e0\u4e3a\u9519\u8bef\u5904\u7406\u76f8\u5173\u7684\u4ee3\u7801\u5bfc\u81f4\u7684\uff0c\u800c\u662f\u5f53\u65f6\u5199\u8fd9\u4e9b\u4ee3\u7801\u7684\u4eba\u903b\u8f91\u4e0d\u6e05\u751a\u81f3\u903b\u8f91\u6df7\u4e71\u9020\u6210\u7684\u3002 3\u3001\u8fd9\u4e2a\u53ef\u80fd\u548c\u6bcf\u4e2a\u4eba\u7684\u4e60\u60ef\uff08\u81ea\u5df1\u5199\u4ee3\u7801\u7684\u601d\u8def\u3001\u98ce\u683c\uff09\u6216\u8005\u8bf4\u9002\u5e94\uff08\u770b\u5176\u4ed6\u4eba\u7684\u4ee3\u7801\u65f6\u80fd\u5f88\u5feb\u4e60\u60ef\u4f5c\u8005\u7684\u4ee3\u7801\u98ce\u683c\uff09\u6709\u5173\uff0c\u6211\u6bcf\u6b21\u770b\u4ee3\u7801\u90fd\u4f1a\u5148\u7565\u8fc7\u9519\u8bef\u5904\u7406\u7684\u90e8\u5206\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u5c31\u662f\u7406\u60f3\u60c5\u51b5\u4e0b\u7684\u7a0b\u5e8f\u903b\u8f91\u4e86\uff0c\u5982\u679c\u5bf9\u67d0\u4e00\u5904\u5fc3\u5b58\u7591\u60d1\u90a3\u4e48\u5c31\u518d\u4ed4\u7ec6\u770b\u8fd9\u90e8\u5206\u7684\u4ee3\u7801\u3002\u6bd5\u7adf\u6211\u4eec\u5199\u7684\u4ee3\u7801\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u662f\u5e0c\u671b\u5b83\u6309\u7406\u60f3\u7684\u60c5\u51b5\u8dd1\u7684\uff0c \u5173\u4e8e16.10.2\u7684\u7b2c\u4e8c\u4e2a\u4ee3\u7801\u793a\u4f8b \u00b6 16.10.2\u5c0f\u7ed3\u4e2d\u5173\u4e8e\u9519\u8bef\u5904\u7406\u7684\u7b2c\u4e8c\u4e2a\u4ee3\u7801\u793a\u4f8b\u662f\u63a8\u8350\u7ed9\u6211\u4eec\u7684\u9519\u8bef\u5904\u7406\u65b9\u5f0f\uff0c\u5bf9\u4e8e\u5176\u63a8\u8350\u7684\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u662f\u6709\u4e00\u5b9a\u7684\u9002\u7528\u8303\u56f4\u7684\uff0c\u5e76\u4e0d\u9002\u5408\u5927\u591a\u6570\u7684\u9519\u8bef\u5904\u7406\uff0c\u53cd\u800c\u5728\u5904\u7406\u67d0\u4e9b\u4e1a\u52a1\u903b\u8f91\u65f6\u53ef\u4ee5\u4f7f\u7528\uff0c\u6bd4\u5982\u5c06\u4e0d\u7b26\u5408\u4e1a\u52a1\u903b\u8f91\u7684\u60c5\u51b5\u89c6\u4f5c\u4e00\u79cd\u9519\u8bef\uff08\u81ea\u5b9a\u4e49\uff09\u6765\u7edf\u4e00\u505a\u5904\u7406\u3002 \u4e66\u4e2d\u4ee3\u7801\u793a\u4f8b\u4e8c \uff1a func httpRequestHandler ( w http . ResponseWriter , req * http . Request ) { err := func () error { if req . Method != \"GET\" { return errors . New ( \"expected GET\" ) } if input := parseInput ( req ); input != \"command\" { return errors . New ( \"malformed command\" ) } // \u53ef\u4ee5\u5728\u6b64\u8fdb\u884c\u5176\u4ed6\u7684\u9519\u8bef\u68c0\u6d4b } () if err != nil { w . WriteHeader ( 400 ) io . WriteString ( w , err ) return } doSomething () ... 1\u3001\u4ee3\u7801\u793a\u4f8b\u4e8c\u4e2d\u5bf9\u4e0d\u7b26\u5408\u4e1a\u52a1\u903b\u8f91\u7684\u4e24\u79cd\u60c5\u51b5\u505a\u4e86\u5f52\u7c7b\uff0c\u5e76\u81ea\u5b9a\u4e49\u4e86\u9519\u8bef\uff0c\u505a\u4e86\u7edf\u4e00\u7684\u5904\u7406\u3002\u8fd9\u6837\u4ece\u4e1a\u52a1\u5c42\u9762\u6765\u770b\uff0c\u5c06\u4e0d\u7b26\u5408\u4e1a\u52a1\u903b\u8f91\u7684\u60c5\u51b5\u89c6\u4e3a\u9519\u8bef\uff0c\u7edf\u4e00\u5199\u5230\u4e86\u533f\u540d\u51fd\u6570\u4e2d\uff0c\u5269\u4e0b\u4e86\u4e00\u4e2a\u7edf\u4e00\u7684\u9519\u8bef\u5904\u7406\u4e0e\u6b63\u5e38\u7684\u4e1a\u52a1\u903b\u8f91\u3002\u6216\u8bb8\u91c7\u7528\u8fd9\u79cd\u65b9\u5f0f\u5904\u7406\u8fd9\u7c7b\u573a\u666f\u8fd8\u4e0d\u9519\uff0c\u4f46\u662f\u5982\u679c\u6362\u4f5c\u4e0b\u9762\u7684\u8fd9\u4e2a\u793a\u4f8b\u53ef\u80fd\u5c31\u4e0d\u662f\u5f88\u5408\u7406\u4e86\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u4e00\u662f\u91c7\u7528\u4e86\u4f5c\u8005\u63a8\u8350\u7684\u7edf\u4e00\u5904\u7406\u9519\u8bef\u65b9\u5f0f\uff0c\u793a\u4f8b\u4e8c\u4f7f\u7528\u7684\u662f\u901a\u5e38\u7684\u9519\u8bef\u5904\u7406\u65b9\u5f0f \u793a\u4f8b\u4e00 \uff1a // \u76ee\u6807\u76ee\u5f55\u4e0b\u5305\u542b\u591a\u79cdArchive\u683c\u5f0f\u6587\u4ef6\uff0c\u5c06\u5176\u4e2d\u7684'x-msdownload'\u7c7b\u578b\u6587\u4ef6\u79fb\u52a8\u5230\u5176\u4ed6\u76ee\u5f55\u4e0b func moveEXE ( files [] os . FileInfo , aimPath , exePath string ) { var numExe , numOther int var fileBuf [] byte var fileType types . Type for _ , file := range files { fileName := aimPath + file . Name () newFileName := exePath + file . Name () err := func () error { // \u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9 if buf , err := ioutil . ReadFile ( fileName ); err != nil { log . Printf ( \"Time of read file: %s occur error: %s\\n\" , fileName , err ) return err } else { fileBuf = buf } // \u5224\u65ad\u6587\u4ef6\u662f\u5426\u4e3aArchive\uff08\u538b\u7f29\uff09\u683c\u5f0f if kind , err := filetype . Archive ( fileBuf ); err != nil { log . Printf ( \"Time of judge file type occur error: %s\\n\" , err ) return err } else { fileType = kind } // \u6587\u4ef6\u662f\u5426\u4e3a'x-msdownload'\u7c7b\u578b if fileSubType := fileType . MIME . Subtype ; fileSubType == \"x-msdownload\" { log . Printf ( \"file : %s is exe file\\n\" , fileName ) if err := os . Rename ( fileName , newFileName ); err != nil { log . Printf ( \"mv file: %s faile, error is: %s\\n\" , fileName , err ) return err } numExe ++ } else { log . Println ( \"no exe\" ) numOther ++ } return nil }() if err != nil { continue } } log . Printf ( \"exe file num is: %d, other file num is: %d\" , numExe , numOther ) } 1\u3001\u901a\u5e38\u6765\u8bf4\uff0c\u6211\u4eec\u4f7f\u7528\u533f\u540d\u51fd\u6570\u662f\u56e0\u4e3a\u90e8\u5206\u64cd\u4f5c\u4e0d\u503c\u5f97\u65b0\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6216\u8005\u8be5\u51fd\u6570\u4ec5\u4f7f\u7528\u4e00\u6b21\uff0c\u793a\u4f8b\u4e00\u4e2d\u7684\u533f\u540d\u51fd\u6570\u5305\u542b\u4e86\u5f88\u591a\u64cd\u4f5c\uff0c\u6216\u8bb8\u6211\u4eec\u5e94\u8be5\u4e3a\u6b64\u91cd\u65b0\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u3002\u5176\u4e2d\u5305\u542b\u4e86\u51e0\u4e4e\u5168\u90e8\u7684\u903b\u8f91\u4ee3\u7801\uff0c\u6211\u60f3\u8fd9\u770b\u8d77\u6765\u5e76\u4e0d\u662f\u5565\u597d\u4e3b\u610f\uff0c\u751a\u81f3\u5982\u679c\u4f60\u628a\u66f4\u591a\u7684\u903b\u8f91\u4ee3\u7801\u653e\u5230\u4e86\u533f\u540d\u51fd\u6570\u91cc\uff0c\u770b\u8d77\u6765\u5e94\u8be5\u4f1a\u66f4\u52a0\u7cdf\u7cd5\u3002 \u793a\u4f8b\u4e8c \uff1a // \u76ee\u6807\u76ee\u5f55\u4e0b\u5305\u542b\u591a\u79cdArchive\u683c\u5f0f\u6587\u4ef6\uff0c\u5c06\u5176\u4e2d\u7684'x-msdownload'\u7c7b\u578b\u6587\u4ef6\u79fb\u52a8\u5230\u5176\u4ed6\u76ee\u5f55\u4e0b func moveEXE ( files [] os . FileInfo , aimPath , exePath string ) { var numExe , numOther int for _ , file := range files { fileName := aimPath + file . Name () newFileName := exePath + file . Name () // \u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9 buf , err := ioutil . ReadFile ( fileName ) if err != nil { log . Printf ( \"read file:%s occur error\\n\" , fileName ) continue } // \u5224\u65ad\u6587\u4ef6\u662f\u5426\u4e3aArchive\uff08\u538b\u7f29\uff09\u683c\u5f0f kind , err := filetype . Archive ( buf ) if err != nil { log . Println ( \"judge file type error\" ) continue } // \u83b7\u53d6\u6587\u4ef6\u5177\u4f53\u7684\u7c7b\u578b fileSubType := kind . MIME . Subtype // \u6587\u4ef6\u662f\u5426\u4e3a'x-msdownload'\u7c7b\u578b if fileSubType == \"x-msdownload\" { log . Printf ( \"file : %s is exe file\\n\" , fileName ) err := os . Rename ( fileName , newFileName ) if err != nil { log . Printf ( \"mv file: %s faile\\n\" , fileName ) continue } numExe ++ } else { log . Println ( \"no exe\" ) numOther ++ } } log . Printf ( \"exe file num is: %d, other file num is: %d\" , numExe , numOther ) } 2\u3001\u793a\u4f8b\u4e8c\u4e2d\u7684\u4ee3\u7801\u770b\u8d77\u6765\u5219\u81ea\u7136\u591a\u4e86\uff08\u6211\u662f\u8fd9\u79cd\u611f\u89c9\uff09\uff0c\u6216\u8bb8\u4f60\u8ba4\u4e3a\u8fd9\u4fe9\u4e2a\u4f8b\u5b50\u76f8\u5dee\u65e0\u51e0\uff0c\u4f46\u662f\u6211\u60f3\u901a\u8fc7\u4ed6\u4eec\u8868\u660e\uff0c\u539f\u658716.10.2\u4e2d\u63a8\u8350\u7684\u9519\u8bef\u5904\u7406\u65b9\u5f0f\u662f\u6709\u4e00\u5b9a\u7684\u4f7f\u7528\u573a\u666f\u7684\uff0c\u5e76\u4e0d\u80fd\u53d6\u4ee3\u6807\u51c6\u4e14\u901a\u7528\u7684\u9519\u8bef\u5904\u7406\u65b9\u5f0f\uff0c\u5e0c\u671b\u5927\u5bb6\u80fd\u591f\u6ce8\u610f\u3002 \u5173\u4e8e\u9519\u8bef\u5904\u7406\u7684\u4e00\u4e9b\u5ef6\u4f38 \u00b6 1\u3001\u9664\u4e86\u4f7f\u7528Go\u4e2d\u5df2\u7ecf\u5b9a\u4e49\u597d\u7684error\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u6839\u636e\u9700\u8981\u81ea\u5b9a\u4e49error\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u4e09\uff0c\u6211\u4eec\u81ea\u5b9a\u4e49\u4e86parseError \u9519\u8bef\uff0c\u5c55\u793a\u4e86\u53d1\u751f\u9519\u8bef\u7684\u6587\u4ef6\u548c\u5177\u4f53\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u5728\u4f60\u8bfb\u53d6\u76ee\u5f55\u4e0b\u7684\u591a\u4e2a\u6587\u4ef6\u65f6\u53ef\u4ee5\u65b9\u4fbf\u7684\u544a\u8bc9\u4f60\u5177\u4f53\u5728\u8bfb\u54ea\u4e2a\u6587\u4ef6\u65f6\u53d1\u751f\u4e86\u9519\u8bef\uff08\u4f5c\u4e3a\u793a\u4f8b\uff0c\u4ec5\u8bfb\u53d6\u5355\u4e2a\u6587\u4ef6\uff09\u3002 \u793a\u4f8b\u56db\u4e2d\uff0c\u5c55\u793a\u4e86\u8c03\u7528 parseFile \u51fd\u6570\u65f6\uff0c\u8c03\u7528\u8005\u53ef\u4ee5\u91c7\u7528\u7684\u4e00\u79cd\u9519\u8bef\u5904\u7406\u65b9\u5f0f\uff0c\u6839\u636e\u9519\u8bef\u7684\u7c7b\u578b\uff0c\u91c7\u53d6\u5bf9\u5e94\u7684\u64cd\u4f5c\u3002 \u793a\u4f8b\u4e09 \uff1a type parseError struct { File * os . File ErrorInfo string } func ( e * parseError ) Error () string { errInfo := fmt . Sprintf ( \"parse file: %s occur error, error info: %s\" , e . File . Name (), e . ErrorInfo ) return errInfo } func parseFile ( path string ) error { f , err := os . Open ( path ) if err != nil { return err } defer f . Close () var buf [ 512 ] byte for { switch num , err := f . Read ( buf [:]); { case num < 0 : readError := parseError { f , err . Error ()} log . Println ( readError . Error ()) return & readError case num == 0 : readError := parseError { f , err . Error ()} log . Println ( readError . Error ()) return & readError case num > 0 : fmt . Println ( string ( buf [: num ])) log . Printf ( \"read file: %s contents normally\" ) } } } \u793a\u4f8b\u56db \uff1a func main () { err := parseFile ( \"/home/rabbit/go/test_use/test\" ) switch err := err .( type ) { case * parseError : log . Println ( \"parse error: \" , err ) case * os . PathError : log . Println ( \"path error: \" , err ) } } 2\u3001\u5982\u679c\u4f60\u60f3\u5728\u8fd4\u56de\u9519\u8bef\u4e4b\u524d\u505a\u4e00\u4e9b\u989d\u5916\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u8bb0\u5f55\u65e5\u5fd7\uff0c\u90a3\u4f60\u53ef\u4ee5\u5355\u72ec\u5199\u4e00\u4e2a\u989d\u5916\u5904\u7406\u9519\u8bef\u7684\u51fd\u6570\u6216\u8005\u4e00\u4e2a\u533f\u540d\u51fd\u6570\u5c31\u53ef\u4ee5\uff08\u8fd9\u53d6\u51b3\u4e8e\u4f60\u662f\u5426\u5e38\u7528\u8be5\u51fd\u6570\u6216\u5b83\u7684\u529f\u80fd\u662f\u5426\u5f88\u591a\uff09\uff0c\u7c7b\u4f3cPython\u4e2d\u7684\u88c5\u9970\u5668\u4e00\u6837\u3002 \u793a\u4f8b\u4e94\u4e2d\uff0chandleError \u5c06\u9519\u8bef\u5199\u5165\u5230\u4e86\u6307\u5b9a\u65e5\u5fd7\u6587\u4ef6\u4e2d\uff1b \u793a\u4f8b\u516d\u4e2d\uff0cparseFile \u4e2d\u4f7f\u7528 defer func() {handleError(\"/home/rabbit/go/test_use/log\", err)}() \u4ee3\u66ff\u4e86\u591a\u6b21\u51fa\u73b0\u7684 log.Println(readError.Error()) \uff0c\u5e76\u5c06\u65e5\u5fd7\u8bb0\u5f55\u6301\u4e45\u5316\u5230\u6587\u4ef6\u4e2d\u3002 \u793a\u4f8b\u4e94 : func handleError ( logPath string , err error ) { if err == nil { return } logFile , _ := os . OpenFile ( filepath , os . O_RDWR | os . O_APPEND | os . O_CREATE , 666 ) defer logFile . Close () log . SetOutput ( logFile ) log . SetPrefix ( \"[FileError]\" ) log . SetFlags ( log . Llongfile | log . Ldate | log . Ltime ) log . Println ( err . Error ()) } \u793a\u4f8b\u516d : func parseFile ( path string ) ( err error ) { f , err := os . Open ( path ) if err != nil { return err } defer f . Close () defer func () { handleError ( \"/home/rabbit/go/test_use/log\" , err )}() var buf [ 512 ] byte for { switch num , err := f . Read ( buf [:]); { case num < 0 : err := & parseError { f , err . Error ()} return err case num == 0 : err := & parseError { f , err . Error ()} return err case num > 0 : fmt . Println ( string ( buf [: num ])) } } }","title":"Discussion about 16.10"},{"location":"Discussion_about_16.10/#16102","text":"\u672c\u6587\u4ec5\u8868\u8fbe\u8bd1\u8005\u5bf9\u9519\u8bef\u5904\u7406\u7684\u89c2\u70b9\uff0c\u5e76\u4e14\u89c9\u5f97\u539f\u6587\u8bf4\u7684\u5e76\u4e0d\u5f88\u5408\u7406\uff0c\u5e0c\u671b\u4e0d\u4f1a\u8bef\u5bfc\uff08\u6211\u4e2a\u4eba\u89c2\u70b9\uff09\u5176\u4ed6\u5165\u95e8\u8bfb\u8005\u3002","title":"\u5173\u4e8e\u672c\u6587\u00b716.10.2\u5c0f\u7ed3\u7cdf\u7cd5\u9519\u8bef\u5904\u7406\u7684\u4e00\u4e9b\u89c1\u89e3"},{"location":"Discussion_about_16.10/#16102_1","text":"16.10.2\u5c0f\u7ed3\u4e2d\u5173\u4e8e\u9519\u8bef\u5904\u7406\u7684\u7b2c\u4e00\u4e2a\u4ee3\u7801\u793a\u4f8b\u662f\u6807\u51c6\u4e14\u901a\u7528\u7684\u9519\u8bef\u5904\u7406\u65b9\u5f0f\u3002 \u6587\u4e2d\u8ba4\u4e3a\u8fd9\u79cd\u9519\u8bef\u5904\u7406\u65b9\u5f0f\u4f1a\u4f7f\u4f60\u7684\u4ee3\u7801\u4e2d\u5145\u6ee1 if err != nil {...} \uff0c\u8ba4\u4e3a\u8fd9\u6837\u4f1a\u4ee4\u4eba\u96be\u4ee5\u5206\u8fa8\u6b63\u5e38\u7684\u7a0b\u5e8f\u903b\u8f91\u4e0e\u9519\u8bef\u5904\u7406\uff08\u96be\u9053\u9519\u8bef\u5904\u7406\u4e0d\u7b97\u505a\u6b63\u5e38\u7684\u7a0b\u5e8f\u903b\u8f91\u4e48:)\uff09\u3002 \u4e66\u4e2d\u4ee3\u7801\u793a\u4f8b\u4e00 \uff1a ... err1 := api . Func1 () if err1 != nil { fmt . Println ( \"err: \" + err . Error ()) return } err2 := api . Func2 () if err2 != nil { ... return } \u6211\u7684\u89c2\u70b9 \uff1a 1\u3001\u9519\u8bef\u5904\u7406\u4e5f\u662f\u6b63\u5e38\u7a0b\u5e8f\u903b\u8f91\u7684\u4e00\u90e8\u5206\uff0c\u7a0b\u5e8f\u903b\u8f91\u4e0d\u5c31\u662f\u5bf9\u4e00\u4e2a\u64cd\u4f5c\u53ef\u80fd\u51fa\u73b0\u7684\u7ed3\u679c\u8fdb\u884c\u5224\u65ad\uff0c \u5e76\u5bf9\u6bcf\u4e00\u79cd\u7ed3\u679c\u505a\u76f8\u5e94\u7684\u540e\u7eed\u5904\u7406\u4e48\u3002\u9519\u8bef\u662f\u6211\u4eec\u5df2\u77e5\u7684\u53ef\u80fd\u4f1a\u51fa\u73b0\u7684\u4e00\u79cd\u7ed3\u679c\uff0c\u6211\u4eec\u4e5f\u9700\u8981\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\uff0c\u5b83\u4e5f\u662f\u6b63\u5e38\u903b\u8f91\u7684\u4e00\u90e8\u5206\u3002\u663e\u7136\uff0c\u628a\u9519\u8bef\u5355\u72ec\u62ce\u51fa\u6765\uff0c\u4e0e\u6b63\u5e38\u903b\u8f91\u5e76\u5217\u6765\u505a\u5bf9\u5f85\uff0c\u5e76\u4e0d\u5408\u7406\u3002 2\u3001\u5728\u5176\u4ed6\u8bed\u8a00\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u7528\u5230 try... catch...\u8bed\u53e5\u6765\u5bf9\u53ef\u80fd\u51fa\u73b0\u7684\u9519\u8bef\u8fdb\u884c\u5904\u7406\uff0c\u96be\u9053\u4f60\u4f1a\u8bf4try-catch\u8bed\u53e5\u8ba9\u4f60\u7684\u4ee3\u7801\u4e00\u56e2\u7cdf\uff0c\u7a0b\u5e8f\u903b\u8f91\u548c\u9519\u8bef\u5904\u7406\u6df7\u5728\u4e00\u8d77\u5f88\u590d\u6742\uff0c\u8ba9\u4f60\u9605\u8bfb\u4ee3\u7801\u56f0\u96be\u4e48\u3002\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8ba9\u4f60\u611f\u89c9\u96be\u4ee5\u9605\u8bfb\u751a\u81f3\u6076\u5fc3\uff08\u53ef\u80fd\u5f62\u5bb9\u8fc7\u5ea6\u4e86\uff09\u7684\u4ee3\u7801\u7edd\u4e0d\u4f1a\u662f\u56e0\u4e3a\u9519\u8bef\u5904\u7406\u76f8\u5173\u7684\u4ee3\u7801\u5bfc\u81f4\u7684\uff0c\u800c\u662f\u5f53\u65f6\u5199\u8fd9\u4e9b\u4ee3\u7801\u7684\u4eba\u903b\u8f91\u4e0d\u6e05\u751a\u81f3\u903b\u8f91\u6df7\u4e71\u9020\u6210\u7684\u3002 3\u3001\u8fd9\u4e2a\u53ef\u80fd\u548c\u6bcf\u4e2a\u4eba\u7684\u4e60\u60ef\uff08\u81ea\u5df1\u5199\u4ee3\u7801\u7684\u601d\u8def\u3001\u98ce\u683c\uff09\u6216\u8005\u8bf4\u9002\u5e94\uff08\u770b\u5176\u4ed6\u4eba\u7684\u4ee3\u7801\u65f6\u80fd\u5f88\u5feb\u4e60\u60ef\u4f5c\u8005\u7684\u4ee3\u7801\u98ce\u683c\uff09\u6709\u5173\uff0c\u6211\u6bcf\u6b21\u770b\u4ee3\u7801\u90fd\u4f1a\u5148\u7565\u8fc7\u9519\u8bef\u5904\u7406\u7684\u90e8\u5206\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u5c31\u662f\u7406\u60f3\u60c5\u51b5\u4e0b\u7684\u7a0b\u5e8f\u903b\u8f91\u4e86\uff0c\u5982\u679c\u5bf9\u67d0\u4e00\u5904\u5fc3\u5b58\u7591\u60d1\u90a3\u4e48\u5c31\u518d\u4ed4\u7ec6\u770b\u8fd9\u90e8\u5206\u7684\u4ee3\u7801\u3002\u6bd5\u7adf\u6211\u4eec\u5199\u7684\u4ee3\u7801\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u662f\u5e0c\u671b\u5b83\u6309\u7406\u60f3\u7684\u60c5\u51b5\u8dd1\u7684\uff0c","title":"\u5173\u4e8e16.10.2\u7684\u7b2c\u4e00\u4e2a\u4ee3\u7801\u793a\u4f8b"},{"location":"Discussion_about_16.10/#16102_2","text":"16.10.2\u5c0f\u7ed3\u4e2d\u5173\u4e8e\u9519\u8bef\u5904\u7406\u7684\u7b2c\u4e8c\u4e2a\u4ee3\u7801\u793a\u4f8b\u662f\u63a8\u8350\u7ed9\u6211\u4eec\u7684\u9519\u8bef\u5904\u7406\u65b9\u5f0f\uff0c\u5bf9\u4e8e\u5176\u63a8\u8350\u7684\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u662f\u6709\u4e00\u5b9a\u7684\u9002\u7528\u8303\u56f4\u7684\uff0c\u5e76\u4e0d\u9002\u5408\u5927\u591a\u6570\u7684\u9519\u8bef\u5904\u7406\uff0c\u53cd\u800c\u5728\u5904\u7406\u67d0\u4e9b\u4e1a\u52a1\u903b\u8f91\u65f6\u53ef\u4ee5\u4f7f\u7528\uff0c\u6bd4\u5982\u5c06\u4e0d\u7b26\u5408\u4e1a\u52a1\u903b\u8f91\u7684\u60c5\u51b5\u89c6\u4f5c\u4e00\u79cd\u9519\u8bef\uff08\u81ea\u5b9a\u4e49\uff09\u6765\u7edf\u4e00\u505a\u5904\u7406\u3002 \u4e66\u4e2d\u4ee3\u7801\u793a\u4f8b\u4e8c \uff1a func httpRequestHandler ( w http . ResponseWriter , req * http . Request ) { err := func () error { if req . Method != \"GET\" { return errors . New ( \"expected GET\" ) } if input := parseInput ( req ); input != \"command\" { return errors . New ( \"malformed command\" ) } // \u53ef\u4ee5\u5728\u6b64\u8fdb\u884c\u5176\u4ed6\u7684\u9519\u8bef\u68c0\u6d4b } () if err != nil { w . WriteHeader ( 400 ) io . WriteString ( w , err ) return } doSomething () ... 1\u3001\u4ee3\u7801\u793a\u4f8b\u4e8c\u4e2d\u5bf9\u4e0d\u7b26\u5408\u4e1a\u52a1\u903b\u8f91\u7684\u4e24\u79cd\u60c5\u51b5\u505a\u4e86\u5f52\u7c7b\uff0c\u5e76\u81ea\u5b9a\u4e49\u4e86\u9519\u8bef\uff0c\u505a\u4e86\u7edf\u4e00\u7684\u5904\u7406\u3002\u8fd9\u6837\u4ece\u4e1a\u52a1\u5c42\u9762\u6765\u770b\uff0c\u5c06\u4e0d\u7b26\u5408\u4e1a\u52a1\u903b\u8f91\u7684\u60c5\u51b5\u89c6\u4e3a\u9519\u8bef\uff0c\u7edf\u4e00\u5199\u5230\u4e86\u533f\u540d\u51fd\u6570\u4e2d\uff0c\u5269\u4e0b\u4e86\u4e00\u4e2a\u7edf\u4e00\u7684\u9519\u8bef\u5904\u7406\u4e0e\u6b63\u5e38\u7684\u4e1a\u52a1\u903b\u8f91\u3002\u6216\u8bb8\u91c7\u7528\u8fd9\u79cd\u65b9\u5f0f\u5904\u7406\u8fd9\u7c7b\u573a\u666f\u8fd8\u4e0d\u9519\uff0c\u4f46\u662f\u5982\u679c\u6362\u4f5c\u4e0b\u9762\u7684\u8fd9\u4e2a\u793a\u4f8b\u53ef\u80fd\u5c31\u4e0d\u662f\u5f88\u5408\u7406\u4e86\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u4e00\u662f\u91c7\u7528\u4e86\u4f5c\u8005\u63a8\u8350\u7684\u7edf\u4e00\u5904\u7406\u9519\u8bef\u65b9\u5f0f\uff0c\u793a\u4f8b\u4e8c\u4f7f\u7528\u7684\u662f\u901a\u5e38\u7684\u9519\u8bef\u5904\u7406\u65b9\u5f0f \u793a\u4f8b\u4e00 \uff1a // \u76ee\u6807\u76ee\u5f55\u4e0b\u5305\u542b\u591a\u79cdArchive\u683c\u5f0f\u6587\u4ef6\uff0c\u5c06\u5176\u4e2d\u7684'x-msdownload'\u7c7b\u578b\u6587\u4ef6\u79fb\u52a8\u5230\u5176\u4ed6\u76ee\u5f55\u4e0b func moveEXE ( files [] os . FileInfo , aimPath , exePath string ) { var numExe , numOther int var fileBuf [] byte var fileType types . Type for _ , file := range files { fileName := aimPath + file . Name () newFileName := exePath + file . Name () err := func () error { // \u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9 if buf , err := ioutil . ReadFile ( fileName ); err != nil { log . Printf ( \"Time of read file: %s occur error: %s\\n\" , fileName , err ) return err } else { fileBuf = buf } // \u5224\u65ad\u6587\u4ef6\u662f\u5426\u4e3aArchive\uff08\u538b\u7f29\uff09\u683c\u5f0f if kind , err := filetype . Archive ( fileBuf ); err != nil { log . Printf ( \"Time of judge file type occur error: %s\\n\" , err ) return err } else { fileType = kind } // \u6587\u4ef6\u662f\u5426\u4e3a'x-msdownload'\u7c7b\u578b if fileSubType := fileType . MIME . Subtype ; fileSubType == \"x-msdownload\" { log . Printf ( \"file : %s is exe file\\n\" , fileName ) if err := os . Rename ( fileName , newFileName ); err != nil { log . Printf ( \"mv file: %s faile, error is: %s\\n\" , fileName , err ) return err } numExe ++ } else { log . Println ( \"no exe\" ) numOther ++ } return nil }() if err != nil { continue } } log . Printf ( \"exe file num is: %d, other file num is: %d\" , numExe , numOther ) } 1\u3001\u901a\u5e38\u6765\u8bf4\uff0c\u6211\u4eec\u4f7f\u7528\u533f\u540d\u51fd\u6570\u662f\u56e0\u4e3a\u90e8\u5206\u64cd\u4f5c\u4e0d\u503c\u5f97\u65b0\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6216\u8005\u8be5\u51fd\u6570\u4ec5\u4f7f\u7528\u4e00\u6b21\uff0c\u793a\u4f8b\u4e00\u4e2d\u7684\u533f\u540d\u51fd\u6570\u5305\u542b\u4e86\u5f88\u591a\u64cd\u4f5c\uff0c\u6216\u8bb8\u6211\u4eec\u5e94\u8be5\u4e3a\u6b64\u91cd\u65b0\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u3002\u5176\u4e2d\u5305\u542b\u4e86\u51e0\u4e4e\u5168\u90e8\u7684\u903b\u8f91\u4ee3\u7801\uff0c\u6211\u60f3\u8fd9\u770b\u8d77\u6765\u5e76\u4e0d\u662f\u5565\u597d\u4e3b\u610f\uff0c\u751a\u81f3\u5982\u679c\u4f60\u628a\u66f4\u591a\u7684\u903b\u8f91\u4ee3\u7801\u653e\u5230\u4e86\u533f\u540d\u51fd\u6570\u91cc\uff0c\u770b\u8d77\u6765\u5e94\u8be5\u4f1a\u66f4\u52a0\u7cdf\u7cd5\u3002 \u793a\u4f8b\u4e8c \uff1a // \u76ee\u6807\u76ee\u5f55\u4e0b\u5305\u542b\u591a\u79cdArchive\u683c\u5f0f\u6587\u4ef6\uff0c\u5c06\u5176\u4e2d\u7684'x-msdownload'\u7c7b\u578b\u6587\u4ef6\u79fb\u52a8\u5230\u5176\u4ed6\u76ee\u5f55\u4e0b func moveEXE ( files [] os . FileInfo , aimPath , exePath string ) { var numExe , numOther int for _ , file := range files { fileName := aimPath + file . Name () newFileName := exePath + file . Name () // \u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9 buf , err := ioutil . ReadFile ( fileName ) if err != nil { log . Printf ( \"read file:%s occur error\\n\" , fileName ) continue } // \u5224\u65ad\u6587\u4ef6\u662f\u5426\u4e3aArchive\uff08\u538b\u7f29\uff09\u683c\u5f0f kind , err := filetype . Archive ( buf ) if err != nil { log . Println ( \"judge file type error\" ) continue } // \u83b7\u53d6\u6587\u4ef6\u5177\u4f53\u7684\u7c7b\u578b fileSubType := kind . MIME . Subtype // \u6587\u4ef6\u662f\u5426\u4e3a'x-msdownload'\u7c7b\u578b if fileSubType == \"x-msdownload\" { log . Printf ( \"file : %s is exe file\\n\" , fileName ) err := os . Rename ( fileName , newFileName ) if err != nil { log . Printf ( \"mv file: %s faile\\n\" , fileName ) continue } numExe ++ } else { log . Println ( \"no exe\" ) numOther ++ } } log . Printf ( \"exe file num is: %d, other file num is: %d\" , numExe , numOther ) } 2\u3001\u793a\u4f8b\u4e8c\u4e2d\u7684\u4ee3\u7801\u770b\u8d77\u6765\u5219\u81ea\u7136\u591a\u4e86\uff08\u6211\u662f\u8fd9\u79cd\u611f\u89c9\uff09\uff0c\u6216\u8bb8\u4f60\u8ba4\u4e3a\u8fd9\u4fe9\u4e2a\u4f8b\u5b50\u76f8\u5dee\u65e0\u51e0\uff0c\u4f46\u662f\u6211\u60f3\u901a\u8fc7\u4ed6\u4eec\u8868\u660e\uff0c\u539f\u658716.10.2\u4e2d\u63a8\u8350\u7684\u9519\u8bef\u5904\u7406\u65b9\u5f0f\u662f\u6709\u4e00\u5b9a\u7684\u4f7f\u7528\u573a\u666f\u7684\uff0c\u5e76\u4e0d\u80fd\u53d6\u4ee3\u6807\u51c6\u4e14\u901a\u7528\u7684\u9519\u8bef\u5904\u7406\u65b9\u5f0f\uff0c\u5e0c\u671b\u5927\u5bb6\u80fd\u591f\u6ce8\u610f\u3002","title":"\u5173\u4e8e16.10.2\u7684\u7b2c\u4e8c\u4e2a\u4ee3\u7801\u793a\u4f8b"},{"location":"Discussion_about_16.10/#_1","text":"1\u3001\u9664\u4e86\u4f7f\u7528Go\u4e2d\u5df2\u7ecf\u5b9a\u4e49\u597d\u7684error\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u6839\u636e\u9700\u8981\u81ea\u5b9a\u4e49error\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u4e09\uff0c\u6211\u4eec\u81ea\u5b9a\u4e49\u4e86parseError \u9519\u8bef\uff0c\u5c55\u793a\u4e86\u53d1\u751f\u9519\u8bef\u7684\u6587\u4ef6\u548c\u5177\u4f53\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u5728\u4f60\u8bfb\u53d6\u76ee\u5f55\u4e0b\u7684\u591a\u4e2a\u6587\u4ef6\u65f6\u53ef\u4ee5\u65b9\u4fbf\u7684\u544a\u8bc9\u4f60\u5177\u4f53\u5728\u8bfb\u54ea\u4e2a\u6587\u4ef6\u65f6\u53d1\u751f\u4e86\u9519\u8bef\uff08\u4f5c\u4e3a\u793a\u4f8b\uff0c\u4ec5\u8bfb\u53d6\u5355\u4e2a\u6587\u4ef6\uff09\u3002 \u793a\u4f8b\u56db\u4e2d\uff0c\u5c55\u793a\u4e86\u8c03\u7528 parseFile \u51fd\u6570\u65f6\uff0c\u8c03\u7528\u8005\u53ef\u4ee5\u91c7\u7528\u7684\u4e00\u79cd\u9519\u8bef\u5904\u7406\u65b9\u5f0f\uff0c\u6839\u636e\u9519\u8bef\u7684\u7c7b\u578b\uff0c\u91c7\u53d6\u5bf9\u5e94\u7684\u64cd\u4f5c\u3002 \u793a\u4f8b\u4e09 \uff1a type parseError struct { File * os . File ErrorInfo string } func ( e * parseError ) Error () string { errInfo := fmt . Sprintf ( \"parse file: %s occur error, error info: %s\" , e . File . Name (), e . ErrorInfo ) return errInfo } func parseFile ( path string ) error { f , err := os . Open ( path ) if err != nil { return err } defer f . Close () var buf [ 512 ] byte for { switch num , err := f . Read ( buf [:]); { case num < 0 : readError := parseError { f , err . Error ()} log . Println ( readError . Error ()) return & readError case num == 0 : readError := parseError { f , err . Error ()} log . Println ( readError . Error ()) return & readError case num > 0 : fmt . Println ( string ( buf [: num ])) log . Printf ( \"read file: %s contents normally\" ) } } } \u793a\u4f8b\u56db \uff1a func main () { err := parseFile ( \"/home/rabbit/go/test_use/test\" ) switch err := err .( type ) { case * parseError : log . Println ( \"parse error: \" , err ) case * os . PathError : log . Println ( \"path error: \" , err ) } } 2\u3001\u5982\u679c\u4f60\u60f3\u5728\u8fd4\u56de\u9519\u8bef\u4e4b\u524d\u505a\u4e00\u4e9b\u989d\u5916\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u8bb0\u5f55\u65e5\u5fd7\uff0c\u90a3\u4f60\u53ef\u4ee5\u5355\u72ec\u5199\u4e00\u4e2a\u989d\u5916\u5904\u7406\u9519\u8bef\u7684\u51fd\u6570\u6216\u8005\u4e00\u4e2a\u533f\u540d\u51fd\u6570\u5c31\u53ef\u4ee5\uff08\u8fd9\u53d6\u51b3\u4e8e\u4f60\u662f\u5426\u5e38\u7528\u8be5\u51fd\u6570\u6216\u5b83\u7684\u529f\u80fd\u662f\u5426\u5f88\u591a\uff09\uff0c\u7c7b\u4f3cPython\u4e2d\u7684\u88c5\u9970\u5668\u4e00\u6837\u3002 \u793a\u4f8b\u4e94\u4e2d\uff0chandleError \u5c06\u9519\u8bef\u5199\u5165\u5230\u4e86\u6307\u5b9a\u65e5\u5fd7\u6587\u4ef6\u4e2d\uff1b \u793a\u4f8b\u516d\u4e2d\uff0cparseFile \u4e2d\u4f7f\u7528 defer func() {handleError(\"/home/rabbit/go/test_use/log\", err)}() \u4ee3\u66ff\u4e86\u591a\u6b21\u51fa\u73b0\u7684 log.Println(readError.Error()) \uff0c\u5e76\u5c06\u65e5\u5fd7\u8bb0\u5f55\u6301\u4e45\u5316\u5230\u6587\u4ef6\u4e2d\u3002 \u793a\u4f8b\u4e94 : func handleError ( logPath string , err error ) { if err == nil { return } logFile , _ := os . OpenFile ( filepath , os . O_RDWR | os . O_APPEND | os . O_CREATE , 666 ) defer logFile . Close () log . SetOutput ( logFile ) log . SetPrefix ( \"[FileError]\" ) log . SetFlags ( log . Llongfile | log . Ldate | log . Ltime ) log . Println ( err . Error ()) } \u793a\u4f8b\u516d : func parseFile ( path string ) ( err error ) { f , err := os . Open ( path ) if err != nil { return err } defer f . Close () defer func () { handleError ( \"/home/rabbit/go/test_use/log\" , err )}() var buf [ 512 ] byte for { switch num , err := f . Read ( buf [:]); { case num < 0 : err := & parseError { f , err . Error ()} return err case num == 0 : err := & parseError { f , err . Error ()} return err case num > 0 : fmt . Println ( string ( buf [: num ])) } } }","title":"\u5173\u4e8e\u9519\u8bef\u5904\u7406\u7684\u4e00\u4e9b\u5ef6\u4f38"},{"location":"directory/","text":"\u76ee\u5f55 \u00b6 \u524d\u8a00 \u7b2c\u4e00\u90e8\u5206\uff1a\u5b66\u4e60 Go \u8bed\u8a00 \u00b6 \u7b2c 1 \u7ae0\uff1aGo \u8bed\u8a00\u7684\u8d77\u6e90\uff0c\u53d1\u5c55\u4e0e\u666e\u53ca 1.1 \u8d77\u6e90\u4e0e\u53d1\u5c55 1.2 \u8bed\u8a00\u7684\u4e3b\u8981\u7279\u6027\u4e0e\u53d1\u5c55\u7684\u73af\u5883\u548c\u5f71\u54cd\u56e0\u7d20 \u7b2c 2 \u7ae0\uff1a\u5b89\u88c5\u4e0e\u8fd0\u884c\u73af\u5883 2.1 \u5e73\u53f0\u4e0e\u67b6\u6784 2.2 Go \u73af\u5883\u53d8\u91cf 2.3 \u5728 Linux \u4e0a\u5b89\u88c5 Go 2.4 \u5728 Mac OS X \u4e0a\u5b89\u88c5 Go 2.5 \u5728 Windows \u4e0a\u5b89\u88c5 Go 2.6 \u5b89\u88c5\u76ee\u5f55\u6e05\u5355 2.7 Go \u8fd0\u884c\u65f6 (runtime) 2.8 Go \u89e3\u91ca\u5668 \u7b2c 3 \u7ae0\uff1a \u7f16\u8f91\u5668\u3001\u96c6\u6210\u5f00\u53d1\u73af\u5883\u4e0e\u5176\u5b83\u5de5\u5177 3.1 Go \u5f00\u53d1\u73af\u5883\u7684\u57fa\u672c\u8981\u6c42 3.2 \u7f16\u8f91\u5668\u548c\u96c6\u6210\u5f00\u53d1\u73af\u5883 3.3 \u8c03\u8bd5\u5668 3.4 \u6784\u5efa\u5e76\u8fd0\u884c Go \u7a0b\u5e8f 3.5 \u683c\u5f0f\u5316\u4ee3\u7801 3.6 \u751f\u6210\u4ee3\u7801\u6587\u6863 3.7 \u5176\u5b83\u5de5\u5177 3.8 Go \u6027\u80fd\u8bf4\u660e 3.9 \u4e0e\u5176\u5b83\u8bed\u8a00\u8fdb\u884c\u4ea4\u4e92 \u7b2c\u4e8c\u90e8\u5206\uff1a\u8bed\u8a00\u7684\u6838\u5fc3\u7ed3\u6784\u4e0e\u6280\u672f \u00b6 \u7b2c 4 \u7ae0\uff1a\u57fa\u672c\u7ed3\u6784\u548c\u57fa\u672c\u6570\u636e\u7c7b\u578b 4.1 \u6587\u4ef6\u540d\u3001\u5173\u952e\u5b57\u4e0e\u6807\u8bc6\u7b26 4.2 Go \u7a0b\u5e8f\u7684\u57fa\u672c\u7ed3\u6784\u548c\u8981\u7d20 4.3 \u5e38\u91cf 4.4 \u53d8\u91cf 4.5 \u57fa\u672c\u7c7b\u578b\u548c\u8fd0\u7b97\u7b26 4.6 \u5b57\u7b26\u4e32 4.7 strings \u548c strconv \u5305 4.8 \u65f6\u95f4\u548c\u65e5\u671f 4.9 \u6307\u9488 \u7b2c 5 \u7ae0\uff1a \u63a7\u5236\u7ed3\u6784 5.1 if-else \u7ed3\u6784 5.2 \u6d4b\u8bd5\u591a\u8fd4\u56de\u503c\u51fd\u6570\u7684\u9519\u8bef 5.3 switch \u7ed3\u6784 5.4 for \u7ed3\u6784 5.5 Break \u4e0e continue 5.6 \u6807\u7b7e\u4e0e goto \u7b2c 6 \u7ae0\uff1a \u51fd\u6570 (function) 6.1 \u4ecb\u7ecd 6.2 \u51fd\u6570\u53c2\u6570\u4e0e\u8fd4\u56de\u503c 6.3 \u4f20\u9012\u53d8\u957f\u53c2\u6570 6.4 defer \u548c\u8ffd\u8e2a 6.5 \u5185\u7f6e\u51fd\u6570 6.6 \u9012\u5f52\u51fd\u6570 6.7 \u5c06\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570 6.8 \u95ed\u5305 6.9 \u5e94\u7528\u95ed\u5305\uff1a\u5c06\u51fd\u6570\u4f5c\u4e3a\u8fd4\u56de\u503c 6.10 \u4f7f\u7528\u95ed\u5305\u8c03\u8bd5 6.11 \u8ba1\u7b97\u51fd\u6570\u6267\u884c\u65f6\u95f4 6.12 \u901a\u8fc7\u5185\u5b58\u7f13\u5b58\u6765\u63d0\u5347\u6027\u80fd \u7b2c 7 \u7ae0\uff1a \u6570\u7ec4\u4e0e\u5207\u7247 7.1 \u58f0\u660e\u548c\u521d\u59cb\u5316 7.2 \u5207\u7247 7.3 For-range \u7ed3\u6784 7.4 \u5207\u7247\u91cd\u7ec4 (reslice) 7.5 \u5207\u7247\u7684\u590d\u5236\u4e0e\u8ffd\u52a0 7.6 \u5b57\u7b26\u4e32\u3001\u6570\u7ec4\u548c\u5207\u7247\u7684\u5e94\u7528 \u7b2c 8 \u7ae0\uff1a Map 8.1 \u58f0\u660e\u3001\u521d\u59cb\u5316\u548c make 8.2 \u6d4b\u8bd5\u952e\u503c\u5bf9\u662f\u5426\u5b58\u5728\u53ca\u5220\u9664\u5143\u7d20 8.3 for-range \u7684\u914d\u5957\u7528\u6cd5 8.4 map \u7c7b\u578b\u7684\u5207\u7247 8.5 map \u7684\u6392\u5e8f 8.6 \u5c06 map \u7684\u952e\u503c\u5bf9\u8c03 \u7b2c 9 \u7ae0\uff1a \u5305 (package) 9.1 \u6807\u51c6\u5e93\u6982\u8ff0 9.2 regexp \u5305 9.3 \u9501\u548c sync \u5305 9.4 \u7cbe\u5bc6\u8ba1\u7b97\u548c big \u5305 9.5 \u81ea\u5b9a\u4e49\u5305\u548c\u53ef\u89c1\u6027 9.6 \u4e3a\u81ea\u5b9a\u4e49\u5305\u4f7f\u7528 godoc 9.7 \u4f7f\u7528 go install \u5b89\u88c5\u81ea\u5b9a\u4e49\u5305 9.8 \u81ea\u5b9a\u4e49\u5305\u7684\u76ee\u5f55\u7ed3\u6784\u3001go install \u548c go test 9.9 \u901a\u8fc7 Git \u6253\u5305\u548c\u5b89\u88c5 9.10 Go \u7684\u5916\u90e8\u5305\u548c\u9879\u76ee 9.11 \u5728 Go \u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5916\u90e8\u5e93 \u7b2c 10 \u7ae0\uff1a \u7ed3\u6784 (struct) \u4e0e\u65b9\u6cd5 (method) 10.1 \u7ed3\u6784\u4f53\u5b9a\u4e49 10.2 \u4f7f\u7528\u5de5\u5382\u65b9\u6cd5\u521b\u5efa\u7ed3\u6784\u4f53\u5b9e\u4f8b 10.3 \u4f7f\u7528\u81ea\u5b9a\u4e49\u5305\u4e2d\u7684\u7ed3\u6784\u4f53 10.4 \u5e26\u6807\u7b7e\u7684\u7ed3\u6784\u4f53 10.5 \u533f\u540d\u5b57\u6bb5\u548c\u5185\u5d4c\u7ed3\u6784\u4f53 10.6 \u65b9\u6cd5 10.7 \u7c7b\u578b\u7684 String() \u65b9\u6cd5\u548c\u683c\u5f0f\u5316\u63cf\u8ff0\u7b26 10.8 \u5783\u573e\u56de\u6536\u548c SetFinalizer \u7b2c 11 \u7ae0\uff1a \u63a5\u53e3 (interface) \u4e0e\u53cd\u5c04 (reflection) 11.1 \u63a5\u53e3\u662f\u4ec0\u4e48 11.2 \u63a5\u53e3\u5d4c\u5957\u63a5\u53e3 11.3 \u7c7b\u578b\u65ad\u8a00\uff1a\u5982\u4f55\u68c0\u6d4b\u548c\u8f6c\u6362\u63a5\u53e3\u53d8\u91cf\u7684\u7c7b\u578b 11.4 \u7c7b\u578b\u5224\u65ad\uff1atype-switch 11.5 \u6d4b\u8bd5\u4e00\u4e2a\u503c\u662f\u5426\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3 11.6 \u4f7f\u7528\u65b9\u6cd5\u96c6\u4e0e\u63a5\u53e3 11.7 \u7b2c\u4e00\u4e2a\u4f8b\u5b50\uff1a\u4f7f\u7528 Sorter \u63a5\u53e3\u6392\u5e8f 11.8 \u7b2c\u4e8c\u4e2a\u4f8b\u5b50\uff1a\u8bfb\u548c\u5199 11.9 \u7a7a\u63a5\u53e3 11.10 \u53cd\u5c04\u5305 11.11 Printf \u548c\u53cd\u5c04 11.12 \u63a5\u53e3\u4e0e\u52a8\u6001\u7c7b\u578b 11.13 \u603b\u7ed3\uff1aGo \u4e2d\u7684\u9762\u5411\u5bf9\u8c61 11.14 \u7ed3\u6784\u4f53\u3001\u96c6\u5408\u548c\u9ad8\u9636\u51fd\u6570 \u7b2c\u4e09\u90e8\u5206\uff1aGo \u9ad8\u7ea7\u7f16\u7a0b \u00b6 \u7b2c 12 \u7ae0\uff1a \u8bfb\u5199\u6570\u636e 12.1 \u8bfb\u53d6\u7528\u6237\u7684\u8f93\u5165 12.2 \u6587\u4ef6\u8bfb\u5199 12.3 \u6587\u4ef6\u62f7\u8d1d 12.4 \u4ece\u547d\u4ee4\u884c\u8bfb\u53d6\u53c2\u6570 12.5 \u7528 buffer \u8bfb\u53d6\u6587\u4ef6 12.6 \u7528\u5207\u7247\u8bfb\u5199\u6587\u4ef6 12.7 \u7528 defer \u5173\u95ed\u6587\u4ef6 12.8 \u4f7f\u7528\u63a5\u53e3\u7684\u5b9e\u9645\u4f8b\u5b50\uff1afmt.Fprintf 12.9 JSON \u6570\u636e\u683c\u5f0f 12.10 XML \u6570\u636e\u683c\u5f0f 12.11 \u7528 Gob \u4f20\u8f93\u6570\u636e 12.12 Go \u4e2d\u7684\u5bc6\u7801\u5b66 \u7b2c 13 \u7ae0\uff1a \u9519\u8bef\u5904\u7406\u4e0e\u6d4b\u8bd5 13.1 \u9519\u8bef\u5904\u7406 13.2 \u8fd0\u884c\u65f6\u5f02\u5e38\u548c panic 13.3 \u4ece panic \u4e2d\u6062\u590d (recover) 13.4 \u81ea\u5b9a\u4e49\u5305\u4e2d\u7684\u9519\u8bef\u5904\u7406\u548c panicking 13.5 \u4e00\u79cd\u7528\u95ed\u5305\u5904\u7406\u9519\u8bef\u7684\u6a21\u5f0f 13.6 \u542f\u52a8\u5916\u90e8\u547d\u4ee4\u548c\u7a0b\u5e8f 13.7 Go \u4e2d\u7684\u5355\u5143\u6d4b\u8bd5\u548c\u57fa\u51c6\u6d4b\u8bd5 13.8 \u6d4b\u8bd5\u7684\u5177\u4f53\u4f8b\u5b50 13.9 \u7528\uff08\u6d4b\u8bd5\u6570\u636e\uff09\u8868\u9a71\u52a8\u6d4b\u8bd5 13.10 \u6027\u80fd\u8c03\u8bd5\uff1a\u5206\u6790\u5e76\u4f18\u5316 Go \u7a0b\u5e8f \u7b2c 14 \u7ae0\uff1a \u534f\u7a0b (goroutine) \u4e0e\u901a\u9053 (channel) 14.1 \u5e76\u53d1\u3001\u5e76\u884c\u548c\u534f\u7a0b 14.2 \u534f\u7a0b\u95f4\u7684\u4fe1\u9053 14.3 \u534f\u7a0b\u7684\u540c\u6b65\uff1a\u5173\u95ed\u901a\u9053-\u6d4b\u8bd5\u963b\u585e\u7684\u901a\u9053 14.4 \u4f7f\u7528 select \u5207\u6362\u534f\u7a0b 14.5 \u901a\u9053\u3001\u8d85\u65f6\u548c\u8ba1\u65f6\u5668 (Ticker) 14.6 \u534f\u7a0b\u548c\u6062\u590d (recover) 14.7 \u65b0\u65e7\u6a21\u578b\u5bf9\u6bd4\uff1a\u4efb\u52a1\u548cworker 14.8 \u60f0\u6027\u751f\u6210\u5668\u7684\u5b9e\u73b0 14.9 \u5b9e\u73b0 Futures \u6a21\u5f0f 14.10 \u590d\u7528 14.11 \u9650\u5236\u540c\u65f6\u5904\u7406\u7684\u8bf7\u6c42\u6570 14.12 \u94fe\u5f0f\u534f\u7a0b 14.13 \u5728\u591a\u6838\u5fc3\u4e0a\u5e76\u884c\u8ba1\u7b97 14.14 \u5e76\u884c\u5316\u5927\u91cf\u6570\u636e\u7684\u8ba1\u7b97 14.15 \u6f0f\u6876\u7b97\u6cd5 14.16 \u5bf9Go\u534f\u7a0b\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5 14.17 \u4f7f\u7528\u901a\u9053\u5e76\u53d1\u8bbf\u95ee\u5bf9\u8c61 \u7b2c 15 \u7ae0\uff1a \u7f51\u7edc\u3001\u6a21\u677f\u4e0e\u7f51\u9875\u5e94\u7528 15.1 tcp \u670d\u52a1\u5668 15.2 \u4e00\u4e2a\u7b80\u5355\u7684 web \u670d\u52a1\u5668 15.3 \u8bbf\u95ee\u5e76\u8bfb\u53d6\u9875\u9762\u6570\u636e 15.4 \u5199\u4e00\u4e2a\u7b80\u5355\u7684\u7f51\u9875\u5e94\u7528 15.5 \u786e\u4fdd\u7f51\u9875\u5e94\u7528\u5065\u58ee 15.6 \u7528\u6a21\u677f\u7f16\u5199\u7f51\u9875\u5e94\u7528 15.7 \u63a2\u7d22 template \u5305 15.8 \u7cbe\u5de7\u7684\u591a\u529f\u80fd\u7f51\u9875\u670d\u52a1\u5668 15.9 \u7528 rpc \u5b9e\u73b0\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528 15.10 \u57fa\u4e8e\u7f51\u7edc\u7684\u901a\u9053 netchan 15.11 \u4e0e websocket \u901a\u4fe1 15.12 \u7528 smtp \u53d1\u9001\u90ae\u4ef6 \u7b2c\u56db\u90e8\u5206\uff1a\u5b9e\u9645\u5e94\u7528 \u00b6 \u7b2c 16 \u7ae0\uff1a \u5e38\u89c1\u7684\u9677\u9631\u4e0e\u9519\u8bef 16.1 \u8bef\u7528\u77ed\u58f0\u660e\u5bfc\u81f4\u53d8\u91cf\u8986\u76d6 16.2 \u8bef\u7528\u5b57\u7b26\u4e32 16.3 \u53d1\u751f\u9519\u8bef\u65f6\u4f7f\u7528 defer \u5173\u95ed\u4e00\u4e2a\u6587\u4ef6 16.4 \u4f55\u65f6\u4f7f\u7528 new() \u548c make() 16.5 \u4e0d\u9700\u8981\u5c06\u4e00\u4e2a\u6307\u5411\u5207\u7247\u7684\u6307\u9488\u4f20\u9012\u7ed9\u51fd\u6570 16.6 \u4f7f\u7528\u6307\u9488\u6307\u5411\u63a5\u53e3\u7c7b\u578b 16.7 \u4f7f\u7528\u503c\u7c7b\u578b\u65f6\u8bef\u7528\u6307\u9488 16.8 \u8bef\u7528\u534f\u7a0b\u548c\u901a\u9053 16.9 \u95ed\u5305\u548c\u534f\u7a0b\u7684\u4f7f\u7528 16.10 \u7cdf\u7cd5\u7684\u9519\u8bef\u5904\u7406 \u7b2c 17 \u7ae0\uff1a \u6a21\u5f0f 17.1 \u9017\u53f7 ok \u6a21\u5f0f 17.2 defer \u6a21\u5f0f 17.3 \u53ef\u89c1\u6027\u6a21\u5f0f 17.4 \u8fd0\u7b97\u7b26\u6a21\u5f0f\u548c\u63a5\u53e3 \u7b2c 18 \u7ae0\uff1a \u51fa\u4e8e\u6027\u80fd\u8003\u8651\u7684\u5b9e\u7528\u4ee3\u7801\u7247\u6bb5 18.1 \u5b57\u7b26\u4e32 18.2 \u6570\u7ec4\u548c\u5207\u7247 18.3 \u6620\u5c04 18.4 \u7ed3\u6784\u4f53 18.5 \u63a5\u53e3 18.6 \u51fd\u6570 18.7 \u6587\u4ef6 18.8 \u534f\u7a0b (goroutine) \u4e0e\u901a\u9053 (channel) 18.9 \u7f51\u7edc\u548c\u7f51\u9875\u5e94\u7528 18.10 \u5176\u4ed6 18.11 \u51fa\u4e8e\u6027\u80fd\u8003\u8651\u7684\u6700\u4f73\u5b9e\u8df5\u548c\u5efa\u8bae \u7b2c 19 \u7ae0\uff1a \u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u5e94\u7528\u7a0b\u5e8f 19.1 \u7b80\u4ecb 19.2 \u77ed\u7f51\u5740\u9879\u76ee\u7b80\u4ecb 19.3 \u6570\u636e\u7ed3\u6784 19.4 \u7528\u6237\u754c\u9762\uff1aweb \u670d\u52a1\u7aef 19.5 \u6301\u4e45\u5316\u5b58\u50a8\uff1agob 19.6 \u7528\u534f\u7a0b\u4f18\u5316\u6027\u80fd 19.7 \u4ee5 json \u683c\u5f0f\u5b58\u50a8 19.8 \u591a\u670d\u52a1\u5668\u5904\u7406\u67b6\u6784 19.9 \u4f7f\u7528\u4ee3\u7406\u7f13\u5b58 19.10 \u603b\u7ed3\u548c\u589e\u5f3a \u7b2c 20 \u7ae0\uff1a Go \u8bed\u8a00\u5728 Google App Engine \u7684\u4f7f\u7528 20.1 \u4ec0\u4e48\u662f Google App Engine\uff1f 20.2 \u4e91\u4e0a\u7684 Go 20.3 \u5b89\u88c5 Go App Engine SDK\uff1a\u4e3a Go \u90e8\u7f72\u7684\u5f00\u53d1\u73af\u5883 20.4 \u5efa\u9020\u4f60\u81ea\u5df1\u7684 Hello world \u5e94\u7528 20.5 \u4f7f\u7528\u7528\u6237\u670d\u52a1\u548c\u63a2\u7d22\u5176 API 20.6 \u5904\u7406\u7a97\u53e3 20.7 \u4f7f\u7528\u6570\u636e\u5b58\u50a8 20.8 \u4e0a\u4f20\u5230\u4e91\u7aef \u7b2c 21 \u7ae0\uff1a \u771f\u5b9e\u4e16\u754c\u4e2d Go \u7684\u4f7f\u7528 21.1 Heroku\uff1a\u4e00\u4e2a\u4f7f\u7528 Go \u7684\u9ad8\u5ea6\u53ef\u7528\u4e00\u81f4\u6570\u636e\u5b58\u50a8 21.2 MROffice\uff1a\u4e00\u4e2a\u4f7f\u7528 Go \u7684\u547c\u53eb\u4e2d\u5fc3\u7f51\u7edc\u7535\u8bdd (VOIP) \u7cfb\u7edf 21.3 Atlassian\uff1a\u4e00\u4e2a\u865a\u62df\u673a\u7fa4\u7ba1\u7406\u7cfb\u7edf 21.4 Camilistore\uff1a\u4e00\u4e2a\u53ef\u5bfb\u5740\u5185\u5bb9\u5b58\u50a8\u7cfb\u7edf 21.5 Go \u8bed\u8a00\u7684\u5176\u4ed6\u5e94\u7528 \u9644\u5f55 \u00b6 A \u4ee3\u7801\u5f15\u7528 B \u6709\u8da3\u7684 Go \u5f15\u7528 C \u4ee3\u7801\u793a\u4f8b\u5217\u8868 D \u4e66\u4e2d\u7684\u5305\u5f15\u7528 E \u4e66\u4e2d\u7684\u5de5\u5177\u5f15\u7528 F \u5e38\u89c1\u95ee\u9898\u89e3\u7b54 G \u4e60\u9898\u7b54\u6848 H \u53c2\u8003\u6587\u732e \u7d22\u5f15 \u00b6","title":"\u76ee\u5f55"},{"location":"directory/#_1","text":"\u524d\u8a00","title":"\u76ee\u5f55"},{"location":"directory/#go","text":"\u7b2c 1 \u7ae0\uff1aGo \u8bed\u8a00\u7684\u8d77\u6e90\uff0c\u53d1\u5c55\u4e0e\u666e\u53ca 1.1 \u8d77\u6e90\u4e0e\u53d1\u5c55 1.2 \u8bed\u8a00\u7684\u4e3b\u8981\u7279\u6027\u4e0e\u53d1\u5c55\u7684\u73af\u5883\u548c\u5f71\u54cd\u56e0\u7d20 \u7b2c 2 \u7ae0\uff1a\u5b89\u88c5\u4e0e\u8fd0\u884c\u73af\u5883 2.1 \u5e73\u53f0\u4e0e\u67b6\u6784 2.2 Go \u73af\u5883\u53d8\u91cf 2.3 \u5728 Linux \u4e0a\u5b89\u88c5 Go 2.4 \u5728 Mac OS X \u4e0a\u5b89\u88c5 Go 2.5 \u5728 Windows \u4e0a\u5b89\u88c5 Go 2.6 \u5b89\u88c5\u76ee\u5f55\u6e05\u5355 2.7 Go \u8fd0\u884c\u65f6 (runtime) 2.8 Go \u89e3\u91ca\u5668 \u7b2c 3 \u7ae0\uff1a \u7f16\u8f91\u5668\u3001\u96c6\u6210\u5f00\u53d1\u73af\u5883\u4e0e\u5176\u5b83\u5de5\u5177 3.1 Go \u5f00\u53d1\u73af\u5883\u7684\u57fa\u672c\u8981\u6c42 3.2 \u7f16\u8f91\u5668\u548c\u96c6\u6210\u5f00\u53d1\u73af\u5883 3.3 \u8c03\u8bd5\u5668 3.4 \u6784\u5efa\u5e76\u8fd0\u884c Go \u7a0b\u5e8f 3.5 \u683c\u5f0f\u5316\u4ee3\u7801 3.6 \u751f\u6210\u4ee3\u7801\u6587\u6863 3.7 \u5176\u5b83\u5de5\u5177 3.8 Go \u6027\u80fd\u8bf4\u660e 3.9 \u4e0e\u5176\u5b83\u8bed\u8a00\u8fdb\u884c\u4ea4\u4e92","title":"\u7b2c\u4e00\u90e8\u5206\uff1a\u5b66\u4e60 Go \u8bed\u8a00"},{"location":"directory/#_2","text":"\u7b2c 4 \u7ae0\uff1a\u57fa\u672c\u7ed3\u6784\u548c\u57fa\u672c\u6570\u636e\u7c7b\u578b 4.1 \u6587\u4ef6\u540d\u3001\u5173\u952e\u5b57\u4e0e\u6807\u8bc6\u7b26 4.2 Go \u7a0b\u5e8f\u7684\u57fa\u672c\u7ed3\u6784\u548c\u8981\u7d20 4.3 \u5e38\u91cf 4.4 \u53d8\u91cf 4.5 \u57fa\u672c\u7c7b\u578b\u548c\u8fd0\u7b97\u7b26 4.6 \u5b57\u7b26\u4e32 4.7 strings \u548c strconv \u5305 4.8 \u65f6\u95f4\u548c\u65e5\u671f 4.9 \u6307\u9488 \u7b2c 5 \u7ae0\uff1a \u63a7\u5236\u7ed3\u6784 5.1 if-else \u7ed3\u6784 5.2 \u6d4b\u8bd5\u591a\u8fd4\u56de\u503c\u51fd\u6570\u7684\u9519\u8bef 5.3 switch \u7ed3\u6784 5.4 for \u7ed3\u6784 5.5 Break \u4e0e continue 5.6 \u6807\u7b7e\u4e0e goto \u7b2c 6 \u7ae0\uff1a \u51fd\u6570 (function) 6.1 \u4ecb\u7ecd 6.2 \u51fd\u6570\u53c2\u6570\u4e0e\u8fd4\u56de\u503c 6.3 \u4f20\u9012\u53d8\u957f\u53c2\u6570 6.4 defer \u548c\u8ffd\u8e2a 6.5 \u5185\u7f6e\u51fd\u6570 6.6 \u9012\u5f52\u51fd\u6570 6.7 \u5c06\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570 6.8 \u95ed\u5305 6.9 \u5e94\u7528\u95ed\u5305\uff1a\u5c06\u51fd\u6570\u4f5c\u4e3a\u8fd4\u56de\u503c 6.10 \u4f7f\u7528\u95ed\u5305\u8c03\u8bd5 6.11 \u8ba1\u7b97\u51fd\u6570\u6267\u884c\u65f6\u95f4 6.12 \u901a\u8fc7\u5185\u5b58\u7f13\u5b58\u6765\u63d0\u5347\u6027\u80fd \u7b2c 7 \u7ae0\uff1a \u6570\u7ec4\u4e0e\u5207\u7247 7.1 \u58f0\u660e\u548c\u521d\u59cb\u5316 7.2 \u5207\u7247 7.3 For-range \u7ed3\u6784 7.4 \u5207\u7247\u91cd\u7ec4 (reslice) 7.5 \u5207\u7247\u7684\u590d\u5236\u4e0e\u8ffd\u52a0 7.6 \u5b57\u7b26\u4e32\u3001\u6570\u7ec4\u548c\u5207\u7247\u7684\u5e94\u7528 \u7b2c 8 \u7ae0\uff1a Map 8.1 \u58f0\u660e\u3001\u521d\u59cb\u5316\u548c make 8.2 \u6d4b\u8bd5\u952e\u503c\u5bf9\u662f\u5426\u5b58\u5728\u53ca\u5220\u9664\u5143\u7d20 8.3 for-range \u7684\u914d\u5957\u7528\u6cd5 8.4 map \u7c7b\u578b\u7684\u5207\u7247 8.5 map \u7684\u6392\u5e8f 8.6 \u5c06 map \u7684\u952e\u503c\u5bf9\u8c03 \u7b2c 9 \u7ae0\uff1a \u5305 (package) 9.1 \u6807\u51c6\u5e93\u6982\u8ff0 9.2 regexp \u5305 9.3 \u9501\u548c sync \u5305 9.4 \u7cbe\u5bc6\u8ba1\u7b97\u548c big \u5305 9.5 \u81ea\u5b9a\u4e49\u5305\u548c\u53ef\u89c1\u6027 9.6 \u4e3a\u81ea\u5b9a\u4e49\u5305\u4f7f\u7528 godoc 9.7 \u4f7f\u7528 go install \u5b89\u88c5\u81ea\u5b9a\u4e49\u5305 9.8 \u81ea\u5b9a\u4e49\u5305\u7684\u76ee\u5f55\u7ed3\u6784\u3001go install \u548c go test 9.9 \u901a\u8fc7 Git \u6253\u5305\u548c\u5b89\u88c5 9.10 Go \u7684\u5916\u90e8\u5305\u548c\u9879\u76ee 9.11 \u5728 Go \u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5916\u90e8\u5e93 \u7b2c 10 \u7ae0\uff1a \u7ed3\u6784 (struct) \u4e0e\u65b9\u6cd5 (method) 10.1 \u7ed3\u6784\u4f53\u5b9a\u4e49 10.2 \u4f7f\u7528\u5de5\u5382\u65b9\u6cd5\u521b\u5efa\u7ed3\u6784\u4f53\u5b9e\u4f8b 10.3 \u4f7f\u7528\u81ea\u5b9a\u4e49\u5305\u4e2d\u7684\u7ed3\u6784\u4f53 10.4 \u5e26\u6807\u7b7e\u7684\u7ed3\u6784\u4f53 10.5 \u533f\u540d\u5b57\u6bb5\u548c\u5185\u5d4c\u7ed3\u6784\u4f53 10.6 \u65b9\u6cd5 10.7 \u7c7b\u578b\u7684 String() \u65b9\u6cd5\u548c\u683c\u5f0f\u5316\u63cf\u8ff0\u7b26 10.8 \u5783\u573e\u56de\u6536\u548c SetFinalizer \u7b2c 11 \u7ae0\uff1a \u63a5\u53e3 (interface) \u4e0e\u53cd\u5c04 (reflection) 11.1 \u63a5\u53e3\u662f\u4ec0\u4e48 11.2 \u63a5\u53e3\u5d4c\u5957\u63a5\u53e3 11.3 \u7c7b\u578b\u65ad\u8a00\uff1a\u5982\u4f55\u68c0\u6d4b\u548c\u8f6c\u6362\u63a5\u53e3\u53d8\u91cf\u7684\u7c7b\u578b 11.4 \u7c7b\u578b\u5224\u65ad\uff1atype-switch 11.5 \u6d4b\u8bd5\u4e00\u4e2a\u503c\u662f\u5426\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3 11.6 \u4f7f\u7528\u65b9\u6cd5\u96c6\u4e0e\u63a5\u53e3 11.7 \u7b2c\u4e00\u4e2a\u4f8b\u5b50\uff1a\u4f7f\u7528 Sorter \u63a5\u53e3\u6392\u5e8f 11.8 \u7b2c\u4e8c\u4e2a\u4f8b\u5b50\uff1a\u8bfb\u548c\u5199 11.9 \u7a7a\u63a5\u53e3 11.10 \u53cd\u5c04\u5305 11.11 Printf \u548c\u53cd\u5c04 11.12 \u63a5\u53e3\u4e0e\u52a8\u6001\u7c7b\u578b 11.13 \u603b\u7ed3\uff1aGo \u4e2d\u7684\u9762\u5411\u5bf9\u8c61 11.14 \u7ed3\u6784\u4f53\u3001\u96c6\u5408\u548c\u9ad8\u9636\u51fd\u6570","title":"\u7b2c\u4e8c\u90e8\u5206\uff1a\u8bed\u8a00\u7684\u6838\u5fc3\u7ed3\u6784\u4e0e\u6280\u672f"},{"location":"directory/#go_1","text":"\u7b2c 12 \u7ae0\uff1a \u8bfb\u5199\u6570\u636e 12.1 \u8bfb\u53d6\u7528\u6237\u7684\u8f93\u5165 12.2 \u6587\u4ef6\u8bfb\u5199 12.3 \u6587\u4ef6\u62f7\u8d1d 12.4 \u4ece\u547d\u4ee4\u884c\u8bfb\u53d6\u53c2\u6570 12.5 \u7528 buffer \u8bfb\u53d6\u6587\u4ef6 12.6 \u7528\u5207\u7247\u8bfb\u5199\u6587\u4ef6 12.7 \u7528 defer \u5173\u95ed\u6587\u4ef6 12.8 \u4f7f\u7528\u63a5\u53e3\u7684\u5b9e\u9645\u4f8b\u5b50\uff1afmt.Fprintf 12.9 JSON \u6570\u636e\u683c\u5f0f 12.10 XML \u6570\u636e\u683c\u5f0f 12.11 \u7528 Gob \u4f20\u8f93\u6570\u636e 12.12 Go \u4e2d\u7684\u5bc6\u7801\u5b66 \u7b2c 13 \u7ae0\uff1a \u9519\u8bef\u5904\u7406\u4e0e\u6d4b\u8bd5 13.1 \u9519\u8bef\u5904\u7406 13.2 \u8fd0\u884c\u65f6\u5f02\u5e38\u548c panic 13.3 \u4ece panic \u4e2d\u6062\u590d (recover) 13.4 \u81ea\u5b9a\u4e49\u5305\u4e2d\u7684\u9519\u8bef\u5904\u7406\u548c panicking 13.5 \u4e00\u79cd\u7528\u95ed\u5305\u5904\u7406\u9519\u8bef\u7684\u6a21\u5f0f 13.6 \u542f\u52a8\u5916\u90e8\u547d\u4ee4\u548c\u7a0b\u5e8f 13.7 Go \u4e2d\u7684\u5355\u5143\u6d4b\u8bd5\u548c\u57fa\u51c6\u6d4b\u8bd5 13.8 \u6d4b\u8bd5\u7684\u5177\u4f53\u4f8b\u5b50 13.9 \u7528\uff08\u6d4b\u8bd5\u6570\u636e\uff09\u8868\u9a71\u52a8\u6d4b\u8bd5 13.10 \u6027\u80fd\u8c03\u8bd5\uff1a\u5206\u6790\u5e76\u4f18\u5316 Go \u7a0b\u5e8f \u7b2c 14 \u7ae0\uff1a \u534f\u7a0b (goroutine) \u4e0e\u901a\u9053 (channel) 14.1 \u5e76\u53d1\u3001\u5e76\u884c\u548c\u534f\u7a0b 14.2 \u534f\u7a0b\u95f4\u7684\u4fe1\u9053 14.3 \u534f\u7a0b\u7684\u540c\u6b65\uff1a\u5173\u95ed\u901a\u9053-\u6d4b\u8bd5\u963b\u585e\u7684\u901a\u9053 14.4 \u4f7f\u7528 select \u5207\u6362\u534f\u7a0b 14.5 \u901a\u9053\u3001\u8d85\u65f6\u548c\u8ba1\u65f6\u5668 (Ticker) 14.6 \u534f\u7a0b\u548c\u6062\u590d (recover) 14.7 \u65b0\u65e7\u6a21\u578b\u5bf9\u6bd4\uff1a\u4efb\u52a1\u548cworker 14.8 \u60f0\u6027\u751f\u6210\u5668\u7684\u5b9e\u73b0 14.9 \u5b9e\u73b0 Futures \u6a21\u5f0f 14.10 \u590d\u7528 14.11 \u9650\u5236\u540c\u65f6\u5904\u7406\u7684\u8bf7\u6c42\u6570 14.12 \u94fe\u5f0f\u534f\u7a0b 14.13 \u5728\u591a\u6838\u5fc3\u4e0a\u5e76\u884c\u8ba1\u7b97 14.14 \u5e76\u884c\u5316\u5927\u91cf\u6570\u636e\u7684\u8ba1\u7b97 14.15 \u6f0f\u6876\u7b97\u6cd5 14.16 \u5bf9Go\u534f\u7a0b\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5 14.17 \u4f7f\u7528\u901a\u9053\u5e76\u53d1\u8bbf\u95ee\u5bf9\u8c61 \u7b2c 15 \u7ae0\uff1a \u7f51\u7edc\u3001\u6a21\u677f\u4e0e\u7f51\u9875\u5e94\u7528 15.1 tcp \u670d\u52a1\u5668 15.2 \u4e00\u4e2a\u7b80\u5355\u7684 web \u670d\u52a1\u5668 15.3 \u8bbf\u95ee\u5e76\u8bfb\u53d6\u9875\u9762\u6570\u636e 15.4 \u5199\u4e00\u4e2a\u7b80\u5355\u7684\u7f51\u9875\u5e94\u7528 15.5 \u786e\u4fdd\u7f51\u9875\u5e94\u7528\u5065\u58ee 15.6 \u7528\u6a21\u677f\u7f16\u5199\u7f51\u9875\u5e94\u7528 15.7 \u63a2\u7d22 template \u5305 15.8 \u7cbe\u5de7\u7684\u591a\u529f\u80fd\u7f51\u9875\u670d\u52a1\u5668 15.9 \u7528 rpc \u5b9e\u73b0\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528 15.10 \u57fa\u4e8e\u7f51\u7edc\u7684\u901a\u9053 netchan 15.11 \u4e0e websocket \u901a\u4fe1 15.12 \u7528 smtp \u53d1\u9001\u90ae\u4ef6","title":"\u7b2c\u4e09\u90e8\u5206\uff1aGo \u9ad8\u7ea7\u7f16\u7a0b"},{"location":"directory/#_3","text":"\u7b2c 16 \u7ae0\uff1a \u5e38\u89c1\u7684\u9677\u9631\u4e0e\u9519\u8bef 16.1 \u8bef\u7528\u77ed\u58f0\u660e\u5bfc\u81f4\u53d8\u91cf\u8986\u76d6 16.2 \u8bef\u7528\u5b57\u7b26\u4e32 16.3 \u53d1\u751f\u9519\u8bef\u65f6\u4f7f\u7528 defer \u5173\u95ed\u4e00\u4e2a\u6587\u4ef6 16.4 \u4f55\u65f6\u4f7f\u7528 new() \u548c make() 16.5 \u4e0d\u9700\u8981\u5c06\u4e00\u4e2a\u6307\u5411\u5207\u7247\u7684\u6307\u9488\u4f20\u9012\u7ed9\u51fd\u6570 16.6 \u4f7f\u7528\u6307\u9488\u6307\u5411\u63a5\u53e3\u7c7b\u578b 16.7 \u4f7f\u7528\u503c\u7c7b\u578b\u65f6\u8bef\u7528\u6307\u9488 16.8 \u8bef\u7528\u534f\u7a0b\u548c\u901a\u9053 16.9 \u95ed\u5305\u548c\u534f\u7a0b\u7684\u4f7f\u7528 16.10 \u7cdf\u7cd5\u7684\u9519\u8bef\u5904\u7406 \u7b2c 17 \u7ae0\uff1a \u6a21\u5f0f 17.1 \u9017\u53f7 ok \u6a21\u5f0f 17.2 defer \u6a21\u5f0f 17.3 \u53ef\u89c1\u6027\u6a21\u5f0f 17.4 \u8fd0\u7b97\u7b26\u6a21\u5f0f\u548c\u63a5\u53e3 \u7b2c 18 \u7ae0\uff1a \u51fa\u4e8e\u6027\u80fd\u8003\u8651\u7684\u5b9e\u7528\u4ee3\u7801\u7247\u6bb5 18.1 \u5b57\u7b26\u4e32 18.2 \u6570\u7ec4\u548c\u5207\u7247 18.3 \u6620\u5c04 18.4 \u7ed3\u6784\u4f53 18.5 \u63a5\u53e3 18.6 \u51fd\u6570 18.7 \u6587\u4ef6 18.8 \u534f\u7a0b (goroutine) \u4e0e\u901a\u9053 (channel) 18.9 \u7f51\u7edc\u548c\u7f51\u9875\u5e94\u7528 18.10 \u5176\u4ed6 18.11 \u51fa\u4e8e\u6027\u80fd\u8003\u8651\u7684\u6700\u4f73\u5b9e\u8df5\u548c\u5efa\u8bae \u7b2c 19 \u7ae0\uff1a \u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u5e94\u7528\u7a0b\u5e8f 19.1 \u7b80\u4ecb 19.2 \u77ed\u7f51\u5740\u9879\u76ee\u7b80\u4ecb 19.3 \u6570\u636e\u7ed3\u6784 19.4 \u7528\u6237\u754c\u9762\uff1aweb \u670d\u52a1\u7aef 19.5 \u6301\u4e45\u5316\u5b58\u50a8\uff1agob 19.6 \u7528\u534f\u7a0b\u4f18\u5316\u6027\u80fd 19.7 \u4ee5 json \u683c\u5f0f\u5b58\u50a8 19.8 \u591a\u670d\u52a1\u5668\u5904\u7406\u67b6\u6784 19.9 \u4f7f\u7528\u4ee3\u7406\u7f13\u5b58 19.10 \u603b\u7ed3\u548c\u589e\u5f3a \u7b2c 20 \u7ae0\uff1a Go \u8bed\u8a00\u5728 Google App Engine \u7684\u4f7f\u7528 20.1 \u4ec0\u4e48\u662f Google App Engine\uff1f 20.2 \u4e91\u4e0a\u7684 Go 20.3 \u5b89\u88c5 Go App Engine SDK\uff1a\u4e3a Go \u90e8\u7f72\u7684\u5f00\u53d1\u73af\u5883 20.4 \u5efa\u9020\u4f60\u81ea\u5df1\u7684 Hello world \u5e94\u7528 20.5 \u4f7f\u7528\u7528\u6237\u670d\u52a1\u548c\u63a2\u7d22\u5176 API 20.6 \u5904\u7406\u7a97\u53e3 20.7 \u4f7f\u7528\u6570\u636e\u5b58\u50a8 20.8 \u4e0a\u4f20\u5230\u4e91\u7aef \u7b2c 21 \u7ae0\uff1a \u771f\u5b9e\u4e16\u754c\u4e2d Go \u7684\u4f7f\u7528 21.1 Heroku\uff1a\u4e00\u4e2a\u4f7f\u7528 Go \u7684\u9ad8\u5ea6\u53ef\u7528\u4e00\u81f4\u6570\u636e\u5b58\u50a8 21.2 MROffice\uff1a\u4e00\u4e2a\u4f7f\u7528 Go \u7684\u547c\u53eb\u4e2d\u5fc3\u7f51\u7edc\u7535\u8bdd (VOIP) \u7cfb\u7edf 21.3 Atlassian\uff1a\u4e00\u4e2a\u865a\u62df\u673a\u7fa4\u7ba1\u7406\u7cfb\u7edf 21.4 Camilistore\uff1a\u4e00\u4e2a\u53ef\u5bfb\u5740\u5185\u5bb9\u5b58\u50a8\u7cfb\u7edf 21.5 Go \u8bed\u8a00\u7684\u5176\u4ed6\u5e94\u7528","title":"\u7b2c\u56db\u90e8\u5206\uff1a\u5b9e\u9645\u5e94\u7528"},{"location":"directory/#_4","text":"A \u4ee3\u7801\u5f15\u7528 B \u6709\u8da3\u7684 Go \u5f15\u7528 C \u4ee3\u7801\u793a\u4f8b\u5217\u8868 D \u4e66\u4e2d\u7684\u5305\u5f15\u7528 E \u4e66\u4e2d\u7684\u5de5\u5177\u5f15\u7528 F \u5e38\u89c1\u95ee\u9898\u89e3\u7b54 G \u4e60\u9898\u7b54\u6848 H \u53c2\u8003\u6587\u732e","title":"\u9644\u5f55"},{"location":"directory/#_5","text":"","title":"\u7d22\u5f15"},{"location":"preface/","text":"\u524d\u8a00 \u00b6 \u7528\u66f4\u5c11\u7684\u4ee3\u7801\uff0c\u66f4\u77ed\u7684\u7f16\u8bd1\u65f6\u95f4\uff0c\u521b\u5efa\u8fd0\u884c\u66f4\u5feb\u7684\u7a0b\u5e8f\uff0c\u4eab\u53d7\u66f4\u591a\u7684\u4e50\u8da3 \u00b6 \u5bf9\u4e8e\u5b66\u4e60 Go \u7f16\u7a0b\u8bed\u8a00\u7684\u7231\u597d\u8005\u6765\u8bf4\uff0c\u8fd9\u672c\u4e66\u65e0\u7591\u662f\u6700\u9002\u5408\u4f60\u7684\u4e00\u672c\u4e66\u7c4d\uff0c\u8fd9\u91cc\u5305\u542b\u4e86\u5f53\u524d\u6700\u5168\u9762\u7684\u5b66\u4e60\u8d44\u6e90\u3002\u672c\u4e66\u901a\u8fc7\u5bf9\u5b98\u65b9\u7684\u5728\u7ebf\u6587\u6863\u3001\u540d\u4eba\u535a\u5ba2\u3001\u4e66\u7c4d\u3001\u76f8\u5173\u6587\u7ae0\u4ee5\u53ca\u6f14\u8bb2\u7684\u8d44\u6599\u6536\u96c6\u548c\u6574\u7406\uff0c\u5e76\u7ed3\u5408\u6211\u81ea\u8eab\u5728\u8f6f\u4ef6\u5de5\u7a0b\u3001\u7f16\u7a0b\u8bed\u8a00\u548c\u6570\u636e\u5e93\u5f00\u53d1\u7684\u6388\u8bfe\u7ecf\u9a8c\uff0c\u5c06\u8fd9\u4e9b\u96f6\u788e\u7684\u77e5\u8bc6\u70b9\u7ec4\u7ec7\u6210\u7cfb\u7edf\u5316\u7684\u6982\u5ff5\u548c\u6280\u672f\u5206\u7c7b\u6765\u8fdb\u884c\u8bb2\u89e3\u3002 \u968f\u7740\u8f6f\u4ef6\u89c4\u6a21\u7684\u4e0d\u65ad\u6269\u5927\uff0c\u8bf8\u591a\u7684\u5b66\u8005\u548c\u8c37\u6b4c\u7684\u5f00\u53d1\u8005\u4eec\u5728\u516c\u53f8\u5185\u90e8\u7684\u8f6f\u4ef6\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u5f00\u59cb\u7ecf\u5386\u5927\u91cf\u7684\u632b\u6298\uff0c\u5728\u8bf8\u591a\u95ee\u9898\u4e0a\u90fd\u4e0d\u80fd\u7ed9\u51fa\u4ee4\u4eba\u6ee1\u610f\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5c24\u5176\u662f\u5728\u4f7f\u7528 C++ \u6765\u5f00\u53d1\u5927\u578b\u7684\u670d\u52a1\u7aef\u8f6f\u4ef6\u65f6\uff0c\u60c5\u51b5\u66f4\u662f\u4e0d\u5bb9\u4e50\u89c2\u3002\u7531\u4e8e\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e00\u822c\u90fd\u662f\u975e\u5e38\u5de8\u5927\u7684\uff0c\u56e0\u6b64\u9700\u8981\u8017\u8d39\u5927\u91cf\u7684\u65f6\u95f4\u5728\u7f16\u8bd1\u8fd9\u4e9b\u6587\u4ef6\u4e0a\uff0c\u540c\u65f6\u7f16\u7a0b\u8bed\u8a00\u7684\u8bbe\u8ba1\u601d\u60f3\u4e5f\u5df2\u7ecf\u975e\u5e38\u9648\u65e7\uff0c\u8fd9\u4e9b\u60c5\u51b5\u90fd\u5145\u5206\u8bc1\u660e\u4e86\u73b0\u6709\u7684\u7f16\u7a0b\u8bed\u8a00\u5df2\u4e0d\u7b26\u5408\u65f6\u4e0b\u7684\u751f\u4ea7\u73af\u5883\u3002\u5c3d\u7ba1\u786c\u4ef6\u5728\u8fc7\u53bb\u7684\u51e0\u5341\u5e74\u4e2d\u6709\u4e86\u98de\u901f\u7684\u53d1\u5c55\uff0c\u4f46\u4eba\u4eec\u4f9d\u65e7\u6ca1\u6709\u627e\u5230\u673a\u4f1a\u53bb\u6539\u53d8 C++ \u5728\u8f6f\u4ef6\u5f00\u53d1\u7684\u91cd\u8981\u5730\u4f4d\uff0c\u5e76\u5728\u5b9e\u9645\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u5fcd\u53d7\u7740\u5b83\u6240\u5e26\u6765\u7684\u4ee4\u4eba\u5934\u75bc\u7684\u4e00\u4e9b\u95ee\u9898\u3002\u56e0\u6b64\u5b66\u8005\u4eec\u5750\u4e0b\u6765\u603b\u7ed3\u51fa\u4e86\u73b0\u5728\u751f\u4ea7\u73af\u5883\u4e0e\u8f6f\u4ef6\u5f00\u53d1\u4e4b\u95f4\u7684\u4e3b\u8981\u77db\u76fe\uff0c\u5e76\u5c1d\u8bd5\u8bbe\u8ba1\u4e00\u95e8\u5168\u65b0\u7684\u7f16\u7a0b\u8bed\u8a00\u6765\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002 \u4ee5\u4e0b\u5c31\u662f\u4ed6\u4eec\u8ba8\u8bba\u5f97\u51fa\u7684\u5bf9\u7f16\u7a0b\u8bed\u8a00\u7684\u8bbe\u8ba1\u8981\u6c42\uff1a \u80fd\u591f\u4ee5\u66f4\u5feb\u7684\u901f\u5ea6\u5f00\u53d1\u8f6f\u4ef6 \u5f00\u53d1\u51fa\u7684\u8f6f\u4ef6\u80fd\u591f\u5f88\u597d\u5730\u5728\u73b0\u4ee3\u7684\u591a\u6838\u8ba1\u7b97\u673a\u4e0a\u5de5\u4f5c \u5f00\u53d1\u51fa\u7684\u8f6f\u4ef6\u80fd\u591f\u5f88\u597d\u5730\u5728\u7f51\u7edc\u73af\u5883\u4e0b\u5de5\u4f5c \u4f7f\u4eba\u4eec\u80fd\u591f\u4eab\u53d7\u8f6f\u4ef6\u5f00\u53d1\u7684\u8fc7\u7a0b Go \u8bed\u8a00\u5c31\u5728\u8fd9\u6837\u7684\u73af\u5883\u4e0b\u8bde\u751f\u4e86\uff0c\u5b83\u8ba9\u4eba\u611f\u89c9\u50cf\u662f Python \u6216 Ruby \u8fd9\u6837\u7684\u52a8\u6001\u8bed\u8a00\uff0c\u4f46\u5374\u53c8\u62e5\u6709\u50cf C \u6216\u8005 Java \u8fd9\u7c7b\u8bed\u8a00\u7684\u9ad8\u6027\u80fd\u548c\u5b89\u5168\u6027\u3002 Go \u8bed\u8a00\u51fa\u73b0\u7684\u76ee\u7684\u662f\u5e0c\u671b\u5728\u7f16\u7a0b\u9886\u57df\u521b\u9020\u6700\u5b9e\u7528\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u8f6f\u4ef6\u5f00\u53d1\u3002\u5b83\u5e76\u4e0d\u662f\u8981\u7528\u5947\u602a\u7684\u8bed\u6cd5\u548c\u6666\u6da9\u96be\u61c2\u7684\u6982\u5ff5\u6765\u4ece\u6839\u672c\u4e0a\u63a8\u7ffb\u5df2\u6709\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u800c\u662f\u5efa\u7acb\u5e76\u6539\u5584\u4e86 C\u3001Java\u3001C# \u4e2d\u7684\u8bb8\u591a\u8bed\u6cd5\u98ce\u683c\u3002\u5b83\u63d0\u5021\u901a\u8fc7\u63a5\u53e3\u6765\u9488\u5bf9\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff0c\u901a\u8fc7 goroutine \u548c channel \u6765\u652f\u6301\u5e76\u53d1\u548c\u5e76\u884c\u7f16\u7a0b\u3002 \u8fd9\u672c\u4e66\u662f\u4e3a\u90a3\u4e9b\u60f3\u8981\u5b66\u4e60 Go \u8fd9\u95e8\u5168\u65b0\u7684\uff0c\u8ff7\u4eba\u7684\u548c\u5145\u6ee1\u5e0c\u671b\u7684\u7f16\u7a0b\u8bed\u8a00\u7684\u5f00\u53d1\u8005\u91cf\u8eab\u5b9a\u505a\u7684\u3002\u5f53\u7136\uff0c\u4f60\u5728\u5b66\u4e60 Go \u8bed\u8a00\u4e4b\u524d\u9700\u8981\u5177\u5907\u4e00\u4e9b\u5173\u4e8e\u7f16\u7a0b\u7684\u57fa\u7840\u77e5\u8bc6\u548c\u7ecf\u9a8c\uff0c\u5e76\u4e14\u62e5\u6709\u5408\u9002\u7684\u5b66\u4e60\u73af\u5883\uff0c\u4f46\u4f60\u5e76\u4e0d\u9700\u8981\u5bf9 C \u6216\u8005 Java \u6216\u5176\u5b83\u7c7b\u4f3c\u7684\u8bed\u8a00\u6709\u975e\u5e38\u6df1\u5165\u7684\u4e86\u89e3\u3002 \u5bf9\u4e8e\u90a3\u4e9b\u719f\u6089 C \u6216\u8005\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8bed\u8a00\u7684\u5f00\u53d1\u8005\uff0c\u6211\u4eec\u5c06\u4f1a\u5728\u672c\u4e66\u4e2d\u7528 Go \u548c\u4e00\u4e9b\u7f16\u7a0b\u8bed\u8a00\u7684\u76f8\u5173\u6982\u5ff5\u8fdb\u884c\u6bd4\u8f83\uff08\u4e66\u4e2d\u4f1a\u4f7f\u7528\u5927\u5bb6\u6240\u719f\u77e5\u7684\u7f29\u5199 \u201cOO\u201d \u6765\u8868\u793a\u9762\u5411\u5bf9\u8c61\uff09\u3002 \u672c\u4e66\u5c06\u4f1a\u4ece\u6700\u57fa\u7840\u7684\u6982\u5ff5\u8bb2\u8d77\uff0c\u540c\u65f6\u4e5f\u4f1a\u8ba8\u8bba\u4e00\u4e9b\u7c7b\u4f3c\u5728\u5e94\u7528 goroutine \u548c channel \u65f6\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u6a21\u5f0f\uff0c\u5982\u4f55\u5728 Go \u8bed\u8a00\u4e2d\u4f7f\u7528\u8c37\u6b4c API\uff0c\u5982\u4f55\u64cd\u4f5c\u5185\u5b58\uff0c\u5982\u4f55\u5728 Go \u8bed\u8a00\u4e2d\u8fdb\u884c\u7a0b\u5e8f\u6d4b\u8bd5\u548c\u5982\u4f55\u4f7f\u7528\u6a21\u677f\u6765\u5f00\u53d1 Web \u5e94\u7528\u8fd9\u4e9b\u9ad8\u7ea7\u6982\u5ff5\u548c\u6280\u5de7\u3002 \u5728\u672c\u4e66\u7684\u7b2c\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u4f1a\u8ba8\u8bba Go \u8bed\u8a00\u7684\u8d77\u6e90\uff08\u7b2c 1 \u7ae0\uff09\uff0c\u4ee5\u53ca\u5982\u4f55\u5b89\u88c5 Go \u8bed\u8a00\uff08\u7b2c 2 \u7ae0\uff09\u548c\u5f00\u53d1\u73af\u5883\uff08\u7b2c 3 \u7ae0\uff09\u3002 \u5728\u672c\u4e66\u7684\u7b2c\u4e8c\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u4f1a\u5e26\u9886\u4f60\u8d2f\u7a7f Go \u8bed\u8a00\u7684\u6838\u5fc3\u601d\u60f3\uff0c\u8b6c\u5982\u7b80\u5355\u4e0e\u590d\u6742\u7c7b\u578b\uff08\u7b2c 4\u30017\u30018 \u7ae0\uff09\uff0c\u63a7\u5236\u7ed3\u6784\uff08\u7b2c 5 \u7ae0\uff09\uff0c\u51fd\u6570\uff08\u7b2c 6 \u7ae0\uff09\uff0c\u7ed3\u6784\u4e0e\u65b9\u6cd5\uff08\u7b2c 10 \u7ae0\uff09\u548c\u63a5\u53e3\uff08\u7b2c 11 \u7ae0\uff09\u3002\u6211\u4eec\u4f1a\u5bf9 Go \u8bed\u8a00\u7684\u51fd\u6570\u5f0f\u548c\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8fdb\u884c\u900f\u5f7b\u7684\u8bb2\u89e3\uff0c\u5305\u62ec\u5982\u4f55\u4f7f\u7528 Go \u8bed\u8a00\u6765\u6784\u9020\u5927\u578b\u9879\u76ee\uff08\u7b2c 9 \u7ae0\uff09\u3002 \u5728\u672c\u4e66\u7684\u7b2c\u4e09\u90e8\u5206\uff0c\u4f60\u5c06\u4f1a\u5b66\u4e60\u5230\u5982\u4f55\u5904\u7406\u4e0d\u540c\u683c\u5f0f\u7684\u6587\u4ef6\uff08\u7b2c 12 \u7ae0\uff09\u548c\u5982\u4f55\u5728 Go \u8bed\u8a00\u4e2d\u5de7\u5999\u5730\u4f7f\u7528\u9519\u8bef\u5904\u7406\u673a\u5236\uff08\u7b2c 13 \u7ae0\uff09\u3002\u7136\u540e\u6211\u4eec\u4f1a\u5bf9 Go \u8bed\u8a00\u4e2d\u6700\u503c\u5f97\u79f0\u8d5e\u7684\u8bbe\u8ba1 goroutine \u548c channel \u8fdb\u884c\u5e76\u53d1\u548c\u591a\u6838\u5e94\u7528\u7684\u57fa\u672c\u6280\u5de7\u7684\u8bb2\u89e3\uff08\u7b2c 14 \u7ae0\uff09\u3002\u6700\u540e\uff0c\u6211\u4eec\u4f1a\u8ba8\u8bba\u5982\u4f55\u5c06 Go \u8bed\u8a00\u5e94\u7528\u5230\u5206\u5e03\u5f0f\u548c Web \u5e94\u7528\u4e2d\u7684\u76f8\u5173\u7f51\u7edc\u6280\u5de7\uff08\u7b2c 15 \u7ae0\uff09\u3002 \u6211\u4eec\u4f1a\u5728\u672c\u4e66\u7684\u7b2c\u56db\u90e8\u5206\u5411\u4f60\u5c55\u793a\u8bb8\u591a Go \u8bed\u8a00\u7684\u5f00\u53d1\u6a21\u5f0f\u548c\u4e00\u4e9b\u7f16\u7801\u89c4\u8303\uff0c\u4ee5\u53ca\u4e00\u4e9b\u975e\u5e38\u6709\u7528\u7684\u4ee3\u7801\u7247\u6bb5\uff08\u7b2c 18 \u7ae0\uff09\u3002\u5728\u524d\u9762\u7ae0\u8282\u5b8c\u6210\u5bf9\u6240\u6709\u7684 Go \u8bed\u8a00\u6280\u5de7\u7684\u5b66\u4e60\u4e4b\u540e\uff0c\u4f60\u5c06\u4f1a\u5b66\u4e60\u5982\u4f55\u6784\u9020\u4e00\u4e2a\u5b8c\u6574 Go \u8bed\u8a00\u9879\u76ee\uff08\u7b2c 19 \u7ae0\uff09\uff0c\u7136\u540e\u6211\u4eec\u4f1a\u4ecb\u7ecd\u4e00\u4e9b\u5173\u4e8e Go \u8bed\u8a00\u5728\u4e91\uff08Google App Engine\uff09\u65b9\u9762\u7684\u5e94\u7528\uff08\u7b2c 20 \u7ae0\uff09\u3002\u5728\u672c\u4e66\u7684\u6700\u540e\u4e00\u7ae0\uff08\u7b2c 21 \u7ae0\uff09\uff0c\u6211\u4eec\u4f1a\u8ba8\u8bba\u4e00\u4e9b\u5728\u5168\u4e16\u754c\u8303\u56f4\u5185\u5df2\u7ecf\u5c06 Go \u8bed\u8a00\u6295\u5165\u5b9e\u9645\u5f00\u53d1\u7684\u516c\u53f8\u548c\u7ec4\u7ec7\u3002\u672c\u4e66\u5c06\u4f1a\u5728\u6700\u540e\u7ed9\u51fa\u4e00\u4e9b\u5bf9 Go \u8bed\u8a00\u7231\u597d\u8005\u7684\u5f15\u7528\uff0cGo \u76f8\u5173\u5305\u548c\u5de5\u5177\u7684\u53c2\u8003\uff0c\u4ee5\u53ca\u7ae0\u8282\u7ec3\u4e60\u7684\u7b54\u6848\u548c\u6240\u6709\u53c2\u8003\u8d44\u6e90\u548c\u6587\u732e\u7684\u6e05\u5355\u3002 Go \u8bed\u8a00\u6709\u4e00\u4e2a\u88ab\u79f0\u4e4b\u4e3a \u201c\u6ca1\u6709\u5e9f\u7269\u201d \u7684\u5b97\u65e8\uff0c\u5c31\u662f\u5c06\u4e00\u5207\u6ca1\u6709\u5fc5\u8981\u7684\u4e1c\u897f\u90fd\u53bb\u6389\uff0c\u4e0d\u80fd\u53bb\u6389\u7684\u5c31\u65e0\u5e95\u7ebf\u5730\u7b80\u5316\uff0c\u540c\u65f6\u8ffd\u6c42\u6700\u5927\u7a0b\u5ea6\u7684\u81ea\u52a8\u5316\u3002\u4ed6\u5b8c\u7f8e\u5730\u8be0\u91ca\u4e86\u654f\u6377\u7f16\u7a0b\u7684 KISS \u79d8\u8bc0\uff1a\u77ed\u5c0f\u7cbe\u608d\uff01 Go \u8bed\u8a00\u901a\u8fc7\u6539\u5584\u6216\u53bb\u9664\u5728 C\u3001C++ \u6216 Java \u4e2d\u7684\u4e00\u4e9b\u6240\u8c13\u201c\u5f00\u653e\u201d\u7279\u6027\u6765\u8ba9\u5f00\u53d1\u8005\u4eec\u7684\u5de5\u4f5c\u66f4\u52a0\u4fbf\u5229\u3002\u8fd9\u91cc\u53ea\u4e3e\u4f8b\u5176\u4e2d\u7684\u51e0\u4e2a\uff0c\u6bd4\u5982\u5bf9\u4e8e\u53d8\u91cf\u7684\u9ed8\u8ba4\u521d\u59cb\u5316\uff0c\u5185\u5b58\u5206\u914d\u4e0e\u81ea\u52a8\u56de\u6536\uff0c\u4ee5\u53ca\u66f4\u7b80\u6d01\u5374\u4e0d\u5931\u5065\u58ee\u7684\u63a7\u5236\u7ed3\u6784\u3002\u540c\u65f6\u6211\u4eec\u4e5f\u4f1a\u53d1\u73b0 Go \u8bed\u8a00\u65e8\u5728\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u7f16\u7801\u5de5\u4f5c\uff0c\u8fd9\u4f7f\u5f97 Go \u8bed\u8a00\u7684\u4ee3\u7801\u66f4\u52a0\u7b80\u6d01\uff0c\u4ece\u800c\u6bd4\u4f20\u7edf\u7684\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u66f4\u5bb9\u6613\u9605\u8bfb\u548c\u7406\u89e3\u3002 \u4e0e C++ \u6216 Java \u8fd9\u4e9b\u6709\u7740\u5e9e\u5927\u4f53\u7cfb\u7684\u8bed\u8a00\u76f8\u6bd4\uff0cGo \u8bed\u8a00\u7b80\u6d01\u5230\u53ef\u4ee5\u5c06\u5b83\u6574\u4e2a\u7684\u88c5\u5165\u4f60\u7684\u5927\u8111\u4e2d\uff0c\u800c\u4e14\u6bd4\u5b66\u4e60 Scala\uff08Java \u7684\u5e76\u53d1\u8bed\u8a00\uff09\u6709\u66f4\u4f4e\u7684\u95e8\u69db\uff0c\u771f\u53ef\u8c13\u662f 21 \u4e16\u7eaa\u7684 C \u8bed\u8a00\uff01 \u4f5c\u4e3a\u4e00\u95e8\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\uff0c\u4f60\u4e0d\u5e94\u8be5\u4e3a Go \u8bed\u8a00\u7684\u5927\u591a\u6570\u4ee3\u7801\u793a\u4f8b\u548c\u7ec3\u4e60\u90fd\u548c\u63a7\u5236\u53f0\u6709\u7740\u5bc6\u4e0d\u53ef\u5206\u7684\u5173\u7cfb\u800c\u611f\u5230\u60ca\u5947\uff0c\u56e0\u4e3a\u63d0\u4f9b\u5e73\u53f0\u4f9d\u8d56\u6027\u7684 GUI\uff08\u7528\u6237\u754c\u9762\uff09\u6846\u67b6\u5e76\u4e0d\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4efb\u52a1\u3002\u6709\u8bb8\u591a\u7531\u7b2c\u4e09\u65b9\u53d1\u8d77\u7684 GUI \u6846\u67b6\u9879\u76ee\u6b63\u5728\u5982\u706b\u5982\u837c\u5730\u8fdb\u884c\u4e2d\uff0c\u6216\u8bb8\u6211\u4eec\u4f1a\u5728\u4e0d\u4e45\u7684\u5c06\u6765\u770b\u5230\u4e00\u4e9b\u53ef\u7528\u7684 Go \u8bed\u8a00 GUI \u6846\u67b6\u3002\u4e0d\u8fc7\u73b0\u9636\u6bb5\u7684 Go \u8bed\u8a00\u5df2\u7ecf\u63d0\u4f9b\u4e86\u5927\u91cf\u6709\u5173 Web \u65b9\u9762\u7684\u529f\u80fd\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b83\u5f3a\u5927\u7684 http \u548c template \u5305\u6765\u8fbe\u5230 Web \u5e94\u7528\u7684 GUI \u5b9e\u73b0\u3002 \u6211\u4eec\u4f1a\u7ecf\u5e38\u6d89\u53ca\u5230\u4e00\u4e9b\u5173\u4e8e Go \u8bed\u8a00\u7684\u7f16\u7801\u89c4\u8303\uff0c\u4e86\u89e3\u548c\u4f7f\u7528\u8fd9\u4e9b\u5df2\u7ecf\u88ab\u5e7f\u6cdb\u8ba4\u540c\u7684\u89c4\u8303\u5e94\u8be5\u662f\u4f60\u5b66\u4e60\u9636\u6bb5\u6700\u91cd\u8981\u7684\u5b9e\u8df5\u3002\u6211\u4f1a\u5728\u4e66\u4e2d\u5c3d\u91cf\u4f7f\u7528\u5df2\u7ecf\u8bb2\u89e3\u7684\u6982\u5ff5\u6216\u8005\u6280\u5de7\u6765\u89e3\u91ca\u76f8\u5173\u7684\u4ee3\u7801\u793a\u4f8b\uff0c\u4ee5\u907f\u514d\u4f60\u5728\u4e0d\u4e86\u89e3\u67d0\u4e9b\u9ad8\u7ea7\u6982\u5ff5\u7684\u60c5\u51b5\u4e0b\u800c\u611f\u5230\u8ff7\u832b\u3002 \u6211\u4eec\u901a\u8fc7 227 \u4e2a\u5b8c\u6574\u7684\u4ee3\u7801\u793a\u4f8b\u548c\u4e66\u4e2d\u7684\u89e3\u91ca\u8bf4\u660e\u6765\u5bf9\u6240\u6709\u6d89\u53ca\u5230\u7684\u6982\u5ff5\u548c\u6280\u5de7\u8fdb\u884c\u5f7b\u5e95\u7684\u8bb2\u89e3\uff0c\u4f60\u53ef\u4ee5\u4e0b\u8f7d\u8fd9\u4e9b\u4ee3\u7801\u5230\u4f60\u7684\u7535\u8111\u4e0a\u8fd0\u884c\uff0c\u4ece\u800c\u52a0\u6df1\u5bf9\u6982\u5ff5\u7684\u7406\u89e3\u3002 \u672c\u4e66\u4f1a\u5c3d\u53ef\u80fd\u5730\u5c06\u524d\u540e\u7ae0\u8282\u7684\u5185\u5bb9\u8054\u7cfb\u8d77\u6765\uff0c\u5f53\u7136\u8fd9\u4e5f\u540c\u65f6\u8981\u6c42\u4f60\u901a\u8fc7\u5b66\u4e60\u4e0d\u540c\u7684\u77e5\u8bc6\u6765\u5bf9\u4e00\u4e2a\u95ee\u9898\u63d0\u51fa\u5c3d\u53ef\u80fd\u591a\u7684\u89e3\u51b3\u65b9\u6848\u3002\u8bb0\u4f4f\uff0c\u5b66\u4e60\u4e00\u95e8\u65b0\u8bed\u8a00\u7684\u6700\u4f73\u65b9\u5f0f\u5c31\u662f\u5b9e\u8df5\uff0c\u8fd0\u884c\u5b83\u7684\u4ee3\u7801\uff0c\u4fee\u6539\u5e76\u5c1d\u8bd5\u66f4\u591a\u7684\u65b9\u6848\u3002\u56e0\u6b64\uff0c\u4f60\u7edd\u5bf9\u4e0d\u53ef\u4ee5\u5ffd\u7565\u4e66\u4e2d\u7684 130 \u4e2a\u4ee3\u7801\u7ec3\u4e60\uff0c\u8fd9\u5c06\u5bf9\u4f60\u5b66\u4e60\u597d Go \u8bed\u8a00\u6709\u5f88\u5927\u7684\u5e2e\u52a9\u3002\u6bd4\u5982\uff0c\u6211\u4eec\u5c31\u4e3a\u6590\u6ce2\u90a3\u5951\u7b97\u6cd5\u63d0\u4f9b\u4e86 13 \u4e2a\u4e0d\u540c\u7684\u7248\u672c\uff0c\u800c\u8fd9\u4e9b\u7248\u672c\u90fd\u4f7f\u7528\u4e86\u4e0d\u540c\u7684\u6982\u5ff5\u548c\u6280\u5de7\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee\u672c\u4e66\u7684 \u5b98\u65b9\u7f51\u7ad9 \u4e0b\u8f7d\u4e66\u4e2d\u7684\u4ee3\u7801\uff08 \u8bd1\u8005\u6ce8\uff1a\u6240\u6709\u4ee3\u7801\u6587\u4ef6\u5df2\u7ecf\u5305\u62ec\u5728 GitHub \u4ed3\u5e93\u4e2d \uff09\uff0c\u5e76\u83b7\u5f97\u6709\u5173\u672c\u4e66\u7684\u52d8\u8bef\u60c5\u51b5\u548c\u5185\u5bb9\u66f4\u65b0\u3002 \u4e3a\u4e86\u8ba9\u4f60\u5728\u6210\u4e3a Go \u8bed\u8a00\u5927\u5e08\u7684\u9053\u8def\u4e0a\u66f4\u52a0\u987a\u5229\uff0c\u6211\u4eec\u4f1a\u4e13\u6ce8\u4e8e\u4e00\u4e9b\u7279\u522b\u7684\u7ae0\u8282\u4ee5\u63d0\u4f9b Go \u8bed\u8a00\u5f00\u53d1\u6a21\u5f0f\u7684\u6700\u4f73\u5b9e\u8df5\uff0c\u540c\u65f6\u4e5f\u4f1a\u5e2e\u52a9\u521d\u5b66\u8005\u9003\u79bb\u4e00\u4e9b\u8bed\u8a00\u7684\u9677\u9631\u3002\u7b2c 18 \u7ae0\u53ef\u4ee5\u4f5c\u4e3a\u4f60\u5728\u5f00\u53d1\u65f6\u7684\u4e00\u4e2a\u53c2\u8003\u624b\u518c\uff0c\u56e0\u4e3a\u5f53\u4e2d\u5305\u542b\u4e86\u4f17\u591a\u7684\u6709\u4ef7\u503c\u7684\u4ee3\u7801\u7247\u6bb5\u4ee5\u53ca\u76f8\u5173\u7684\u89e3\u91ca\u8bf4\u660e\u3002 \u6700\u540e\u8981\u8bf4\u660e\u7684\u662f\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5b8c\u6574\u7684\u7d22\u5f15\u6765\u5feb\u901f\u5b9a\u4f4d\u4f60\u9700\u8981\u9605\u8bfb\u7684\u7ae0\u8282\u3002\u4e66\u4e2d\u6240\u6709\u7684\u4ee3\u7801\u90fd\u5728 Go1.4 \u7248\u672c\u4e0b\u6d4b\u8bd5\u901a\u8fc7\u3002 \u8fd9\u91cc\u6709\u4e00\u6bb5\u6765\u81ea\u5728 C++\u3001Java \u548c Python \u9886\u57df\u4f17\u6240\u5468\u77e5\u7684\u4e13\u5bb6 Bruce Eckel \u7684\u8bc4\u8bba\uff1a \u201c\u4f5c\u4e3a\u4e00\u4e2a\u6709\u7740 C/C++ \u80cc\u666f\u7684\u5f00\u53d1\u8005\uff0c\u6211\u5728\u4f7f\u7528 Go \u8bed\u8a00\u65f6\u4eff\u4f5b\u547c\u5438\u5230\u4e86\u65b0\u9c9c\u7a7a\u6c14\u4e00\u822c\uff0c\u4ee4\u4eba\u5fc3\u65f7\u795e\u6021\u3002\u6211\u8ba4\u4e3a\u4f7f\u7528 Go \u8bed\u8a00\u8fdb\u884c\u7cfb\u7edf\u7f16\u7a0b\u5f00\u53d1\u6bd4\u4f7f\u7528 C++ \u6709\u7740\u66f4\u663e\u8457\u7684\u4f18\u52bf\uff0c\u56e0\u4e3a\u5b83\u5728\u89e3\u51b3\u4e00\u4e9b\u5f88\u96be\u7528 C++ \u89e3\u51b3\u7684\u95ee\u9898\u7684\u540c\u65f6\uff0c\u8ba9\u6211\u7684\u5de5\u4f5c\u53d8\u5f97\u66f4\u52a0\u9ad8\u6548\u3002\u6211\u5e76\u4e0d\u662f\u8bf4 C++ \u7684\u5b58\u5728\u662f\u4e00\u4e2a\u9519\u8bef\uff0c\u76f8\u53cd\u5730\uff0c\u6211\u8ba4\u4e3a\u8fd9\u662f\u5386\u53f2\u53d1\u5c55\u7684\u5fc5\u7136\u7ed3\u679c\u3002\u5f53\u6211\u6df1\u9677\u5728 C \u8bed\u8a00\u8fd9\u95e8\u7565\u5fae\u6bd4\u6c47\u7f16\u8bed\u8a00\u597d\u4e00\u70b9\u7684\u6ce5\u6f6d\u65f6\uff0c\u6211\u575a\u4fe1\u4efb\u4f55\u8bed\u8a00\u7684\u6784\u9020\u90fd\u4e0d\u53ef\u80fd\u652f\u6301\u5927\u578b\u9879\u76ee\u7684\u5f00\u53d1\u3002\u50cf\u5783\u573e\u56de\u6536\u6216\u5e76\u53d1\u8bed\u8a00\u652f\u6301\u8fd9\u7c7b\u4e1c\u897f\uff0c\u5728\u5f53\u65f6\u90fd\u662f\u6781\u5176\u8352\u8c2c\u7684\u4e3b\u610f\uff0c\u6839\u672c\u6ca1\u6709\u4eba\u5728\u4e4e\u3002C++ \u5411\u5927\u578b\u9879\u76ee\u5f00\u53d1\u8fc8\u51fa\u4e86\u91cd\u8981\u7684\u7b2c\u4e00\u6b65\uff0c\u5e26\u9886\u6211\u4eec\u8d70\u8fdb\u8fd9\u4e2a\u5e7f\u88a4\u65e0\u57a0\u7684\u4e16\u754c\u3002\u5f88\u5e86\u5e78 Stroustrup \u505a\u4e86\u8ba9 C++ \u517c\u5bb9 C \u8bed\u8a00\u4ee5\u80fd\u591f\u8ba9\u5176\u7f16\u8bd1 C \u7a0b\u5e8f\u8fd9\u4e2a\u6b63\u786e\u7684\u51b3\u5b9a\u3002\u6211\u4eec\u5f53\u65f6\u9700\u8981 C++ \u7684\u51fa\u73b0\u3002\u201d \u201c\u4e4b\u540e\u6211\u4eec\u5b66\u5230\u4e86\u66f4\u591a\u3002\u6211\u4eec\u6beb\u65e0\u7591\u95ee\u5730\u63a5\u53d7\u4e86\u5783\u573e\u56de\u6536\uff0c\u5f02\u5e38\u5904\u7406\u548c\u865a\u62df\u673a\u8fd9\u4e9b\u5f53\u5e74\u4eba\u4eec\u8ba4\u4e3a\u53ea\u6709\u75af\u5b50\u624d\u4f1a\u60f3\u7684\u4e1c\u897f\u3002C++ \u7684\u590d\u6742\u7a0b\u5ea6\uff08\u65b0\u7248\u7684 C++ \u751a\u81f3\u66f4\u52a0\u590d\u6742\uff09\u6781\u5927\u7684\u5f71\u54cd\u4e86\u8f6f\u4ef6\u5f00\u53d1\u7684\u9ad8\u6548\u6027\uff0c\u8fd9\u4f7f\u5f97\u5b83\u518d\u4e5f\u4e0d\u518d\u9002\u5408\u8fd9\u4e2a\u65f6\u4ee3\u3002\u4eba\u4eec\u4e0d\u518d\u50cf\u8fc7\u5f80\u90a3\u6837\u8ba4\u540c\u5728 C++ \u4e2d\u517c\u5bb9\u4f7f\u7528 C \u8bed\u8a00\u7684\u65b9\u6cd5\uff0c\u8ba4\u4e3a\u8fd9\u4e9b\u5de5\u4f5c\u53ea\u662f\u5728\u6d6a\u8d39\u65f6\u95f4\uff0c\u727a\u7272\u4eba\u4eec\u7684\u52aa\u529b\u3002\u5c31\u5728\u6b64\u65f6\uff0cGo \u8bed\u8a00\u5df2\u7ecf\u6210\u529f\u5730\u89e3\u51b3\u4e86 C++ \u4e2d\u90a3\u4e9b\u672c\u6253\u7b97\u89e3\u51b3\u5374\u672a\u80fd\u89e3\u51b3\u7684\u5173\u952e\u95ee\u9898\u3002\u201d \u6211\u975e\u5e38\u60f3\u8981\u5411\u53d1\u660e\u8fd9\u95e8\u7cbe\u6e5b\u7684\u8bed\u8a00\u7684 Go \u5f00\u53d1\u56e2\u961f\u8868\u793a\u771f\u631a\u7684\u611f\u8c22\uff0c\u5c24\u5176\u662f\u56e2\u961f\u7684\u9886\u5bfc\u8005 Rob Pike\u3001Russ Cox \u548c Andrew Gerrand\uff0c\u4ed6\u4eec\u9610\u8ff0\u7684\u4f8b\u5b50\u548c\u8bf4\u660e\u90fd\u975e\u5e38\u7684\u5b8c\u7f8e\u3002\u540c\u65f6\uff0c\u6211\u8fd8\u8981\u611f\u8c22 Miek Gieben\u3001Frank Muller\u3001Ryanne Dolan \u548c Satish V.J. \u7ed9\u4e88\u6211\u5de8\u5927\u7684\u5e2e\u52a9\uff0c\u8fd8\u6709\u90a3\u4e9b golang-nuts \u90ae\u4ef6\u5217\u8868\u91cc\u7684\u6240\u6709\u7684\u6210\u5458\u3002 \u6b22\u8fce\u6765\u5230 Go \u8bed\u8a00\u5f00\u53d1\u7684\u5947\u5999\u4e16\u754c\uff01 \u94fe\u63a5 \u00b6 \u76ee\u5f55 \u4e0b\u4e00\u90e8\u5206: Go \u8bed\u8a00\u7684\u8d77\u6e90\uff0c\u53d1\u5c55\u4e0e\u666e\u53ca","title":"\u524d\u8a00"},{"location":"preface/#_1","text":"","title":"\u524d\u8a00"},{"location":"preface/#_2","text":"\u5bf9\u4e8e\u5b66\u4e60 Go \u7f16\u7a0b\u8bed\u8a00\u7684\u7231\u597d\u8005\u6765\u8bf4\uff0c\u8fd9\u672c\u4e66\u65e0\u7591\u662f\u6700\u9002\u5408\u4f60\u7684\u4e00\u672c\u4e66\u7c4d\uff0c\u8fd9\u91cc\u5305\u542b\u4e86\u5f53\u524d\u6700\u5168\u9762\u7684\u5b66\u4e60\u8d44\u6e90\u3002\u672c\u4e66\u901a\u8fc7\u5bf9\u5b98\u65b9\u7684\u5728\u7ebf\u6587\u6863\u3001\u540d\u4eba\u535a\u5ba2\u3001\u4e66\u7c4d\u3001\u76f8\u5173\u6587\u7ae0\u4ee5\u53ca\u6f14\u8bb2\u7684\u8d44\u6599\u6536\u96c6\u548c\u6574\u7406\uff0c\u5e76\u7ed3\u5408\u6211\u81ea\u8eab\u5728\u8f6f\u4ef6\u5de5\u7a0b\u3001\u7f16\u7a0b\u8bed\u8a00\u548c\u6570\u636e\u5e93\u5f00\u53d1\u7684\u6388\u8bfe\u7ecf\u9a8c\uff0c\u5c06\u8fd9\u4e9b\u96f6\u788e\u7684\u77e5\u8bc6\u70b9\u7ec4\u7ec7\u6210\u7cfb\u7edf\u5316\u7684\u6982\u5ff5\u548c\u6280\u672f\u5206\u7c7b\u6765\u8fdb\u884c\u8bb2\u89e3\u3002 \u968f\u7740\u8f6f\u4ef6\u89c4\u6a21\u7684\u4e0d\u65ad\u6269\u5927\uff0c\u8bf8\u591a\u7684\u5b66\u8005\u548c\u8c37\u6b4c\u7684\u5f00\u53d1\u8005\u4eec\u5728\u516c\u53f8\u5185\u90e8\u7684\u8f6f\u4ef6\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u5f00\u59cb\u7ecf\u5386\u5927\u91cf\u7684\u632b\u6298\uff0c\u5728\u8bf8\u591a\u95ee\u9898\u4e0a\u90fd\u4e0d\u80fd\u7ed9\u51fa\u4ee4\u4eba\u6ee1\u610f\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5c24\u5176\u662f\u5728\u4f7f\u7528 C++ \u6765\u5f00\u53d1\u5927\u578b\u7684\u670d\u52a1\u7aef\u8f6f\u4ef6\u65f6\uff0c\u60c5\u51b5\u66f4\u662f\u4e0d\u5bb9\u4e50\u89c2\u3002\u7531\u4e8e\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e00\u822c\u90fd\u662f\u975e\u5e38\u5de8\u5927\u7684\uff0c\u56e0\u6b64\u9700\u8981\u8017\u8d39\u5927\u91cf\u7684\u65f6\u95f4\u5728\u7f16\u8bd1\u8fd9\u4e9b\u6587\u4ef6\u4e0a\uff0c\u540c\u65f6\u7f16\u7a0b\u8bed\u8a00\u7684\u8bbe\u8ba1\u601d\u60f3\u4e5f\u5df2\u7ecf\u975e\u5e38\u9648\u65e7\uff0c\u8fd9\u4e9b\u60c5\u51b5\u90fd\u5145\u5206\u8bc1\u660e\u4e86\u73b0\u6709\u7684\u7f16\u7a0b\u8bed\u8a00\u5df2\u4e0d\u7b26\u5408\u65f6\u4e0b\u7684\u751f\u4ea7\u73af\u5883\u3002\u5c3d\u7ba1\u786c\u4ef6\u5728\u8fc7\u53bb\u7684\u51e0\u5341\u5e74\u4e2d\u6709\u4e86\u98de\u901f\u7684\u53d1\u5c55\uff0c\u4f46\u4eba\u4eec\u4f9d\u65e7\u6ca1\u6709\u627e\u5230\u673a\u4f1a\u53bb\u6539\u53d8 C++ \u5728\u8f6f\u4ef6\u5f00\u53d1\u7684\u91cd\u8981\u5730\u4f4d\uff0c\u5e76\u5728\u5b9e\u9645\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u5fcd\u53d7\u7740\u5b83\u6240\u5e26\u6765\u7684\u4ee4\u4eba\u5934\u75bc\u7684\u4e00\u4e9b\u95ee\u9898\u3002\u56e0\u6b64\u5b66\u8005\u4eec\u5750\u4e0b\u6765\u603b\u7ed3\u51fa\u4e86\u73b0\u5728\u751f\u4ea7\u73af\u5883\u4e0e\u8f6f\u4ef6\u5f00\u53d1\u4e4b\u95f4\u7684\u4e3b\u8981\u77db\u76fe\uff0c\u5e76\u5c1d\u8bd5\u8bbe\u8ba1\u4e00\u95e8\u5168\u65b0\u7684\u7f16\u7a0b\u8bed\u8a00\u6765\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002 \u4ee5\u4e0b\u5c31\u662f\u4ed6\u4eec\u8ba8\u8bba\u5f97\u51fa\u7684\u5bf9\u7f16\u7a0b\u8bed\u8a00\u7684\u8bbe\u8ba1\u8981\u6c42\uff1a \u80fd\u591f\u4ee5\u66f4\u5feb\u7684\u901f\u5ea6\u5f00\u53d1\u8f6f\u4ef6 \u5f00\u53d1\u51fa\u7684\u8f6f\u4ef6\u80fd\u591f\u5f88\u597d\u5730\u5728\u73b0\u4ee3\u7684\u591a\u6838\u8ba1\u7b97\u673a\u4e0a\u5de5\u4f5c \u5f00\u53d1\u51fa\u7684\u8f6f\u4ef6\u80fd\u591f\u5f88\u597d\u5730\u5728\u7f51\u7edc\u73af\u5883\u4e0b\u5de5\u4f5c \u4f7f\u4eba\u4eec\u80fd\u591f\u4eab\u53d7\u8f6f\u4ef6\u5f00\u53d1\u7684\u8fc7\u7a0b Go \u8bed\u8a00\u5c31\u5728\u8fd9\u6837\u7684\u73af\u5883\u4e0b\u8bde\u751f\u4e86\uff0c\u5b83\u8ba9\u4eba\u611f\u89c9\u50cf\u662f Python \u6216 Ruby \u8fd9\u6837\u7684\u52a8\u6001\u8bed\u8a00\uff0c\u4f46\u5374\u53c8\u62e5\u6709\u50cf C \u6216\u8005 Java \u8fd9\u7c7b\u8bed\u8a00\u7684\u9ad8\u6027\u80fd\u548c\u5b89\u5168\u6027\u3002 Go \u8bed\u8a00\u51fa\u73b0\u7684\u76ee\u7684\u662f\u5e0c\u671b\u5728\u7f16\u7a0b\u9886\u57df\u521b\u9020\u6700\u5b9e\u7528\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u8f6f\u4ef6\u5f00\u53d1\u3002\u5b83\u5e76\u4e0d\u662f\u8981\u7528\u5947\u602a\u7684\u8bed\u6cd5\u548c\u6666\u6da9\u96be\u61c2\u7684\u6982\u5ff5\u6765\u4ece\u6839\u672c\u4e0a\u63a8\u7ffb\u5df2\u6709\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u800c\u662f\u5efa\u7acb\u5e76\u6539\u5584\u4e86 C\u3001Java\u3001C# \u4e2d\u7684\u8bb8\u591a\u8bed\u6cd5\u98ce\u683c\u3002\u5b83\u63d0\u5021\u901a\u8fc7\u63a5\u53e3\u6765\u9488\u5bf9\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff0c\u901a\u8fc7 goroutine \u548c channel \u6765\u652f\u6301\u5e76\u53d1\u548c\u5e76\u884c\u7f16\u7a0b\u3002 \u8fd9\u672c\u4e66\u662f\u4e3a\u90a3\u4e9b\u60f3\u8981\u5b66\u4e60 Go \u8fd9\u95e8\u5168\u65b0\u7684\uff0c\u8ff7\u4eba\u7684\u548c\u5145\u6ee1\u5e0c\u671b\u7684\u7f16\u7a0b\u8bed\u8a00\u7684\u5f00\u53d1\u8005\u91cf\u8eab\u5b9a\u505a\u7684\u3002\u5f53\u7136\uff0c\u4f60\u5728\u5b66\u4e60 Go \u8bed\u8a00\u4e4b\u524d\u9700\u8981\u5177\u5907\u4e00\u4e9b\u5173\u4e8e\u7f16\u7a0b\u7684\u57fa\u7840\u77e5\u8bc6\u548c\u7ecf\u9a8c\uff0c\u5e76\u4e14\u62e5\u6709\u5408\u9002\u7684\u5b66\u4e60\u73af\u5883\uff0c\u4f46\u4f60\u5e76\u4e0d\u9700\u8981\u5bf9 C \u6216\u8005 Java \u6216\u5176\u5b83\u7c7b\u4f3c\u7684\u8bed\u8a00\u6709\u975e\u5e38\u6df1\u5165\u7684\u4e86\u89e3\u3002 \u5bf9\u4e8e\u90a3\u4e9b\u719f\u6089 C \u6216\u8005\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8bed\u8a00\u7684\u5f00\u53d1\u8005\uff0c\u6211\u4eec\u5c06\u4f1a\u5728\u672c\u4e66\u4e2d\u7528 Go \u548c\u4e00\u4e9b\u7f16\u7a0b\u8bed\u8a00\u7684\u76f8\u5173\u6982\u5ff5\u8fdb\u884c\u6bd4\u8f83\uff08\u4e66\u4e2d\u4f1a\u4f7f\u7528\u5927\u5bb6\u6240\u719f\u77e5\u7684\u7f29\u5199 \u201cOO\u201d \u6765\u8868\u793a\u9762\u5411\u5bf9\u8c61\uff09\u3002 \u672c\u4e66\u5c06\u4f1a\u4ece\u6700\u57fa\u7840\u7684\u6982\u5ff5\u8bb2\u8d77\uff0c\u540c\u65f6\u4e5f\u4f1a\u8ba8\u8bba\u4e00\u4e9b\u7c7b\u4f3c\u5728\u5e94\u7528 goroutine \u548c channel \u65f6\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u6a21\u5f0f\uff0c\u5982\u4f55\u5728 Go \u8bed\u8a00\u4e2d\u4f7f\u7528\u8c37\u6b4c API\uff0c\u5982\u4f55\u64cd\u4f5c\u5185\u5b58\uff0c\u5982\u4f55\u5728 Go \u8bed\u8a00\u4e2d\u8fdb\u884c\u7a0b\u5e8f\u6d4b\u8bd5\u548c\u5982\u4f55\u4f7f\u7528\u6a21\u677f\u6765\u5f00\u53d1 Web \u5e94\u7528\u8fd9\u4e9b\u9ad8\u7ea7\u6982\u5ff5\u548c\u6280\u5de7\u3002 \u5728\u672c\u4e66\u7684\u7b2c\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u4f1a\u8ba8\u8bba Go \u8bed\u8a00\u7684\u8d77\u6e90\uff08\u7b2c 1 \u7ae0\uff09\uff0c\u4ee5\u53ca\u5982\u4f55\u5b89\u88c5 Go \u8bed\u8a00\uff08\u7b2c 2 \u7ae0\uff09\u548c\u5f00\u53d1\u73af\u5883\uff08\u7b2c 3 \u7ae0\uff09\u3002 \u5728\u672c\u4e66\u7684\u7b2c\u4e8c\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u4f1a\u5e26\u9886\u4f60\u8d2f\u7a7f Go \u8bed\u8a00\u7684\u6838\u5fc3\u601d\u60f3\uff0c\u8b6c\u5982\u7b80\u5355\u4e0e\u590d\u6742\u7c7b\u578b\uff08\u7b2c 4\u30017\u30018 \u7ae0\uff09\uff0c\u63a7\u5236\u7ed3\u6784\uff08\u7b2c 5 \u7ae0\uff09\uff0c\u51fd\u6570\uff08\u7b2c 6 \u7ae0\uff09\uff0c\u7ed3\u6784\u4e0e\u65b9\u6cd5\uff08\u7b2c 10 \u7ae0\uff09\u548c\u63a5\u53e3\uff08\u7b2c 11 \u7ae0\uff09\u3002\u6211\u4eec\u4f1a\u5bf9 Go \u8bed\u8a00\u7684\u51fd\u6570\u5f0f\u548c\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8fdb\u884c\u900f\u5f7b\u7684\u8bb2\u89e3\uff0c\u5305\u62ec\u5982\u4f55\u4f7f\u7528 Go \u8bed\u8a00\u6765\u6784\u9020\u5927\u578b\u9879\u76ee\uff08\u7b2c 9 \u7ae0\uff09\u3002 \u5728\u672c\u4e66\u7684\u7b2c\u4e09\u90e8\u5206\uff0c\u4f60\u5c06\u4f1a\u5b66\u4e60\u5230\u5982\u4f55\u5904\u7406\u4e0d\u540c\u683c\u5f0f\u7684\u6587\u4ef6\uff08\u7b2c 12 \u7ae0\uff09\u548c\u5982\u4f55\u5728 Go \u8bed\u8a00\u4e2d\u5de7\u5999\u5730\u4f7f\u7528\u9519\u8bef\u5904\u7406\u673a\u5236\uff08\u7b2c 13 \u7ae0\uff09\u3002\u7136\u540e\u6211\u4eec\u4f1a\u5bf9 Go \u8bed\u8a00\u4e2d\u6700\u503c\u5f97\u79f0\u8d5e\u7684\u8bbe\u8ba1 goroutine \u548c channel \u8fdb\u884c\u5e76\u53d1\u548c\u591a\u6838\u5e94\u7528\u7684\u57fa\u672c\u6280\u5de7\u7684\u8bb2\u89e3\uff08\u7b2c 14 \u7ae0\uff09\u3002\u6700\u540e\uff0c\u6211\u4eec\u4f1a\u8ba8\u8bba\u5982\u4f55\u5c06 Go \u8bed\u8a00\u5e94\u7528\u5230\u5206\u5e03\u5f0f\u548c Web \u5e94\u7528\u4e2d\u7684\u76f8\u5173\u7f51\u7edc\u6280\u5de7\uff08\u7b2c 15 \u7ae0\uff09\u3002 \u6211\u4eec\u4f1a\u5728\u672c\u4e66\u7684\u7b2c\u56db\u90e8\u5206\u5411\u4f60\u5c55\u793a\u8bb8\u591a Go \u8bed\u8a00\u7684\u5f00\u53d1\u6a21\u5f0f\u548c\u4e00\u4e9b\u7f16\u7801\u89c4\u8303\uff0c\u4ee5\u53ca\u4e00\u4e9b\u975e\u5e38\u6709\u7528\u7684\u4ee3\u7801\u7247\u6bb5\uff08\u7b2c 18 \u7ae0\uff09\u3002\u5728\u524d\u9762\u7ae0\u8282\u5b8c\u6210\u5bf9\u6240\u6709\u7684 Go \u8bed\u8a00\u6280\u5de7\u7684\u5b66\u4e60\u4e4b\u540e\uff0c\u4f60\u5c06\u4f1a\u5b66\u4e60\u5982\u4f55\u6784\u9020\u4e00\u4e2a\u5b8c\u6574 Go \u8bed\u8a00\u9879\u76ee\uff08\u7b2c 19 \u7ae0\uff09\uff0c\u7136\u540e\u6211\u4eec\u4f1a\u4ecb\u7ecd\u4e00\u4e9b\u5173\u4e8e Go \u8bed\u8a00\u5728\u4e91\uff08Google App Engine\uff09\u65b9\u9762\u7684\u5e94\u7528\uff08\u7b2c 20 \u7ae0\uff09\u3002\u5728\u672c\u4e66\u7684\u6700\u540e\u4e00\u7ae0\uff08\u7b2c 21 \u7ae0\uff09\uff0c\u6211\u4eec\u4f1a\u8ba8\u8bba\u4e00\u4e9b\u5728\u5168\u4e16\u754c\u8303\u56f4\u5185\u5df2\u7ecf\u5c06 Go \u8bed\u8a00\u6295\u5165\u5b9e\u9645\u5f00\u53d1\u7684\u516c\u53f8\u548c\u7ec4\u7ec7\u3002\u672c\u4e66\u5c06\u4f1a\u5728\u6700\u540e\u7ed9\u51fa\u4e00\u4e9b\u5bf9 Go \u8bed\u8a00\u7231\u597d\u8005\u7684\u5f15\u7528\uff0cGo \u76f8\u5173\u5305\u548c\u5de5\u5177\u7684\u53c2\u8003\uff0c\u4ee5\u53ca\u7ae0\u8282\u7ec3\u4e60\u7684\u7b54\u6848\u548c\u6240\u6709\u53c2\u8003\u8d44\u6e90\u548c\u6587\u732e\u7684\u6e05\u5355\u3002 Go \u8bed\u8a00\u6709\u4e00\u4e2a\u88ab\u79f0\u4e4b\u4e3a \u201c\u6ca1\u6709\u5e9f\u7269\u201d \u7684\u5b97\u65e8\uff0c\u5c31\u662f\u5c06\u4e00\u5207\u6ca1\u6709\u5fc5\u8981\u7684\u4e1c\u897f\u90fd\u53bb\u6389\uff0c\u4e0d\u80fd\u53bb\u6389\u7684\u5c31\u65e0\u5e95\u7ebf\u5730\u7b80\u5316\uff0c\u540c\u65f6\u8ffd\u6c42\u6700\u5927\u7a0b\u5ea6\u7684\u81ea\u52a8\u5316\u3002\u4ed6\u5b8c\u7f8e\u5730\u8be0\u91ca\u4e86\u654f\u6377\u7f16\u7a0b\u7684 KISS \u79d8\u8bc0\uff1a\u77ed\u5c0f\u7cbe\u608d\uff01 Go \u8bed\u8a00\u901a\u8fc7\u6539\u5584\u6216\u53bb\u9664\u5728 C\u3001C++ \u6216 Java \u4e2d\u7684\u4e00\u4e9b\u6240\u8c13\u201c\u5f00\u653e\u201d\u7279\u6027\u6765\u8ba9\u5f00\u53d1\u8005\u4eec\u7684\u5de5\u4f5c\u66f4\u52a0\u4fbf\u5229\u3002\u8fd9\u91cc\u53ea\u4e3e\u4f8b\u5176\u4e2d\u7684\u51e0\u4e2a\uff0c\u6bd4\u5982\u5bf9\u4e8e\u53d8\u91cf\u7684\u9ed8\u8ba4\u521d\u59cb\u5316\uff0c\u5185\u5b58\u5206\u914d\u4e0e\u81ea\u52a8\u56de\u6536\uff0c\u4ee5\u53ca\u66f4\u7b80\u6d01\u5374\u4e0d\u5931\u5065\u58ee\u7684\u63a7\u5236\u7ed3\u6784\u3002\u540c\u65f6\u6211\u4eec\u4e5f\u4f1a\u53d1\u73b0 Go \u8bed\u8a00\u65e8\u5728\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u7f16\u7801\u5de5\u4f5c\uff0c\u8fd9\u4f7f\u5f97 Go \u8bed\u8a00\u7684\u4ee3\u7801\u66f4\u52a0\u7b80\u6d01\uff0c\u4ece\u800c\u6bd4\u4f20\u7edf\u7684\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u66f4\u5bb9\u6613\u9605\u8bfb\u548c\u7406\u89e3\u3002 \u4e0e C++ \u6216 Java \u8fd9\u4e9b\u6709\u7740\u5e9e\u5927\u4f53\u7cfb\u7684\u8bed\u8a00\u76f8\u6bd4\uff0cGo \u8bed\u8a00\u7b80\u6d01\u5230\u53ef\u4ee5\u5c06\u5b83\u6574\u4e2a\u7684\u88c5\u5165\u4f60\u7684\u5927\u8111\u4e2d\uff0c\u800c\u4e14\u6bd4\u5b66\u4e60 Scala\uff08Java \u7684\u5e76\u53d1\u8bed\u8a00\uff09\u6709\u66f4\u4f4e\u7684\u95e8\u69db\uff0c\u771f\u53ef\u8c13\u662f 21 \u4e16\u7eaa\u7684 C \u8bed\u8a00\uff01 \u4f5c\u4e3a\u4e00\u95e8\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\uff0c\u4f60\u4e0d\u5e94\u8be5\u4e3a Go \u8bed\u8a00\u7684\u5927\u591a\u6570\u4ee3\u7801\u793a\u4f8b\u548c\u7ec3\u4e60\u90fd\u548c\u63a7\u5236\u53f0\u6709\u7740\u5bc6\u4e0d\u53ef\u5206\u7684\u5173\u7cfb\u800c\u611f\u5230\u60ca\u5947\uff0c\u56e0\u4e3a\u63d0\u4f9b\u5e73\u53f0\u4f9d\u8d56\u6027\u7684 GUI\uff08\u7528\u6237\u754c\u9762\uff09\u6846\u67b6\u5e76\u4e0d\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4efb\u52a1\u3002\u6709\u8bb8\u591a\u7531\u7b2c\u4e09\u65b9\u53d1\u8d77\u7684 GUI \u6846\u67b6\u9879\u76ee\u6b63\u5728\u5982\u706b\u5982\u837c\u5730\u8fdb\u884c\u4e2d\uff0c\u6216\u8bb8\u6211\u4eec\u4f1a\u5728\u4e0d\u4e45\u7684\u5c06\u6765\u770b\u5230\u4e00\u4e9b\u53ef\u7528\u7684 Go \u8bed\u8a00 GUI \u6846\u67b6\u3002\u4e0d\u8fc7\u73b0\u9636\u6bb5\u7684 Go \u8bed\u8a00\u5df2\u7ecf\u63d0\u4f9b\u4e86\u5927\u91cf\u6709\u5173 Web \u65b9\u9762\u7684\u529f\u80fd\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b83\u5f3a\u5927\u7684 http \u548c template \u5305\u6765\u8fbe\u5230 Web \u5e94\u7528\u7684 GUI \u5b9e\u73b0\u3002 \u6211\u4eec\u4f1a\u7ecf\u5e38\u6d89\u53ca\u5230\u4e00\u4e9b\u5173\u4e8e Go \u8bed\u8a00\u7684\u7f16\u7801\u89c4\u8303\uff0c\u4e86\u89e3\u548c\u4f7f\u7528\u8fd9\u4e9b\u5df2\u7ecf\u88ab\u5e7f\u6cdb\u8ba4\u540c\u7684\u89c4\u8303\u5e94\u8be5\u662f\u4f60\u5b66\u4e60\u9636\u6bb5\u6700\u91cd\u8981\u7684\u5b9e\u8df5\u3002\u6211\u4f1a\u5728\u4e66\u4e2d\u5c3d\u91cf\u4f7f\u7528\u5df2\u7ecf\u8bb2\u89e3\u7684\u6982\u5ff5\u6216\u8005\u6280\u5de7\u6765\u89e3\u91ca\u76f8\u5173\u7684\u4ee3\u7801\u793a\u4f8b\uff0c\u4ee5\u907f\u514d\u4f60\u5728\u4e0d\u4e86\u89e3\u67d0\u4e9b\u9ad8\u7ea7\u6982\u5ff5\u7684\u60c5\u51b5\u4e0b\u800c\u611f\u5230\u8ff7\u832b\u3002 \u6211\u4eec\u901a\u8fc7 227 \u4e2a\u5b8c\u6574\u7684\u4ee3\u7801\u793a\u4f8b\u548c\u4e66\u4e2d\u7684\u89e3\u91ca\u8bf4\u660e\u6765\u5bf9\u6240\u6709\u6d89\u53ca\u5230\u7684\u6982\u5ff5\u548c\u6280\u5de7\u8fdb\u884c\u5f7b\u5e95\u7684\u8bb2\u89e3\uff0c\u4f60\u53ef\u4ee5\u4e0b\u8f7d\u8fd9\u4e9b\u4ee3\u7801\u5230\u4f60\u7684\u7535\u8111\u4e0a\u8fd0\u884c\uff0c\u4ece\u800c\u52a0\u6df1\u5bf9\u6982\u5ff5\u7684\u7406\u89e3\u3002 \u672c\u4e66\u4f1a\u5c3d\u53ef\u80fd\u5730\u5c06\u524d\u540e\u7ae0\u8282\u7684\u5185\u5bb9\u8054\u7cfb\u8d77\u6765\uff0c\u5f53\u7136\u8fd9\u4e5f\u540c\u65f6\u8981\u6c42\u4f60\u901a\u8fc7\u5b66\u4e60\u4e0d\u540c\u7684\u77e5\u8bc6\u6765\u5bf9\u4e00\u4e2a\u95ee\u9898\u63d0\u51fa\u5c3d\u53ef\u80fd\u591a\u7684\u89e3\u51b3\u65b9\u6848\u3002\u8bb0\u4f4f\uff0c\u5b66\u4e60\u4e00\u95e8\u65b0\u8bed\u8a00\u7684\u6700\u4f73\u65b9\u5f0f\u5c31\u662f\u5b9e\u8df5\uff0c\u8fd0\u884c\u5b83\u7684\u4ee3\u7801\uff0c\u4fee\u6539\u5e76\u5c1d\u8bd5\u66f4\u591a\u7684\u65b9\u6848\u3002\u56e0\u6b64\uff0c\u4f60\u7edd\u5bf9\u4e0d\u53ef\u4ee5\u5ffd\u7565\u4e66\u4e2d\u7684 130 \u4e2a\u4ee3\u7801\u7ec3\u4e60\uff0c\u8fd9\u5c06\u5bf9\u4f60\u5b66\u4e60\u597d Go \u8bed\u8a00\u6709\u5f88\u5927\u7684\u5e2e\u52a9\u3002\u6bd4\u5982\uff0c\u6211\u4eec\u5c31\u4e3a\u6590\u6ce2\u90a3\u5951\u7b97\u6cd5\u63d0\u4f9b\u4e86 13 \u4e2a\u4e0d\u540c\u7684\u7248\u672c\uff0c\u800c\u8fd9\u4e9b\u7248\u672c\u90fd\u4f7f\u7528\u4e86\u4e0d\u540c\u7684\u6982\u5ff5\u548c\u6280\u5de7\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee\u672c\u4e66\u7684 \u5b98\u65b9\u7f51\u7ad9 \u4e0b\u8f7d\u4e66\u4e2d\u7684\u4ee3\u7801\uff08 \u8bd1\u8005\u6ce8\uff1a\u6240\u6709\u4ee3\u7801\u6587\u4ef6\u5df2\u7ecf\u5305\u62ec\u5728 GitHub \u4ed3\u5e93\u4e2d \uff09\uff0c\u5e76\u83b7\u5f97\u6709\u5173\u672c\u4e66\u7684\u52d8\u8bef\u60c5\u51b5\u548c\u5185\u5bb9\u66f4\u65b0\u3002 \u4e3a\u4e86\u8ba9\u4f60\u5728\u6210\u4e3a Go \u8bed\u8a00\u5927\u5e08\u7684\u9053\u8def\u4e0a\u66f4\u52a0\u987a\u5229\uff0c\u6211\u4eec\u4f1a\u4e13\u6ce8\u4e8e\u4e00\u4e9b\u7279\u522b\u7684\u7ae0\u8282\u4ee5\u63d0\u4f9b Go \u8bed\u8a00\u5f00\u53d1\u6a21\u5f0f\u7684\u6700\u4f73\u5b9e\u8df5\uff0c\u540c\u65f6\u4e5f\u4f1a\u5e2e\u52a9\u521d\u5b66\u8005\u9003\u79bb\u4e00\u4e9b\u8bed\u8a00\u7684\u9677\u9631\u3002\u7b2c 18 \u7ae0\u53ef\u4ee5\u4f5c\u4e3a\u4f60\u5728\u5f00\u53d1\u65f6\u7684\u4e00\u4e2a\u53c2\u8003\u624b\u518c\uff0c\u56e0\u4e3a\u5f53\u4e2d\u5305\u542b\u4e86\u4f17\u591a\u7684\u6709\u4ef7\u503c\u7684\u4ee3\u7801\u7247\u6bb5\u4ee5\u53ca\u76f8\u5173\u7684\u89e3\u91ca\u8bf4\u660e\u3002 \u6700\u540e\u8981\u8bf4\u660e\u7684\u662f\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5b8c\u6574\u7684\u7d22\u5f15\u6765\u5feb\u901f\u5b9a\u4f4d\u4f60\u9700\u8981\u9605\u8bfb\u7684\u7ae0\u8282\u3002\u4e66\u4e2d\u6240\u6709\u7684\u4ee3\u7801\u90fd\u5728 Go1.4 \u7248\u672c\u4e0b\u6d4b\u8bd5\u901a\u8fc7\u3002 \u8fd9\u91cc\u6709\u4e00\u6bb5\u6765\u81ea\u5728 C++\u3001Java \u548c Python \u9886\u57df\u4f17\u6240\u5468\u77e5\u7684\u4e13\u5bb6 Bruce Eckel \u7684\u8bc4\u8bba\uff1a \u201c\u4f5c\u4e3a\u4e00\u4e2a\u6709\u7740 C/C++ \u80cc\u666f\u7684\u5f00\u53d1\u8005\uff0c\u6211\u5728\u4f7f\u7528 Go \u8bed\u8a00\u65f6\u4eff\u4f5b\u547c\u5438\u5230\u4e86\u65b0\u9c9c\u7a7a\u6c14\u4e00\u822c\uff0c\u4ee4\u4eba\u5fc3\u65f7\u795e\u6021\u3002\u6211\u8ba4\u4e3a\u4f7f\u7528 Go \u8bed\u8a00\u8fdb\u884c\u7cfb\u7edf\u7f16\u7a0b\u5f00\u53d1\u6bd4\u4f7f\u7528 C++ \u6709\u7740\u66f4\u663e\u8457\u7684\u4f18\u52bf\uff0c\u56e0\u4e3a\u5b83\u5728\u89e3\u51b3\u4e00\u4e9b\u5f88\u96be\u7528 C++ \u89e3\u51b3\u7684\u95ee\u9898\u7684\u540c\u65f6\uff0c\u8ba9\u6211\u7684\u5de5\u4f5c\u53d8\u5f97\u66f4\u52a0\u9ad8\u6548\u3002\u6211\u5e76\u4e0d\u662f\u8bf4 C++ \u7684\u5b58\u5728\u662f\u4e00\u4e2a\u9519\u8bef\uff0c\u76f8\u53cd\u5730\uff0c\u6211\u8ba4\u4e3a\u8fd9\u662f\u5386\u53f2\u53d1\u5c55\u7684\u5fc5\u7136\u7ed3\u679c\u3002\u5f53\u6211\u6df1\u9677\u5728 C \u8bed\u8a00\u8fd9\u95e8\u7565\u5fae\u6bd4\u6c47\u7f16\u8bed\u8a00\u597d\u4e00\u70b9\u7684\u6ce5\u6f6d\u65f6\uff0c\u6211\u575a\u4fe1\u4efb\u4f55\u8bed\u8a00\u7684\u6784\u9020\u90fd\u4e0d\u53ef\u80fd\u652f\u6301\u5927\u578b\u9879\u76ee\u7684\u5f00\u53d1\u3002\u50cf\u5783\u573e\u56de\u6536\u6216\u5e76\u53d1\u8bed\u8a00\u652f\u6301\u8fd9\u7c7b\u4e1c\u897f\uff0c\u5728\u5f53\u65f6\u90fd\u662f\u6781\u5176\u8352\u8c2c\u7684\u4e3b\u610f\uff0c\u6839\u672c\u6ca1\u6709\u4eba\u5728\u4e4e\u3002C++ \u5411\u5927\u578b\u9879\u76ee\u5f00\u53d1\u8fc8\u51fa\u4e86\u91cd\u8981\u7684\u7b2c\u4e00\u6b65\uff0c\u5e26\u9886\u6211\u4eec\u8d70\u8fdb\u8fd9\u4e2a\u5e7f\u88a4\u65e0\u57a0\u7684\u4e16\u754c\u3002\u5f88\u5e86\u5e78 Stroustrup \u505a\u4e86\u8ba9 C++ \u517c\u5bb9 C \u8bed\u8a00\u4ee5\u80fd\u591f\u8ba9\u5176\u7f16\u8bd1 C \u7a0b\u5e8f\u8fd9\u4e2a\u6b63\u786e\u7684\u51b3\u5b9a\u3002\u6211\u4eec\u5f53\u65f6\u9700\u8981 C++ \u7684\u51fa\u73b0\u3002\u201d \u201c\u4e4b\u540e\u6211\u4eec\u5b66\u5230\u4e86\u66f4\u591a\u3002\u6211\u4eec\u6beb\u65e0\u7591\u95ee\u5730\u63a5\u53d7\u4e86\u5783\u573e\u56de\u6536\uff0c\u5f02\u5e38\u5904\u7406\u548c\u865a\u62df\u673a\u8fd9\u4e9b\u5f53\u5e74\u4eba\u4eec\u8ba4\u4e3a\u53ea\u6709\u75af\u5b50\u624d\u4f1a\u60f3\u7684\u4e1c\u897f\u3002C++ \u7684\u590d\u6742\u7a0b\u5ea6\uff08\u65b0\u7248\u7684 C++ \u751a\u81f3\u66f4\u52a0\u590d\u6742\uff09\u6781\u5927\u7684\u5f71\u54cd\u4e86\u8f6f\u4ef6\u5f00\u53d1\u7684\u9ad8\u6548\u6027\uff0c\u8fd9\u4f7f\u5f97\u5b83\u518d\u4e5f\u4e0d\u518d\u9002\u5408\u8fd9\u4e2a\u65f6\u4ee3\u3002\u4eba\u4eec\u4e0d\u518d\u50cf\u8fc7\u5f80\u90a3\u6837\u8ba4\u540c\u5728 C++ \u4e2d\u517c\u5bb9\u4f7f\u7528 C \u8bed\u8a00\u7684\u65b9\u6cd5\uff0c\u8ba4\u4e3a\u8fd9\u4e9b\u5de5\u4f5c\u53ea\u662f\u5728\u6d6a\u8d39\u65f6\u95f4\uff0c\u727a\u7272\u4eba\u4eec\u7684\u52aa\u529b\u3002\u5c31\u5728\u6b64\u65f6\uff0cGo \u8bed\u8a00\u5df2\u7ecf\u6210\u529f\u5730\u89e3\u51b3\u4e86 C++ \u4e2d\u90a3\u4e9b\u672c\u6253\u7b97\u89e3\u51b3\u5374\u672a\u80fd\u89e3\u51b3\u7684\u5173\u952e\u95ee\u9898\u3002\u201d \u6211\u975e\u5e38\u60f3\u8981\u5411\u53d1\u660e\u8fd9\u95e8\u7cbe\u6e5b\u7684\u8bed\u8a00\u7684 Go \u5f00\u53d1\u56e2\u961f\u8868\u793a\u771f\u631a\u7684\u611f\u8c22\uff0c\u5c24\u5176\u662f\u56e2\u961f\u7684\u9886\u5bfc\u8005 Rob Pike\u3001Russ Cox \u548c Andrew Gerrand\uff0c\u4ed6\u4eec\u9610\u8ff0\u7684\u4f8b\u5b50\u548c\u8bf4\u660e\u90fd\u975e\u5e38\u7684\u5b8c\u7f8e\u3002\u540c\u65f6\uff0c\u6211\u8fd8\u8981\u611f\u8c22 Miek Gieben\u3001Frank Muller\u3001Ryanne Dolan \u548c Satish V.J. \u7ed9\u4e88\u6211\u5de8\u5927\u7684\u5e2e\u52a9\uff0c\u8fd8\u6709\u90a3\u4e9b golang-nuts \u90ae\u4ef6\u5217\u8868\u91cc\u7684\u6240\u6709\u7684\u6210\u5458\u3002 \u6b22\u8fce\u6765\u5230 Go \u8bed\u8a00\u5f00\u53d1\u7684\u5947\u5999\u4e16\u754c\uff01","title":"\u7528\u66f4\u5c11\u7684\u4ee3\u7801\uff0c\u66f4\u77ed\u7684\u7f16\u8bd1\u65f6\u95f4\uff0c\u521b\u5efa\u8fd0\u884c\u66f4\u5feb\u7684\u7a0b\u5e8f\uff0c\u4eab\u53d7\u66f4\u591a\u7684\u4e50\u8da3"},{"location":"preface/#_3","text":"\u76ee\u5f55 \u4e0b\u4e00\u90e8\u5206: Go \u8bed\u8a00\u7684\u8d77\u6e90\uff0c\u53d1\u5c55\u4e0e\u666e\u53ca","title":"\u94fe\u63a5"},{"location":"specimen/","text":"Cinder Theme Specimen Typography \u00b6 Typefaces \u00b6 Headers: Inter Body: Open Sans Code: Hack Body Copy \u00b6 You think water moves fast? You should see ice. It moves like it has a mind . Like it knows it killed the world once and got a taste for murder. After the avalanche, it took us a week to climb out . Now, I don't know exactly when we turned on each other, but I know that seven of us survived the slide... and only five made it out. Now we took an oath, that I'm breaking now. We said we'd say it was the snow that killed the other two, but it wasn't. Nature is lethal but it doesn't hold a candle to man. Like inline code? Here is a string for you 010101010 . Lead Body Copy \u00b6 Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus. Headings \u00b6 All HTML headings, <h1> through <h6> , are available. .h1 through .h6 classes are also available, for when you want to match the font styling of a heading but still want your text to be displayed inline. h1. Heading h2. Heading h3. Heading h4. Heading h5. Heading h6. Heading h1. Heading Secondary text h2. Heading Secondary text h3. Heading Secondary text h4. Heading Secondary text h5. Heading Secondary text h6. Heading Secondary text Blockquotes \u00b6 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante. Someone famous in Source Title Lists \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Horizontal Description Lists \u00b6 Something This is something SomethingElse This is something else Contextual Colors \u00b6 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante. Code \u00b6 Inline Code \u00b6 This is an example of inline code #import requests Preformatted Code Blocks with Syntax Highlighting def request(method, url, **kwargs): \"\"\"Constructs and sends a :class:`Request `. Usage:: >>> import requests >>> req = requests.request('GET', 'https://httpbin.org/get') \"\"\" # By using the 'with' statement we are sure the session is closed, thus we # avoid leaving sockets open which can trigger a ResourceWarning in some # cases, and look like a memory leak in others. with sessions.Session() as session: return session.request(method=method, url=url, **kwargs) def get(url, params=None, **kwargs): r\"\"\"Sends a GET request. :param url: URL for the new :class:`Request` object. :param params: (optional) Dictionary, list of tuples or bytes to send in the body of the :class:`Request`. :param \\*\\*kwargs: Optional arguments that ``request`` takes. :return: :class:`Response ` object :rtype: requests.Response \"\"\" kwargs.setdefault('allow_redirects', True) return request('get', url, params=params, **kwargs) (Source code sample from the Python requests library , Apache License, v2.0 ) Syntax highlighting support is available for and of the following languages listed on the highlightjs website . See the mkdocs \"styling your docs\" hljs_languages section for info on how to load languages dynamically. Note Include source code formatted in Github-flavored Markdown fenced code blocks with an info string that defines the supported programming language to automate syntax highlighting when your site is built. Tables \u00b6 Striped Table \u00b6 # Head 1 Head 2 Head 3 1 Box 1 Box 2 Box 3 2 Box 4 Box 5 Box 6 3 Box 7 Box 8 Box 9 Bordered Table \u00b6 # Head 1 Head 2 Head 3 1 Box 1 Box 2 Box 3 2 Box 4 Box 5 Box 6 3 Box 7 Box 8 Box 9 Buttons \u00b6 Default Buttons \u00b6 Link Button Styled Buttons \u00b6 Default Primary Success Info Warning Danger Button Sizes \u00b6 Large button Large button Default button Default button Small button Small button Extra small button Extra small button Block Level Buttons \u00b6 Block level button Block level button Alerts \u00b6 A simple primary alert\u2014check it out! A simple secondary alert\u2014check it out! A simple success alert\u2014check it out! A simple danger alert\u2014check it out! A simple warning alert\u2014check it out! A simple info alert\u2014check it out! A simple light alert\u2014check it out! A simple dark alert\u2014check it out! Callouts \u00b6 Default Callout This is a default callout. Primary Callout This is a primary callout. Success Callout This is a success callout. Info Callout This is an info callout. Warning Callout This is a warning callout. Danger Callout This is a danger callout. Admonitions \u00b6 The following admonitions are formatted like the callouts above but can be implemented in Markdown when you include the admonition Markdown extension in your mkdocs.yml file. Add the following setting to mkdocs.yml : markdown_extensions : - admonition and then follow the instructions in the extension documentation to author admonitions in your documentation. Cinder currently supports note , warning , and danger admonition types. Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. # this is a note def func(arg) { # notable things are in here! return None } Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. # this is a warning def func(arg) { # be careful! return None } Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. # this is dangerous def func(arg) { # BOOM! return None }","title":"Specimen"},{"location":"specimen/#typography","text":"","title":"Typography"},{"location":"specimen/#typefaces","text":"Headers: Inter Body: Open Sans Code: Hack","title":"Typefaces"},{"location":"specimen/#body-copy","text":"You think water moves fast? You should see ice. It moves like it has a mind . Like it knows it killed the world once and got a taste for murder. After the avalanche, it took us a week to climb out . Now, I don't know exactly when we turned on each other, but I know that seven of us survived the slide... and only five made it out. Now we took an oath, that I'm breaking now. We said we'd say it was the snow that killed the other two, but it wasn't. Nature is lethal but it doesn't hold a candle to man. Like inline code? Here is a string for you 010101010 .","title":"Body Copy"},{"location":"specimen/#lead-body-copy","text":"Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus.","title":"Lead Body Copy"},{"location":"specimen/#headings","text":"All HTML headings, <h1> through <h6> , are available. .h1 through .h6 classes are also available, for when you want to match the font styling of a heading but still want your text to be displayed inline.","title":"Headings"},{"location":"specimen/#blockquotes","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante. Someone famous in Source Title","title":"Blockquotes"},{"location":"specimen/#lists","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Lists"},{"location":"specimen/#horizontal-description-lists","text":"Something This is something SomethingElse This is something else","title":"Horizontal Description Lists"},{"location":"specimen/#contextual-colors","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.","title":"Contextual Colors"},{"location":"specimen/#code","text":"","title":"Code"},{"location":"specimen/#inline-code","text":"This is an example of inline code #import requests","title":"Inline Code"},{"location":"specimen/#tables","text":"","title":"Tables"},{"location":"specimen/#striped-table","text":"# Head 1 Head 2 Head 3 1 Box 1 Box 2 Box 3 2 Box 4 Box 5 Box 6 3 Box 7 Box 8 Box 9","title":"Striped Table"},{"location":"specimen/#bordered-table","text":"# Head 1 Head 2 Head 3 1 Box 1 Box 2 Box 3 2 Box 4 Box 5 Box 6 3 Box 7 Box 8 Box 9","title":"Bordered Table"},{"location":"specimen/#buttons","text":"","title":"Buttons"},{"location":"specimen/#default-buttons","text":"Link Button","title":"Default Buttons"},{"location":"specimen/#styled-buttons","text":"Default Primary Success Info Warning Danger","title":"Styled Buttons"},{"location":"specimen/#button-sizes","text":"Large button Large button Default button Default button Small button Small button Extra small button Extra small button","title":"Button Sizes"},{"location":"specimen/#block-level-buttons","text":"Block level button Block level button","title":"Block Level Buttons"},{"location":"specimen/#alerts","text":"A simple primary alert\u2014check it out! A simple secondary alert\u2014check it out! A simple success alert\u2014check it out! A simple danger alert\u2014check it out! A simple warning alert\u2014check it out! A simple info alert\u2014check it out! A simple light alert\u2014check it out! A simple dark alert\u2014check it out!","title":"Alerts"},{"location":"specimen/#callouts","text":"","title":"Callouts"},{"location":"specimen/#admonitions","text":"The following admonitions are formatted like the callouts above but can be implemented in Markdown when you include the admonition Markdown extension in your mkdocs.yml file. Add the following setting to mkdocs.yml : markdown_extensions : - admonition and then follow the instructions in the extension documentation to author admonitions in your documentation. Cinder currently supports note , warning , and danger admonition types. Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. # this is a note def func(arg) { # notable things are in here! return None } Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. # this is a warning def func(arg) { # be careful! return None } Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. # this is dangerous def func(arg) { # BOOM! return None }","title":"Admonitions"}]}